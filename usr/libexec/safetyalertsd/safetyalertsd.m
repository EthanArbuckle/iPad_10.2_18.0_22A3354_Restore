void sub_1000025B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(NSObject **)(v5 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10006FB3C;
    v8[3] = &unk_1000F2B98;
    v10 = v5;
    v9 = v3;
    dispatch_async(v6, v8);

  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,setupMonitoringEvent,event nil\"}", buf, 0x12u);
    }
  }

}

void sub_1000026D0(uint64_t a1, io_registry_entry_t entry)
{
  void *CFProperty;
  void *v5;
  void *v6;
  BOOL v7;
  NSObject *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  unsigned int v17;
  CFTypeRef v18;
  NSObject *v19;
  void *v20;
  int v21;
  NSObject *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  NSObject *v26;
  NSObject *v27;
  __int128 *v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  double v37;
  char v38;
  char v39;
  int v40;
  char v41;
  __int16 v42;
  char v43;
  unsigned int v44;
  __int16 v45;
  char v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  _BYTE v52[10];
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;

  CFProperty = (void *)IORegistryEntryCreateCFProperty(entry, CFSTR("CurrentCapacity"), kCFAllocatorDefault, 0);
  v5 = (void *)IORegistryEntryCreateCFProperty(entry, CFSTR("MaxCapacity"), kCFAllocatorDefault, 0);
  v6 = v5;
  if (CFProperty)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = objc_msgSend(v5, "intValue");
    v10 = objc_msgSend(CFProperty, "intValue");
    v11 = v10;
    if (v9)
      v12 = v9;
    else
      v12 = 100;
    v13 = fmin((float)v10 * 100.0 / (float)v12, 100.0);
    if (v13 >= 0.0)
      v14 = v13;
    else
      v14 = 0.0;
    v15 = (void *)IORegistryEntryCreateCFProperty(entry, CFSTR("ExternalConnected"), kCFAllocatorDefault, 0);
    v16 = v15;
    if (!v15)
    {
      v22 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v48 = 0;
        v49 = 2082;
        v50 = "";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,connected nil\"}", buf, 0x12u);
      }
      goto LABEL_52;
    }
    v17 = objc_msgSend(v15, "BOOLValue");
    v18 = IORegistryEntryCreateCFProperty(entry, CFSTR("AdapterDetails"), kCFAllocatorDefault, 0);
    v19 = SALogObjectGeneral;
    v36 = (void *)v18;
    if (!v18)
    {
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v48 = 0;
        v49 = 2082;
        v50 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,adapterDetails nil\"}", buf, 0x12u);
      }
      goto LABEL_51;
    }
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v51 = 2113;
      *(_QWORD *)v52 = v36;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,adapterDetails\", \"adapterDetails\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("Description")));
    v35 = v20;
    if (v20)
    {
      if ((objc_msgSend(v20, "hasPrefix:", CFSTR("batt")) & 1) != 0)
      {
        v21 = 1;
      }
      else if ((objc_msgSend(v35, "hasPrefix:", CFSTR("usb")) & 1) != 0)
      {
        v21 = 2;
      }
      else if ((objc_msgSend(v35, "hasPrefix:", CFSTR("external")) & 1) != 0)
      {
        v21 = 3;
      }
      else if (objc_msgSend(v35, "hasSuffix:", CFSTR("arcas")))
      {
        v21 = 4;
      }
      else
      {
        v21 = 0;
      }
      v33 = v21;
    }
    else
    {
      v33 = 0;
    }
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("FamilyCode")));
    if (v34)
      v32 = 0;
    else
      v32 = objc_msgSend(0, "intValue");
    v23 = (void *)IORegistryEntryCreateCFProperty(entry, CFSTR("FullyCharged"), kCFAllocatorDefault, 0);
    v24 = v23;
    if (v23)
    {
      v25 = objc_msgSend(v23, "BOOLValue");
    }
    else
    {
      v26 = SALogObjectGeneral;
      v25 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v48 = 0;
        v49 = 2082;
        v50 = "";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,cannot find charged status\n\"}", buf, 0x12u);
        v25 = 0;
      }
    }
    if (*(unsigned __int8 *)(a1 + 52) == v17)
    {
      v27 = SALogObjectGeneral;
      if (vabdd_f64(*(double *)(a1 + 56), v14) <= 10.0)
      {
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68290562;
          v48 = 0;
          v49 = 2082;
          v50 = "";
          v51 = 1026;
          *(_DWORD *)v52 = (int)v14;
          *(_WORD *)&v52[4] = 1026;
          *(_DWORD *)&v52[6] = v25;
          v53 = 1026;
          v54 = v17;
          v55 = 1026;
          v56 = 0;
          v57 = 1026;
          v58 = v11;
          v59 = 1026;
          v60 = v12;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,batteryInfo\", \"level\":%{public}d, \"fullyCharged\":%{public}hhd, \"connected\":%{public}hhd, \"wasConnected\":%{public}hhd, \"currentCapacity\":%{public}d, \"maximumCapacity\":%{public}d}", buf, 0x36u);
        }
LABEL_50:

LABEL_51:
LABEL_52:

        goto LABEL_53;
      }
    }
    else
    {
      v27 = SALogObjectGeneral;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290562;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v51 = 1026;
      *(_DWORD *)v52 = (int)v14;
      *(_WORD *)&v52[4] = 1026;
      *(_DWORD *)&v52[6] = v25;
      v53 = 1026;
      v54 = v17;
      v55 = 1026;
      v56 = 0;
      v57 = 1026;
      v58 = v11;
      v59 = 1026;
      v60 = v12;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,batteryInfo\", \"level\":%{public}d, \"fullyCharged\":%{public}hhd, \"connected\":%{public}hhd, \"wasConnected\":%{public}hhd, \"currentCapacity\":%{public}d, \"maximumCapacity\":%{public}d}", buf, 0x36u);
    }
    *(_BYTE *)(a1 + 52) = v17;
    *(double *)(a1 + 56) = v14;
    v28 = sub_100003038();
    v29 = v45;
    *(_WORD *)((char *)v28 + 145) = v45;
    v30 = v46;
    *((_BYTE *)v28 + 147) = v46;
    *((_DWORD *)v28 + 31) = v17 ^ 1;
    *((double *)v28 + 16) = v14;
    *((_BYTE *)v28 + 136) = v25;
    *((_BYTE *)v28 + 137) = v17;
    *((_DWORD *)v28 + 35) = v33;
    *((_BYTE *)v28 + 144) = 0;
    *((_DWORD *)v28 + 37) = v32;
    v37 = v14;
    v38 = v25;
    v39 = v17;
    v40 = v33;
    v41 = 0;
    v43 = v30;
    v42 = v29;
    v44 = v32;
    *(_DWORD *)buf = v17 ^ 1;
    v31 = *(_QWORD *)(a1 + 32);
    if (!v31)
      sub_100004FB0();
    (*(void (**)(uint64_t, uint8_t *, double *))(*(_QWORD *)v31 + 48))(v31, buf, &v37);
    goto LABEL_50;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v48 = 0;
    v49 = 2082;
    v50 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SABatteryServiceProd,cannot find current or maximum capacity\"}", buf, 0x12u);
  }
LABEL_53:

}

void sub_100002D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100002DD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(NSObject **)(v5 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100061F2C;
    v8[3] = &unk_1000F2B98;
    v10 = v5;
    v9 = v3;
    dispatch_async(v6, v8);

  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,setupMonitoringEvent,event nil\"}", buf, 0x12u);
    }
  }

}

void sub_100002EEC(uint64_t a1, io_registry_entry_t a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v8 = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,onSABatteryStateChange\"}", (uint8_t *)&v8, 0x12u);
  }
  if (a1)
  {
    if (a3 == -536723200)
      sub_1000026D0(a1, a2);
  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,pthis is null\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

__int128 *sub_100003038()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100102B38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100102B38))
  {
    xmmword_100102AA0 = (__int128)vdupq_n_s64(0xC08F400000000000);
    *(_OWORD *)algn_100102AB0 = xmmword_100102AA0;
    xmmword_100102AC0 = xmmword_1000B1D00;
    dword_100102AD0 = 5;
    unk_100102AD8 = 0u;
    unk_100102AE8 = 0u;
    unk_100102AF8 = 0u;
    unk_100102B08 = 0u;
    word_100102B18 = 0;
    dword_100102B1C = 2;
    qword_100102B20 = 0xBFF0000000000000;
    word_100102B28 = 0;
    dword_100102B2C = 0;
    byte_100102B30 = 0;
    dword_100102B34 = 0;
    __cxa_atexit((void (*)(void *))sub_1000610FC, &xmmword_100102AA0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100102B38);
  }
  return &xmmword_100102AA0;
}

_QWORD *sub_1000030F8(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _BYTE v10[24];
  _BYTE *v11;

  v5 = a2;
  sub_100004F4C((uint64_t)v10, a3);
  *a1 = off_1000F0CD0;
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_1000F0BD0;
  v8 = v5;
  a1[1] = v8;
  sub_100004F4C((uint64_t)(a1 + 2), a3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;

  return a1;
}

void sub_1000031D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100003200(uint64_t a1, void **a2)
{
  void *v4;
  char v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  char *v9;
  void *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  char *v15;
  std::string::size_type v16;
  NSObject *v17;
  const std::string::value_type *p_p;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  NSObject *v22;
  void *v23;
  __int128 *v24;
  __int128 *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  double Current;
  double v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[6];
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  void *v45[2];
  void *v46;
  __int128 v47;
  int64_t v48;
  __int128 v49;
  void *v50;
  __int128 __p;
  uint64_t v52;
  __int128 __dst;
  void *v54;
  __int128 v55;
  void *v56;
  _BYTE buf[28];
  __int16 v58;
  __int128 *v59;

  v4 = (void *)*((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((char)v4 < 0)
    v4 = a2[1];
  if (v4)
  {
    if (sub_1000049AC(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (unsigned __int8 **)a2) != *(_QWORD *)(a1 + 56))
    {
      v6 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v7 = a2;
        else
          v7 = *a2;
        *(_QWORD *)buf = 68289283;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,notPulling,noInstruction\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      if (*((char *)a2 + 23) < 0)
      {
        sub_100004870(&__dst, *a2, (unint64_t)a2[1]);
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v54 = a2[2];
      }
      sub_100003B30(a1, 202, &__dst, 0.0);
      if (SHIBYTE(v54) < 0)
      {
        v10 = (void *)__dst;
LABEL_109:
        operator delete(v10);
        return;
      }
      return;
    }
    v9 = (char *)sub_10003D044();
    if (v9[215] < 0)
    {
      sub_100004870(&__p, *((void **)v9 + 24), *((_QWORD *)v9 + 25));
    }
    else
    {
      __p = *((_OWORD *)v9 + 12);
      v52 = *((_QWORD *)v9 + 26);
    }
    v11 = HIBYTE(v52);
    LOBYTE(v12) = HIBYTE(v52);
    v13 = *((_QWORD *)&__p + 1);
    if (v52 >= 0)
      v14 = HIBYTE(v52);
    else
      v14 = *((_QWORD *)&__p + 1);
    if (!v14)
    {
      v15 = (char *)sub_1000687EC();
      if (v15[47] < 0)
      {
        sub_100004870(buf, *((void **)v15 + 3), *((_QWORD *)v15 + 4));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(v15 + 24);
        *(_QWORD *)&buf[16] = *((_QWORD *)v15 + 5);
      }
      if (SHIBYTE(v52) < 0)
        operator delete((void *)__p);
      v52 = *(_QWORD *)&buf[16];
      __p = *(_OWORD *)buf;
      v11 = HIBYTE(*(_QWORD *)&buf[16]);
      v13 = *(_QWORD *)&buf[8];
      v12 = HIBYTE(*(_QWORD *)&buf[16]);
    }
    if ((v12 & 0x80u) == 0)
      v16 = v11;
    else
      v16 = v13;
    if (!v16)
    {
      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = 68289026;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,pullServerUnknown\"}", buf, 0x12u);
      }
      if (*((char *)a2 + 23) < 0)
      {
        sub_100004870(&v49, *a2, (unint64_t)a2[1]);
      }
      else
      {
        v49 = *(_OWORD *)a2;
        v50 = a2[2];
      }
      sub_100003B30(a1, -4, &v49, -1.0);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_107;
      v36 = (void *)v49;
      goto LABEL_106;
    }
    if (*((char *)a2 + 23) < 0)
    {
      sub_100004870(buf, *a2, (unint64_t)a2[1]);
      v11 = HIBYTE(v52);
      v13 = *((_QWORD *)&__p + 1);
      LOBYTE(v12) = HIBYTE(v52);
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      *(_QWORD *)&buf[16] = a2[2];
    }
    if ((v12 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v12 & 0x80u) == 0)
      v19 = v11;
    else
      v19 = v13;
    v20 = std::string::insert((std::string *)buf, 0, p_p, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48 = v20->__r_.__value_.__r.__words[2];
    v47 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v22 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v23 = a2;
      else
        v23 = *a2;
      v24 = &v47;
      if (v48 < 0)
        v24 = (__int128 *)v47;
      *(_QWORD *)buf = 68289539;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v23;
      v58 = 2081;
      v59 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#pullServiceProd,request\", \"hash\":%{private, location:escape_only}s, \"url\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    if (v48 >= 0)
      v25 = &v47;
    else
      v25 = (__int128 *)v47;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v26));

    if (!v27)
    {
      v32 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v33 = a2;
        else
          v33 = *a2;
        *(_QWORD *)buf = 68289283;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,requestNotTriggered,urlUnavailable\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      if (*((char *)a2 + 23) < 0)
      {
        sub_100004870(v45, *a2, (unint64_t)a2[1]);
      }
      else
      {
        *(_OWORD *)v45 = *(_OWORD *)a2;
        v46 = a2[2];
      }
      sub_100003B30(a1, -4, (__int128 *)v45, -1.0);
      if (SHIBYTE(v46) < 0)
        operator delete(v45[0]);
      goto LABEL_104;
    }
    v28 = objc_msgSend(objc_alloc((Class)NSMutableURLRequest), "initWithURL:", v27);
    v29 = v28;
    if (v28)
    {
      objc_msgSend(v28, "setHTTPMethod:", CFSTR("GET"));
      objc_msgSend(v29, "setAllowsCellularAccess:", 1);
      Current = CFAbsoluteTimeGetCurrent();
      if (Current < 0.0)
        v31 = -1.0;
      else
        v31 = Current;
      if (*((char *)a2 + 23) < 0)
      {
        sub_100004870(buf, *a2, (unint64_t)a2[1]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_QWORD *)&buf[16] = a2[2];
      }
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sharedSession](NSURLSession, "sharedSession"));
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3321888768;
      v40[2] = sub_100003CE4;
      v40[3] = &unk_1000F0C10;
      v40[4] = a1;
      *(double *)&v40[5] = v31;
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_100004870(&v41, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        v41 = *(_OWORD *)buf;
        v42 = *(_QWORD *)&buf[16];
      }
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "dataTaskWithRequest:completionHandler:", v29, v40));

      objc_msgSend(v38, "setTaskDescription:", CFSTR("SafetyAlertsPull"));
      objc_msgSend(v38, "resume");

      if (SHIBYTE(v42) < 0)
        operator delete((void *)v41);
      if ((buf[23] & 0x80000000) == 0)
        goto LABEL_103;
      v39 = *(void **)buf;
    }
    else
    {
      v34 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v35 = a2;
        else
          v35 = *a2;
        *(_QWORD *)buf = 68289283;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,requestNotTriggered,urlNotAllocated\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      if (*((char *)a2 + 23) < 0)
      {
        sub_100004870(v43, *a2, (unint64_t)a2[1]);
      }
      else
      {
        *(_OWORD *)v43 = *(_OWORD *)a2;
        v44 = a2[2];
      }
      sub_100003B30(a1, -4, (__int128 *)v43, -1.0);
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_103;
      v39 = v43[0];
    }
    operator delete(v39);
LABEL_103:

LABEL_104:
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v52) & 0x80000000) == 0)
        return;
      v10 = (void *)__p;
      goto LABEL_109;
    }
    v36 = (void *)v47;
LABEL_106:
    operator delete(v36);
    goto LABEL_107;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,requestNotTriggered,hashIsEmpty\"}", buf, 0x12u);
    v5 = *((_BYTE *)a2 + 23);
  }
  if (v5 < 0)
  {
    sub_100004870(&v55, *a2, (unint64_t)a2[1]);
  }
  else
  {
    v55 = *(_OWORD *)a2;
    v56 = a2[2];
  }
  sub_100003B30(a1, -4, &v55, -1.0);
  if (SHIBYTE(v56) < 0)
  {
    v10 = (void *)v55;
    goto LABEL_109;
  }
}

void sub_1000039E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;

  if (a41 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(a1);
}

void sub_100003B30(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  char v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD block[4];
  id v13;
  _QWORD v14[5];
  __int128 __p;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t buf;
  __int16 v20;
  const char *v21;

  v7 = *((_BYTE *)a3 + 23);
  if (v7 < 0)
  {
    if (*((_QWORD *)a3 + 1))
      goto LABEL_3;
  }
  else if (*((_BYTE *)a3 + 23))
  {
LABEL_3:
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    v14[2] = sub_100004660;
    v14[3] = &unk_1000F0C40;
    v14[4] = a1;
    if (v7 < 0)
    {
      sub_100004870(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      __p = *a3;
      v16 = *((_QWORD *)a3 + 2);
    }
    v17 = a4;
    v18 = a2;
    v9 = objc_retainBlock(v14);
    v10 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000047FC;
    block[3] = &unk_1000F0C78;
    v13 = v9;
    v11 = v9;
    dispatch_async(v10, block);

    if (SHIBYTE(v16) < 0)
      operator delete((void *)__p);
    return;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v20 = 2082;
    v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,callbackWithFailure,hashEmpty\"}", (uint8_t *)&buf, 0x12u);
  }
}

void sub_100003CE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  double Current;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  NSObject *v16;
  _QWORD *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  const NSDictionary *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  _QWORD *v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[4];
  id v41;
  _QWORD *v42;
  double v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 __dst;
  uint64_t v56;
  uint64_t buf;
  __int16 v58;
  const char *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  _QWORD *v63;
  __int16 v64;
  id v65;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD **)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  if (Current < 0.0)
    Current = -1.0;
  v12 = *(double *)(a1 + 40);
  v13 = Current < 0.0 || v12 < 0.0;
  v14 = Current - v12;
  if (v13)
    v15 = -1.0;
  else
    v15 = v14;
  v16 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v17 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v17 = (_QWORD *)*v17;
    buf = 68289795;
    v58 = 2082;
    v59 = "";
    v60 = 2113;
    v61 = (uint64_t)v9;
    v62 = 2081;
    v63 = v17;
    v64 = 2113;
    v65 = v8;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#pullServiceProd,responseReceived\", \"error\":%{private, location:escape_only}@, \"hash\":%{private, location:escape_only}s, \"response\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
  }
  if (v9)
  {
    v18 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289283;
      v58 = 2082;
      v59 = "";
      v60 = 2113;
      v61 = (uint64_t)v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,response,requestFailed\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
    if (*(char *)(a1 + 71) < 0)
    {
      sub_100004870(&__dst, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      __dst = *(_OWORD *)(a1 + 48);
      v56 = *(_QWORD *)(a1 + 64);
    }
    sub_100003B30((uint64_t)v10, -3, &__dst, v15);
    if (SHIBYTE(v56) < 0)
    {
      v29 = (void *)__dst;
LABEL_51:
      operator delete(v29);
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  if ((objc_opt_respondsToSelector(v8, "statusCode") & 1) != 0)
  {
    v19 = objc_msgSend(v8, "statusCode");
    v20 = SALogObjectGeneral;
    v21 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v19 != (id)200)
    {
      if (v21)
      {
        buf = 68289283;
        v58 = 2082;
        v59 = "";
        v60 = 2049;
        v61 = (uint64_t)v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,responseError\", \"responseCode\":%{private}ld}", (uint8_t *)&buf, 0x1Cu);
      }
      if (*(char *)(a1 + 71) < 0)
      {
        sub_100004870(__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
        v52 = *(_QWORD *)(a1 + 64);
      }
      sub_100003B30((uint64_t)v10, (uint64_t)v19, (__int128 *)__p, v15);
      if (SHIBYTE(v52) < 0)
      {
        v29 = __p[0];
        goto LABEL_51;
      }
      goto LABEL_79;
    }
    if (v21)
    {
      buf = 68289283;
      v58 = 2082;
      v59 = "";
      v60 = 2049;
      v61 = 200;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,responseSuccess\", \"responseCode\":%{private}ld}", (uint8_t *)&buf, 0x1Cu);
    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v7, 0, 0));
    v23 = v22;
    if (!v22)
    {
      v32 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v33 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v33 = (_QWORD *)*v33;
        buf = 68289539;
        v58 = 2082;
        v59 = "";
        v60 = 2049;
        v61 = -5;
        v62 = 2081;
        v63 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,responseError,nilResponse\", \"responseCode\":%{private}ld, \"hash\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      }
      if (*(char *)(a1 + 71) < 0)
      {
        sub_100004870(v49, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)v49 = *(_OWORD *)(a1 + 48);
        v50 = *(_QWORD *)(a1 + 64);
      }
      sub_100003B30((uint64_t)v10, -5, (__int128 *)v49, v15);
      if (SHIBYTE(v50) < 0)
        operator delete(v49[0]);
      goto LABEL_78;
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("message")));
    if (v25
      && (v26 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v25, v26) & 1) != 0)
      && objc_msgSend(v25, "hasPrefix:", CFSTR("No alert with ID")))
    {
      v27 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v28 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v28 = (_QWORD *)*v28;
        buf = 68289539;
        v58 = 2082;
        v59 = "";
        v60 = 2049;
        v61 = -5;
        v62 = 2081;
        v63 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,responseError,hashNotFound\", \"responseCode\":%{private}ld, \"hash\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      }
      if (*(char *)(a1 + 71) < 0)
      {
        sub_100004870(v47, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)v47 = *(_OWORD *)(a1 + 48);
        v48 = *(_QWORD *)(a1 + 64);
      }
      sub_100003B30((uint64_t)v10, -5, (__int128 *)v47, v15);
      if ((SHIBYTE(v48) & 0x80000000) == 0)
        goto LABEL_77;
      v39 = v47[0];
    }
    else
    {
      if ((SACoreTelephonyProd::isAdditionalDetailsPresent((SACoreTelephonyProd *)v23, v24) & 1) != 0)
      {
        v31 = v10[1];
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_10000455C;
        v40[3] = &unk_1000F0BF0;
        v42 = v10;
        v43 = v15;
        v44 = 200;
        v41 = v23;
        dispatch_async(v31, v40);

LABEL_77:
LABEL_78:

        goto LABEL_79;
      }
      v34 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v35 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v35 = (_QWORD *)*v35;
        buf = 68289539;
        v58 = 2082;
        v59 = "";
        v60 = 2049;
        v61 = 200;
        v62 = 2081;
        v63 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,responseError,noAddlDetails\", \"responseCode\":%{private}ld, \"hash\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      }
      v36 = v10 + 6;
      v37 = v10[7];
      if (v37 >= v10[8])
      {
        v38 = sub_100004ABC(v36, (__int128 *)(a1 + 48));
      }
      else
      {
        sub_100004A60(v36, (__int128 *)(a1 + 48));
        v38 = v37 + 24;
      }
      v10[7] = v38;
      if (*(char *)(a1 + 71) < 0)
      {
        sub_100004870(&v45, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        v45 = *(_OWORD *)(a1 + 48);
        v46 = *(_QWORD *)(a1 + 64);
      }
      sub_100003B30((uint64_t)v10, 202, &v45, v15);
      if ((SHIBYTE(v46) & 0x80000000) == 0)
        goto LABEL_77;
      v39 = (void *)v45;
    }
    operator delete(v39);
    goto LABEL_77;
  }
  v30 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v58 = 2082;
    v59 = "";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,responseError,kResponseCodeMissing\"}", (uint8_t *)&buf, 0x12u);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100004870(&v53, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    v53 = *(_OWORD *)(a1 + 48);
    v54 = *(_QWORD *)(a1 + 64);
  }
  sub_100003B30((uint64_t)v10, -2, &v53, v15);
  if (SHIBYTE(v54) < 0)
  {
    v29 = (void *)v53;
    goto LABEL_51;
  }
LABEL_79:

}

void sub_100004490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  if (a29 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10000455C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_autoreleasePoolPush();
  sub_1000045A4(v2 + 16, *(_QWORD *)(a1 + 56), *(void **)(a1 + 32), *(double *)(a1 + 48));
  objc_autoreleasePoolPop(v3);
}

void sub_1000045A4(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  double v8;

  v8 = a4;
  v7 = a2;
  v6 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_100004FB0();
  (*(void (**)(uint64_t, double *, uint64_t *, id *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7, &v6);

}

void sub_100004608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_10000461C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_100004870(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10000464C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_100004660(uint64_t a1)
{
  uint64_t v2;
  id v3;
  _QWORD *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_alloc((Class)NSMutableDictionary);
  v4 = (_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v4 = (_QWORD *)*v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  v6 = objc_msgSend(v3, "initWithObjectsAndKeys:", v5, CFSTR("SafetyAlertMissingForHash"), 0);

  if (v6)
  {
    sub_1000045A4(v2 + 16, *(_QWORD *)(a1 + 72), v6, *(double *)(a1 + 64));
  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pullServiceProd,#warning,callbackWithFailure,cantCreateDictionary\"}", buf, 0x12u);
    }
  }

}

void sub_100004794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1000047B8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_100004870(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1000047E8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_1000047FC(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_100004834(uint64_t a1)
{
  sub_100004E44(a1);
  operator delete();
}

void sub_100004860(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void *sub_100004870(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1000048FC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1000048FC()
{
  sub_100004910("basic_string");
}

void sub_100004910(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100004960(exception, a1);
}

void sub_10000494C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100004960(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100004984()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_1000049AC(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

_QWORD *sub_100004A60(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_100004870((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100004AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100004ABC(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100004C50();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100004C64(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_100004BDC(a1, v15);
  v13 = a1[1];
  sub_100004DBC((uint64_t)v15);
  return v13;
}

void sub_100004BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100004DBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100004BDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100004CA8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100004C50()
{
  sub_100004910("vector");
}

void *sub_100004C64(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100004984();
  return operator new(24 * a2);
}

uint64_t sub_100004CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_100004D44((uint64_t)v12);
  return a6;
}

uint64_t sub_100004D44(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100004D78(a1);
  return a1;
}

void sub_100004D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_100004DBC(uint64_t a1)
{
  sub_100004DF0(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100004DF0(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100004E44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = off_1000F0BD0;
  v5 = (void **)(a1 + 48);
  sub_100004EC0(&v5);
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_100004EC0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100004F00((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100004F00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_100004F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100004FB0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1000F0D10;
}

void sub_100004FE8(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10000500C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  v3 = a2;
  *(_QWORD *)a1 = off_1000F0D38;
  v4 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  sub_100010374(a1 + 24);
  sub_100010374(a1 + 216);
  sub_100010374(a1 + 408);
  sub_100010480(a1 + 600);
  sub_100010374(a1 + 792);
  sub_100010480(a1 + 984);
  sub_100010480(a1 + 1176);
  sub_100010480(a1 + 1368);
  sub_100010480(a1 + 1560);
  *(_BYTE *)(a1 + 1752) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,initialized\"}", buf, 0x12u);
  }

  return a1;
}

void sub_100005174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1000051F4()
{
  JUMPOUT(0x1000051C8);
}

void sub_1000051FC()
{
  JUMPOUT(0x1000051D0);
}

void sub_100005204()
{
  JUMPOUT(0x1000051D8);
}

void sub_10000520C()
{
  JUMPOUT(0x1000051E0);
}

uint64_t sub_100005214(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v2 = *(_QWORD **)(a1 + 128);
  if (v2 == (_QWORD *)(a1 + 104))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  v4 = *(_QWORD **)(a1 + 96);
  if (v4 == (_QWORD *)(a1 + 72))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v7 = (void **)(a1 + 24);
  sub_10000E814(&v7);
  return a1;
}

void sub_1000052CC(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v5;
  const char *v6;
  NSObject *v8;
  double Current;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  _BYTE v40[24];
  _BYTE *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[6];
  _BYTE v45[24];
  _BYTE *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[6];
  _BYTE v50[24];
  _BYTE *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[6];
  _BYTE v55[24];
  _BYTE *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[6];
  _BYTE v60[24];
  _BYTE *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[6];
  _BYTE v65[24];
  _BYTE *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[6];
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[3];
  _QWORD *v73;
  std::string buf;

  if (a3 < 0.0 || !*(_QWORD *)(a2 + 24))
  {
    v5 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v6 = "{\"msg%{public}.0s\":\"#saBiomeProd,#warning,fetch,invalidArgs,skipping\"}";
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v5 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v6 = "{\"msg%{public}.0s\":\"#saBiomeProd,#warning,fetch,alreadyInProgress,skipping\"}";
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&buf, 0x12u);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  *(_DWORD *)(a1 + 16) = 1;
  v8 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289282;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = (int)a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch\", \"lookbackSeconds\":%{public}d}", (uint8_t *)&buf, 0x18u);
  }

  Current = CFAbsoluteTimeGetCurrent();
  sub_10000E8A0(&buf, "wifiAssoc");
  std::string::operator=((std::string *)(a1 + 184), &buf);
  v10 = Current - a3;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3321888768;
  v69[2] = sub_10000659C;
  v69[3] = &unk_1000F0E00;
  v69[4] = a1;
  *(double *)&v69[5] = v10;
  sub_100004F4C((uint64_t)v70, a2);
  v73 = 0;
  v72[0] = off_1000F0E88;
  v72[1] = objc_retainBlock(v69);
  v73 = v72;
  sub_100005FD4(a1, 1, (uint64_t)v72, v10);
  v11 = v73;
  if (v73 == v72)
  {
    v12 = 4;
    v11 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_18;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_18:
  sub_10000E8A0(&buf, "wifiQuality");
  std::string::operator=((std::string *)(a1 + 760), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3321888768;
  v64[2] = sub_100007088;
  v64[3] = &unk_1000F0E00;
  v64[4] = a1;
  *(double *)&v64[5] = v10;
  v13 = v65;
  sub_100004F4C((uint64_t)v65, a2);
  v68 = 0;
  v67[0] = off_1000F0E88;
  v67[1] = objc_retainBlock(v64);
  v68 = v67;
  sub_100006AC0(a1, 1, (uint64_t)v67, v10);
  v14 = v68;
  if (v68 == v67)
  {
    v15 = 4;
    v14 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_25;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_25:
  sub_10000E8A0(&buf, "wow");
  std::string::operator=((std::string *)(a1 + 568), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3321888768;
  v59[2] = sub_100007954;
  v59[3] = &unk_1000F0E00;
  v59[4] = a1;
  *(double *)&v59[5] = v10;
  v16 = v60;
  sub_100004F4C((uint64_t)v60, a2);
  v63 = 0;
  v62[0] = off_1000F0E88;
  v62[1] = objc_retainBlock(v59);
  v63 = v62;
  sub_10000738C(a1, 1, (uint64_t)v62, v10);
  v17 = v63;
  if (v63 == v62)
  {
    v18 = 4;
    v17 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_32;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_32:
  sub_10000E8A0(&buf, "cellAvailability");
  std::string::operator=((std::string *)(a1 + 376), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3321888768;
  v54[2] = sub_100007E94;
  v54[3] = &unk_1000F0E00;
  v54[4] = a1;
  *(double *)&v54[5] = v10;
  v19 = v55;
  sub_100004F4C((uint64_t)v55, a2);
  v58 = 0;
  v57[0] = off_1000F0E88;
  v57[1] = objc_retainBlock(v54);
  v58 = v57;
  sub_100007C58(a1, 1, (uint64_t)v57, v10);
  v20 = v58;
  if (v58 == v57)
  {
    v21 = 4;
    v20 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  sub_10000E8A0(&buf, "cellQuality");
  std::string::operator=((std::string *)(a1 + 1144), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  sub_10000E8A0(&buf, "cellRat");
  std::string::operator=((std::string *)(a1 + 1336), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  sub_10000E8A0(&buf, "cellRrc");
  std::string::operator=((std::string *)(a1 + 1528), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3321888768;
  v49[2] = sub_1000083D4;
  v49[3] = &unk_1000F0E00;
  v49[4] = a1;
  *(double *)&v49[5] = v10;
  v22 = v50;
  sub_100004F4C((uint64_t)v50, a2);
  v53 = 0;
  v52[0] = off_1000F0E88;
  v52[1] = objc_retainBlock(v49);
  v53 = v52;
  sub_100008198(a1, 1, (uint64_t)v52, v10);
  v23 = v53;
  if (v53 == v52)
  {
    v24 = 4;
    v23 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_50;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_50:
  sub_10000E8A0(&buf, "cellDataSwitch");
  std::string::operator=((std::string *)(a1 + 952), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3321888768;
  v44[2] = sub_100008CA8;
  v44[3] = &unk_1000F0E00;
  v44[4] = a1;
  *(double *)&v44[5] = v10;
  v25 = v45;
  sub_100004F4C((uint64_t)v45, a2);
  v48 = 0;
  v47[0] = off_1000F0E88;
  v47[1] = objc_retainBlock(v44);
  v48 = v47;
  sub_1000086E0(a1, 1, (uint64_t)v47, v10);
  v26 = v48;
  if (v48 == v47)
  {
    v27 = 4;
    v26 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_57;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_57:
  sub_10000E8A0(&buf, "apsdConnectivityStatus");
  std::string::operator=((std::string *)(a1 + 1720), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3321888768;
  v39[2] = sub_100009574;
  v39[3] = &unk_1000F0E00;
  v39[4] = a1;
  *(double *)&v39[5] = v10;
  v28 = v40;
  sub_100004F4C((uint64_t)v40, a2);
  v43 = 0;
  v42[0] = off_1000F0E88;
  v42[1] = objc_retainBlock(v39);
  v43 = v42;
  sub_100008FAC(a1, 1, (uint64_t)v42, v10);
  v29 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v29 = v42;
    v30 = v70;
  }
  else
  {
    v30 = v70;
    if (!v43)
      goto LABEL_64;
    v31 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v31))();
LABEL_64:
  if (v41 == v40)
  {
    v32 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_69;
    v32 = 5;
    v28 = v41;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v32))(v28);
LABEL_69:
  if (v46 == v45)
  {
    v33 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_74;
    v33 = 5;
    v25 = v46;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v33))(v25);
LABEL_74:
  if (v51 == v50)
  {
    v34 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_79;
    v34 = 5;
    v22 = v51;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v34))(v22);
LABEL_79:
  if (v56 == v55)
  {
    v35 = 4;
  }
  else
  {
    if (!v56)
      goto LABEL_84;
    v35 = 5;
    v19 = v56;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v35))(v19);
LABEL_84:
  if (v61 == v60)
  {
    v36 = 4;
  }
  else
  {
    if (!v61)
      goto LABEL_89;
    v36 = 5;
    v16 = v61;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v36))(v16);
LABEL_89:
  if (v66 == v65)
  {
    v37 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_94;
    v37 = 5;
    v13 = v66;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v37))(v13);
LABEL_94:
  if (v71 == v70)
  {
    v38 = 4;
  }
  else
  {
    if (!v71)
      return;
    v38 = 5;
    v30 = v71;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v38))(v30);
}

void sub_100005C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  v70 = (_QWORD *)a24;
  if ((char *)a24 == &a21)
  {
    v71 = 4;
    v70 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_6:
  if ((_QWORD *)a20 == v67)
  {
    v72 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v72 = 5;
    v67 = (_QWORD *)a20;
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v72))(v67);
LABEL_11:
  if ((_QWORD *)a34 == v66)
  {
    v73 = 4;
  }
  else
  {
    if (!a34)
      goto LABEL_16;
    v73 = 5;
    v66 = (_QWORD *)a34;
  }
  (*(void (**)(_QWORD *))(*v66 + 8 * v73))(v66);
LABEL_16:
  if ((_QWORD *)a48 == v65)
  {
    v74 = 4;
  }
  else
  {
    if (!a48)
      goto LABEL_21;
    v74 = 5;
    v65 = (_QWORD *)a48;
  }
  (*(void (**)(_QWORD *))(*v65 + 8 * v74))(v65);
LABEL_21:
  if ((_QWORD *)a62 == v64)
  {
    v75 = 4;
  }
  else
  {
    if (!a62)
      goto LABEL_26;
    v75 = 5;
    v64 = (_QWORD *)a62;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v75))(v64);
LABEL_26:
  if ((_QWORD *)STACK[0x218] == v63)
  {
    v76 = 4;
  }
  else
  {
    if (!STACK[0x218])
      goto LABEL_31;
    v76 = 5;
    v63 = (_QWORD *)STACK[0x218];
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v76))(v63);
LABEL_31:
  if ((_QWORD *)STACK[0x288] == v62)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x288])
      goto LABEL_36;
    v77 = 5;
    v62 = (_QWORD *)STACK[0x288];
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v77))(v62);
LABEL_36:
  v78 = *(_QWORD **)(v68 - 184);
  if (v78 == a10)
  {
    v79 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_41;
    v79 = 5;
    a10 = *(_QWORD **)(v68 - 184);
  }
  (*(void (**)(void))(*a10 + 8 * v79))();
LABEL_41:
  _Unwind_Resume(a1);
}

void sub_100005FD4(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[5];
  _BYTE v39[24];
  _BYTE *v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "WiFi"));
  sub_100004F4C((uint64_t)v36, a3);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10000A430;
  v33[3] = &unk_1000F0E30;
  v33[4] = a1;
  v34[0] = off_1000F11D8;
  v34[1] = objc_retainBlock(v33);
  v35 = v34;
  v13 = v12;
  if (a2 == 1)
  {
    v17 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v17, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v15, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_11;
    v14 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v14, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v15, 0, 0, 0, 0);
  }
  v18 = v16;

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publisherWithOptions:", v18));
    if (!v19)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", buf, 0x12u);
      }
      goto LABEL_31;
    }
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v42 = 3321888768;
    *((_QWORD *)&v42 + 1) = sub_1000128F4;
    v43 = &unk_1000F1038;
    v44 = a1;
    v20 = v45;
    v21 = (uint64_t)v37;
    if (v37)
    {
      if (v37 == v36)
      {
        v46 = v45;
        (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, v45);
LABEL_16:
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3321888768;
        v38[2] = sub_100012B14;
        v38[3] = &unk_1000F1198;
        v38[4] = a1;
        v24 = v39;
        v25 = (uint64_t)v35;
        if (v35)
        {
          if (v35 == v34)
          {
            v40 = v39;
            (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v39);
LABEL_21:
            v26 = objc_msgSend(v19, "sinkWithCompletion:receiveInput:", buf, v38);
            if (v40 == v39)
            {
              v27 = 4;
            }
            else
            {
              if (!v40)
                goto LABEL_26;
              v27 = 5;
              v24 = v40;
            }
            (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_26:
            if (v46 == v45)
            {
              v28 = 4;
            }
            else
            {
              if (!v46)
              {
LABEL_31:

                goto LABEL_32;
              }
              v28 = 5;
              v20 = v46;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
            goto LABEL_31;
          }
          v25 = (*(uint64_t (**)(void))(*v35 + 16))();
        }
        v40 = (_BYTE *)v25;
        goto LABEL_21;
      }
      v21 = (*(uint64_t (**)(void))(*v37 + 16))();
    }
    v46 = (_BYTE *)v21;
    goto LABEL_16;
  }
LABEL_11:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v42) = 2082;
    *(_QWORD *)((char *)&v42 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", buf, 0x12u);
  }
LABEL_32:

  v29 = v35;
  if (v35 == v34)
  {
    v30 = 4;
    v29 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = v37;
  if (v37 == v36)
  {
    v32 = 4;
    v31 = v36;
    goto LABEL_41;
  }
  if (v37)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

}

void sub_10000644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a39 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v48 = 5;
    v46 = a39;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:

  v49 = a17;
  if (a17 == &a14)
  {
    v50 = 4;
    v49 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:
  v51 = a21;
  if (a21 == &a18)
  {
    v52 = 4;
    v51 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

_QWORD *sub_10000659C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100006750;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100005FD4(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_1000066DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100006750(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,wifiAssocComplete\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 24) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100006860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000068A0(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;

  if (*(_BYTE *)(result + 24))
  {
    v2 = (_BYTE *)result;
    if (*(_BYTE *)(result + 600))
    {
      if (*(_BYTE *)(result + 408)
        && *(_BYTE *)(result + 216)
        && *(_BYTE *)(result + 984)
        && *(_BYTE *)(result + 1176)
        && *(_BYTE *)(result + 1368)
        && *(_BYTE *)(result + 792)
        && *(_BYTE *)(result + 1560))
      {
        *(_DWORD *)(result + 16) = 2;
        if (*(_BYTE *)(result + 1752))
        {
          v4 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v7 = 68289026;
            v8 = 0;
            v9 = 2082;
            v10 = "";
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,#warning,fetchCompleteButResetTriggered\"}", (uint8_t *)&v7, 0x12u);
          }
          v2[1752] = 0;
          (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 32))(v2);
        }
        v5 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v7 = 68289026;
          v8 = 0;
          v9 = 2082;
          v10 = "";
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetchComplete\"}", (uint8_t *)&v7, 0x12u);
        }
        v6 = *(_QWORD *)(a2 + 24);
        if (!v6)
          sub_100004FB0();
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      }
    }
  }
  return result;
}

uint64_t sub_100006A40(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_100006A4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100006A80(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 48, a2 + 48);
}

_QWORD *sub_100006A8C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100006AC0(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[5];
  _BYTE v39[24];
  _BYTE *v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "WiFiAvailabilityStatus"));
  sub_100004F4C((uint64_t)v36, a3);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10000A6B8;
  v33[3] = &unk_1000F0E30;
  v33[4] = a1;
  v34[0] = off_1000F13D0;
  v34[1] = objc_retainBlock(v33);
  v35 = v34;
  v13 = v12;
  if (a2 == 1)
  {
    v17 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v17, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v15, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_11;
    v14 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v14, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v15, 0, 0, 0, 0);
  }
  v18 = v16;

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publisherWithOptions:", v18));
    if (!v19)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", buf, 0x12u);
      }
      goto LABEL_31;
    }
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v42 = 3321888768;
    *((_QWORD *)&v42 + 1) = sub_10001466C;
    v43 = &unk_1000F1038;
    v44 = a1;
    v20 = v45;
    v21 = (uint64_t)v37;
    if (v37)
    {
      if (v37 == v36)
      {
        v46 = v45;
        (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, v45);
LABEL_16:
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3321888768;
        v38[2] = sub_10001488C;
        v38[3] = &unk_1000F1390;
        v38[4] = a1;
        v24 = v39;
        v25 = (uint64_t)v35;
        if (v35)
        {
          if (v35 == v34)
          {
            v40 = v39;
            (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v39);
LABEL_21:
            v26 = objc_msgSend(v19, "sinkWithCompletion:receiveInput:", buf, v38);
            if (v40 == v39)
            {
              v27 = 4;
            }
            else
            {
              if (!v40)
                goto LABEL_26;
              v27 = 5;
              v24 = v40;
            }
            (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_26:
            if (v46 == v45)
            {
              v28 = 4;
            }
            else
            {
              if (!v46)
              {
LABEL_31:

                goto LABEL_32;
              }
              v28 = 5;
              v20 = v46;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
            goto LABEL_31;
          }
          v25 = (*(uint64_t (**)(void))(*v35 + 16))();
        }
        v40 = (_BYTE *)v25;
        goto LABEL_21;
      }
      v21 = (*(uint64_t (**)(void))(*v37 + 16))();
    }
    v46 = (_BYTE *)v21;
    goto LABEL_16;
  }
LABEL_11:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v42) = 2082;
    *(_QWORD *)((char *)&v42 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", buf, 0x12u);
  }
LABEL_32:

  v29 = v35;
  if (v35 == v34)
  {
    v30 = 4;
    v29 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = v37;
  if (v37 == v36)
  {
    v32 = 4;
    v31 = v36;
    goto LABEL_41;
  }
  if (v37)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

}

void sub_100006F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a39 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v48 = 5;
    v46 = a39;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:

  v49 = a17;
  if (a17 == &a14)
  {
    v50 = 4;
    v49 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:
  v51 = a21;
  if (a21 == &a18)
  {
    v52 = 4;
    v51 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

_QWORD *sub_100007088(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10000723C;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100006AC0(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_1000071C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10000723C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,wifiQualityComplete\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 600) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_10000734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10000738C(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[5];
  _BYTE v39[24];
  _BYTE *v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "WakeOnWiFiStatus"));
  sub_100004F4C((uint64_t)v36, a3);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100009FAC;
  v33[3] = &unk_1000F0E30;
  v33[4] = a1;
  v34[0] = off_1000F10E0;
  v34[1] = objc_retainBlock(v33);
  v35 = v34;
  v13 = v12;
  if (a2 == 1)
  {
    v17 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v17, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v15, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_11;
    v14 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v14, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v15, 0, 0, 0, 0);
  }
  v18 = v16;

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publisherWithOptions:", v18));
    if (!v19)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", buf, 0x12u);
      }
      goto LABEL_31;
    }
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v42 = 3321888768;
    *((_QWORD *)&v42 + 1) = sub_100012290;
    v43 = &unk_1000F1038;
    v44 = a1;
    v20 = v45;
    v21 = (uint64_t)v37;
    if (v37)
    {
      if (v37 == v36)
      {
        v46 = v45;
        (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, v45);
LABEL_16:
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3321888768;
        v38[2] = sub_1000124F0;
        v38[3] = &unk_1000F10A0;
        v38[4] = a1;
        v24 = v39;
        v25 = (uint64_t)v35;
        if (v35)
        {
          if (v35 == v34)
          {
            v40 = v39;
            (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v39);
LABEL_21:
            v26 = objc_msgSend(v19, "sinkWithCompletion:receiveInput:", buf, v38);
            if (v40 == v39)
            {
              v27 = 4;
            }
            else
            {
              if (!v40)
                goto LABEL_26;
              v27 = 5;
              v24 = v40;
            }
            (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_26:
            if (v46 == v45)
            {
              v28 = 4;
            }
            else
            {
              if (!v46)
              {
LABEL_31:

                goto LABEL_32;
              }
              v28 = 5;
              v20 = v46;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
            goto LABEL_31;
          }
          v25 = (*(uint64_t (**)(void))(*v35 + 16))();
        }
        v40 = (_BYTE *)v25;
        goto LABEL_21;
      }
      v21 = (*(uint64_t (**)(void))(*v37 + 16))();
    }
    v46 = (_BYTE *)v21;
    goto LABEL_16;
  }
LABEL_11:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v42) = 2082;
    *(_QWORD *)((char *)&v42 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", buf, 0x12u);
  }
LABEL_32:

  v29 = v35;
  if (v35 == v34)
  {
    v30 = 4;
    v29 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = v37;
  if (v37 == v36)
  {
    v32 = 4;
    v31 = v36;
    goto LABEL_41;
  }
  if (v37)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

}

void sub_100007804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a39 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v48 = 5;
    v46 = a39;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:

  v49 = a17;
  if (a17 == &a14)
  {
    v50 = 4;
    v49 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:
  v51 = a21;
  if (a21 == &a18)
  {
    v52 = 4;
    v51 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

_QWORD *sub_100007954(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100007B08;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_10000738C(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_100007A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100007B08(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,wowComplete\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 408) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100007C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100007C58(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[3];
  _QWORD *v19;
  _BYTE v20[24];
  _BYTE *v21;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "CellularQualityStatus"));
  sub_100004F4C((uint64_t)v20, a3);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10000AF44;
  v17[3] = &unk_1000F0E30;
  v17[4] = a1;
  v18[0] = off_1000F14C8;
  v18[1] = objc_retainBlock(v17);
  v19 = v18;
  sub_10000AB74(a1, a2, v12, (uint64_t)v20, (uint64_t)v18, a4);
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  v15 = v21;
  if (v21 == v20)
  {
    v16 = 4;
    v15 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v16 = 5;
LABEL_10:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

}

void sub_100007DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_11:

  _Unwind_Resume(a1);
}

_QWORD *sub_100007E94(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100008048;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100007C58(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_100007FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100008048(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,CellularAvailabilityComplete\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 216) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100008158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100008198(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[3];
  _QWORD *v19;
  _BYTE v20[24];
  _BYTE *v21;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "CellularQualityStatus"));
  sub_100004F4C((uint64_t)v20, a3);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10000B170;
  v17[3] = &unk_1000F0E30;
  v17[4] = a1;
  v18[0] = off_1000F14C8;
  v18[1] = objc_retainBlock(v17);
  v19 = v18;
  sub_10000AB74(a1, a2, v12, (uint64_t)v20, (uint64_t)v18, a4);
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  v15 = v21;
  if (v21 == v20)
  {
    v16 = 4;
    v15 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v16 = 5;
LABEL_10:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

}

void sub_100008330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_11:

  _Unwind_Resume(a1);
}

_QWORD *sub_1000083D4(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100008588;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100008198(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_100008514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100008588(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_BYTE **)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,CellularQualityComplete\"}", buf, 0x12u);
  }
  v2[1368] = 1;
  v2[1176] = 1;
  v2[984] = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0((uint64_t)v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1000086A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000086E0(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[5];
  _BYTE v39[24];
  _BYTE *v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "CellularDataEnabled"));
  sub_100004F4C((uint64_t)v36, a3);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10000B988;
  v33[3] = &unk_1000F0E30;
  v33[4] = a1;
  v34[0] = off_1000F16B8;
  v34[1] = objc_retainBlock(v33);
  v35 = v34;
  v13 = v12;
  if (a2 == 1)
  {
    v17 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v17, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v15, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_11;
    v14 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v14, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v15, 0, 0, 0, 0);
  }
  v18 = v16;

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publisherWithOptions:", v18));
    if (!v19)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", buf, 0x12u);
      }
      goto LABEL_31;
    }
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v42 = 3321888768;
    *((_QWORD *)&v42 + 1) = sub_1000158D8;
    v43 = &unk_1000F1038;
    v44 = a1;
    v20 = v45;
    v21 = (uint64_t)v37;
    if (v37)
    {
      if (v37 == v36)
      {
        v46 = v45;
        (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, v45);
LABEL_16:
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3321888768;
        v38[2] = sub_100015AF8;
        v38[3] = &unk_1000F1678;
        v38[4] = a1;
        v24 = v39;
        v25 = (uint64_t)v35;
        if (v35)
        {
          if (v35 == v34)
          {
            v40 = v39;
            (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v39);
LABEL_21:
            v26 = objc_msgSend(v19, "sinkWithCompletion:receiveInput:", buf, v38);
            if (v40 == v39)
            {
              v27 = 4;
            }
            else
            {
              if (!v40)
                goto LABEL_26;
              v27 = 5;
              v24 = v40;
            }
            (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_26:
            if (v46 == v45)
            {
              v28 = 4;
            }
            else
            {
              if (!v46)
              {
LABEL_31:

                goto LABEL_32;
              }
              v28 = 5;
              v20 = v46;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
            goto LABEL_31;
          }
          v25 = (*(uint64_t (**)(void))(*v35 + 16))();
        }
        v40 = (_BYTE *)v25;
        goto LABEL_21;
      }
      v21 = (*(uint64_t (**)(void))(*v37 + 16))();
    }
    v46 = (_BYTE *)v21;
    goto LABEL_16;
  }
LABEL_11:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v42) = 2082;
    *(_QWORD *)((char *)&v42 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", buf, 0x12u);
  }
LABEL_32:

  v29 = v35;
  if (v35 == v34)
  {
    v30 = 4;
    v29 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = v37;
  if (v37 == v36)
  {
    v32 = 4;
    v31 = v36;
    goto LABEL_41;
  }
  if (v37)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

}

void sub_100008B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a39 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v48 = 5;
    v46 = a39;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:

  v49 = a17;
  if (a17 == &a14)
  {
    v50 = 4;
    v49 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:
  v51 = a21;
  if (a21 == &a18)
  {
    v52 = 4;
    v51 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

_QWORD *sub_100008CA8(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100008E5C;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_1000086E0(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_100008DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100008E5C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,CellularDataComplete\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 792) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100008F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100008FAC(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[5];
  _BYTE v39[24];
  _BYTE *v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;

  v8 = BiomeLibrary();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "Device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "Wireless"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "APSDInterfaceStatus"));
  sub_100004F4C((uint64_t)v36, a3);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10000B5F0;
  v33[3] = &unk_1000F0E30;
  v33[4] = a1;
  v34[0] = off_1000F15C0;
  v34[1] = objc_retainBlock(v33);
  v35 = v34;
  v13 = v12;
  if (a2 == 1)
  {
    v17 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v17, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v15, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_11;
    v14 = objc_alloc((Class)BMPublisherOptions);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4));
    v16 = objc_msgSend(v14, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v15, 0, 0, 0, 0);
  }
  v18 = v16;

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publisherWithOptions:", v18));
    if (!v19)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", buf, 0x12u);
      }
      goto LABEL_31;
    }
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v42 = 3321888768;
    *((_QWORD *)&v42 + 1) = sub_1000152B4;
    v43 = &unk_1000F1038;
    v44 = a1;
    v20 = v45;
    v21 = (uint64_t)v37;
    if (v37)
    {
      if (v37 == v36)
      {
        v46 = v45;
        (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, v45);
LABEL_16:
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3321888768;
        v38[2] = sub_1000154D4;
        v38[3] = &unk_1000F1580;
        v38[4] = a1;
        v24 = v39;
        v25 = (uint64_t)v35;
        if (v35)
        {
          if (v35 == v34)
          {
            v40 = v39;
            (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v39);
LABEL_21:
            v26 = objc_msgSend(v19, "sinkWithCompletion:receiveInput:", buf, v38);
            if (v40 == v39)
            {
              v27 = 4;
            }
            else
            {
              if (!v40)
                goto LABEL_26;
              v27 = 5;
              v24 = v40;
            }
            (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_26:
            if (v46 == v45)
            {
              v28 = 4;
            }
            else
            {
              if (!v46)
              {
LABEL_31:

                goto LABEL_32;
              }
              v28 = 5;
              v20 = v46;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
            goto LABEL_31;
          }
          v25 = (*(uint64_t (**)(void))(*v35 + 16))();
        }
        v40 = (_BYTE *)v25;
        goto LABEL_21;
      }
      v21 = (*(uint64_t (**)(void))(*v37 + 16))();
    }
    v46 = (_BYTE *)v21;
    goto LABEL_16;
  }
LABEL_11:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v42) = 2082;
    *(_QWORD *)((char *)&v42 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", buf, 0x12u);
  }
LABEL_32:

  v29 = v35;
  if (v35 == v34)
  {
    v30 = 4;
    v29 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = v37;
  if (v37 == v36)
  {
    v32 = 4;
    v31 = v36;
    goto LABEL_41;
  }
  if (v37)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

}

void sub_100009424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a39 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v48 = 5;
    v46 = a39;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
LABEL_6:

  v49 = a17;
  if (a17 == &a14)
  {
    v50 = 4;
    v49 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:
  v51 = a21;
  if (a21 == &a18)
  {
    v52 = 4;
    v51 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

_QWORD *sub_100009574(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100009728;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100008FAC(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_1000096B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100009728(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,apsdConnectivity\"}", buf, 0x12u);
  }
  *(_BYTE *)(v2 + 1560) = 1;
  sub_100004F4C((uint64_t)v6, a1 + 40);
  sub_1000068A0(v2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100009838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100009878(uint64_t a1, uint64_t a2, double a3)
{
  double Current;
  double v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  _QWORD v18[6];
  _BYTE v19[24];
  _BYTE *v20;
  _QWORD v21[3];
  _QWORD *v22;

  Current = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(a1 + 1560) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1568) = _Q0;
  *(_BYTE *)(a1 + 1712) = 0;
  sub_10000E854((uint64_t *)(a1 + 1584));
  sub_10000E8A0(&__p, "apsdConnectivityStatus");
  std::string::operator=((std::string *)(a1 + 1720), &__p);
  v12 = Current - a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3321888768;
  v18[2] = sub_100009AA4;
  v18[3] = &unk_1000F0E00;
  v18[4] = a1;
  *(double *)&v18[5] = v12;
  v13 = v19;
  sub_100004F4C((uint64_t)v19, a2);
  v21[0] = off_1000F0E88;
  v21[1] = objc_retainBlock(v18);
  v22 = v21;
  sub_100008FAC(a1, 1, (uint64_t)v21, v12);
  result = v22;
  if (v22 == v21)
  {
    v15 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v15 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_8:
  if (v20 == v19)
  {
    v16 = 4;
  }
  else
  {
    if (!v20)
      return result;
    v16 = 5;
    v13 = v20;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v16))(v13);
}

void sub_100009A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = *(_QWORD **)(v25 - 64);
  if (v27 == (_QWORD *)(v25 - 88))
  {
    v28 = 4;
    v27 = (_QWORD *)(v25 - 88);
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_6:
  if (a24 == v24)
  {
    v29 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_11;
    v29 = 5;
    v24 = a24;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v29))(v24);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100009AA4(uint64_t a1)
{
  uint64_t v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100009C58;
  v11[3] = &unk_1000F0DD0;
  v11[4] = v1;
  v3 = v12;
  sub_100004F4C((uint64_t)v12, a1 + 48);
  v14[0] = off_1000F0E88;
  v14[1] = objc_retainBlock(v11);
  v15 = v14;
  sub_100008FAC(v1, 0, (uint64_t)v14, v2);
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v9))(result, v4, v5, v6, v7);
LABEL_6:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v3 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v10))(v3);
}

void sub_100009BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100009C58(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,fetch,apsdConnectivity\"}", (uint8_t *)v6, 0x12u);
  }
  *(_BYTE *)(v2 + 1560) = 1;
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
}

void sub_100009D38(uint64_t a1)
{
  NSObject *v1;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  __int128 v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;

  if (*(_BYTE *)(a1 + 1752))
  {
    v1 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,#warning,resetAlreadyTriggered\"}", buf, 0x12u);
    }
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v3 == 1)
    {
      if (v5)
      {
        *(_DWORD *)buf = 68289026;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,#warning,resetWhileFetching\"}", buf, 0x12u);
      }
      *(_BYTE *)(a1 + 1752) = 1;
    }
    else
    {
      if (v5)
      {
        *(_DWORD *)buf = 68289026;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,reset\"}", buf, 0x12u);
      }
      *(_BYTE *)(a1 + 24) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v11 = _Q0;
      *(_OWORD *)(a1 + 32) = _Q0;
      *(_BYTE *)(a1 + 176) = 0;
      sub_10000E854((uint64_t *)(a1 + 48));
      *(_BYTE *)(a1 + 600) = 0;
      *(_OWORD *)(a1 + 608) = v11;
      *(_BYTE *)(a1 + 752) = 0;
      sub_10000E854((uint64_t *)(a1 + 624));
      *(_BYTE *)(a1 + 408) = 0;
      *(_OWORD *)(a1 + 416) = v11;
      *(_BYTE *)(a1 + 560) = 0;
      sub_10000E854((uint64_t *)(a1 + 432));
      *(_BYTE *)(a1 + 216) = 0;
      *(_OWORD *)(a1 + 224) = v11;
      *(_BYTE *)(a1 + 368) = 0;
      sub_10000E854((uint64_t *)(a1 + 240));
      *(_BYTE *)(a1 + 984) = 0;
      *(_OWORD *)(a1 + 992) = v11;
      *(_BYTE *)(a1 + 1136) = 0;
      sub_10000E854((uint64_t *)(a1 + 1008));
      *(_BYTE *)(a1 + 1176) = 0;
      *(_OWORD *)(a1 + 1184) = v11;
      *(_BYTE *)(a1 + 1328) = 0;
      sub_10000E854((uint64_t *)(a1 + 1200));
      *(_BYTE *)(a1 + 1368) = 0;
      *(_OWORD *)(a1 + 1376) = v11;
      *(_BYTE *)(a1 + 1520) = 0;
      sub_10000E854((uint64_t *)(a1 + 1392));
      *(_BYTE *)(a1 + 792) = 0;
      *(_OWORD *)(a1 + 800) = v11;
      *(_BYTE *)(a1 + 944) = 0;
      sub_10000E854((uint64_t *)(a1 + 816));
      *(_BYTE *)(a1 + 1560) = 0;
      *(_OWORD *)(a1 + 1568) = v11;
      *(_BYTE *)(a1 + 1712) = 0;
      sub_10000E854((uint64_t *)(a1 + 1584));
      *(_DWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 1752) = 0;
    }
  }
}

void sub_100009FAC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 v12;
  void *v13[2];
  uint64_t v14;
  uint8_t buf[8];
  __int16 v16;
  _BYTE __p[30];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    *(_QWORD *)__p = "";
    *(_WORD *)&__p[8] = 2049;
    *(_QWORD *)&__p[10] = v7;
    *(_WORD *)&__p[18] = 1025;
    *(_DWORD *)&__p[20] = objc_msgSend(v8, "starting");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,WakeOnWifiStatus\", \"timestamp\":\"%{private}0.1f\", \"isStarting\":%{private}hhd}", buf, 0x22u);

  }
  objc_msgSend(v3, "timestamp");
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v12 = objc_msgSend(v11, "starting");
  sub_10000E8A0(v13, "{}");
  *(_QWORD *)buf = v10;
  LOBYTE(v16) = v12;
  if (SHIBYTE(v14) < 0)
  {
    sub_100004870(&__p[6], v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)&__p[6] = *(_OWORD *)v13;
    *(_QWORD *)&__p[22] = v14;
  }
  sub_10000A1D0(v4 + 408, (double *)buf);
  if ((__p[29] & 0x80000000) != 0)
    operator delete(*(void **)&__p[6]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);

}

void sub_10000A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_10000A1D0(uint64_t a1, double *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[4];

  v26[0] = off_1000F0F18;
  v26[1] = a1;
  v27 = v26;
  v24[0] = off_1000F0F98;
  v24[1] = a1;
  v25 = v24;
  sub_10001177C((uint64_t)v28, (uint64_t)v26, (uint64_t)v24);
  v4 = v25;
  if (v25 == v24)
  {
    v5 = 4;
    v4 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v27;
  if (v27 == v26)
  {
    v7 = 4;
    v6 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v17[0] = 68289539;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2081;
    v21 = v9;
    v22 = 2081;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,update\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)v17, 0x26u);
  }
  sub_1000106DC(a1, a2);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 71))
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 56))
LABEL_21:
    sub_100010958((char *)a1);
LABEL_22:
  if (!*(_BYTE *)(a1 + 1) && !*(_BYTE *)(a1 + 185))
  {
    *(_BYTE *)a1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_BYTE *)(a1 + 152) = 0;
    sub_10000E854((uint64_t *)(a1 + 24));
  }
  return sub_100012184(v28);
}

void sub_10000A3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10000A430(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  uint8_t buf[8];
  __int16 v19;
  _BYTE __p[30];
  unsigned int v21;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "SSID")));
    v10 = objc_msgSend(v9, "UTF8String");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v19 = 2082;
    *(_QWORD *)__p = "";
    *(_WORD *)&__p[8] = 2049;
    *(_QWORD *)&__p[10] = v7;
    *(_WORD *)&__p[18] = 2081;
    *(_QWORD *)&__p[20] = v10;
    *(_WORD *)&__p[28] = 1026;
    v21 = objc_msgSend(v11, "starting");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,WifiAssociatedStatus\", \"timestamp\":\"%{private}0.1f\", \"SSID\":%{private, location:escape_only}s, \"isStarting\":%{public}hhd}", buf, 0x2Cu);

  }
  objc_msgSend(v3, "timestamp");
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v15 = objc_msgSend(v14, "starting");
  sub_10000E8A0(v16, "{}");
  *(_QWORD *)buf = v13;
  LOBYTE(v19) = v15;
  if (SHIBYTE(v17) < 0)
  {
    sub_100004870(&__p[6], v16[0], (unint64_t)v16[1]);
  }
  else
  {
    *(_OWORD *)&__p[6] = *(_OWORD *)v16;
    *(_QWORD *)&__p[22] = v17;
  }
  sub_10000A1D0(v4 + 24, (double *)buf);
  if ((__p[29] & 0x80000000) != 0)
    operator delete(*(void **)&__p[6]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);

}

void sub_10000A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10000A6B8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *__p[2];
  uint64_t v16;
  uint8_t buf[8];
  _BYTE v18[32];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v9 = objc_msgSend(v8, "starting");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 2082;
    *(_QWORD *)&v18[2] = "";
    *(_WORD *)&v18[10] = 2049;
    *(_QWORD *)&v18[12] = v7;
    *(_WORD *)&v18[20] = 1025;
    *(_DWORD *)&v18[22] = v9;
    *(_WORD *)&v18[26] = 1025;
    *(_DWORD *)&v18[28] = objc_msgSend(v10, "quality");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,WifiQualityStatus\", \"timestamp\":\"%{private}0.1f\", \"isStarting\":%{private}hhd, \"wifiQuality\":%{private}d}", buf, 0x28u);

  }
  objc_msgSend(v3, "timestamp");
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v14 = objc_msgSend(v13, "quality");
  sub_10000E8A0(__p, "{}");
  *(_QWORD *)buf = v12;
  *(_DWORD *)v18 = v14;
  if (SHIBYTE(v16) < 0)
  {
    sub_100004870(&v18[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v18[8] = *(_OWORD *)__p;
    *(_QWORD *)&v18[24] = v16;
  }
  sub_10000A914(v4 + 600, (double *)buf);
  if ((v18[31] & 0x80000000) != 0)
    operator delete(*(void **)&v18[8]);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);

}

void sub_10000A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_10000A914(uint64_t a1, double *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[4];

  v26[0] = off_1000F1268;
  v26[1] = a1;
  v27 = v26;
  v24[0] = off_1000F12E8;
  v24[1] = a1;
  v25 = v24;
  sub_10001177C((uint64_t)v28, (uint64_t)v26, (uint64_t)v24);
  v4 = v25;
  if (v25 == v24)
  {
    v5 = 4;
    v4 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v27;
  if (v27 == v26)
  {
    v7 = 4;
    v6 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v17[0] = 68289539;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2081;
    v21 = v9;
    v22 = 2081;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,update\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)v17, 0x26u);
  }
  sub_100012F18(a1, a2);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 71))
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 56))
LABEL_21:
    sub_100013194((char *)a1);
LABEL_22:
  if (!*(_BYTE *)(a1 + 1) && !*(_BYTE *)(a1 + 185))
  {
    *(_BYTE *)a1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_BYTE *)(a1 + 152) = 0;
    sub_10000E854((uint64_t *)(a1 + 24));
  }
  return sub_100012184(v28);
}

void sub_10000AAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10000AB74(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, double a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[5];
  _BYTE v26[24];
  _BYTE *v27;
  _QWORD v28[5];
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t buf;
  __int16 v32;
  const char *v33;

  v11 = a3;
  if (a2 == 1)
  {
    v15 = objc_alloc((Class)BMPublisherOptions);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a6));
    v14 = objc_msgSend(v15, "initWithStartDate:endDate:maxEvents:lastN:reversed:", 0, v13, 0, 1, 0);
  }
  else
  {
    if (a2)
      goto LABEL_10;
    v12 = objc_alloc((Class)BMPublisherOptions);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a6));
    v14 = objc_msgSend(v12, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v13, 0, 0, 0, 0);
  }
  v16 = v14;

  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publisherWithOptions:", v16));
    if (!v17)
    {
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        buf = 68289026;
        v32 = 2082;
        v33 = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noPublisher\"}", (uint8_t *)&buf, 0x12u);
      }
      goto LABEL_21;
    }
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768;
    v28[2] = sub_100014C90;
    v28[3] = &unk_1000F1038;
    v28[4] = a1;
    v18 = v29;
    sub_100004F4C((uint64_t)v29, a4);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3321888768;
    v25[2] = sub_100014EB0;
    v25[3] = &unk_1000F1488;
    v25[4] = a1;
    v19 = v26;
    sub_100004F4C((uint64_t)v26, a5);
    v20 = objc_msgSend(v17, "sinkWithCompletion:receiveInput:", v28, v25);
    if (v27 == v26)
    {
      v21 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_16;
      v21 = 5;
      v19 = v27;
    }
    (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_16:
    if (v30 == v29)
    {
      v24 = 4;
    }
    else
    {
      if (!v30)
      {
LABEL_21:

        goto LABEL_22;
      }
      v24 = 5;
      v18 = v30;
    }
    (*(void (**)(_QWORD *))(*v18 + 8 * v24))(v18);
    goto LABEL_21;
  }
LABEL_10:
  v22 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    buf = 68289026;
    v32 = 2082;
    v33 = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saBiomeProd,invokeBiomeFailed,noOptions\"}", (uint8_t *)&buf, 0x12u);
  }
LABEL_22:

}

void sub_10000AE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;

  if (a17 == v29)
  {
    v32 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v32 = 5;
    v29 = a17;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v32))(v29);
LABEL_6:
  if (a26 == v30)
  {
    v33 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_11;
    v33 = 5;
    v30 = a26;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v33))(v30);
LABEL_11:

  _Unwind_Resume(a1);
}

void sub_10000AF44(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13[2];
  uint64_t v14;
  uint8_t buf[8];
  __int16 v16;
  _BYTE __p[30];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    *(_QWORD *)__p = "";
    *(_WORD *)&__p[8] = 2049;
    *(_QWORD *)&__p[10] = v7;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = objc_msgSend(v8, "deviceRegistrationState");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,CellularAvailabilityStatus\", \"timestamp\":\"%{private}0.1f\", \"deviceRegistrationStatus\":%{public}d}", buf, 0x22u);

  }
  objc_msgSend(v3, "timestamp");
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v12 = objc_msgSend(v11, "deviceRegistrationState");
  sub_10000E8A0(v13, "{}");
  *(_QWORD *)buf = v10;
  LOBYTE(v16) = v12 == 1;
  if (SHIBYTE(v14) < 0)
  {
    sub_100004870(&__p[6], v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)&__p[6] = *(_OWORD *)v13;
    *(_QWORD *)&__p[22] = v14;
  }
  sub_10000A1D0(v4 + 216, (double *)buf);
  if ((__p[29] & 0x80000000) != 0)
    operator delete(*(void **)&__p[6]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);

}

void sub_10000B0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10000B170(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  void *__p[2];
  uint64_t v28;
  uint8_t buf[8];
  _BYTE v30[32];
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v9 = objc_msgSend(v8, "deviceRegistrationState");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v11 = objc_msgSend(v10, "quality");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v13 = objc_msgSend(v12, "rat");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v30 = 2082;
    *(_QWORD *)&v30[2] = "";
    *(_WORD *)&v30[10] = 2049;
    *(_QWORD *)&v30[12] = v7;
    *(_WORD *)&v30[20] = 1026;
    *(_DWORD *)&v30[22] = v9;
    *(_WORD *)&v30[26] = 1026;
    *(_DWORD *)&v30[28] = v11;
    v31 = 1026;
    v32 = v13;
    v33 = 1026;
    v34 = objc_msgSend(v14, "rrcStatus");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,CellularQualityStatus\", \"timestamp\":\"%{private}0.1f\", \"deviceRegistrationStatus\":%{public}d, \"quality\":%{public}d, \"RAT\":%{public}d, \"RRC\":%{public}d}", buf, 0x34u);

  }
  objc_msgSend(v3, "timestamp");
  v16 = v15;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v18 = objc_msgSend(v17, "quality");
  sub_10000E8A0(__p, "{}");
  *(_QWORD *)buf = v16;
  *(_DWORD *)v30 = v18;
  if (SHIBYTE(v28) < 0)
  {
    sub_100004870(&v30[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v30[8] = *(_OWORD *)__p;
    *(_QWORD *)&v30[24] = v28;
  }
  sub_10000A914(v4 + 984, (double *)buf);
  if ((v30[31] & 0x80000000) != 0)
    operator delete(*(void **)&v30[8]);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);

  objc_msgSend(v3, "timestamp");
  v20 = v19;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v22 = objc_msgSend(v21, "rat");
  sub_10000E8A0(__p, "{}");
  *(_QWORD *)buf = v20;
  *(_DWORD *)v30 = v22;
  if (SHIBYTE(v28) < 0)
  {
    sub_100004870(&v30[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v30[8] = *(_OWORD *)__p;
    *(_QWORD *)&v30[24] = v28;
  }
  sub_10000A914(v4 + 1176, (double *)buf);
  if ((v30[31] & 0x80000000) != 0)
    operator delete(*(void **)&v30[8]);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);

  objc_msgSend(v3, "timestamp");
  v24 = v23;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v26 = objc_msgSend(v25, "rrcStatus");
  sub_10000E8A0(__p, "{}");
  *(_QWORD *)buf = v24;
  *(_DWORD *)v30 = v26;
  if (SHIBYTE(v28) < 0)
  {
    sub_100004870(&v30[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v30[8] = *(_OWORD *)__p;
    *(_QWORD *)&v30[24] = v28;
  }
  sub_10000A914(v4 + 1368, (double *)buf);
  if ((v30[31] & 0x80000000) != 0)
    operator delete(*(void **)&v30[8]);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);

}

void sub_10000B4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10000B5F0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  int v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  unsigned __int8 v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  uint8_t buf[8];
  _BYTE v29[32];
  __int16 v30;
  unsigned int v31;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v9 = objc_msgSend(v8, "starting");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v11 = objc_msgSend(v10, "isAPSDOverCell");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68290051;
    *(_WORD *)v29 = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&v29[2] = "";
    *(_WORD *)&v29[10] = 2049;
    *(_QWORD *)&v29[12] = v7;
    *(_WORD *)&v29[20] = 1025;
    *(_DWORD *)&v29[22] = v9;
    *(_WORD *)&v29[26] = 1025;
    *(_DWORD *)&v29[28] = v11;
    v30 = 1025;
    v31 = objc_msgSend(v12, "isAPSDOverWiFi");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,apsdConnectivityStatus\", \"timestamp\":\"%{private}0.1f\", \"starting\":%{private}d, \"isAPSDOverCell\":%{private}d, \"isAPSDOverWiFi\":%{private}d}", buf, 0x2Eu);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  if ((objc_msgSend(v13, "isAPSDOverCell") & 1) != 0)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v15 = objc_msgSend(v14, "isAPSDOverWiFi");

    if ((v15 & 1) != 0)
    {
      v16 = 1;
      goto LABEL_16;
    }
  }
  else
  {

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  if (objc_msgSend(v17, "isAPSDOverCell"))
  {

    goto LABEL_10;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v19 = objc_msgSend(v18, "isAPSDOverWiFi");

  if ((v19 & 1) != 0)
  {
LABEL_10:
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v21 = objc_msgSend(v20, "isAPSDOverCell");

    if ((v21 & 1) != 0)
    {
      v16 = 3;
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
      v23 = objc_msgSend(v22, "isAPSDOverWiFi");

      if (v23)
        v16 = 2;
      else
        v16 = 0;
    }
    goto LABEL_16;
  }
  v16 = 4;
LABEL_16:
  objc_msgSend(v3, "timestamp");
  v25 = v24;
  sub_10000E8A0(__p, "{}");
  *(_QWORD *)buf = v25;
  *(_DWORD *)v29 = v16;
  if (SHIBYTE(v27) < 0)
  {
    sub_100004870(&v29[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v29[8] = *(_OWORD *)__p;
    *(_QWORD *)&v29[24] = v27;
  }
  sub_10000A914(v4 + 1560, (double *)buf);
  if ((v29[31] & 0x80000000) != 0)
    operator delete(*(void **)&v29[8]);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);

}

void sub_10000B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_10000B988(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 v12;
  void *v13[2];
  uint64_t v14;
  uint8_t buf[8];
  __int16 v16;
  _BYTE __p[30];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "timestamp");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    *(_QWORD *)__p = "";
    *(_WORD *)&__p[8] = 2049;
    *(_QWORD *)&__p[10] = v7;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = objc_msgSend(v8, "starting");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,CellularDataStatus\", \"timestamp\":\"%{private}0.1f\", \"isStarting\":%{public}hhd}", buf, 0x22u);

  }
  objc_msgSend(v3, "timestamp");
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v12 = objc_msgSend(v11, "starting");
  sub_10000E8A0(v13, "{}");
  *(_QWORD *)buf = v10;
  LOBYTE(v16) = v12;
  if (SHIBYTE(v14) < 0)
  {
    sub_100004870(&__p[6], v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)&__p[6] = *(_OWORD *)v13;
    *(_QWORD *)&__p[22] = v14;
  }
  sub_10000A1D0(v4 + 792, (double *)buf);
  if ((__p[29] & 0x80000000) != 0)
    operator delete(*(void **)&__p[6]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);

}

void sub_10000BB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10000BBAC(uint64_t a1, double a2)
{
  uint64_t result;

  LOWORD(result) = sub_10000BBD4(a1 + 24, a2);
  if ((result & 0xFF00) != 0)
    return result;
  else
    return 3;
}

uint64_t sub_10000BBD4(uint64_t a1, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  int v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[4];

  v31[0] = off_1000F1748;
  v31[1] = a1;
  v32 = v31;
  v29[0] = off_1000F17C8;
  v29[1] = a1;
  v30 = v29;
  sub_10001177C((uint64_t)v33, (uint64_t)v31, (uint64_t)v29);
  v4 = v30;
  if (v30 == v29)
  {
    v5 = 4;
    v4 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v32;
  if (v32 == v31)
  {
    v7 = 4;
    v6 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v21 = 68289539;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v9;
    v27 = 2081;
    v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findLatestValueBefore\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)&v21, 0x26u);
  }
  if (*(double *)(a1 + 8) <= a2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    if (v16 == v17 || !*(_BYTE *)a1)
    {
      v11 = SALogObjectGeneral;
      v12 = 0;
      v13 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v19 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v19 = (_QWORD *)*v19;
        v21 = 68289283;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2081;
        v26 = v19;
        v15 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,skipping,notReady\", \"history\":%{p"
              "rivate, location:escape_only}s}";
        goto LABEL_31;
      }
    }
    else
    {
      while (v17 != v16)
      {
        v18 = *(double *)(v17 - 40);
        v17 -= 40;
        if (v18 <= a2)
        {
          v12 = *(unsigned __int8 *)(v17 + 8);
          goto LABEL_33;
        }
      }
      v12 = *(unsigned __int8 *)(v16 + 8);
LABEL_33:
      v13 = 1;
    }
  }
  else
  {
    v11 = SALogObjectGeneral;
    v12 = 0;
    v13 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v14 = (_QWORD *)*v14;
      v21 = 68289283;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2081;
      v26 = v14;
      v15 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,InvalidArgs\", \"history\":%{private, "
            "location:escape_only}s}";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v21, 0x1Cu);
      v12 = 0;
      v13 = 0;
    }
  }
  sub_100012184(v33);
  return v12 | (v13 << 8);
}

void sub_10000BEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000BF18(uint64_t a1, double a2)
{
  unsigned __int16 v4;
  char v6;
  unsigned __int16 v7;
  unsigned int v8;

  v4 = sub_10000BBD4(a1 + 216, a2);
  if (v4 < 0x100u)
    return 3;
  v6 = v4;
  v7 = sub_10000BBD4(a1 + 792, a2);
  v8 = v7;
  if (!v6)
    v8 = 0;
  if (v7 >= 0x100u)
    return v8;
  else
    return 3;
}

uint64_t sub_10000BF88(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  sub_10000BFF8(a1 + 24, (uint64_t)&v5, a2, a3);
  v3 = sub_10005C30C((uint64_t)&v5);
  sub_10001606C((uint64_t)&v5, v6[0]);
  return v3;
}

void sub_10000BFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_10000BFF8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[4];

  v28[0] = off_1000F1848;
  v28[1] = a1;
  v29 = v28;
  v26[0] = off_1000F18C8;
  v26[1] = a1;
  v27 = v26;
  sub_10001177C((uint64_t)v30, (uint64_t)v28, (uint64_t)v26);
  v8 = v27;
  if (v27 == v26)
  {
    v9 = 4;
    v8 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v29;
  if (v29 == v28)
  {
    v11 = 4;
    v10 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_10001606C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*(double *)(a1 + 8) <= a3)
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || !*(_BYTE *)a1)
    {
      v12 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v18 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v18 = (_QWORD *)*v18;
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = v18;
        v14 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValuesWithin,skipping,notReady\", \"history\":%{pri"
              "vate, location:escape_only}s}";
        goto LABEL_32;
      }
    }
    else
    {
      LOWORD(v20) = sub_10000BBD4(a1, a3);
      if ((unsigned __int16)v20 >= 0x100u)
        sub_10001621C((uint64_t **)a2, (unsigned __int8 *)&v20, &v20);
      v16 = *(_QWORD *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 32);
      while (v16 != v15)
      {
        if (*(double *)v16 >= a3 && *(double *)v16 <= a4)
          sub_10001621C((uint64_t **)a2, (unsigned __int8 *)(v16 + 8), (_BYTE *)(v16 + 8));
        v16 += 40;
      }
    }
  }
  else
  {
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v13 = (_QWORD *)*v13;
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = v13;
      v14 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValuesWithin,outOfRangeArgs\", \"history\":%{private,"
            " location:escape_only}s}";
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v20, 0x1Cu);
    }
  }
  return sub_100012184(v30);
}

void sub_10000C28C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012184((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10000C308(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  sub_10000BFF8(a1 + 216, (uint64_t)&v5, a2, a3);
  v3 = sub_10005C30C((uint64_t)&v5);
  sub_10001606C((uint64_t)&v5, v6[0]);
  return v3;
}

void sub_10000C360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_10000C378(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  unsigned int v5;
  char *v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v7 = &v8;
  sub_10000BFF8(a1 + 216, (uint64_t)&v7, a3, a4);
  if (v9)
  {
    v5 = sub_10005C30C((uint64_t)&v7);
    if (v5 >= 4)
      v6 = "NotAvailable";
    else
      v6 = off_1000F1D38[v5];
    sub_10000E8A0(a2, v6);
  }
  else
  {
    sub_10000E8A0(a2, "NotAvailable");
  }
  sub_10001606C((uint64_t)&v7, v8);
}

void sub_10000C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C42C(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  sub_10000BFF8(a1 + 792, (uint64_t)&v5, a2, a3);
  v3 = sub_10005C30C((uint64_t)&v5);
  sub_10001606C((uint64_t)&v5, v6[0]);
  return v3;
}

void sub_10000C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C49C(uint64_t a1, double a2, double a3)
{
  uint64_t result;
  int v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if ((_DWORD)result)
  {
    v7 = result;
    result = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)a1 + 64))(a1, a2, a3);
    if ((_DWORD)result)
    {
      if (v7 == 2 && (_DWORD)result == 2)
      {
        return 3;
      }
      else if ((_DWORD)result == 1 && v7 == 1)
      {
        return 1;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_10000C51C(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  sub_10000BFF8(a1 + 408, (uint64_t)&v5, a2, a3);
  v3 = sub_10005C30C((uint64_t)&v5);
  sub_10001606C((uint64_t)&v5, v6[0]);
  return v3;
}

void sub_10000C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C58C(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  int v14;
  double v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  double v32;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v30 = 2082;
    *(_QWORD *)&v30[2] = "";
    *(_WORD *)&v30[10] = 2049;
    *(double *)&v30[12] = a2;
    v31 = 2049;
    v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saBiomeProd,wifiQualityWithinWindow\", \"start\":\"%{private}.2f\", \"end\":\"%{private}.2f\"}", buf, 0x26u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)&v30[8] = 0;
  sub_10000C900(a1 + 600, (char **)buf, a2, a3);
  v7 = *(double **)buf;
  v8 = *(_QWORD *)v30;
  if (*(_QWORD *)buf != *(_QWORD *)v30)
  {
    v9 = (uint64_t)(*(_QWORD *)v30 - *(_QWORD *)buf) >> 4;
    if (v9 == 2)
    {
      if (*(double *)(*(_QWORD *)buf + 8) == *(double *)(*(_QWORD *)buf + 24))
      {
        v10 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
        {
          v14 = *(_DWORD *)v7;
          v23 = 68289283;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          v27 = 1025;
          v28 = v14;
          v12 = "{\"msg%{public}.0s\":\"#saBiomeProd,wifiQualityWithinWindow,size two\", \"quality\":%{private}d}";
          goto LABEL_15;
        }
LABEL_16:
        v8 = *(unsigned int *)v7;
LABEL_23:
        operator delete(v7);
        return v8;
      }
    }
    else if (v9 == 1)
    {
      v10 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_DWORD *)v7;
        v23 = 68289283;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 1025;
        v28 = v11;
        v12 = "{\"msg%{public}.0s\":\"#saBiomeProd,wifiQualityWithinWindow,size one\", \"quality\":%{private}d}";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v23, 0x18u);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
    sub_10000E950(*(double **)buf, *(unint64_t *)v30, 126 - 2 * __clz(v9), 1);
    v15 = 0.0;
    v16 = v9 - 1;
    v17 = v7;
    v18 = v7[1];
    do
    {
      v19 = v18;
      v18 = v17[3];
      v20 = v18 - v19;
      if (v20 != 0.0)
        v15 = v15 + (double)*(int *)v17 * v20;
      v17 += 2;
      --v16;
    }
    while (v16);
    LODWORD(v8) = vcvtmd_s64_f64(v15 / (*(double *)(v8 - 8) - v7[1]));
    v21 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      v23 = 68289283;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      v27 = 1025;
      v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,wifiQualityWithinWindow\", \"quality\":%{private}d}", (uint8_t *)&v23, 0x18u);
    }
    goto LABEL_23;
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v23 = 68289283;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 1025;
    v28 = -1;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,wifiQualityWithinWindow,empty history\", \"quality\":%{private}d}", (uint8_t *)&v23, 0x18u);
  }
  v8 = 0xFFFFFFFFLL;
  if (v7)
    goto LABEL_23;
  return v8;
}

void sub_10000C8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10000C900(uint64_t a1, char **a2, double a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  _QWORD *v14;
  const char *v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  const char *v27;
  uint64_t *v28;
  uint64_t *v29;
  double v30;
  __int128 *v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t i;
  double v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  double *v67;
  NSObject *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  double v80;
  unsigned int v81;
  __int128 __p;
  uint64_t v83;
  char v84;
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[3];
  _QWORD *v88;
  _QWORD v89[4];
  uint8_t v90[4];
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t buf;
  __int16 v101;
  const char *v102;
  __int16 v103;
  _QWORD *v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  uint64_t v110;

  v87[0] = off_1000F1948;
  v87[1] = a1;
  v88 = v87;
  v85[0] = off_1000F19C8;
  v85[1] = a1;
  v86 = v85;
  sub_10001177C((uint64_t)v89, (uint64_t)v87, (uint64_t)v85);
  v8 = v86;
  if (v86 == v85)
  {
    v9 = 4;
    v8 = v85;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v88;
  if (v88 == v87)
  {
    v11 = 4;
    v10 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  a2[1] = *a2;
  v12 = *(double *)(a1 + 8);
  if (v12 > a3)
  {
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v14 = (_QWORD *)*v14;
      buf = 68289283;
      v101 = 2082;
      v102 = "";
      v103 = 2081;
      v104 = v14;
      v15 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValTimestamp,outOfRangeArgs\", \"history\":%{private,"
            " location:escape_only}s}";
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&buf, 0x1Cu);
      return sub_100012184(v89);
    }
    return sub_100012184(v89);
  }
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32) && *(_BYTE *)a1)
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v17 = (_QWORD *)*v17;
      v18 = *(_QWORD *)(a1 + 16);
      buf = 68290051;
      v101 = 2082;
      v102 = "";
      v103 = 2081;
      v104 = v17;
      v105 = 2049;
      v106 = a3;
      v107 = 2049;
      v108 = v12;
      v109 = 2049;
      v110 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findLatestEventBeforeInternal\", \"debugName\":%{private, location:escape_only}s, \"time\":\"%{private}.2f\", \"fStartTimeSeconds\":\"%{private}.2f\", \"fEndTimeSeconds\":\"%{private}.2f\"}", (uint8_t *)&buf, 0x3Au);
    }
    v98[0] = off_1000F1A48;
    v98[1] = a1;
    v99 = v98;
    v96[0] = off_1000F1AC8;
    v96[1] = a1;
    v97 = v96;
    sub_10001177C((uint64_t)&buf, (uint64_t)v98, (uint64_t)v96);
    v19 = v97;
    if (v97 == v96)
    {
      v20 = 4;
      v19 = v96;
    }
    else
    {
      if (!v97)
        goto LABEL_33;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_33:
    v23 = v99;
    if (v99 == v98)
    {
      v24 = 4;
      v23 = v98;
    }
    else
    {
      if (!v99)
        goto LABEL_38;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_38:
    if (*(double *)(a1 + 8) <= a3)
    {
      v28 = *(uint64_t **)(a1 + 24);
      v29 = *(uint64_t **)(a1 + 32);
      if (v28 != v29 && *(_BYTE *)a1)
      {
        while (v29 != v28)
        {
          v30 = *((double *)v29 - 5);
          v29 -= 5;
          if (v30 <= a3)
          {
            v81 = *((_DWORD *)v29 + 2);
            v80 = *(double *)v29;
            if ((*((char *)v29 + 39) & 0x80000000) == 0)
            {
              v31 = (__int128 *)(v29 + 2);
LABEL_123:
              v79 = *v31;
              v83 = *((_QWORD *)v31 + 2);
              __p = v79;
              goto LABEL_126;
            }
            sub_100004870(&__p, (void *)v29[2], v29[3]);
            goto LABEL_126;
          }
        }
        v81 = *((_DWORD *)v28 + 2);
        v80 = *(double *)v28;
        if ((*((char *)v28 + 39) & 0x80000000) == 0)
        {
          v31 = (__int128 *)(v28 + 2);
          goto LABEL_123;
        }
        sub_100004870(&__p, (void *)v28[2], v28[3]);
LABEL_126:
        v33 = 1;
        goto LABEL_55;
      }
      v25 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v32 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v32 = (_QWORD *)*v32;
        *(_DWORD *)v90 = 68289283;
        v91 = 0;
        v92 = 2082;
        v93 = "";
        v94 = 2081;
        v95 = v32;
        v27 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestEventBefore,skipping,notReady\", \"history\":%{p"
              "rivate, location:escape_only}s}";
        goto LABEL_53;
      }
    }
    else
    {
      v25 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v26 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v26 = (_QWORD *)*v26;
        *(_DWORD *)v90 = 68289283;
        v91 = 0;
        v92 = 2082;
        v93 = "";
        v94 = 2081;
        v95 = v26;
        v27 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestEventBefore,InvalidArgs\", \"history\":%{private"
              ", location:escape_only}s}";
LABEL_53:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v27, v90, 0x1Cu);
      }
    }
    v33 = 0;
    LOBYTE(v80) = 0;
LABEL_55:
    v84 = v33;
    sub_100012184(&buf);
    if (v84)
    {
      v35 = a2[1];
      v34 = (unint64_t)a2[2];
      if ((unint64_t)v35 >= v34)
      {
        v37 = (v35 - *a2) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
          sub_100004C50();
        v39 = v34 - (_QWORD)*a2;
        if (v39 >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v40 = (unint64_t)sub_100016AD0(v40);
        else
          v41 = 0;
        v42 = (_QWORD *)(v40 + 16 * v37);
        v43 = v40 + 16 * v41;
        *v42 = v81;
        *((double *)v42 + 1) = v80;
        v36 = (char *)(v42 + 2);
        v45 = *a2;
        v44 = a2[1];
        if (v44 != *a2)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v44 - 1);
            v42 -= 2;
            v44 -= 16;
          }
          while (v44 != v45);
          v44 = *a2;
        }
        *a2 = (char *)v42;
        a2[1] = v36;
        a2[2] = (char *)v43;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_QWORD *)v35 = v81;
        *((double *)v35 + 1) = v80;
        v36 = v35 + 16;
      }
      a2[1] = v36;
    }
    v46 = *(_QWORD *)(a1 + 24);
    for (i = *(_QWORD *)(a1 + 32); v46 != i; v46 += 40)
    {
      v48 = *(double *)v46;
      if (*(double *)v46 >= a3 && v48 <= a4)
      {
        v50 = *(unsigned int *)(v46 + 8);
        v52 = (unint64_t)a2[1];
        v51 = (unint64_t)a2[2];
        if (v52 >= v51)
        {
          v54 = (uint64_t)(v52 - (_QWORD)*a2) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            sub_100004C50();
          v56 = v51 - (_QWORD)*a2;
          if (v56 >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
            v57 = (unint64_t)sub_100016AD0(v57);
          else
            v58 = 0;
          v59 = v57 + 16 * v54;
          *(_QWORD *)v59 = v50;
          *(double *)(v59 + 8) = v48;
          v61 = *a2;
          v60 = a2[1];
          v62 = v59;
          if (v60 != *a2)
          {
            do
            {
              *(_OWORD *)(v62 - 16) = *((_OWORD *)v60 - 1);
              v62 -= 16;
              v60 -= 16;
            }
            while (v60 != v61);
            v60 = *a2;
          }
          v53 = v59 + 16;
          *a2 = (char *)v62;
          a2[1] = (char *)(v59 + 16);
          a2[2] = (char *)(v57 + 16 * v58);
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_QWORD *)v52 = v50;
          *(double *)(v52 + 8) = v48;
          v53 = v52 + 16;
        }
        a2[1] = (char *)v53;
      }
    }
    v63 = *a2;
    v64 = a2[1];
    if (*a2 == v64)
    {
      v68 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v69 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v69 = (_QWORD *)*v69;
        buf = 68289283;
        v101 = 2082;
        v102 = "";
        v103 = 2081;
        v104 = v69;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValTimestamp,no val available\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      v65 = v64 - 16;
      v66 = (unint64_t)a2[2];
      if ((unint64_t)v64 >= v66)
      {
        v70 = (v64 - v63) >> 4;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60)
          sub_100004C50();
        v72 = v66 - (_QWORD)v63;
        if (v72 >> 3 > v71)
          v71 = v72 >> 3;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
          v73 = 0xFFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
          v73 = (unint64_t)sub_100016AD0(v73);
        else
          v74 = 0;
        v75 = (_OWORD *)(v73 + 16 * v70);
        v76 = v73 + 16 * v74;
        *v75 = *(_OWORD *)v65;
        v67 = (double *)(v75 + 1);
        v78 = *a2;
        v77 = a2[1];
        if (v77 != *a2)
        {
          do
          {
            *--v75 = *((_OWORD *)v77 - 1);
            v77 -= 16;
          }
          while (v77 != v78);
          v77 = *a2;
        }
        *a2 = (char *)v75;
        a2[1] = (char *)v67;
        a2[2] = (char *)v76;
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_OWORD *)v64 = *(_OWORD *)v65;
        v67 = (double *)(v64 + 16);
      }
      a2[1] = (char *)v67;
      *((double *)*a2 + 1) = a3;
      *(v67 - 1) = a4;
    }
    if (v84 && SHIBYTE(v83) < 0)
      operator delete((void *)__p);
    return sub_100012184(v89);
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v21 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v21 = (_QWORD *)*v21;
    buf = 68289283;
    v101 = 2082;
    v102 = "";
    v103 = 2081;
    v104 = v21;
    v15 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValTimestamp,skipping,notReady\", \"history\":%{private"
          ", location:escape_only}s}";
    goto LABEL_29;
  }
  return sub_100012184(v89);
}

void sub_10000D138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  sub_100012184((_QWORD *)(v44 - 208));
  sub_100012184(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D24C(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  void *v7;
  char v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int v14;
  uint8_t v15[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint8_t buf[8];
  _BYTE v22[20];
  __int16 v23;
  double v24;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v22 = 2082;
    *(_QWORD *)&v22[2] = "";
    *(_WORD *)&v22[10] = 2049;
    *(double *)&v22[12] = a2;
    v23 = 2049;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularQualityWithinWindow\", \"start\":\"%{private}.2f\", \"end\":\"%{private}.2f\"}", buf, 0x26u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)&v22[8] = 0;
  sub_10000C900(a1 + 984, (char **)buf, a2, a3);
  v7 = *(void **)buf;
  if (*(_QWORD *)buf == *(_QWORD *)v22)
  {
    v12 = SALogObjectGeneral;
    v11 = 0xFFFFFFFFLL;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v15 = 68289283;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1025;
      v20 = -1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularQualityWithinWindow,empty history\", \"quality\":%{private}d}", v15, 0x18u);
    }
  }
  else
  {
    v14 = 0;
    v8 = sub_10000D4D4((double **)buf, &v14);
    v9 = SALogObjectGeneral;
    v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG);
    if ((v8 & 1) != 0)
    {
      if (v10)
      {
        *(_DWORD *)v15 = 68289283;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        v19 = 1025;
        v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularQualityWithinWindow\", \"quality\":%{private}d}", v15, 0x18u);
      }
      v11 = v14;
    }
    else
    {
      if (v10)
      {
        *(_DWORD *)v15 = 68289026;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularQualityWithinWindow,invalid median conversion\"}", v15, 0x12u);
      }
      v11 = 0xFFFFFFFFLL;
    }
  }
  if (v7)
    operator delete(v7);
  return v11;
}

void sub_10000D4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000D4D4(double **a1, _DWORD *a2)
{
  double *v4;
  unint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  int v11;
  char *v12;
  float *v13;
  char *v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  float v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v44;
  void *__p;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  char *v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  const char *v54;

  v4 = *a1;
  v5 = (unint64_t)a1[1];
  if (v4 == (double *)v5)
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v52 = 0;
      v53 = 2082;
      v54 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,findWeightedMedianOfEvents,empty events\"}", buf, 0x12u);
    }
    return 0;
  }
  else
  {
    if (v5 - (_QWORD)v4 == 16)
    {
      v6 = *(_DWORD *)v4;
LABEL_11:
      *a2 = v6;
      return 1;
    }
    sub_10000F454(v4, v5, 126 - 2 * __clz((uint64_t)(v5 - (_QWORD)v4) >> 4), 1);
    v10 = *a1;
    v9 = a1[1];
    v11 = (int)(*(v9 - 1) - (*a1)[1]);
    if (!v11)
    {
      v6 = *(_DWORD *)v10;
      goto LABEL_11;
    }
    if ((char *)v9 - (char *)v10 == 16)
    {
      v12 = 0;
      v13 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v46 = 0;
      v47 = 0;
      __p = 0;
    }
    else
    {
      v44 = a2;
      v12 = 0;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = (double)v11;
      do
      {
        v20 = &v10[2 * v18];
        v21 = v18 + 1;
        if (v20[1] != v10[2 * v18 + 3])
        {
          if ((unint64_t)v14 >= v15)
          {
            v22 = (v14 - v12) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              sub_100004C50();
            if ((uint64_t)(v15 - (_QWORD)v12) >> 1 > v23)
              v23 = (uint64_t)(v15 - (_QWORD)v12) >> 1;
            if (v15 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v24 = (unint64_t)sub_10000FDF4(v24);
            else
              v25 = 0;
            v26 = (char *)(v24 + 4 * v22);
            *(_DWORD *)v26 = *(_DWORD *)v20;
            v27 = v26 + 4;
            while (v14 != v12)
            {
              v28 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v26 - 1) = v28;
              v26 -= 4;
            }
            v15 = v24 + 4 * v25;
            if (v12)
            {
              v29 = v24 + 4 * v25;
              operator delete(v12);
              v15 = v29;
            }
            v12 = v26;
            v14 = v27;
          }
          else
          {
            *(_DWORD *)v14 = *(_DWORD *)v20;
            v14 += 4;
          }
          v30 = ((*a1)[2 * v21 + 1] - (*a1)[2 * v18 + 1]) / v19;
          if ((unint64_t)v16 >= v17)
          {
            v32 = v16 - v13;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              sub_100004C50();
            v34 = v15;
            if ((uint64_t)(v17 - (_QWORD)v13) >> 1 > v33)
              v33 = (uint64_t)(v17 - (_QWORD)v13) >> 1;
            if (v17 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
              v35 = (unint64_t)sub_10000FDF4(v35);
            else
              v36 = 0;
            v37 = (float *)(v35 + 4 * v32);
            *v37 = v30;
            v31 = v37 + 1;
            while (v16 != v13)
            {
              v38 = *((_DWORD *)v16-- - 1);
              *((_DWORD *)v37-- - 1) = v38;
            }
            v17 = v35 + 4 * v36;
            if (v13)
              operator delete(v13);
            v13 = v37;
            v15 = v34;
          }
          else
          {
            *v16 = v30;
            v31 = v16 + 1;
          }
          v10 = *a1;
          v9 = a1[1];
          v16 = v31;
        }
        v18 = v21;
      }
      while ((((char *)v9 - (char *)v10) >> 4) - 1 > v21);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v39 = v14 - v12;
      if (v14 != v12)
      {
        if (v39 < 0)
          sub_100004C50();
        v48 = sub_10000FDF4(v39 >> 2);
        v50 = (char *)v48 + 4 * v40;
        memmove(v48, v12, v14 - v12);
        v49 = (char *)v48 + 4 * (v39 >> 2);
      }
      __p = 0;
      v46 = 0;
      v47 = 0;
      v41 = (char *)v16 - (char *)v13;
      if (v16 == v13)
      {
        a2 = v44;
      }
      else
      {
        a2 = v44;
        if (v41 < 0)
          sub_100004C50();
        __p = sub_10000FDF4(v41 >> 2);
        v47 = (char *)__p + 4 * v42;
        memmove(__p, v13, (char *)v16 - (char *)v13);
        v46 = (char *)__p + 4 * (v41 >> 2);
      }
    }
    v8 = SACommonUtils::weightedMedian((char **)&v48, (float **)&__p, a2);
    if (__p)
    {
      v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = (char *)v48;
      operator delete(v48);
    }
    if (v13)
      operator delete(v13);
    if (v12)
      operator delete(v12);
  }
  return v8;
}

void sub_10000D8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
  {
    operator delete(__p);
    if (!v16)
    {
LABEL_3:
      if (!v15)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  if (!v15)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v15);
  goto LABEL_5;
}

void sub_10000D970(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *v5;
  _DWORD *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _BYTE *v12;
  __int16 v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t *v17;
  int v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  _QWORD v27[2];

  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_10000C900(a1 + 1176, (char **)&v19, a3, a4);
  v5 = v19;
  if (v19 == v20)
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2081;
      v27[0] = "Unknown";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRatWithinWindow,empty history\", \"rat\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_10000E8A0(a2, "Unknown");
  }
  else
  {
    v18 = 0;
    if ((sub_10000D4D4(&v19, &v18) & 1) != 0)
    {
      sub_10000E8A0(a2, "Unknown");
      switch(v18)
      {
        case 1:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 3;
            v9 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 3;
            v9 = a2;
          }
          *((_BYTE *)v9 + 2) = 77;
          v13 = 21319;
          goto LABEL_32;
        case 2:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 6;
            v10 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 6;
            v10 = a2;
          }
          *((_WORD *)v10 + 2) = 30769;
          v14 = 1095582787;
          goto LABEL_35;
        case 3:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 3;
            v9 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 3;
            v9 = a2;
          }
          *((_BYTE *)v9 + 2) = 69;
          v13 = 21580;
LABEL_32:
          *(_WORD *)v9 = v13;
          v12 = (char *)v9 + 3;
          break;
        case 4:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 6;
            v10 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 6;
            v10 = a2;
          }
          *((_WORD *)v10 + 2) = 16723;
          v14 = 1311593038;
LABEL_35:
          *(_DWORD *)v10 = v14;
          v12 = (char *)v10 + 6;
          break;
        case 5:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 5;
            v11 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 5;
            v11 = a2;
          }
          *((_BYTE *)v11 + 4) = 65;
          v15 = 1395479118;
          goto LABEL_40;
        case 6:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 5;
            v11 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 5;
            v11 = a2;
          }
          *((_BYTE *)v11 + 4) = 114;
          v15 = 1701344335;
LABEL_40:
          *(_DWORD *)v11 = v15;
          v12 = (char *)v11 + 5;
          break;
        default:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 7;
            v6 = (_DWORD *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 7;
            v6 = a2;
          }
          *(_DWORD *)((char *)v6 + 3) = 1853321070;
          *v6 = 1852534357;
          v12 = (char *)v6 + 7;
          break;
      }
      *v12 = 0;
      v16 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a2 + 23) >= 0)
          v17 = a2;
        else
          v17 = (uint64_t *)*a2;
        *(_DWORD *)buf = 68289539;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 1025;
        LODWORD(v27[0]) = v18;
        WORD2(v27[0]) = 2081;
        *(_QWORD *)((char *)v27 + 6) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRatWithinWindow\", \"rat\":%{private}d, \"ratStr\":%{private, location:escape_only}s}", buf, 0x22u);
      }
    }
    else
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRatWithinWindow,invalid median conversion\"}", buf, 0x12u);
      }
      sub_10000E8A0(a2, "Unknown");
    }
  }
  if (v5)
    operator delete(v5);
}

void sub_10000DD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void sub_10000DD88(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *v5;
  char v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  _DWORD *v14;
  uint64_t *v15;
  _DWORD *v16;
  _BYTE *v17;
  NSObject *v18;
  uint64_t *v19;
  int v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _QWORD v29[2];

  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_10000C900(a1 + 1368, (char **)&v21, a3, a4);
  v5 = v21;
  if (v21 == v22)
  {
    v10 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    *(_DWORD *)buf = 68289283;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2081;
    v29[0] = "Unknown";
    v11 = "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRrcWithinWindow,empty history\", \"rrc\":%{private, location:escape_only}s}";
    v12 = v10;
    v13 = 28;
    goto LABEL_11;
  }
  v20 = 0;
  v6 = sub_10000D4D4(&v21, &v20);
  v7 = SALogObjectGeneral;
  v8 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG);
  if ((v6 & 1) == 0)
  {
    if (!v8)
      goto LABEL_12;
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v11 = "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRrcWithinWindow,invalid median conversion\"}";
    v12 = v7;
    v13 = 18;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v11, buf, v13);
LABEL_12:
    v9 = 0;
    if (!v5)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v8)
  {
    *(_DWORD *)buf = 68289283;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 1025;
    LODWORD(v29[0]) = v20;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRrcWithinWindow\", \"rrc\":%{private}d}", buf, 0x18u);
  }
  v9 = v20;
  if (v5)
LABEL_13:
    operator delete(v5);
LABEL_14:
  sub_10000E8A0(a2, "Unknown");
  if (v9 == 2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 9;
      v15 = (uint64_t *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 9;
      v15 = a2;
    }
    *((_BYTE *)v15 + 8) = 100;
    *v15 = *(_QWORD *)"Connected";
    v17 = (char *)v15 + 9;
  }
  else if (v9 == 1)
  {
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 4;
      v16 = (_DWORD *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 4;
      v16 = a2;
    }
    *v16 = 1701602377;
    v17 = v16 + 1;
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 7;
      v14 = (_DWORD *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 7;
      v14 = a2;
    }
    *(_DWORD *)((char *)v14 + 3) = 1853321070;
    *v14 = 1852534357;
    v17 = (char *)v14 + 7;
  }
  *v17 = 0;
  v18 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v19 = a2;
    else
      v19 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289539;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 1025;
    LODWORD(v29[0]) = v9;
    WORD2(v29[0]) = 2081;
    *(_QWORD *)((char *)v29 + 6) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,cellularRrcWithinWindow\", \"rrc\":%{private}d, \"rrcStr\":%{private, location:escape_only}s}", buf, 0x22u);
  }
}

void sub_10000E0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

double sub_10000E0E8(uint64_t a1, double *a2)
{
  double v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  double v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t buf;
  __int16 v34;
  const char *v35;
  __int16 v36;
  double v37;

  v3 = *a2;
  v4 = a1 + 1368;
  v31[0] = off_1000F1B48;
  v31[1] = a1 + 1368;
  v32 = v31;
  v29[0] = off_1000F1BC8;
  v29[1] = a1 + 1368;
  v30 = v29;
  sub_10001177C((uint64_t)&buf, (uint64_t)v31, (uint64_t)v29);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (*(_QWORD *)(a1 + 1392) == *(_QWORD *)(a1 + 1400))
  {
    v10 = SALogObjectGeneral;
    v11 = -1.0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
    v23 = 68289026;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v12 = "{\"msg%{public}.0s\":\"#saEventHistory,findLastValueDuration,empty history\"}";
    goto LABEL_17;
  }
  v9 = sub_10000E4A8(v4, v3);
  if (!HIDWORD(v9))
  {
    v10 = SALogObjectGeneral;
    v11 = -1.0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
    v23 = 68289026;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v12 = "{\"msg%{public}.0s\":\"#saEventHistory,findLastValueDuration,no event before timestamp\"}";
LABEL_17:
    v13 = v10;
    v14 = 18;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v23, v14);
    goto LABEL_27;
  }
  v15 = *(_QWORD *)(a1 + 1400);
  v16 = *(_QWORD *)(a1 + 1392);
  v11 = -1.0;
  if (v15 != v16)
  {
    v17 = *(_QWORD *)(a1 + 1400);
    do
    {
      v18 = *(double *)(v17 - 40);
      v17 -= 40;
      v19 = v18;
      if (v18 <= v3)
      {
        if (*(_DWORD *)(v15 - 32) != (_DWORD)v9)
          break;
        v11 = v3 - v19;
      }
      v15 = v17;
    }
    while (v17 != v16);
  }
  v20 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v23 = 68289283;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2049;
    v28 = v11;
    v12 = "{\"msg%{public}.0s\":\"#saEventHistory,findLastValueDuration,\", \"lastValueDuration\":\"%{private}.2f\"}";
    v13 = v20;
    v14 = 28;
    goto LABEL_26;
  }
LABEL_27:
  sub_100012184(&buf);
  v21 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    buf = 68289283;
    v34 = 2082;
    v35 = "";
    v36 = 2049;
    v37 = v11;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saBiomeProd,timeSinceRrcChanged\", \"timeSinceRrcChanged\":\"%{private}.2f\"}", (uint8_t *)&buf, 0x1Cu);
  }
  return v11 * 1000.0;
}

void sub_10000E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100012184((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10000E45C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  unint64_t v4;
  char *v5;

  v4 = sub_10000E4A8(a1 + 1560, a3);
  if (HIDWORD(v4))
    v5 = off_1000F1D58[(int)v4];
  else
    v5 = "Unknown";
  return sub_10000E8A0(a2, v5);
}

unint64_t sub_10000E4A8(uint64_t a1, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  _QWORD *v18;
  const mach_header_64 *v19;
  unsigned int v20;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[4];

  v32[0] = off_1000F1C48;
  v32[1] = a1;
  v33 = v32;
  v30[0] = off_1000F1CC8;
  v30[1] = a1;
  v31 = v30;
  sub_10001177C((uint64_t)v34, (uint64_t)v32, (uint64_t)v30);
  v4 = v31;
  if (v31 == v30)
  {
    v5 = 4;
    v4 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v33;
  if (v33 == v32)
  {
    v7 = 4;
    v6 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v22 = 68289539;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2081;
    v27 = v9;
    v28 = 2081;
    v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findLatestValueBefore\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)&v22, 0x26u);
  }
  if (*(double *)(a1 + 8) > a2)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v12 = (_QWORD *)*v12;
      v22 = 68289283;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2081;
      v27 = v12;
      v13 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,InvalidArgs\", \"history\":%{private, "
            "location:escape_only}s}";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v22, 0x1Cu);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  if (v14 == v15 || !*(_BYTE *)a1)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v18 = (_QWORD *)*v18;
      v22 = 68289283;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2081;
      v27 = v18;
      v13 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,skipping,notReady\", \"history\":%{pri"
            "vate, location:escape_only}s}";
      goto LABEL_31;
    }
LABEL_32:
    v19 = 0;
    LOBYTE(v17) = 0;
    v20 = 0;
    goto LABEL_33;
  }
  while (v15 != v14)
  {
    v16 = *(double *)(v15 - 40);
    v15 -= 40;
    if (v16 <= a2)
    {
      v17 = *(_DWORD *)(v15 + 8);
      goto LABEL_35;
    }
  }
  v17 = *(_DWORD *)(v14 + 8);
LABEL_35:
  v20 = v17 & 0xFFFFFF00;
  v19 = &_mh_execute_header;
LABEL_33:
  sub_100012184(v34);
  return (unint64_t)v19 | v20 | v17;
}

void sub_10000E784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10000E7F0(uint64_t a1)
{
  sub_10000FE28(a1);
  operator delete();
}

void sub_10000E814(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10000E854((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10000E854(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_10000E8A0(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000048FC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

double *sub_10000E950(double *result, unint64_t a2, uint64_t a3, char a4)
{
  double *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  double v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  double v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  double v55;
  int v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  int v91;
  unint64_t v92;
  double *v94;
  double v95;
  double v96;
  int v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (double *)v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(double *)(a2 - 8);
        v44 = *(double *)(v8 + 8);
        if (v43 < v44)
        {
          v45 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v45;
          *(double *)(v8 + 8) = v43;
          *(double *)(a2 - 8) = v44;
        }
        return result;
      case 3uLL:
        return sub_10000F0E0((double *)v8, (double *)(v8 + 16), (double *)(a2 - 16));
      case 4uLL:
        return sub_10000F3A8((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), a2 - 16);
      case 5uLL:
        result = sub_10000F3A8((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), v8 + 48);
        v46 = *(double *)(a2 - 8);
        v47 = *(double *)(v8 + 56);
        if (v46 < v47)
        {
          v48 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v48;
          *(double *)(v8 + 56) = v46;
          *(double *)(a2 - 8) = v47;
          v49 = *(double *)(v8 + 56);
          v50 = *(double *)(v8 + 40);
          if (v49 < v50)
          {
            v51 = *(_DWORD *)(v8 + 32);
            v52 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v52;
            *(_DWORD *)(v8 + 48) = v51;
            *(double *)(v8 + 40) = v49;
            *(double *)(v8 + 56) = v50;
            v53 = *(double *)(v8 + 24);
            if (v49 < v53)
            {
              v54 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v52;
              *(_DWORD *)(v8 + 32) = v54;
              *(double *)(v8 + 24) = v49;
              *(double *)(v8 + 40) = v53;
              v55 = *(double *)(v8 + 8);
              if (v49 < v55)
              {
                v56 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v52;
                *(_DWORD *)(v8 + 16) = v56;
                *(double *)(v8 + 8) = v49;
                *(double *)(v8 + 24) = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = (double *)(v8 + 16);
          v59 = v8 == a2 || v57 == (double *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = (double *)v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 < v63)
                {
                  v64 = *(_DWORD *)v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = v8 + v65;
                    *(_DWORD *)(v66 + 16) = *(_DWORD *)(v8 + v65);
                    *(_QWORD *)(v66 + 24) = *(_QWORD *)(v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 >= *(double *)(v66 - 8))
                    {
                      v67 = v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = v8;
LABEL_80:
                  *(_DWORD *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != (double *)a2);
            }
          }
          else if (!v59)
          {
            v94 = (double *)(v8 + 24);
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 < v96)
              {
                v97 = *(_DWORD *)v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *((_DWORD *)v98 - 2) = *((_DWORD *)v98 - 6);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 < *(v99 - 4));
                *((_DWORD *)v98 - 2) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != (double *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = v8 + 16 * v71;
              if (2 * v70 + 2 < (uint64_t)v10 && *(double *)(v72 + 8) < *(double *)(v72 + 24))
              {
                v72 += 16;
                v71 = 2 * v70 + 2;
              }
              v73 = *(double *)(v72 + 8);
              v74 = *(double *)(v8 + 16 * v70 + 8);
              if (v73 >= v74)
              {
                v75 = v8 + 16 * v70;
                v76 = *(_DWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *(_DWORD *)v77 = *(_DWORD *)v72;
                  *(double *)(v77 + 8) = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = v8 + 16 * v71;
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && *(double *)(v72 + 8) < *(double *)(v72 + 24))
                  {
                    v72 += 16;
                    v71 = v79;
                  }
                  v73 = *(double *)(v72 + 8);
                }
                while (v73 >= v74);
                *(_DWORD *)v75 = v76;
                *(double *)(v75 + 8) = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *(_DWORD *)v8;
            v83 = *(double *)(v8 + 8);
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 16 * (v81 + 1);
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && *(double *)(v84 + 8) < *(double *)(v84 + 24))
              {
                v84 += 16;
                v81 = v87;
              }
              *(_DWORD *)v85 = *(_DWORD *)v84;
              *(_QWORD *)(v85 + 8) = *(_QWORD *)(v84 + 8);
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 16)
            {
              *(_DWORD *)v84 = *(_DWORD *)(a2 - 16);
              *(_QWORD *)(v84 + 8) = *(_QWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 16) = v82;
              *(double *)(a2 - 8) = v83;
              v88 = v84 - v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = *(double *)(v8 + 16 * v89 + 8);
                v83 = *(double *)(v84 + 8);
                if (v90 < v83)
                {
                  v91 = *(_DWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = v8 + 16 * v89;
                    *(_DWORD *)v92 = *(_DWORD *)v84;
                    *(double *)(v92 + 8) = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = *(double *)(v8 + 16 * v89 + 8);
                  }
                  while (v90 < v83);
                  *(_DWORD *)v84 = v91;
LABEL_112:
                  *(double *)(v84 + 8) = v83;
                }
              }
              a2 -= 16;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_10000F0E0(&v7[2 * (v10 >> 1)], v7, (double *)(a2 - 16));
        }
        else
        {
          sub_10000F0E0(v7, &v7[2 * (v10 >> 1)], (double *)(a2 - 16));
          sub_10000F0E0(v7 + 2, v12 - 2, (double *)(a2 - 32));
          sub_10000F0E0(v7 + 4, &v7[2 * v11 + 2], (double *)(a2 - 48));
          result = sub_10000F0E0(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) < v15)
            goto LABEL_12;
          if (v15 >= *(double *)(a2 - 8))
          {
            v33 = v7 + 2;
            do
            {
              v8 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 >= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = (unint64_t)(v31 + 2);
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 >= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(double *)(v36 - 8);
              v36 -= 16;
            }
            while (v15 < v37);
          }
          v38 = *(_DWORD *)v7;
          while (v8 < v35)
          {
            v39 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v39;
            v40 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v40;
            do
            {
              v41 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v15 >= v41);
            do
            {
              v42 = *(double *)(v35 - 8);
              v35 -= 16;
            }
            while (v15 < v42);
          }
          if ((double *)(v8 - 16) != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            v7[1] = *(double *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v38;
          *(double *)(v8 - 8) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *(_DWORD *)v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 < v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while ((unint64_t)v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(double *)(v23 - 8);
            v23 -= 16;
            if (v24 < v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(double *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 >= v15);
        }
LABEL_22:
        v8 = (unint64_t)v19;
        if ((unint64_t)v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v28 < v15);
            do
            {
              v29 = *(double *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 >= v15);
          }
          while (v8 < v25);
        }
        if ((double *)(v8 - 16) != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          v7[1] = *(double *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v17;
        *(double *)(v8 - 8) = v15;
        if ((unint64_t)v19 < v21)
        {
LABEL_33:
          result = (double *)sub_10000E950(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_10000F198((uint64_t)v7, v8 - 16);
        result = (double *)sub_10000F198(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

double *sub_10000F0E0(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  double v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 < v9)
      {
        v10 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *(_DWORD *)result;
    if (v5 >= v3)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 >= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *(_DWORD *)result = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL sub_10000F198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_10000F0E0((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_10000F3A8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      sub_10000F3A8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      v18 = *(double *)(a2 - 8);
      v19 = *(double *)(a1 + 56);
      if (v18 < v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        v21 = *(double *)(a1 + 56);
        v22 = *(double *)(a1 + 40);
        if (v21 < v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          v25 = *(double *)(a1 + 24);
          if (v21 < v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            v27 = *(double *)(a1 + 8);
            if (v21 < v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      sub_10000F0E0((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 >= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

double *sub_10000F3A8(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *result;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  int v17;

  result = sub_10000F0E0(a1, a2, a3);
  v9 = *(double *)(a4 + 8);
  v10 = a3[1];
  if (v9 < v10)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    a3[1] = v9;
    *(double *)(a4 + 8) = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 < v13)
    {
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 < v16)
      {
        v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

double *sub_10000F454(double *result, unint64_t a2, uint64_t a3, char a4)
{
  double *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  double v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  double v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  double v55;
  int v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  int v91;
  unint64_t v92;
  double *v94;
  double v95;
  double v96;
  int v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (double *)v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(double *)(a2 - 8);
        v44 = *(double *)(v8 + 8);
        if (v43 < v44)
        {
          v45 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v45;
          *(double *)(v8 + 8) = v43;
          *(double *)(a2 - 8) = v44;
        }
        return result;
      case 3uLL:
        return sub_10000F0E0((double *)v8, (double *)(v8 + 16), (double *)(a2 - 16));
      case 4uLL:
        return sub_10000F3A8((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), a2 - 16);
      case 5uLL:
        result = sub_10000F3A8((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), v8 + 48);
        v46 = *(double *)(a2 - 8);
        v47 = *(double *)(v8 + 56);
        if (v46 < v47)
        {
          v48 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v48;
          *(double *)(v8 + 56) = v46;
          *(double *)(a2 - 8) = v47;
          v49 = *(double *)(v8 + 56);
          v50 = *(double *)(v8 + 40);
          if (v49 < v50)
          {
            v51 = *(_DWORD *)(v8 + 32);
            v52 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v52;
            *(_DWORD *)(v8 + 48) = v51;
            *(double *)(v8 + 40) = v49;
            *(double *)(v8 + 56) = v50;
            v53 = *(double *)(v8 + 24);
            if (v49 < v53)
            {
              v54 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v52;
              *(_DWORD *)(v8 + 32) = v54;
              *(double *)(v8 + 24) = v49;
              *(double *)(v8 + 40) = v53;
              v55 = *(double *)(v8 + 8);
              if (v49 < v55)
              {
                v56 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v52;
                *(_DWORD *)(v8 + 16) = v56;
                *(double *)(v8 + 8) = v49;
                *(double *)(v8 + 24) = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = (double *)(v8 + 16);
          v59 = v8 == a2 || v57 == (double *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = (double *)v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 < v63)
                {
                  v64 = *(_DWORD *)v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = v8 + v65;
                    *(_DWORD *)(v66 + 16) = *(_DWORD *)(v8 + v65);
                    *(_QWORD *)(v66 + 24) = *(_QWORD *)(v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 >= *(double *)(v66 - 8))
                    {
                      v67 = v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = v8;
LABEL_80:
                  *(_DWORD *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != (double *)a2);
            }
          }
          else if (!v59)
          {
            v94 = (double *)(v8 + 24);
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 < v96)
              {
                v97 = *(_DWORD *)v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *((_DWORD *)v98 - 2) = *((_DWORD *)v98 - 6);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 < *(v99 - 4));
                *((_DWORD *)v98 - 2) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != (double *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = v8 + 16 * v71;
              if (2 * v70 + 2 < (uint64_t)v10 && *(double *)(v72 + 8) < *(double *)(v72 + 24))
              {
                v72 += 16;
                v71 = 2 * v70 + 2;
              }
              v73 = *(double *)(v72 + 8);
              v74 = *(double *)(v8 + 16 * v70 + 8);
              if (v73 >= v74)
              {
                v75 = v8 + 16 * v70;
                v76 = *(_DWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *(_DWORD *)v77 = *(_DWORD *)v72;
                  *(double *)(v77 + 8) = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = v8 + 16 * v71;
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && *(double *)(v72 + 8) < *(double *)(v72 + 24))
                  {
                    v72 += 16;
                    v71 = v79;
                  }
                  v73 = *(double *)(v72 + 8);
                }
                while (v73 >= v74);
                *(_DWORD *)v75 = v76;
                *(double *)(v75 + 8) = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *(_DWORD *)v8;
            v83 = *(double *)(v8 + 8);
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 16 * (v81 + 1);
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && *(double *)(v84 + 8) < *(double *)(v84 + 24))
              {
                v84 += 16;
                v81 = v87;
              }
              *(_DWORD *)v85 = *(_DWORD *)v84;
              *(_QWORD *)(v85 + 8) = *(_QWORD *)(v84 + 8);
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 16)
            {
              *(_DWORD *)v84 = *(_DWORD *)(a2 - 16);
              *(_QWORD *)(v84 + 8) = *(_QWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 16) = v82;
              *(double *)(a2 - 8) = v83;
              v88 = v84 - v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = *(double *)(v8 + 16 * v89 + 8);
                v83 = *(double *)(v84 + 8);
                if (v90 < v83)
                {
                  v91 = *(_DWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = v8 + 16 * v89;
                    *(_DWORD *)v92 = *(_DWORD *)v84;
                    *(double *)(v92 + 8) = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = *(double *)(v8 + 16 * v89 + 8);
                  }
                  while (v90 < v83);
                  *(_DWORD *)v84 = v91;
LABEL_112:
                  *(double *)(v84 + 8) = v83;
                }
              }
              a2 -= 16;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_10000F0E0(&v7[2 * (v10 >> 1)], v7, (double *)(a2 - 16));
        }
        else
        {
          sub_10000F0E0(v7, &v7[2 * (v10 >> 1)], (double *)(a2 - 16));
          sub_10000F0E0(v7 + 2, v12 - 2, (double *)(a2 - 32));
          sub_10000F0E0(v7 + 4, &v7[2 * v11 + 2], (double *)(a2 - 48));
          result = sub_10000F0E0(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) < v15)
            goto LABEL_12;
          if (v15 >= *(double *)(a2 - 8))
          {
            v33 = v7 + 2;
            do
            {
              v8 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 >= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = (unint64_t)(v31 + 2);
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 >= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(double *)(v36 - 8);
              v36 -= 16;
            }
            while (v15 < v37);
          }
          v38 = *(_DWORD *)v7;
          while (v8 < v35)
          {
            v39 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v39;
            v40 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v40;
            do
            {
              v41 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v15 >= v41);
            do
            {
              v42 = *(double *)(v35 - 8);
              v35 -= 16;
            }
            while (v15 < v42);
          }
          if ((double *)(v8 - 16) != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            v7[1] = *(double *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v38;
          *(double *)(v8 - 8) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *(_DWORD *)v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 < v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while ((unint64_t)v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(double *)(v23 - 8);
            v23 -= 16;
            if (v24 < v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(double *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 >= v15);
        }
LABEL_22:
        v8 = (unint64_t)v19;
        if ((unint64_t)v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v28 < v15);
            do
            {
              v29 = *(double *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 >= v15);
          }
          while (v8 < v25);
        }
        if ((double *)(v8 - 16) != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          v7[1] = *(double *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v17;
        *(double *)(v8 - 8) = v15;
        if ((unint64_t)v19 < v21)
        {
LABEL_33:
          result = (double *)sub_10000F454(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_10000FBE4((uint64_t)v7, v8 - 16);
        result = (double *)sub_10000FBE4(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_10000FBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_10000F0E0((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_10000F3A8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      sub_10000F3A8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      v18 = *(double *)(a2 - 8);
      v19 = *(double *)(a1 + 56);
      if (v18 < v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        v21 = *(double *)(a1 + 56);
        v22 = *(double *)(a1 + 40);
        if (v21 < v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          v25 = *(double *)(a1 + 24);
          if (v21 < v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            v27 = *(double *)(a1 + 8);
            if (v21 < v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      sub_10000F0E0((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 >= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

void *sub_10000FDF4(unint64_t a1)
{
  if (a1 >> 62)
    sub_100004984();
  return operator new(4 * a1);
}

uint64_t sub_10000FE28(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void **v39;

  *(_QWORD *)a1 = off_1000F0D38;
  if (*(char *)(a1 + 1743) < 0)
    operator delete(*(void **)(a1 + 1720));
  v2 = *(_QWORD **)(a1 + 1688);
  if (v2 == (_QWORD *)(a1 + 1664))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 1664);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  v4 = *(_QWORD **)(a1 + 1656);
  if (v4 == (_QWORD *)(a1 + 1632))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 1632);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  if (*(char *)(a1 + 1631) < 0)
    operator delete(*(void **)(a1 + 1608));
  v39 = (void **)(a1 + 1584);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  v6 = *(_QWORD **)(a1 + 1496);
  if (v6 == (_QWORD *)(a1 + 1472))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 1472);
  }
  else
  {
    if (!v6)
      goto LABEL_22;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_22:
  v8 = *(_QWORD **)(a1 + 1464);
  if (v8 == (_QWORD *)(a1 + 1440))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 1440);
  }
  else
  {
    if (!v8)
      goto LABEL_27;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_27:
  if (*(char *)(a1 + 1439) < 0)
    operator delete(*(void **)(a1 + 1416));
  v39 = (void **)(a1 + 1392);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  v10 = *(_QWORD **)(a1 + 1304);
  if (v10 == (_QWORD *)(a1 + 1280))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 1280);
  }
  else
  {
    if (!v10)
      goto LABEL_36;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_36:
  v12 = *(_QWORD **)(a1 + 1272);
  if (v12 == (_QWORD *)(a1 + 1248))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 1248);
  }
  else
  {
    if (!v12)
      goto LABEL_41;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_41:
  if (*(char *)(a1 + 1247) < 0)
    operator delete(*(void **)(a1 + 1224));
  v39 = (void **)(a1 + 1200);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  v14 = *(_QWORD **)(a1 + 1112);
  if (v14 == (_QWORD *)(a1 + 1088))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1088);
  }
  else
  {
    if (!v14)
      goto LABEL_50;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_50:
  v16 = *(_QWORD **)(a1 + 1080);
  if (v16 == (_QWORD *)(a1 + 1056))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 1056);
  }
  else
  {
    if (!v16)
      goto LABEL_55;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_55:
  if (*(char *)(a1 + 1055) < 0)
    operator delete(*(void **)(a1 + 1032));
  v39 = (void **)(a1 + 1008);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  v18 = *(_QWORD **)(a1 + 920);
  if (v18 == (_QWORD *)(a1 + 896))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 896);
  }
  else
  {
    if (!v18)
      goto LABEL_64;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_64:
  v20 = *(_QWORD **)(a1 + 888);
  if (v20 == (_QWORD *)(a1 + 864))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 864);
  }
  else
  {
    if (!v20)
      goto LABEL_69;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_69:
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  v39 = (void **)(a1 + 816);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  v22 = *(_QWORD **)(a1 + 728);
  if (v22 == (_QWORD *)(a1 + 704))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 704);
  }
  else
  {
    if (!v22)
      goto LABEL_78;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_78:
  v24 = *(_QWORD **)(a1 + 696);
  if (v24 == (_QWORD *)(a1 + 672))
  {
    v25 = 4;
    v24 = (_QWORD *)(a1 + 672);
  }
  else
  {
    if (!v24)
      goto LABEL_83;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_83:
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  v39 = (void **)(a1 + 624);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  v26 = *(_QWORD **)(a1 + 536);
  if (v26 == (_QWORD *)(a1 + 512))
  {
    v27 = 4;
    v26 = (_QWORD *)(a1 + 512);
  }
  else
  {
    if (!v26)
      goto LABEL_92;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_92:
  v28 = *(_QWORD **)(a1 + 504);
  if (v28 == (_QWORD *)(a1 + 480))
  {
    v29 = 4;
    v28 = (_QWORD *)(a1 + 480);
  }
  else
  {
    if (!v28)
      goto LABEL_97;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_97:
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  v39 = (void **)(a1 + 432);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  v30 = *(_QWORD **)(a1 + 344);
  if (v30 == (_QWORD *)(a1 + 320))
  {
    v31 = 4;
    v30 = (_QWORD *)(a1 + 320);
  }
  else
  {
    if (!v30)
      goto LABEL_106;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_106:
  v32 = *(_QWORD **)(a1 + 312);
  if (v32 == (_QWORD *)(a1 + 288))
  {
    v33 = 4;
    v32 = (_QWORD *)(a1 + 288);
  }
  else
  {
    if (!v32)
      goto LABEL_111;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_111:
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v39 = (void **)(a1 + 240);
  sub_10000E814(&v39);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  v34 = *(_QWORD **)(a1 + 152);
  if (v34 == (_QWORD *)(a1 + 128))
  {
    v35 = 4;
    v34 = (_QWORD *)(a1 + 128);
  }
  else
  {
    if (!v34)
      goto LABEL_120;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_120:
  v36 = *(_QWORD **)(a1 + 120);
  if (v36 == (_QWORD *)(a1 + 96))
  {
    v37 = 4;
    v36 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v36)
      goto LABEL_125;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_125:
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v39 = (void **)(a1 + 48);
  sub_10000E814(&v39);

  return a1;
}

uint64_t sub_100010374(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_1000ADFD0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 160), "Unknown");
  *(_WORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1000103F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v2 + 128);
  if (v5 == (_QWORD *)(v2 + 104))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 96);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v3 = *(_QWORD **)(v2 + 96);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_11:
  if (*(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  sub_10000E814((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100010480(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_1000ADFD0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 160), "Unknown");
  *(_WORD *)(a1 + 184) = 0;
  return a1;
}

void sub_100010504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v2 + 128);
  if (v5 == (_QWORD *)(v2 + 104))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 96);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v3 = *(_QWORD **)(v2 + 96);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_11:
  if (*(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  sub_10000E814((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001058C(uint64_t a1)
{

  return a1;
}

void sub_1000105B4(uint64_t a1)
{

  operator delete();
}

uint64_t sub_1000105EC()
{
  return 0;
}

id sub_1000105F4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F0E88;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10001062C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10001063C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100010648(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F0EF8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100010684()
{
  return &off_1000F0EF8;
}

BOOL sub_100010690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_1000106DC(uint64_t a1, double *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _QWORD *v25;

  if (*a2 >= 0.0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(uint64_t **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3) >= *(_QWORD *)(a1 + 136))
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v9 = (_QWORD *)*v9;
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,maxHistoryLenReached\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
        v7 = *(_QWORD *)(a1 + 24);
        v6 = *(uint64_t **)(a1 + 32);
      }
      sub_100011A2C((uint64_t)&v20, (uint64_t *)(v7 + 40), v6, v7);
      v6 = v10;
      for (i = *(uint64_t **)(a1 + 32); i != v6; i -= 5)
      {
        if (*((char *)i - 1) < 0)
          operator delete((void *)*(i - 3));
      }
      *(_QWORD *)(a1 + 32) = v6;
      *(_BYTE *)(a1 + 152) = 1;
      v7 = *(_QWORD *)(a1 + 24);
    }
    if (v6 != (uint64_t *)v7)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
      do
      {
        v13 = v12 >> 1;
        v14 = &v6[-5 * (v12 >> 1)];
        v16 = *((double *)v14 - 5);
        v15 = v14 - 5;
        v12 += ~(v12 >> 1);
        if (*a2 >= v16)
          v12 = v13;
        else
          v6 = v15;
      }
      while (v12);
    }
    sub_1000118A0((uint64_t *)(a1 + 24), (uint64_t)v6, (unint64_t)a2);
    v17 = *(double *)(a1 + 8);
    v18 = *a2;
    if (v17 < 0.0 || v17 > v18)
      *(double *)(a1 + 8) = v18;
    if (*(double *)(a1 + 16) < v18)
      *(double *)(a1 + 16) = v18;
  }
  else
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v4 = (_QWORD *)*v4;
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,updateWithInvalidArgs\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
    }
  }
}

void sub_100010958(char *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  _WORD v11[6];
  _QWORD *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 48;
    if (a1[71] < 0)
      v3 = (_QWORD *)*v3;
    v4 = a1 + 160;
    if (a1[183] < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = v3;
    v19 = 2081;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,save\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (a1[184])
  {
    v5 = a1 + 48;
    if (a1[71] < 0)
      v5 = *(char **)v5;
    sub_10000E8A0(&__p, "0002");
    sub_100081C30((uint64_t)buf, v5, (uint64_t)&__p);
    if (SBYTE3(v12) < 0)
      operator delete(__p);
    if (v21)
      operator new[]();
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1 + 160;
      if (a1[183] < 0)
        v9 = (_QWORD *)*v9;
      __p = (void *)68289283;
      v11[0] = 2082;
      *(_QWORD *)&v11[1] = "";
      v11[5] = 2081;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,cannotOpenFileToSave\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100081FA4((uint64_t)buf);
  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1 + 160;
      if (a1[183] < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,deferSavingTillFirstUnlock\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    a1[185] = 1;
  }
}

void sub_100010CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  sub_100081FA4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100010D4C()
{
  operator delete();
}

_QWORD *sub_100010D60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F0F18;
  result[1] = v3;
  return result;
}

uint64_t sub_100010D94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F0F18;
  a2[1] = v2;
  return result;
}

void sub_100010DB0(uint64_t a1)
{
  sub_100010E00(a1 + 8);
}

uint64_t sub_100010DB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100010DF4()
{
}

void sub_100010E00(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 1))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100010ECC((uint64_t)v1);
    *v1 = 1;
  }
}

void sub_100010ECC(uint64_t a1)
{
  NSObject *v2;
  const char **v3;
  _QWORD *v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char **v8;
  const char *v9;
  char v10;
  char v11;
  const std::__fs::filesystem::path *v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char **v17;
  __int16 v18;
  _QWORD *v19;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v3 = (const char **)*v3;
    v4 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v3;
    v18 = 2081;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,load\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    v8 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v8 = (const char **)*v8;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v8;
    v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,deferLoadingTillFirstUnlock\", \"filePath\":%{private, loc"
         "ation:escape_only}s}";
    goto LABEL_28;
  }
  v5 = (const char **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    v6 = *v5;
  }
  else
  {
    v6 = (const char *)(a1 + 48);
    if (!*(_BYTE *)(a1 + 71))
      return;
  }
  sub_10000E8A0(buf, "0002");
  v10 = sub_10008167C(v6, (uint64_t)buf);
  v11 = v10;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v11 & 1) != 0)
LABEL_19:
      operator new[]();
  }
  else if ((v10 & 1) != 0)
  {
    goto LABEL_19;
  }
  v12 = (const std::__fs::filesystem::path *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v12 = (const std::__fs::filesystem::path *)*v5;
  if (sub_100081088(v12))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0)
        v5 = (const char **)*v5;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v5;
      v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,unabletToRemoveFile\", \"filePath\":%{private, location:escape_only}s}";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
    }
  }
}

void sub_1000114CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  sub_10008161C((uint64_t)&a35);
  operator delete[]();
}

void sub_1000115EC()
{
  operator delete();
}

_QWORD *sub_100011600(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F0F98;
  result[1] = v3;
  return result;
}

uint64_t sub_100011634(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F0F98;
  a2[1] = v2;
  return result;
}

double sub_100011650(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_1000116A0((uint64_t *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_100011658(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100011694()
{
}

__n128 sub_1000116A0(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *a1;
  if (!*(_BYTE *)(*a1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_10001177C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  sub_100004F4C(a1, a3);
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init\"}", (uint8_t *)v8, 0x12u);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    sub_100004FB0();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return a1;
}

void sub_100011864(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000118A0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 > 0x666666666666666)
      sub_100004C50();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_100011E8C(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[40 * v8];
    v20 = v19;
    v21 = &v16[40 * v15];
    sub_100011BAC(&v18, (uint64_t *)a3);
    v4 = sub_100011D3C((uint64_t)a1, &v18, (uint64_t *)v4);
    sub_1000120FC((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_100011AB8((uint64_t)a1, (uint64_t *)a3);
  }
  else
  {
    sub_100011B28((uint64_t)a1, a2, v6, a2 + 40);
    if (v4 <= a3)
      a3 += 40 * (a1[1] > a3);
    v12 = *(_QWORD *)a3;
    *(_BYTE *)(v4 + 8) = *(_BYTE *)(a3 + 8);
    *(_QWORD *)v4 = v12;
    std::string::operator=((std::string *)(v7 + 40 * v8 + 16), (const std::string *)(a3 + 16));
  }
  return v4;
}

void sub_100011A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000120FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100011A2C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  void **v8;
  __int128 v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_BYTE *)(a4 + 8) = *((_BYTE *)v5 + 8);
      *(_QWORD *)a4 = v7;
      v8 = (void **)(a4 + 16);
      if (*(char *)(a4 + 39) < 0)
        operator delete(*v8);
      v9 = *((_OWORD *)v5 + 1);
      *(_QWORD *)(a4 + 32) = v5[4];
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 39) = 0;
      *((_BYTE *)v5 + 16) = 0;
      a4 += 40;
      v5 += 5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_BYTE *sub_100011AB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v3 = v4;
  result = (_BYTE *)(v3 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    result = sub_100004870(result, (void *)a2[2], a2[3]);
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v3 + 32) = a2[4];
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_100011B20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100011B28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
      *(_QWORD *)v8 = v10;
      v11 = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 16) = v11;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v8 += 40;
      v9 += 40;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_100011DEC((uint64_t)&v13, a2, v7, v6);
}

_BYTE *sub_100011BAC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *result;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (uint64_t *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x999999999999999ALL * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v30 = a1[4];
      v13 = (char *)sub_100011E8C(v12, v10);
      v15 = &v13[40 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = &v15[v17];
        v19 = &v13[40 * v11];
        do
        {
          v20 = *(_QWORD *)v16;
          v19[8] = *(_BYTE *)(v16 + 8);
          *(_QWORD *)v19 = v20;
          v21 = *(_OWORD *)(v16 + 16);
          *((_QWORD *)v19 + 4) = *(_QWORD *)(v16 + 32);
          *((_OWORD *)v19 + 1) = v21;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          v19 += 40;
          v16 += 40;
        }
        while (v19 != v18);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v16);
        v18 = &v13[40 * v11];
      }
      v27 = *a1;
      *a1 = v13;
      a1[1] = v15;
      v28 = v22;
      v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[40 * v14];
      v29 = v23;
      sub_1000120FC((uint64_t)&v27);
      v4 = a1[2];
    }
    else
    {
      v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -5 * (v7 >> 1);
      sub_100011A2C((uint64_t)&v27, v5, (uint64_t *)v4, (uint64_t)&v5[-5 * (v7 >> 1)]);
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  v24 = *a2;
  *(_BYTE *)(v4 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v4 = v24;
  result = (_BYTE *)(v4 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    result = sub_100004870(result, (void *)a2[2], a2[3]);
  }
  else
  {
    v26 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v4 + 32) = a2[4];
    *(_OWORD *)result = v26;
  }
  a1[2] += 40;
  return result;
}

uint64_t sub_100011D3C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_100011ED0(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100011F78(v7, a3, *(uint64_t **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100011DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 40);
      *(_BYTE *)(v9 - 32) = *(_BYTE *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 40) = v10;
      v11 = a4 + v7 - 24;
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*(void **)v11);
      v7 -= 40;
      v12 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v11 = v12;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void *sub_100011E8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_100004984();
  return operator new(40 * a2);
}

uint64_t sub_100011ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_BYTE *)(v7 - 32) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = v8;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10001200C((uint64_t)v12);
  return v10;
}

uint64_t sub_100011F78(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_BYTE *)(v4 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)v4 = v5;
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(v4 + 32) = a2[4];
      *(_OWORD *)(v4 + 16) = v6;
      a2[3] = 0;
      a2[4] = 0;
      a2[2] = 0;
      v4 += 40;
      a2 += 5;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  sub_100012084((uint64_t)v8);
  return v4;
}

uint64_t sub_10001200C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100012040(a1);
  return a1;
}

void sub_100012040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 40;
  }
}

uint64_t sub_100012084(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1000120B8(a1);
  return a1;
}

void sub_1000120B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 40;
  }
}

uint64_t sub_1000120FC(uint64_t a1)
{
  sub_100012130(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100012130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *sub_100012184(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,released\"}", (uint8_t *)v7, 0x12u);
  }
  v3 = a1[3];
  if (!v3)
    sub_100004FB0();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_100012284(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

_QWORD *sub_100012290(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100012360;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100012360(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10001248C;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_10001248C((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100012448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001248C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_1000124B0(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 32, a2 + 32);
}

_QWORD *sub_1000124BC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1000124F0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100012600;
  v11[3] = &unk_1000F1070;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_1000125E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100012600(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100012744;
  v5[3] = &unk_1000F1070;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100012744((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000126F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100012744(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_10001279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000127B0(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_1000127BC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1000127F0(uint64_t a1)
{

  return a1;
}

void sub_100012818(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100012850()
{
  return 0;
}

id sub_100012858(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F10E0;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10001288C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10001289C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_1000128AC(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1150))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000128E8()
{
  return &off_1000F1150;
}

_QWORD *sub_1000128F4(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000129C4;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1000129C4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100012AF0;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100012AF0((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100012AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012AF0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_100012B14(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100012C24;
  v11[3] = &unk_1000F1168;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_100012C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100012C24(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100012D68;
  v5[3] = &unk_1000F1168;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100012D68((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100012D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100012D68(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_100012DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100012DD4(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_100012DE0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100012E14(uint64_t a1)
{

  return a1;
}

void sub_100012E3C(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100012E74()
{
  return 0;
}

id sub_100012E7C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F11D8;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100012EB0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100012EC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100012ED0(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1248))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100012F0C()
{
  return &off_1000F1248;
}

void sub_100012F18(uint64_t a1, double *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _QWORD *v25;

  if (*a2 >= 0.0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(uint64_t **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3) >= *(_QWORD *)(a1 + 136))
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v9 = (_QWORD *)*v9;
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,maxHistoryLenReached\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
        v7 = *(_QWORD *)(a1 + 24);
        v6 = *(uint64_t **)(a1 + 32);
      }
      sub_100014068((uint64_t)&v20, (uint64_t *)(v7 + 40), v6, v7);
      v6 = v10;
      for (i = *(uint64_t **)(a1 + 32); i != v6; i -= 5)
      {
        if (*((char *)i - 1) < 0)
          operator delete((void *)*(i - 3));
      }
      *(_QWORD *)(a1 + 32) = v6;
      *(_BYTE *)(a1 + 152) = 1;
      v7 = *(_QWORD *)(a1 + 24);
    }
    if (v6 != (uint64_t *)v7)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
      do
      {
        v13 = v12 >> 1;
        v14 = &v6[-5 * (v12 >> 1)];
        v16 = *((double *)v14 - 5);
        v15 = v14 - 5;
        v12 += ~(v12 >> 1);
        if (*a2 >= v16)
          v12 = v13;
        else
          v6 = v15;
      }
      while (v12);
    }
    sub_100013EDC((uint64_t *)(a1 + 24), (uint64_t)v6, (unint64_t)a2);
    v17 = *(double *)(a1 + 8);
    v18 = *a2;
    if (v17 < 0.0 || v17 > v18)
      *(double *)(a1 + 8) = v18;
    if (*(double *)(a1 + 16) < v18)
      *(double *)(a1 + 16) = v18;
  }
  else
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v4 = (_QWORD *)*v4;
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,updateWithInvalidArgs\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
    }
  }
}

void sub_100013194(char *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  _WORD v11[6];
  _QWORD *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 48;
    if (a1[71] < 0)
      v3 = (_QWORD *)*v3;
    v4 = a1 + 160;
    if (a1[183] < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = v3;
    v19 = 2081;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,save\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (a1[184])
  {
    v5 = a1 + 48;
    if (a1[71] < 0)
      v5 = *(char **)v5;
    sub_10000E8A0(&__p, "0002");
    sub_100081C30((uint64_t)buf, v5, (uint64_t)&__p);
    if (SBYTE3(v12) < 0)
      operator delete(__p);
    if (v21)
      operator new[]();
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1 + 160;
      if (a1[183] < 0)
        v9 = (_QWORD *)*v9;
      __p = (void *)68289283;
      v11[0] = 2082;
      *(_QWORD *)&v11[1] = "";
      v11[5] = 2081;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,cannotOpenFileToSave\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100081FA4((uint64_t)buf);
  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1 + 160;
      if (a1[183] < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,deferSavingTillFirstUnlock\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    a1[185] = 1;
  }
}

void sub_100013500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  sub_100081FA4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100013588()
{
  operator delete();
}

_QWORD *sub_10001359C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1268;
  result[1] = v3;
  return result;
}

uint64_t sub_1000135D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1268;
  a2[1] = v2;
  return result;
}

void sub_1000135EC(uint64_t a1)
{
  sub_10001363C(a1 + 8);
}

uint64_t sub_1000135F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100013630()
{
}

void sub_10001363C(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 1))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

void sub_100013708(uint64_t a1)
{
  NSObject *v2;
  const char **v3;
  _QWORD *v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char **v8;
  const char *v9;
  char v10;
  char v11;
  const std::__fs::filesystem::path *v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char **v17;
  __int16 v18;
  _QWORD *v19;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v3 = (const char **)*v3;
    v4 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v3;
    v18 = 2081;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,load\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    v8 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v8 = (const char **)*v8;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v8;
    v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,deferLoadingTillFirstUnlock\", \"filePath\":%{private, loc"
         "ation:escape_only}s}";
    goto LABEL_28;
  }
  v5 = (const char **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    v6 = *v5;
  }
  else
  {
    v6 = (const char *)(a1 + 48);
    if (!*(_BYTE *)(a1 + 71))
      return;
  }
  sub_10000E8A0(buf, "0002");
  v10 = sub_10008167C(v6, (uint64_t)buf);
  v11 = v10;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v11 & 1) != 0)
LABEL_19:
      operator new[]();
  }
  else if ((v10 & 1) != 0)
  {
    goto LABEL_19;
  }
  v12 = (const std::__fs::filesystem::path *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v12 = (const std::__fs::filesystem::path *)*v5;
  if (sub_100081088(v12))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0)
        v5 = (const char **)*v5;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v5;
      v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,unabletToRemoveFile\", \"filePath\":%{private, location:escape_only}s}";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
    }
  }
}

void sub_100013D08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  sub_10008161C((uint64_t)&a35);
  operator delete[]();
}

void sub_100013E28()
{
  operator delete();
}

_QWORD *sub_100013E3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F12E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100013E70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F12E8;
  a2[1] = v2;
  return result;
}

double sub_100013E8C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_1000116A0((uint64_t *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_100013E94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100013ED0()
{
}

unint64_t sub_100013EDC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 > 0x666666666666666)
      sub_100004C50();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_100011E8C(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[40 * v8];
    v20 = v19;
    v21 = &v16[40 * v15];
    sub_1000141E8(&v18, (uint64_t *)a3);
    v4 = sub_100014378((uint64_t)a1, &v18, (uint64_t *)v4);
    sub_1000120FC((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_1000140F4((uint64_t)a1, (uint64_t *)a3);
  }
  else
  {
    sub_100014164((uint64_t)a1, a2, v6, a2 + 40);
    if (v4 <= a3)
      a3 += 40 * (a1[1] > a3);
    v12 = *(_QWORD *)a3;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)v4 = v12;
    std::string::operator=((std::string *)(v7 + 40 * v8 + 16), (const std::string *)(a3 + 16));
  }
  return v4;
}

void sub_100014054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000120FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100014068(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  void **v8;
  __int128 v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_DWORD *)(a4 + 8) = *((_DWORD *)v5 + 2);
      *(_QWORD *)a4 = v7;
      v8 = (void **)(a4 + 16);
      if (*(char *)(a4 + 39) < 0)
        operator delete(*v8);
      v9 = *((_OWORD *)v5 + 1);
      *(_QWORD *)(a4 + 32) = v5[4];
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 39) = 0;
      *((_BYTE *)v5 + 16) = 0;
      a4 += 40;
      v5 += 5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_BYTE *sub_1000140F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_DWORD *)(v3 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v3 = v4;
  result = (_BYTE *)(v3 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    result = sub_100004870(result, (void *)a2[2], a2[3]);
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v3 + 32) = a2[4];
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_10001415C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100014164(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_QWORD *)v9;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)v8 = v10;
      v11 = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 16) = v11;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v8 += 40;
      v9 += 40;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_100014428((uint64_t)&v13, a2, v7, v6);
}

_BYTE *sub_1000141E8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *result;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (uint64_t *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x999999999999999ALL * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v30 = a1[4];
      v13 = (char *)sub_100011E8C(v12, v10);
      v15 = &v13[40 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = &v15[v17];
        v19 = &v13[40 * v11];
        do
        {
          v20 = *(_QWORD *)v16;
          *((_DWORD *)v19 + 2) = *(_DWORD *)(v16 + 8);
          *(_QWORD *)v19 = v20;
          v21 = *(_OWORD *)(v16 + 16);
          *((_QWORD *)v19 + 4) = *(_QWORD *)(v16 + 32);
          *((_OWORD *)v19 + 1) = v21;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          v19 += 40;
          v16 += 40;
        }
        while (v19 != v18);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v16);
        v18 = &v13[40 * v11];
      }
      v27 = *a1;
      *a1 = v13;
      a1[1] = v15;
      v28 = v22;
      v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[40 * v14];
      v29 = v23;
      sub_1000120FC((uint64_t)&v27);
      v4 = a1[2];
    }
    else
    {
      v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -5 * (v7 >> 1);
      sub_100014068((uint64_t)&v27, v5, (uint64_t *)v4, (uint64_t)&v5[-5 * (v7 >> 1)]);
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  v24 = *a2;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v4 = v24;
  result = (_BYTE *)(v4 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    result = sub_100004870(result, (void *)a2[2], a2[3]);
  }
  else
  {
    v26 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v4 + 32) = a2[4];
    *(_OWORD *)result = v26;
  }
  a1[2] += 40;
  return result;
}

uint64_t sub_100014378(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_1000144C8(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100014570(v7, a3, *(uint64_t **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100014428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 40);
      *(_DWORD *)(v9 - 32) = *(_DWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 40) = v10;
      v11 = a4 + v7 - 24;
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*(void **)v11);
      v7 -= 40;
      v12 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v11 = v12;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_1000144C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = v8;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100014604((uint64_t)v12);
  return v10;
}

uint64_t sub_100014570(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_DWORD *)(v4 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v4 = v5;
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(v4 + 32) = a2[4];
      *(_OWORD *)(v4 + 16) = v6;
      a2[3] = 0;
      a2[4] = 0;
      a2[2] = 0;
      v4 += 40;
      a2 += 5;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  sub_100014638((uint64_t)v8);
  return v4;
}

uint64_t sub_100014604(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100012040(a1);
  return a1;
}

uint64_t sub_100014638(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1000120B8(a1);
  return a1;
}

_QWORD *sub_10001466C(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10001473C;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10001473C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100014868;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100014868((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100014824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014868(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_10001488C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10001499C;
  v11[3] = &unk_1000F1360;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_100014984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001499C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100014AE0;
  v5[3] = &unk_1000F1360;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100014AE0((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100014A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100014AE0(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_100014B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100014B4C(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_100014B58(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100014B8C(uint64_t a1)
{

  return a1;
}

void sub_100014BB4(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100014BEC()
{
  return 0;
}

id sub_100014BF4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F13D0;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100014C28(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100014C38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100014C48(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1440))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100014C84()
{
  return &off_1000F1440;
}

_QWORD *sub_100014C90(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100014D60;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100014D60(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100014E8C;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100014E8C((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100014E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014E8C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_100014EB0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100014FC0;
  v11[3] = &unk_1000F1458;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_100014FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100014FC0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100015104;
  v5[3] = &unk_1000F1458;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100015104((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000150B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100015104(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_10001515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100015170(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_10001517C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1000151B0(uint64_t a1)
{

  return a1;
}

void sub_1000151D8(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100015210()
{
  return 0;
}

id sub_100015218(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F14C8;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10001524C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10001525C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_10001526C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1538))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000152A8()
{
  return &off_1000F1538;
}

_QWORD *sub_1000152B4(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100015384;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100015384(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1000154B0;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_1000154B0((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_10001546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000154B0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1000154D4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_1000155E4;
  v11[3] = &unk_1000F1550;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_1000155CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000155E4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100015728;
  v5[3] = &unk_1000F1550;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100015728((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000156DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100015728(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_100015780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100015794(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_1000157A0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1000157D4(uint64_t a1)
{

  return a1;
}

void sub_1000157FC(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100015834()
{
  return 0;
}

id sub_10001583C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F15C0;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100015870(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100015880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100015890(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1630))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000158CC()
{
  return &off_1000F1630;
}

_QWORD *sub_1000158D8(uint64_t a1)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD block[4];
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000159A8;
  block[3] = &unk_1000F1008;
  sub_100004F4C((uint64_t)v5, a1 + 40);
  dispatch_async(v1, block);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1000159A8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100015AD4;
  v5[3] = &unk_1000F1008;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100015AD4((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100015A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100015AD4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_100015AF8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  _BYTE v13[24];
  _BYTE *v14;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_100015C08;
  v11[3] = &unk_1000F1648;
  sub_100004F4C((uint64_t)v13, a1 + 40);
  v5 = v3;
  v12 = v5;
  dispatch_async(v4, v11);

  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8 * v10))(v9, v6, v7, v8);
  }

}

void sub_100015BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015C08(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100015D4C;
  v5[3] = &unk_1000F1648;
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v6 = *(id *)(a1 + 32);
  sub_100015D4C((uint64_t)v5);

  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100015D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100015D4C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 48))(v2, &v3);

}

void sub_100015DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100015DB8(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_100015DC4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100015DF8(uint64_t a1)
{

  return a1;
}

void sub_100015E20(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100015E58()
{
  return 0;
}

id sub_100015E60(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F16B8;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100015E94(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100015EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100015EB4(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1728))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100015EF0()
{
  return &off_1000F1728;
}

void sub_100015F00()
{
  operator delete();
}

_QWORD *sub_100015F14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1748;
  result[1] = v3;
  return result;
}

uint64_t sub_100015F48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1748;
  a2[1] = v2;
  return result;
}

void sub_100015F64(uint64_t a1)
{
  sub_100010E00(a1 + 8);
}

uint64_t sub_100015F6C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100015FA8()
{
}

void sub_100015FB8()
{
  operator delete();
}

_QWORD *sub_100015FCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F17C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100016000(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F17C8;
  a2[1] = v2;
  return result;
}

double sub_10001601C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_1000116A0((uint64_t *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_100016024(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100016060()
{
}

void sub_10001606C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10001606C(a1, *a2);
    sub_10001606C(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_1000160B0()
{
  operator delete();
}

_QWORD *sub_1000160C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1848;
  result[1] = v3;
  return result;
}

uint64_t sub_1000160F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1848;
  a2[1] = v2;
  return result;
}

void sub_100016114(uint64_t a1)
{
  sub_100010E00(a1 + 8);
}

uint64_t sub_10001611C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100016158()
{
}

void sub_100016168()
{
  operator delete();
}

_QWORD *sub_10001617C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F18C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000161B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F18C8;
  a2[1] = v2;
  return result;
}

double sub_1000161CC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_1000116A0((uint64_t *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000161D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100016210()
{
}

uint64_t **sub_10001621C(uint64_t **a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    sub_1000162D4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_1000162D4(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_100016328(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_100016328(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1000164C4()
{
  operator delete();
}

_QWORD *sub_1000164D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1948;
  result[1] = v3;
  return result;
}

uint64_t sub_10001650C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1948;
  a2[1] = v2;
  return result;
}

void sub_100016528(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_1000165F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100016630()
{
}

void sub_100016640()
{
  operator delete();
}

_QWORD *sub_100016654(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F19C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100016688(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F19C8;
  a2[1] = v2;
  return result;
}

__n128 sub_1000166A4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100016780(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000167BC()
{
}

void sub_1000167CC()
{
  operator delete();
}

_QWORD *sub_1000167E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1A48;
  result[1] = v3;
  return result;
}

uint64_t sub_100016814(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1A48;
  a2[1] = v2;
  return result;
}

void sub_100016830(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_1000168FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100016938()
{
}

void sub_100016948()
{
  operator delete();
}

_QWORD *sub_10001695C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1AC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100016990(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1AC8;
  a2[1] = v2;
  return result;
}

__n128 sub_1000169AC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100016A88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100016AC4()
{
}

void *sub_100016AD0(unint64_t a1)
{
  if (a1 >> 60)
    sub_100004984();
  return operator new(16 * a1);
}

void sub_100016B08()
{
  operator delete();
}

_QWORD *sub_100016B1C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1B48;
  result[1] = v3;
  return result;
}

uint64_t sub_100016B50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1B48;
  a2[1] = v2;
  return result;
}

void sub_100016B6C(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100016C38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100016C74()
{
}

void sub_100016C84()
{
  operator delete();
}

_QWORD *sub_100016C98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1BC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100016CCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1BC8;
  a2[1] = v2;
  return result;
}

__n128 sub_100016CE8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100016DC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100016E00()
{
}

void sub_100016E10()
{
  operator delete();
}

_QWORD *sub_100016E24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1C48;
  result[1] = v3;
  return result;
}

uint64_t sub_100016E58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1C48;
  a2[1] = v2;
  return result;
}

void sub_100016E74(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100016F40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100016F7C()
{
}

void sub_100016F8C()
{
  operator delete();
}

_QWORD *sub_100016FA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100016FD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1CC8;
  a2[1] = v2;
  return result;
}

__n128 sub_100016FF0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_1000170CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100017108()
{
}

uint64_t sub_100017114()
{
  char *v0;
  __int128 v1;
  uint64_t v2;
  _BYTE v4[48];
  char v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4[0] = 0;
  *(_OWORD *)&v4[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v4[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v4[36] = &_mh_execute_header;
  *(_DWORD *)&v4[44] = 0;
  v7 = 0;
  v8 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v4 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v4[16] = v1;
  *(_OWORD *)&v4[32] = *((_OWORD *)v0 + 27);
  v5 = v0[448];
  if (v0 + 400 == v4)
    return *(unsigned int *)&v4[4];
  sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  v2 = *(unsigned int *)&v4[4];
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_1000171CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000171E8()
{
  char *v0;
  __int128 v1;
  unsigned int v2;
  uint64_t v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v5[16] = v1;
  *(_OWORD *)&v5[32] = *((_OWORD *)v0 + 27);
  v6 = v0[448];
  if (v0 + 400 != v5)
    sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  if (((1 << v5[28]) & 0x1004010840100401) != 0)
    v2 = *(_DWORD *)&v5[28];
  else
    v2 = 30;
  if (*(_DWORD *)&v5[28] <= 0x3Cu)
    v3 = v2;
  else
    v3 = 30;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1000172C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000172E0()
{
  char *v0;
  __int128 v1;
  unsigned int v2;
  uint64_t v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v5[16] = v1;
  *(_OWORD *)&v5[32] = *((_OWORD *)v0 + 27);
  v6 = v0[448];
  if (v0 + 400 != v5)
    sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  if (((1 << v5[32]) & 0x1004010840100401) != 0)
    v2 = *(_DWORD *)&v5[32];
  else
    v2 = 20;
  if (*(_DWORD *)&v5[32] <= 0x3Cu)
    v3 = v2;
  else
    v3 = 20;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1000173BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000173D8()
{
  char *v0;
  __int128 v1;
  NSObject *v2;
  uint64_t v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t buf;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;

  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v5[16] = v1;
  *(_OWORD *)&v5[32] = *((_OWORD *)v0 + 27);
  v6 = v0[448];
  if (v0 + 400 != v5)
    sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289283;
    v11 = 2082;
    v12 = "";
    v13 = 1025;
    v14 = *(_DWORD *)&v5[36];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleUtility,getCBAdvertiseRate\", \"bleCBAdvertiseRate\":%{private}d}", (uint8_t *)&buf, 0x18u);
  }
  v3 = 60;
  if (*(_DWORD *)&v5[36] <= 0x3Cu && ((1 << v5[36]) & 0x1004250040108401) != 0)
    v3 = *(unsigned int *)&v5[36];
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100017558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100017574()
{
  char *v0;
  __int128 v1;
  NSObject *v2;
  int v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t buf;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;

  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v5[16] = v1;
  *(_OWORD *)&v5[32] = *((_OWORD *)v0 + 27);
  v6 = v0[448];
  if (v0 + 400 != v5)
    sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289283;
    v11 = 2082;
    v12 = "";
    v13 = 1025;
    v14 = *(_DWORD *)&v5[40];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleUtility,getBleAlertVersion\", \"bleDataVersion\":%{private}d}", (uint8_t *)&buf, 0x18u);
  }
  v3 = *(_DWORD *)&v5[40];
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3 == 1;
}

void sub_1000176C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000176E4()
{
  char *v0;
  __int128 v1;
  NSObject *v2;
  unsigned int v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t buf;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;

  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v5[16] = v1;
  *(_OWORD *)&v5[32] = *((_OWORD *)v0 + 27);
  v6 = v0[448];
  if (v0 + 400 != v5)
    sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289283;
    v11 = 2082;
    v12 = "";
    v13 = 1025;
    v14 = *(_DWORD *)&v5[44];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleUtility,getBleAdvertisementTimePrecision\", \"bleAdvertisementTimePrecisionInMSec\":%{private}d}", (uint8_t *)&buf, 0x18u);
  }
  v3 = *(_DWORD *)&v5[44];
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

void sub_100017838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100017854(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_QWORD *)v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_QWORD *)v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      sub_100004C50();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1000179A4(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

char *sub_1000179A4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_100004C50();
  result = (char *)sub_1000179E4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1000179E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_100004984();
  return operator new(8 * a2);
}

__int128 *sub_100017A18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100102838);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100102838))
  {
    xmmword_100102810 = 0u;
    unk_100102820 = 0u;
    dword_100102830 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_100017A8C, &xmmword_100102810, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100102838);
  }
  return &xmmword_100102810;
}

uint64_t sub_100017A8C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4 == v2 + 3)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_8;
    }
    v4 = v2 + 3;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_100017B10(_QWORD *a1, void *a2)
{
  id v3;
  int int64;
  NSObject *v5;
  uint64_t *v6;
  uint64_t *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint8_t *v18;

  v3 = a2;
  int64 = xpc_dictionary_get_int64(v3, "TestMessageType");
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = int64;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saTestRouter,processInputs\", \"message\":%{public}d}", buf, 0x18u);
  }
  v6 = sub_1000182F0(a1, int64);
  if (v6)
  {
    v7 = v6;
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = int64;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saTestRouter,processInputs\", \"message\":%{public}d}", buf, 0x18u);
    }
    sub_100004F4C((uint64_t)buf, (uint64_t)(v7 + 3));
    v11 = v3;
    if (!v18)
      sub_100004FB0();
    (*(void (**)(uint8_t *, id *))(*(_QWORD *)v18 + 48))(v18, &v11);

    v9 = v18;
    if (v18 == buf)
    {
      v10 = 4;
      v9 = buf;
      goto LABEL_11;
    }
    if (v18)
    {
      v10 = 5;
LABEL_11:
      (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
    }
  }

}

void sub_100017CE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017D40(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  _DWORD v42[2];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE *v46;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v42[0] = 68289282;
    v42[1] = 0;
    *(_WORD *)v43 = 2082;
    *(_QWORD *)&v43[2] = "";
    v44 = 1026;
    v45 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saTestRouter,registerForInput\", \"message\":%{public}d}", (uint8_t *)v42, 0x18u);
  }
  if (sub_1000182F0(a1, a2))
    return;
  v42[0] = a2;
  v7 = v43;
  sub_100004F4C((uint64_t)v43, a3);
  v8 = v42[0];
  v9 = v42[0];
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v6 = v42[0];
      if (v10 <= v42[0])
        v6 = v42[0] % v10;
    }
    else
    {
      v6 = (v10 - 1) & v42[0];
    }
    v12 = *(uint64_t ***)(*a1 + 8 * v6);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v42[0])
        {
          if (*((_DWORD *)i + 4) == v42[0])
            goto LABEL_83;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v6)
            break;
        }
      }
    }
  }
  v15 = operator new(0x38uLL);
  v16 = v15;
  *v15 = 0;
  v15[1] = v9;
  *((_DWORD *)v15 + 4) = v8;
  v17 = (char *)(v15 + 3);
  if (v46)
  {
    if (v46 == v43)
    {
      v15[6] = v17;
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)v43 + 24))(v43, v17);
      goto LABEL_27;
    }
    v18 = &v46;
    v15[6] = v46;
  }
  else
  {
    v18 = v15 + 6;
  }
  *v18 = 0;
LABEL_27:
  v19 = a1 + 2;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_39;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            sub_100004984();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v19;
          if (*v19)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = v19;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_64:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_68;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_68:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v6 = v9 % v10;
      else
        v6 = v9;
    }
    else
    {
      v6 = (v10 - 1) & v9;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v6);
  if (v38)
  {
    *v16 = *v38;
  }
  else
  {
    *v16 = *v19;
    *v19 = v16;
    *(_QWORD *)(v37 + 8 * v6) = v19;
    if (!*v16)
      goto LABEL_82;
    v39 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
  }
  *v38 = v16;
LABEL_82:
  ++a1[3];
LABEL_83:
  if (v46 == v43)
  {
    v40 = 4;
  }
  else
  {
    if (!v46)
      return;
    v40 = 5;
    v7 = v46;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v40))(v7);
}

void sub_10001825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    sub_100004860(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000182F0(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void sub_1000183A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  const char *v6;
  void **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  NSObject *v11;
  void **v12;
  NSObject *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  NSObject *v17;
  void **v18;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  int v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD v46[4];
  char *v47;
  __int128 *v48;
  uint8_t buf[8];
  __int16 v50;
  const char *v51;
  __int16 v52;
  _BYTE v53[14];
  __int16 v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  void **v83;

  if (a1 != a2)
  {
    v2 = a1;
    do
    {
      sub_10001D8C0((uint64_t)&v23, v2);
      v20 = v2;
      v3 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v4 = &v24;
        if (v25 < 0)
          v4 = v24;
        v5 = &v26;
        if (v27 < 0)
          v5 = v26;
        v6 = (const char *)v30;
        if (!v30)
          v6 = "";
        v7 = &v30;
        if (v31 < 0)
          v7 = (void **)v6;
        *(_DWORD *)buf = 68293379;
        *(_DWORD *)&buf[4] = 0;
        v50 = 2082;
        v51 = "";
        v52 = 1025;
        *(_DWORD *)v53 = v23;
        *(_WORD *)&v53[4] = 2081;
        *(_QWORD *)&v53[6] = v4;
        v54 = 2081;
        v55 = v5;
        v56 = 2049;
        v57 = v32;
        v58 = 2049;
        v59 = v33;
        v60 = 2049;
        v61 = v34;
        v62 = 2049;
        v63 = v35;
        v64 = 2049;
        v65 = v36;
        v66 = 2049;
        v67 = v37;
        v68 = 2049;
        v69 = v38;
        v70 = 2049;
        v71 = v39;
        v72 = 2049;
        v73 = v40;
        v74 = 2049;
        v75 = v41;
        v76 = 1025;
        v77 = v42;
        v78 = 2049;
        v79 = (v44 - (_BYTE *)v43) >> 2;
        v80 = 2049;
        v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - v47) >> 3);
        v82 = 2081;
        v83 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,printLBChannelInformation\", \"GridOrTileId\":%{private}d, \"region\":%{private, location:escape_only}s, \"country\":%{private, location:escape_only}s, \"swStartingLat\":\"%{private}0.3f\", \"swStartingLon\":\"%{private}0.3f\", \"gridLatOffset\":\"%{private}0.3f\", \"gridLonOffset\":\"%{private}0.3f\", \"swLat\":\"%{private}0.3f\", \"swLon\":\"%{private}0.3f\", \"neLat\":\"%{private}0.3f\", \"neLon\":\"%{private}0.3f\", \"refreshRate\":\"%{private}0.3f\", \"gridSizeInDegree\":\"%{private}0.3f\", \"gridZoomLevel\":%{private}d, \"NumberOfUnSupportedGrids\":%{private}lu, \"NumberOfNonDitheringChannels\":%{private}lu, \"livabilityChannelPrefix\":%{private, location:escape_only}s}", buf, 0xB4u);
      }
      v9 = (__int128 *)v46[0];
      v8 = (__int128 *)v46[1];
      while (v9 != v8)
      {
        if (*((char *)v9 + 23) < 0)
        {
          sub_100004870(__p, *(void **)v9, *((_QWORD *)v9 + 1));
        }
        else
        {
          v10 = *v9;
          v22 = *((_QWORD *)v9 + 2);
          *(_OWORD *)__p = v10;
        }
        v11 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          if (v22 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2081;
          *(_QWORD *)v53 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,printLBChannelInformation\", \"dithChanName\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        if (SHIBYTE(v22) < 0)
          operator delete(__p[0]);
        v9 = (__int128 *)((char *)v9 + 24);
      }
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v50 = 2082;
        v51 = "";
        v52 = 2050;
        *(_QWORD *)v53 = v45;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,printLBChannelInformation\", \"ParticipationPercentageOfDitheringChannels\":\"%{public}0.3f\"}", buf, 0x1Cu);
        v13 = SALogObjectGeneral;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        v50 = 2082;
        v51 = "";
        v52 = 2049;
        *(_QWORD *)v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - v47) >> 3);
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,printLBChannelInformation\", \"NumberOfNonDitheringChannels\":%{private}lu}", buf, 0x1Cu);
      }
      v15 = (__int128 *)v47;
      v14 = v48;
      while (v15 != v14)
      {
        if (*((char *)v15 + 23) < 0)
        {
          sub_100004870(__p, *(void **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v16 = *v15;
          v22 = *((_QWORD *)v15 + 2);
          *(_OWORD *)__p = v16;
        }
        v17 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          if (v22 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2081;
          *(_QWORD *)v53 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,printLBChannelInformation\", \"nonDithChanName\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        if (SHIBYTE(v22) < 0)
          operator delete(__p[0]);
        v15 = (__int128 *)((char *)v15 + 24);
      }
      *(_QWORD *)buf = &v47;
      sub_100004EC0((void ***)buf);
      *(_QWORD *)buf = v46;
      sub_100004EC0((void ***)buf);
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      if (v31 < 0)
        operator delete(v30);
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
      v2 = v20 + 280;
    }
    while (v20 + 280 != a2);
  }
}

void sub_10001889C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(exception_object);
}

void sub_1000188BC(uint64_t a1, void *a2, int64x2_t *a3, std::string *a4)
{
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  NSObject *v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  NSObject *v39;
  _BOOL4 v40;
  int v41;
  BOOL v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  NSObject *v48;
  void *v49;
  NSObject *v50;
  __int128 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  unsigned int v77;
  NSObject *v78;
  _BOOL4 v79;
  NSObject *v80;
  int v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  unsigned int v86;
  void *v87;
  void *v88;
  _OWORD *v89;
  __int128 v90;
  void *v91;
  _OWORD *v92;
  __int128 v93;
  void *v94;
  void *v95;
  _BYTE *v96;
  void *v97;
  _BYTE *v98;
  NSObject *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  id v107;
  void *v108;
  NSObject *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void **p_data;
  void *v114;
  uint64_t v115;
  void **v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  void **v121;
  void *v122;
  uint64_t v123;
  void **v124;
  void *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  std::string::size_type *p_size;
  void *v130;
  void *v131;
  void *v132;
  std::string::__raw *v133;
  NSObject *v134;
  void *v135;
  void *v136;
  std::string::size_type *v137;
  NSObject *v138;
  void *v139;
  void *v140;
  NSObject *v141;
  const char *v142;
  const char *v143;
  NSObject *v144;
  void *v145;
  NSObject *v146;
  NSObject *v147;
  const char *v148;
  NSObject *v149;
  _DWORD *v150;
  _DWORD *v151;
  char *v152;
  _OWORD *v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  void *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t *v165;
  std::string::size_type v166;
  uint64_t v167;
  std::string::size_type v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  std::string::size_type v177;
  int v178;
  std::string::size_type v179;
  std::string::size_type v180;
  __int128 v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  __int128 v188;
  std::string::size_type v189;
  int v190;
  std::string::size_type v191;
  std::string::size_type v192;
  __int128 v193;
  std::string *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  std::string::size_type v202;
  int v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  uint64_t *v209;
  std::string::pointer v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  __int128 v217;
  std::string::size_type v218;
  int v219;
  NSObject *v220;
  const char *v221;
  const char *v222;
  const char *v223;
  const char *v224;
  const char *v225;
  std::string::size_type v226;
  std::string::pointer v227;
  std::string::pointer v228;
  std::string::size_type v229;
  const char *v230;
  NSObject *v231;
  int v232;
  const char *data;
  const char *v234;
  const char *v235;
  std::string::pointer v236;
  std::string::size_type size;
  std::string::pointer v238;
  std::string::size_type v239;
  std::string::size_type v240;
  std::string::size_type v241;
  std::string::size_type v242;
  std::string::pointer v243;
  std::string::size_type v244;
  NSObject *v245;
  std::string::pointer v246;
  std::string::pointer v247;
  std::string::size_type v248;
  NSObject *v249;
  std::string::pointer v250;
  uint64_t v251;
  const char *v252;
  const char *v253;
  const char *v254;
  const char *v255;
  std::string::pointer v256;
  std::string::size_type v257;
  std::string::pointer v258;
  std::string::size_type v259;
  std::string::pointer v260;
  std::string::size_type v261;
  std::string::size_type v262;
  NSObject *v263;
  __int128 v264;
  id v265;
  id v266;
  id v268;
  std::string *__dst;
  uint64_t v270;
  void *v271;
  id v272;
  __int128 v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  id v277;
  unsigned int v278;
  unsigned int v279;
  id v280;
  unsigned int v281;
  uint8_t v282[32];
  _BYTE v283[120];
  _OWORD v284[3];
  __int128 v285;
  unsigned int v286;
  void *__p;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  _BYTE *v291;
  void *v292;
  unint64_t v293;
  uint64_t v294;
  _BYTE *v295;
  void *v296;
  _QWORD v297[2];
  _BYTE buf[32];
  _QWORD *v299;

  v265 = a2;
  *(_DWORD *)v283 = 0;
  __p = 0;
  v288 = 0;
  memset(&v283[8], 0, 112);
  memset(v284, 0, sizeof(v284));
  v285 = 0u;
  v286 = 0;
  v289 = 0;
  v290 = 0x4059000000000000;
  v291 = 0;
  v292 = 0;
  v293 = 0;
  v294 = 0x4059000000000000;
  v297[0] = 0;
  v295 = 0;
  v296 = 0;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readRegionConfigFromDefaults\"}", buf, 0x12u);
  }
  v6 = sub_10003D044();
  __dst = a4;
  if ((sub_10003CDF0((uint64_t)v6, CFSTR("Region"), (uint64_t)&v283[8]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read region\"}";
LABEL_53:
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x12u);
    v23 = 0;
    goto LABEL_54;
  }
  v7 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v7, CFSTR("Country"), (uint64_t)&v283[32]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read Country\"}";
    goto LABEL_53;
  }
  v8 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v8, CFSTR("LivabilityChannelPrefix"), (uint64_t)&v283[80]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read LivabilityPrefix\"}";
    goto LABEL_53;
  }
  v9 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v9, CFSTR("swStartingLat"), &v283[104]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read swStartingLat\"}";
    goto LABEL_53;
  }
  v10 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v10, CFSTR("swStartingLon"), &v283[112]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read swStartingLon\"}";
    goto LABEL_53;
  }
  v11 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v11, CFSTR("gridLatOffset"), v284) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read reggridLatOffsetion\"}";
    goto LABEL_53;
  }
  v12 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v12, CFSTR("gridLonOffset"), (_QWORD *)v284 + 1) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read gridLonOffset\"}";
    goto LABEL_53;
  }
  v13 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v13, CFSTR("swLat"), &v284[1]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read swLat\"}";
    goto LABEL_53;
  }
  v14 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v14, CFSTR("swLon"), (_QWORD *)&v284[1] + 1) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read swLon\"}";
    goto LABEL_53;
  }
  v15 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v15, CFSTR("neLat"), &v284[2]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read neLat\"}";
    goto LABEL_53;
  }
  v16 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v16, CFSTR("neLon"), (_QWORD *)&v284[2] + 1) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read neLon\"}";
    goto LABEL_53;
  }
  v17 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v17, CFSTR("gridSizeInDegree"), (_QWORD *)&v285 + 1) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read gridSizeInDegree\"}";
    goto LABEL_53;
  }
  v18 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v18, CFSTR("gridZoomLevel"), &v286) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read gridZoomLevel\"}";
    goto LABEL_53;
  }
  v19 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v19, CFSTR("refreshRate"), &v285) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read refreshRate\"}";
    goto LABEL_53;
  }
  v20 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v20, CFSTR("ChannelTopic"), (uint64_t)&v283[56]) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ChannelTopic\"}";
    goto LABEL_53;
  }
  v21 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v21, CFSTR("ParticipationPercentage"), &v294) & 1) == 0)
  {
    v24 = SALogObjectGeneral;
    v23 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v25 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ParticipationPercentage\"}";
    goto LABEL_53;
  }
  memset(buf, 0, 24);
  v22 = sub_10003D044();
  v23 = sub_10003CDF0((uint64_t)v22, CFSTR("ChannelName"), (uint64_t)buf);
  if ((v23 & 1) != 0)
  {
    sub_10001D5EC((uint64_t *)&v295, (__int128 *)buf);
    sub_10001D628(a3, (uint64_t)v283);
    sub_1000183A4(a3->i64[0], a3->i64[1]);
  }
  else
  {
    v263 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v282 = 68289026;
      *(_DWORD *)&v282[4] = 0;
      *(_WORD *)&v282[8] = 2082;
      *(_QWORD *)&v282[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v263, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ChannelName\"}", v282, 0x12u);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_54:
  *(_QWORD *)buf = &v295;
  sub_100004EC0((void ***)buf);
  *(_QWORD *)buf = &v291;
  sub_100004EC0((void ***)buf);
  if (__p)
  {
    v288 = __p;
    operator delete(__p);
  }
  if ((v283[103] & 0x80000000) != 0)
    operator delete(*(void **)&v283[80]);
  if ((v283[79] & 0x80000000) != 0)
    operator delete(*(void **)&v283[56]);
  if ((v283[55] & 0x80000000) != 0)
    operator delete(*(void **)&v283[32]);
  if ((v283[31] & 0x80000000) == 0)
  {
    if ((v23 & 1) != 0)
      goto LABEL_64;
LABEL_82:
    v44 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_111;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v45 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,regionConfig from defaults failed\"}";
    goto LABEL_110;
  }
  operator delete(*(void **)&v283[8]);
  if ((v23 & 1) == 0)
    goto LABEL_82;
LABEL_64:
  v26 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v26, CFSTR("English"), (uint64_t)__dst) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read English\"}";
LABEL_106:
    v48 = v46;
LABEL_107:
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v47, v283, 0x12u);
    goto LABEL_108;
  }
  v27 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v27, CFSTR("Spanish"), (uint64_t)&__dst[1]) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read Spanish\"}";
    goto LABEL_106;
  }
  v28 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v28, CFSTR("SourceString"), (uint64_t)&__dst[2]) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read SourceString\"}";
    goto LABEL_106;
  }
  v29 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v29, CFSTR("PerformanceTestSourceString"), (uint64_t)&__dst[3]) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read PerformanceTestSourceString\"}";
    goto LABEL_106;
  }
  v30 = sub_10003D044();
  if ((sub_10003CDF0((uint64_t)v30, CFSTR("FollowUpSourceString"), (uint64_t)&__dst[4]) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read FollowUpSourceString\"}";
    goto LABEL_106;
  }
  v31 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v31, CFSTR("ThresholdMMI"), __dst[7].__r_.__value_.__r.__words) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ThresholdMMI\"}";
    goto LABEL_106;
  }
  v32 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v32, CFSTR("ThresholdTimeBetweenAlertsSec"), &__dst[8].__r_.__value_.__l.__size_) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ThresholdTimeBetweenAlertsSec\"}";
    goto LABEL_106;
  }
  v33 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v33, CFSTR("ThresholdMagnitude"), &__dst[7].__r_.__value_.__l.__size_) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read ThresholdMagnitude\"}";
    goto LABEL_106;
  }
  v34 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v34, CFSTR("FollowUpMessageValidTime"), __dst[9].__r_.__value_.__r.__words) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read FollowUpMessageValidTime\"}";
    goto LABEL_106;
  }
  v35 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v35, CFSTR("PhoneChannelSubHysteresisSeconds"), __dst[8].__r_.__value_.__r.__words) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read PhoneChannelSubHysteresisSeconds\"}";
    goto LABEL_106;
  }
  v36 = sub_10003D044();
  if ((sub_10003CF1C((uint64_t)v36, CFSTR("WatchChannelSubHysteresisSeconds"), &__dst[7].__r_.__value_.__r.__words[2]) & 1) == 0)
  {
    v46 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v283 = 68289026;
      *(_DWORD *)&v283[4] = 0;
      *(_WORD *)&v283[8] = 2082;
      *(_QWORD *)&v283[10] = "";
      v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read WatchChannelSubHysteresisSeconds\"}";
      goto LABEL_106;
    }
LABEL_108:
    v44 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_111;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v45 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,alertConfig from defaults failed\"}";
LABEL_110:
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, v283, 0x12u);
LABEL_111:
    v281 = 0;
    v266 = v265;
    if (v266)
    {
      v49 = sub_1000687EC();
      v280 = 0;
      sub_10006A3BC((uint64_t)v49, v266, CFSTR("SafetyAlertCoverageDetails_v1"), &v281, &v280);
      v268 = v280;
      v50 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v283 = 68289282;
        *(_DWORD *)&v283[4] = 0;
        *(_WORD *)&v283[8] = 2082;
        *(_QWORD *)&v283[10] = "";
        *(_WORD *)&v283[18] = 2050;
        *(_QWORD *)&v283[20] = v281;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,regionSize,size\", \"regionSize\":%{public}lu}", v283, 0x1Cu);
      }
      if (v281)
      {
        v52 = 0;
        *(_QWORD *)&v51 = 68289026;
        v264 = v51;
        do
        {
          *(_DWORD *)v283 = 0;
          v288 = 0;
          v289 = 0;
          __p = 0;
          memset(&v283[8], 0, 112);
          memset(v284, 0, sizeof(v284));
          v285 = 0u;
          v286 = 0;
          v292 = 0;
          v293 = 0;
          v291 = 0;
          v290 = 0x4059000000000000;
          v294 = 0x4059000000000000;
          v296 = 0;
          v297[0] = 0;
          v295 = 0;
          v270 = v52;
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v268, "objectAtIndex:", v264));
          if (v53 && (v54 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v53, v54) & 1) != 0))
          {
            if ((v283[31] & 0x80000000) != 0)
              operator delete(*(void **)&v283[8]);
            memset(&v283[8], 0, 24);
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKey:", CFSTR("Region")));
            v271 = v53;
            if (v55)
            {
              v56 = objc_opt_class(NSString);
              if ((objc_opt_isKindOfClass(v55, v56) & 1) != 0)
              {
                sub_10001D858(v55, buf);
                if ((v283[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v283[8]);
                *(_OWORD *)&v283[8] = *(_OWORD *)buf;
                *(_QWORD *)&v283[24] = *(_QWORD *)&buf[16];
              }
            }

            if ((v283[55] & 0x80000000) != 0)
              operator delete(*(void **)&v283[32]);
            memset(&v283[32], 0, 24);
            v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKey:", CFSTR("CountryOfRelevance")));
            if (v57)
            {
              v58 = objc_opt_class(NSString);
              if ((objc_opt_isKindOfClass(v57, v58) & 1) != 0)
              {
                sub_10001D858(v57, buf);
                if ((v283[55] & 0x80000000) != 0)
                  operator delete(*(void **)&v283[32]);
                *(_OWORD *)&v283[32] = *(_OWORD *)buf;
                *(_QWORD *)&v283[48] = *(_QWORD *)&buf[16];
              }
            }

            v59 = sub_1000687EC();
            sub_10006A168((uint64_t)v59, v53, CFSTR("StartingSWLat"), &v283[104]);
            v60 = sub_1000687EC();
            sub_10006A168((uint64_t)v60, v53, CFSTR("StartingSWLon"), &v283[112]);
            *(_QWORD *)&v284[0] = 0;
            v61 = sub_1000687EC();
            sub_10006A168((uint64_t)v61, v53, CFSTR("gridLatOffset"), v284);
            *((_QWORD *)&v284[0] + 1) = 0;
            v62 = sub_1000687EC();
            sub_10006A168((uint64_t)v62, v53, CFSTR("gridLonOffset"), (_QWORD *)v284 + 1);
            v63 = sub_1000687EC();
            sub_10006A168((uint64_t)v63, v53, CFSTR("SWLat"), &v284[1]);
            v64 = sub_1000687EC();
            sub_10006A168((uint64_t)v64, v53, CFSTR("SWLon"), (_QWORD *)&v284[1] + 1);
            v65 = sub_1000687EC();
            sub_10006A168((uint64_t)v65, v53, CFSTR("NELat"), &v284[2]);
            v66 = sub_1000687EC();
            sub_10006A168((uint64_t)v66, v53, CFSTR("NELon"), (_QWORD *)&v284[2] + 1);
            v67 = sub_1000687EC();
            sub_10006A168((uint64_t)v67, v53, CFSTR("GridSizeInDegree"), (_QWORD *)&v285 + 1);
            v286 = -1;
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKey:", CFSTR("GridZoom")));
            if (v68)
            {
              v69 = objc_opt_class(NSNumber);
              if ((objc_opt_isKindOfClass(v68, v69) & 1) != 0)
                v286 = objc_msgSend(v68, "intValue");
            }

            v70 = sub_1000687EC();
            sub_10006A168((uint64_t)v70, v53, CFSTR("RefreshRate"), &v285);
            if ((v283[79] & 0x80000000) != 0)
              operator delete(*(void **)&v283[56]);
            memset(&v283[56], 0, 24);
            v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKey:", CFSTR("ChannelTopic")));
            if (v71)
            {
              v72 = objc_opt_class(NSString);
              if ((objc_opt_isKindOfClass(v71, v72) & 1) != 0)
              {
                sub_10001D858(v71, buf);
                if ((v283[79] & 0x80000000) != 0)
                  operator delete(*(void **)&v283[56]);
                *(_OWORD *)&v283[56] = *(_OWORD *)buf;
                *(_QWORD *)&v283[72] = *(_QWORD *)&buf[16];
              }
            }

            if ((v283[103] & 0x80000000) != 0)
              operator delete(*(void **)&v283[80]);
            memset(&v283[80], 0, 24);
            v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKey:", CFSTR("LivabilityChannelPrefix")));
            if (v73)
            {
              v74 = objc_opt_class(NSString);
              if ((objc_opt_isKindOfClass(v73, v74) & 1) != 0)
              {
                sub_10001D858(v73, buf);
                if ((v283[103] & 0x80000000) != 0)
                  operator delete(*(void **)&v283[80]);
                *(_OWORD *)&v283[80] = *(_OWORD *)buf;
                *(_QWORD *)&v283[96] = *(_QWORD *)&buf[16];
              }
            }

            v279 = 0;
            v75 = sub_1000687EC();
            sub_10006A630((uint64_t)v75, v53, CFSTR("ListOfUnsupportedGrids"), &v279, (uint64_t)&__p);
            v278 = 0;
            v76 = sub_1000687EC();
            v277 = 0;
            sub_10006A3BC((uint64_t)v76, v53, CFSTR("SafetyAlertSupportedChannelsForRegion"), &v278, &v277);
            v272 = v277;
            v77 = v278;
            v78 = SALogObjectGeneral;
            v79 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
            if (v77)
            {
              if (!v79)
              {
                memset(v282, 0, 24);
                v53 = v271;
LABEL_160:
                v82 = 0;
                while (2)
                {
                  v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v272, "objectAtIndex:", v82));
                  v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectForKey:", CFSTR("ChannelType")));
                  if (v84
                    && (v85 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v84, v85) & 1) != 0))
                  {
                    v86 = objc_msgSend(v84, "intValue");
                  }
                  else
                  {
                    v86 = -1;
                  }

                  v276 = 0;
                  v87 = sub_1000687EC();
                  sub_10006A168((uint64_t)v87, v83, CFSTR("ParticipationPercentage"), &v276);
                  v275 = 0;
                  if (v86 == 1)
                  {
                    v273 = 0uLL;
                    v274 = 0;
                    v91 = sub_10003D044();
                    if (sub_10003CDF0((uint64_t)v91, CFSTR("ChannelNamePrefix"), (uint64_t)&v273))
                    {
                      v92 = v292;
                      if ((unint64_t)v292 >= v293)
                      {
                        v98 = (_BYTE *)sub_100004ABC((uint64_t *)&v291, &v273);
                      }
                      else
                      {
                        if (SHIBYTE(v274) < 0)
                        {
                          sub_100004870(v292, (void *)v273, *((unint64_t *)&v273 + 1));
                        }
                        else
                        {
                          v93 = v273;
                          *((_QWORD *)v292 + 2) = v274;
                          *v92 = v93;
                        }
                        v98 = (char *)v92 + 24;
                      }
                      v292 = v98;
                    }
                    else
                    {
                      v97 = sub_1000687EC();
                      sub_10006AA84((uint64_t)v97, v83, CFSTR("ChannelName"), &v275, (uint64_t *)&v291);
                      v98 = v292;
                    }
                    v290 = v276;
                    v103 = SALogObjectGeneral;
                    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 68289283;
                      *(_DWORD *)&buf[4] = 0;
                      *(_WORD *)&buf[8] = 2082;
                      *(_QWORD *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2049;
                      *(_QWORD *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * ((v98 - v291) >> 3);
                      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,Dithering\", \"channelNameSize\":%{private}llu}", buf, 0x1Cu);
                      v98 = v292;
                    }
                    v104 = (uint64_t)v291;
                    if (v291 != v98)
                    {
                      v105 = SALogObjectGeneral;
                      do
                      {
                        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
                        {
                          v106 = v104;
                          if (*(char *)(v104 + 23) < 0)
                            v106 = *(_QWORD *)v104;
                          *(_QWORD *)buf = 68289283;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2081;
                          *(_QWORD *)&buf[20] = v106;
                          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,nonDithering\", \"channelName\":%{private, location:escape_only}s}", buf, 0x1Cu);
                          v105 = SALogObjectGeneral;
                        }
                        v104 += 24;
                      }
                      while ((_BYTE *)v104 != v98);
                    }
LABEL_205:
                    if (SHIBYTE(v274) < 0)
                      operator delete((void *)v273);
                    v53 = v271;
                  }
                  else
                  {
                    if (!v86)
                    {
                      v294 = v276;
                      v273 = 0uLL;
                      v274 = 0;
                      v88 = sub_10003D044();
                      if (sub_10003CDF0((uint64_t)v88, CFSTR("ChannelNamePrefix"), (uint64_t)&v273))
                      {
                        v89 = v296;
                        if ((unint64_t)v296 >= v297[0])
                        {
                          v96 = (_BYTE *)sub_100004ABC((uint64_t *)&v295, &v273);
                        }
                        else
                        {
                          if (SHIBYTE(v274) < 0)
                          {
                            sub_100004870(v296, (void *)v273, *((unint64_t *)&v273 + 1));
                          }
                          else
                          {
                            v90 = v273;
                            *((_QWORD *)v296 + 2) = v274;
                            *v89 = v90;
                          }
                          v96 = (char *)v89 + 24;
                        }
                        v296 = v96;
                      }
                      else
                      {
                        v95 = sub_1000687EC();
                        sub_10006AA84((uint64_t)v95, v83, CFSTR("ChannelName"), &v275, (uint64_t *)&v295);
                        v96 = v296;
                      }
                      v99 = SALogObjectGeneral;
                      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 68289283;
                        *(_DWORD *)&buf[4] = 0;
                        *(_WORD *)&buf[8] = 2082;
                        *(_QWORD *)&buf[10] = "";
                        *(_WORD *)&buf[18] = 2049;
                        *(_QWORD *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * ((v96 - v295) >> 3);
                        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,nonDithering\", \"channelNameSize\":%{private}llu}", buf, 0x1Cu);
                        v96 = v296;
                      }
                      v100 = (uint64_t)v295;
                      if (v295 != v96)
                      {
                        v101 = SALogObjectGeneral;
                        do
                        {
                          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                          {
                            v102 = v100;
                            if (*(char *)(v100 + 23) < 0)
                              v102 = *(_QWORD *)v100;
                            *(_QWORD *)buf = 68289283;
                            *(_WORD *)&buf[8] = 2082;
                            *(_QWORD *)&buf[10] = "";
                            *(_WORD *)&buf[18] = 2081;
                            *(_QWORD *)&buf[20] = v102;
                            _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,nonDithering\", \"channelName\":%{private, location:escape_only}s}", buf, 0x1Cu);
                            v101 = SALogObjectGeneral;
                          }
                          v100 += 24;
                        }
                        while ((_BYTE *)v100 != v96);
                      }
                      goto LABEL_205;
                    }
                    v94 = sub_1000687EC();
                    sub_10006AA84((uint64_t)v94, v83, CFSTR("ChannelName"), &v275, (uint64_t *)v282);
                  }

                  if (++v82 >= (unint64_t)v278)
                    goto LABEL_209;
                  continue;
                }
              }
              *(_QWORD *)buf = 68289283;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 1025;
              *(_DWORD *)&buf[20] = v77;
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,SafetyAlertSupportedChannelsForRegion\", \"channelArrayCount\":%{private}d}", buf, 0x18u);
              memset(v282, 0, 24);
              v53 = v271;
              if (v278)
                goto LABEL_160;
LABEL_209:
              sub_10001D628(a3, (uint64_t)v283);
              *(_QWORD *)buf = v282;
              sub_100004EC0((void ***)buf);
              v81 = 0;
            }
            else
            {
              if (v79)
              {
                *(_QWORD *)buf = v264;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,nosafetyAlertSupportedChannelsForRegions\"}", buf, 0x12u);
              }
              v81 = 1;
              v53 = v271;
            }

          }
          else
          {
            v80 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)buf = 68289282;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2050;
              *(_QWORD *)&buf[20] = v270;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,regionIsNotDictionary\", \"index\":%{public}lu}", buf, 0x1Cu);
            }
            v81 = 8;
          }

          *(_QWORD *)buf = &v295;
          sub_100004EC0((void ***)buf);
          *(_QWORD *)buf = &v291;
          sub_100004EC0((void ***)buf);
          if (__p)
          {
            v288 = __p;
            operator delete(__p);
          }
          if ((v283[103] & 0x80000000) != 0)
            operator delete(*(void **)&v283[80]);
          if ((v283[79] & 0x80000000) != 0)
            operator delete(*(void **)&v283[56]);
          if ((v283[55] & 0x80000000) != 0)
            operator delete(*(void **)&v283[32]);
          if ((v283[31] & 0x80000000) != 0)
            operator delete(*(void **)&v283[8]);
          if ((v81 | 8) != 8)
          {
            v145 = v268;
            goto LABEL_285;
          }
          v52 = v270 + 1;
        }
        while (v270 + 1 < (unint64_t)v281);
      }
      sub_1000183A4(a3->i64[0], a3->i64[1]);

      v107 = v266;
      v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKey:", CFSTR("SAEWConfig")));
      v109 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v283 = 68289026;
        *(_DWORD *)&v283[4] = 0;
        *(_WORD *)&v283[8] = 2082;
        *(_QWORD *)&v283[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,Alert alertConf\"}", v283, 0x12u);
      }
      if (v108)
      {
        v110 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v108, v110) & 1) != 0)
        {
          if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst->__r_.__value_.__l.__data_);
          __dst->__r_.__value_.__r.__words[0] = 0;
          __dst->__r_.__value_.__l.__size_ = 0;
          __dst->__r_.__value_.__r.__words[2] = 0;
          v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKey:", CFSTR("English")));
          if (v111)
          {
            v112 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v111, v112) & 1) != 0)
            {
              sub_10001D858(v111, v283);
              if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst->__r_.__value_.__l.__data_);
              *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)v283;
              __dst->__r_.__value_.__r.__words[2] = *(_QWORD *)&v283[16];
            }
          }

          p_data = (void **)&__dst[1].__r_.__value_.__l.__data_;
          if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(*p_data);
          *p_data = 0;
          __dst[1].__r_.__value_.__l.__size_ = 0;
          __dst[1].__r_.__value_.__r.__words[2] = 0;
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKey:", CFSTR("Spanish")));
          if (v114)
          {
            v115 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v114, v115) & 1) != 0)
            {
              sub_10001D858(v114, v283);
              if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(*p_data);
              *(_OWORD *)p_data = *(_OWORD *)v283;
              __dst[1].__r_.__value_.__r.__words[2] = *(_QWORD *)&v283[16];
            }
          }

          v116 = (void **)&__dst[2].__r_.__value_.__l.__data_;
          if (SHIBYTE(__dst[2].__r_.__value_.__r.__words[2]) < 0)
            operator delete(*v116);
          *v116 = 0;
          __dst[2].__r_.__value_.__l.__size_ = 0;
          __dst[2].__r_.__value_.__r.__words[2] = 0;
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKey:", CFSTR("SourceString")));
          if (v117)
          {
            v118 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v117, v118) & 1) != 0)
            {
              sub_10001D858(v117, v283);
              if (SHIBYTE(__dst[2].__r_.__value_.__r.__words[2]) < 0)
                operator delete(*v116);
              *(_OWORD *)v116 = *(_OWORD *)v283;
              __dst[2].__r_.__value_.__r.__words[2] = *(_QWORD *)&v283[16];
            }
          }

          *(_DWORD *)buf = 0;
          v119 = sub_1000687EC();
          sub_10006AA84((uint64_t)v119, v108, CFSTR("ProductionKey"), (unsigned int *)buf, (uint64_t *)&__dst[5]);
          *(_DWORD *)v282 = 0;
          v120 = sub_1000687EC();
          sub_10006AA84((uint64_t)v120, v108, CFSTR("USGSType"), (unsigned int *)v282, (uint64_t *)&__dst[6]);
          v121 = (void **)&__dst[3].__r_.__value_.__l.__data_;
          if (SHIBYTE(__dst[3].__r_.__value_.__r.__words[2]) < 0)
            operator delete(*v121);
          *v121 = 0;
          __dst[3].__r_.__value_.__l.__size_ = 0;
          __dst[3].__r_.__value_.__r.__words[2] = 0;
          v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKey:", CFSTR("PerformanceTestSourceString")));
          if (v122)
          {
            v123 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v122, v123) & 1) != 0)
            {
              sub_10001D858(v122, v283);
              if (SHIBYTE(__dst[3].__r_.__value_.__r.__words[2]) < 0)
                operator delete(*v121);
              *(_OWORD *)v121 = *(_OWORD *)v283;
              __dst[3].__r_.__value_.__r.__words[2] = *(_QWORD *)&v283[16];
            }
          }

          v124 = (void **)&__dst[4].__r_.__value_.__l.__data_;
          if (SHIBYTE(__dst[4].__r_.__value_.__r.__words[2]) < 0)
            operator delete(*v124);
          *v124 = 0;
          __dst[4].__r_.__value_.__l.__size_ = 0;
          __dst[4].__r_.__value_.__r.__words[2] = 0;
          v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKey:", CFSTR("FollowUpSourceString")));
          if (v125)
          {
            v126 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v125, v126) & 1) != 0)
            {
              sub_10001D858(v125, v283);
              if (SHIBYTE(__dst[4].__r_.__value_.__r.__words[2]) < 0)
                operator delete(*v124);
              *(_OWORD *)v124 = *(_OWORD *)v283;
              __dst[4].__r_.__value_.__r.__words[2] = *(_QWORD *)&v283[16];
            }
          }

          v127 = sub_1000687EC();
          sub_10006A168((uint64_t)v127, v108, CFSTR("ThresholdMMI"), __dst[7].__r_.__value_.__r.__words);
          v128 = sub_1000687EC();
          p_size = &__dst[8].__r_.__value_.__l.__size_;
          sub_10006A168((uint64_t)v128, v108, CFSTR("ThresholdTimeBetweenAlertsSec"), &__dst[8].__r_.__value_.__l.__size_);
          if (*(double *)&__dst[8].__r_.__value_.__l.__size_ < 900.0)
            *p_size = 0x408C200000000000;
          v130 = sub_1000687EC();
          sub_10006A168((uint64_t)v130, v108, CFSTR("ThresholdMagnitude"), &__dst[7].__r_.__value_.__l.__size_);
          v131 = sub_1000687EC();
          sub_10006A168((uint64_t)v131, v108, CFSTR("FollowUpMessageValidTime"), __dst[9].__r_.__value_.__r.__words);
          v132 = sub_10003D044();
          v133 = (std::string::__raw *)&__dst[8];
          if ((sub_10003CF1C((uint64_t)v132, CFSTR("PhoneChannelSubHysteresisSeconds"), __dst[8].__r_.__value_.__r.__words) & 1) == 0)
          {
            v134 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v283 = 68289026;
              *(_DWORD *)&v283[4] = 0;
              *(_WORD *)&v283[8] = 2082;
              *(_QWORD *)&v283[10] = "";
              _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,PhoneChannelSubHysteresisSeconds\"}", v283, 0x12u);
            }
            v135 = sub_1000687EC();
            sub_10006A168((uint64_t)v135, v108, CFSTR("PhoneChannelSubHysteresisSeconds"), v133);
          }
          v136 = sub_10003D044();
          v137 = &__dst[7].__r_.__value_.__r.__words[2];
          if ((sub_10003CF1C((uint64_t)v136, CFSTR("WatchChannelSubHysteresis"), &__dst[7].__r_.__value_.__r.__words[2]) & 1) == 0)
          {
            v138 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v283 = 68289026;
              *(_DWORD *)&v283[4] = 0;
              *(_WORD *)&v283[8] = 2082;
              *(_QWORD *)&v283[10] = "";
              _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,WatchChannelSubHysteresisSeconds\"}", v283, 0x12u);
            }
            v139 = sub_1000687EC();
            sub_10006A168((uint64_t)v139, v108, CFSTR("WatchChannelSubHysteresisSeconds"), v137);
          }
          v140 = sub_1000687EC();
          sub_10006A168((uint64_t)v140, v108, CFSTR("IgnoreAlertSec"), &__dst[8].__r_.__value_.__r.__words[2]);
          v141 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v142 = " ";
            if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
            {
              if (__dst->__r_.__value_.__l.__size_)
                v143 = (const char *)__dst->__r_.__value_.__r.__words[0];
              else
                v143 = " ";
            }
            else if (*((_BYTE *)&__dst->__r_.__value_.__s + 23))
            {
              v143 = (const char *)__dst;
            }
            else
            {
              v143 = " ";
            }
            v232 = SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]);
            if (v232 < 0)
            {
              if (__dst[1].__r_.__value_.__l.__size_)
                data = __dst[1].__r_.__value_.__l.__data_;
              else
                data = " ";
            }
            else
            {
              v42 = v232 == 0;
              data = (const char *)&__dst[1];
              if (v42)
                data = " ";
            }
            if (SHIBYTE(__dst[2].__r_.__value_.__r.__words[2]) < 0)
            {
              if (__dst[2].__r_.__value_.__l.__size_)
                v142 = __dst[2].__r_.__value_.__l.__data_;
            }
            else if (*((_BYTE *)&__dst[2].__r_.__value_.__s + 23))
            {
              v142 = (const char *)&__dst[2];
            }
            if (SHIBYTE(__dst[3].__r_.__value_.__r.__words[2]) < 0)
            {
              if (__dst[3].__r_.__value_.__l.__size_)
                v234 = __dst[3].__r_.__value_.__l.__data_;
              else
                v234 = "";
            }
            else if (*((_BYTE *)&__dst[3].__r_.__value_.__s + 23))
            {
              v234 = (const char *)&__dst[3];
            }
            else
            {
              v234 = "";
            }
            if (SHIBYTE(__dst[4].__r_.__value_.__r.__words[2]) < 0)
            {
              if (__dst[4].__r_.__value_.__l.__size_)
                v235 = __dst[4].__r_.__value_.__l.__data_;
              else
                v235 = "";
            }
            else if (*((_BYTE *)&__dst[4].__r_.__value_.__s + 23))
            {
              v235 = (const char *)&__dst[4];
            }
            else
            {
              v235 = "";
            }
            v236 = __dst[7].__r_.__value_.__l.__data_;
            size = __dst[7].__r_.__value_.__l.__size_;
            v238 = __dst[9].__r_.__value_.__l.__data_;
            v239 = *v137;
            v240 = v133->__words[0];
            v241 = __dst[8].__r_.__value_.__r.__words[2];
            v242 = *p_size;
            *(_DWORD *)v283 = 68292611;
            *(_DWORD *)&v283[4] = 0;
            *(_WORD *)&v283[8] = 2082;
            *(_QWORD *)&v283[10] = "";
            *(_WORD *)&v283[18] = 2081;
            *(_QWORD *)&v283[20] = v143;
            *(_WORD *)&v283[28] = 2081;
            *(_QWORD *)&v283[30] = data;
            *(_WORD *)&v283[38] = 2081;
            *(_QWORD *)&v283[40] = v142;
            *(_WORD *)&v283[48] = 2049;
            *(_QWORD *)&v283[50] = *(unsigned int *)buf;
            *(_WORD *)&v283[58] = 2049;
            *(_QWORD *)&v283[60] = *(unsigned int *)v282;
            *(_WORD *)&v283[68] = 2081;
            *(_QWORD *)&v283[70] = v234;
            *(_WORD *)&v283[78] = 2081;
            *(_QWORD *)&v283[80] = v235;
            *(_WORD *)&v283[88] = 2049;
            *(_QWORD *)&v283[90] = v236;
            *(_WORD *)&v283[98] = 2049;
            *(_QWORD *)&v283[100] = size;
            *(_WORD *)&v283[108] = 2049;
            *(_QWORD *)&v283[110] = v238;
            *(_WORD *)&v283[118] = 2049;
            *(_QWORD *)&v284[0] = v239;
            WORD4(v284[0]) = 2049;
            *(_QWORD *)((char *)v284 + 10) = v240;
            WORD1(v284[1]) = 2049;
            *(_QWORD *)((char *)&v284[1] + 4) = v241;
            WORD6(v284[1]) = 2049;
            *(_QWORD *)((char *)&v284[1] + 14) = v242;
            _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readIgneousAlertConfigData\", \"English\":%{private, location:escape_only}s, \"Spanish\":%{private, location:escape_only}s, \"sourceString\":%{private, location:escape_only}s, \"ProductionKeyLen\":%{private}llu, \"typeCount\":%{private}llu, \"performanceTestSourceString\":%{private, location:escape_only}s, \"followUpSourceString\":%{private, location:escape_only}s, \"MMI\":\"%{private}0.3f\", \"Magnitude\":\"%{private}0.3f\", \"FollowUpMessageValidTime\":\"%{private}0.3f\", \"watchHysteresis\":\"%{private}0.3f\", \"PhoneHysteresis\":\"%{private}0.3f\", \"IgnoreDuration\":\"%{private}0.3f\", \"TimeBetweenAlerts\":\"%{private}0.3f\"}", v283, 0x9Eu);
          }
          v243 = __dst[5].__r_.__value_.__l.__data_;
          v244 = __dst[5].__r_.__value_.__l.__size_;
          if (v243 != (std::string::pointer)v244)
          {
            v245 = SALogObjectGeneral;
            do
            {
              if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
              {
                v246 = v243;
                if (v243[23] < 0)
                  v246 = *(std::string::pointer *)v243;
                *(_DWORD *)v283 = 68289283;
                *(_DWORD *)&v283[4] = 0;
                *(_WORD *)&v283[8] = 2082;
                *(_QWORD *)&v283[10] = "";
                *(_WORD *)&v283[18] = 2081;
                *(_QWORD *)&v283[20] = v246;
                _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readIgneousAlertConfigData\", \"ProductionKey\":%{private, location:escape_only}s}", v283, 0x1Cu);
                v245 = SALogObjectGeneral;
              }
              v243 += 24;
            }
            while (v243 != (std::string::pointer)v244);
          }
          v247 = __dst[6].__r_.__value_.__l.__data_;
          v248 = __dst[6].__r_.__value_.__l.__size_;
          if (v247 != (std::string::pointer)v248)
          {
            v249 = SALogObjectGeneral;
            do
            {
              if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
              {
                v250 = v247;
                if (v247[23] < 0)
                  v250 = *(std::string::pointer *)v247;
                *(_DWORD *)v283 = 68289283;
                *(_DWORD *)&v283[4] = 0;
                *(_WORD *)&v283[8] = 2082;
                *(_QWORD *)&v283[10] = "";
                *(_WORD *)&v283[18] = 2081;
                *(_QWORD *)&v283[20] = v250;
                _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readIgneousAlertConfigData\", \"type\":%{private, location:escape_only}s}", v283, 0x1Cu);
                v249 = SALogObjectGeneral;
              }
              v247 += 24;
            }
            while (v247 != (std::string::pointer)v248);
          }

          v251 = SALogObjectGeneral;
          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            goto LABEL_422;
          *(_DWORD *)v283 = 68289026;
          *(_DWORD *)&v283[4] = 0;
          *(_WORD *)&v283[8] = 2082;
          *(_QWORD *)&v283[10] = "";
          v230 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,read asset from file\"}";
          v231 = v251;
          goto LABEL_421;
        }
      }
      v146 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v283 = 68289026;
        *(_DWORD *)&v283[4] = 0;
        *(_WORD *)&v283[8] = 2082;
        *(_QWORD *)&v283[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,Alert dictionary Invalid\"}", v283, 0x12u);
      }

      v147 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
LABEL_288:

        *(_DWORD *)v283 = 0;
        __p = 0;
        v288 = 0;
        memset(&v283[8], 0, 112);
        memset(v284, 0, sizeof(v284));
        v285 = 0u;
        v286 = 0;
        v289 = 0;
        v290 = 0x4059000000000000;
        v291 = 0;
        v292 = 0;
        v293 = 0;
        v294 = 0x4059000000000000;
        v297[0] = 0;
        v295 = 0;
        v296 = 0;
        v149 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT)
          && (*(_QWORD *)buf = 68289026,
              *(_WORD *)&buf[8] = 2082,
              *(_QWORD *)&buf[10] = "",
              _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,setDefaultConfigurationValueIfMAFails\"}", buf, 0x12u), (v283[31] & 0x80000000) != 0))
        {
          *(_QWORD *)&v283[16] = 3;
          v150 = *(_DWORD **)&v283[8];
        }
        else
        {
          v150 = &v283[8];
          v283[31] = 3;
        }
        *v150 = 4281173;
        sub_10001E03C((std::string *)&v283[56], "com.apple.aps.mantis.safetyalert", 0x20uLL);
        if ((v283[55] & 0x80000000) != 0)
        {
          *(_QWORD *)&v283[40] = 3;
          v151 = *(_DWORD **)&v283[32];
        }
        else
        {
          v151 = &v283[32];
          v283[55] = 3;
        }
        *v151 = 4281173;
        if ((v283[103] & 0x80000000) != 0)
        {
          *(_QWORD *)&v283[88] = 7;
          v152 = *(char **)&v283[80];
        }
        else
        {
          v152 = &v283[80];
          v283[103] = 7;
        }
        strcpy(v152, "LivEwus");
        v284[0] = 0uLL;
        *(_OWORD *)&v283[104] = xmmword_1000AE030;
        v284[1] = xmmword_1000AE040;
        v284[2] = xmmword_1000AE050;
        v285 = xmmword_1000AE060;
        sub_10000E8A0(v282, "ewus");
        v153 = v296;
        if ((unint64_t)v296 >= v297[0])
        {
          v155 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v296 - v295) >> 3);
          v156 = v155 + 1;
          if (v155 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100004C50();
          if (0x5555555555555556 * ((uint64_t)(v297[0] - (_QWORD)v295) >> 3) > v156)
            v156 = 0x5555555555555556 * ((uint64_t)(v297[0] - (_QWORD)v295) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v297[0] - (_QWORD)v295) >> 3) >= 0x555555555555555)
            v157 = 0xAAAAAAAAAAAAAAALL;
          else
            v157 = v156;
          v299 = v297;
          if (v157)
            v158 = (char *)sub_100004C64((uint64_t)v297, v157);
          else
            v158 = 0;
          v159 = &v158[24 * v155];
          *(_QWORD *)buf = v158;
          *(_QWORD *)&buf[8] = v159;
          *(_QWORD *)&buf[24] = &v158[24 * v157];
          v160 = *(_OWORD *)v282;
          *((_QWORD *)v159 + 2) = *(_QWORD *)&v282[16];
          *(_OWORD *)v159 = v160;
          memset(v282, 0, 24);
          *(_QWORD *)&buf[16] = v159 + 24;
          sub_100004BDC((uint64_t *)&v295, buf);
          v161 = v296;
          sub_100004DBC((uint64_t)buf);
          v296 = v161;
          if ((char)v282[23] < 0)
            operator delete(*(void **)v282);
        }
        else
        {
          v154 = *(_OWORD *)v282;
          *((_QWORD *)v296 + 2) = *(_QWORD *)&v282[16];
          *v153 = v154;
          v296 = (char *)v153 + 24;
        }
        v294 = 0x4059000000000000;
        sub_10001D628(a3, (uint64_t)v283);
        sub_1000183A4(a3->i64[0], a3->i64[1]);
        *(_QWORD *)buf = &v295;
        sub_100004EC0((void ***)buf);
        *(_QWORD *)buf = &v291;
        sub_100004EC0((void ***)buf);
        if (__p)
        {
          v288 = __p;
          operator delete(__p);
        }
        if ((v283[103] & 0x80000000) != 0)
          operator delete(*(void **)&v283[80]);
        if ((v283[79] & 0x80000000) != 0)
          operator delete(*(void **)&v283[56]);
        if ((v283[55] & 0x80000000) != 0)
          operator delete(*(void **)&v283[32]);
        if ((v283[31] & 0x80000000) != 0)
          operator delete(*(void **)&v283[8]);
        sub_10001E03C(__dst, "Earthquake Detected! Drop, Cover, Hold On. Protect Yourself. -USGS ShakeAlert", 0x4DuLL);
        sub_10001E03C(__dst + 1, "Terremoto detectado! Agachese, cubrase, sujetese. Protejase. -USGS ShakeAlert", 0x4DuLL);
        if (SHIBYTE(__dst[2].__r_.__value_.__r.__words[2]) < 0)
        {
          __dst[2].__r_.__value_.__l.__size_ = 4;
          v162 = __dst[2].__r_.__value_.__l.__data_;
        }
        else
        {
          *((_BYTE *)&__dst[2].__r_.__value_.__s + 23) = 4;
          v162 = (char *)&__dst[2];
        }
        strcpy(v162, "USGS");
        if (SHIBYTE(__dst[4].__r_.__value_.__r.__words[2]) < 0)
        {
          __dst[4].__r_.__value_.__l.__size_ = 12;
          v163 = __dst[4].__r_.__value_.__l.__data_;
        }
        else
        {
          *((_BYTE *)&__dst[4].__r_.__value_.__s + 23) = 12;
          v163 = (char *)&__dst[4];
        }
        strcpy(v163, "USGSFollowUp");
        if (SHIBYTE(__dst[3].__r_.__value_.__r.__words[2]) < 0)
        {
          __dst[3].__r_.__value_.__l.__size_ = 8;
          v164 = __dst[3].__r_.__value_.__l.__data_;
        }
        else
        {
          *((_BYTE *)&__dst[3].__r_.__value_.__s + 23) = 8;
          v164 = (char *)&__dst[3];
        }
        strcpy(v164, "USGSTest");
        sub_10000E8A0(buf, "new");
        v165 = (uint64_t *)&__dst[6];
        v167 = (uint64_t)&__dst[6].__r_.__value_.__r.__words[2];
        v166 = __dst[6].__r_.__value_.__r.__words[2];
        v168 = __dst[6].__r_.__value_.__l.__size_;
        if (v168 >= v166)
        {
          v170 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - *v165) >> 3);
          v171 = v170 + 1;
          if (v170 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100004C50();
          v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - *v165) >> 3);
          if (2 * v172 > v171)
            v171 = 2 * v172;
          if (v172 >= 0x555555555555555)
            v173 = 0xAAAAAAAAAAAAAAALL;
          else
            v173 = v171;
          *(_QWORD *)&v283[32] = (char *)__dst + 160;
          if (v173)
            v174 = (char *)sub_100004C64((uint64_t)&__dst[6].__r_.__value_.__r.__words[2], v173);
          else
            v174 = 0;
          v175 = &v174[24 * v170];
          *(_QWORD *)v283 = v174;
          *(_QWORD *)&v283[8] = v175;
          *(_QWORD *)&v283[24] = &v174[24 * v173];
          v176 = *(_OWORD *)buf;
          *((_QWORD *)v175 + 2) = *(_QWORD *)&buf[16];
          *(_OWORD *)v175 = v176;
          memset(buf, 0, 24);
          *(_QWORD *)&v283[16] = v175 + 24;
          sub_100004BDC(v165, v283);
          v177 = __dst[6].__r_.__value_.__l.__size_;
          sub_100004DBC((uint64_t)v283);
          v178 = buf[23];
          __dst[6].__r_.__value_.__l.__size_ = v177;
          if (v178 < 0)
            operator delete(*(void **)buf);
        }
        else
        {
          v169 = *(_OWORD *)buf;
          *(_QWORD *)(v168 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v168 = v169;
          __dst[6].__r_.__value_.__l.__size_ = v168 + 24;
        }
        sub_10000E8A0(buf, "update");
        v180 = __dst[6].__r_.__value_.__l.__size_;
        v179 = __dst[6].__r_.__value_.__r.__words[2];
        if (v180 >= v179)
        {
          v182 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v180 - *v165) >> 3);
          v183 = v182 + 1;
          if (v182 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100004C50();
          v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - *v165) >> 3);
          if (2 * v184 > v183)
            v183 = 2 * v184;
          if (v184 >= 0x555555555555555)
            v185 = 0xAAAAAAAAAAAAAAALL;
          else
            v185 = v183;
          *(_QWORD *)&v283[32] = (char *)__dst + 160;
          if (v185)
            v186 = (char *)sub_100004C64(v167, v185);
          else
            v186 = 0;
          v187 = &v186[24 * v182];
          *(_QWORD *)v283 = v186;
          *(_QWORD *)&v283[8] = v187;
          *(_QWORD *)&v283[24] = &v186[24 * v185];
          v188 = *(_OWORD *)buf;
          *((_QWORD *)v187 + 2) = *(_QWORD *)&buf[16];
          *(_OWORD *)v187 = v188;
          memset(buf, 0, 24);
          *(_QWORD *)&v283[16] = v187 + 24;
          sub_100004BDC(v165, v283);
          v189 = __dst[6].__r_.__value_.__l.__size_;
          sub_100004DBC((uint64_t)v283);
          v190 = buf[23];
          __dst[6].__r_.__value_.__l.__size_ = v189;
          if (v190 < 0)
            operator delete(*(void **)buf);
        }
        else
        {
          v181 = *(_OWORD *)buf;
          *(_QWORD *)(v180 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v180 = v181;
          __dst[6].__r_.__value_.__l.__size_ = v180 + 24;
        }
        sub_10000E8A0(buf, "follow_up");
        v192 = __dst[6].__r_.__value_.__l.__size_;
        v191 = __dst[6].__r_.__value_.__r.__words[2];
        if (v192 >= v191)
        {
          v195 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - *v165) >> 3);
          v196 = v195 + 1;
          if (v195 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100004C50();
          v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191 - *v165) >> 3);
          if (2 * v197 > v196)
            v196 = 2 * v197;
          if (v197 >= 0x555555555555555)
            v198 = 0xAAAAAAAAAAAAAAALL;
          else
            v198 = v196;
          *(_QWORD *)&v283[32] = (char *)__dst + 160;
          if (v198)
            v199 = (char *)sub_100004C64(v167, v198);
          else
            v199 = 0;
          v200 = &v199[24 * v195];
          *(_QWORD *)v283 = v199;
          *(_QWORD *)&v283[8] = v200;
          *(_QWORD *)&v283[24] = &v199[24 * v198];
          v201 = *(_OWORD *)buf;
          *((_QWORD *)v200 + 2) = *(_QWORD *)&buf[16];
          *(_OWORD *)v200 = v201;
          memset(buf, 0, 24);
          *(_QWORD *)&v283[16] = v200 + 24;
          sub_100004BDC(v165, v283);
          v202 = __dst[6].__r_.__value_.__l.__size_;
          sub_100004DBC((uint64_t)v283);
          v203 = buf[23];
          __dst[6].__r_.__value_.__l.__size_ = v202;
          v194 = __dst;
          if (v203 < 0)
            operator delete(*(void **)buf);
        }
        else
        {
          v193 = *(_OWORD *)buf;
          *(_QWORD *)(v192 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v192 = v193;
          __dst[6].__r_.__value_.__l.__size_ = v192 + 24;
          v194 = __dst;
        }
        *(_OWORD *)&v194[8].__r_.__value_.__r.__words[2] = xmmword_1000AE070;
        *(int64x2_t *)&v194[7].__r_.__value_.__r.__words[2] = vdupq_n_s64(0x40AC200000000000uLL);
        sub_10000E8A0(buf, "C03869AF-71E2-47B7-88A6-4285CA380272");
        v204 = (uint64_t)&v194[5].__r_.__value_.__r.__words[2];
        v205 = v194[5].__r_.__value_.__r.__words[2];
        v206 = v194[5].__r_.__value_.__l.__size_;
        v207 = v194;
        if (v206 >= v205)
        {
          v209 = (uint64_t *)&v194[5];
          v210 = v207[5].__r_.__value_.__l.__data_;
          v211 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v206 - (_QWORD)v210) >> 3);
          v212 = v211 + 1;
          if (v211 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100004C50();
          v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v205 - (_QWORD)v210) >> 3);
          if (2 * v213 > v212)
            v212 = 2 * v213;
          if (v213 >= 0x555555555555555)
            v214 = 0xAAAAAAAAAAAAAAALL;
          else
            v214 = v212;
          *(_QWORD *)&v283[32] = v204;
          if (v214)
            v215 = (char *)sub_100004C64(v204, v214);
          else
            v215 = 0;
          v216 = &v215[24 * v211];
          *(_QWORD *)v283 = v215;
          *(_QWORD *)&v283[8] = v216;
          *(_QWORD *)&v283[24] = &v215[24 * v214];
          v217 = *(_OWORD *)buf;
          *((_QWORD *)v216 + 2) = *(_QWORD *)&buf[16];
          *(_OWORD *)v216 = v217;
          memset(buf, 0, 24);
          *(_QWORD *)&v283[16] = v216 + 24;
          sub_100004BDC(v209, v283);
          v207 = __dst;
          v218 = __dst[5].__r_.__value_.__l.__size_;
          sub_100004DBC((uint64_t)v283);
          v219 = buf[23];
          __dst[5].__r_.__value_.__l.__size_ = v218;
          if (v219 < 0)
            operator delete(*(void **)buf);
        }
        else
        {
          v208 = *(_OWORD *)buf;
          *(_QWORD *)(v206 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v206 = v208;
          v194[5].__r_.__value_.__l.__size_ = v206 + 24;
        }
        *(_OWORD *)&v207[7].__r_.__value_.__l.__data_ = xmmword_1000AE080;
        v207[8].__r_.__value_.__l.__size_ = 0x404E000000000000;
        v220 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          if (SHIBYTE(v207->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v207->__r_.__value_.__l.__size_)
              v221 = (const char *)v207->__r_.__value_.__r.__words[0];
            else
              v221 = " ";
          }
          else if (*((_BYTE *)&v207->__r_.__value_.__s + 23))
          {
            v221 = (const char *)v207;
          }
          else
          {
            v221 = " ";
          }
          if (SHIBYTE(v207[1].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v207[1].__r_.__value_.__l.__size_)
              v222 = v207[1].__r_.__value_.__l.__data_;
            else
              v222 = " ";
          }
          else if (*((_BYTE *)&v207[1].__r_.__value_.__s + 23))
          {
            v222 = (const char *)&__dst[1];
          }
          else
          {
            v222 = " ";
          }
          if (SHIBYTE(v207[2].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v207[2].__r_.__value_.__l.__size_)
              v223 = v207[2].__r_.__value_.__l.__data_;
            else
              v223 = " ";
          }
          else if (*((_BYTE *)&v207[2].__r_.__value_.__s + 23))
          {
            v223 = (const char *)&__dst[2];
          }
          else
          {
            v223 = " ";
          }
          if (SHIBYTE(v207[3].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v207[3].__r_.__value_.__l.__size_)
              v224 = v207[3].__r_.__value_.__l.__data_;
            else
              v224 = " ";
          }
          else if (*((_BYTE *)&v207[3].__r_.__value_.__s + 23))
          {
            v224 = (const char *)&__dst[3];
          }
          else
          {
            v224 = " ";
          }
          if (SHIBYTE(v207[4].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v207[4].__r_.__value_.__l.__size_)
              v225 = v207[4].__r_.__value_.__l.__data_;
            else
              v225 = " ";
          }
          else if (*((_BYTE *)&v207[4].__r_.__value_.__s + 23))
          {
            v225 = (const char *)&__dst[4];
          }
          else
          {
            v225 = " ";
          }
          v226 = v207[7].__r_.__value_.__r.__words[2];
          v227 = v207[8].__r_.__value_.__l.__data_;
          v229 = v207[8].__r_.__value_.__r.__words[2];
          v228 = v207[9].__r_.__value_.__l.__data_;
          *(_DWORD *)v283 = 68292099;
          *(_DWORD *)&v283[4] = 0;
          *(_WORD *)&v283[8] = 2082;
          *(_QWORD *)&v283[10] = "";
          *(_WORD *)&v283[18] = 2081;
          *(_QWORD *)&v283[20] = v221;
          *(_WORD *)&v283[28] = 2081;
          *(_QWORD *)&v283[30] = v222;
          *(_WORD *)&v283[38] = 2081;
          *(_QWORD *)&v283[40] = v223;
          *(_WORD *)&v283[48] = 2081;
          *(_QWORD *)&v283[50] = v224;
          *(_WORD *)&v283[58] = 2081;
          *(_QWORD *)&v283[60] = v225;
          *(_WORD *)&v283[68] = 2049;
          *(_QWORD *)&v283[70] = 0x4012000000000000;
          *(_WORD *)&v283[78] = 2049;
          *(_QWORD *)&v283[80] = 0x4014000000000000;
          *(_WORD *)&v283[88] = 2049;
          *(_QWORD *)&v283[90] = v228;
          *(_WORD *)&v283[98] = 2049;
          *(_QWORD *)&v283[100] = v226;
          *(_WORD *)&v283[108] = 2049;
          *(_QWORD *)&v283[110] = v227;
          *(_WORD *)&v283[118] = 2049;
          *(_QWORD *)&v284[0] = v229;
          WORD4(v284[0]) = 2049;
          *(_QWORD *)((char *)v284 + 10) = 0x404E000000000000;
          _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readAlertConfigFromFailSafe\", \"English\":%{private, location:escape_only}s, \"Spanish\":%{private, location:escape_only}s, \"sourceString\":%{private, location:escape_only}s, \"performanceTestSourceString\":%{private, location:escape_only}s, \"FollowUpSourceString\":%{private, location:escape_only}s, \"MMI\":\"%{private}0.3f\", \"Magnitude\":\"%{private}0.3f\", \"FollowUpMessageValidTime\":\"%{private}0.3f\", \"watchHysteresis\":\"%{private}0.3f\", \"PhoneHysteresis\":\"%{private}0.3f\", \"IgnoreDuration\":\"%{private}0.3f\", \"TimeBetweenAlerts\":\"%{private}0.3f\"}", v283, 0x8Au);
          v220 = SALogObjectGeneral;
        }
        if (!os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
          goto LABEL_422;
        *(_DWORD *)v283 = 68289026;
        *(_DWORD *)&v283[4] = 0;
        *(_WORD *)&v283[8] = 2082;
        *(_QWORD *)&v283[10] = "";
        v230 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,read asset from failSafe\"}";
        v231 = v220;
LABEL_421:
        _os_log_impl((void *)&_mh_execute_header, v231, OS_LOG_TYPE_DEFAULT, v230, v283, 0x12u);
        goto LABEL_422;
      }
      *(_DWORD *)v283 = 68289026;
      *(_DWORD *)&v283[4] = 0;
      *(_WORD *)&v283[8] = 2082;
      *(_QWORD *)&v283[10] = "";
      v148 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,alertConfig from file failed\"}";
    }
    else
    {
      v144 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v283 = 68289026;
        *(_DWORD *)&v283[4] = 0;
        *(_WORD *)&v283[8] = 2082;
        *(_QWORD *)&v283[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readRegionConfigFromFile,Dictionary is nil\"}", v283, 0x12u);
      }
      v145 = 0;
LABEL_285:

      v147 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_288;
      *(_DWORD *)v283 = 68289026;
      *(_DWORD *)&v283[4] = 0;
      *(_WORD *)&v283[8] = 2082;
      *(_QWORD *)&v283[10] = "";
      v148 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,regionConfig from file failed\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, v148, v283, 0x12u);
    goto LABEL_288;
  }
  v37 = sub_10003D044();
  v38 = sub_10003CF1C((uint64_t)v37, CFSTR("IgnoreAlertSec"), &__dst[8].__r_.__value_.__r.__words[2]);
  v39 = SALogObjectGeneral;
  v40 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((v38 & 1) == 0)
  {
    if (!v40)
      goto LABEL_108;
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v47 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read IgnoreAlertSec\"}";
    v48 = v39;
    goto LABEL_107;
  }
  if (v40)
  {
    v41 = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
    if (v41 < 0)
    {
      if (__dst->__r_.__value_.__l.__size_)
        v43 = (const char *)__dst->__r_.__value_.__r.__words[0];
      else
        v43 = " ";
    }
    else
    {
      v42 = v41 == 0;
      v43 = (const char *)__dst;
      if (v42)
        v43 = " ";
    }
    if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst[1].__r_.__value_.__l.__size_)
        v252 = __dst[1].__r_.__value_.__l.__data_;
      else
        v252 = " ";
    }
    else if (*((_BYTE *)&__dst[1].__r_.__value_.__s + 23))
    {
      v252 = (const char *)&__dst[1];
    }
    else
    {
      v252 = " ";
    }
    if (SHIBYTE(__dst[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst[2].__r_.__value_.__l.__size_)
        v253 = __dst[2].__r_.__value_.__l.__data_;
      else
        v253 = " ";
    }
    else if (*((_BYTE *)&__dst[2].__r_.__value_.__s + 23))
    {
      v253 = (const char *)&__dst[2];
    }
    else
    {
      v253 = " ";
    }
    if (SHIBYTE(__dst[3].__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst[3].__r_.__value_.__l.__size_)
        v254 = __dst[3].__r_.__value_.__l.__data_;
      else
        v254 = " ";
    }
    else if (*((_BYTE *)&__dst[3].__r_.__value_.__s + 23))
    {
      v254 = (const char *)&__dst[3];
    }
    else
    {
      v254 = " ";
    }
    if (SHIBYTE(__dst[4].__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst[4].__r_.__value_.__l.__size_)
        v255 = __dst[4].__r_.__value_.__l.__data_;
      else
        v255 = " ";
    }
    else if (*((_BYTE *)&__dst[4].__r_.__value_.__s + 23))
    {
      v255 = (const char *)&__dst[4];
    }
    else
    {
      v255 = " ";
    }
    v256 = __dst[7].__r_.__value_.__l.__data_;
    v257 = __dst[7].__r_.__value_.__l.__size_;
    v258 = __dst[9].__r_.__value_.__l.__data_;
    v259 = __dst[7].__r_.__value_.__r.__words[2];
    v260 = __dst[8].__r_.__value_.__l.__data_;
    v261 = __dst[8].__r_.__value_.__r.__words[2];
    v262 = __dst[8].__r_.__value_.__l.__size_;
    *(_DWORD *)v283 = 68292099;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    *(_WORD *)&v283[18] = 2081;
    *(_QWORD *)&v283[20] = v43;
    *(_WORD *)&v283[28] = 2081;
    *(_QWORD *)&v283[30] = v252;
    *(_WORD *)&v283[38] = 2081;
    *(_QWORD *)&v283[40] = v253;
    *(_WORD *)&v283[48] = 2081;
    *(_QWORD *)&v283[50] = v254;
    *(_WORD *)&v283[58] = 2081;
    *(_QWORD *)&v283[60] = v255;
    *(_WORD *)&v283[68] = 2049;
    *(_QWORD *)&v283[70] = v256;
    *(_WORD *)&v283[78] = 2049;
    *(_QWORD *)&v283[80] = v257;
    *(_WORD *)&v283[88] = 2049;
    *(_QWORD *)&v283[90] = v258;
    *(_WORD *)&v283[98] = 2049;
    *(_QWORD *)&v283[100] = v259;
    *(_WORD *)&v283[108] = 2049;
    *(_QWORD *)&v283[110] = v260;
    *(_WORD *)&v283[118] = 2049;
    *(_QWORD *)&v284[0] = v261;
    WORD4(v284[0]) = 2049;
    *(_QWORD *)((char *)v284 + 10) = v262;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readAlertConfigFromDefaults\", \"English\":%{private, location:escape_only}s, \"Spanish\":%{private, location:escape_only}s, \"sourceString\":%{private, location:escape_only}s, \"performanceTestSourceString\":%{private, location:escape_only}s, \"FollowUpSourceString\":%{private, location:escape_only}s, \"MMI\":\"%{private}0.3f\", \"Magnitude\":\"%{private}0.3f\", \"FollowUpMessageValidTime\":\"%{private}0.3f\", \"watchHysteresis\":\"%{private}0.3f\", \"PhoneHysteresis\":\"%{private}0.3f\", \"IgnoreDuration\":\"%{private}0.3f\", \"TimeBetweenAlerts\":\"%{private}0.3f\"}", v283, 0x8Au);
    v39 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v283 = 68289026;
    *(_DWORD *)&v283[4] = 0;
    *(_WORD *)&v283[8] = 2082;
    *(_QWORD *)&v283[10] = "";
    v230 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,read asset from defaults\"}";
    v231 = v39;
    goto LABEL_421;
  }
LABEL_422:

}

void sub_10001BE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 121) < 0)
    operator delete(*(void **)(v55 - 144));
  sub_10001DE04((uint64_t)&a55);

  _Unwind_Resume(a1);
}

void sub_10001C0C0(uint64_t a1, void *a2, BOOL *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  NSObject *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  const char *v34;
  const char *v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  unint64_t v70;
  void **v71;
  void *v72;
  uint64_t v73;
  void *v74;
  double v75;
  uint64_t v76;
  double v77;
  void *v78;
  double v79;
  uint64_t v80;
  double v81;
  float v82;
  float v83;
  unint64_t v84;
  float *v85;
  float *v86;
  NSObject *v87;
  float *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  float *v94;
  float *v95;
  uint64_t v96;
  NSObject *v97;
  _BOOL4 v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  _BOOL4 v109;
  int v110;
  float *v111;
  float *v112;
  NSObject *v113;
  double v114;
  double v115;
  NSObject *v116;
  _BOOL4 v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  _BOOL4 v128;
  int v129;
  uint64_t v130;
  void *v131;
  id v132;
  id v133;
  id v134;
  unsigned int v135;
  uint64_t buf;
  __int16 v137;
  const char *v138;
  __int16 v139;
  _BYTE v140[10];
  double v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;

  v132 = a2;
  v4 = sub_10003D044();
  if ((sub_10003CAD0((uint64_t)v4, CFSTR("isBLERelaySupported_v2"), a3) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read isBLERelaySupported\"}";
    goto LABEL_47;
  }
  v5 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v5, CFSTR("advertiseDurationSeconds"), (_DWORD *)a3 + 1) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read advertiseDurationSeconds\"}";
    goto LABEL_47;
  }
  v6 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v6, CFSTR("advertiseEvaluationIntervalSeconds"), (_DWORD *)a3 + 2) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read advertiseEvaluationIntervalSeconds\"}";
    goto LABEL_47;
  }
  v7 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v7, CFSTR("discoveryEvaluationIntervalSeconds"), (_DWORD *)a3 + 3) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read discoveryEvaluationIntervalSeconds\"}";
    goto LABEL_47;
  }
  v8 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v8, CFSTR("minBatteryLevelForBLEActivity"), (_DWORD *)a3 + 5) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read minBatteryLevelForBLEActivity\"}";
    goto LABEL_47;
  }
  v9 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v9, CFSTR("minDeviceDensityCount"), (_DWORD *)a3 + 4) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read minDeviceDensityCount\"}";
    goto LABEL_47;
  }
  v10 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v10, CFSTR("minTimeBetweenPeopleDensityQuery"), (_DWORD *)a3 + 6) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read minTimeBetweenPeopleDensityQuery\"}";
    goto LABEL_47;
  }
  v11 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v11, CFSTR("bleCBAdvertiseRate"), (_DWORD *)a3 + 9) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read bleCBAdvertiseRate\"}";
    goto LABEL_47;
  }
  v12 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v12, CFSTR("bleCBScanRate"), (_DWORD *)a3 + 7) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read bleCBScanRate\"}";
    goto LABEL_47;
  }
  v13 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v13, CFSTR("bleCBScanRateScreenOff"), (_DWORD *)a3 + 8) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read bleCBScanRateScreenOff\"}";
    goto LABEL_47;
  }
  v14 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v14, CFSTR("bleDataVersion"), (_DWORD *)a3 + 10) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read bleDataVersion\"}";
    goto LABEL_47;
  }
  v15 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v15, CFSTR("bleAdvertisementTimePrecisionInMSec"), (_DWORD *)a3 + 11) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read bleAdvertisementTimePrecisionInMSec\"}";
    goto LABEL_47;
  }
  LODWORD(v134) = 0;
  v16 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v16, CFSTR("percentageOfBLEParticipation"), &v134) & 1) == 0)
  {
    v19 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read percentageOfBLEParticipation\"}";
    goto LABEL_47;
  }
  *(float *)&buf = (float)*((unsigned int *)a3 + 4);
  *((float *)&buf + 1) = (float)v134;
  sub_10001D77C((void **)a3 + 7, &buf);
  v17 = sub_10003D044();
  v18 = sub_10003CAD0((uint64_t)v17, CFSTR("displayBLEAlert"), a3 + 48);
  v19 = SALogObjectGeneral;
  v20 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((v18 & 1) != 0)
  {
    if (v20)
    {
      v21 = *a3;
      v23 = *((_DWORD *)a3 + 1);
      v22 = *((_DWORD *)a3 + 2);
      v24 = *((_DWORD *)a3 + 3);
      v25 = *((_DWORD *)a3 + 4);
      v27 = *((_DWORD *)a3 + 5);
      v26 = *((_DWORD *)a3 + 6);
      v28 = *((_DWORD *)a3 + 7);
      v29 = *((_DWORD *)a3 + 8);
      v30 = *((_DWORD *)a3 + 9);
      v31 = *((_DWORD *)a3 + 10);
      v32 = a3[48];
      v33 = *((_DWORD *)a3 + 11);
      buf = 68292611;
      v137 = 2082;
      v138 = "";
      v139 = 1025;
      *(_DWORD *)v140 = v21;
      *(_WORD *)&v140[4] = 1025;
      *(_DWORD *)&v140[6] = v22;
      LOWORD(v141) = 1025;
      *(_DWORD *)((char *)&v141 + 2) = v24;
      HIWORD(v141) = 1025;
      v142 = v23;
      v143 = 1025;
      v144 = v25;
      v145 = 1025;
      v146 = v26;
      v147 = 1025;
      v148 = (int)v134;
      v149 = 1025;
      v150 = v27;
      v151 = 1025;
      v152 = v30;
      v153 = 1025;
      v154 = v28;
      v155 = 1025;
      v156 = v29;
      v157 = 1025;
      v158 = v31;
      v159 = 1025;
      v160 = v32;
      v161 = 1025;
      v162 = v33;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readBleConfigFromDefaults\", \"isBLERelaySupported\":%{private}hhd, \"advertiseEvaluationIntervalSeconds\":%{private}d, \"discoveryEvaluationIntervalSeconds\":%{private}d, \"advertiseDurationSeconds\":%{private}d, \"minDeviceDensityCount\":%{private}d, \"minTimeBetweenPeopleDensityQuery\":%{private}d, \"percent\":%{private}d, \"minBatteryLevelForBLEActivity\":%{private}d, \"bleCBAdvertiseRate\":%{private}d, \"bleCBScanRate\":%{private}d, \"bleCBScanRateScreenOff\":%{private}d, \"bleDataVersion\":%{private}d, \"displayBLEAlert\":%{private}d, \"bleAdvertisementTimePrecisionInMSec\":%{private}d}", (uint8_t *)&buf, 0x66u);
      v19 = SALogObjectGeneral;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v137 = 2082;
      v138 = "";
      v34 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,bleConfig defaults read\"}";
LABEL_145:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&buf, 0x12u);
      goto LABEL_146;
    }
    goto LABEL_146;
  }
  if (v20)
  {
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v35 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,can't read displayBLEAlert\"}";
LABEL_47:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v35, (uint8_t *)&buf, 0x12u);
  }
LABEL_48:
  v36 = v132;
  if (!v36)
  {
    v39 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v137 = 2082;
      v138 = "";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readBleConfigFromFile dictionary Invalid\"}", (uint8_t *)&buf, 0x12u);
    }
LABEL_141:
    v19 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v117 = *a3;
      v119 = *((_DWORD *)a3 + 1);
      v118 = *((_DWORD *)a3 + 2);
      v120 = *((_DWORD *)a3 + 3);
      v121 = *((_DWORD *)a3 + 4);
      v122 = *((_DWORD *)a3 + 5);
      v123 = *((_DWORD *)a3 + 6);
      v124 = *((_DWORD *)a3 + 7);
      v125 = *((_DWORD *)a3 + 8);
      v127 = *((_DWORD *)a3 + 9);
      v126 = *((_DWORD *)a3 + 10);
      v128 = a3[48];
      v129 = *((_DWORD *)a3 + 11);
      buf = 68292355;
      v137 = 2082;
      v138 = "";
      v139 = 1025;
      *(_DWORD *)v140 = v117;
      *(_WORD *)&v140[4] = 1025;
      *(_DWORD *)&v140[6] = v118;
      LOWORD(v141) = 1025;
      *(_DWORD *)((char *)&v141 + 2) = v120;
      HIWORD(v141) = 1025;
      v142 = v119;
      v143 = 1025;
      v144 = v122;
      v145 = 1025;
      v146 = v121;
      v147 = 1025;
      v148 = v123;
      v149 = 1025;
      v150 = v124;
      v151 = 1025;
      v152 = v125;
      v153 = 1025;
      v154 = v127;
      v155 = 1025;
      v156 = v126;
      v157 = 1025;
      v158 = v128;
      v159 = 1025;
      v160 = v129;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readBleConfigFromFailSafe\", \"isBLERelaySupported\":%{private}hhd, \"advertiseEvaluationIntervalSeconds\":%{private}d, \"discoveryEvaluationIntervalSeconds\":%{private}d, \"advertiseDurationSeconds\":%{private}d, \"minBatteryLevelForBLEActivity\":%{private}d, \"minDeviceDensityCount\":%{private}d, \"minTimeBetweenPeopleDensityQuery\":%{private}d, \"bleCBScanRate\":%{private}d, \"CBScanRateBackground\":%{private}d, \"bleCBAdvertiseRate\":%{private}d, \"bleDataVersion\":%{private}d, \"displayBLEAlert\":%{private}d, \"bleAdvertisementTimePrecisionInMSec\":%{private}d}", (uint8_t *)&buf, 0x60u);
      v19 = SALogObjectGeneral;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v137 = 2082;
      v138 = "";
      v34 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,bleConfig fail safe read\"}";
      goto LABEL_145;
    }
    goto LABEL_146;
  }
  v131 = v36;
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKey:", CFSTR("SAEWBLEConfig_v2")));
  if (v37 && (v38 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v37, v38) & 1) != 0))
    v133 = v37;
  else
    v133 = 0;

  v40 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,SAEWBLEConfig\"}", (uint8_t *)&buf, 0x12u);
  }

  if (!v133 || (v41 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v133, v41) & 1) == 0))
  {
    v116 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v137 = 2082;
      v138 = "";
      _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,bleConf dictionary Invalid\"}", (uint8_t *)&buf, 0x12u);
    }

    goto LABEL_141;
  }
  *a3 = 0;
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("isBLERelaySupported_v2")));
  if (v42)
  {
    v43 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v42, v43) & 1) != 0)
      *a3 = objc_msgSend(v42, "intValue") != 0;
  }

  *((_DWORD *)a3 + 1) = 0;
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("advertiseDurationSeconds")));
  if (v44)
  {
    v45 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v44, v45) & 1) != 0)
      *((_DWORD *)a3 + 1) = objc_msgSend(v44, "intValue");
  }

  *((_DWORD *)a3 + 2) = 0;
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("advertiseEvaluationIntervalSeconds")));
  if (v46)
  {
    v47 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v46, v47) & 1) != 0)
      *((_DWORD *)a3 + 2) = objc_msgSend(v46, "intValue");
  }

  *((_DWORD *)a3 + 3) = 0;
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("discoveryEvaluationIntervalSeconds")));
  if (v48)
  {
    v49 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v48, v49) & 1) != 0)
      *((_DWORD *)a3 + 3) = objc_msgSend(v48, "intValue");
  }

  *((_DWORD *)a3 + 5) = 0;
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("minBatteryLevelForBLEActivity")));
  if (v50)
  {
    v51 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v50, v51) & 1) != 0)
      *((_DWORD *)a3 + 5) = objc_msgSend(v50, "intValue");
  }

  *((_DWORD *)a3 + 4) = 0;
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("minDeviceDensityCount")));
  if (v52)
  {
    v53 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v52, v53) & 1) != 0)
      *((_DWORD *)a3 + 4) = objc_msgSend(v52, "intValue");
  }

  *((_DWORD *)a3 + 6) = 0;
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("minTimeBetweenPeopleDensityQuery")));
  if (v54)
  {
    v55 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v54, v55) & 1) != 0)
      *((_DWORD *)a3 + 6) = objc_msgSend(v54, "intValue");
  }

  *((_DWORD *)a3 + 7) = 0;
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("bleCBScanRate")));
  if (v56)
  {
    v57 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v56, v57) & 1) != 0)
      *((_DWORD *)a3 + 7) = objc_msgSend(v56, "intValue");
  }

  *((_DWORD *)a3 + 8) = 0;
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("bleCBScanRateScreenOff")));
  if (v58)
  {
    v59 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v58, v59) & 1) != 0)
      *((_DWORD *)a3 + 8) = objc_msgSend(v58, "intValue");
  }

  *((_DWORD *)a3 + 9) = 0;
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("bleCBAdvertiseRate")));
  if (v60)
  {
    v61 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v60, v61) & 1) != 0)
      *((_DWORD *)a3 + 9) = objc_msgSend(v60, "intValue");
  }

  *((_DWORD *)a3 + 10) = 1;
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("bleDataVersion")));
  if (v62)
  {
    v63 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v62, v63) & 1) != 0)
      *((_DWORD *)a3 + 10) = objc_msgSend(v62, "intValue");
  }

  a3[48] = 0;
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("displayBLEAlert")));
  if (v64)
  {
    v65 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v64, v65) & 1) != 0)
      a3[48] = objc_msgSend(v64, "intValue") != 0;
  }

  *((_DWORD *)a3 + 11) = 0;
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKey:", CFSTR("bleAdvertisementTimePrecisionInMSec")));
  if (v66)
  {
    v67 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v66, v67) & 1) != 0)
      *((_DWORD *)a3 + 11) = objc_msgSend(v66, "intValue");
  }

  v135 = 0;
  v68 = sub_1000687EC();
  v134 = 0;
  sub_10006A3BC((uint64_t)v68, v133, CFSTR("bleFanout"), &v135, &v134);
  v69 = v134;
  if (v135)
  {
    v70 = 0;
    v71 = (void **)(a3 + 56);
    v130 = (uint64_t)(a3 + 72);
    do
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectAtIndex:", v70, v130));
      if (v72 && (v73 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v72, v73) & 1) != 0))
      {
        v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectForKey:", CFSTR("fanoutMinDensity")));
        v75 = -1.0;
        if (v74)
        {
          v76 = objc_opt_class(NSNumber);
          if ((objc_opt_isKindOfClass(v74, v76) & 1) != 0)
          {
            objc_msgSend(v74, "doubleValue");
            v75 = v77;
          }
        }

        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectForKey:", CFSTR("fanoutPercent")));
        v79 = -1.0;
        if (v78)
        {
          v80 = objc_opt_class(NSNumber);
          if ((objc_opt_isKindOfClass(v78, v80) & 1) != 0)
          {
            objc_msgSend(v78, "doubleValue");
            v79 = v81;
          }
        }

        v82 = v75;
        v83 = v79;
        v85 = (float *)*((_QWORD *)a3 + 8);
        v84 = *((_QWORD *)a3 + 9);
        if ((unint64_t)v85 >= v84)
        {
          v88 = (float *)*v71;
          v89 = ((char *)v85 - (_BYTE *)*v71) >> 3;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 61)
            sub_100004C50();
          v91 = v84 - (_QWORD)v88;
          if (v91 >> 2 > v90)
            v90 = v91 >> 2;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          if (v92)
          {
            v93 = (char *)sub_1000179E4(v130, v92);
            v88 = (float *)*((_QWORD *)a3 + 7);
            v85 = (float *)*((_QWORD *)a3 + 8);
          }
          else
          {
            v93 = 0;
          }
          v94 = (float *)&v93[8 * v89];
          *v94 = v82;
          v94[1] = v83;
          v95 = v94;
          if (v85 != v88)
          {
            do
            {
              v96 = *((_QWORD *)v85 - 1);
              v85 -= 2;
              *((_QWORD *)v95 - 1) = v96;
              v95 -= 2;
            }
            while (v85 != v88);
            v88 = (float *)*v71;
          }
          v86 = v94 + 2;
          *((_QWORD *)a3 + 7) = v95;
          *((_QWORD *)a3 + 8) = v94 + 2;
          *((_QWORD *)a3 + 9) = &v93[8 * v92];
          if (v88)
            operator delete(v88);
        }
        else
        {
          *v85 = v82;
          v85[1] = v83;
          v86 = v85 + 2;
        }
        *((_QWORD *)a3 + 8) = v86;
      }
      else
      {
        v87 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          buf = 68289026;
          v137 = 2082;
          v138 = "";
          _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,bleConf dictionary Invalid\"}", (uint8_t *)&buf, 0x12u);
        }
      }

      ++v70;
    }
    while (v70 < v135);
  }
  v97 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
  {
    v98 = *a3;
    v100 = *((_DWORD *)a3 + 1);
    v99 = *((_DWORD *)a3 + 2);
    v101 = *((_DWORD *)a3 + 3);
    v102 = *((_DWORD *)a3 + 4);
    v103 = *((_DWORD *)a3 + 5);
    v104 = *((_DWORD *)a3 + 6);
    v105 = *((_DWORD *)a3 + 7);
    v106 = *((_DWORD *)a3 + 8);
    v108 = *((_DWORD *)a3 + 9);
    v107 = *((_DWORD *)a3 + 10);
    v109 = a3[48];
    v110 = *((_DWORD *)a3 + 11);
    buf = 68292355;
    v137 = 2082;
    v138 = "";
    v139 = 1025;
    *(_DWORD *)v140 = v98;
    *(_WORD *)&v140[4] = 1025;
    *(_DWORD *)&v140[6] = v99;
    LOWORD(v141) = 1025;
    *(_DWORD *)((char *)&v141 + 2) = v101;
    HIWORD(v141) = 1025;
    v142 = v100;
    v143 = 1025;
    v144 = v103;
    v145 = 1025;
    v146 = v102;
    v147 = 1025;
    v148 = v104;
    v149 = 1025;
    v150 = v105;
    v151 = 1025;
    v152 = v106;
    v153 = 1025;
    v154 = v108;
    v155 = 1025;
    v156 = v107;
    v157 = 1025;
    v158 = v109;
    v159 = 1025;
    v160 = v110;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readBleConfigFromFile\", \"isBLERelaySupported\":%{private}hhd, \"advertiseEvaluationIntervalSeconds\":%{private}d, \"discoveryEvaluationIntervalSeconds\":%{private}d, \"advertiseDurationSeconds\":%{private}d, \"minBatteryLevelForBLEActivity\":%{private}d, \"minDeviceDensityCount\":%{private}d, \"minTimeBetweenPeopleDensityQuery\":%{private}d, \"bleCBScanRate\":%{private}d, \"bleCBScanRateScreenOff\":%{private}d, \"bleCBAdvertiseRate\":%{private}d, \"bleDataVersion\":%{private}d, \"displayBLEAlert\":%{private}d, \"bleAdvertisementTimePrecisionInMSec\":%{private}d}", (uint8_t *)&buf, 0x60u);
  }

  v111 = (float *)*((_QWORD *)a3 + 7);
  v112 = (float *)*((_QWORD *)a3 + 8);
  if (v111 != v112)
  {
    v113 = SALogObjectGeneral;
    do
    {
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        v114 = *v111;
        v115 = v111[1];
        buf = 68289539;
        v137 = 2082;
        v138 = "";
        v139 = 2049;
        *(double *)v140 = v114;
        *(_WORD *)&v140[8] = 2049;
        v141 = v115;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SALBAssetConfig,readBleConfigFromFile\", \"first\":\"%{private}3f\", \"second\":\"%{private}3f\"}", (uint8_t *)&buf, 0x26u);
        v113 = SALogObjectGeneral;
      }
      v111 += 2;
    }
    while (v111 != v112);
  }

  v19 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v137 = 2082;
    v138 = "";
    v34 = "{\"msg%{public}.0s\":\"#SALBAssetConfig,bleConfig MA file read\"}";
    goto LABEL_145;
  }
LABEL_146:

}

void sub_10001D37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10001D5EC(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_100004ABC(a1, a2);
  }
  else
  {
    sub_100004A60(a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void sub_10001D628(int64x2_t *a1, uint64_t a2)
{
  uint64_t i64;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a1[1].u64[0];
  i64 = (uint64_t)a1[1].i64;
  v5 = v6;
  v7 = *(_QWORD *)(i64 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v7 - a1->i64[0]) >> 3);
    if (v9 + 1 > 0xEA0EA0EA0EA0EALL)
      sub_100004C50();
    v10 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x75075075075075)
      v12 = 0xEA0EA0EA0EA0EALL;
    else
      v12 = v11;
    v23 = i64;
    if (v12)
      v13 = (char *)sub_10001DFA8(i64, v12);
    else
      v13 = 0;
    v14 = &v13[280 * v12];
    sub_10001DE9C((uint64_t)&v13[280 * v9], a2);
    v8 = v15 + 280;
    v17 = a1->i64[0];
    v16 = a1->u64[1];
    if (v16 == a1->i64[0])
    {
      v18 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v16 -= 280;
        sub_10001DE9C(v15 - 280, v16);
      }
      while (v16 != v17);
      v18 = *a1;
    }
    a1->i64[0] = v15;
    a1->i64[1] = v8;
    v21 = v18;
    v19 = a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v14;
    v22 = v19;
    v20 = v18.i64[0];
    sub_10001DFF0((uint64_t)&v20);
  }
  else
  {
    sub_10001DE9C(*(_QWORD *)(i64 - 8), a2);
    v8 = v7 + 280;
  }
  a1->i64[1] = v8;
}

void sub_10001D77C(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100004C50();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1000179E4(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_10001D858(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    sub_10000E8A0(a2, (char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }

}

void sub_10001D8B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001D8C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  v8 = *(_OWORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_DWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_DWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_10001DB10((_QWORD *)(a1 + 192), *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = v14;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_10001DBFC((char *)(a1 + 224), *(__int128 **)(a2 + 224), *(__int128 **)(a2 + 232), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_10001DBFC((char *)(a1 + 256), *(__int128 **)(a2 + 256), *(__int128 **)(a2 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3));
  return a1;
}

void sub_10001DA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  char *v11;
  void **v12;
  void **v13;

  if (v11[79] < 0)
    operator delete(*v13);
  if (v11[55] < 0)
    operator delete(*v12);
  if (v11[31] < 0)
    operator delete(*v10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10001DB10(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10001DB88(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001DB6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001DB88(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_100004C50();
  result = (char *)sub_10001DBC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_10001DBC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_100004984();
  return operator new(4 * a2);
}

char *sub_10001DBFC(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_10001DC80(result, a4);
    result = sub_10001DCD0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_10001DC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100004EC0(&a9);
  _Unwind_Resume(a1);
}

char *sub_10001DC80(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100004C50();
  result = (char *)sub_100004C64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_10001DCD0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100004870(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10001DD8C((uint64_t)v9);
  return v4;
}

void sub_10001DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001DD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DD8C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10001DDC0(a1);
  return a1;
}

void sub_10001DDC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t sub_10001DE04(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 256);
  sub_100004EC0(&v4);
  v4 = (void **)(a1 + 224);
  sub_100004EC0(&v4);
  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

__n128 sub_10001DE9C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v6 = *(_DWORD *)(a2 + 184);
  v7 = *(_OWORD *)(a2 + 168);
  v8 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  *(_DWORD *)(a1 + 184) = v6;
  v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  return result;
}

void *sub_10001DFA8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    sub_100004984();
  return operator new(280 * a2);
}

uint64_t sub_10001DFF0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    sub_10001DE04(i - 280);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *sub_10001E03C(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

void sub_10001E0F8(void *a1)
{
  a1;
  if (*((_BYTE *)sub_10003D044() + 245))
    operator new();
  operator new();
}

void sub_10001E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001E1A0()
{
  operator delete();
}

uint64_t sub_10001E1B4()
{
  return 0;
}

uint64_t sub_10001E1BC()
{
  return 0;
}

CFDataRef sub_10001E1CC(std::string *__str)
{
  std::string::size_type size;
  unint64_t v3;
  char *v4;
  char *v5;
  std::string::size_type i;
  std::string *p_p;
  char v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;
  std::string::size_type v16;
  CFDataRef v17;
  std::string __p;
  char v20;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  for (i = 0; i < v16; i += 2)
  {
    std::string::basic_string(&__p, __str, i, 2uLL, (std::allocator<char> *)&v20);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = strtol((const char *)p_p, 0, 16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 >= v4)
    {
      v9 = (uint64_t)&v5[-v3 + 1];
      if (v9 < 0)
        sub_100004C50();
      if (2 * (uint64_t)&v4[-v3] > (unint64_t)v9)
        v9 = 2 * (_QWORD)&v4[-v3];
      if ((unint64_t)&v4[-v3] >= 0x3FFFFFFFFFFFFFFFLL)
        v10 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10)
        v11 = (char *)operator new(v10);
      else
        v11 = 0;
      v12 = &v5[(_QWORD)v11 - v3];
      *v12 = v8;
      v13 = v12 + 1;
      if (v5 != (char *)v3)
      {
        v14 = &v5[~v3];
        do
        {
          v15 = *--v5;
          (v14--)[(_QWORD)v11] = v15;
        }
        while (v5 != (char *)v3);
        v12 = v11;
      }
      v4 = &v11[v10];
      if (v3)
        operator delete((void *)v3);
      v3 = (unint64_t)v12;
      v5 = v13;
    }
    else
    {
      *v5++ = v8;
    }
    v16 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v16 & 0x80u) != 0)
      v16 = __str->__r_.__value_.__l.__size_;
  }
  v17 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v3, (CFIndex)&v5[-v3]);
  if (v3)
    operator delete((void *)v3);
  return v17;
}

void sub_10001E37C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_10001E3A0(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v2 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[1];
    v3 = a1[2];
    v5 = a1[3];
    v6 = *(unsigned __int8 *)a1;
    v7[0] = 68290307;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v4;
    v12 = 2049;
    v13 = v3;
    v14 = 2049;
    v15 = v5;
    v16 = 1025;
    v17 = v6;
    v18 = 1025;
    v19 = sub_10001E698((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pk,log\", \"key\":%{private, location:escape_only}@, \"effective\":\"%{private}.1f\", \"expires\":\"%{private}.1f\", \"parseSuccessful\":%{private}hhd, \"isValid\":%{private}hhd}", (uint8_t *)v7, 0x3Cu);
  }

}

void sub_10001E4B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001E4CC(uint64_t a1, uint64_t a2)
{
  NSObject *v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289026;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pk,copy constructor\"}", (uint8_t *)v11, 0x12u);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = CFDataCreateCopy(kCFAllocatorDefault, *(CFDataRef *)(a2 + 8));
  return a1;
}

uint64_t sub_10001E5C8(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pk,released\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_10001E68C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

uint64_t sub_10001E698(uint64_t a1)
{
  double Current;
  double v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;

  if (!*(_BYTE *)a1)
  {
    v11 = SALogObjectGeneral;
    v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    v13 = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v8 = "{\"msg%{public}.0s\":\"#pk,isValid,parse not successfull\"}";
    v9 = v11;
    v10 = 18;
    goto LABEL_8;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 16);
  if (Current < v3 || Current > *(double *)(a1 + 24))
  {
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    v7 = *(_QWORD *)(a1 + 24);
    v13 = 68289795;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2049;
    v18 = v3;
    v19 = 2049;
    v20 = v7;
    v21 = 2049;
    v22 = Current;
    v8 = "{\"msg%{public}.0s\":\"#pk,isValid,out of range\", \"effective\":\"%{private}0.1f\", \"expires\":\"%{private}0."
         "1f\", \"now\":\"%{private}0.1f\"}";
    v9 = v4;
    v10 = 48;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v13, v10);
    return 0;
  }
  return 1;
}

void sub_10001E81C(unsigned __int8 *a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v2 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 24;
    if ((char)a1[47] < 0)
      v3 = (_QWORD *)*v3;
    v5 = *((_DWORD *)a1 + 18);
    v4 = *((_DWORD *)a1 + 19);
    v7 = *((_QWORD *)a1 + 6);
    v6 = *((_QWORD *)a1 + 7);
    v9 = *((_QWORD *)a1 + 1);
    v8 = *((_QWORD *)a1 + 2);
    v10 = *a1;
    v11[0] = 68291075;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2081;
    v15 = v3;
    v16 = 1025;
    v17 = v5;
    v18 = 1025;
    v19 = v4;
    v20 = 1025;
    v21 = (unint64_t)(v6 - v7) >> 5;
    v22 = 2049;
    v23 = v9;
    v24 = 2049;
    v25 = v8;
    v26 = 1025;
    v27 = v10;
    v28 = 1025;
    v29 = sub_10001E98C((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cob,log\", \"uid\":%{private, location:escape_only}s, \"contentVersion\":%{private}d, \"compatibilityVersion\":%{private}d, \"numKeys\":%{private}d, \"effective\":\"%{private}.1f\", \"expires\":\"%{private}.1f\", \"parseSuccessful\":%{private}hhd, \"isValid\":%{private}hhd}", (uint8_t *)v11, 0x4Eu);
  }

}

void sub_10001E974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001E98C(uint64_t a1)
{
  double Current;
  double v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;

  if (!*(_BYTE *)a1)
  {
    v11 = SALogObjectGeneral;
    v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v8 = "{\"msg%{public}.0s\":\"#cob,isValid,parse failed\"}";
    goto LABEL_8;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 8);
  if (Current < v3 || Current > *(double *)(a1 + 16))
  {
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    v7 = *(_QWORD *)(a1 + 16);
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2049;
    v19 = v3;
    v20 = 2049;
    v21 = v7;
    v22 = 2049;
    v23 = Current;
    v8 = "{\"msg%{public}.0s\":\"#cob,isValid,out of range\", \"effective\":\"%{private}0.1f\", \"expires\":\"%{private}0"
         ".1f\", \"now\":\"%{private}0.1f\"}";
    v9 = v4;
    v10 = 48;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56))
    return 1;
  v11 = SALogObjectGeneral;
  v13 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v8 = "{\"msg%{public}.0s\":\"#cob,isValid,empty public keys\"}";
LABEL_8:
    v9 = v11;
    v10 = 18;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
    return 0;
  }
  return result;
}

_QWORD *sub_10001EB78()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100102858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100102858))
    sub_10001ECE4(qword_100102840);
  return qword_100102840;
}

void sub_10001EBF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100102858);
  _Unwind_Resume(a1);
}

uint64_t sub_10001EC08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,released\"}", (uint8_t *)v5, 0x12u);
  }
  sub_1000220F4((id **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    sub_10002209C(v3);

  return a1;
}

void sub_10001ECE4(_QWORD *a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v1 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,initialized\"}", (uint8_t *)v2, 0x12u);
  }
  operator new();
}

void sub_10001EE64(_Unwind_Exception *a1)
{
  uint64_t v1;
  id **v2;
  uint64_t v4;

  sub_1000220F4(v2, 0);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    sub_10002209C(v4);

  _Unwind_Resume(a1);
}

void sub_10001EEA0(SAPlatformInfo *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  void *p_p;
  void *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25[2];
  void *__p;
  uint64_t v27;
  unsigned __int8 v28;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  id v33;

  if ((sub_10007FD14(a1) & 1) != 0)
  {
    sub_10001F450((uint64_t)&__p);
    v1 = v28;
    v2 = (char)v28;
    if ((v28 & 0x80u) == 0)
      v3 = v28;
    else
      v3 = v27;
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        p_p = __p;
        if (v2 >= 0)
          p_p = &__p;
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        v30 = 2082;
        v31 = "";
        v32 = 2081;
        v33 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,loadCodebook\", \"filePath\":%{private, location:escape_only}s}", buf, 0x1Cu);
        v1 = v28;
      }
      if ((v1 & 0x80) != 0)
      {
        if (v27)
        {
          v7 = __p;
LABEL_19:
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v7, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
          if (!v12)
          {
            v20 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              v21 = &__p;
              if ((v28 & 0x80u) != 0)
                v21 = __p;
              *(_DWORD *)buf = 68289283;
              *(_DWORD *)&buf[4] = 0;
              v30 = 2082;
              v31 = "";
              v32 = 2081;
              v33 = v21;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,loadCodebook,path not derived\", \"filePath\":%{private, location:escape_only}s}", buf, 0x1Cu);
            }
            goto LABEL_40;
          }
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v12));
          if (!v13)
          {
            v22 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              v23 = &__p;
              if ((v28 & 0x80u) != 0)
                v23 = __p;
              *(_DWORD *)buf = 68289283;
              *(_DWORD *)&buf[4] = 0;
              v30 = 2082;
              v31 = "";
              v32 = 2081;
              v33 = v23;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,loadCodebook,read failed\", \"filePath\":%{private, location:escape_only}s}", buf, 0x1Cu);
            }
            goto LABEL_39;
          }
          v25[0] = 0;
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v13, 0, v25));
          v15 = v25[0];
          v25[1] = v14;
          if (v15)
          {
            v16 = SALogObjectGeneral;
            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
LABEL_25:

LABEL_39:
LABEL_40:

LABEL_41:
              if ((char)v28 < 0)
                operator delete(__p);
              return;
            }
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            v30 = 2082;
            v31 = "";
            v32 = 2113;
            v33 = v15;
            v17 = "{\"msg%{public}.0s\":\"#aa,loadCodebook,error converting to dict\", \"error\":%{private, location:escape_only}@}";
          }
          else
          {
            if (v14)
              sub_10001F64C();
            v16 = SALogObjectGeneral;
            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              goto LABEL_25;
            v24 = &__p;
            if ((v28 & 0x80u) != 0)
              v24 = __p;
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            v30 = 2082;
            v31 = "";
            v32 = 2081;
            v33 = v24;
            v17 = "{\"msg%{public}.0s\":\"#aa,loadCodebook,codebook dict empty\", \"filePath\":%{private, location:escape_only}s}";
          }
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x1Cu);
          goto LABEL_25;
        }
      }
      else if (v1)
      {
        v7 = &__p;
        goto LABEL_19;
      }
      v18 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_41;
      v19 = &__p;
      if ((v1 & 0x80u) != 0)
        v19 = __p;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2081;
      v33 = v19;
      v9 = "{\"msg%{public}.0s\":\"#aa,loadCodebook,invalid path\", \"filePath\":%{private, location:escape_only}s}";
      v10 = v18;
      v11 = 28;
    }
    else
    {
      if (!v5)
        goto LABEL_41;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      v9 = "{\"msg%{public}.0s\":\"#aa,loadCodebook,empty file path\"}";
      v10 = v4;
      v11 = 18;
    }
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    goto LABEL_41;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,loadCodebook,not supported\"}", buf, 0x12u);
  }
}

void sub_10001F404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10001F450(uint64_t a1)
{
  char *v2;
  void *v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  void *__p[2];
  uint64_t v12;
  std::string v13;
  _QWORD v14[2];

  v2 = (char *)sub_1000687EC();
  if (v2[119] < 0)
  {
    sub_100004870(__p, *((void **)v2 + 12), *((_QWORD *)v2 + 13));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v2 + 6);
    v12 = *((_QWORD *)v2 + 14);
  }
  sub_10000E8A0((_QWORD *)a1, "");
  v3 = (void *)HIBYTE(v12);
  if (v12 < 0)
    v3 = __p[1];
  if (v3)
  {
    sub_10000E8A0(&v13, "/var/mobile/Library/com.apple.safetyalerts/");
    if (v12 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if (v12 >= 0)
      v5 = HIBYTE(v12);
    else
      v5 = (std::string::size_type)__p[1];
    v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
    v7 = v6->__r_.__value_.__r.__words[0];
    v14[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v9 = v14[0];
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v14 + 7);
    *(_BYTE *)(a1 + 23) = v8;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v13.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,empty codebook file name\"}", (uint8_t *)&v13, 0x12u);
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_10001F5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void sub_10001F64C()
{
  operator new();
}

void sub_100020384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void **a29,uint64_t a30,void **a31)
{
  uint64_t v31;
  void *v32;

  a31 = a24;
  sub_10002202C(&a31);
  if (*(char *)(v31 + 47) < 0)
    operator delete(*a29);

  operator delete();
}

uint64_t sub_10002058C(SAPlatformInfo *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  const char *v10;
  unint64_t v11;
  CFIndex v12;
  const UInt8 *v13;
  _BOOL4 v14;
  CFDataRef v15;
  const __CFData *v16;
  const __CFData *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  CFDataRef v22;
  const __CFData *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFStringRef v27;
  const __CFData *v28;
  NSObject *v29;
  _BOOL4 v30;
  NSDictionary *v31;
  __SecKey *v32;
  CFErrorRef v33;
  CFErrorRef v34;
  NSObject *v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  _BOOL4 v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  UInt8 *bytes[2];
  uint64_t v46;
  CFErrorRef error;
  uint8_t v48[4];
  int v49;
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  uint64_t buf;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const __CFData *v57;
  __int16 v58;
  const __CFData *v59;
  __int16 v60;
  const __CFData *v61;

  if ((sub_10007FD14(a1) & 1) != 0)
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        v11 = *(_QWORD *)(a3 + 8);
        if (v11)
        {
          sub_100004870(bytes, *(void **)a3, v11);
LABEL_12:
          if (SHIBYTE(v46) < 0)
          {
            v12 = (CFIndex)bytes[1];
            if (bytes[1])
            {
              v13 = bytes[0];
LABEL_22:
              v15 = CFDataCreate(kCFAllocatorDefault, v13, v12);
              if (v15)
              {
                v16 = objc_retainAutorelease(v15);
                if (CC_SHA224(-[__CFData bytes](v16, "bytes"), (CC_LONG)-[__CFData length](v16, "length"), (unsigned __int8 *)&buf))
                {
                  v17 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&buf, 28);
                  if (v17)
                  {
LABEL_37:

LABEL_38:
                    if (SHIBYTE(v46) < 0)
                      operator delete(bytes[0]);
                    v22 = sub_10001E1CC((std::string *)a2);
                    v23 = v22;
                    if (v17 && v22)
                    {
                      v24 = *((_QWORD *)a1 + 1);
                      if (v24)
                      {
                        v25 = *(_QWORD *)(v24 + 48);
                        v26 = *(_QWORD *)(v24 + 56);
                        if (v25 != v26)
                        {
                          v27 = kSecAttrKeyType;
                          do
                          {
                            sub_10001E4CC((uint64_t)v48, v25);
                            if ((sub_10001E698((uint64_t)v48) & 1) == 0)
                              goto LABEL_67;
                            v28 = (const __CFData *)v50[0];
                            v29 = SALogObjectGeneral;
                            v30 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
                            if (v28)
                            {
                              if (v30)
                              {
                                buf = 68289795;
                                v54 = 2082;
                                v55 = "";
                                v56 = 2113;
                                v57 = v23;
                                v58 = 2113;
                                v59 = v17;
                                v60 = 2113;
                                v61 = v28;
                                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal\", \"signature\":%{private, location:escape_only}@, \"dataHash\":%{private, location:escape_only}@, \"publicKeyData\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
                              }
                              v51[0] = v27;
                              v51[1] = kSecAttrKeyClass;
                              v52[0] = kSecAttrKeyTypeEC;
                              v52[1] = kSecAttrKeyClassPublic;
                              v51[2] = kSecAttrKeySizeInBits;
                              v52[2] = &off_1000FC020;
                              v31 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v52, v51, 3);
                              if (v31)
                              {
                                error = 0;
                                v32 = SecKeyCreateWithData(v28, (CFDictionaryRef)v31, &error);
                                v33 = v32;
                                v34 = error;
                                if (!error)
                                {
                                  if (!v32)
                                  {
                                    v42 = SALogObjectGeneral;
                                    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                      goto LABEL_67;
                                    buf = 68289026;
                                    v54 = 2082;
                                    v55 = "";
                                    v36 = v42;
                                    v37 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,publicKeyRef nil\"}";
                                    goto LABEL_58;
                                  }
                                  v39 = SecKeyVerifySignature(v32, kSecKeyAlgorithmECDSASignatureDigestRFC4754, v17, v23, &error);
                                  CFRelease(v33);
                                  v33 = error;
                                  v40 = SALogObjectGeneral;
                                  v41 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
                                  if (!v33)
                                  {
                                    if (v41)
                                    {
                                      buf = 68289283;
                                      v54 = 2082;
                                      v55 = "";
                                      v56 = 1025;
                                      LODWORD(v57) = v39 != 0;
                                      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal\", \"isValid\":%{private}hhd}", (uint8_t *)&buf, 0x18u);
                                    }
                                    v27 = kSecAttrKeyType;
                                    if (v39)
                                    {
                                      CFRelease(v17);
                                      CFRelease(v23);
                                      sub_10001E5C8((uint64_t)v48);
                                      return 1;
                                    }
                                    goto LABEL_67;
                                  }
                                  if (!v41)
                                  {
                                    v27 = kSecAttrKeyType;
LABEL_66:
                                    CFRelease(v33);
                                    goto LABEL_67;
                                  }
                                  buf = 68289283;
                                  v54 = 2082;
                                  v55 = "";
                                  v56 = 2113;
                                  v57 = v33;
                                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,error in verify signature\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
                                  v33 = error;
                                  v27 = kSecAttrKeyType;
                                  goto LABEL_65;
                                }
                                v35 = SALogObjectGeneral;
                                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                {
                                  buf = 68289283;
                                  v54 = 2082;
                                  v55 = "";
                                  v56 = 2113;
                                  v57 = v34;
                                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,error in create publicKeyRef\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
                                  v34 = error;
                                  v27 = kSecAttrKeyType;
                                  if (!error)
                                  {
LABEL_65:
                                    if (v33)
                                      goto LABEL_66;
                                    goto LABEL_67;
                                  }
                                }
                                else
                                {
                                  v27 = kSecAttrKeyType;
                                }
                                CFRelease(v34);
                                goto LABEL_65;
                              }
                              v38 = SALogObjectGeneral;
                              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                              {
                                buf = 68289026;
                                v54 = 2082;
                                v55 = "";
                                v36 = v38;
                                v37 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,attributes nil\"}";
                                goto LABEL_58;
                              }
                            }
                            else if (v30)
                            {
                              buf = 68289026;
                              v54 = 2082;
                              v55 = "";
                              v36 = v29;
                              v37 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,nil input\"}";
LABEL_58:
                              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, (uint8_t *)&buf, 0x12u);
                            }
LABEL_67:
                            sub_10001E5C8((uint64_t)v48);
                            v25 += 32;
                          }
                          while (v25 != v26);
                        }
                      }
                      else
                      {
                        v44 = SALogObjectGeneral;
                        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                        {
                          buf = 68289026;
                          v54 = 2082;
                          v55 = "";
                          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidUsingCodebook,fCodebook nil\"}", (uint8_t *)&buf, 0x12u);
                        }
                      }
                      CFRelease(v17);
                      CFRelease(v23);
                    }
                    else
                    {
                      v43 = SALogObjectGeneral;
                      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                      {
                        buf = 68289026;
                        v54 = 2082;
                        v55 = "";
                        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,isSignatureValidUsingCodebook,cfData input nil\"}", (uint8_t *)&buf, 0x12u);
                      }
                      if (v17)
                        CFRelease(v17);
                      if (v23)
                        CFRelease(v23);
                    }
                    return 0;
                  }
                  v18 = SALogObjectGeneral;
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v48 = 68289026;
                    v49 = 0;
                    LOWORD(v50[0]) = 2082;
                    *(_QWORD *)((char *)v50 + 2) = "";
                    v19 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidInternal,dataHash nil\"}";
LABEL_35:
                    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, v48, 0x12u);
                  }
                }
                else
                {
                  v18 = SALogObjectGeneral;
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v48 = 68289026;
                    v49 = 0;
                    LOWORD(v50[0]) = 2082;
                    *(_QWORD *)((char *)v50 + 2) = "";
                    v19 = "{\"msg%{public}.0s\":\"#aa,generateHashOfData,failed to generate SHA224\"}";
                    goto LABEL_35;
                  }
                }
                v17 = 0;
                goto LABEL_37;
              }
              v20 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                buf = 68289026;
                v54 = 2082;
                v55 = "";
                v21 = "{\"msg%{public}.0s\":\"#aa,generateHashOfData,dataRef nil\"}";
                goto LABEL_31;
              }
              goto LABEL_32;
            }
          }
          else
          {
            v12 = HIBYTE(v46);
            if (HIBYTE(v46))
            {
              v13 = (const UInt8 *)bytes;
              goto LABEL_22;
            }
          }
          v20 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289026;
            v54 = 2082;
            v55 = "";
            v21 = "{\"msg%{public}.0s\":\"#aa,generateHashOfData,empty input\"}";
LABEL_31:
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&buf, 0x12u);
          }
LABEL_32:
          v17 = 0;
          goto LABEL_38;
        }
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        *(_OWORD *)bytes = *(_OWORD *)a3;
        v46 = *(_QWORD *)(a3 + 16);
        goto LABEL_12;
      }
    }
    v7 = SALogObjectGeneral;
    v14 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v14)
      return result;
    buf = 68289026;
    v54 = 2082;
    v55 = "";
    v10 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidUsingCodebook,input empty\"}";
  }
  else
  {
    v7 = SALogObjectGeneral;
    v8 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v8)
      return result;
    buf = 68289026;
    v54 = 2082;
    v55 = "";
    v10 = "{\"msg%{public}.0s\":\"#aa,isSignatureValidUsingCodebook,not supported\"}";
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&buf, 0x12u);
  return 0;
}

void sub_100020EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  sub_10001E5C8((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_100020EF4(uint64_t a1, void *a2)
{
  SAPlatformInfo *v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  xpc_object_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  _QWORD handler[5];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  double v20;

  v4 = a2;
  if ((sub_10007FD14(v4) & 1) == 0)
  {
    v10 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    *(_DWORD *)buf = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v11 = "{\"msg%{public}.0s\":\"#aa,setupXpcActivity,not supported\"}";
    goto LABEL_18;
  }
  objc_storeStrong((id *)a1, a2);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    operator new();
  if (!*(_BYTE *)(v5 + 32))
  {
    v10 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    *(_DWORD *)buf = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v11 = "{\"msg%{public}.0s\":\"#aa,setupXpcActivity,init failed\"}";
LABEL_18:
    v12 = v10;
    v13 = OS_LOG_TYPE_DEFAULT;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, 0x12u);
    goto LABEL_25;
  }
  v6 = *((double *)sub_10003D044() + 42);
  if (v6 <= 0.0)
    v6 = (double)*((int *)sub_1000687EC() + 5);
  v7 = SALogObjectGeneral;
  if (v6 <= 0.0)
  {
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_DWORD *)buf = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v11 = "{\"msg%{public}.0s\":\"#aa,setupXpcActivity,invalid download period\"}";
    v12 = v7;
    v13 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2049;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,setupXpcActivity\", \"downloadPeriodSeconds\":\"%{private}0.1f\"}", buf, 0x1Cu);
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = SALogObjectGeneral;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2049;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,setupXpcActivity\", \"downloadPeriodSeconds\":\"%{private}0.1f\"}", buf, 0x1Cu);
    }
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, 0);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, 30);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_INTERVAL, (uint64_t)v6);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_RANDOM_INITIAL_DELAY, 0);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000213A0;
    handler[3] = &unk_1000F1DE8;
    handler[4] = a1;
    xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.aa"), "UTF8String"), v8, handler);
  }
  else if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#aa,setupXpcActivity,cannot create xpcDictionary\"}", buf, 0x12u);
  }

LABEL_25:
}

void sub_100021350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000213A0(uint64_t a1, void *a2)
{
  NSObject **v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  uint8_t buf[8];
  __int128 v19;
  void *v20;
  NSObject **v21;

  v2 = *(NSObject ***)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,processXpcActivity,activity is nil\"}";
    goto LABEL_17;
  }
  state = xpc_activity_get_state(v3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,processXpcActivity\"}", buf, 0x12u);
  }
  if (state == 2)
  {
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v19) = 2082;
      *(_QWORD *)((char *)&v19 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,processXpcActivity,run\"}", buf, 0x12u);
    }
    v14 = *v2;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v19 = 3221225472;
    *((_QWORD *)&v19 + 1) = sub_1000216A4;
    v20 = &unk_1000F1EB8;
    v21 = v2;
    dispatch_async(v14, buf);
    if (xpc_activity_set_state(v4, 5))
      goto LABEL_20;
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v15[0] = 68289026;
    v15[1] = 0;
    v16 = 2082;
    v17 = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,processXpcActivity,failed to set state\"}";
    v9 = (uint8_t *)v15;
LABEL_18:
    v10 = v12;
    v11 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }
  if (state)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,processXpcActivity,unexpected xpcActivity\"}";
LABEL_17:
    v9 = buf;
    goto LABEL_18;
  }
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,processXpcActivity,checkin\"}";
    v9 = buf;
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v8, v9, 0x12u);
  }
LABEL_20:

}

void sub_10002168C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000216A4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  std::string::size_type v15;
  char v16;
  std::string::size_type size;
  std::string::size_type v18;
  char *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  void *v23;
  unsigned __int8 v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  std::string::size_type v28;
  int v29;
  NSObject *v30;
  void *p_p;
  std::string *v32;
  uint64_t v33;
  double v34;
  std::string *v35;
  uint64_t v36;
  NSObject *v37;
  void *__p;
  _BYTE v39[15];
  unsigned __int8 v40;
  void *__dst[2];
  uint64_t v42;
  _BYTE buf[40];
  std::string v44;
  std::string *v45;
  _QWORD v46[2];
  std::string v47;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3 = SALogObjectGeneral;
  v4 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,onXpcActivityTriggered\"}", buf, 0x12u);
  }
  if ((sub_10007FD14((SAPlatformInfo *)v4) & 1) == 0)
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_84;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,downloadCodebook,not supported\"}";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
    goto LABEL_84;
  }
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5 || !*(_BYTE *)(v5 + 32))
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_84;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v8 = "{\"msg%{public}.0s\":\"#aa,downloadCodebook,downloader not ready\"}";
    goto LABEL_12;
  }
  v6 = (char *)sub_1000687EC();
  if (v6[119] < 0)
  {
    sub_100004870(__dst, *((void **)v6 + 12), *((_QWORD *)v6 + 13));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v6 + 6);
    v42 = *((_QWORD *)v6 + 14);
  }
  v9 = (void *)HIBYTE(v42);
  if (v42 < 0)
    v9 = __dst[1];
  if (!v9)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,empty codebook file name\"}", buf, 0x12u);
    }
    goto LABEL_82;
  }
  v10 = (char *)sub_1000687EC();
  if (v10[119] < 0)
  {
    sub_100004870(buf, *((void **)v10 + 12), *((_QWORD *)v10 + 13));
  }
  else
  {
    *(_OWORD *)buf = *((_OWORD *)v10 + 6);
    *(_QWORD *)&buf[16] = *((_QWORD *)v10 + 14);
  }
  sub_10000E8A0(&__p, "");
  v12 = buf[23];
  if (buf[23] < 0)
    v12 = *(_QWORD *)&buf[8];
  if (v12)
  {
    v13 = (char *)sub_10003D044();
    if (v13[215] < 0)
      sub_100004870(&v44, *((void **)v13 + 24), *((_QWORD *)v13 + 25));
    else
      v44 = *(std::string *)(v13 + 8);
    v15 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    size = v44.__r_.__value_.__l.__size_;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v18 = v44.__r_.__value_.__l.__size_;
    if (!v18)
    {
      v19 = (char *)sub_1000687EC();
      if (v19[47] < 0)
        sub_100004870(&v47, *((void **)v19 + 3), *((_QWORD *)v19 + 4));
      else
        v47 = *(std::string *)(v19 + 1);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v44 = v47;
      v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      size = v47.__r_.__value_.__l.__size_;
      v16 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    if (v16 < 0)
      v15 = size;
    if (v15)
    {
      SACommonUtils::getHashForString(buf, (uint64_t *)&v47);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v44;
      else
        v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v21 = v44.__r_.__value_.__l.__size_;
      v22 = std::string::insert(&v47, 0, (const std::string::value_type *)v20, v21);
      v23 = (void *)v22->__r_.__value_.__r.__words[0];
      v46[0] = v22->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
      v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if ((char)v40 < 0)
        operator delete(__p);
      __p = v23;
      *(_QWORD *)v39 = v46[0];
      *(_QWORD *)&v39[7] = *(_QWORD *)((char *)v46 + 7);
      v40 = v24;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
    }
    else
    {
      v25 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v47.__r_.__value_.__r.__words[0] = 68289026;
        LOWORD(v47.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,pull cname unavailable\"}", (uint8_t *)&v47, 0x12u);
      }
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v44.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v44.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,empty codebook file name\"}", (uint8_t *)&v44, 0x12u);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_10001F450((uint64_t)&v47);
  v26 = v40;
  v27 = (char)v40;
  if ((v40 & 0x80u) != 0)
    v26 = *(_QWORD *)v39;
  if (!v26)
    goto LABEL_74;
  v28 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  v29 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = v47.__r_.__value_.__l.__size_;
  if (!v28)
  {
LABEL_74:
    v37 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,empty codebook file or url path\"}", buf, 0x12u);
    }
    goto LABEL_78;
  }
  v30 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    p_p = __p;
    if (v27 >= 0)
      p_p = &__p;
    v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if (v29 >= 0)
      v32 = &v47;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = p_p;
    *(_WORD *)&buf[28] = 2081;
    *(_QWORD *)&buf[30] = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,downloading public keys codebook\", \"srcUrl\":%{private, location:escape_only}s, \"dstPath\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v33 = *(_QWORD *)(v1 + 16);
  v34 = *((double *)sub_10003D044() + 41);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_100021E40;
  *(_QWORD *)&buf[24] = &unk_1000F1E08;
  *(_QWORD *)&buf[32] = v1;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1000F1E38;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)objc_retainBlock(buf);
  v45 = &v44;
  sub_1000624A4(v33, (uint64_t *)&__p, (uint64_t)&v47, 4, (uint64_t)&v44, v34);
  v35 = v45;
  if (v45 == &v44)
  {
    v36 = 4;
    v35 = &v44;
    goto LABEL_77;
  }
  if (v45)
  {
    v36 = 5;
LABEL_77:
    (*(void (**)(void))(v35->__r_.__value_.__r.__words[0] + 8 * v36))();
  }
LABEL_78:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(__p);
LABEL_82:
  if (SHIBYTE(v42) < 0)
    operator delete(__dst[0]);
LABEL_84:
  objc_autoreleasePoolPop(v2);
}

void sub_100021D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  if (a37 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100021E40(uint64_t a1, int a2)
{
  char v2;
  SAPlatformInfo *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  const __CFString *v13;
  void *v14;

  v2 = a2;
  v3 = *(SAPlatformInfo **)(a1 + 32);
  v13 = CFSTR("status");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 ^ 1u));
  v14 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));

  v6 = sub_10004D658();
  sub_10004E620((uint64_t)v6, 2, v5);
  v7 = SALogObjectGeneral;
  v8 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v8)
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,codebook downloaded\"}", (uint8_t *)&v9, 0x12u);
    }
    sub_10001EEA0(v3);
  }
  else if (v8)
  {
    v9 = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#aa,downloadCodebook,failed to download\"}", (uint8_t *)&v9, 0x12u);
  }

}

void sub_100021FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100021FE0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_10001E5C8(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10002202C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10001E5C8(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002209C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  sub_10002202C(&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  operator delete();
}

id *sub_1000220F4(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100062464(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100022130(uint64_t a1)
{

  return a1;
}

void sub_100022158(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100022190()
{
  return 0;
}

id sub_100022198(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F1E38;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1000221D0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_1000221E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_1000221F0(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F1EA8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10002222C()
{
  return &off_1000F1EA8;
}

void sub_100022238(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *__p;
  uint8_t buf[8];
  __int16 v9;
  const char *v10;

  v3 = a2;
  *(_QWORD *)a1 = 0x4024000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  v4 = v3;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = SALogObjectGeneral;
  v6 = v4;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,initialized\"}", buf, 0x12u);
    v6 = *(void **)(a1 + 48);
  }
  sub_10000E8A0(&__p, "com.apple.safetyalerts.pendingFollowUpMetrics");
  SATimer::create(v6);
}

void sub_100022384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);

  v19 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v16 + 32) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1000239A8((void ***)&a16);

  _Unwind_Resume(a1);
}

uint64_t sub_1000223E0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 68289026;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,destructor\"}", (uint8_t *)&v5, 0x12u);
  }

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = a1 + 8;
  sub_1000239A8((void ***)&v5);
  return a1;
}

void sub_1000224CC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::string::size_type v5;
  time_t v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  void **v23;
  _BYTE *v24;
  void **v25;
  void **v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64x2_t v34;
  void **v35;
  void *__p[2];
  uint64_t v37;
  std::string v38;
  double v39;
  void **v40;
  int64x2_t v41;
  void **v42;
  uint8_t *v43;
  uint8_t buf[8];
  std::string v45;
  __int128 v46;
  __int128 v47;
  char v48;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v45.__r_.__value_.__l.__data_) = 2082;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 2) = (std::string::size_type)"";
    WORD1(v45.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v45.__r_.__value_.__r.__words[1] + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,onFollowUpAlertReceived\", \"alertID\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v6 = time(0);
  memset(&v45, 0, sizeof(v45));
  BYTE8(v47) = 0;
  v48 = 0;
  std::string::operator=(&v45, (const std::string *)(a2 + 8));
  v7 = (double)(uint64_t)((double)(uint64_t)(double)v6 + -978307200.0);
  v8 = v7 - *(double *)(a2 + 216);
  *(double *)buf = v7;
  *((double *)&v46 + 1) = v8;
  *(_QWORD *)&v47 = 0xBFF0000000000000;
  if (*(_BYTE *)(a1 + 40))
  {
    v39 = -1.0;
    memset(&v38, 0, sizeof(v38));
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100004870(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      v37 = *(_QWORD *)(a2 + 24);
    }
    v13 = sub_100022980(a1, (char *)__p, &v39, &v38);
    LOBYTE(v46) = v13;
    if (SHIBYTE(v37) < 0)
    {
      operator delete(__p[0]);
      v13 = v46;
    }
    if (v13)
    {
      *((double *)&v47 + 1) = v7 - v39;
      v48 = 1;
    }
    v40 = _NSConcreteStackBlock;
    v41.i64[0] = 3221225472;
    v41.i64[1] = (uint64_t)sub_100022E60;
    v42 = (void **)&unk_1000F1ED8;
    v43 = buf;
    AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.onFollowUpAlertReceived"), &v40);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v14) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0x38E38E38E38E38ELL)
        sub_100004C50();
      v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v14) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x1C71C71C71C71C7)
        v18 = 0x38E38E38E38E38ELL;
      else
        v18 = v16;
      v43 = (uint8_t *)(a1 + 24);
      if (v18)
      {
        if (v18 > 0x38E38E38E38E38ELL)
          sub_100004984();
        v19 = (void **)operator new(72 * v18);
      }
      else
      {
        v19 = 0;
      }
      v23 = &v19[(uint64_t)(v10 - v14) >> 3];
      v40 = v19;
      v41.i64[0] = (uint64_t)v23;
      v41.i64[1] = (uint64_t)v23;
      v42 = &v19[9 * v18];
      *(double *)v23 = v7;
      v24 = v23 + 1;
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100004870(v24, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
        v14 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        v25 = (void **)v41.i64[1];
        v23 = (void **)v41.i64[0];
      }
      else
      {
        *(_OWORD *)v24 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        v23[3] = (void *)v45.__r_.__value_.__r.__words[2];
        v25 = &v19[(uint64_t)(v10 - v14) >> 3];
      }
      v26 = &v19[9 * v15];
      v27 = v47;
      *((_OWORD *)v26 + 2) = v46;
      *((_OWORD *)v26 + 3) = v27;
      *((_BYTE *)v26 + 64) = v48;
      if (v10 == v14)
      {
        v34 = vdupq_n_s64(v14);
      }
      else
      {
        v28 = 0;
        do
        {
          v29 = (char *)&v23[v28 / 8];
          v30 = v10 + v28;
          *((_QWORD *)v29 - 9) = *(_QWORD *)(v10 + v28 - 72);
          v31 = *(_OWORD *)(v10 + v28 - 64);
          *((_QWORD *)v29 - 6) = *(_QWORD *)(v10 + v28 - 48);
          *((_OWORD *)v29 - 4) = v31;
          *(_QWORD *)(v30 - 56) = 0;
          *(_QWORD *)(v30 - 48) = 0;
          *(_QWORD *)(v30 - 64) = 0;
          v32 = *(_OWORD *)(v10 + v28 - 40);
          v33 = *(_OWORD *)(v10 + v28 - 24);
          *(v29 - 8) = *(_BYTE *)(v10 + v28 - 8);
          *(_OWORD *)(v29 - 24) = v33;
          *(_OWORD *)(v29 - 40) = v32;
          v28 -= 72;
        }
        while (v10 + v28 != v14);
        v34 = *(int64x2_t *)(a1 + 8);
        v23 = (void **)((char *)v23 + v28);
      }
      v22 = (char *)(v25 + 9);
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = v25 + 9;
      v41 = v34;
      v35 = *(void ***)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v42;
      v42 = v35;
      v40 = (void **)v34.i64[0];
      sub_100023A34((uint64_t)&v40);
    }
    else
    {
      *(double *)v10 = v7;
      v11 = (_BYTE *)(v10 + 8);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100004870(v11, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else
      {
        v12 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(_QWORD *)(v10 + 24) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)v11 = v12;
      }
      v20 = v46;
      v21 = v47;
      *(_BYTE *)(v10 + 64) = v48;
      *(_OWORD *)(v10 + 32) = v20;
      *(_OWORD *)(v10 + 48) = v21;
      v22 = (char *)(v10 + 72);
      *(_QWORD *)(a1 + 16) = v10 + 72;
    }
    *(_QWORD *)(a1 + 16) = v22;
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_100022910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_100023A34((uint64_t)&a22);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100022980(uint64_t a1, char *a2, _QWORD *a3, std::string *a4)
{
  NSObject *v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v27[2];
  char v28;
  void *v29[2];
  int64_t v30;
  void *__p[2];
  unsigned __int8 v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  char v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  std::string v49;
  std::string __str;

  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,isIgneousReceived\"}", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    sub_1000254FC((uint64_t)buf);
    sub_10000E8A0(&__str, "igneous_received");
    std::string::operator=(&v49, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    buf[1] = 0;
    v48 = 2000;
    sub_10000E8A0(&__str, "/var/mobile/Library/com.apple.safetyalerts/");
    sub_10000E8A0(__p, "igneous_received.elog");
    if ((v32 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v32 & 0x80u) == 0)
      v10 = v32;
    else
      v10 = (std::string::size_type)__p[1];
    v11 = std::string::append(&__str, (const std::string::value_type *)v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v30 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)v29 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((char)v32 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v30 >= 0)
      v13 = (char *)v29;
    else
      v13 = (char *)v29[0];
    v36 = v35;
    v33[0] = off_1000F2008;
    v34 = v33;
    v35[0] = off_1000F2008;
    v14 = sub_100023004((uint64_t)buf, v13, 0x1388uLL, (uint64_t)v35, (uint64_t)v33);
    v15 = v34;
    if (v34 == v33)
    {
      v16 = 4;
      v15 = v33;
    }
    else
    {
      if (!v34)
        goto LABEL_26;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_26:
    v19 = v36;
    if (v36 == v35)
    {
      v20 = 4;
      v19 = v35;
    }
    else
    {
      if (!v36)
        goto LABEL_31;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_31:
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29[0]);
      if ((v14 & 1) != 0)
        goto LABEL_37;
    }
    else if ((v14 & 1) != 0)
    {
      goto LABEL_37;
    }
    v21 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      __str.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&__str, 0x12u);
    }
LABEL_37:
    sub_10002316C((uint64_t)buf);
    SACommonUtils::getHashForString(a2, (uint64_t *)v27);
    v18 = sub_100023260((uint64_t)buf, (unsigned __int8 **)v27, a3, a4);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v22 = v47;
    if (v47 == v46)
    {
      v23 = 4;
      v22 = v46;
    }
    else
    {
      if (!v47)
        goto LABEL_46;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_46:
    v24 = v45;
    if (v45 == v44)
    {
      v25 = 4;
      v24 = v44;
    }
    else
    {
      if (!v45)
      {
LABEL_51:
        if (v43 < 0)
          operator delete(v42);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
        sub_100023A94((void ***)&__str);
        return v18;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_51;
  }
  v17 = SALogObjectGeneral;
  v18 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,isIgneousReceived,not first unlocked\"}", buf, 0x12u);
    return 0;
  }
  return v18;
}

void sub_100022D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a15 < 0)
    operator delete(__p);
  sub_10002351C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

NSMutableDictionary *sub_100022E60(uint64_t a1)
{
  NSMutableDictionary *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = objc_opt_new(NSMutableDictionary);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (_QWORD *)(v3 + 8);
  if (*(char *)(v3 + 31) < 0)
    v4 = (_QWORD *)*v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("alertID"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("wasActualAlertReceived"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, CFSTR("latencyRelativeToOrigin"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("latencyRelativeToOriginator"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 48)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, CFSTR("latencyRelativeToServer"));

  v10 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v10 + 64))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v10 + 56)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v11, CFSTR("latencyRelativeToActualAlertReceived"));

  }
  return v2;
}

void sub_100022FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100023004(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  _QWORD *v13;
  _BYTE v14[28];

  if (a2 && *(_QWORD *)(a4 + 24) && a3 <= 0x10000 && *(_QWORD *)(a5 + 24))
  {
    sub_10000E8A0(v14, a2);
    v9 = (void **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)v14;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)&v14[16];
    sub_100025608((_QWORD *)(a1 + 72), a4);
    sub_100025608((_QWORD *)(a1 + 104), a5);
    *(_QWORD *)(a1 + 144) = a3;
    return 1;
  }
  else
  {
    v11 = SALogObjectGeneral;
    v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v12)
    {
      v13 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v13 = (_QWORD *)*v13;
      *(_QWORD *)v14 = 68289283;
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = "";
      *(_WORD *)&v14[18] = 2081;
      *(_QWORD *)&v14[20] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,invalidArgs\", \"history\":%{private, location:escape_only}s}", v14, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void sub_10002316C(uint64_t a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (*(_BYTE *)(a1 + 184))
  {
    v1 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      v3 = 2082;
      v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,onFirstUnlock,skip\"}", (uint8_t *)v2, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 184) = 1;
    if (*(_BYTE *)(a1 + 1))
      sub_100023D0C(a1);
  }
}

uint64_t sub_100023260(uint64_t a1, unsigned __int8 **a2, _QWORD *a3, std::string *a4)
{
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t buf;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _QWORD *v32;

  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v9 = (_QWORD *)*v9;
    buf = 68289283;
    v29 = 2082;
    v30 = "";
    v31 = 2081;
    v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,isFoundInternal\", \"debugName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  v26[0] = off_1000F1F08;
  v26[1] = a1;
  v27 = v26;
  v24[0] = off_1000F1F88;
  v24[1] = a1;
  v25 = v24;
  sub_10001177C((uint64_t)&buf, (uint64_t)v26, (uint64_t)v24);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  v15 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  if (v15 != v14)
  {
    v16 = *((char *)a2 + 23);
    if (v16 >= 0)
      v17 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v17 = a2[1];
    do
    {
      v18 = *(unsigned __int8 *)(v15 + 31);
      if ((v18 & 0x80u) == 0)
        v19 = (unsigned __int8 *)*(unsigned __int8 *)(v15 + 31);
      else
        v19 = *(unsigned __int8 **)(v15 + 16);
      if (v19 == v17)
      {
        if (v16 >= 0)
          v20 = (unsigned __int8 *)a2;
        else
          v20 = *a2;
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v15 + 8), v20, *(_QWORD *)(v15 + 16)))
          {
LABEL_35:
            *a3 = *(_QWORD *)v15;
            std::string::operator=(a4, (const std::string *)(v15 + 32));
            v22 = 1;
            goto LABEL_36;
          }
        }
        else
        {
          if (!*(_BYTE *)(v15 + 31))
            goto LABEL_35;
          v21 = 0;
          while (*(unsigned __int8 *)(v15 + v21 + 8) == v20[v21])
          {
            if (v18 == ++v21)
              goto LABEL_35;
          }
        }
      }
      v15 += 56;
    }
    while (v15 != v14);
  }
  v22 = 0;
LABEL_36:
  sub_100012184(&buf);
  return v22;
}

void sub_1000234A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100012184((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002351C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v2 = *(_QWORD **)(a1 + 128);
  if (v2 == (_QWORD *)(a1 + 104))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  v4 = *(_QWORD **)(a1 + 96);
  if (v4 == (_QWORD *)(a1 + 72))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v7 = (void **)(a1 + 24);
  sub_100023A94(&v7);
  return a1;
}

_QWORD *sub_1000235D4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t buf;
  __int16 v11;
  const char *v12;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,onFirstUnlock\"}", (uint8_t *)&buf, 0x12u);
  }
  *(_BYTE *)(a1 + 40) = 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(double *)a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100023788;
  v7[3] = &unk_1000F1EB8;
  v7[4] = a1;
  v8[0] = off_1000F0E88;
  v8[1] = objc_retainBlock(v7);
  v9 = v8;
  (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v3 + 16))(v3, v8, v4);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_100023744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == &a15)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100023788(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  void *v8[2];
  uint64_t v9;
  std::string __p;
  double v11;
  uint8_t buf[8];
  __int128 v13;
  void *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v13) = 2082;
    *(_QWORD *)((char *)&v13 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fum,processPendingMetrics\"}", buf, 0x12u);
  }
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (v3 != v4)
  {
    while (1)
    {
      v11 = -1.0;
      memset(&__p, 0, sizeof(__p));
      if (*(char *)(v3 + 31) < 0)
      {
        sub_100004870(v8, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v3 + 8);
        v9 = *(_QWORD *)(v3 + 24);
        *(_OWORD *)v8 = v5;
      }
      v6 = sub_100022980(v1, (char *)v8, &v11, &__p);
      *(_BYTE *)(v3 + 32) = v6;
      if (SHIBYTE(v9) < 0)
        break;
      if (v6)
        goto LABEL_9;
LABEL_10:
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&v13 = 3221225472;
      *((_QWORD *)&v13 + 1) = sub_100022E60;
      v14 = &unk_1000F1ED8;
      v15 = v3;
      AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.onFollowUpAlertReceived"), buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v3 += 72;
      if (v3 == v4)
        goto LABEL_16;
    }
    operator delete(v8[0]);
    if (!*(_BYTE *)(v3 + 32))
      goto LABEL_10;
LABEL_9:
    *(double *)(v3 + 56) = *(double *)v3 - v11;
    *(_BYTE *)(v3 + 64) = 1;
    goto LABEL_10;
  }
LABEL_16:
  sub_1000239E8((uint64_t *)(v1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32));
}

void sub_100023974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1000239A8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1000239E8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1000239E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 41) < 0)
      operator delete(*(void **)(i - 64));
  }
  a1[1] = v2;
}

uint64_t sub_100023A34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 41) < 0)
      {
        operator delete(*(void **)(v2 - 64));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100023A94(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_100023B04(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100023B04(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_100023B48(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100023B8C()
{
  operator delete();
}

_QWORD *sub_100023BA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1F08;
  result[1] = v3;
  return result;
}

uint64_t sub_100023BD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1F08;
  a2[1] = v2;
  return result;
}

void sub_100023BF0(uint64_t a1)
{
  sub_100023C40(a1 + 8);
}

uint64_t sub_100023BF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100023C34()
{
}

void sub_100023C40(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 1))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100023D0C((uint64_t)v1);
    *v1 = 1;
  }
}

void sub_100023D0C(uint64_t a1)
{
  NSObject *v2;
  const char **v3;
  _QWORD *v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char **v8;
  const char *v9;
  char v10;
  char v11;
  const std::__fs::filesystem::path *v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char **v17;
  __int16 v18;
  _QWORD *v19;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v3 = (const char **)*v3;
    v4 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v3;
    v18 = 2081;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,load\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    v8 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v8 = (const char **)*v8;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v8;
    v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,deferLoadingTillFirstUnlock\", \"filePath\":%{private, loc"
         "ation:escape_only}s}";
    goto LABEL_28;
  }
  v5 = (const char **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    v6 = *v5;
  }
  else
  {
    v6 = (const char *)(a1 + 48);
    if (!*(_BYTE *)(a1 + 71))
      return;
  }
  sub_10000E8A0(buf, "0002");
  v10 = sub_10008167C(v6, (uint64_t)buf);
  v11 = v10;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v11 & 1) != 0)
LABEL_19:
      operator new[]();
  }
  else if ((v10 & 1) != 0)
  {
    goto LABEL_19;
  }
  v12 = (const std::__fs::filesystem::path *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v12 = (const std::__fs::filesystem::path *)*v5;
  if (sub_100081088(v12))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0)
        v5 = (const char **)*v5;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v5;
      v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,unabletToRemoveFile\", \"filePath\":%{private, location:escape_only}s}";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
    }
  }
}

void sub_100024324(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  sub_10008161C((uint64_t)&a44);
  operator delete[]();
}

void sub_100024474(uint64_t a1, double *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _QWORD *v25;

  if (*a2 >= 0.0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3)) >= *(_QWORD *)(a1 + 136))
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v9 = (_QWORD *)*v9;
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2081;
        v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,maxHistoryLenReached\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
        v7 = *(_QWORD *)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
      }
      sub_100024CAC((uint64_t)&v20, v7 + 56, v6, v7);
      v6 = v10;
      for (i = *(_QWORD *)(a1 + 32); i != v6; sub_100023B04(i))
        i -= 56;
      *(_QWORD *)(a1 + 32) = v6;
      *(_BYTE *)(a1 + 152) = 1;
      v7 = *(_QWORD *)(a1 + 24);
    }
    if (v6 != v7)
    {
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3);
      do
      {
        v13 = v12 >> 1;
        v14 = v6 - 56 * (v12 >> 1);
        v16 = *(double *)(v14 - 56);
        v15 = v14 - 56;
        v12 += ~(v12 >> 1);
        if (*a2 >= v16)
          v12 = v13;
        else
          v6 = v15;
      }
      while (v12);
    }
    sub_100024AE8((uint64_t *)(a1 + 24), v6, (unint64_t)a2);
    v17 = *(double *)(a1 + 8);
    v18 = *a2;
    if (v17 < 0.0 || v17 > v18)
      *(double *)(a1 + 8) = v18;
    if (*(double *)(a1 + 16) < v18)
      *(double *)(a1 + 16) = v18;
  }
  else
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v4 = (_QWORD *)*v4;
      v20 = 68289283;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,updateWithInvalidArgs\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&v20, 0x1Cu);
    }
  }
}

void sub_1000246F8(char *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  _WORD v11[6];
  _QWORD *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 48;
    if (a1[71] < 0)
      v3 = (_QWORD *)*v3;
    v4 = a1 + 160;
    if (a1[183] < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = v3;
    v19 = 2081;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,save\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (a1[184])
  {
    v5 = a1 + 48;
    if (a1[71] < 0)
      v5 = *(char **)v5;
    sub_10000E8A0(&__p, "0002");
    sub_100081C30((uint64_t)buf, v5, (uint64_t)&__p);
    if (SBYTE3(v12) < 0)
      operator delete(__p);
    if (v21)
      operator new[]();
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1 + 160;
      if (a1[183] < 0)
        v9 = (_QWORD *)*v9;
      __p = (void *)68289283;
      v11[0] = 2082;
      *(_QWORD *)&v11[1] = "";
      v11[5] = 2081;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,cannotOpenFileToSave\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100081FA4((uint64_t)buf);
  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1 + 160;
      if (a1[183] < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,deferSavingTillFirstUnlock\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    a1[185] = 1;
  }
}

void sub_100024A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  sub_100081FA4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

_QWORD *sub_100024AE8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (_QWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 > 0x492492492492492)
      sub_100004C50();
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x249249249249249)
      v15 = 0x492492492492492;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_1000251EC(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[56 * v8];
    v20 = v19;
    v21 = &v16[56 * v15];
    sub_100024DF0(&v18, a3);
    v4 = (_QWORD *)sub_100024F70(a1, &v18, (uint64_t)v4);
    sub_100025234((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_10002506C(a2, a3);
    a1[1] = (uint64_t)(v4 + 7);
  }
  else
  {
    sub_100024D5C((uint64_t)a1, a2, v6, a2 + 56);
    if ((unint64_t)v4 <= a3)
      a3 += 56 * (a1[1] > a3);
    *v4 = *(_QWORD *)a3;
    v12 = v7 + 56 * v8;
    std::string::operator=((std::string *)(v12 + 8), (const std::string *)(a3 + 8));
    std::string::operator=((std::string *)(v12 + 32), (const std::string *)(a3 + 32));
  }
  return v4;
}

void sub_100024C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100024CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v9 = (void **)(a4 + 32);
      if (*(char *)(a4 + 55) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v5 + 55) = 0;
      *(_BYTE *)(v5 + 32) = 0;
      a4 += 56;
      v5 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100024D5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v10 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v8 += 56;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_100025118((uint64_t)&v13, a2, v7, v6);
}

uint64_t sub_100024DF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0xDB6DB6DB6DB6DB6ELL * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v28 = a1[4];
      v13 = (char *)sub_1000251EC(v12, v10);
      v15 = &v13[56 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = &v15[v17];
        v19 = &v13[56 * v11];
        do
        {
          *(_QWORD *)v19 = *(_QWORD *)v16;
          v20 = *(_OWORD *)(v16 + 8);
          *((_QWORD *)v19 + 3) = *(_QWORD *)(v16 + 24);
          *(_OWORD *)(v19 + 8) = v20;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 8) = 0;
          v21 = *(_OWORD *)(v16 + 32);
          *((_QWORD *)v19 + 6) = *(_QWORD *)(v16 + 48);
          *((_OWORD *)v19 + 2) = v21;
          *(_QWORD *)(v16 + 40) = 0;
          *(_QWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v19 += 56;
          v16 += 56;
        }
        while (v19 != v18);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v16);
        v18 = &v13[56 * v11];
      }
      v25 = *a1;
      *a1 = v13;
      a1[1] = v15;
      v26 = v22;
      v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[56 * v14];
      v27 = v23;
      sub_100025234((uint64_t)&v25);
      v4 = a1[2];
    }
    else
    {
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -56 * (v7 >> 1);
      sub_100024CAC((uint64_t)&v25, v5, v4, v5 - 56 * (v7 >> 1));
      v4 = v9;
      a1[1] += v8;
      a1[2] = v9;
    }
  }
  result = sub_10002506C(v4, a2);
  a1[2] += 56;
  return result;
}

uint64_t sub_100024F70(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_QWORD *)(v7 - 56);
      v7 -= 56;
      *(_QWORD *)(v6 - 56) = v8;
      v6 -= 56;
      v9 = *(_OWORD *)(v7 + 8);
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 8) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v10 = *(_OWORD *)(v7 + 32);
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
      *(_OWORD *)(v6 + 32) = v10;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)a3;
      v13 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v14 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v12 + 32) = v14;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v12 += 56;
      a3 += 56;
    }
    while (a3 != v11);
    v6 = a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10002506C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100004870(v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_1000250FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100025118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;
  void **v12;
  uint64_t v13;
  __int128 v14;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_QWORD *)(a4 + v7 - 56) = *(_QWORD *)(a3 + v7 - 56);
      v10 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0)
        operator delete(*v10);
      v11 = *(_OWORD *)(v8 - 48);
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(v8 - 32);
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v8 - 25) = 0;
      *(_BYTE *)(v8 - 48) = 0;
      v12 = (void **)(v9 - 24);
      if (*(char *)(v9 - 1) < 0)
        operator delete(*v12);
      v13 = a3 + v7;
      v14 = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_OWORD *)v12 = v14;
      *(_BYTE *)(v13 - 1) = 0;
      *(_BYTE *)(v13 - 24) = 0;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void *sub_1000251EC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_100004984();
  return operator new(56 * a2);
}

uint64_t sub_100025234(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_100023B04(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100025280(uint64_t a1, __int128 *a2, __int128 *a3, double a4)
{
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(double *)a1 = a4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v6;
  }
  v7 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004870(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

void sub_100025308(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100025328()
{
  operator delete();
}

_QWORD *sub_10002533C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1F88;
  result[1] = v3;
  return result;
}

uint64_t sub_100025370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1F88;
  a2[1] = v2;
  return result;
}

void sub_10002538C(uint64_t a1)
{
  sub_1000253DC((uint64_t *)(a1 + 8));
}

uint64_t sub_100025394(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000253D0()
{
}

void sub_1000253DC(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *a1;
  if (!*(_BYTE *)(*a1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v3, 0x12u);
    }
    sub_1000254A8(v1);
  }
}

void sub_1000254A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v8;

  *(_BYTE *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_BYTE *)(a1 + 152) = 0;
  v8 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32); i != v8; sub_100023B04(i))
    i -= 56;
  *(_QWORD *)(a1 + 32) = v8;
}

uint64_t sub_1000254FC(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_1000ADFD0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 160), "Unknown");
  *(_WORD *)(a1 + 184) = 0;
  return a1;
}

void sub_100025580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v2 + 128);
  if (v5 == (_QWORD *)(v2 + 104))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 96);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v3 = *(_QWORD **)(v2 + 96);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_11:
  if (*(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  sub_100023A94((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100025608(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100004F4C((uint64_t)v6, a2);
  sub_1000256A0(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1000256A0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100025808(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100025818()
{
  operator delete();
}

_QWORD *sub_10002582C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2008;
  return result;
}

void sub_100025850(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2008;
}

uint64_t sub_100025868(int a1, uint64_t a2, std::string *this)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_100004870(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1000258D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000258F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100025930()
{
}

void sub_10002593C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  _QWORD v10[4];
  _QWORD v11[4];

  v9 = a2;
  *a1 = v9;
  sub_100004F4C((uint64_t)(a1 + 1), a3);
  sub_100004F4C((uint64_t)(a1 + 5), a6);
  v11[0] = off_1000F20D8;
  v11[1] = a1;
  v11[3] = v11;
  v10[0] = off_1000F2158;
  v10[1] = &stru_1000F20A8;
  v10[3] = v10;
  SACloudChannel::create(v9);
}

void sub_100025E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, _QWORD *a10, _QWORD *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v50 = *(_QWORD **)(v48 - 152);
  if (v50 == (_QWORD *)(v48 - 176))
  {
    v51 = 4;
    v50 = (_QWORD *)(v48 - 176);
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_6:
  std::__shared_weak_count::~__shared_weak_count(v47);
  operator delete(v52);
  v53 = a25;
  if (a25 == &a22)
  {
    v54 = 4;
    v53 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_11:
  if (a17 < 0)
    operator delete(__p);
  v55 = *(_QWORD **)(v41 + 448);
  if (v55 == a10)
  {
    v56 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_18;
    v56 = 5;
    a10 = *(_QWORD **)(v41 + 448);
  }
  (*(void (**)(void))(*a10 + 8 * v56))();
LABEL_18:
  sub_10003E308(v45);
  sub_100027E48(v44, *(char **)(v41 + 112));
  if (*(char *)(v41 + 103) < 0)
    operator delete(*v46);
  v57 = *a9;
  *a9 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD **)(v41 + 64);
  if (v58 == a11)
  {
    v59 = 4;
    v58 = a11;
  }
  else
  {
    if (!v58)
      goto LABEL_27;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_27:
  v60 = *(_QWORD **)(v41 + 32);
  if (v60 == v43)
  {
    v61 = 4;
    v60 = v43;
  }
  else
  {
    if (!v60)
      goto LABEL_32;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_32:

  _Unwind_Resume(a1);
}

void sub_100026184(NSObject **a1)
{
  dispatch_time_t v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 30000000000);
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100027094;
  block[3] = &unk_1000F1EB8;
  block[4] = a1;
  dispatch_after(v2, v3, block);
}

uint64_t sub_1000261F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = (_QWORD *)(a1 + 552);
  v3 = *(_QWORD **)(a1 + 576);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_100027E48(a1 + 528, *(char **)(a1 + 536));
  sub_10006E188(a1 + 472);
  sub_100028C54(a1 + 456);
  v5 = *(_QWORD **)(a1 + 448);
  if (v5 == (_QWORD *)(a1 + 424))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 424);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  sub_10003E308(a1 + 128);
  sub_100027E48(a1 + 104, *(char **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD **)(a1 + 64);
  if (v8 == (_QWORD *)(a1 + 40))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  v10 = *(_QWORD **)(a1 + 32);
  if (v10 == (_QWORD *)(a1 + 8))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 8);
    goto LABEL_24;
  }
  if (v10)
  {
    v11 = 5;
LABEL_24:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

void sub_100026338(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onParticipationChange\", \"isParticipating\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  sub_10003E410(a1 + 128, a2);
}

void sub_100026410(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3, double a4, double a5)
{
  NSObject *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  CLLocationDegrees v15;
  __int16 v16;
  CLLocationDegrees v17;
  __int16 v18;
  double v19;

  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289795;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2049;
    v15 = a2;
    v16 = 2049;
    v17 = a3;
    v18 = 2049;
    v19 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onLocationChanged\", \"lat\":\"%{private}0.6f\", \"lon\":\"%{private}0.6f\", \"unc\":\"%{private}0.2f\"}", (uint8_t *)v11, 0x30u);
  }
  sub_10003F628(a1 + 128, a2, a3, a4, a5);
}

void sub_100026538(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onLocationAuthorized\", \"isAuthorized\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
  sub_10003FF74(a1 + 128, a2);
}

void sub_100026614(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onInexpensiveNetworkConnected\", \"isConnected\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  sub_100040080(a1 + 128, a2);
}

__int128 *sub_1000266EC(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onCellNetworkConnected\", \"isConnected\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  return sub_100040140(a1 + 128, a2);
}

uint64_t sub_1000267C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  void **v24;
  void **v25;
  uint64_t result;
  uint64_t v27;
  void **v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned int *)(a1 + 16);
    v10 = *(unsigned int *)(a2 + 16);
    *(_DWORD *)buf = 68289538;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 2050;
    v43 = v9;
    v44 = 2050;
    v45 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,isChannelListSame\", \"channelSet1.size()\":%{public}lu, \"channelSet2.size()\":%{public}lu}", buf, 0x26u);
  }
  v11 = *(_QWORD *)a1;
  v12 = *(void ***)a2;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    if (v11 == a1 + 8)
      return 1;
    v13 = *(void ***)a2;
    v14 = *(_QWORD **)a1;
    while (1)
    {
      v15 = *((unsigned __int8 *)v14 + 55);
      if ((v15 & 0x80u) == 0)
        v16 = (void *)*((unsigned __int8 *)v14 + 55);
      else
        v16 = (void *)v14[5];
      v17 = (void *)*((unsigned __int8 *)v13 + 55);
      v18 = (char)v17;
      if ((char)v17 < 0)
        v17 = v13[5];
      if (v16 != v17)
        break;
      v19 = (const void **)(v14 + 4);
      if (v18 >= 0)
        v20 = (unsigned __int8 *)(v13 + 4);
      else
        v20 = (unsigned __int8 *)v13[4];
      if ((v15 & 0x80) != 0)
      {
        if (memcmp(*v19, v20, v14[5]))
          break;
      }
      else if (*((_BYTE *)v14 + 55))
      {
        while (*(unsigned __int8 *)v19 == *v20)
        {
          v19 = (const void **)((char *)v19 + 1);
          ++v20;
          if (!--v15)
            goto LABEL_21;
        }
        break;
      }
LABEL_21:
      if (*((_DWORD *)v14 + 14) != *((_DWORD *)v13 + 14))
        break;
      v21 = (_QWORD *)v14[1];
      v22 = v14;
      if (v21)
      {
        do
        {
          v14 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v22[2];
          v23 = *v14 == (_QWORD)v22;
          v22 = v14;
        }
        while (!v23);
      }
      v24 = (void **)v13[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (void **)v13[2];
          v23 = *v25 == v13;
          v13 = v25;
        }
        while (!v23);
      }
      v13 = v25;
      if (v14 == (_QWORD *)(a1 + 8))
        return 1;
    }
  }
  v36 = a1 + 8;
  v37 = v11;
  v34 = (void **)(a2 + 8);
  v35 = v12;
  *(_QWORD *)&v33 = a4;
  *((_QWORD *)&v33 + 1) = a4 + 8;
  sub_1000275E8((uint64_t)buf, &v37, &v36, &v35, &v34, &v33);
  v27 = *(_QWORD *)a2;
  v28 = *(void ***)a1;
  v36 = a2 + 8;
  v37 = v27;
  v34 = (void **)(a1 + 8);
  v35 = v28;
  *(_QWORD *)&v33 = a3;
  *((_QWORD *)&v33 + 1) = a3 + 8;
  sub_1000275E8((uint64_t)buf, &v37, &v36, &v35, &v34, &v33);
  v29 = SALogObjectGeneral;
  v30 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v30)
  {
    v31 = *(unsigned int *)(a3 + 16);
    v32 = *(unsigned int *)(a4 + 16);
    *(_DWORD *)buf = 68289538;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 2050;
    v43 = v31;
    v44 = 2050;
    v45 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,isChannelListSame\", \"addList\":%{public}llu, \"removeList\":%{public}llu}", buf, 0x26u);
    return 0;
  }
  return result;
}

void sub_100026AE8(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  NSObject *v9;
  void **v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *__p[2];
  uint64_t v16;
  int v17;
  _BYTE buf[28];
  __int16 v19;
  int v20;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,removeChannel\"}", buf, 0x12u);
  }
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_100004870(__p, (void *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v6 + 2);
        v16 = v6[6];
      }
      v8 = *((_DWORD *)v6 + 14);
      v17 = v8;
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v10 = __p;
        if (v16 < 0)
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v10;
        v19 = 1025;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,removeChannel\", \"channelId\":%{private, location:escape_only}s, \"channelType\":%{private}d}", buf, 0x22u);
        v8 = v17;
      }
      if (SHIBYTE(v16) < 0)
      {
        sub_100004870(buf, __p[0], (unint64_t)__p[1]);
        v11 = v17;
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)__p;
        *(_QWORD *)&buf[16] = v16;
        v11 = v8;
      }
      *(_DWORD *)&buf[24] = v11;
      if ((v8 & 0xFFFFFFFD) == 0)
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v5);
  }
}

void sub_100026D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_100026D80(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  NSObject *v9;
  void **v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *__p[2];
  uint64_t v16;
  int v17;
  _BYTE buf[28];
  __int16 v19;
  int v20;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,addChannel\"}", buf, 0x12u);
  }
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_100004870(__p, (void *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v6 + 2);
        v16 = v6[6];
      }
      v8 = *((_DWORD *)v6 + 14);
      v17 = v8;
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v10 = __p;
        if (v16 < 0)
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v10;
        v19 = 1025;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,addChannel\", \"channelId\":%{private, location:escape_only}s, \"channelType\":%{private}d}", buf, 0x22u);
        v8 = v17;
      }
      if (SHIBYTE(v16) < 0)
      {
        sub_100004870(buf, __p[0], (unint64_t)__p[1]);
        v11 = v17;
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)__p;
        *(_QWORD *)&buf[16] = v16;
        v11 = v8;
      }
      *(_DWORD *)&buf[24] = v11;
      if ((v8 & 0xFFFFFFFD) == 0)
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v5);
  }
}

void sub_100026FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100027018(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5[2];
  int v6;
  uint64_t v7[2];
  uint64_t v8;

  sub_100027D70(v7, a1 + 208);
  v2 = v8;
  sub_100027D70(v5, a1 + 256);
  v3 = (v6 + v2);
  sub_100027E48((uint64_t)v5, (char *)v5[1]);
  sub_100027E48((uint64_t)v7, (char *)v7[1]);
  return v3;
}

void sub_10002707C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_100027E48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_100027094(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000270FC;
  v3[3] = &unk_1000F1EB8;
  v3[4] = v1;
  sub_1000270FC((uint64_t)v3);
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000270FC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 80);
    if (*(char *)(v1 + 103) < 0)
      v3 = (_QWORD *)*v3;
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,states\", \"fLocalAreaChannel\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  sub_1000402E0(v1 + 128);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 56))(*(_QWORD *)(v1 + 72));
  return sub_100026184(v1);
}

void sub_1000271EC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v4 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_1000273E4(&v34);
  v7 = v35;
  if (v35)
  {
    v8 = (unint64_t *)&v35->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v32 = *a2;
    v33 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 88))(v10, &v32);
    v14 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = a1 + 128;
  v18 = (std::__shared_weak_count *)a2[1];
  v31[0] = *a2;
  v31[1] = (uint64_t)v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_100041154(v17, v31);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = (std::__shared_weak_count *)a2[1];
  v29 = *a2;
  v30 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_1000273E4(&v29);
  v26 = v30;
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1000273AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100028C54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000273E4(_QWORD *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  uint64_t v11;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)*a1;
    if (*(char *)(*a1 + 23) < 0)
      v3 = (_QWORD *)*v3;
    v4 = a1[1];
    if (v4)
      v4 = *(_QWORD *)(v4 + 8) + 1;
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v3;
    v10 = 2050;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sharedobj,status\", \"id\":%{private, location:escape_only}s, \"users\":%{public}lld}", (uint8_t *)v5, 0x26u);
  }
}

void sub_1000274D0(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onEnhancedDeliveryEnabled,\", \"isEnabled,\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  sub_1000411E8(a1 + 128, a2);
}

uint64_t sub_1000275A8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1000275E8(uint64_t result, uint64_t *a2, _QWORD *a3, void ***a4, void ***a5, __int128 *a6)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **i;
  char v15;
  int v16;
  int v17;
  void **v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  void **v26;
  void **v27;
  void **v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;
  void **v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;

  v7 = result;
  v8 = (_QWORD *)*a2;
  v9 = (_QWORD *)*a3;
  if (*a2 == *a3)
  {
LABEL_48:
    v34 = *a6;
    v9 = v8;
    goto LABEL_49;
  }
  for (i = *a4; *a4 != *a5; i = *a4)
  {
    if (((v15 = sub_10002789C(v8 + 4, i + 4)) != 0
       || ((v16 = *((_DWORD *)v8 + 14), v17 = *((_DWORD *)i + 14), v16 < v17) ? (v15 = -1) : (v15 = 1), v16 != v17))
      && v15 < 0)
    {
      result = sub_100027834((uint64_t)a6, *a2 + 32);
      v29 = (_QWORD *)*a2;
      v30 = *(_QWORD **)(*a2 + 8);
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v29[2];
          v25 = *v31 == (_QWORD)v29;
          v29 = v31;
        }
        while (!v25);
      }
      *a2 = (uint64_t)v31;
    }
    else
    {
      if (((v18 = *a4, v19 = *a2, result = sub_10002789C(*a4 + 4, (void **)(*a2 + 32)), (_BYTE)result)
         || ((v20 = *((_DWORD *)v18 + 14), v21 = *(_DWORD *)(v19 + 56), v20 < v21)
           ? (result = 0xFFFFFFFFLL)
           : (result = 1),
             v20 != v21))
        && (result & 0x80) != 0)
      {
        v32 = *a4;
        v33 = (void **)(*a4)[1];
        if (v33)
        {
          do
          {
            v28 = v33;
            v33 = (void **)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v28 = (void **)v32[2];
            v25 = *v28 == v32;
            v32 = v28;
          }
          while (!v25);
        }
      }
      else
      {
        v22 = (_QWORD *)*a2;
        v23 = *(_QWORD **)(*a2 + 8);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v22[2];
            v25 = *v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v25);
        }
        *a2 = (uint64_t)v24;
        v26 = *a4;
        v27 = (void **)(*a4)[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (void **)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (void **)v26[2];
            v25 = *v28 == v26;
            v26 = v28;
          }
          while (!v25);
        }
      }
      *a4 = v28;
    }
    v8 = (_QWORD *)*a2;
    v9 = (_QWORD *)*a3;
    if (*a2 == *a3)
      goto LABEL_48;
  }
  v34 = *a6;
  v37 = *a6;
  if (v8 != v9)
  {
    do
    {
      result = sub_100027834((uint64_t)&v37, (uint64_t)(v8 + 4));
      v35 = (_QWORD *)v8[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v8[2];
          v25 = *v36 == (_QWORD)v8;
          v8 = v36;
        }
        while (!v25);
      }
      v8 = v36;
    }
    while (v36 != v9);
    v34 = v37;
  }
LABEL_49:
  *(_QWORD *)v7 = v9;
  *(_OWORD *)(v7 + 8) = v34;
  return result;
}

uint64_t sub_100027834(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = sub_100027930(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_10002789C(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_1000278D4(a1, v2, v5, v6);
}

uint64_t sub_1000278D4(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *sub_100027930(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)sub_1000279B0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100027BB4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000162D4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1000279B0(_QWORD *a1, uint64_t *a2, void ***a3, uint64_t *a4, uint64_t a5)
{
  void **v9;
  char v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t *v22;
  BOOL v23;
  char v24;
  int v25;
  int v26;
  void **v28;
  char v29;
  int v30;
  int v31;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == a2
    || ((v11 = sub_10002789C((_QWORD *)a5, (void **)a2 + 4)) != 0
     || ((v12 = *(_DWORD *)(a5 + 24), v13 = *((_DWORD *)a2 + 14), v12 < v13) ? (v11 = -1) : (v11 = 1), v12 != v13))
    && v11 < 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v18 = a2;
    }
    else
    {
      v17 = (uint64_t *)*a2;
      if (*a2)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)v17[1];
        }
        while (v17);
      }
      else
      {
        v22 = a2;
        do
        {
          v18 = (uint64_t *)v22[2];
          v23 = *v18 == (_QWORD)v22;
          v22 = v18;
        }
        while (v23);
      }
      v24 = sub_10002789C(v18 + 4, (void **)a5);
      if (!v24)
      {
        v25 = *((_DWORD *)v18 + 14);
        v26 = *(_DWORD *)(a5 + 24);
        v24 = v25 < v26 ? -1 : 1;
        if (v25 == v26)
          return sub_100027C58((uint64_t)a1, a3, a5);
      }
      if ((v24 & 0x80) == 0)
        return sub_100027C58((uint64_t)a1, a3, a5);
    }
    if (*a2)
    {
      *a3 = (void **)v18;
      return v18 + 1;
    }
    else
    {
      *a3 = (void **)a2;
      return a2;
    }
  }
  v14 = sub_10002789C(a2 + 4, (void **)a5);
  if (v14 || ((v15 = *((_DWORD *)a2 + 14), v16 = *(_DWORD *)(a5 + 24), v15 < v16) ? (v14 = -1) : (v14 = 1), v15 != v16))
  {
    if (v14 < 0)
    {
      a4 = a2 + 1;
      v19 = a2[1];
      if (v19)
      {
        v20 = (void **)a2[1];
        do
        {
          v21 = v20;
          v20 = (void **)*v20;
        }
        while (v20);
      }
      else
      {
        v28 = (void **)a2;
        do
        {
          v21 = (void **)v28[2];
          v23 = *v21 == v28;
          v28 = v21;
        }
        while (!v23);
      }
      if (v21 == v9)
        goto LABEL_47;
      v29 = sub_10002789C((_QWORD *)a5, v21 + 4);
      if (v29
        || ((v30 = *(_DWORD *)(a5 + 24), v31 = *((_DWORD *)v21 + 14), v30 < v31) ? (v29 = -1) : (v29 = 1), v30 != v31))
      {
        if (v29 < 0)
        {
          v19 = *a4;
LABEL_47:
          if (v19)
          {
            *a3 = v21;
            return (uint64_t *)v21;
          }
          else
          {
            *a3 = (void **)a2;
          }
          return a4;
        }
      }
      return sub_100027C58((uint64_t)a1, a3, a5);
    }
  }
  *a3 = (void **)a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_BYTE *sub_100027BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100004870(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100027C3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100027D24(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100027C58(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  _QWORD *v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        v9 = sub_10002789C((_QWORD *)a3, (void **)v4 + 4);
        if (!v9)
        {
          v10 = *(_DWORD *)(a3 + 24);
          v11 = *((_DWORD *)v7 + 14);
          v9 = v10 < v11 ? -1 : 1;
          if (v10 == v11)
            break;
        }
        if ((v9 & 0x80) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_19;
      }
      v12 = sub_10002789C(v8, (void **)a3);
      if (!v12)
      {
        v13 = *((_DWORD *)v7 + 14);
        v14 = *(_DWORD *)(a3 + 24);
        v12 = v13 < v14 ? -1 : 1;
        if (v13 == v14)
          break;
      }
      if ((v12 & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_19:
  *a2 = v7;
  return v5;
}

void sub_100027D24(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_100027D70(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100027DC4(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100027DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100027E48(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100027DC4(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100027930(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100027E48(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100027E48(a1, *(_QWORD *)a2);
    sub_100027E48(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_100027E9C()
{
  operator delete();
}

_QWORD *sub_100027EB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F20D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100027EE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F20D8;
  a2[1] = v2;
  return result;
}

void sub_100027F00(uint64_t a1, void **a2, void **a3)
{
  sub_100027F5C(*(_QWORD *)(a1 + 8) + 8, *a2, *a3);
}

uint64_t sub_100027F14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100027F50()
{
}

void sub_100027F5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v6 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *, id *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6);

}

void sub_100027FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100027FE4(uint64_t a1)
{

  return a1;
}

void sub_10002800C(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100028044()
{
  return 0;
}

id sub_10002804C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F2158;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100028080(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100028090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_1000280A0(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F21B8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000280DC()
{
  return &off_1000F21B8;
}

void sub_1000280EC()
{
  operator delete();
}

_QWORD *sub_100028100(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F21D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100028134(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F21D8;
  a2[1] = v2;
  return result;
}

void sub_100028150(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  char **v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t buf;
  _BYTE v29[12];
  int v30;
  __int16 v31;
  int v32;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    *(_WORD *)v29 = 2082;
    *(_QWORD *)&v29[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged\"}", (uint8_t *)&buf, 0x12u);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v25 = 0;
    v26 = 0;
    v23 = 0;
    v24 = &v25;
    v21 = &v22;
    v22 = 0;
    if (sub_1000267C4(v5 + 104, a2, (uint64_t)&v24, (uint64_t)&v21))
    {
      v7 = sub_100027018(v5);
      sub_100027D70(&buf, v5 + 232);
      v8 = *(_DWORD *)&v29[8];
      sub_100027E48((uint64_t)&buf, *(char **)v29);
      v9 = *(_QWORD *)(v5 + 448);
      v27 = v8;
      LODWORD(buf) = v7;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v9 + 48))(v9, &buf, &v27);
        v10 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          buf = 68289026;
          *(_WORD *)v29 = 2082;
          *(_QWORD *)&v29[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged,SameAsBefore,DoNothing\"}", (uint8_t *)&buf, 0x12u);
        }
        goto LABEL_28;
      }
    }
    else
    {
      v15 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(unsigned __int8 *)(v5 + 520);
        buf = 68289538;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 1026;
        v30 = v16;
        v31 = 1026;
        v32 = v4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged\", \"fIsFirstRunAfterBoot\":%{public}hhd, \"forceOrDeferChannelUpdate\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
      }
      if (!v4 && !*(_BYTE *)(v5 + 520))
      {
        if (v5 + 528 != a2)
          sub_100028FC4((uint64_t **)(v5 + 528), *(_QWORD **)a2, (_QWORD *)(a2 + 8));
        sub_10006E220(v5 + 472);
        goto LABEL_28;
      }
      *(_BYTE *)(v5 + 520) = 0;
      sub_10006E828(v5 + 472);
      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged,ReplaceActiveChannel\"}", (uint8_t *)&buf, 0x12u);
      }
      sub_100027E48(v5 + 104, *(char **)(v5 + 112));
      *(_QWORD *)(v5 + 104) = v5 + 112;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)(v5 + 120) = 0;
      if (v5 + 104 != a2)
        sub_100028FC4((uint64_t **)(v5 + 104), *(_QWORD **)a2, (_QWORD *)(a2 + 8));
      if (v23)
        sub_100026AE8(v5, &v21);
      if (v26)
        sub_100026D80(v5, &v24);
      v18 = sub_100027018(v5);
      sub_100027D70(&buf, v5 + 232);
      v19 = *(_DWORD *)&v29[8];
      sub_100027E48((uint64_t)&buf, *(char **)v29);
      v20 = *(_QWORD *)(v5 + 448);
      v27 = v19;
      LODWORD(buf) = v18;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v20 + 48))(v20, &buf, &v27);
LABEL_28:
        sub_100027E48((uint64_t)&v21, v22);
        sub_100027E48((uint64_t)&v24, v25);
        return;
      }
    }
    sub_100004FB0();
  }
  v11 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    *(_WORD *)v29 = 2082;
    *(_QWORD *)&v29[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged,ChannelIsEmpty,ClearAll\"}", (uint8_t *)&buf, 0x12u);
    v11 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    *(_WORD *)v29 = 2082;
    *(_QWORD *)&v29[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,clearAllChannels\"}", (uint8_t *)&buf, 0x12u);
  }
  sub_100026AE8(v5, (_QWORD *)(v5 + 104));
  sub_100027E48(v5 + 104, *(char **)(v5 + 112));
  *(_QWORD *)(v5 + 104) = v5 + 112;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v12 = sub_100027018(v5);
  sub_100027D70(&buf, v5 + 232);
  v13 = *(_DWORD *)&v29[8];
  sub_100027E48((uint64_t)&buf, *(char **)v29);
  v14 = *(_QWORD *)(v5 + 448);
  LODWORD(buf) = v12;
  LODWORD(v24) = v13;
  if (!v14)
    sub_100004FB0();
  (*(void (**)(uint64_t, uint64_t *, char ***))(*(_QWORD *)v14 + 48))(v14, &buf, &v24);
}

void sub_100028600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002862C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100028668()
{
}

void sub_100028678()
{
  operator delete();
}

_QWORD *sub_10002868C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2268;
  result[1] = v3;
  return result;
}

uint64_t sub_1000286C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2268;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000286DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t *v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 68289026;
    LOWORD(v9[0]) = 2082;
    *(_QWORD *)((char *)v9 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onInitComplete\"}", (uint8_t *)&v8, 0x12u);
  }
  v3 = *(_QWORD *)(v1 + 72);
  v8 = (uint64_t)off_1000F24B8;
  v9[0] = v1;
  v10 = &v8;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 72))(v3, &v8);
  v4 = v10;
  if (v10 == &v8)
  {
    v5 = 4;
    v4 = &v8;
  }
  else
  {
    if (!v10)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = *(_QWORD *)(v1 + 64);
  if (!v6)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1000287F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100028834(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100028870()
{
}

void sub_100028880()
{
  operator delete();
}

_QWORD *sub_100028894(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F22E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000288C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F22E8;
  a2[1] = v2;
  return result;
}

void sub_1000288E4(uint64_t a1, int *a2, int *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = v3;
    v12 = 1026;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onBLERelayStateUpdateCB,\", \"isIgenousCapable,\":%{public}d, \"isIgenousEnabled,\":%{public}d}", (uint8_t *)v7, 0x1Eu);
  }
  if (*(_QWORD *)(v5 + 576))
    sub_1000275A8(v5 + 552, v3, v4);
}

uint64_t sub_1000289D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100028A14()
{
}

void sub_100028A20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100028A30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100028A60(uint64_t a1)
{
  void **v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;

  v2 = (void **)(a1 + 24);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4 = v2;
    if (*(char *)(a1 + 47) < 0)
      v4 = *v2;
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sharedobj,release\", \"id\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    sub_100004FB0();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);

  v6 = *(_QWORD **)(a1 + 72);
  if (v6 == (_QWORD *)(a1 + 48))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
}

void sub_100028BA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100028BB8()
{
  operator delete();
}

_QWORD *sub_100028BCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F23B8;
  return result;
}

void sub_100028BF0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F23B8;
}

uint64_t sub_100028C0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100028C48()
{
}

uint64_t sub_100028C54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_100028CB0()
{
  operator delete();
}

_QWORD *sub_100028CC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2438;
  result[1] = v3;
  return result;
}

uint64_t sub_100028CF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2438;
  a2[1] = v2;
  return result;
}

void sub_100028D14(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t buf;
  _BYTE v15[12];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelSelectXPCActivityShceduled\"}", (uint8_t *)&buf, 0x12u);
  }
  sub_10006E828(v1 + 472);
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = &v11;
  v7 = &v8;
  v8 = 0;
  if (sub_1000267C4(v1 + 104, v1 + 528, (uint64_t)&v10, (uint64_t)&v7))
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chmgr,onChannelChanged,SameAsBefore,DoNothing\"}", (uint8_t *)&buf, 0x12u);
    }
  }
  else
  {
    sub_100027E48(v1 + 104, *(char **)(v1 + 112));
    *(_QWORD *)(v1 + 104) = v1 + 112;
    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    sub_100028FC4((uint64_t **)(v1 + 104), *(_QWORD **)(v1 + 528), (_QWORD *)(v1 + 536));
    sub_100027E48(v1 + 528, *(char **)(v1 + 536));
    *(_QWORD *)(v1 + 528) = v1 + 536;
    *(_OWORD *)(v1 + 536) = 0u;
    if (v9)
      sub_100026AE8(v1, &v7);
    if (v12)
      sub_100026D80(v1, &v10);
    v4 = sub_100027018(v1);
    sub_100027D70(&buf, v1 + 232);
    v5 = *(_DWORD *)&v15[8];
    sub_100027E48((uint64_t)&buf, *(char **)v15);
    v6 = *(_QWORD *)(v1 + 448);
    v13 = v5;
    LODWORD(buf) = v4;
    if (!v6)
      sub_100004FB0();
    (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v6 + 48))(v6, &buf, &v13);
  }
  sub_100027E48((uint64_t)&v7, v8);
  sub_100027E48((uint64_t)&v10, v11);
}

void sub_100028F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100028F7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100028FB8()
{
}

uint64_t **sub_100028FC4(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  void **v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = sub_1000291E0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          v10 = sub_10002914C((uint64_t)v5, &v18, (uint64_t)(v17 + 4));
          sub_1000162D4(v5, (uint64_t)v18, (uint64_t **)v10, v17);
          v17 = v16;
          if (v16)
            v16 = sub_1000291E0((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_100029234((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100029288(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100029138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100029234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_10002914C(uint64_t a1, void ***a2, uint64_t a3)
{
  void **v4;
  void **v5;
  char v7;
  int v8;
  int v9;
  void **result;

  v5 = (void **)(a1 + 8);
  v4 = *(void ***)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        v7 = sub_10002789C((_QWORD *)a3, v4 + 4);
        if (!v7)
        {
          v8 = *(_DWORD *)(a3 + 24);
          v9 = *((_DWORD *)v5 + 14);
          v7 = v8 < v9 ? -1 : 1;
          if (v8 == v9)
            break;
        }
        if ((v7 & 0x80) == 0)
          break;
        v4 = (void **)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_13;
      }
      v4 = (void **)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (void **)(a1 + 8);
  }
LABEL_13:
  *a2 = v5;
  return result;
}

_QWORD *sub_1000291E0(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_100029234(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100027E48(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_100027E48(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *sub_100029288(uint64_t **a1, uint64_t a2)
{
  void **v3;
  void **v5;
  uint64_t *v6;

  sub_100027BB4((uint64_t)a1, a2, (uint64_t)&v6);
  v3 = sub_10002914C((uint64_t)a1, &v5, (uint64_t)(v6 + 4));
  sub_1000162D4(a1, (uint64_t)v5, (uint64_t **)v3, v6);
  return v6;
}

void sub_1000292DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_100027D24((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void sub_100029304()
{
  operator delete();
}

_QWORD *sub_100029318(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F24B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10002934C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F24B8;
  a2[1] = v2;
  return result;
}

void sub_100029368(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 464);
  *(_QWORD *)(v1 + 456) = 0;
  *(_QWORD *)(v1 + 464) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_1000293C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100029404()
{
}

BOOL sub_100029410(void ****a1, void *a2)
{
  id v3;
  uint64_t v4;
  double v5;
  id v6;
  uint64_t v7;
  double v8;
  void ***v9;
  void ***v10;
  id v11;
  void ***v12;
  NSObject *v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  _BOOL8 v17;
  void *__p[2];
  char v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  void **v25;

  v3 = a2;
  if (v3)
  {
    v4 = mach_continuous_time();
    v5 = sub_1000842A4(v4);
    sub_1000298F4((uint64_t)a1, v5);
    v6 = v3;
    v7 = mach_continuous_time();
    v8 = sub_1000842A4(v7);
    sub_1000298F4((uint64_t)a1, v8);
    v10 = *a1;
    v9 = a1[1];
    v11 = v6;
    if (v10 != v9)
    {
      while (!sub_1000602EC(*v10, v11))
      {
        if (++v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }

    v12 = a1[1];
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v22 = 2082;
      v23 = "";
      v24 = 1026;
      LODWORD(v25) = v10 != v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#currentAlerts,isSAFound\", \"result\":%{public}hhd}", buf, 0x18u);
    }

    if (v10 == v12)
      operator new();
    v14 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      SACommonUtils::getAnyCmam((SACommonUtils *)v11, __p);
      if (v20 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2081;
      v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#currentAlerts,addFailed\", \"cmam\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v20 < 0)
        operator delete(__p[0]);
    }

    v17 = v10 == v12;
  }
  else
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#currentAlerts,addFailed,emptyDictionary\"}", buf, 0x12u);
    }
    v17 = 0;
  }

  return v17;
}

void sub_100029870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000298F4(uint64_t result, double a2)
{
  uint64_t v2;
  SACommonUtils ***v3;
  SACommonUtils ***v4;
  uint64_t *v5;
  SACommonUtils ***i;
  SACommonUtils **v7;
  double v8;

  v2 = result;
  v3 = *(SACommonUtils ****)result;
  v4 = *(SACommonUtils ****)(result + 8);
  v8 = a2;
  if (v3 != v4)
  {
    while (1)
    {
      result = sub_100029C9C(&v8, v3);
      if ((result & 1) != 0)
        break;
      if (++v3 == v4)
      {
        v3 = v4;
        goto LABEL_5;
      }
    }
    if (v3 != v4)
    {
      for (i = v3 + 1; i != v4; ++i)
      {
        result = sub_100029C9C(&v8, i);
        if ((result & 1) == 0)
        {
          v7 = *i;
          *i = 0;
          result = sub_100029C60((uint64_t *)v3++, (uint64_t)v7);
        }
      }
    }
  }
LABEL_5:
  v5 = *(uint64_t **)(v2 + 8);
  if (v3 != (SACommonUtils ***)v5)
  {
    while (v5 != (uint64_t *)v3)
      result = sub_100029C60(--v5, 0);
    *(_QWORD *)(v2 + 8) = v3;
  }
  return result;
}

BOOL sub_1000299F8(void ****a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  void *v8;
  uint64_t v9;
  double v10;
  void ***v11;
  void ***v12;
  NSObject *v13;
  _BOOL4 v14;
  void ***v15;
  void *__p[2];
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = SALogObjectGeneral;
  result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (result)
    {
      v8 = *(void **)a2;
      if (v4 >= 0)
        v8 = (void *)a2;
      *(_DWORD *)buf = 68289283;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2081;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#currentAlerts,isHashFoundRequested\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    v9 = mach_continuous_time();
    v10 = sub_1000842A4(v9);
    sub_1000298F4((uint64_t)a1, v10);
    v11 = *a1;
    v12 = a1[1];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100004870(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v17 = *(_QWORD *)(a2 + 16);
    }
    if (v11 != v12)
    {
      while ((SACommonUtils::isHashMatch((uint64_t)__p, **v11) & 1) == 0)
      {
        if (++v11 == v12)
        {
          v11 = v12;
          break;
        }
      }
    }
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    v13 = SALogObjectGeneral;
    v14 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    v15 = a1[1];
    if (v14)
    {
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      LODWORD(v23) = v11 != v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#currentAlerts,isHashFound\", \"result\":%{public}hhd}", buf, 0x18u);
      v15 = a1[1];
    }
    return v11 != v15;
  }
  else if (result)
  {
    *(_DWORD *)buf = 68289026;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#currentAlerts,#warning,isHashFoundFailed,emptyHash\"}", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_100029C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100029C60(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000602AC(result);
    operator delete();
  }
  return result;
}

BOOL sub_100029C9C(double *a1, SACommonUtils ***a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;

  v4 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    SACommonUtils::getAnyCmam(**a2, __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 68289283;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#currentAlerts,purge\", \"cmam\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  return *a1 - *((double *)*a2 + 1) > 600.0;
}

void sub_100029DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100029DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  std::string *p_buf;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  std::string *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  std::string *v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  std::string buf;

  v5 = sub_1000254FC(a1) + 192;
  sub_1000254FC(v5);
  sub_1000254FC(a1 + 384);
  *(_BYTE *)(a1 + 576) = 0;
  sub_100004F4C(a1 + 584, a3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,SAIgneousAlertParser\"}", (uint8_t *)&buf, 0x12u);
  }
  sub_10000E8A0(&buf, "igneous_received");
  std::string::operator=((std::string *)(a1 + 160), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 136) = 2000;
  sub_10002A4A4(&buf, "igneous_received.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  v39[0] = off_1000F2568;
  v40 = v39;
  v37[0] = off_1000F2568;
  v38 = v37;
  v8 = sub_100023004(a1, (char *)p_buf, 0x1388uLL, (uint64_t)v39, (uint64_t)v37);
  v9 = v38;
  if (v38 == v37)
  {
    v10 = 4;
    v9 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  v11 = v40;
  if (v40 == v39)
  {
    v12 = 4;
    v11 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_18;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_18:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v8 & 1) != 0)
      goto LABEL_24;
  }
  else if ((v8 & 1) != 0)
  {
    goto LABEL_24;
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }
LABEL_24:
  sub_10000E8A0(&buf, "igneous_received_followup");
  std::string::operator=((std::string *)(a1 + 352), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 193) = 0;
  *(_QWORD *)(a1 + 328) = 2000;
  sub_10002A4A4(&buf, "igneous_received_folloup.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &buf;
  else
    v14 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v36 = v35;
  v33[0] = off_1000F2568;
  v34 = v33;
  v35[0] = off_1000F2568;
  v15 = sub_100023004(v5, (char *)v14, 0x1388uLL, (uint64_t)v35, (uint64_t)v33);
  v16 = v34;
  if (v34 == v33)
  {
    v17 = 4;
    v16 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_34;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_34:
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_39;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_39:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v15 & 1) != 0)
      goto LABEL_45;
  }
  else if ((v15 & 1) != 0)
  {
    goto LABEL_45;
  }
  v20 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }
LABEL_45:
  sub_10000E8A0(&buf, "ble_received");
  std::string::operator=((std::string *)(a1 + 544), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 385) = 0;
  *(_QWORD *)(a1 + 520) = 2000;
  sub_10002A4A4(&buf, "igneous_ble_received.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &buf;
  else
    v21 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v32 = v31;
  v29[0] = off_1000F2568;
  v30 = v29;
  v31[0] = off_1000F2568;
  v22 = sub_100023004(a1 + 384, (char *)v21, 0x1388uLL, (uint64_t)v31, (uint64_t)v29);
  v23 = v30;
  if (v30 == v29)
  {
    v24 = 4;
    v23 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_55;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_55:
  v25 = v32;
  if (v32 == v31)
  {
    v26 = 4;
    v25 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_60;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_60:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v22 & 1) != 0)
      return a1;
  }
  else if ((v22 & 1) != 0)
  {
    return a1;
  }
  v27 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }
  return a1;
}

void sub_10002A30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a12;
  if (a12 == v20)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  v27 = *(_QWORD **)(v16 + 608);
  if (v27 == v19)
  {
    v28 = 4;
    v27 = v19;
  }
  else
  {
    if (!v27)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_18:
  sub_10002351C(v18);
  sub_10002351C(v17);
  sub_10002351C(v16);
  _Unwind_Resume(a1);
}

void sub_10002A48C()
{
  JUMPOUT(0x10002A46CLL);
}

void sub_10002A494()
{
  JUMPOUT(0x10002A474);
}

void sub_10002A49C()
{
  JUMPOUT(0x10002A47CLL);
}

void sub_10002A4A4(std::string *a1, char *a2)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *__p[2];
  unsigned __int8 v8;
  std::string v9;

  sub_10000E8A0(&v9, "/var/mobile/Library/com.apple.safetyalerts/");
  sub_10000E8A0(__p, a2);
  if ((v8 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_10002A54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002A580(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v18;

  v2 = (_QWORD *)(a1 + 584);
  v3 = *(_QWORD **)(a1 + 608);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  v5 = *(_QWORD **)(a1 + 512);
  if (v5 == (_QWORD *)(a1 + 488))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 488);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = *(_QWORD **)(a1 + 480);
  if (v7 == (_QWORD *)(a1 + 456))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 456);
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  v18 = (void **)(a1 + 408);
  sub_100023A94(&v18);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v9 = *(_QWORD **)(a1 + 320);
  if (v9 == (_QWORD *)(a1 + 296))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 296);
  }
  else
  {
    if (!v9)
      goto LABEL_27;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_27:
  v11 = *(_QWORD **)(a1 + 288);
  if (v11 == (_QWORD *)(a1 + 264))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 264);
  }
  else
  {
    if (!v11)
      goto LABEL_32;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_32:
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v18 = (void **)(a1 + 216);
  sub_100023A94(&v18);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v13 = *(_QWORD **)(a1 + 128);
  if (v13 == (_QWORD *)(a1 + 104))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v13)
      goto LABEL_41;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_41:
  v15 = *(_QWORD **)(a1 + 96);
  if (v15 == (_QWORD *)(a1 + 72))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v15)
      goto LABEL_46;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_46:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v18 = (void **)(a1 + 24);
  sub_100023A94(&v18);
  return a1;
}

uint64_t sub_10002A788(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v15;
  NSObject *v16;
  void **v17;
  const char *v18;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  char *v25;
  const char *v26;
  BOOL v27;
  char *v28;
  void **v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint8_t *v34;
  size_t v35;
  uint8_t *v36;
  size_t v37;
  __int128 *v38;
  size_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  uint8_t *v44;
  size_t v45;
  uint8_t *v46;
  size_t v47;
  char *v48;
  size_t v49;
  BOOL v50;
  BOOL v51;
  void *v52;
  int v53;
  uint8_t *v54;
  size_t v55;
  uint8_t *v56;
  void *v57;
  void **v58;
  size_t v59;
  BOOL v60;
  BOOL v61;
  SACommonUtils *v62;
  char isLivabiltyEnabled;
  void *__p[2];
  char v65;
  uint8_t v66[8];
  _BYTE v67[10];
  __int16 v68;
  void **v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  char *v73;
  __int16 v74;
  char *v75;
  _BYTE buf[32];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void *v81[6];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("alert")));
    if (v4 && (v5 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v4, v5) & 1) != 0))
      v6 = v4;
    else
      v6 = 0;

    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2113;
      *(_QWORD *)&buf[20] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,isSaewAlert,IgneousInformation\", \"jsondict\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("source")));
      if (v8)
      {
        v9 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
        {
          v82 = 0u;
          memset(v81, 0, sizeof(v81));
          v79 = 0u;
          v80 = 0u;
          v78 = 0u;
          v77 = 0u;
          memset(buf, 0, sizeof(buf));
          __asm { FMOV            V0.2D, #10.0 }
          v84 = _Q0;
          __asm { FMOV            V0.2D, #-1.0 }
          v85 = _Q0;
          v86 = _Q0;
          v83 = 0;
          v87 = 0xBFF0000000000000;
          v15 = sub_1000687EC();
          sub_10002AEE8((uint64_t)v15, (std::string *)buf);
          v16 = (id)SALogObjectGeneral;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            sub_10000E8A0(__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
            v17 = v65 >= 0 ? __p : (void **)__p[0];
            if (SBYTE7(v79) < 0)
            {
              v18 = (const char *)v78;
              _ZF = *((_QWORD *)&v78 + 1) == 0;
            }
            else
            {
              v18 = (const char *)&v78;
              _ZF = SBYTE7(v79) == 0;
            }
            v25 = _ZF ? "" : (char *)v18;
            if (SHIBYTE(v80) < 0)
            {
              v26 = (const char *)*((_QWORD *)&v79 + 1);
              v27 = (_QWORD)v80 == 0;
            }
            else
            {
              v26 = (char *)&v79 + 8;
              v27 = SHIBYTE(v80) == 0;
            }
            v28 = v27 ? "" : (char *)v26;
            if (SHIBYTE(v81[2]) < 0)
            {
              v29 = (void **)v81[0];
              v30 = v81[1] == 0;
            }
            else
            {
              v29 = v81;
              v30 = SHIBYTE(v81[2]) == 0;
            }
            v31 = v30 ? "" : (char *)v29;
            *(_DWORD *)v66 = 68290051;
            *(_DWORD *)&v66[4] = 0;
            *(_WORD *)v67 = 2082;
            *(_QWORD *)&v67[2] = "";
            v68 = 2081;
            v69 = v17;
            v70 = 2081;
            v71 = v25;
            v72 = 2081;
            v73 = v28;
            v74 = 2081;
            v75 = v31;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isSaewAlert\", \"source\":%{private, location:escape_only}s, \"MASource\":%{private, location:escape_only}s, \"MATestSource\":%{private, location:escape_only}s, \"MAFollowUpSource\":%{private, location:escape_only}s}", v66, 0x3Au);
            if (v65 < 0)
              operator delete(__p[0]);
          }

          v32 = BYTE7(v79);
          if (SBYTE7(v79) < 0)
            v32 = *((_QWORD *)&v78 + 1);
          if (!v32)
            goto LABEL_71;
          sub_10000E8A0(v66, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
          v33 = SBYTE3(v69);
          v34 = *(uint8_t **)v66;
          if (SBYTE3(v69) >= 0)
            v35 = BYTE3(v69);
          else
            v35 = *(_QWORD *)v67;
          if (SBYTE3(v69) >= 0)
            v36 = v66;
          else
            v36 = *(uint8_t **)v66;
          if ((SBYTE7(v79) & 0x80u) == 0)
            v37 = BYTE7(v79);
          else
            v37 = *((_QWORD *)&v78 + 1);
          if ((SBYTE7(v79) & 0x80u) == 0)
            v38 = &v78;
          else
            v38 = (__int128 *)v78;
          if (v37 >= v35)
            v39 = v35;
          else
            v39 = v37;
          v40 = memcmp(v36, v38, v39) == 0;
          v41 = v37 == v35 && v40;
          if (v33 < 0)
            operator delete(v34);
          if (v41)
          {
            v21 = 1;
          }
          else
          {
LABEL_71:
            v42 = HIBYTE(v80);
            if (v80 < 0)
              v42 = v80;
            if (!v42)
              goto LABEL_96;
            sub_10000E8A0(v66, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
            v43 = SBYTE3(v69);
            v44 = *(uint8_t **)v66;
            if (SBYTE3(v69) >= 0)
              v45 = BYTE3(v69);
            else
              v45 = *(_QWORD *)v67;
            if (SBYTE3(v69) >= 0)
              v46 = v66;
            else
              v46 = *(uint8_t **)v66;
            if (v80 >= 0)
              v47 = HIBYTE(v80);
            else
              v47 = v80;
            if (v80 >= 0)
              v48 = (char *)&v79 + 8;
            else
              v48 = (char *)*((_QWORD *)&v79 + 1);
            if (v47 >= v45)
              v49 = v45;
            else
              v49 = v47;
            v50 = memcmp(v46, v48, v49) == 0;
            v51 = v47 == v45 && v50;
            if (v43 < 0)
              operator delete(v44);
            if (v51)
            {
              v21 = 2;
            }
            else
            {
LABEL_96:
              v52 = (void *)HIBYTE(v81[2]);
              if (SHIBYTE(v81[2]) < 0)
                v52 = v81[1];
              if (!v52)
                goto LABEL_121;
              sub_10000E8A0(v66, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
              v53 = SBYTE3(v69);
              v54 = *(uint8_t **)v66;
              if (SBYTE3(v69) >= 0)
                v55 = BYTE3(v69);
              else
                v55 = *(_QWORD *)v67;
              if (SBYTE3(v69) >= 0)
                v56 = v66;
              else
                v56 = *(uint8_t **)v66;
              if (SHIBYTE(v81[2]) >= 0)
                v57 = (void *)HIBYTE(v81[2]);
              else
                v57 = v81[1];
              if (SHIBYTE(v81[2]) >= 0)
                v58 = v81;
              else
                v58 = (void **)v81[0];
              if ((unint64_t)v57 >= v55)
                v59 = v55;
              else
                v59 = (size_t)v57;
              v60 = memcmp(v56, v58, v59) == 0;
              v61 = v57 == (void *)v55 && v60;
              if (v53 < 0)
                operator delete(v54);
              if (!v61)
              {
LABEL_121:
                sub_10000E8A0(v66, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
                v62 = (SACommonUtils *)std::string::compare((const std::string *)v66, (const std::string::value_type *)objc_msgSend(CFSTR("USGSLivability"), "UTF8String"));
                if ((_DWORD)v62)
                {
                  if (SBYTE3(v69) < 0)
                    operator delete(*(void **)v66);
                }
                else
                {
                  isLivabiltyEnabled = SACommonUtils::isLivabiltyEnabled(v62);
                  if (SBYTE3(v69) < 0)
                    operator delete(*(void **)v66);
                  if ((isLivabiltyEnabled & 1) != 0)
                  {
                    v21 = 4;
                    goto LABEL_129;
                  }
                }
                v21 = 5;
                goto LABEL_129;
              }
              v21 = 3;
            }
          }
LABEL_129:
          *(_QWORD *)v66 = &v82;
          sub_100004EC0((void ***)v66);
          *(_QWORD *)v66 = &v81[3];
          sub_100004EC0((void ***)v66);
          if (SHIBYTE(v81[2]) < 0)
            operator delete(v81[0]);
          if (SHIBYTE(v80) < 0)
            operator delete(*((void **)&v79 + 1));
          if (SBYTE7(v79) < 0)
            operator delete((void *)v78);
          if (SHIBYTE(v77) < 0)
            operator delete(*(void **)&buf[24]);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);

          goto LABEL_26;
        }
      }

      v22 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v23 = "{\"msg%{public}.0s\":\"#iap,source nil\"}";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0x12u);
      }
    }
    else
    {
      v22 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v23 = "{\"msg%{public}.0s\":\"#iap,isSaewAlert,jsondict nil\"}";
        goto LABEL_24;
      }
    }
    v21 = 5;
LABEL_26:

    goto LABEL_27;
  }
  v20 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isSaewAlert,null alert\"}", buf, 0x12u);
  }
  v21 = 5;
LABEL_27:

  return v21;
}

void sub_10002AE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a18 < 0)
    operator delete(__p);
  sub_100032A34((uint64_t)&a24);

  _Unwind_Resume(a1);
}

__n128 sub_10002AEE8(uint64_t a1, std::string *this)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = a1 + 176;
  std::string::operator=(this, (const std::string *)(a1 + 176));
  std::string::operator=(this + 1, (const std::string *)(a1 + 200));
  std::string::operator=(this + 2, (const std::string *)(a1 + 224));
  std::string::operator=(this + 3, (const std::string *)(a1 + 248));
  std::string::operator=(this + 4, (const std::string *)(a1 + 272));
  if ((std::string *)v4 != this)
  {
    sub_10003282C((uint64_t)&this[5], *(std::string **)(a1 + 296), *(__int128 **)(a1 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3));
    sub_10003282C((uint64_t)&this[6], *(std::string **)(a1 + 320), *(__int128 **)(a1 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 3));
  }
  result = *(__n128 *)(v4 + 168);
  v6 = *(_OWORD *)(v4 + 184);
  v7 = *(_OWORD *)(v4 + 200);
  this[9].__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 392);
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v7;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = v6;
  *(__n128 *)&this[7].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_10002AFB0(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  void **v15;
  void *v16;
  uint64_t v17;
  id v18;
  void **v19;
  SAPlatformInfo *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  id v31;
  _BYTE buf[28];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  v3 = a1;
  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2113;
    *(_QWORD *)&buf[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,extractBLEData\", \"d\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_10007FD14((SAPlatformInfo *)v5) & 1) == 0)
  {
    v26 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v27 = "{\"msg%{public}.0s\":\"#iap,extractBLEData,BLE is not supported\"}";
LABEL_38:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0x12u);
    goto LABEL_48;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("relayPduV1")));
  if (!v6 || (v7 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v6, v7) & 1) == 0))
  {

    v26 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v27 = "{\"msg%{public}.0s\":\"#iap,extractBLEData,relayPDU nil\"}";
    goto LABEL_38;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("signature")));
  if (v8 && (v9 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v8, v9) & 1) != 0))
  {
    v10 = objc_retainAutorelease(v8);
    sub_10000E8A0(buf, (char *)objc_msgSend(v10, "UTF8String"));
    v11 = (void **)(a2 + 128);
    if (*(char *)(a2 + 151) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 144) = *(_QWORD *)&buf[16];
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("uid")));
    if (v12 && (v13 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v12, v13) & 1) != 0))
    {
      v14 = objc_retainAutorelease(v12);
      sub_10000E8A0(buf, (char *)objc_msgSend(v14, "UTF8String"));
      v15 = (void **)(a2 + 176);
      if (*(char *)(a2 + 199) < 0)
        operator delete(*v15);
      *(_OWORD *)v15 = *(_OWORD *)buf;
      *(_QWORD *)(a2 + 192) = *(_QWORD *)&buf[16];
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("data")));
      if (v16 && (v17 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v16, v17) & 1) != 0))
      {
        v18 = objc_retainAutorelease(v16);
        v31 = v14;
        sub_10000E8A0(buf, (char *)objc_msgSend(v18, "UTF8String"));
        v19 = (void **)(a2 + 152);
        if (*(char *)(a2 + 175) < 0)
          operator delete(*v19);
        *(_OWORD *)v19 = *(_OWORD *)buf;
        *(_QWORD *)(a2 + 168) = *(_QWORD *)&buf[16];
        v20 = (SAPlatformInfo *)sub_10001EB78();
        v21 = sub_10002058C(v20, a2 + 128, a2 + 152);
        v22 = SALogObjectGeneral;
        if (v21)
        {
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,extractBLEData,authenticated\"}", buf, 0x12u);
            v22 = SALogObjectGeneral;
          }
          *(_BYTE *)(a2 + 200) = 1;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 199) >= 0)
            v23 = a2 + 176;
          else
            v23 = *(_QWORD *)(a2 + 176);
          if (*(char *)(a2 + 175) >= 0)
            v24 = a2 + 152;
          else
            v24 = *(_QWORD *)(a2 + 152);
          if (*(char *)(a2 + 151) >= 0)
            v25 = a2 + 128;
          else
            v25 = *(_QWORD *)(a2 + 128);
          *(_DWORD *)buf = 68289795;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = v23;
          v33 = 2081;
          v34 = v24;
          v35 = 2081;
          v36 = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,extractBLEData\", \"bleAlertUID\":%{private, location:escape_only}s, \"bleAlertData\":%{private, location:escape_only}s, \"alertSignature\":%{private, location:escape_only}s}", buf, 0x30u);
        }

        v14 = v31;
      }
      else
      {

        v30 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,extractBLEData,bleAlertData nil\"}", buf, 0x12u);
        }
      }

    }
    else
    {

      v29 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,extractBLEData,bleAlertUid nil\"}", buf, 0x12u);
      }
    }

  }
  else
  {

    v28 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,extractBLEData,alertSignature nil\"}", buf, 0x12u);
    }
  }

LABEL_48:
}

void sub_10002B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_10002B5FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  char *v45;
  _UNKNOWN **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  void **v74;
  void **v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  double v90;
  double v91;
  _BOOL4 v92;
  NSObject *v93;
  NSObject *v94;
  int v95;
  const char *v96;
  int v97;
  const char *v98;
  int v99;
  const char *v100;
  BOOL v101;
  const char *v102;
  int v103;
  const char *v104;
  BOOL v105;
  const char *v106;
  int v107;
  const char *v108;
  BOOL v109;
  const char *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  NSObject *v125;
  uint64_t v126;
  const char *v127;
  id v128;
  id v129;
  void *v130;
  void *v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  char *v138;
  char *v139;
  char *v140;
  id v141;
  id v142;
  id v143;
  id v144;
  void *v145;
  void *__p[2];
  char v147;
  _BYTE buf[28];
  __int16 v149;
  const char *v150;
  __int16 v151;
  const char *v152;
  __int16 v153;
  const char *v154;
  __int16 v155;
  const char *v156;
  __int16 v157;
  id v158;
  __int16 v159;
  id v160;
  __int16 v161;
  id v162;
  __int16 v163;
  id v164;
  __int16 v165;
  id v166;
  __int16 v167;
  id v168;
  __int16 v169;
  id v170;
  __int16 v171;
  id v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  char *v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  int v186;

  v5 = a2;
  v6 = v5;
  if (!v5)
  {
    v19 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,null alert\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(__p, "");
    sub_10002CD2C(a1, 7, buf, (uint64_t)__p, 0.0, 0.0);
    if (v147 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_19;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("alert")));
  if (v7)
  {
    v8 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    {
      v9 = v7;

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("source")));
      if (!v10 || (v11 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v10, v11) & 1) == 0))
      {

        v20 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,source nil\"}", buf, 0x12u);
        }
        sub_10000E8A0(buf, "");
        sub_10000E8A0(__p, "");
        sub_10002CD2C(a1, 1, buf, (uint64_t)__p, 0.0, 0.0);
        if (v147 < 0)
          operator delete(__p[0]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v18 = 0;
        goto LABEL_133;
      }
      v12 = v10;

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("uid")));
      if (!v13 || (v14 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v13, v14) & 1) == 0))
      {

        v21 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,uid nil\"}", buf, 0x12u);
        }
        sub_10000E8A0(buf, "");
        sub_10000E8A0(__p, "");
        sub_10002CD2C(a1, 2, buf, (uint64_t)__p, 0.0, 0.0);
        if (v147 < 0)
          operator delete(__p[0]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v18 = 0;
        goto LABEL_132;
      }
      v141 = v13;

      v142 = v12;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("ingress_to_server_timestamp")));
      if (v15 && (v16 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v15, v16) & 1) != 0))
        v140 = v15;
      else
        v140 = 0;

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("egress_from_source_timestamp")));
      if (v22 && (v23 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v22, v23) & 1) != 0))
        v139 = v22;
      else
        v139 = 0;

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("event_origin_timestamp")));
      if (v24 && (v25 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v24, v25) & 1) != 0))
        v138 = v24;
      else
        v138 = 0;

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("effective")));
      if (v26 && (v27 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v26, v27) & 1) != 0))
        v137 = v26;
      else
        v137 = 0;

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("expires")));
      if (v28 && (v29 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v28, v29) & 1) != 0))
        v136 = v28;
      else
        v136 = 0;

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("event_update_number")));
      if (v30 && (v31 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v30, v31) & 1) != 0))
        v135 = v30;
      else
        v135 = 0;

      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("depth")));
      if (v32 && (v33 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v32, v33) & 1) != 0))
        v132 = v32;
      else
        v132 = 0;

      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("epi_latitude")));
      if (v34 && (v35 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v34, v35) & 1) != 0))
        v134 = v34;
      else
        v134 = 0;

      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("epi_longitude")));
      if (v36 && (v37 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v36, v37) & 1) != 0))
        v133 = v36;
      else
        v133 = 0;

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("magnitude")));
      if (v38 && (v39 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v38, v39) & 1) != 0))
        v143 = v38;
      else
        v143 = 0;

      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("DisplayAlert")));
      if (v40 && (v41 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v40, v41) & 1) != 0))
        v144 = v40;
      else
        v144 = 0;

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("mmi_grid")));
      if (v42 && (v43 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v42, v43) & 1) != 0))
      {
        v44 = v42;

        v145 = v44;
        v45 = (char *)objc_msgSend(v44, "count");
        v46 = &APSEnvironmentDevelopment_ptr;
        if (v45)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "objectAtIndex:", v47));
            if (v51 && (v52 = objc_opt_class(v46[69]), (objc_opt_isKindOfClass(v51, v52) & 1) != 0))
            {
              v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndex:", 0));
              if (v53 && (v54 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v53, v54) & 1) != 0))
              {
                v55 = v53;
                v131 = v55;
                v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndex:", 1));
                if (v56 && (v57 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v56, v57) & 1) != 0))
                {
                  v129 = v56;
                  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndex:", 2));
                  if (v130
                    && (v58 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v130, v58) & 1) != 0))
                  {
                    v128 = v130;
                    objc_msgSend(v128, "doubleValue");
                    v50 = v59;
                    objc_msgSend(v55, "doubleValue");
                    v49 = v60;
                    objc_msgSend(v129, "doubleValue");
                    v48 = v61;
                    v62 = (id)SALogObjectGeneral;
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                    {
                      objc_msgSend(v131, "doubleValue");
                      v64 = v63;
                      objc_msgSend(v129, "doubleValue");
                      v66 = v65;
                      objc_msgSend(v128, "doubleValue");
                      *(_DWORD *)buf = 68290051;
                      *(_DWORD *)&buf[4] = 0;
                      *(_WORD *)&buf[8] = 2082;
                      *(_QWORD *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2113;
                      *(_QWORD *)&buf[20] = v51;
                      v149 = 2049;
                      v150 = v64;
                      v151 = 2049;
                      v152 = v66;
                      v153 = 2049;
                      v154 = v67;
                      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,MMI\", \"objAtIndex\":%{private, location:escape_only}@, \"lat\":\"%{private}0.3f\", \"lon\":\"%{private}0.3f\", \"mmi\":\"%{private}0.3f\"}", buf, 0x3Au);
                    }

                  }
                  else
                  {
                    v71 = SALogObjectGeneral;
                    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 68289026;
                      *(_DWORD *)&buf[4] = 0;
                      *(_WORD *)&buf[8] = 2082;
                      *(_QWORD *)&buf[10] = "";
                      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,not NSNumber for mmi\"}", buf, 0x12u);
                    }
                    v46 = &APSEnvironmentDevelopment_ptr;
                  }

                }
                else
                {
                  v70 = SALogObjectGeneral;
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289026;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,not NSNumber for lon\"}", buf, 0x12u);
                  }
                  v46 = &APSEnvironmentDevelopment_ptr;
                }

              }
              else
              {
                v69 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 68289026;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,not NSNumber for lat\"}", buf, 0x12u);
                }
              }

            }
            else
            {
              v68 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2050;
                *(_QWORD *)&buf[20] = v47;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,not NSArray\", \"i\":%{public}lu}", buf, 0x1Cu);
              }
            }

            ++v47;
          }
          while (v45 != v47);
        }
        else
        {
          v50 = 0;
          v49 = 0;
          v48 = 0;
        }
        v73 = (id)SALogObjectGeneral;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68292355;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2113;
          *(_QWORD *)&buf[20] = v142;
          v149 = 2113;
          v150 = (const char *)v141;
          v151 = 2113;
          v152 = v140;
          v153 = 2113;
          v154 = v139;
          v155 = 2113;
          v156 = v138;
          v157 = 2113;
          v158 = v137;
          v159 = 2113;
          v160 = v136;
          v161 = 2113;
          v162 = v135;
          v163 = 2113;
          v164 = v134;
          v165 = 2113;
          v166 = v133;
          v167 = 2113;
          v168 = v143;
          v169 = 2113;
          v170 = v132;
          v171 = 2113;
          v172 = v144;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert\", \"source\":%{private, location:escape_only}@, \"uid\":%{private, location:escape_only}@, \"ingress_to_server_ts\":%{private, location:escape_only}@, \"egress_from_source_ts\":%{private, location:escape_only}@, \"event_origin_ts\":%{private, location:escape_only}@, \"effective\":%{private, location:escape_only}@, \"expires\":%{private, location:escape_only}@, \"event_update_number\":%{private, location:escape_only}@, \"epi_latitude\":%{private, location:escape_only}@, \"epi_longitude\":%{private, location:escape_only}@, \"magnitude\":%{private, location:escape_only}@, \"depth\":%{private, location:escape_only}@, \"display\":%{private, location:escape_only}@}", buf, 0x94u);
        }

        sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v141), "UTF8String"));
        v74 = (void **)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v74);
        *(_OWORD *)v74 = *(_OWORD *)buf;
        *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
        sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v142), "UTF8String"));
        v75 = (void **)(a3 + 32);
        if (*(char *)(a3 + 55) < 0)
          operator delete(*v75);
        *(_OWORD *)v75 = *(_OWORD *)buf;
        *(_QWORD *)(a3 + 48) = *(_QWORD *)&buf[16];
        *(_DWORD *)(a3 + 204) = 1;
        objc_msgSend(v140, "doubleValue");
        *(double *)(a3 + 208) = v76 + -978307200.0;
        objc_msgSend(v139, "doubleValue");
        *(double *)(a3 + 216) = v77 + -978307200.0;
        objc_msgSend(v136, "doubleValue");
        *(double *)(a3 + 240) = v78 + -978307200.0;
        objc_msgSend(v138, "doubleValue");
        *(double *)(a3 + 224) = v79 + -978307200.0;
        objc_msgSend(v137, "doubleValue");
        *(double *)(a3 + 232) = v80 + -978307200.0;
        objc_msgSend(v134, "doubleValue");
        *(_QWORD *)(a3 + 264) = v81;
        objc_msgSend(v133, "doubleValue");
        *(_QWORD *)(a3 + 272) = v82;
        objc_msgSend(v143, "doubleValue");
        v84 = fabs(v83);
        v85 = 0;
        if (v84 >= 2.22044605e-16)
          objc_msgSend(v143, "doubleValue", 0.0);
        *(_QWORD *)(a3 + 280) = v85;
        objc_msgSend(v135, "doubleValue");
        *(_QWORD *)(a3 + 256) = v86;
        objc_msgSend(v132, "doubleValue");
        *(_QWORD *)(a3 + 248) = v87;
        *(_QWORD *)(a3 + 296) = v49;
        *(_QWORD *)(a3 + 304) = v48;
        *(_QWORD *)(a3 + 288) = v50;
        if (v144)
          *(_BYTE *)(a3 + 312) = objc_msgSend(v144, "BOOLValue");
        sub_10002AFB0(v6, a3);
        if (fabs(*(double *)(a3 + 208)) >= 2.22044605e-16
          && fabs(*(double *)(a3 + 216)) >= 2.22044605e-16
          && fabs(*(double *)(a3 + 240)) >= 2.22044605e-16
          && fabs(*(double *)(a3 + 232)) >= 2.22044605e-16
          && fabs(*(double *)(a3 + 224)) >= 2.22044605e-16)
        {
          v90 = *(double *)(a3 + 264);
          v91 = *(double *)(a3 + 272);
          v92 = v90 == 0.0;
          if (v91 != 0.0)
            v92 = 0;
          v93 = SALogObjectGeneral;
          if (v91 <= 180.0 && v91 >= -180.0 && v90 <= 90.0 && v90 >= -90.0 && !v92)
          {
            v94 = (id)SALogObjectGeneral;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              v95 = *(char *)(a3 + 55);
              if (v95 < 0)
              {
                v96 = "";
                if (*(_QWORD *)(a3 + 40))
                  v96 = *(const char **)(a3 + 32);
              }
              else
              {
                v101 = v95 == 0;
                v96 = "";
                if (!v101)
                  v96 = (const char *)(a3 + 32);
              }
              v97 = *(char *)(a3 + 31);
              if (v97 < 0)
              {
                v98 = "";
                if (*(_QWORD *)(a3 + 16))
                  v98 = *(const char **)(a3 + 8);
              }
              else
              {
                v101 = v97 == 0;
                v98 = "";
                if (!v101)
                  v98 = (const char *)(a3 + 8);
              }
              v99 = *(char *)(a3 + 151);
              if (v99 < 0)
              {
                v100 = *(const char **)(a3 + 128);
                v101 = *(_QWORD *)(a3 + 136) == 0;
              }
              else
              {
                v100 = (const char *)(a3 + 128);
                v101 = v99 == 0;
              }
              v102 = "";
              if (!v101)
                v102 = v100;
              v103 = *(char *)(a3 + 175);
              if (v103 < 0)
              {
                v104 = *(const char **)(a3 + 152);
                v105 = *(_QWORD *)(a3 + 160) == 0;
              }
              else
              {
                v104 = (const char *)(a3 + 152);
                v105 = v103 == 0;
              }
              v106 = "";
              if (!v105)
                v106 = v104;
              v107 = *(char *)(a3 + 199);
              if (v107 < 0)
              {
                v108 = *(const char **)(a3 + 176);
                v109 = *(_QWORD *)(a3 + 184) == 0;
              }
              else
              {
                v108 = (const char *)(a3 + 176);
                v109 = v107 == 0;
              }
              v110 = "";
              if (!v109)
                v110 = v108;
              v111 = *(void **)(a3 + 208);
              v112 = *(void **)(a3 + 216);
              v113 = *(void **)(a3 + 224);
              v114 = *(void **)(a3 + 232);
              v116 = *(void **)(a3 + 256);
              v115 = *(void **)(a3 + 264);
              v117 = *(void **)(a3 + 272);
              v118 = *(_QWORD *)(a3 + 280);
              v119 = *(void **)(a3 + 240);
              v120 = *(_QWORD *)(a3 + 248);
              v122 = *(_QWORD *)(a3 + 296);
              v121 = *(_QWORD *)(a3 + 304);
              v123 = *(_QWORD *)(a3 + 288);
              v124 = *(unsigned __int8 *)(a3 + 312);
              *(_DWORD *)buf = 68294147;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2081;
              *(_QWORD *)&buf[20] = v96;
              v149 = 2081;
              v150 = v98;
              v151 = 2081;
              v152 = v102;
              v153 = 2081;
              v154 = v106;
              v155 = 2081;
              v156 = v110;
              v157 = 2049;
              v158 = v111;
              v159 = 2049;
              v160 = v112;
              v161 = 2049;
              v162 = v113;
              v163 = 2049;
              v164 = v114;
              v165 = 2049;
              v166 = v119;
              v167 = 2049;
              v168 = v116;
              v169 = 2049;
              v170 = v115;
              v171 = 2049;
              v172 = v117;
              v173 = 2049;
              v174 = v118;
              v175 = 2049;
              v176 = v120;
              v177 = 2049;
              v178 = v45;
              v179 = 2049;
              v180 = v122;
              v181 = 2049;
              v182 = v121;
              v183 = 2049;
              v184 = v123;
              v185 = 1025;
              v186 = v124;
              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"alertSignature\":%{private, location:escape_only}s, \"bleAlertData\":%{private, location:escape_only}s, \"bleAlertUID\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\", \"magnitude\":\"%{private}0.3f\", \"depth\":\"%{private}0.3f\", \"mmiSize\":%{private}llu, \"mmiLat\":\"%{private}0.3f\", \"mmiLon\":\"%{private}0.3f\", \"mmiLevel\":\"%{private}0.3f\", \"Display\":%{private}d}", buf, 0xD6u);
            }

            v125 = (id)SALogObjectGeneral;
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
            {
              v126 = *(unsigned __int8 *)(a3 + 151);
              if ((v126 & 0x80u) != 0)
                v126 = *(_QWORD *)(a3 + 136);
              v127 = (const char *)*(unsigned __int8 *)(a3 + 175);
              if ((char)v127 < 0)
                v127 = *(const char **)(a3 + 160);
              *(_DWORD *)buf = 68289539;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2049;
              *(_QWORD *)&buf[20] = v126;
              v149 = 2049;
              v150 = v127;
              _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert\", \"alertSignatureLen\":%{private}llu, \"bleAlertDataLen\":%{private}llu}", buf, 0x26u);
            }

            v18 = 1;
            goto LABEL_131;
          }
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,sendIgneousAlert,location invalid\"}", buf, 0x12u);
          }
        }
        else
        {
          v88 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,sendIgneousAlert,time invalid\"}", buf, 0x12u);
          }
        }

      }
      else
      {

        v72 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,null mmiGrid\"}", buf, 0x12u);
        }
        sub_10000E8A0(buf, "");
        sub_10000E8A0(__p, "");
        sub_10002CD2C(a1, 4, buf, (uint64_t)__p, 0.0, 0.0);
        if (v147 < 0)
          operator delete(__p[0]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v18 = 0;
LABEL_131:

      v12 = v142;
LABEL_132:

LABEL_133:
      goto LABEL_134;
    }
  }

  v17 = SALogObjectGeneral;
  v18 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,parseIgneousAlert,jsondict nil\"}", buf, 0x12u);
LABEL_19:
    v18 = 0;
  }
LABEL_134:

  return v18;
}

void sub_10002C9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

void sub_10002CD2C(uint64_t a1, int a2, char *a3, uint64_t a4, double a5, double a6)
{
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE buf[64];
  uint64_t v27;
  double v28;
  double v29;
  CFAbsoluteTime Current;
  int v31;

  v12 = *((unsigned __int8 *)sub_10003D044() + 304);
  v13 = SALogObjectGeneral;
  v14 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isIgneousTestEnabled\"}", buf, 0x12u);
    }
    v15 = CFAbsoluteTimeGetCurrent() - a5;
    v16 = CFAbsoluteTimeGetCurrent() - a6;
    v17 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (a3[23] < 0)
      {
        if (*((_QWORD *)a3 + 1))
          v18 = *(const char **)a3;
        else
          v18 = "";
      }
      else if (a3[23])
      {
        v18 = a3;
      }
      else
      {
        v18 = "";
      }
      v19 = *(const char **)a4;
      if (!*(_QWORD *)a4)
        v19 = "";
      if (*(char *)(a4 + 23) >= 0)
        v20 = (const char *)a4;
      else
        v20 = v19;
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v18;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = a2;
      *(_WORD *)&buf[34] = 2050;
      *(double *)&buf[36] = v15;
      *(_WORD *)&buf[44] = 2050;
      *(double *)&buf[46] = v16;
      *(_WORD *)&buf[54] = 2081;
      *(_QWORD *)&buf[56] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,sendIgneousTestNotification\", \"channelName\":%{public, location:escape_only}s, \"errorCode\":%{public}d, \"oriLatencyDiff\":\"%{public}0.3f\", \"ingressLatencyDiff\":\"%{public}0.3f\", \"uid\":%{private, location:escape_only}s}", buf, 0x40u);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kSAIgneousAlertReceived"), 0, 0, 1u);
    v27 = 0;
    memset(buf, 0, sizeof(buf));
    if (a3[23] < 0)
    {
      if (!*((_QWORD *)a3 + 1))
      {
LABEL_28:
        v22 = *(unsigned __int8 *)(a4 + 23);
        if ((v22 & 0x80u) != 0)
          v22 = *(_QWORD *)(a4 + 8);
        if (v22)
          std::string::operator=((std::string *)&buf[24], (const std::string *)a4);
        v31 = a2;
        v28 = v15;
        v29 = v16;
        Current = CFAbsoluteTimeGetCurrent();
        v23 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v25 = 68289026;
          *(_WORD *)&v25[8] = 2082;
          *(_QWORD *)&v25[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,onIgneousTestStatusUpdate\"}", v25, 0x12u);
        }
        v24 = *(_QWORD *)(a1 + 608);
        if (v24)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 48))(v24, buf);
        if (SHIBYTE(v27) < 0)
          operator delete(*(void **)&buf[48]);
        if ((buf[47] & 0x80000000) != 0)
          operator delete(*(void **)&buf[24]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        return;
      }
      a3 = *(char **)a3;
    }
    else if (!a3[23])
    {
      goto LABEL_28;
    }
    sub_10000E8A0(v25, a3);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    *(_OWORD *)buf = *(_OWORD *)v25;
    *(_QWORD *)&buf[16] = *(_QWORD *)&v25[16];
    goto LABEL_28;
  }
  if (v14)
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,not in Igneous test\"}", buf, 0x12u);
  }
}

void sub_10002D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100031578((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D0D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  void *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  NSObject *v17;
  uint64_t v18;
  const char *v20;
  int v21;
  const char *v22;
  BOOL v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  void *v43[2];
  char v44;
  void *__dst[2];
  uint64_t v46;
  void *__p;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  unint64_t v83;
  _BYTE buf[32];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[32];
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;

  v5 = a2;
  if (*(_BYTE *)(a1 + 576))
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,#warning,doesIgneousAlertPassPrecheck,device is in companion mode reject alert\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(&__p, "");
    sub_10002CD2C(a1, 6, buf, (uint64_t)&__p, 0.0, 0.0);
    if (SBYTE3(v51) < 0)
      operator delete(__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_14;
  }
  if ((sub_10002B5FC(a1, v5, a3) & 1) != 0)
  {
    v91 = 0u;
    v89 = 0u;
    memset(v90, 0, sizeof(v90));
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    memset(buf, 0, sizeof(buf));
    __asm { FMOV            V0.2D, #10.0 }
    v93 = _Q0;
    __asm { FMOV            V0.2D, #-1.0 }
    v94 = _Q0;
    v95 = _Q0;
    v92 = 0;
    v96 = 0xBFF0000000000000;
    v12 = sub_1000687EC();
    sub_10002AEE8((uint64_t)v12, (std::string *)buf);
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(char *)(a3 + 55);
      if (v14 < 0)
      {
        v15 = *(const char **)(a3 + 32);
        _ZF = *(_QWORD *)(a3 + 40) == 0;
      }
      else
      {
        v15 = (const char *)(a3 + 32);
        _ZF = v14 == 0;
      }
      if (_ZF)
        v20 = "";
      else
        v20 = v15;
      v21 = *(char *)(a3 + 31);
      if (v21 < 0)
      {
        v22 = *(const char **)(a3 + 8);
        v23 = *(_QWORD *)(a3 + 16) == 0;
      }
      else
      {
        v22 = (const char *)(a3 + 8);
        v23 = v21 == 0;
      }
      if (v23)
        v24 = "";
      else
        v24 = v22;
      v25 = *(_QWORD *)(a3 + 208);
      v26 = *(_QWORD *)(a3 + 216);
      v27 = *(_QWORD *)(a3 + 224);
      v28 = *(_QWORD *)(a3 + 232);
      v29 = *(_QWORD *)(a3 + 256);
      v30 = *(_QWORD *)(a3 + 264);
      v31 = *(_QWORD *)(a3 + 272);
      v32 = *(_QWORD *)(a3 + 280);
      v33 = *(_QWORD *)(a3 + 240);
      v34 = *(_QWORD *)(a3 + 248);
      v36 = *(_QWORD *)(a3 + 296);
      v35 = *(_QWORD *)(a3 + 304);
      v37 = *(_QWORD *)(a3 + 288);
      __p = (void *)68293379;
      v48 = 2082;
      v49 = "";
      v50 = 2081;
      v51 = v20;
      v52 = 2081;
      v53 = v24;
      v54 = 2049;
      v55 = v25;
      v56 = 2049;
      v57 = v26;
      v58 = 2049;
      v59 = v27;
      v60 = 2049;
      v61 = v28;
      v62 = 2049;
      v63 = v33;
      v64 = 2049;
      v65 = v29;
      v66 = 2049;
      v67 = v30;
      v68 = 2049;
      v69 = v31;
      v70 = 2049;
      v71 = v32;
      v72 = 2049;
      v73 = v34;
      v74 = 2049;
      v75 = v36;
      v76 = 2049;
      v77 = v35;
      v78 = 2049;
      v79 = v37;
      v80 = 2049;
      v81 = *((_QWORD *)&v93 + 1);
      v82 = 2049;
      v83 = v96;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousAlertPassPrecheck\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\", \"magnitude\":\"%{private}0.3f\", \"depth\":\"%{private}0.3f\", \"mmiLat\":\"%{private}0.3f\", \"mmiLon\":\"%{private}0.3f\", \"mmiLevel\":\"%{private}0.3f\", \"Magnitude\":\"%{private}0.3f\", \"FollowUpMessageValidTime\":\"%{private}0.3f\"}", (uint8_t *)&__p, 0xBCu);
    }
    if (*(char *)(a3 + 31) < 0)
    {
      sub_100004870(__dst, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a3 + 8);
      v46 = *(_QWORD *)(a3 + 24);
    }
    v38 = sub_10002D80C(a1, __dst, (uint64_t)buf, 1);
    v39 = v38;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__dst[0]);
      if (v39)
        goto LABEL_32;
    }
    else if (v38)
    {
LABEL_32:
      v40 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousAlertPassPrecheck,alert already processed\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 3, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
      goto LABEL_44;
    }
    if (*(double *)(a3 + 280) >= *((double *)&v93 + 1))
    {
      if (*(double *)(a3 + 288) >= *(double *)&v93)
      {
        v18 = 1;
LABEL_49:
        __p = &v91;
        sub_100004EC0((void ***)&__p);
        __p = &v90[8];
        sub_100004EC0((void ***)&__p);
        if ((v90[7] & 0x80000000) != 0)
          operator delete((void *)v89);
        if (SHIBYTE(v88) < 0)
          operator delete(*((void **)&v87 + 1));
        if (SBYTE7(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v85) < 0)
          operator delete(*(void **)&buf[24]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_15;
      }
      v42 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousAlertPassPrecheck,alertMMI received below threshold level\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 4, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
    }
    else
    {
      v41 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousAlertPassPrecheck,alert received below threshold level\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 5, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
    }
LABEL_44:
    if (v44 < 0)
      operator delete(v43[0]);
    if (SBYTE3(v51) < 0)
      operator delete(__p);
    v18 = 0;
    goto LABEL_49;
  }
  v17 = SALogObjectGeneral;
  v18 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,#warning,doesIgneousAlertPassPrecheck,alert parsing error\"}", buf, 0x12u);
LABEL_14:
    v18 = 0;
  }
LABEL_15:

  return v18;
}

void sub_10002D750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;

  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  sub_100032A34((uint64_t)&a50);

  _Unwind_Resume(a1);
}

uint64_t sub_10002D80C(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  double v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *__p[2];
  void *v17;
  std::string v18;
  void *v19;
  uint8_t buf[8];
  __int16 v21;
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v19 = 0;
  v8 = (double)(uint64_t)(double)time(0) + -978307200.0;
  memset(&v18, 0, sizeof(v18));
  if (a4)
    sub_100032C94(a1, 1, v8 - *(double *)(a3 + 200));
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v10 = a2;
    if (*((char *)a2 + 23) < 0)
      v10 = *a2;
    v11 = *(_QWORD *)(a3 + 200);
    v12 = *(_QWORD *)(a3 + 216);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v10;
    v25 = 2050;
    v26 = 0;
    v27 = 2050;
    v28 = v8;
    v29 = 2050;
    v30 = v11;
    v31 = 2050;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,evtTracker,\", \"uid\":%{private, location:escape_only}s, \"lastIgneousReceivedTs\":\"%{public}0.3f\", \"curTime\":\"%{public}0.3f\", \"ThresholdTimeBetweenAlerts\":\"%{public}0.3f\", \"FollowUpMessageValidTime\":\"%{public}0.3f\"}", buf, 0x44u);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v17 = a2[2];
  }
  SACommonUtils::getHashForString((char *)__p, (uint64_t *)buf);
  v13 = sub_100023260(a1, (unsigned __int8 **)buf, &v19, &v18);
  if (SBYTE3(v24) < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    if (!(_DWORD)v13)
      goto LABEL_18;
  }
  else if (!(_DWORD)v13)
  {
    goto LABEL_18;
  }
  v14 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2050;
    v24 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,evtTracker,igneousReceived\", \"lastIgneousReceivedTs\":\"%{public}0.3f\"}", buf, 0x1Cu);
  }
LABEL_18:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v13;
}

void sub_10002DA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002DAB0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  void *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  NSObject *v17;
  uint64_t v18;
  const char *v20;
  int v21;
  const char *v22;
  BOOL v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  void *v43[2];
  char v44;
  void *__dst[2];
  uint64_t v46;
  void *__p;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  unint64_t v83;
  _BYTE buf[32];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[32];
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;

  v5 = a2;
  if (*(_BYTE *)(a1 + 576))
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,#warning,doesIgneousLivabilityAlertPassPrecheck,device is in companion mode reject alert\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(&__p, "");
    sub_10002CD2C(a1, 6, buf, (uint64_t)&__p, 0.0, 0.0);
    if (SBYTE3(v51) < 0)
      operator delete(__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_14;
  }
  if ((sub_10002B5FC(a1, v5, a3) & 1) != 0)
  {
    v91 = 0u;
    v89 = 0u;
    memset(v90, 0, sizeof(v90));
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    memset(buf, 0, sizeof(buf));
    __asm { FMOV            V0.2D, #10.0 }
    v93 = _Q0;
    __asm { FMOV            V0.2D, #-1.0 }
    v94 = _Q0;
    v95 = _Q0;
    v92 = 0;
    v96 = 0xBFF0000000000000;
    v12 = sub_1000687EC();
    sub_10002AEE8((uint64_t)v12, (std::string *)buf);
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(char *)(a3 + 55);
      if (v14 < 0)
      {
        v15 = *(const char **)(a3 + 32);
        _ZF = *(_QWORD *)(a3 + 40) == 0;
      }
      else
      {
        v15 = (const char *)(a3 + 32);
        _ZF = v14 == 0;
      }
      if (_ZF)
        v20 = "";
      else
        v20 = v15;
      v21 = *(char *)(a3 + 31);
      if (v21 < 0)
      {
        v22 = *(const char **)(a3 + 8);
        v23 = *(_QWORD *)(a3 + 16) == 0;
      }
      else
      {
        v22 = (const char *)(a3 + 8);
        v23 = v21 == 0;
      }
      if (v23)
        v24 = "";
      else
        v24 = v22;
      v25 = *(_QWORD *)(a3 + 208);
      v26 = *(_QWORD *)(a3 + 216);
      v27 = *(_QWORD *)(a3 + 224);
      v28 = *(_QWORD *)(a3 + 232);
      v29 = *(_QWORD *)(a3 + 256);
      v30 = *(_QWORD *)(a3 + 264);
      v31 = *(_QWORD *)(a3 + 272);
      v32 = *(_QWORD *)(a3 + 280);
      v33 = *(_QWORD *)(a3 + 240);
      v34 = *(_QWORD *)(a3 + 248);
      v36 = *(_QWORD *)(a3 + 296);
      v35 = *(_QWORD *)(a3 + 304);
      v37 = *(_QWORD *)(a3 + 288);
      __p = (void *)68293379;
      v48 = 2082;
      v49 = "";
      v50 = 2081;
      v51 = v20;
      v52 = 2081;
      v53 = v24;
      v54 = 2049;
      v55 = v25;
      v56 = 2049;
      v57 = v26;
      v58 = 2049;
      v59 = v27;
      v60 = 2049;
      v61 = v28;
      v62 = 2049;
      v63 = v33;
      v64 = 2049;
      v65 = v29;
      v66 = 2049;
      v67 = v30;
      v68 = 2049;
      v69 = v31;
      v70 = 2049;
      v71 = v32;
      v72 = 2049;
      v73 = v34;
      v74 = 2049;
      v75 = v36;
      v76 = 2049;
      v77 = v35;
      v78 = 2049;
      v79 = v37;
      v80 = 2049;
      v81 = *((_QWORD *)&v93 + 1);
      v82 = 2049;
      v83 = v96;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousLivabilityAlertPassPrecheck\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\", \"magnitude\":\"%{private}0.3f\", \"depth\":\"%{private}0.3f\", \"mmiLat\":\"%{private}0.3f\", \"mmiLon\":\"%{private}0.3f\", \"mmiLevel\":\"%{private}0.3f\", \"Magnitude\":\"%{private}0.3f\", \"FollowUpMessageValidTime\":\"%{private}0.3f\"}", (uint8_t *)&__p, 0xBCu);
    }
    if (*(char *)(a3 + 31) < 0)
    {
      sub_100004870(__dst, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a3 + 8);
      v46 = *(_QWORD *)(a3 + 24);
    }
    v38 = sub_10002D80C(a1, __dst, (uint64_t)buf, 1);
    v39 = v38;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__dst[0]);
      if (v39)
        goto LABEL_32;
    }
    else if (v38)
    {
LABEL_32:
      v40 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousLivabilityAlertPassPrecheck,alert already processed\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 3, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
      goto LABEL_44;
    }
    if (*(double *)(a3 + 280) >= *((double *)&v93 + 1))
    {
      if (*(double *)(a3 + 288) >= *(double *)&v93)
      {
        v18 = 1;
LABEL_49:
        __p = &v91;
        sub_100004EC0((void ***)&__p);
        __p = &v90[8];
        sub_100004EC0((void ***)&__p);
        if ((v90[7] & 0x80000000) != 0)
          operator delete((void *)v89);
        if (SHIBYTE(v88) < 0)
          operator delete(*((void **)&v87 + 1));
        if (SBYTE7(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v85) < 0)
          operator delete(*(void **)&buf[24]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_15;
      }
      v42 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousLivabilityAlertPassPrecheck,alertMMI received below threshold level\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 4, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
    }
    else
    {
      v41 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousLivabilityAlertPassPrecheck,alert received below threshold level\"}", (uint8_t *)&__p, 0x12u);
      }
      sub_10000E8A0(&__p, "");
      sub_10000E8A0(v43, "");
      sub_10002CD2C(a1, 5, (char *)&__p, (uint64_t)v43, 0.0, 0.0);
    }
LABEL_44:
    if (v44 < 0)
      operator delete(v43[0]);
    if (SBYTE3(v51) < 0)
      operator delete(__p);
    v18 = 0;
    goto LABEL_49;
  }
  v17 = SALogObjectGeneral;
  v18 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,#warning,doesIgneousLivabilityAlertPassPrecheck,alert parsing error\"}", buf, 0x12u);
LABEL_14:
    v18 = 0;
  }
LABEL_15:

  return v18;
}

void sub_10002E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;

  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  sub_100032A34((uint64_t)&a50);

  _Unwind_Resume(a1);
}

BOOL sub_10002E1E8(uint64_t a1, uint64_t a2)
{
  void *v10;
  double Current;
  NSObject *v12;
  uint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  void *__p[2];
  char v19;
  _BYTE v20[32];
  __int128 v21;
  void *v22[2];
  void *v23[2];
  __int128 v24;
  void *v25[2];
  _BYTE v26[32];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;

  v27 = 0u;
  memset(v26, 0, sizeof(v26));
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)v23 = 0u;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  __asm { FMOV            V0.2D, #10.0 }
  v29 = _Q0;
  __asm { FMOV            V0.2D, #-1.0 }
  v30 = _Q0;
  v31 = _Q0;
  v28 = 0;
  v32 = 0xBFF0000000000000;
  v10 = sub_1000687EC();
  sub_10002AEE8((uint64_t)v10, (std::string *)v20);
  Current = CFAbsoluteTimeGetCurrent();
  v12 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)buf = 68289538;
    v34 = 2082;
    v35 = "";
    v36 = 2050;
    v37 = Current;
    v38 = 2050;
    v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isStaleAlert\", \"nowSeconds\":\"%{public}0.3f\", \"egressTime\":\"%{public}0.3f\"}", buf, 0x26u);
  }
  v14 = vabdd_f64(Current, *(double *)(a2 + 216));
  v15 = *((double *)&v31 + 1);
  if (v14 > *((double *)&v31 + 1))
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      v34 = 2082;
      v35 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isStaleAlert,stale alert received\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(__p, "");
    sub_10002CD2C(a1, 8, (char *)buf, (uint64_t)__p, 0.0, 0.0);
    if (v19 < 0)
      operator delete(__p[0]);
    if (SBYTE3(v37) < 0)
      operator delete(*(void **)buf);
  }
  *(_QWORD *)buf = &v27;
  sub_100004EC0((void ***)buf);
  *(_QWORD *)buf = &v26[8];
  sub_100004EC0((void ***)buf);
  if ((v26[7] & 0x80000000) != 0)
    operator delete(v25[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(*(void **)&v20[24]);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  return v14 > v15;
}

void sub_10002E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 105) < 0)
    operator delete(*(void **)(v16 - 128));
  sub_100032A34((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E4B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  char *v38;
  void **v39;
  void **v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  const char *v55;
  NSObject *v56;
  double v57;
  _BOOL4 v58;
  NSObject *v59;
  _BOOL4 v60;
  const char *v61;
  const char *v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *__p[2];
  char v71;
  _BYTE buf[28];
  __int16 v73;
  const char *v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  id v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;

  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 576))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,#warning,device is in companion mode reject alert\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(__p, "");
    sub_10002CD2C(a1, 10, buf, (uint64_t)__p, 0.0, 0.0);
LABEL_5:
    if (v71 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_17;
  }
  if (!v5)
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,null alert\"}", buf, 0x12u);
    }
    sub_10000E8A0(buf, "");
    sub_10000E8A0(__p, "");
    sub_10002CD2C(a1, 7, buf, (uint64_t)__p, 0.0, 0.0);
    goto LABEL_5;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("alert")));
  if (v8)
  {
    v9 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("source")));
      if (v10 && (v11 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
        v12 = v10;
      else
        v12 = 0;

      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2113;
        *(_QWORD *)&buf[20] = v12;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert\", \"testSource\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (v12)
      {
        v18 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("uid")));
        if (v18)
        {
          v19 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("ingress_to_server_timestamp")));
            if (v20 && (v21 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v20, v21) & 1) != 0))
              v69 = v20;
            else
              v69 = 0;

            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("egress_from_source_timestamp")));
            if (v24 && (v25 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v24, v25) & 1) != 0))
              v68 = v24;
            else
              v68 = 0;

            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("event_origin_timestamp")));
            if (v26 && (v27 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v26, v27) & 1) != 0))
              v67 = v26;
            else
              v67 = 0;

            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("effective")));
            if (v28 && (v29 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v28, v29) & 1) != 0))
              v65 = v28;
            else
              v65 = 0;

            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("expires")));
            if (v30 && (v31 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v30, v31) & 1) != 0))
              v66 = v30;
            else
              v66 = 0;

            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("epi_latitude")));
            if (v32 && (v33 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v32, v33) & 1) != 0))
              v64 = v32;
            else
              v64 = 0;

            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("epi_longitude")));
            if (v34 && (v35 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v34, v35) & 1) != 0))
              v36 = v34;
            else
              v36 = 0;

            sub_10002AFB0(v8, a3);
            v37 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68291331;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2113;
              *(_QWORD *)&buf[20] = v12;
              v73 = 2113;
              v74 = v18;
              v75 = 2113;
              v76 = *(double *)&v69;
              v77 = 2113;
              v78 = *(double *)&v68;
              v79 = 2113;
              v80 = *(double *)&v67;
              v81 = 2113;
              v82 = *(double *)&v65;
              v83 = 2113;
              v84 = *(double *)&v66;
              v85 = 2113;
              v86 = v64;
              v87 = 2113;
              v88 = *(double *)&v36;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert\", \"source\":%{private, location:escape_only}@, \"uid\":%{private, location:escape_only}@, \"ingress_to_server_ts\":%{private, location:escape_only}@, \"egress_from_source_ts\":%{private, location:escape_only}@, \"event_origin_ts\":%{private, location:escape_only}@, \"effective\":%{private, location:escape_only}@, \"expires\":%{private, location:escape_only}@, \"epi_latitude\":%{private, location:escape_only}@, \"epi_longitude\":%{private, location:escape_only}@}", buf, 0x6Cu);
            }
            *(_DWORD *)(a3 + 204) = 2;
            v38 = objc_retainAutorelease(v18);
            sub_10000E8A0(buf, (char *)objc_msgSend(v38, "UTF8String"));
            v39 = (void **)(a3 + 8);
            if (*(char *)(a3 + 31) < 0)
              operator delete(*v39);
            *(_OWORD *)v39 = *(_OWORD *)buf;
            *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
            sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"));
            v40 = (void **)(a3 + 32);
            if (*(char *)(a3 + 55) < 0)
              operator delete(*v40);
            *(_OWORD *)v40 = *(_OWORD *)buf;
            *(_QWORD *)(a3 + 48) = *(_QWORD *)&buf[16];
            objc_msgSend(v69, "doubleValue");
            *(double *)(a3 + 208) = v41 + -978307200.0;
            objc_msgSend(v68, "doubleValue");
            *(double *)(a3 + 216) = v42 + -978307200.0;
            objc_msgSend(v66, "doubleValue");
            *(double *)(a3 + 240) = v43 + -978307200.0;
            objc_msgSend(v67, "doubleValue");
            *(double *)(a3 + 224) = v44 + -978307200.0;
            objc_msgSend(v65, "doubleValue");
            *(double *)(a3 + 232) = v45 + -978307200.0;
            objc_msgSend(v64, "doubleValue");
            *(_QWORD *)(a3 + 264) = v46;
            objc_msgSend(v36, "doubleValue");
            v48 = v47;
            *(double *)(a3 + 272) = v47;
            v49 = *(double *)(a3 + 208);
            if (fabs(v49) >= 2.22044605e-16
              && (v50 = *(double *)(a3 + 216), fabs(v50) >= 2.22044605e-16)
              && (v51 = *(double *)(a3 + 240), fabs(v51) >= 2.22044605e-16)
              && (v52 = *(double *)(a3 + 232), fabs(v52) >= 2.22044605e-16)
              && (v53 = *(double *)(a3 + 224), fabs(v53) >= 2.22044605e-16))
            {
              v57 = *(double *)(a3 + 264);
              v58 = v57 == 0.0 && v47 == 0.0;
              v59 = SALogObjectGeneral;
              v60 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
              if (v48 <= 180.0 && v48 >= -180.0 && v57 <= 90.0 && v57 >= -90.0 && !v58)
              {
                if (v60)
                {
                  v61 = *(const char **)(a3 + 32);
                  if (!v61)
                    v61 = "";
                  if (*(char *)(a3 + 55) >= 0)
                    v61 = (const char *)(a3 + 32);
                  v62 = *(const char **)(a3 + 8);
                  if (!v62)
                    v62 = "";
                  v63 = *(void **)(a3 + 256);
                  if (*(char *)(a3 + 31) >= 0)
                    v62 = (const char *)(a3 + 8);
                  *(_DWORD *)buf = 68291587;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2081;
                  *(_QWORD *)&buf[20] = v61;
                  v73 = 2081;
                  v74 = v62;
                  v75 = 2049;
                  v76 = v49;
                  v77 = 2049;
                  v78 = v50;
                  v79 = 2049;
                  v80 = v53;
                  v81 = 2049;
                  v82 = v52;
                  v83 = 2049;
                  v84 = v51;
                  v85 = 2049;
                  v86 = v63;
                  v87 = 2049;
                  v88 = v57;
                  v89 = 2049;
                  v90 = v48;
                  _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\"}", buf, 0x76u);
                }
                v14 = 1;
                goto LABEL_83;
              }
              if (!v60)
                goto LABEL_82;
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              v55 = "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,location invalid\"}";
              v56 = v59;
            }
            else
            {
              v54 = SALogObjectGeneral;
              v14 = 0;
              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
LABEL_83:

LABEL_42:
                goto LABEL_18;
              }
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              v55 = "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,time invalid\"}";
              v56 = v54;
            }
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v55, buf, 0x12u);
LABEL_82:
            v14 = 0;
            goto LABEL_83;
          }
        }

        v22 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,uid nil\"}", buf, 0x12u);
        }
        sub_10000E8A0(buf, "");
        sub_10000E8A0(__p, "");
        sub_10002CD2C(a1, 2, buf, (uint64_t)__p, 0.0, 0.0);
      }
      else
      {
        v23 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,testSource nil\"}", buf, 0x12u);
        }
        sub_10000E8A0(buf, "");
        sub_10000E8A0(__p, "");
        sub_10002CD2C(a1, 1, buf, (uint64_t)__p, 0.0, 0.0);
      }
      if (v71 < 0)
        operator delete(__p[0]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v14 = 0;
      goto LABEL_42;
    }
  }

  v13 = SALogObjectGeneral;
  v14 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,readIgneousPerformanceTestAlert,jsondict nil\"}", buf, 0x12u);
LABEL_17:
    v14 = 0;
  }
LABEL_18:

  return v14;
}

void sub_10002F028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t sub_10002F208(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  NSObject *v30;
  uint64_t *v31;
  void **v32;
  int v33;
  void *v34;
  void **v35;
  void *v36;
  uint64_t *v37;
  size_t v38;
  NSObject *v40;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  id v45;
  int v46;
  NSObject *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  NSObject *v69;
  void **v70;
  void **v71;
  void **v72;
  char *v73;
  void **v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  const char *v88;
  NSObject *v89;
  double v90;
  _BOOL4 v91;
  _BOOL4 v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  void *v99;
  NSObject *log;
  char *v101;
  double v102;
  id v103;
  id v104;
  double v105;
  double v106;
  double v107;
  double v108;
  char v109;
  double v110;
  id v111;
  id v112;
  id v113;
  double v114;
  void *__p[2];
  char v116;
  void *v117[2];
  unsigned __int8 v118;
  _BYTE buf[28];
  __int16 v120;
  void **v121;
  __int16 v122;
  const char *v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  __int16 v136;
  id v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  _BYTE v142[32];
  __int128 v143;
  void *v144[2];
  void *v145[2];
  __int128 v146;
  void *v147[2];
  _OWORD v148[2];
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;

  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 576))
  {
    v7 = SALogObjectGeneral;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v142 = 68289026;
      *(_DWORD *)&v142[4] = 0;
      *(_WORD *)&v142[8] = 2082;
      *(_QWORD *)&v142[10] = "";
      v9 = "{\"msg%{public}.0s\":\"#iap,#warning,doesIgneousFollowUpAlertPassPrecheck,device is in companion mode reject alert\"}";
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v142, 0x12u);
      v8 = 0;
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  if (!v5)
  {
    v7 = SALogObjectGeneral;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v142 = 68289026;
      *(_DWORD *)&v142[4] = 0;
      *(_WORD *)&v142[8] = 2082;
      *(_QWORD *)&v142[10] = "";
      v9 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,null alert\"}";
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("alert")));
  if (v10)
  {
    v11 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
    {
      v12 = v10;

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("source")));
      if (!v13 || (v14 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v13, v14) & 1) == 0))
      {

        v42 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v142 = 68289026;
          *(_DWORD *)&v142[4] = 0;
          *(_WORD *)&v142[8] = 2082;
          *(_QWORD *)&v142[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,testSource nil\"}", v142, 0x12u);
          v8 = 0;
        }
        goto LABEL_83;
      }
      v15 = v13;

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("uid")));
      if (!v16 || (v17 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v16, v17) & 1) == 0))
      {

        v43 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v142 = 68289026;
          *(_DWORD *)&v142[4] = 0;
          *(_WORD *)&v142[8] = 2082;
          *(_QWORD *)&v142[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,uid nil\"}", v142, 0x12u);
          v8 = 0;
        }
        goto LABEL_82;
      }
      v18 = v16;

      v113 = v15;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("type")));
      if (!v19 || (v20 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v19, v20) & 1) == 0))
      {

        v44 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v142 = 68289026;
          *(_DWORD *)&v142[4] = 0;
          *(_WORD *)&v142[8] = 2082;
          *(_QWORD *)&v142[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,ref type nil\"}", v142, 0x12u);
          v8 = 0;
        }
        goto LABEL_81;
      }
      v21 = v19;

      v111 = objc_retainAutorelease(v21);
      v112 = v18;
      sub_10000E8A0(v117, (char *)objc_msgSend(v111, "UTF8String"));
      v149 = 0u;
      *(_OWORD *)v147 = 0u;
      memset(v148, 0, sizeof(v148));
      *(_OWORD *)v145 = 0u;
      v146 = 0u;
      v143 = 0u;
      *(_OWORD *)v144 = 0u;
      memset(v142, 0, sizeof(v142));
      __asm { FMOV            V0.2D, #10.0 }
      v151 = _Q0;
      __asm { FMOV            V0.2D, #-1.0 }
      v152 = _Q0;
      v153 = _Q0;
      v150 = 0;
      v154 = 0xBFF0000000000000;
      v27 = sub_1000687EC();
      sub_10002AEE8((uint64_t)v27, (std::string *)v142);
      v29 = (uint64_t *)*((_QWORD *)&v149 + 1);
      v28 = (uint64_t *)v149;
      if ((_QWORD)v149 == *((_QWORD *)&v149 + 1))
      {
LABEL_65:
        v47 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v48 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,type not found in alert\"}";
          goto LABEL_67;
        }
LABEL_68:
        *(_QWORD *)buf = &v149;
        sub_100004EC0((void ***)buf);
        *(_QWORD *)buf = (char *)v148 + 8;
        sub_100004EC0((void ***)buf);
        if (SBYTE7(v148[0]) < 0)
          operator delete(v147[0]);
        if (SHIBYTE(v146) < 0)
          operator delete(v145[1]);
        if (SHIBYTE(v145[0]) < 0)
          operator delete(v144[0]);
        if (SHIBYTE(v143) < 0)
          operator delete(*(void **)&v142[24]);
        if ((v142[23] & 0x80000000) != 0)
          operator delete(*(void **)v142);
        if ((char)v118 < 0)
          operator delete(v117[0]);

        v18 = v112;
LABEL_81:

        v15 = v113;
LABEL_82:

LABEL_83:
        goto LABEL_52;
      }
      v109 = 0;
      do
      {
        while (1)
        {
          v30 = (id)SALogObjectGeneral;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            v31 = v28;
            if (*((char *)v28 + 23) < 0)
              v31 = (uint64_t *)*v28;
            if ((v118 & 0x80u) == 0)
              v32 = v117;
            else
              v32 = (void **)v117[0];
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2081;
            *(_QWORD *)&buf[20] = v31;
            v120 = 2081;
            v121 = v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,type\", \"pKey\":%{private, location:escape_only}s, \"AlertKey\":%{private, location:escape_only}s}", buf, 0x26u);
          }

          v33 = *((char *)v28 + 23);
          v34 = (v118 & 0x80u) == 0 ? (void *)v118 : v117[1];
          v35 = (v118 & 0x80u) == 0 ? v117 : (void **)v117[0];
          v36 = v33 >= 0 ? (void *)*((unsigned __int8 *)v28 + 23) : (void *)v28[1];
          v37 = v33 >= 0 ? v28 : (uint64_t *)*v28;
          v38 = (size_t)(v36 >= v34 ? v34 : v36);
          if (memcmp(v35, v37, v38) || v36 != v34)
            break;
          v40 = (id)SALogObjectGeneral;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,Alert for production environment\"}", buf, 0x12u);
          }

          v28 += 3;
          v109 = 1;
          if (v28 == v29)
            goto LABEL_60;
        }
        v28 += 3;
      }
      while (v28 != v29);
      if ((v109 & 1) == 0)
        goto LABEL_65;
LABEL_60:
      v45 = objc_retainAutorelease(v112);
      sub_10000E8A0(__p, (char *)objc_msgSend(v45, "UTF8String"));
      v46 = sub_1000304D0(a1, __p, (uint64_t)v142);
      if (v116 < 0)
        operator delete(__p[0]);
      if (v46)
      {
        v47 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v48 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,followUp alert already processed\"}";
LABEL_67:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v48, buf, 0x12u);
          v8 = 0;
          goto LABEL_68;
        }
        goto LABEL_68;
      }
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("English")));
      if (!v49 || (v50 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v49, v50) & 1) == 0))
      {

        v47 = SALogObjectGeneral;
        v8 = 0;
        if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          goto LABEL_68;
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v48 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,englishText nil\"}";
        goto LABEL_67;
      }
      v51 = v49;

      v52 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("Spanish")));
      if (v52 && (v53 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v52, v53) & 1) != 0))
      {
        v101 = v52;
      }
      else
      {

        v54 = (id)SALogObjectGeneral;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,spanishText nil\"}", buf, 0x12u);
        }

        v101 = (char *)v51;
      }
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("ingress_to_server_timestamp")));
      if (v55 && (v56 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v55, v56) & 1) != 0))
        v114 = COERCE_DOUBLE(v55);
      else
        v114 = 0.0;

      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("egress_from_source_timestamp")));
      if (v57 && (v58 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v57, v58) & 1) != 0))
        v110 = COERCE_DOUBLE(v57);
      else
        v110 = 0.0;

      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("event_origin_timestamp")));
      if (v59 && (v60 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v59, v60) & 1) != 0))
        v108 = COERCE_DOUBLE(v59);
      else
        v108 = 0.0;

      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("effective")));
      if (v61 && (v62 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v61, v62) & 1) != 0))
        v105 = COERCE_DOUBLE(v61);
      else
        v105 = 0.0;

      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("expires")));
      if (v63 && (v64 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v63, v64) & 1) != 0))
        v107 = COERCE_DOUBLE(v63);
      else
        v107 = 0.0;

      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("epi_latitude")));
      if (v65 && (v66 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v65, v66) & 1) != 0))
        v104 = v65;
      else
        v104 = 0;

      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("epi_longitude")));
      if (v67 && (v68 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v67, v68) & 1) != 0))
        v106 = COERCE_DOUBLE(v67);
      else
        v106 = 0.0;

      v69 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68291843;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2113;
        *(_QWORD *)&buf[20] = v113;
        v120 = 2113;
        v121 = (void **)v45;
        v122 = 2113;
        v123 = (const char *)v51;
        v124 = 2113;
        v125 = v101;
        v126 = 2113;
        v127 = v114;
        v128 = 2113;
        v129 = v110;
        v130 = 2113;
        v131 = v108;
        v132 = 2113;
        v133 = v105;
        v134 = 2113;
        v135 = v107;
        v136 = 2113;
        v137 = v104;
        v138 = 2113;
        v139 = v106;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck\", \"source\":%{private, location:escape_only}@, \"uid\":%{private, location:escape_only}@, \"englishText\":%{private, location:escape_only}@, \"spanishText\":%{private, location:escape_only}@, \"ingress_to_server_ts\":%{private, location:escape_only}@, \"egress_from_source_ts\":%{private, location:escape_only}@, \"event_origin_ts\":%{private, location:escape_only}@, \"effective\":%{private, location:escape_only}@, \"expires\":%{private, location:escape_only}@, \"epi_latitude\":%{private, location:escape_only}@, \"epi_longitude\":%{private, location:escape_only}@}", buf, 0x80u);
      }

      *(_DWORD *)(a3 + 204) = 3;
      sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v45), "UTF8String"));
      v70 = (void **)(a3 + 8);
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v70);
      *(_OWORD *)v70 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v113), "UTF8String"));
      v71 = (void **)(a3 + 32);
      if (*(char *)(a3 + 55) < 0)
        operator delete(*v71);
      *(_OWORD *)v71 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 48) = *(_QWORD *)&buf[16];
      v103 = objc_retainAutorelease(v51);
      sub_10000E8A0(buf, (char *)objc_msgSend(v103, "UTF8String"));
      v72 = (void **)(a3 + 80);
      if (*(char *)(a3 + 103) < 0)
        operator delete(*v72);
      *(_OWORD *)v72 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 96) = *(_QWORD *)&buf[16];
      v73 = objc_retainAutorelease(v101);
      sub_10000E8A0(buf, (char *)objc_msgSend(v73, "UTF8String"));
      v74 = (void **)(a3 + 104);
      if (*(char *)(a3 + 127) < 0)
        operator delete(*v74);
      *(_OWORD *)v74 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 120) = *(_QWORD *)&buf[16];
      objc_msgSend(*(id *)&v114, "doubleValue");
      *(double *)(a3 + 208) = v75 + -978307200.0;
      objc_msgSend(*(id *)&v110, "doubleValue");
      *(double *)(a3 + 216) = v76 + -978307200.0;
      objc_msgSend(*(id *)&v107, "doubleValue");
      *(double *)(a3 + 240) = v77 + -978307200.0;
      objc_msgSend(*(id *)&v108, "doubleValue");
      *(double *)(a3 + 224) = v78 + -978307200.0;
      objc_msgSend(*(id *)&v105, "doubleValue");
      *(double *)(a3 + 232) = v79 + -978307200.0;
      objc_msgSend(v104, "doubleValue");
      *(_QWORD *)(a3 + 264) = v80;
      objc_msgSend(*(id *)&v106, "doubleValue");
      v102 = v81;
      *(double *)(a3 + 272) = v81;
      v82 = *(double *)(a3 + 208);
      if (fabs(v82) >= 2.22044605e-16
        && (v83 = *(double *)(a3 + 216), fabs(v83) >= 2.22044605e-16)
        && (v84 = *(double *)(a3 + 240), fabs(v84) >= 2.22044605e-16)
        && (v85 = *(double *)(a3 + 232), fabs(v85) >= 2.22044605e-16)
        && (v86 = *(double *)(a3 + 224), fabs(v86) >= 2.22044605e-16))
      {
        v90 = *(double *)(a3 + 264);
        v91 = v90 == 0.0 && v81 == 0.0;
        log = SALogObjectGeneral;
        v92 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
        if (v102 <= 180.0 && v102 >= -180.0 && v90 <= 90.0 && v90 >= -90.0 && !v91)
        {
          if (v92)
          {
            v93 = *(const char **)(a3 + 32);
            if (!v93)
              v93 = "";
            if (*(char *)(a3 + 55) >= 0)
              v94 = (const char *)(a3 + 32);
            else
              v94 = v93;
            v95 = *(const char **)(a3 + 8);
            if (!v95)
              v95 = "";
            if (*(char *)(a3 + 31) >= 0)
              v96 = (const char *)(a3 + 8);
            else
              v96 = v95;
            v97 = " ";
            if (*(char *)(a3 + 103) < 0)
            {
              if (*(_QWORD *)(a3 + 88))
                v98 = *(const char **)(a3 + 80);
              else
                v98 = " ";
            }
            else if (*(_BYTE *)(a3 + 103))
            {
              v98 = (const char *)(a3 + 80);
            }
            else
            {
              v98 = " ";
            }
            if (*(char *)(a3 + 127) < 0)
            {
              if (*(_QWORD *)(a3 + 112))
                v97 = *(const char **)(a3 + 104);
            }
            else if (*(_BYTE *)(a3 + 127))
            {
              v97 = (const char *)(a3 + 104);
            }
            v99 = *(void **)(a3 + 256);
            *(_DWORD *)buf = 68292099;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2081;
            *(_QWORD *)&buf[20] = v94;
            v120 = 2081;
            v121 = (void **)v96;
            v122 = 2081;
            v123 = v98;
            v124 = 2081;
            v125 = v97;
            v126 = 2049;
            v127 = v82;
            v128 = 2049;
            v129 = v83;
            v130 = 2049;
            v131 = v86;
            v132 = 2049;
            v133 = v85;
            v134 = 2049;
            v135 = v84;
            v136 = 2049;
            v137 = v99;
            v138 = 2049;
            v139 = v90;
            v140 = 2049;
            v141 = v102;
            _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"alertEnglish\":%{private, location:escape_only}s, \"alertSpanish\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\"}", buf, 0x8Au);
          }
          v8 = 1;
          goto LABEL_141;
        }
        if (!v92)
          goto LABEL_140;
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v88 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,location invalid\"}";
        v89 = log;
      }
      else
      {
        v87 = SALogObjectGeneral;
        v8 = 0;
        if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
LABEL_141:

          goto LABEL_68;
        }
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v88 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,time invalid\"}";
        v89 = v87;
      }
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, v88, buf, 0x12u);
LABEL_140:
      v8 = 0;
      goto LABEL_141;
    }
  }

  v7 = SALogObjectGeneral;
  v8 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v142 = 68289026;
    *(_DWORD *)&v142[4] = 0;
    *(_WORD *)&v142[8] = 2082;
    *(_QWORD *)&v142[10] = "";
    v9 = "{\"msg%{public}.0s\":\"#iap,doesIgneousFollowUpAlertPassPrecheck,jsondict nil\"}";
    goto LABEL_51;
  }
LABEL_52:

  return v8;
}

void sub_1000302C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  void *v57;

  sub_100032A34((uint64_t)&a55);
  if (a36 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1000304D0(uint64_t a1, void **a2, uint64_t a3)
{
  double v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *__p[2];
  void *v16;
  std::string v17;
  void *v18;
  uint8_t buf[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  v6 = (double)(uint64_t)(double)time(0) + -978307200.0;
  v18 = 0;
  memset(&v17, 0, sizeof(v17));
  v7 = a1 + 192;
  sub_100032C94(v7, 1, v6 - *(double *)(a3 + 216));
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a2;
    if (*((char *)a2 + 23) < 0)
      v9 = *a2;
    v10 = *(_QWORD *)(a3 + 200);
    v11 = *(_QWORD *)(a3 + 216);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2081;
    v23 = v9;
    v24 = 2050;
    v25 = 0;
    v26 = 2050;
    v27 = v6;
    v28 = 2050;
    v29 = v10;
    v30 = 2050;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,evtTracker,\", \"uid\":%{private, location:escape_only}s, \"lastIgneousReceivedTs\":\"%{public}0.3f\", \"curTime\":\"%{public}0.3f\", \"ThresholdTimeBetweenAlerts\":\"%{public}0.3f\", \"FollowUpMessageValidTime\":\"%{public}0.3f\"}", buf, 0x44u);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = a2[2];
  }
  SACommonUtils::getHashForString((char *)__p, (uint64_t *)buf);
  v12 = sub_100023260(v7, (unsigned __int8 **)buf, &v18, &v17);
  if (SBYTE3(v23) < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if (!(_DWORD)v12)
      goto LABEL_16;
  }
  else if (!(_DWORD)v12)
  {
    goto LABEL_16;
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,evtTracker,igneousFollowUpReceived\", \"lastIgneousReceivedTs\":\"%{public}0.3f\"}", buf, 0x1Cu);
  }
LABEL_16:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v12;
}

void sub_100030724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100030770(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  SACommonUtils *v11;
  NSObject *v12;
  void **v13;
  double Current;
  NSObject *v15;
  void **v16;
  NSObject *v17;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  double v23;
  _BYTE v24[10];
  __int16 v25;
  void **v26;
  __int16 v27;
  _QWORD __p[3];
  char v29;
  const __CFString *v30;
  void *v31;
  uint8_t buf[4];
  int v33;
  _DWORD v34[8];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[25];
  uint64_t v53;
  char v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 68289283;
    v33 = 0;
    LOWORD(v34[0]) = 2082;
    *(_QWORD *)((char *)v34 + 2) = "";
    HIWORD(v34[2]) = 2081;
    *(_QWORD *)&v34[3] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousReceived\", \"igneousUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  buf[0] = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v46 = 1;
  v53 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  memset(v52, 0, sizeof(v52));
  v54 = -1;
  v55 = 0;
  v56 = -4131;
  v57 = 0;
  v58 = 0;
  v7 = sub_10007FD14((SAPlatformInfo *)v5);
  if (*(_BYTE *)(a2 + 200))
    v8 = v7;
  else
    v8 = 0;
  if (v8 != 1)
    goto LABEL_19;
  if ((*(char *)(a2 + 199) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 199))
    {
      v30 = CFSTR("BleUIDKeyString");
      v9 = a2 + 176;
      goto LABEL_14;
    }
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  if (!*(_QWORD *)(a2 + 184))
    goto LABEL_19;
  v30 = CFSTR("BleUIDKeyString");
  v9 = *(_QWORD *)(a2 + 176);
LABEL_14:
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  v31 = v10;
  v11 = (SACommonUtils *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));

  v12 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 199) >= 0)
      v13 = (void **)(a2 + 176);
    else
      v13 = *(void ***)(a2 + 176);
    *(_QWORD *)&v23 = 68289539;
    *(_WORD *)v24 = 2082;
    *(_QWORD *)&v24[2] = "";
    v25 = 2081;
    v26 = v13;
    v27 = 2113;
    __p[0] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousReceived\", \"bleAlertUID\":%{private, location:escape_only}s, \"bleUID\":%{private, location:escape_only}@}", (uint8_t *)&v23, 0x26u);
  }
LABEL_20:
  Current = CFAbsoluteTimeGetCurrent();
  SACommonUtils::convertDictionaryToString(v11, (uint64_t)v21);
  v15 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v16 = v21;
    if (v22 < 0)
      v16 = (void **)v21[0];
    *(_QWORD *)&v23 = 68289283;
    *(_WORD *)v24 = 2082;
    *(_QWORD *)&v24[2] = "";
    v25 = 2081;
    v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousReceived\", \"metaValueStr.c_str()\":%{private, location:escape_only}s}", (uint8_t *)&v23, 0x1Cu);
  }
  SACommonUtils::getHashForString((char *)(a2 + 8), (uint64_t *)v19);
  sub_100025280((uint64_t)&v23, (__int128 *)v19, (__int128 *)v21, Current);
  sub_100030BDC(a1, &v23);
  if (v29 < 0)
    operator delete(*(void **)((char *)__p + 2));
  if (SBYTE1(__p[0]) < 0)
    operator delete(*(void **)v24);
  if (v20 < 0)
    operator delete(v19[0]);
  v17 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v23 = 68289026;
    *(_WORD *)v24 = 2082;
    *(_QWORD *)&v24[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousReceived done\"}", (uint8_t *)&v23, 0x12u);
  }
  if (v22 < 0)
    operator delete(v21[0]);

  return sub_100032ACC((uint64_t)buf);
}

void sub_100030B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  sub_100032ACC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

_QWORD *sub_100030BDC(uint64_t a1, double *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[4];

  v21[0] = off_1000F26E8;
  v21[1] = a1;
  v22 = v21;
  v19[0] = off_1000F2768;
  v19[1] = a1;
  v20 = v19;
  sub_10001177C((uint64_t)v23, (uint64_t)v21, (uint64_t)v19);
  v4 = v20;
  if (v20 == v19)
  {
    v5 = 4;
    v4 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v22;
  if (v22 == v21)
  {
    v7 = 4;
    v6 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v12[0] = 68289539;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v9;
    v17 = 2081;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,update\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)v12, 0x26u);
  }
  sub_100024474(a1, a2);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 71))
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 56))
LABEL_21:
    sub_1000246F8((char *)a1);
LABEL_22:
  if (!*(_BYTE *)(a1 + 1) && !*(_BYTE *)(a1 + 185))
    sub_1000254A8(a1);
  return sub_100012184(v23);
}

void sub_100030DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_100030E2C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  double Current;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  double buf;
  _BYTE v12[10];
  __int16 v13;
  uint64_t v14;
  char v15;
  void *__p;
  char v17;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&buf = 68289283;
    *(_WORD *)v12 = 2082;
    *(_QWORD *)&v12[2] = "";
    v13 = 2081;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousFollowUpReceived\", \"igneousUID\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_10000E8A0(v9, "");
  SACommonUtils::getHashForString((char *)(a2 + 8), (uint64_t *)v7);
  sub_100025280((uint64_t)&buf, (__int128 *)v7, (__int128 *)v9, Current);
  sub_100030BDC(a1 + 192, &buf);
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(*(void **)v12);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_100030F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_100023B48((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100030FE4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  _BOOL8 v4;
  int v5;
  SAPlatformInfo *v6;
  NSObject *v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  NSObject *v23;
  uint64_t *v24;
  void **v25;
  int v26;
  void *v27;
  void **v28;
  void *v29;
  uint64_t *v30;
  size_t v31;
  NSObject *v33;
  NSObject *v34;
  id v35;
  void *v36[2];
  unsigned __int8 v37;
  uint8_t v38[8];
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  void **v44;
  _BYTE buf[32];
  __int128 v46;
  void *v47[2];
  __int128 v48;
  __int128 v49;
  __int128 __p;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;

  v2 = a2;
  v3 = (id)SALogObjectGeneral;
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *((unsigned __int8 *)SAPlatformInfo::instance((SAPlatformInfo *)v4) + 9);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesAlertPassesProductionCheck\", \"InternalInstall\":%{public}hhd}", buf, 0x18u);
  }

  if (*((_BYTE *)SAPlatformInfo::instance(v6) + 9))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesAlertPassesProductionCheck,not in prod\"}", buf, 0x12u);
    }
    v8 = 1;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("alert")));
    if (v10 && (v11 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("productionId")));
      if (v12 && (v13 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v12, v13) & 1) != 0))
      {
        v14 = objc_retainAutorelease(v12);
        sub_10000E8A0(v36, (char *)objc_msgSend(v14, "UTF8String"));
        v52 = 0u;
        v53 = 0u;
        __p = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        *(_OWORD *)v47 = 0u;
        memset(buf, 0, sizeof(buf));
        __asm { FMOV            V0.2D, #10.0 }
        v55 = _Q0;
        __asm { FMOV            V0.2D, #-1.0 }
        v56 = _Q0;
        v57 = _Q0;
        v54 = 0;
        v58 = 0xBFF0000000000000;
        v20 = sub_1000687EC();
        sub_10002AEE8((uint64_t)v20, (std::string *)buf);
        v22 = (uint64_t *)*((_QWORD *)&v51 + 1);
        v21 = (uint64_t *)v52;
        if (*((_QWORD *)&v51 + 1) == (_QWORD)v52)
        {
          v8 = 0;
        }
        else
        {
          v35 = v14;
          v23 = SALogObjectGeneral;
          while (1)
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              v24 = v22;
              if (*((char *)v22 + 23) < 0)
                v24 = (uint64_t *)*v22;
              if ((v37 & 0x80u) == 0)
                v25 = v36;
              else
                v25 = (void **)v36[0];
              *(_DWORD *)v38 = 68289539;
              *(_DWORD *)&v38[4] = 0;
              v39 = 2082;
              v40 = "";
              v41 = 2081;
              v42 = v24;
              v43 = 2081;
              v44 = v25;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#iap,Alert for production environment\", \"pKey\":%{private, location:escape_only}s, \"AlertKey\":%{private, location:escape_only}s}", v38, 0x26u);
              v23 = SALogObjectGeneral;
            }
            v26 = *((char *)v22 + 23);
            v27 = (v37 & 0x80u) == 0 ? (void *)v37 : v36[1];
            v28 = (v37 & 0x80u) == 0 ? v36 : (void **)v36[0];
            v29 = v26 >= 0 ? (void *)*((unsigned __int8 *)v22 + 23) : (void *)v22[1];
            v30 = v26 >= 0 ? v22 : (uint64_t *)*v22;
            v31 = (size_t)(v29 >= v27 ? v27 : v29);
            if (!memcmp(v28, v30, v31) && v29 == v27)
              break;
            v22 += 3;
            if (v22 == v21)
            {
              v8 = 0;
              goto LABEL_50;
            }
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v38 = 68289026;
            *(_DWORD *)&v38[4] = 0;
            v39 = 2082;
            v40 = "";
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,Alert for production environment\"}", v38, 0x12u);
          }
          v8 = 1;
LABEL_50:
          v14 = v35;
        }
        *(_QWORD *)v38 = &v53;
        sub_100004EC0((void ***)v38);
        *(_QWORD *)v38 = (char *)&v51 + 8;
        sub_100004EC0((void ***)v38);
        if (SBYTE7(v51) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v49) < 0)
          operator delete(*((void **)&v48 + 1));
        if (SBYTE7(v48) < 0)
          operator delete(v47[0]);
        if (SHIBYTE(v46) < 0)
          operator delete(*(void **)&buf[24]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if ((char)v37 < 0)
          operator delete(v36[0]);

      }
      else
      {

        v34 = SALogObjectGeneral;
        v8 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,ref prodId nil\"}", buf, 0x12u);
          v8 = 0;
        }
      }

    }
    else
    {

      v33 = SALogObjectGeneral;
      v8 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,doesAlertPassesProductionCheck,invalid dictionary\"}", buf, 0x12u);
        v8 = 0;
      }
    }
  }

  return v8;
}

void sub_100031500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  sub_100032A34((uint64_t)&a26);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100031578(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000315C8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,onCompanionNearby\", \"Companion\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 576) = a2;
}

void sub_100031698(uint64_t a1)
{
  NSObject *v2;
  SAPlatformInfo *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,onFirstUnlock\"}", (uint8_t *)v4, 0x12u);
  }
  sub_10002316C(a1);
  sub_10002316C(a1 + 192);
  if (sub_10007FD14(v3))
    sub_10002316C(a1 + 384);
}

void sub_10003176C(SAPlatformInfo *a1, void **a2)
{
  NSObject *v4;
  void *v5;
  double Current;
  void *v7[2];
  char v8;
  void *__dst[2];
  void *v10;
  double buf;
  _BYTE v12[10];
  __int16 v13;
  void *v14;
  char v15;
  void *__p;
  char v17;

  if (sub_10007FD14(a1))
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v5 = a2;
      else
        v5 = *a2;
      *(_QWORD *)&buf = 68289283;
      *(_WORD *)v12 = 2082;
      *(_QWORD *)&v12[2] = "";
      v13 = 2081;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,SAIgneousAlertParser\", \"bleUID\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (*((char *)a2 + 23) < 0)
    {
      sub_100004870(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v10 = a2[2];
    }
    sub_10000E8A0(v7, "{}");
    sub_100025280((uint64_t)&buf, (__int128 *)__dst, (__int128 *)v7, Current);
    sub_100030BDC((uint64_t)a1 + 384, &buf);
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(*(void **)v12);
    if (v8 < 0)
      operator delete(v7[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(__dst[0]);
  }
}

void sub_1000318F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_100023B48((uint64_t)&a23);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100031944(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  double v8;
  NSObject *v9;
  _BOOL8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  void *v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  uint64_t i;
  unint64_t v30;
  double v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double *v58;
  double *v59;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  double *v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _BYTE *v93;
  unint64_t v94;
  int v95;
  void *v96;
  void **v97;
  size_t v98;
  int v99;
  char v100;
  uint64_t v101;
  NSObject *v102;
  std::string __p;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _BYTE buf[28];
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  double v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  _BYTE v118[28];
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  uint64_t v124;
  _QWORD v125[3];
  _QWORD *v126;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[4];
  uint8_t v130[4];
  int v131;
  __int16 v132;
  const char *v133;
  __int16 v134;
  uint64_t v135;
  uint8_t v136[8];
  _BYTE v137[10];
  __int16 v138;
  _BYTE v139[12];
  uint64_t (**v140)();
  uint64_t v141;
  uint64_t (***v142)();
  uint8_t v143[8];
  _BYTE v144[10];
  __int16 v145;
  _BYTE v146[18];
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;

  if (!sub_10007FD14((SAPlatformInfo *)a1))
    return 0;
  v105 = 0;
  v8 = (double)(uint64_t)(double)time(0) + -978307200.0;
  memset(&__p, 0, sizeof(__p));
  if (a4)
    sub_100032C94(a1 + 384, 1, v8 - *(double *)(a3 + 200));
  v9 = SALogObjectGeneral;
  v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    v12 = *(_QWORD *)(a3 + 200);
    v13 = *(_QWORD *)(a3 + 216);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v11;
    v110 = 2050;
    v111 = 0;
    v112 = 2050;
    v113 = v8;
    v114 = 2050;
    v115 = v12;
    v116 = 2050;
    v117 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isDuplicateBleAlertReceived\", \"uid\":%{private, location:escape_only}s, \"lastBleReceivedTs\":\"%{public}0.3f\", \"curTime\":\"%{public}0.3f\", \"ThresholdTimeBetweenAlerts\":\"%{public}0.3f\", \"FollowUpMessageValidTime\":\"%{public}0.3f\"}", buf, 0x44u);
  }
  if ((sub_10007FD14((SAPlatformInfo *)v10) & 1) != 0)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100004870(buf, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      *(_QWORD *)&buf[16] = a2[2];
    }
    v15 = sub_100023260(a1 + 384, (unsigned __int8 **)buf, &v105, &__p);
    v16 = v15;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((v16 & 1) != 0)
      {
LABEL_16:
        v17 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v105;
          v18 = "{\"msg%{public}.0s\":\"#iap,bleReceived\", \"lastBleReceivedTs\":\"%{public}0.3f\"}";
          v19 = v17;
          v20 = 28;
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
        }
        goto LABEL_19;
      }
    }
    else if (v15)
    {
      goto LABEL_16;
    }
  }
  v21 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v21 < 0)
    v21 = a2[1];
  if (!v21)
  {
    v25 = SALogObjectGeneral;
    v14 = 0;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_180;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isIgneousAlertReceivedForBle,bleUid Invalid\"}", buf, 0x12u);
LABEL_179:
    v14 = 0;
    goto LABEL_180;
  }
  v22 = *(double *)(a3 + 200);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v127[0] = off_1000F27E8;
  v127[1] = a1;
  v128 = v127;
  v125[0] = off_1000F2868;
  v125[1] = a1;
  v126 = v125;
  sub_10001177C((uint64_t)v129, (uint64_t)v127, (uint64_t)v125);
  v23 = v126;
  if (v126 == v125)
  {
    v24 = 4;
    v23 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_31;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_31:
  v26 = v128;
  if (v128 == v127)
  {
    v27 = 4;
    v26 = v127;
    goto LABEL_35;
  }
  if (v128)
  {
    v27 = 5;
LABEL_35:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  v28 = v8 - v22;
  v30 = v106;
  for (i = v107; i != v30; sub_100023B04(i))
    i -= 56;
  v107 = v30;
  v31 = *(double *)(a1 + 8);
  if (v31 > v28)
  {
    v32 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    v35 = *(_QWORD *)(a1 + 160);
    v34 = a1 + 160;
    v33 = v35;
    if (*(char *)(v34 + 23) >= 0)
      v33 = v34;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v33;
    v36 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllEventsWithin,outOfRangeArgs\", \"history\":%{private, l"
          "ocation:escape_only}s}";
LABEL_53:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v36, buf, 0x1Cu);
    goto LABEL_137;
  }
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || *(_BYTE *)a1 == 0)
  {
    v32 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    v40 = *(_QWORD *)(a1 + 160);
    v39 = a1 + 160;
    v38 = v40;
    if (*(char *)(v39 + 23) >= 0)
      v38 = v39;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v38;
    v36 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllEventsWithin,skipping,notReady\", \"history\":%{private"
          ", location:escape_only}s}";
    goto LABEL_53;
  }
  v41 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v43 = *(_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) >= 0)
      v43 = a1 + 160;
    v44 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)v118 = 68290051;
    *(_WORD *)&v118[8] = 2082;
    *(_DWORD *)&v118[4] = 0;
    *(_QWORD *)&v118[10] = "";
    *(_WORD *)&v118[18] = 2081;
    *(_QWORD *)&v118[20] = v43;
    v119 = 2049;
    v120 = v28;
    v121 = 2049;
    v122 = v31;
    v123 = 2049;
    v124 = v44;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findLatestEventBeforeInternal\", \"debugName\":%{private, location:escape_only}s, \"time\":\"%{private}.2f\", \"fStartTimeSeconds\":\"%{private}.2f\", \"fEndTimeSeconds\":\"%{private}.2f\"}", v118, 0x3Au);
  }
  *(_QWORD *)v143 = off_1000F28E8;
  *(_QWORD *)v144 = a1;
  *(_QWORD *)&v146[4] = v143;
  v140 = off_1000F2968;
  v141 = a1;
  v142 = &v140;
  sub_10001177C((uint64_t)v118, (uint64_t)v143, (uint64_t)&v140);
  v45 = v142;
  if (v142 == &v140)
  {
    v46 = 4;
    v45 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_63;
    v46 = 5;
  }
  (*v45)[v46]();
LABEL_63:
  v47 = *(uint8_t **)&v146[4];
  if (*(uint8_t **)&v146[4] == v143)
  {
    v48 = 4;
    v47 = v143;
  }
  else
  {
    if (!*(_QWORD *)&v146[4])
      goto LABEL_68;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_68:
  if (*(double *)(a1 + 8) > v28)
  {
    v49 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v50 = a1 + 160;
      if (*(char *)(a1 + 183) < 0)
        v50 = *(_QWORD *)(a1 + 160);
      *(_DWORD *)v136 = 68289283;
      *(_DWORD *)&v136[4] = 0;
      *(_WORD *)v137 = 2082;
      *(_QWORD *)&v137[2] = "";
      v138 = 2081;
      *(_QWORD *)v139 = v50;
      v51 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestEventBefore,InvalidArgs\", \"history\":%{private, "
            "location:escape_only}s}";
LABEL_82:
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, v51, v136, 0x1Cu);
      goto LABEL_83;
    }
    goto LABEL_83;
  }
  v52 = *(_QWORD *)(a1 + 24);
  v53 = *(_QWORD *)(a1 + 32);
  if (v52 == v53 || !*(_BYTE *)a1)
  {
    v49 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v55 = a1 + 160;
      if (*(char *)(a1 + 183) < 0)
        v55 = *(_QWORD *)(a1 + 160);
      *(_DWORD *)v136 = 68289283;
      *(_DWORD *)&v136[4] = 0;
      *(_WORD *)v137 = 2082;
      *(_QWORD *)&v137[2] = "";
      v138 = 2081;
      *(_QWORD *)v139 = v55;
      v51 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestEventBefore,skipping,notReady\", \"history\":%{pri"
            "vate, location:escape_only}s}";
      goto LABEL_82;
    }
LABEL_83:
    buf[0] = 0;
    BYTE6(v115) = 0;
    goto LABEL_84;
  }
  while (v53 != v52)
  {
    v54 = *(double *)(v53 - 56);
    v53 -= 56;
    if (v54 <= v28)
    {
      sub_100033DE4((uint64_t)buf, v53);
      goto LABEL_84;
    }
  }
  sub_100033DE4((uint64_t)buf, v52);
LABEL_84:
  sub_100012184(v118);
  if (BYTE6(v115))
  {
    v56 = v107;
    if (v107 >= v108)
    {
      v57 = sub_100033E98((uint64_t *)&v106, (uint64_t)buf);
    }
    else
    {
      sub_10002506C(v107, (uint64_t)buf);
      v57 = v56 + 56;
    }
    v107 = v57;
  }
  v58 = *(double **)(a1 + 24);
  v59 = *(double **)(a1 + 32);
  while (v58 != v59)
  {
    if (*v58 >= v28 && *v58 <= v8)
    {
      v61 = v107;
      if (v107 >= v108)
      {
        v62 = sub_100033E98((uint64_t *)&v106, (uint64_t)v58);
      }
      else
      {
        sub_10002506C(v107, (uint64_t)v58);
        v62 = v61 + 56;
      }
      v107 = v62;
    }
    v58 += 7;
  }
  v63 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v64 = *(_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) >= 0)
      v64 = a1 + 160;
    v66 = *(_QWORD *)(a1 + 8);
    v65 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)v143 = 68290051;
    *(_WORD *)v144 = 2082;
    *(_DWORD *)&v143[4] = 0;
    *(_QWORD *)&v144[2] = "";
    v145 = 2081;
    *(_QWORD *)v146 = v64;
    *(_WORD *)&v146[8] = 2049;
    *(double *)&v146[10] = v8;
    v147 = 2049;
    v148 = v66;
    v149 = 2049;
    v150 = v65;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findFirstEventAfterInternal\", \"debugName\":%{private, location:escape_only}s, \"time\":\"%{private}.2f\", \"fStartTimeSeconds\":\"%{private}.2f\", \"fEndTimeSeconds\":\"%{private}.2f\"}", v143, 0x3Au);
  }
  v140 = off_1000F29E8;
  v141 = a1;
  v142 = &v140;
  *(_QWORD *)v136 = off_1000F2A68;
  *(_QWORD *)v137 = a1;
  *(_QWORD *)&v139[4] = v136;
  sub_10001177C((uint64_t)v143, (uint64_t)&v140, (uint64_t)v136);
  v67 = *(uint8_t **)&v139[4];
  if (*(uint8_t **)&v139[4] == v136)
  {
    v68 = 4;
    v67 = v136;
  }
  else
  {
    if (!*(_QWORD *)&v139[4])
      goto LABEL_109;
    v68 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
LABEL_109:
  v69 = v142;
  if (v142 == &v140)
  {
    v70 = 4;
    v69 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_114;
    v70 = 5;
  }
  (*v69)[v70]();
LABEL_114:
  if (*(double *)(a1 + 16) >= v8)
  {
    v76 = *(_QWORD *)(a1 + 24);
    v77 = *(double **)(a1 + 32);
    if ((double *)v76 != v77 && *(_BYTE *)a1)
    {
      v78 = *(double **)(a1 + 24);
      while (*v78 < v8)
      {
        v78 += 7;
        if (v78 == v77)
        {
          sub_100033DE4((uint64_t)v118, v76);
          goto LABEL_131;
        }
      }
      sub_100033DE4((uint64_t)v118, (uint64_t)v78);
      goto LABEL_131;
    }
    v71 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v81 = *(_QWORD *)(a1 + 160);
      v80 = a1 + 160;
      v79 = v81;
      if (*(char *)(v80 + 23) >= 0)
        v79 = v80;
      *(_DWORD *)v130 = 68289283;
      v131 = 0;
      v132 = 2082;
      v133 = "";
      v134 = 2081;
      v135 = v79;
      v75 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findFirstEventAfter,skipping,notReady\", \"history\":%{priva"
            "te, location:escape_only}s}";
      goto LABEL_129;
    }
  }
  else
  {
    v71 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v74 = *(_QWORD *)(a1 + 160);
      v73 = a1 + 160;
      v72 = v74;
      if (*(char *)(v73 + 23) >= 0)
        v72 = v73;
      *(_DWORD *)v130 = 68289283;
      v131 = 0;
      v132 = 2082;
      v133 = "";
      v134 = 2081;
      v135 = v72;
      v75 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findFirstEventAfter,InvalidArgs\", \"history\":%{private, lo"
            "cation:escape_only}s}";
LABEL_129:
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, v75, v130, 0x1Cu);
    }
  }
  v118[0] = 0;
  BYTE6(v124) = 0;
LABEL_131:
  sub_100012184(v143);
  if (BYTE6(v124))
  {
    v82 = v107;
    if (v107 >= v108)
    {
      v83 = sub_100033E98((uint64_t *)&v106, (uint64_t)v118);
    }
    else
    {
      sub_10002506C(v107, (uint64_t)v118);
      v83 = v82 + 56;
    }
    v107 = v83;
  }
  sub_1000342AC((uint64_t)v118);
  sub_1000342AC((uint64_t)buf);
LABEL_137:
  sub_100012184(v129);
  v84 = v107;
  if (v106 == v107)
  {
LABEL_178:
    *(_QWORD *)buf = &v106;
    sub_100023A94((void ***)buf);
    goto LABEL_179;
  }
  v85 = v106 + 56;
  do
  {
    v86 = SACommonUtils::convertStringToDictionary((uint64_t *)(v85 - 24));
    v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
    if (!v87 || (v88 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v87, v88) & 1) == 0))
    {
      v102 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#iap,isIgneousAlertReceivedForBle,dictionary Invalid\"}", buf, 0x12u);
      }

      goto LABEL_178;
    }
    memset(buf, 0, 24);
    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectForKey:", CFSTR("BleUIDKeyString")));
    if (v89)
    {
      v90 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v89, v90) & 1) != 0)
      {
        sub_10001D858(v89, v118);
        *(_OWORD *)buf = *(_OWORD *)v118;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v118[16];
      }
    }

    if (*(char *)(v85 - 1) < 0)
      v91 = *(_QWORD *)(v85 - 16);
    else
      v91 = *(unsigned __int8 *)(v85 - 1);
    v92 = buf[23];
    if (!v91)
      goto LABEL_166;
    if ((buf[23] & 0x80) != 0)
    {
      v94 = *(_QWORD *)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_166;
      v93 = *(_BYTE **)buf;
    }
    else
    {
      if (!buf[23])
        goto LABEL_166;
      v93 = buf;
      v94 = buf[23];
    }
    v95 = *((char *)a2 + 23);
    v96 = v95 >= 0 ? (void *)*((unsigned __int8 *)a2 + 23) : a2[1];
    v97 = v95 >= 0 ? a2 : (void **)*a2;
    v98 = (unint64_t)v96 >= v94 ? v94 : (size_t)v96;
    if (memcmp(v93, v97, v98) || v96 != (void *)v94)
    {
LABEL_166:
      v99 = 0;
      if ((v92 & 0x80) == 0)
        goto LABEL_168;
      goto LABEL_167;
    }
    v99 = 1;
    if ((v92 & 0x80) == 0)
      goto LABEL_168;
LABEL_167:
    operator delete(*(void **)buf);
LABEL_168:

    if (v85 == v84)
      v100 = 1;
    else
      v100 = v99;
    v85 += 56;
  }
  while ((v100 & 1) == 0);
  *(_QWORD *)buf = &v106;
  sub_100023A94((void ***)buf);
  if (!v99)
    goto LABEL_179;
  v101 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v18 = "{\"msg%{public}.0s\":\"#iap,isDuplicateBleAlertReceived\"}";
    v19 = v101;
    v20 = 18;
    goto LABEL_18;
  }
LABEL_19:
  v14 = 1;
LABEL_180:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_100032614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  sub_100012184((_QWORD *)(v60 - 208));
  sub_1000342AC((uint64_t)&a20);
  sub_100012184(&a49);
  a20 = &a17;
  sub_100023A94((void ***)&a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10003282C(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1000329A0((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100004C50();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_10001DC80((_QWORD *)a1, v11);
    v12 = sub_10001DCD0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_1000329D8(__str, v13, v9);
    v12 = sub_10001DCD0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1000329D8(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100032990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100032998(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000329A0(uint64_t *a1)
{
  if (*a1)
  {
    sub_100004F00(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_1000329D8(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_100032A34(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 144);
  sub_100004EC0(&v3);
  v3 = (void **)(a1 + 120);
  sub_100004EC0(&v3);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100032ACC(uint64_t a1)
{
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100032B70()
{
  operator delete();
}

_QWORD *sub_100032B84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2568;
  return result;
}

void sub_100032BA8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2568;
}

uint64_t sub_100032BC0(int a1, uint64_t a2, std::string *this)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_100004870(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100032C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100032C4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100032C88()
{
}

_QWORD *sub_100032C94(uint64_t a1, char a2, double a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void *v15[2];
  char v16;
  void *__dst[2];
  uint64_t v18;
  _BYTE v19[8];
  void *v20;
  char v21;
  void *__p;
  char v23;
  double v24[5];
  unint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[4];

  v31[0] = off_1000F25E8;
  v31[1] = a1;
  v32 = v31;
  v29[0] = off_1000F2668;
  v29[1] = a1;
  v30 = v29;
  sub_10001177C((uint64_t)v33, (uint64_t)v31, (uint64_t)v29);
  v6 = v30;
  if (v30 == v29)
  {
    v7 = 4;
    v6 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v32;
  if (v32 == v31)
  {
    v9 = 4;
    v8 = v31;
    goto LABEL_10;
  }
  if (v32)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v28 = 0;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v24[0] = a1;
  v24[1] = a3;
  *(_QWORD *)&v24[2] = &v28;
  *(_QWORD *)&v24[3] = v26;
  *(_QWORD *)&v24[4] = &v25;
  v25 = 0xBFF0000000000000;
  v12 = sub_100033020(v10, v11, v24);
  sub_100032FA4(a1 + 24, v12, *(_QWORD *)(a1 + 32));
  if ((a2 & 1) == 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
  {
    v13 = *(double *)&v25;
    if (SHIBYTE(v27) < 0)
    {
      sub_100004870(__dst, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v26;
      v18 = v27;
    }
    sub_10000E8A0(v15, "{}");
    sub_100025280((uint64_t)v19, (__int128 *)__dst, (__int128 *)v15, v13);
    sub_100033114((uint64_t *)(a1 + 24), (uint64_t)v19);
    if (v23 < 0)
      operator delete(__p);
    if (v21 < 0)
      operator delete(v20);
    if (v16 < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
  }
  if (v28)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_30;
    }
    else if (!*(_BYTE *)(a1 + 71))
    {
      goto LABEL_30;
    }
    sub_1000246F8((char *)a1);
  }
LABEL_30:
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return sub_100012184(v33);
}

void sub_100032ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a41 < 0)
    operator delete(__p);
  sub_100012184((_QWORD *)(v41 - 88));
  _Unwind_Resume(a1);
}

void sub_100032F40()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v1 - 128);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 152);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(v1 - 96);
  if (v4 == (_QWORD *)(v1 - 120))
  {
    v5 = 4;
    v4 = (_QWORD *)(v1 - 120);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  JUMPOUT(0x100032F38);
}

uint64_t sub_100032FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != a3)
  {
    sub_100024CAC((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 56;
        sub_100023B04(v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100033020(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  uint64_t i;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (!sub_100033414(a3, (double *)v5))
  {
    v5 += 56;
    if (v5 == a2)
      return a2;
  }
  if (v5 != a2)
  {
    for (i = v5 + 56; i != a2; i += 56)
    {
      if (!sub_100033414(a3, (double *)i))
      {
        *(_QWORD *)v5 = *(_QWORD *)i;
        v8 = (void **)(v5 + 8);
        if (*(char *)(v5 + 31) < 0)
          operator delete(*v8);
        v9 = *(_OWORD *)(i + 8);
        *(_QWORD *)(v5 + 24) = *(_QWORD *)(i + 24);
        *(_OWORD *)v8 = v9;
        *(_BYTE *)(i + 31) = 0;
        *(_BYTE *)(i + 8) = 0;
        v10 = (void **)(v5 + 32);
        if (*(char *)(v5 + 55) < 0)
          operator delete(*v10);
        v11 = *(_OWORD *)(i + 32);
        *(_QWORD *)(v5 + 48) = *(_QWORD *)(i + 48);
        *(_OWORD *)v10 = v11;
        *(_BYTE *)(i + 55) = 0;
        *(_BYTE *)(i + 32) = 0;
        v5 += 56;
      }
    }
  }
  return v5;
}

uint64_t sub_100033114(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492)
      sub_100004C50();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_1000251EC(result, v14);
    else
      v15 = 0;
    v16 = &v15[56 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[56 * v14];
    *(_QWORD *)v16 = *(_QWORD *)a2;
    v17 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v16 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v16 + 8) = v17;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v18 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v16 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v16 + 2) = v18;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v19[2] = v16 + 56;
    sub_1000335FC(a1, v19);
    v10 = a1[1];
    result = sub_100025234((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = v9;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return result;
}

void sub_100033290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100025234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000332A8()
{
  operator delete();
}

_QWORD *sub_1000332BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F25E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000332F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F25E8;
  a2[1] = v2;
  return result;
}

void sub_10003330C(uint64_t a1)
{
  sub_100023C40(a1 + 8);
}

uint64_t sub_100033314(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033350()
{
}

void sub_100033360()
{
  operator delete();
}

_QWORD *sub_100033374(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2668;
  result[1] = v3;
  return result;
}

uint64_t sub_1000333A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2668;
  a2[1] = v2;
  return result;
}

void sub_1000333C4(uint64_t a1)
{
  sub_1000253DC((uint64_t *)(a1 + 8));
}

uint64_t sub_1000333CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033408()
{
}

BOOL sub_100033414(double *a1, double *a2)
{
  double v3;
  uint64_t v4;
  const std::string *v6;
  double v7;
  double v8;
  double *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  const char *p_p;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BOOL4 v32;

  v3 = *a1;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)&v3 + 96);
  if (!v4)
    sub_100004FB0();
  v6 = (const std::string *)(a2 + 1);
  (*(void (**)(uint64_t, double *, void **))(*(_QWORD *)v4 + 48))(v4, a2 + 1, &__p);
  v7 = *a2;
  v8 = a1[1];
  if (*a2 < v8)
    **((_BYTE **)a1 + 2) = 1;
  v9 = (double *)*((_QWORD *)a1 + 4);
  if (*v9 < v7)
  {
    *v9 = v7;
    std::string::operator=(*((std::string **)a1 + 3), v6);
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v11 = (_QWORD *)(*(_QWORD *)&v3 + 160);
    if (*(char *)(*(_QWORD *)&v3 + 183) < 0)
      v11 = (_QWORD *)*v11;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *a2;
    if (SHIBYTE(v18) < 0)
    {
      if (v17)
        p_p = (const char *)__p;
      else
        p_p = "";
    }
    else
    {
      p_p = (const char *)&__p;
      if (!HIBYTE(v18))
        p_p = "";
    }
    *(_DWORD *)buf = 68290307;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v11;
    v25 = 2049;
    v26 = v12;
    v27 = 2049;
    v28 = v13;
    v29 = 2081;
    v30 = p_p;
    v31 = 1025;
    v32 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saEventHistory,cleanup\", \"history\":%{private, location:escape_only}s, \"before\":\"%{private}0.1f\", \"ts\":\"%{private}0.1f\", \"value\":%{private, location:escape_only}s, \"remove\":%{private}hhd}", buf, 0x40u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return v7 < v8;
}

void sub_1000335DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000335FC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 56);
    v2 -= 56;
    *(_QWORD *)(v4 - 56) = v5;
    v4 -= 56;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v7 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
    *(_OWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 32) = 0;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_100033688()
{
  operator delete();
}

_QWORD *sub_10003369C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F26E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000336D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F26E8;
  a2[1] = v2;
  return result;
}

void sub_1000336EC(uint64_t a1)
{
  sub_100023C40(a1 + 8);
}

uint64_t sub_1000336F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033730()
{
}

void sub_100033740()
{
  operator delete();
}

_QWORD *sub_100033754(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2768;
  result[1] = v3;
  return result;
}

uint64_t sub_100033788(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2768;
  a2[1] = v2;
  return result;
}

void sub_1000337A4(uint64_t a1)
{
  sub_1000253DC((uint64_t *)(a1 + 8));
}

uint64_t sub_1000337AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000337E8()
{
}

void sub_1000337F8()
{
  operator delete();
}

_QWORD *sub_10003380C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F27E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100033840(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F27E8;
  a2[1] = v2;
  return result;
}

void sub_10003385C(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100023D0C((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100033928(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033964()
{
}

void sub_100033974()
{
  operator delete();
}

_QWORD *sub_100033988(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2868;
  result[1] = v3;
  return result;
}

uint64_t sub_1000339BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2868;
  a2[1] = v2;
  return result;
}

void sub_1000339D8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v3, 0x12u);
    }
    sub_1000254A8(v1);
  }
}

uint64_t sub_100033AA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033AE0()
{
}

void sub_100033AF0()
{
  operator delete();
}

_QWORD *sub_100033B04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F28E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100033B38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F28E8;
  a2[1] = v2;
  return result;
}

void sub_100033B54(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100023D0C((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100033C20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033C5C()
{
}

void sub_100033C6C()
{
  operator delete();
}

_QWORD *sub_100033C80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2968;
  result[1] = v3;
  return result;
}

uint64_t sub_100033CB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2968;
  a2[1] = v2;
  return result;
}

void sub_100033CD0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v3, 0x12u);
    }
    sub_1000254A8(v1);
  }
}

uint64_t sub_100033D9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100033DD8()
{
}

uint64_t sub_100033DE4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100004870(v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_100033E7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100004C50();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1000251EC(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_10002506C((uint64_t)v14, a2);
  v15 = v14 + 56;
  sub_1000335FC(a1, &v13);
  v11 = a1[1];
  sub_100025234((uint64_t)&v13);
  return v11;
}

void sub_100033FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100025234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100033FB8()
{
  operator delete();
}

_QWORD *sub_100033FCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F29E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100034000(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F29E8;
  a2[1] = v2;
  return result;
}

void sub_10003401C(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100023D0C((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_1000340E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100034124()
{
}

void sub_100034134()
{
  operator delete();
}

_QWORD *sub_100034148(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2A68;
  result[1] = v3;
  return result;
}

uint64_t sub_10003417C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2A68;
  a2[1] = v2;
  return result;
}

void sub_100034198(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v3, 0x12u);
    }
    sub_1000254A8(v1);
  }
}

uint64_t sub_100034264(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000342A0()
{
}

uint64_t sub_1000342AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1000342F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  xpc_object_t v10;
  double *v11;
  _QWORD handler[5];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  _QWORD v18[3];
  _QWORD *v19;

  v5 = a2;
  sub_100004F4C((uint64_t)v18, a3);
  *(_QWORD *)a1 = off_1000F2B70;
  if (!v19)
  {
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_11;
  }
  if (v19 == v18)
  {
    *(_QWORD *)(a1 + 32) = a1 + 8;
    (*(void (**)(_QWORD *, uint64_t))(v18[0] + 24))(v18, a1 + 8);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(void))(*v19 + 16))();
  }
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  *(_QWORD *)a1 = &off_1000F2AE8;
  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = v5;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,init\"}", buf, 0x12u);
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    v11 = (double *)sub_10003D044();
    xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, (uint64_t)v11[28]);
    xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_1000345DC;
    handler[3] = &unk_1000F2B08;
    handler[4] = a1;
    xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.bc.xpcactivity"), "UTF8String"), v10, handler);
  }

  return a1;
}

void sub_10003453C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)v2 = v5;
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
    v3 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1000345DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034CA0;
  v7[3] = &unk_1000F2B98;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t sub_10003465C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_10003466C(IONotificationPortRef *a1)
{
  id *v2;
  char v3;
  NSObject *v4;
  _BOOL4 v5;
  IONotificationPort *v6;
  SACommonUtils *RunLoopSource;
  __CFRunLoopSource *v8;
  __CFRunLoop *RunLoop;
  IONotificationPort *v10;
  const __CFDictionary *v11;
  NSObject *v12;
  io_iterator_t notification;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  v2 = (id *)SAPlatformInfo::instance((SAPlatformInfo *)a1);
  v3 = sub_100034C24(v2);
  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((v3 & 1) != 0)
  {
    if (v5)
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,registering for battery status changed\"}", buf, 0x12u);
    }
    notification = 0;
    v6 = IONotificationPortCreate(kIOMainPortDefault);
    a1[5] = v6;
    if (v6)
    {
      RunLoopSource = IONotificationPortGetRunLoopSource(v6);
      if (RunLoopSource)
      {
        v8 = RunLoopSource;
        RunLoop = (__CFRunLoop *)SACommonUtils::SACommonGetRunLoop(RunLoopSource);
        CFRunLoopAddSource(RunLoop, v8, kCFRunLoopDefaultMode);
        v10 = a1[5];
        v11 = IOServiceMatching("IOPMPowerSource");
        if (!IOServiceAddMatchingNotification(v10, "IOServiceFirstMatch", v11, (IOServiceMatchingCallback)sub_1000349A0, a1, &notification))
        {
          v12 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v15 = 0;
            v16 = 2082;
            v17 = "";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,read battery status\"}", buf, 0x12u);
          }
          sub_100034AE8((uint64_t)a1, notification);
        }
        IOObjectRelease(notification);
      }
      else
      {
        IONotificationPortDestroy(a1[5]);
        a1[5] = 0;
      }
    }
  }
  else if (v5)
  {
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,no battery\"}", buf, 0x12u);
  }
}

uint64_t sub_100034880(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1000F2B70;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1000348E8(uint64_t a1)
{
  sub_100034880(a1);
  operator delete();
}

void sub_10003490C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_1000273E4(&v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10003498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100028C54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000349A0(uint64_t a1, io_iterator_t a2)
{
  void *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;

  v4 = objc_autoreleasePoolPush();
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 68289026;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,onMatchedBatteryStatusCb\"}", (uint8_t *)&v7, 0x12u);
  }
  if (a1)
  {
    sub_100034AE8(a1, a2);
  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,pthis is null\"}", (uint8_t *)&v7, 0x12u);
    }
  }
  objc_autoreleasePoolPop(v4);
}

uint64_t sub_100034AE8(uint64_t a1, io_iterator_t a2)
{
  NSObject *v4;
  uint64_t result;
  io_registry_entry_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,onMatchedBatteryStatus\"}", (uint8_t *)v7, 0x12u);
  }
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 40), *(dispatch_queue_t *)(a1 + 64));
  result = IOIteratorNext(a2);
  if ((_DWORD)result)
  {
    v6 = result;
    do
    {
      if (!IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 40), v6, "IOGeneralInterest", (IOServiceInterestCallback)sub_100002EEC, (void *)a1, (io_object_t *)(a1 + 48)))sub_1000026D0(a1, v6);
      IOObjectRelease(v6);
      result = IOIteratorNext(a2);
      v6 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_100034C24(id *a1)
{
  if ((objc_msgSend(*a1, "isEqualToString:", CFSTR("iPad")) & 1) != 0
    || (objc_msgSend(*a1, "isEqualToString:", CFSTR("Watch")) & 1) != 0
    || (objc_msgSend(*a1, "isEqualToString:", CFSTR("iPhone")) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(*a1, "isEqualToString:", CFSTR("Mac"));
  }
}

void sub_100034CA0(uint64_t a1)
{
  void *v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;

  v2 = objc_autoreleasePoolPush();
  v3 = (_xpc_activity_s *)*(id *)(a1 + 32);
  v4 = v3;
  if (v3)
  {
    state = xpc_activity_get_state(v3);
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceProd,process_xpcActivity\"}", (uint8_t *)&v9, 0x12u);
    }
    if (state)
    {
      if (state == 2)
      {
        if (!xpc_activity_set_state(v4, 5))
        {
          v7 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v9 = 68289026;
            v10 = 0;
            v11 = 2082;
            v12 = "";
            v8 = "{\"msg%{public}.0s\":\"#SABatteryServiceProd,failedToSetState\"}";
LABEL_13:
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0x12u);
          }
        }
      }
      else
      {
        v7 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v9 = 68289026;
          v10 = 0;
          v11 = 2082;
          v12 = "";
          v8 = "{\"msg%{public}.0s\":\"#SABatteryServiceProd,unexpectedXpcActivity\"}";
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v8 = "{\"msg%{public}.0s\":\"#SABatteryServiceProd,activity is nil\"}";
      goto LABEL_13;
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100034EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100034ECC()
{
  return 0;
}

uint64_t sub_100034ED4()
{
  return 0;
}

uint64_t sub_100034EDC()
{
  return 0;
}

uint64_t sub_100034EE4()
{
  return 0;
}

uint64_t sub_100034EEC()
{
  return 0;
}

uint64_t sub_100034EF4()
{
  return 0;
}

uint64_t sub_100034EFC()
{
  return 0;
}

_QWORD *sub_100034F04@<X0>(_QWORD *a1@<X8>)
{
  return sub_10000E8A0(a1, "NotAvailable");
}

uint64_t sub_100034F14()
{
  return 0xFFFFFFFFLL;
}

_QWORD *sub_100034F1C@<X0>(_QWORD *a1@<X8>)
{
  return sub_10000E8A0(a1, "Unknown");
}

uint64_t sub_100034F2C()
{
  return 0xFFFFFFFFLL;
}

_QWORD *sub_100034F34@<X0>(_QWORD *a1@<X8>)
{
  return sub_10000E8A0(a1, "Unknown");
}

double sub_100034F44()
{
  return -1.0;
}

_QWORD *sub_100034F4C@<X0>(_QWORD *a1@<X8>)
{
  return sub_10000E8A0(a1, "Unknown");
}

uint64_t sub_100034F5C(uint64_t a1)
{

  return a1;
}

void sub_100034F84(uint64_t a1)
{

  operator delete();
}

void sub_100034FBC(void *a1, void *a2, uint64_t *a3)
{
  id v5;
  id v6;
  std::string::size_type size;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::string __p;

  v5 = a1;
  v6 = a2;
  memset(&__p, 0, sizeof(__p));
  if (SACommonUtils::getStringFromDictionary(v5, (uint64_t)v6, &__p))
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v8 = a3[1];
      if (v8 >= a3[2])
      {
        v10 = sub_100004ABC(a3, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_100004870((_BYTE *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        a3[1] = v8 + 24;
      }
      a3[1] = v10;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_10003509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1000350CC(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  uint64_t *v18;

  result = a1[26];
  if (!result)
  {
    v3 = a1[20];
    if (a1[21] == v3)
    {
      v8 = a1[23];
      if (a1[24] == v8)
        return a1[26];
      v9 = sub_1000354B8((uint64_t)&v11, v8);
      a1[26] = v9;
      v5 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return a1[26];
      v10 = (uint64_t *)a1[23];
      if (*((char *)v10 + 23) < 0)
        v10 = (uint64_t *)*v10;
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2049;
      v16 = v9;
      v17 = 2081;
      v18 = v10;
      v7 = "{\"msg%{public}.0s\":\"#saanalytics,hashID created using wea\", \"alertTextID\":%{private}ld, \"alertText\":%"
           "{private, location:escape_only}s}";
    }
    else
    {
      v4 = sub_1000354B8((uint64_t)&v11, v3);
      a1[26] = v4;
      v5 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return a1[26];
      v6 = (uint64_t *)a1[20];
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2049;
      v16 = v4;
      v17 = 2081;
      v18 = v6;
      v7 = "{\"msg%{public}.0s\":\"#saanalytics,hashID created using sa\", \"alertTextID\":%{private}ld, \"alertText\":%{"
           "private, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 0x26u);
    return a1[26];
  }
  return result;
}

void sub_100035270(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a1 + 56);
  if (v2 > 0.0 && v3 >= 0.0)
    *(double *)(a1 + 32) = vabdd_f64(v3, v2) * 1000.0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  if (v3 >= 0.0)
  {
    v4 = *(double *)(a1 + 112);
    if (v4 >= 0.0)
    {
      *(double *)(a1 + 96) = (v3 - v4) * 1000.0;
      *(_BYTE *)(a1 + 24) = v4 < v3;
    }
    v5 = *(double *)(a1 + 312);
    if (v5 >= 0.0)
      *(double *)(a1 + 336) = (v3 - v5) * 1000.0;
  }
  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(double *)(a1 + 56) >= 0.0;
    v8 = *(double *)(a1 + 112) >= 0.0;
    v10 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 96);
    v12[0] = 68290563;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v9;
    v17 = 1026;
    v18 = v7;
    v19 = 1026;
    v20 = v8;
    v21 = 2050;
    v22 = v10;
    v23 = 2050;
    v24 = v11;
    v25 = 2049;
    v26 = sub_1000350CC((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,computeWEAAndSALatency\", \"originationTime\":\"%{public}0.2f\", \"weaReceptionTimeIsGood\":%{public}d, \"saReceptionTimeIsGood\":%{public}d, \"weaReceptionLatency\":\"%{public}0.2f\", \"delayBetweenWEAAndSA\":\"%{public}0.2f\", \"alertTextID\":%{private}ld}", (uint8_t *)v12, 0x46u);
  }

}

uint64_t sub_100035430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

unint64_t sub_1000354B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_10003BF7C((uint64_t)&v5, (uint64_t *)a2, v3);
}

void sub_1000354F4(uint64_t a1, void *a2)
{
  uint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 64) = "kAny";
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 160) = _Q0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v8 = mach_continuous_time();
  *(double *)(a1 + 160) = sub_1000842A4(v8);
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = -1;
  v9 = SALogObjectGeneral;
  v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    *(_DWORD *)buf = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,constructor call,object created\"}", buf, 0x12u);
  }
  v11 = SASettings::instance((SASettings *)v10);
  v14[0] = off_1000F2CB8;
  v15 = v14;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v14);
  v12 = v15;
  if (v15 == v14)
  {
    v13 = 4;
    v12 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_8:
  operator new();
}

void sub_100035794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  va_list va;

  va_start(va, a5);
  sub_10003B99C(v9, 0);
  sub_10003C454(v8, 0);
  sub_10003BAB4(v7, 0);
  sub_10003C3E8(v5 + 96);
  sub_10003BCCC((void ***)va);
  if (*(char *)(v5 + 31) < 0)
    operator delete(*v10);

  _Unwind_Resume(a1);
}

void sub_100035874(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,initRollingMetric\"}", buf, 0x12u);
  }
  v3 = sub_1000687EC();
  sub_100069F28((uint64_t)v3, &v21);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 1026;
    v30 = LOBYTE(v21);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,initRollingMetric\", \"rmSupported\":%{public}d}", buf, 0x18u);
  }
  v5 = LOBYTE(v21);
  if (LOBYTE(v21) && (v6 = v22, v22 > 0.0) && (v7 = v23, v23 >= 0.0) && (v11 = v24, v24 >= 0.0) && v22 > v23 + v24)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
    *(_DWORD *)buf = 68290050;
    v27 = 2082;
    v26 = 0;
    v28 = "";
    v29 = 1026;
    v30 = v5;
    v31 = 2050;
    v32 = (unint64_t)v6;
    v33 = 1026;
    v34 = (int)v11;
    v35 = 1026;
    v36 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,initRollingMetric\", \"rmSupported\":%{public}d, \"rollingPeriodSeconds\":%{public}lu, \"randomDelaySeconds\":%{public}d, \"fixedDelay\":%{public}d}", buf, 0x2Eu);
    if (LOBYTE(v21))
    {
LABEL_33:
      if (!*(_QWORD *)(a1 + 136))
        operator new();
    }
    v13 = *(_QWORD *)(a1 + 136);
    if (v13)
    {
      sub_10005AED4(v13, (uint64_t)&v21);
      v14 = *(_QWORD *)(a1 + 136);
      v15 = *(unsigned __int8 *)(a1 + 50);
      *(_BYTE *)(v14 + 2040) = v15;
      if (v15)
      {
        sub_100054BCC(v14 + 112);
        v14 = *(_QWORD *)(a1 + 136);
      }
      sub_100052C90(v14 + 112, *(unsigned __int8 *)(a1 + 184));
      v16 = *(_QWORD **)(a1 + 136);
      v17 = *(_DWORD *)(a1 + 52);
      v18 = *(_DWORD *)(a1 + 56);
      v19 = v16[5];
      if (v19)
      {
        *(_DWORD *)(v19 + 444) = v17;
        *(_DWORD *)(v19 + 448) = v18;
      }
      if (v16[6])
      {
        sub_10005F548(v16[6], v17, v18);
        v16 = *(_QWORD **)(a1 + 136);
      }
      sub_10005AD84(v16, *(unsigned __int8 *)(a1 + 40));
      if (*(_BYTE *)(a1 + 45) && *(_BYTE *)(a1 + 48))
      {
        sub_1000526E0(*(_QWORD *)(a1 + 136) + 112, *(unsigned __int8 *)(a1 + 43));
        sub_100053048(*(_QWORD *)(a1 + 136) + 112, *(_DWORD *)(a1 + 32) > 0);
        sub_10005AE7C(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 36) > 0);
        sub_10005AFD0(*(_QWORD *)(a1 + 136), *(unsigned __int8 *)(a1 + 49));
      }
    }
    else
    {
      v20 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,initRollingMetric,failed\"}", buf, 0x12u);
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 136);
    v8 = (uint64_t *)(a1 + 136);
    if (v9)
    {
      v10 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,initRollingMetric,MA disabled RM\"}", buf, 0x12u);
      }
      sub_10003BAB4(v8, 0);
    }
  }
}

void sub_100035C68()
{
  operator delete();
}

uint64_t sub_100035C94(uint64_t a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  __int16 v7;
  const char *v8;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 68289026;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,destructor call,object destroyed\"}", (uint8_t *)&v6, 0x12u);
  }
  v3 = *(uint64_t **)(a1 + 72);
  v4 = *(uint64_t **)(a1 + 80);
  while (v3 != v4)
  {
    sub_100035DDC(a1, v3, 1);
    v3 += 55;
  }
  sub_10003B99C((uint64_t *)(a1 + 152), 0);
  sub_10003C454((uint64_t *)(a1 + 144), 0);
  sub_10003BAB4((uint64_t *)(a1 + 136), 0);
  sub_10003C3E8(a1 + 96);
  v6 = a1 + 72;
  sub_10003BCCC((void ***)&v6);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));

  return a1;
}

void sub_100035DD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100035DDC(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  int v16;
  NSObject *v17;
  int v18;
  void *v19;
  int v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD **v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  NSObject *v74;
  uint32_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD v96[7];
  __int128 v97;
  uint64_t v98;
  void *v99;
  _BYTE v100[15];
  char v101;
  void *v102[2];
  uint64_t v103;
  void *__p[4];
  uint8_t buf[8];
  __int16 v106;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  _BYTE v111[22];
  __int16 v112;
  void *v113;
  _QWORD v114[3];

  if (!a2)
  {
    v11 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v106 = 2082;
    v107 = "";
    v12 = "{\"msg%{public}.0s\":\"#saanalytics,submitOnAlert,alertMetric is nullptr\"}";
    v13 = v11;
    v14 = OS_LOG_TYPE_ERROR;
    v15 = 18;
    goto LABEL_10;
  }
  v6 = (void *)sub_1000350CC(a2);
  if (a3)
  {
    v7 = *((unsigned __int8 *)a2 + 25);
    v8 = *((unsigned __int8 *)a2 + 26);
    goto LABEL_4;
  }
  v16 = *((unsigned __int8 *)a2 + 26);
  if (*((_BYTE *)a2 + 26) && *((_BYTE *)a2 + 25) && *((_BYTE *)a2 + 27))
  {
    v8 = 1;
    v7 = 1;
LABEL_4:
    memset(v114, 0, 15);
    if (*((_BYTE *)a2 + 376))
    {
      if (v7)
      {
        if (v8)
        {
          qmemcpy(v114, "WEA", 3);
          v9 = 11;
          v10 = 0x5F73756F656E0000;
        }
        else
        {
          v9 = 7;
          v10 = 0x73756F656E0000;
        }
        v24 = 26441;
        goto LABEL_36;
      }
    }
    else if (v7)
    {
      if (v8)
        v10 = 0x4145575F0000;
      else
        v10 = 0;
      if (v8)
        v9 = 6;
      else
        v9 = 2;
      v24 = 16723;
      goto LABEL_36;
    }
    if (v8)
    {
      v9 = 8;
      v10 = 0x796C6E6F5F410000;
      v24 = 17751;
    }
    else
    {
      v9 = 7;
      v10 = 0x64696C61760000;
      v24 = 28233;
    }
LABEL_36:
    v102[0] = 0;
    v102[1] = 0;
    v103 = 0;
    sub_10004830C(a2 + 37, (uint64_t *)v102);
    v27 = mach_continuous_time();
    v28 = sub_1000842A4(v27);
    v29 = -1.0;
    if (v28 >= 0.0)
    {
      v30 = *(double *)(a1 + 160);
      v31 = v28 - v30;
      if (v30 >= 0.0)
        v29 = v31;
      else
        v29 = -1.0;
    }
    v96[0] = _NSConcreteStackBlock;
    v96[1] = 3321888768;
    v96[2] = sub_100039FD0;
    v96[3] = &unk_1000F2C78;
    v96[4] = a1;
    v96[5] = a2;
    *(double *)&v96[6] = v29;
    if (SHIBYTE(v103) < 0)
    {
      sub_100004870(&v97, v102[0], (unint64_t)v102[1]);
    }
    else
    {
      v97 = *(_OWORD *)v102;
      v98 = v103;
    }
    v99 = (void *)(v24 | v10);
    *(_QWORD *)v100 = v114[0];
    *(_QWORD *)&v100[7] = *(_QWORD *)((char *)v114 + 7);
    v101 = v9;
    AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.onalertreceived"), v96);
    v32 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *((unsigned __int8 *)a2 + 26);
      v34 = *((unsigned __int8 *)a2 + 25);
      v35 = 1483715975 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
      v36 = *(_QWORD *)(a1 + 120);
      *(_DWORD *)buf = 68290563;
      *(_DWORD *)&buf[4] = 0;
      v106 = 2082;
      v107 = "";
      v108 = 1026;
      v109 = a3;
      v110 = 1026;
      *(_DWORD *)v111 = v33;
      *(_WORD *)&v111[4] = 1026;
      *(_DWORD *)&v111[6] = v34;
      *(_WORD *)&v111[10] = 1026;
      *(_DWORD *)&v111[12] = v35;
      *(_WORD *)&v111[16] = 1026;
      *(_DWORD *)&v111[18] = v36;
      v112 = 2049;
      v113 = v6;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,metric submitted\", \"forceSubmission\":%{public}d, \"isWEAReceived\":%{public}d, \"isSAReceived\":%{public}d, \"alertMetricVectorSize\":%{public}d, \"submissionTimerMapSize\":%{public}d, \"alertTextID\":%{private}ld}", buf, 0x3Au);
    }
    v37 = sub_1000350CC(a2);
    __p[0] = (void *)v37;
    v38 = (uint64_t *)(a1 + 96);
    if (!sub_10003C5DC((_QWORD *)(a1 + 96), v37))
      goto LABEL_100;
    v39 = *(_QWORD *)(a1 + 120);
    v40 = sub_10003C68C((uint64_t *)(a1 + 96), v37, __p);
    (*(void (**)(_QWORD))(*(_QWORD *)v40[3] + 40))(v40[3]);
    v41 = sub_10003C68C((uint64_t *)(a1 + 96), v37, __p);
    v42 = v41[3];
    v41[3] = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = *(int8x8_t *)(a1 + 104);
    if (!*(_QWORD *)&v43)
      goto LABEL_98;
    v44 = (uint8x8_t)vcnt_s8(v43);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      v45 = v37;
      if (*(_QWORD *)&v43 <= v37)
        v45 = v37 % *(_QWORD *)&v43;
    }
    else
    {
      v45 = (*(_QWORD *)&v43 - 1) & v37;
    }
    v46 = *v38;
    v47 = *(_QWORD ***)(*v38 + 8 * v45);
    if (!v47)
      goto LABEL_98;
    v48 = *v47;
    if (!*v47)
      goto LABEL_98;
    v49 = *(_QWORD *)&v43 - 1;
    while (1)
    {
      v50 = v48[1];
      if (v50 == v37)
      {
        if (v48[2] == v37)
        {
          v51 = (_QWORD *)*v48;
          if (v44.u32[0] > 1uLL)
          {
            v52 = v37;
            if (v37 >= *(_QWORD *)&v43)
              v52 = v37 % *(_QWORD *)&v43;
          }
          else
          {
            v52 = v49 & v37;
          }
          v54 = *(_QWORD **)(v46 + 8 * v52);
          do
          {
            v55 = v54;
            v54 = (_QWORD *)*v54;
          }
          while (v54 != v48);
          if (v55 == (_QWORD *)(a1 + 112))
            goto LABEL_85;
          v56 = v55[1];
          if (v44.u32[0] > 1uLL)
          {
            if (v56 >= *(_QWORD *)&v43)
              v56 %= *(_QWORD *)&v43;
          }
          else
          {
            v56 &= v49;
          }
          if (v56 == v52)
          {
LABEL_87:
            if (v51)
            {
              v57 = v51[1];
              goto LABEL_89;
            }
          }
          else
          {
LABEL_85:
            if (!v51)
              goto LABEL_86;
            v57 = v51[1];
            if (v44.u32[0] > 1uLL)
            {
              v58 = v51[1];
              if (v57 >= *(_QWORD *)&v43)
                v58 = v57 % *(_QWORD *)&v43;
            }
            else
            {
              v58 = v57 & v49;
            }
            if (v58 != v52)
            {
LABEL_86:
              *(_QWORD *)(v46 + 8 * v52) = 0;
              v51 = (_QWORD *)*v48;
              goto LABEL_87;
            }
LABEL_89:
            if (v44.u32[0] > 1uLL)
            {
              if (v57 >= *(_QWORD *)&v43)
                v57 %= *(_QWORD *)&v43;
            }
            else
            {
              v57 &= v49;
            }
            if (v57 != v52)
            {
              *(_QWORD *)(*v38 + 8 * v57) = v55;
              v51 = (_QWORD *)*v48;
            }
          }
          *v55 = v51;
          *v48 = 0;
          --*(_QWORD *)(a1 + 120);
          v59 = v48[3];
          v48[3] = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          operator delete(v48);
LABEL_98:
          v60 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v61 = *(_QWORD *)(a1 + 120);
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v106 = 2082;
            v107 = "";
            v108 = 1026;
            v109 = v39;
            v110 = 1026;
            *(_DWORD *)v111 = v61;
            *(_WORD *)&v111[4] = 2049;
            *(_QWORD *)&v111[6] = v37;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,alert submission timer erased\", \"submissionTimerMapSizeBefore\":%{public}d, \"submissionTimerMapSizeAfter\":%{public}d, \"alertTextID\":%{private}ld}", buf, 0x28u);
          }
LABEL_100:
          v62 = *(_QWORD *)(a1 + 72);
          i = *(_QWORD *)(a1 + 80);
          if (i != v62)
          {
            v64 = 1483715975 * ((unint64_t)(i - v62) >> 3);
            for (i = *(_QWORD *)(a1 + 72); i != *(_QWORD *)(a1 + 80); i += 440)
            {
              if (sub_1000350CC((_QWORD *)i) == v37)
              {
                v65 = *(unsigned __int8 *)(i + 23);
                if ((v65 & 0x80u) == 0)
                  v66 = *(unsigned __int8 *)(i + 23);
                else
                  v66 = *(_QWORD *)(i + 8);
                v67 = *((unsigned __int8 *)a2 + 23);
                v68 = (char)v67;
                if ((v67 & 0x80u) != 0)
                  v67 = a2[1];
                if (v66 == v67)
                {
                  if (v68 >= 0)
                    v69 = (unsigned __int8 *)a2;
                  else
                    v69 = (unsigned __int8 *)*a2;
                  if ((v65 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)i, v69, *(_QWORD *)(i + 8)))
                    {
LABEL_122:
                      v76 = i + 440;
                      v77 = *(_QWORD *)(a1 + 80);
                      if (i + 440 != v77)
                      {
                        do
                        {
                          if (*(char *)(i + 23) < 0)
                            operator delete(*(void **)i);
                          *(_OWORD *)i = *(_OWORD *)(i + 440);
                          v78 = *(_OWORD *)(i + 544);
                          *(_OWORD *)(i + 88) = *(_OWORD *)(i + 528);
                          *(_OWORD *)(i + 104) = v78;
                          v79 = *(_OWORD *)(i + 576);
                          *(_OWORD *)(i + 120) = *(_OWORD *)(i + 560);
                          *(_OWORD *)(i + 136) = v79;
                          v80 = *(_OWORD *)(i + 480);
                          *(_OWORD *)(i + 24) = *(_OWORD *)(i + 464);
                          *(_OWORD *)(i + 40) = v80;
                          v81 = *(_OWORD *)(i + 512);
                          *(_OWORD *)(i + 56) = *(_OWORD *)(i + 496);
                          *(_QWORD *)(i + 16) = *(_QWORD *)(i + 456);
                          *(_BYTE *)(i + 463) = 0;
                          *(_BYTE *)(i + 440) = 0;
                          *(_OWORD *)(i + 72) = v81;
                          v82 = *(_QWORD *)(i + 592);
                          *(_QWORD *)(i + 592) = 0;
                          v83 = *(_QWORD *)(i + 152);
                          *(_QWORD *)(i + 152) = v82;
                          if (v83)
                            (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v83 + 8))(v83, v69);
                          sub_1000329A0((uint64_t *)(i + 160));
                          *(_OWORD *)(i + 160) = *(_OWORD *)(i + 600);
                          *(_QWORD *)(i + 176) = *(_QWORD *)(i + 616);
                          *(_QWORD *)(i + 616) = 0;
                          *(_OWORD *)(i + 600) = 0u;
                          sub_1000329A0((uint64_t *)(i + 184));
                          *(_OWORD *)(i + 184) = *(_OWORD *)(i + 624);
                          *(_QWORD *)(i + 200) = *(_QWORD *)(i + 640);
                          *(_QWORD *)(i + 640) = 0;
                          *(_OWORD *)(i + 624) = 0u;
                          v84 = *(_OWORD *)(i + 824);
                          *(_OWORD *)(i + 368) = *(_OWORD *)(i + 808);
                          *(_OWORD *)(i + 384) = v84;
                          *(_OWORD *)(i + 400) = *(_OWORD *)(i + 840);
                          v85 = *(_OWORD *)(i + 760);
                          *(_OWORD *)(i + 304) = *(_OWORD *)(i + 744);
                          *(_OWORD *)(i + 320) = v85;
                          v86 = *(_OWORD *)(i + 792);
                          *(_OWORD *)(i + 336) = *(_OWORD *)(i + 776);
                          *(_OWORD *)(i + 352) = v86;
                          v87 = *(_OWORD *)(i + 696);
                          *(_OWORD *)(i + 240) = *(_OWORD *)(i + 680);
                          *(_OWORD *)(i + 256) = v87;
                          v88 = *(_OWORD *)(i + 728);
                          *(_OWORD *)(i + 272) = *(_OWORD *)(i + 712);
                          *(_OWORD *)(i + 288) = v88;
                          v89 = *(_OWORD *)(i + 664);
                          *(_OWORD *)(i + 208) = *(_OWORD *)(i + 648);
                          *(_OWORD *)(i + 224) = v89;
                          v90 = (void **)(i + 416);
                          if (*(char *)(i + 439) < 0)
                            operator delete(*v90);
                          *(_QWORD *)(i + 432) = *(_QWORD *)(i + 872);
                          *(_OWORD *)v90 = *(_OWORD *)(i + 856);
                          *(_BYTE *)(i + 879) = 0;
                          *(_BYTE *)(i + 856) = 0;
                          v91 = i + 440;
                          v92 = i + 880;
                          i += 440;
                        }
                        while (v92 != v77);
                        v76 = *(_QWORD *)(a1 + 80);
                        i = v91;
                      }
                      while (v76 != i)
                      {
                        v76 -= 440;
                        sub_10003BD3C(v76);
                      }
                      *(_QWORD *)(a1 + 80) = i;
                      v93 = SALogObjectGeneral;
                      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                      {
                        v94 = 1483715975 * ((unint64_t)(i - *(_QWORD *)(a1 + 72)) >> 3);
                        v95 = *(_QWORD *)(a1 + 120);
                        *(_DWORD *)buf = 68290051;
                        v106 = 2082;
                        *(_DWORD *)&buf[4] = 0;
                        v107 = "";
                        v108 = 1026;
                        v109 = v64;
                        v110 = 1026;
                        *(_DWORD *)v111 = v94;
                        *(_WORD *)&v111[4] = 2049;
                        *(void **)&v111[6] = __p[0];
                        *(_WORD *)&v111[14] = 1026;
                        *(_DWORD *)&v111[16] = v95;
                        v73 = "{\"msg%{public}.0s\":\"#saanalytics,metric erased\", \"alertMetricVectorSizeBefore\":%{pub"
                              "lic}d, \"alertMetricVectorSizeAfter\":%{public}d, \"alertTextID\":%{private}ld, \"alertSub"
                              "missionTimerMapSize\":%{public}d}";
                        v74 = v93;
                        v75 = 46;
LABEL_135:
                        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, v73, buf, v75);
                      }
                      goto LABEL_136;
                    }
                  }
                  else
                  {
                    if (!*(_BYTE *)(i + 23))
                      goto LABEL_122;
                    v70 = 0;
                    while (*(unsigned __int8 *)(i + v70) == v69[v70])
                    {
                      if (v65 == ++v70)
                        goto LABEL_122;
                    }
                  }
                }
              }
            }
          }
          v71 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v72 = 1483715975 * ((unint64_t)(i - *(_QWORD *)(a1 + 72)) >> 3);
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            v106 = 2082;
            v107 = "";
            v108 = 1026;
            v109 = v72;
            v110 = 2049;
            *(_QWORD *)v111 = v37;
            v73 = "{\"msg%{public}.0s\":\"#saanalytics,unable to erase metric\", \"alertMetricVectorSize\":%{public}d, \""
                  "alertTextID\":%{private}lu}";
            v74 = v71;
            v75 = 34;
            goto LABEL_135;
          }
LABEL_136:
          if (v101 < 0)
            operator delete(v99);
          if (SHIBYTE(v98) < 0)
            operator delete((void *)v97);
          if (SHIBYTE(v103) < 0)
            operator delete(v102[0]);
          return;
        }
      }
      else
      {
        if (v44.u32[0] > 1uLL)
        {
          if (v50 >= *(_QWORD *)&v43)
            v50 %= *(_QWORD *)&v43;
        }
        else
        {
          v50 &= v49;
        }
        if (v50 != v45)
          goto LABEL_98;
      }
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_98;
    }
  }
  v17 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *((unsigned __int8 *)a2 + 25);
    *(_DWORD *)buf = 68290051;
    v106 = 2082;
    *(_DWORD *)&buf[4] = 0;
    v107 = "";
    v108 = 1026;
    v109 = 0;
    v110 = 1026;
    *(_DWORD *)v111 = v16;
    *(_WORD *)&v111[4] = 1026;
    *(_DWORD *)&v111[6] = v18;
    *(_WORD *)&v111[10] = 2049;
    *(_QWORD *)&v111[12] = v6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,submitOnAlert\", \"forceSubmission\":%{public}d, \"isWEAReceived\":%{public}d, \"isSAReceived\":%{public}d, \"alertTextID\":%{private}ld}", buf, 0x2Eu);
  }
  __p[3] = v6;
  if (sub_10003C5DC((_QWORD *)(a1 + 96), (unint64_t)v6))
  {
    v19 = (void *)SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *((unsigned __int8 *)a2 + 26);
      v21 = *((unsigned __int8 *)a2 + 25);
      v22 = v19;
      v23 = sub_1000350CC(a2);
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v106 = 2082;
      v107 = "";
      v108 = 1026;
      v109 = v20;
      v110 = 1026;
      *(_DWORD *)v111 = v21;
      *(_WORD *)&v111[4] = 2049;
      *(_QWORD *)&v111[6] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,submission timer already created\", \"isWEAReceived\":%{public}d, \"isSAReceived\":%{public}d, \"alertTextID\":%{private}ld}", buf, 0x28u);

    }
    return;
  }
  if ((*((_DWORD *)sub_1000687EC() + 30) & 0x80000000) == 0
    || (v25 = (int)*((double *)sub_10003D044() + 5), (v25 & 0x80000000) == 0))
  {
    v26 = *(void **)a1;
    sub_10000E8A0(__p, "AlertMetricSubmission");
    SATimer::create(v26);
  }
  v53 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v106 = 2082;
    v107 = "";
    v108 = 1026;
    v109 = v25;
    v12 = "{\"msg%{public}.0s\":\"#saanalytics,#warning,invalidDuration\", \"durationSeconds\":%{public}d}";
    v13 = v53;
    v14 = OS_LOG_TYPE_DEFAULT;
    v15 = 24;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, buf, v15);
  }
}

void sub_100036B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;

  v45 = *(_QWORD **)(v43 - 96);
  if (v45 == (_QWORD *)(v43 - 120))
  {
    v46 = 4;
    v45 = (_QWORD *)(v43 - 120);
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100036BC4(_QWORD *a1, char **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  NSObject *v38;
  int v39;
  const char *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  int v64;
  int v65;
  void *v67[2];
  void *v68;
  void *__dst[2];
  void *v70;
  void **v71;
  void *__p[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83[2];
  uint64_t v84;

  v4 = (uint64_t *)a1[9];
  v5 = (uint64_t *)a1[10];
LABEL_2:
  if (v4 == v5)
  {
    v84 = 0;
    *(_OWORD *)v83 = 0u;
    v75 = 0uLL;
    *(_OWORD *)&__p[30] = 0u;
    memset(__p, 0, 32);
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&__p[4] = _Q1;
    *(_OWORD *)&__p[6] = _Q1;
    *(_OWORD *)&__p[8] = 0xBFF0000000000000;
    *(_OWORD *)&__p[10] = _Q1;
    *(_OWORD *)&__p[12] = _Q1;
    *(_OWORD *)&__p[14] = _Q1;
    *(_OWORD *)&__p[16] = 0u;
    LOBYTE(__p[17]) = 0;
    __p[18] = (void *)0xBFF0000000000000;
    v73 = _Q1;
    *(_QWORD *)&v74 = 0;
    memset(&__p[19], 0, 64);
    *(_OWORD *)&__p[27] = _Q1;
    *(_OWORD *)&__p[29] = _Q1;
    *((_QWORD *)&v74 + 1) = 0xBFF0000000000000;
    *(_QWORD *)&v76 = -1;
    *((_QWORD *)&v76 + 1) = 0xBFF0000000000000;
    v77 = 0xBFF0000000000000;
    v78 = 0xBFF0000000000000;
    v79 = 0xBFF0000000000000;
    v80 = 0xBFF0000000000000;
    v81 = _Q1;
    v82 = _Q1;
    sub_10000E8A0(v83, "Unknown");
    v18 = a1[10];
    v17 = a1[11];
    if (v18 >= v17)
    {
      v42 = a1[9];
      v43 = 0x6FB586FB586FB587 * ((uint64_t)(v18 - v42) >> 3) + 1;
      if (v43 > 0x94F2094F2094F2)
        sub_100004C50();
      v44 = 0x6FB586FB586FB587 * ((uint64_t)(v17 - v42) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x4A7904A7904A79)
        v45 = 0x94F2094F2094F2;
      else
        v45 = v43;
      if (v45)
      {
        if (v45 > 0x94F2094F2094F2)
          sub_100004984();
        v46 = (char *)operator new(440 * v45);
      }
      else
      {
        v46 = 0;
      }
      v47 = &v46[8 * ((uint64_t)(v18 - v42) >> 3)];
      *((void **)v47 + 2) = __p[2];
      *(_OWORD *)v47 = *(_OWORD *)__p;
      v48 = &v46[440 * v45];
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)(v47 + 88) = *(_OWORD *)&__p[11];
      *(_OWORD *)(v47 + 104) = *(_OWORD *)&__p[13];
      *(_OWORD *)(v47 + 120) = *(_OWORD *)&__p[15];
      *(_OWORD *)(v47 + 136) = *(_OWORD *)&__p[17];
      *(_OWORD *)(v47 + 24) = *(_OWORD *)&__p[3];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)&__p[5];
      *(_OWORD *)(v47 + 56) = *(_OWORD *)&__p[7];
      *(_OWORD *)(v47 + 72) = *(_OWORD *)&__p[9];
      *((_QWORD *)v47 + 21) = 0;
      *((_QWORD *)v47 + 22) = 0;
      v49 = *(_OWORD *)&__p[19];
      __p[2] = 0;
      __p[19] = 0;
      __p[20] = 0;
      *(_OWORD *)(v47 + 152) = v49;
      *(_OWORD *)(v47 + 168) = *(_OWORD *)&__p[21];
      __p[21] = 0;
      __p[22] = 0;
      *(_OWORD *)(v47 + 184) = *(_OWORD *)&__p[23];
      *((void **)v47 + 25) = __p[25];
      memset(&__p[23], 0, 24);
      v50 = *(_OWORD *)&__p[26];
      v51 = *(_OWORD *)&__p[28];
      v52 = v73;
      *((_OWORD *)v47 + 15) = *(_OWORD *)&__p[30];
      *((_OWORD *)v47 + 16) = v52;
      *((_OWORD *)v47 + 13) = v50;
      *((_OWORD *)v47 + 14) = v51;
      v53 = v74;
      v54 = v75;
      v55 = v77;
      *((_OWORD *)v47 + 19) = v76;
      *((_OWORD *)v47 + 20) = v55;
      *((_OWORD *)v47 + 17) = v53;
      *((_OWORD *)v47 + 18) = v54;
      v56 = v78;
      v57 = v79;
      v58 = v81;
      v59 = v82;
      *((_OWORD *)v47 + 23) = v80;
      *((_OWORD *)v47 + 24) = v58;
      *((_OWORD *)v47 + 21) = v56;
      *((_OWORD *)v47 + 22) = v57;
      v60 = *(_OWORD *)v83;
      *((_OWORD *)v47 + 25) = v59;
      *((_OWORD *)v47 + 26) = v60;
      *((_QWORD *)v47 + 54) = v84;
      v83[1] = 0;
      v84 = 0;
      v37 = v47 + 440;
      v83[0] = 0;
      if (v18 == v42)
      {
        a1[9] = v47;
        a1[10] = v37;
        a1[11] = v48;
      }
      else
      {
        do
        {
          v18 -= 440;
          sub_10003BE88((uint64_t)(v47 - 440), (__int128 *)v18);
        }
        while (v18 != v42);
        v18 = a1[9];
        v61 = a1[10];
        a1[9] = v47;
        a1[10] = v37;
        a1[11] = v48;
        while (v61 != v18)
        {
          v61 -= 440;
          sub_10003BD3C(v61);
        }
      }
      if (v18)
        operator delete((void *)v18);
    }
    else
    {
      v19 = *(_OWORD *)__p;
      *(void **)(v18 + 16) = __p[2];
      *(_OWORD *)v18 = v19;
      __p[0] = 0;
      __p[1] = 0;
      v20 = *(_OWORD *)&__p[5];
      v21 = *(_OWORD *)&__p[7];
      v22 = *(_OWORD *)&__p[9];
      *(_OWORD *)(v18 + 24) = *(_OWORD *)&__p[3];
      *(_OWORD *)(v18 + 72) = v22;
      *(_OWORD *)(v18 + 56) = v21;
      *(_OWORD *)(v18 + 40) = v20;
      v23 = *(_OWORD *)&__p[13];
      v24 = *(_OWORD *)&__p[15];
      v25 = *(_OWORD *)&__p[17];
      *(_OWORD *)(v18 + 88) = *(_OWORD *)&__p[11];
      *(_OWORD *)(v18 + 136) = v25;
      *(_OWORD *)(v18 + 120) = v24;
      *(_OWORD *)(v18 + 104) = v23;
      *(_QWORD *)(v18 + 160) = 0;
      *(_QWORD *)(v18 + 168) = 0;
      *(_QWORD *)(v18 + 176) = 0;
      *(_QWORD *)(v18 + 184) = 0;
      v26 = *(_OWORD *)&__p[19];
      __p[2] = 0;
      __p[19] = 0;
      *(_OWORD *)(v18 + 152) = v26;
      *(void **)(v18 + 168) = __p[21];
      *(void **)(v18 + 176) = __p[22];
      *(_OWORD *)&__p[20] = 0uLL;
      *(_QWORD *)(v18 + 192) = 0;
      *(_QWORD *)(v18 + 200) = 0;
      *(_OWORD *)(v18 + 184) = *(_OWORD *)&__p[23];
      *(void **)(v18 + 200) = __p[25];
      memset(&__p[22], 0, 32);
      *(_OWORD *)(v18 + 208) = *(_OWORD *)&__p[26];
      v27 = *(_OWORD *)&__p[28];
      v28 = *(_OWORD *)&__p[30];
      v29 = v74;
      *(_OWORD *)(v18 + 256) = v73;
      *(_OWORD *)(v18 + 272) = v29;
      *(_OWORD *)(v18 + 224) = v27;
      *(_OWORD *)(v18 + 240) = v28;
      v30 = v75;
      v31 = v76;
      v32 = v78;
      *(_OWORD *)(v18 + 320) = v77;
      *(_OWORD *)(v18 + 336) = v32;
      *(_OWORD *)(v18 + 288) = v30;
      *(_OWORD *)(v18 + 304) = v31;
      v33 = v79;
      v34 = v80;
      v35 = v82;
      *(_OWORD *)(v18 + 384) = v81;
      *(_OWORD *)(v18 + 400) = v35;
      *(_OWORD *)(v18 + 352) = v33;
      *(_OWORD *)(v18 + 368) = v34;
      v36 = *(_OWORD *)v83;
      *(_QWORD *)(v18 + 432) = v84;
      *(_OWORD *)(v18 + 416) = v36;
      v83[1] = 0;
      v84 = 0;
      v83[0] = 0;
      v37 = (char *)(v18 + 440);
    }
    a1[10] = v37;
    if (SHIBYTE(v84) < 0)
      operator delete(v83[0]);
    v71 = &__p[23];
    sub_100004EC0(&v71);
    v71 = &__p[20];
    sub_100004EC0(&v71);
    v62 = __p[19];
    __p[19] = 0;
    if (v62)
      (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v63 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v64 = 1483715975 * ((a1[10] - a1[9]) >> 3);
      v65 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
      __p[0] = (void *)68289538;
      LOWORD(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 2) = "";
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v64;
      LOWORD(__p[3]) = 1026;
      *(_DWORD *)((char *)&__p[3] + 2) = v65;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,getAlertMetricObject,created new\", \"alertMetricVectorSize\":%{public}d, \"alertTextVectorSize\":%{public}d}", (uint8_t *)__p, 0x1Eu);
    }
    return a1[10] - 440;
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    while (1)
    {
      if (v6 == v7)
      {
        v4 += 55;
        goto LABEL_2;
      }
      if (v6[23] < 0)
      {
        sub_100004870(__dst, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *(_OWORD *)v6;
        v70 = (void *)*((_QWORD *)v6 + 2);
        *(_OWORD *)__dst = v8;
      }
      if (SHIBYTE(v70) < 0)
      {
        sub_100004870(__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)__dst;
        __p[2] = v70;
      }
      v9 = sub_10003BDB8(v4[20], v4[21], (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v70) < 0)
        operator delete(__dst[0]);
      if (v9)
      {
        v38 = SALogObjectGeneral;
        if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          return (uint64_t)v4;
        v39 = 1483715975 * ((a1[10] - a1[9]) >> 3);
        if (v6[23] < 0)
          v6 = *(char **)v6;
        __p[0] = (void *)68289539;
        LOWORD(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 2) = "";
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v39;
        LOWORD(__p[3]) = 2081;
        *(void **)((char *)&__p[3] + 2) = v6;
        v40 = "{\"msg%{public}.0s\":\"#saanalytics,getAlertMetricObject,found existing sa alert\", \"alertMetricVectorSiz"
              "e\":%{public}d, \"alertText\":%{private, location:escape_only}s}";
        goto LABEL_39;
      }
      if (v6[23] < 0)
      {
        sub_100004870(v67, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v10 = *(_OWORD *)v6;
        v68 = (void *)*((_QWORD *)v6 + 2);
        *(_OWORD *)v67 = v10;
      }
      if (SHIBYTE(v68) < 0)
      {
        sub_100004870(__p, v67[0], (unint64_t)v67[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v67;
        __p[2] = v68;
      }
      v11 = sub_10003BDB8(v4[23], v4[24], (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      if (v11)
        break;
      v6 += 24;
    }
    v38 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return (uint64_t)v4;
    v41 = 1483715975 * ((a1[10] - a1[9]) >> 3);
    if (v6[23] < 0)
      v6 = *(char **)v6;
    __p[0] = (void *)68289539;
    LOWORD(__p[1]) = 2082;
    *(void **)((char *)&__p[1] + 2) = "";
    WORD1(__p[2]) = 1026;
    HIDWORD(__p[2]) = v41;
    LOWORD(__p[3]) = 2081;
    *(void **)((char *)&__p[3] + 2) = v6;
    v40 = "{\"msg%{public}.0s\":\"#saanalytics,getAlertMetricObject,found existing wea alert\", \"alertMetricVectorSize\""
          ":%{public}d, \"alertText\":%{private, location:escape_only}s}";
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v40, (uint8_t *)__p, 0x22u);
  }
  return (uint64_t)v4;
}

void sub_100037348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v50;

  a22 = &a49;
  sub_100004EC0((void ***)&a22);
  a22 = &a46;
  sub_100004EC0((void ***)&a22);
  v50 = a45;
  a45 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000373E0(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  v4 = (void **)(a1 + 184);
  sub_100004EC0(&v4);
  v4 = (void **)(a1 + 160);
  sub_100004EC0(&v4);
  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100037460(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  NSObject *v7;
  char *v8;
  void *p_s1;
  void **v10;
  uint64_t v11;
  unsigned __int8 v12;
  size_t v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  NSObject *v24;
  int v25;
  void *v26;
  void *__dst[2];
  void *v29;
  void *__p[2];
  void *v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[18];
  __int16 v41;
  void **v42;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 == v4)
  {
LABEL_52:
    v21 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v22 = a2;
      else
        v22 = *a2;
      *(_DWORD *)buf = 68289283;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      v39 = 2081;
      *(_QWORD *)v40 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,getAlertMetricObjectFromHash,notFound\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    return 0;
  }
  while (2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100004870(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v29 = a2[2];
    }
    if (SHIBYTE(v29) < 0)
    {
      sub_100004870(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v31 = v29;
    }
    v6 = *(char **)(v3 + 184);
    v5 = *(char **)(v3 + 192);
    while (v6 != v5)
    {
      SACommonUtils::getHashForString(v6, (uint64_t *)&__s1);
      v7 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v6;
        if (v6[23] < 0)
          v8 = *(char **)v6;
        p_s1 = &__s1;
        if ((v34 & 0x80u) != 0)
          p_s1 = __s1;
        if (SHIBYTE(v31) >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        v39 = 2081;
        *(_QWORD *)v40 = v8;
        *(_WORD *)&v40[8] = 2081;
        *(_QWORD *)&v40[10] = p_s1;
        v41 = 2081;
        v42 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,matchingHash\", \"text\":%{private, location:escape_only}s, \"result\":%{private, location:escape_only}s, \"alertHash\":%{private, location:escape_only}s}", buf, 0x30u);
      }
      v11 = v34;
      v12 = v34;
      if ((v34 & 0x80u) == 0)
        v13 = v34;
      else
        v13 = __n;
      v14 = (void *)HIBYTE(v31);
      if (SHIBYTE(v31) < 0)
        v14 = __p[1];
      if ((void *)v13 == v14)
      {
        if (SHIBYTE(v31) >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if ((char)v34 < 0)
        {
          v17 = __s1;
          if (!memcmp(__s1, v15, __n))
          {
LABEL_39:
            v18 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289026;
              v36 = 0;
              v37 = 2082;
              v38 = "";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,matchSuccess\"}", buf, 0x12u);
              v12 = v34;
            }
            if ((v12 & 0x80) != 0)
              operator delete(__s1);
            v19 = 1;
            goto LABEL_46;
          }
          goto LABEL_37;
        }
        if (!v34)
          goto LABEL_39;
        v16 = &__s1;
        while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
        {
          v16 = (void **)((char *)v16 + 1);
          v15 = (void **)((char *)v15 + 1);
          if (!--v11)
            goto LABEL_39;
        }
      }
      if (((char)v34 & 0x80000000) == 0)
        goto LABEL_38;
      v17 = __s1;
LABEL_37:
      operator delete(v17);
LABEL_38:
      v6 += 24;
    }
    v20 = SALogObjectGeneral;
    v19 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,matchFailed\"}", buf, 0x12u);
      v19 = 0;
    }
LABEL_46:
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29) < 0)
      operator delete(__dst[0]);
    if (!v19)
    {
      v3 += 440;
      if (v3 == v4)
        goto LABEL_52;
      continue;
    }
    break;
  }
  v24 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 1483715975 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
    if (*((char *)a2 + 23) >= 0)
      v26 = a2;
    else
      v26 = *a2;
    *(_DWORD *)buf = 68289539;
    v36 = 0;
    v37 = 2082;
    v38 = "";
    v39 = 1026;
    *(_DWORD *)v40 = v25;
    *(_WORD *)&v40[4] = 2081;
    *(_QWORD *)&v40[6] = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,getAlertMetricObjectFromHash,found existing wea alert\", \"alertMetricVectorSize\":%{public}d, \"hash\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  return v3;
}

void sub_1000378D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003790C(uint64_t a1, void *a2, char a3, __int128 *a4, __int128 *a5, double a6, double a7)
{
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  char *i;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  uint8_t *v41;
  void **p_s1;
  uint64_t v43;
  void *v44;
  void *v45;
  void **v46;
  void **v47;
  int v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  id v70;
  void *v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::ios_base *v75;
  std::string::size_type v76;
  void **v77;
  unint64_t v78;
  std::string::size_type v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _BYTE *v85;
  int v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  NSObject *v92;
  uint32_t v93;
  uint64_t v94;
  std::string::size_type v95;
  int v96;
  std::string::size_type v97;
  double CFAbsoluteTimeFromTimeString;
  double v99;
  uint64_t v100;
  NSObject *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  void *v104;
  int v105;
  int v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v113;
  __int128 v114;
  _BYTE v115[32];
  std::string v116;
  std::string *v117;
  char *v118;
  uint64_t v119;
  void *__p[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *__s1;
  size_t __n;
  unsigned __int8 v126;
  _QWORD v127[2];
  _QWORD v128[2];
  uint8_t buf[8];
  __int128 v130;
  __int16 v131;
  int v132;
  std::string v133[2];
  void *v134[2];
  void *v135[2];
  void *v136[6];
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  unint64_t v143;

  v117 = 0;
  v119 = 0;
  v11 = a2;
  v118 = 0;
  v113 = v11;
  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", CFSTR("info")));
    if (v12 && (v13 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v12, v13) & 1) != 0))
    {
      v110 = a1;
      *(_OWORD *)__p = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v14 = v12;
      v15 = (char *)objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", __p, v133, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v121;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v121 != v16)
              objc_enumerationMutation(v14);
            v18 = (void *)*((_QWORD *)__p[1] + (_QWORD)i);
            if (v18)
            {
              v19 = objc_opt_class(NSDictionary);
              if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
              {
                sub_100034FBC(v18, CFSTR("CMAMtext"), (uint64_t *)&v117);
                sub_100034FBC(v18, CFSTR("CMAMlongtext"), (uint64_t *)&v117);
                sub_100034FBC(v18, CFSTR("cmamtext"), (uint64_t *)&v117);
                sub_100034FBC(v18, CFSTR("cmamlongtext"), (uint64_t *)&v117);
              }
            }
          }
          v15 = (char *)objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", __p, v133, 16);
        }
        while (v15);
      }

      a1 = v110;
      v20 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = objc_msgSend(v14, "count");
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v130) = 2082;
        *(_QWORD *)((char *)&v130 + 2) = "";
        WORD5(v130) = 1026;
        HIDWORD(v130) = v21;
        v131 = 1026;
        v132 = -1431655765 * ((unint64_t)(v118 - (char *)v117) >> 3);
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,getAlertTextVector\", \"infoCount\":%{public}d, \"alertTextCounts\":%{public}d}", buf, 0x1Eu);
      }

      v22 = v113;
    }
    else
    {

      v22 = v113;
    }
    memset(&v116, 0, sizeof(v116));
    if (SACommonUtils::getStringFromDictionary(v22, (uint64_t)CFSTR("uid"), &v116))
    {
      if (*(_QWORD *)(a1 + 136))
      {
        v127[0] = kIncomingMessageInterfaceKey;
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *((_QWORD *)a5 + 8)));
        v128[0] = v23;
        v127[1] = kIsReceivedViaPushKey;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_DWORD *)a5 + 14) == 2));
        v128[1] = v24;
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v128, v127, 2));

        sub_1000537E8(*(_QWORD *)(a1 + 136) + 112, (void **)&v116.__r_.__value_.__l.__data_, v25);
      }
      goto LABEL_24;
    }
  }
  else
  {
    memset(&v116, 0, sizeof(v116));
  }
  v26 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    v133[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onsaalertreceived,missingUid\"}", (uint8_t *)v133, 0x12u);
  }
LABEL_24:
  v137 = 0u;
  v138 = 0u;
  *(_OWORD *)v135 = 0u;
  memset(v136, 0, sizeof(v136));
  *(_OWORD *)v134 = 0u;
  memset(v133, 0, sizeof(v133));
  __asm { FMOV            V0.2D, #10.0 }
  v140 = _Q0;
  __asm { FMOV            V0.2D, #-1.0 }
  v141 = _Q0;
  v142 = _Q0;
  v139 = 0;
  v143 = 0xBFF0000000000000;
  v33 = sub_1000687EC();
  sub_10002AEE8((uint64_t)v33, v133);
  SACommonUtils::getHashForString((char *)&v133[1], (uint64_t *)__p);
  SACommonUtils::getHashForString((char *)v133, (uint64_t *)buf);
  v35 = (char *)v117;
  v34 = v118;
  if (v117 == (std::string *)v118)
  {
    v48 = 0;
    goto LABEL_62;
  }
  while (1)
  {
    SACommonUtils::getHashForString(v35, (uint64_t *)&__s1);
    v36 = v126;
    v37 = v126;
    v38 = __n;
    if ((v126 & 0x80u) == 0)
      v39 = v126;
    else
      v39 = __n;
    v40 = HIBYTE(v130);
    if (v130 < 0)
      v40 = v130;
    if (v39 == v40)
    {
      if (v130 >= 0)
        v41 = buf;
      else
        v41 = *(uint8_t **)buf;
      if ((v126 & 0x80) != 0)
      {
        v44 = __s1;
        if (!memcmp(__s1, v41, __n))
          goto LABEL_60;
      }
      else
      {
        if (!v126)
          goto LABEL_61;
        p_s1 = &__s1;
        v43 = v126;
        while (*(unsigned __int8 *)p_s1 == *v41)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v41;
          if (!--v43)
            goto LABEL_61;
        }
      }
    }
    v45 = (void *)BYTE7(v121);
    if (SBYTE7(v121) < 0)
      v45 = __p[1];
    if ((void *)v39 == v45)
      break;
LABEL_53:
    if ((v37 & 0x80) != 0)
    {
      v44 = __s1;
LABEL_56:
      operator delete(v44);
    }
    v35 += 24;
    if (v35 == v34)
    {
      v48 = 0;
      goto LABEL_62;
    }
  }
  if ((SBYTE7(v121) & 0x80u) == 0)
    v46 = __p;
  else
    v46 = (void **)__p[0];
  if ((v37 & 0x80) == 0)
  {
    if (!v37)
      goto LABEL_61;
    v47 = &__s1;
    while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v46)
    {
      v47 = (void **)((char *)v47 + 1);
      v46 = (void **)((char *)v46 + 1);
      if (!--v36)
        goto LABEL_61;
    }
    goto LABEL_53;
  }
  v44 = __s1;
  if (memcmp(__s1, v46, v38))
    goto LABEL_56;
LABEL_60:
  operator delete(v44);
LABEL_61:
  v48 = 1;
LABEL_62:
  if (SHIBYTE(v130) < 0)
    operator delete(*(void **)buf);
  if (SBYTE7(v121) < 0)
    operator delete(__p[0]);
  __p[0] = &v138;
  sub_100004EC0((void ***)__p);
  __p[0] = &v136[5];
  sub_100004EC0((void ***)__p);
  if (SHIBYTE(v136[4]) < 0)
    operator delete(v136[2]);
  if (SHIBYTE(v136[1]) < 0)
    operator delete(v135[1]);
  if (SHIBYTE(v135[0]) < 0)
    operator delete(v134[0]);
  if (SHIBYTE(v133[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v133[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v133[0].__r_.__value_.__l.__data_);
    if (!v48)
      goto LABEL_79;
LABEL_76:
    v49 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_95;
    v133[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v50 = "{\"msg%{public}.0s\":\"#saanalytics,skipping sa alert for eq\"}";
    v51 = v49;
    v52 = OS_LOG_TYPE_DEFAULT;
LABEL_94:
    _os_log_impl((void *)&_mh_execute_header, v51, v52, v50, (uint8_t *)v133, 0x12u);
    goto LABEL_95;
  }
  if (v48)
    goto LABEL_76;
LABEL_79:
  v53 = *a4;
  *((_DWORD *)a5 + 10) = *((_DWORD *)a4 + 4);
  *(__int128 *)((char *)a5 + 24) = v53;
  if (v117 == (std::string *)v118)
  {
    v64 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_95;
    v133[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v50 = "{\"msg%{public}.0s\":\"#saanalytics,onsaalertreceived,alert does not have any message,ignoring\"}";
LABEL_93:
    v51 = v64;
    v52 = OS_LOG_TYPE_ERROR;
    goto LABEL_94;
  }
  v54 = sub_100036BC4((_QWORD *)a1, (char **)&v117);
  v55 = v54;
  if (!v54)
  {
    v64 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_95;
    v133[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v50 = "{\"msg%{public}.0s\":\"#saanalytics,onsaalertreceived,alert metric object could not be created\"}";
    goto LABEL_93;
  }
  if (*(double *)(v54 + 368) < 0.0)
  {
    v56 = mach_continuous_time();
    v57 = sub_1000842A4(v56);
    v58 = -1.0;
    if (v57 >= 0.0)
    {
      v59 = *(double *)(a1 + 160);
      if (v59 >= 0.0)
        v58 = v57 - v59;
    }
    *(double *)(v55 + 368) = v58;
  }
  if (*(_BYTE *)(v55 + 25))
  {
    v60 = (void *)SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v61 = 1483715975 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
      v62 = v60;
      v63 = sub_1000350CC((_QWORD *)v55);
      v133[0].__r_.__value_.__r.__words[0] = 68289539;
      LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v133[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v133[0].__r_.__value_.__r.__words[2]) = v61;
      LOWORD(v133[1].__r_.__value_.__l.__data_) = 2049;
      *(std::string::size_type *)((char *)v133[1].__r_.__value_.__r.__words + 2) = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onsaalertreceived,alert already received\", \"alertMetricVectorSize\":%{public}d, \"alertTextID\":%{private}ld}", (uint8_t *)v133, 0x22u);

    }
    goto LABEL_95;
  }
  v114 = *a5;
  *(_OWORD *)v115 = a5[1];
  *(_OWORD *)&v115[16] = a5[2];
  v65 = *((_QWORD *)a5 + 6);
  v66 = *((_DWORD *)a5 + 14);
  v68 = *((_QWORD *)a5 + 8);
  v67 = *((_QWORD *)a5 + 9);
  v69 = *(_BYTE *)(a1 + 51);
  v70 = v113;
  v71 = v70;
  if (!v113)
  {
    v90 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_176;
    v133[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v91 = "{\"msg%{public}.0s\":\"#saanalytics,alert received with nil payload\"}";
    v92 = v90;
    v93 = 18;
LABEL_152:
    _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, v91, (uint8_t *)v133, v93);
    goto LABEL_176;
  }
  v72 = *(_QWORD *)a4;
  if (*(double *)a4 < 0.0)
  {
    v94 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_176;
    v95 = *((_QWORD *)a4 + 1);
    v96 = *((_DWORD *)a4 + 4);
    v133[0].__r_.__value_.__r.__words[0] = 68289794;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(v133[0].__r_.__value_.__r.__words[2]) = 2050;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[2] + 4) = v72;
    WORD2(v133[1].__r_.__value_.__r.__words[0]) = 2050;
    *(std::string::size_type *)((char *)v133[1].__r_.__value_.__r.__words + 6) = v95;
    HIWORD(v133[1].__r_.__value_.__r.__words[1]) = 1026;
    LODWORD(v133[1].__r_.__value_.__r.__words[2]) = v96;
    v91 = "{\"msg%{public}.0s\":\"#saanalytics,saReception,invalid time\", \"crntTime\":\"%{public}0.1f\", \"timeUnc\":\""
          "%{public}0.1f\", \"reliability\":%{public}d}";
    v92 = v94;
    v93 = 44;
    goto LABEL_152;
  }
  SACommonUtils::getWEAHandling(v70, (std::string *)(v55 + 416));
  *(_DWORD *)(v55 + 288) = v66;
  *(_OWORD *)(v55 + 256) = *(_OWORD *)&v115[8];
  *(_DWORD *)(v55 + 272) = *(_DWORD *)&v115[24];
  *(_OWORD *)(v55 + 232) = v114;
  *(_DWORD *)(v55 + 248) = *(_DWORD *)v115;
  *(_QWORD *)(v55 + 296) = v68;
  if (v66 == 1)
  {
    *(_QWORD *)(v55 + 304) = v67;
    *(_QWORD *)(v55 + 280) = v65;
  }
  *(_QWORD *)(v55 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(v55 + 40) = 0xBFF0000000000000;
  *(_BYTE *)(v55 + 361) = v69;
  if (!SACommonUtils::getStringFromDictionary(v71, (uint64_t)CFSTR("uid"), (std::string *)v55))
    goto LABEL_161;
  *(_QWORD *)buf = 0;
  v130 = 0uLL;
  v133[0].__r_.__value_.__r.__words[0] = v73;
  *(std::string::size_type *)((char *)v133[0].__r_.__value_.__r.__words + *(_QWORD *)(v73 - 24)) = v74;
  v133[0].__r_.__value_.__l.__size_ = 0;
  v75 = (std::ios_base *)((char *)v133 + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v75, &v133[1]);
  v75[1].__vftable = 0;
  v75[1].__fmtflags_ = -1;
  *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[2]
                            + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[2] - 24)) = v76;
  *(std::string::size_type *)((char *)v133[0].__r_.__value_.__r.__words
  std::streambuf::basic_streambuf(&v133[1]);
  memset(&v136[1], 0, 32);
  LODWORD(v136[5]) = 24;
  std::string::operator=((std::string *)&v136[1], (const std::string *)v55);
  v136[4] = 0;
  if (SHIBYTE(v136[3]) >= 0)
    v77 = &v136[1];
  else
    v77 = (void **)v136[1];
  if (SHIBYTE(v136[3]) >= 0)
    v78 = HIBYTE(v136[3]);
  else
    v78 = (unint64_t)v136[2];
  if (((uint64_t)v136[5] & 8) != 0)
  {
    v133[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v77;
    v134[0] = v77;
    v136[4] = (char *)v77 + v78;
    v134[1] = (char *)v77 + v78;
  }
  if (((uint64_t)v136[5] & 0x10) != 0)
  {
    v136[4] = (char *)v77 + v78;
    if (SHIBYTE(v136[3]) >= 0)
      v79 = 22;
    else
      v79 = ((unint64_t)v136[3] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize((std::string *)&v136[1], v79, 0);
    v80 = (char *)HIBYTE(v136[3]);
    if (SHIBYTE(v136[3]) < 0)
      v80 = (char *)v136[2];
    v135[0] = v77;
    v135[1] = v77;
    v136[0] = &v80[(_QWORD)v77];
    if (((uint64_t)v136[5] & 3) != 0)
    {
      if (v78 >> 31)
      {
        v81 = ((v78 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v82 = 0x7FFFFFFF * ((v81 + ((v78 - 0x80000000 - v81) >> 1)) >> 30);
        v77 = (void **)((char *)v77 + v82 + 0x7FFFFFFF);
        v78 = v78 - v82 - 0x7FFFFFFF;
        v135[1] = v77;
      }
      if (v78)
        v135[1] = (char *)v77 + v78;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v121 = 0;
  while (2)
  {
    std::istream::sentry::sentry(&__s1, v133, 1);
    if (!(_BYTE)__s1)
      goto LABEL_140;
    if (SBYTE7(v121) < 0)
    {
      *(_BYTE *)__p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      BYTE7(v121) = 0;
    }
    v83 = 0;
    while (2)
    {
      v84 = *(_QWORD **)((char *)&v133[1].__r_.__value_.__r.__words[2]
                       + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[0] - 24));
      v85 = (_BYTE *)v84[3];
      if (v85 != (_BYTE *)v84[4])
      {
        v84[3] = v85 + 1;
        LOBYTE(v84) = *v85;
LABEL_131:
        if (v84 == 44)
        {
          v86 = 0;
          goto LABEL_139;
        }
        std::string::push_back((std::string *)__p, (std::string::value_type)v84);
        --v83;
        if (SBYTE7(v121) < 0 && __p[1] == (void *)0x7FFFFFFFFFFFFFF7)
        {
          v86 = 4;
          goto LABEL_139;
        }
        continue;
      }
      break;
    }
    LODWORD(v84) = (*(uint64_t (**)(_QWORD *))(*v84 + 80))(v84);
    if ((_DWORD)v84 != -1)
      goto LABEL_131;
    if (v83)
      v86 = 2;
    else
      v86 = 6;
LABEL_139:
    std::ios_base::clear((std::ios_base *)((char *)v133 + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v133[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[0] - 24)) | v86);
LABEL_140:
    if ((*((_BYTE *)&v133[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v133[0].__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
    {
      v87 = (_OWORD *)v130;
      if ((unint64_t)v130 >= *((_QWORD *)&v130 + 1))
      {
        v89 = sub_100004ABC((uint64_t *)buf, (__int128 *)__p);
      }
      else
      {
        if (SBYTE7(v121) < 0)
        {
          sub_100004870((_BYTE *)v130, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          v88 = *(_OWORD *)__p;
          *(_QWORD *)(v130 + 16) = v121;
          *v87 = v88;
        }
        v89 = (uint64_t)v87 + 24;
      }
      *(_QWORD *)&v130 = v89;
      continue;
    }
    break;
  }
  if (SBYTE7(v121) < 0)
    operator delete(__p[0]);
  *(std::string::size_type *)((char *)v133[0].__r_.__value_.__r.__words
  v133[0].__r_.__value_.__r.__words[2] = v97;
  if (SHIBYTE(v136[3]) < 0)
    operator delete(v136[1]);
  std::streambuf::~streambuf(&v133[1]);
  std::ios::~ios(&v137);
  CFAbsoluteTimeFromTimeString = -1.0;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - *(_QWORD *)buf) >> 3) >= 3)
    CFAbsoluteTimeFromTimeString = SACommonUtils::extractCFAbsoluteTimeFromTimeString((unsigned __int8 *)(*(_QWORD *)buf + 48));
  v133[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_100004EC0((void ***)v133);
  *(double *)(v55 + 40) = CFAbsoluteTimeFromTimeString;
  if (CFAbsoluteTimeFromTimeString >= 0.0)
    *(double *)(v55 + 80) = vabdd_f64(*(double *)a4, CFAbsoluteTimeFromTimeString) * 1000.0;
LABEL_161:
  *(_QWORD *)(v55 + 88) = 0xBFF0000000000000;
  if (a7 >= 0.0)
    *(double *)(v55 + 88) = vabdd_f64(*(double *)a4, a7) * 1000.0;
  *(_QWORD *)(v55 + 224) = 0xBFF0000000000000;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v121 = 0;
  if (SACommonUtils::getStringFromDictionary(v71, (uint64_t)CFSTR("ingress_timestamp"), (std::string *)__p))
  {
    v99 = SACommonUtils::extractCFAbsoluteTimeFromTimeString((unsigned __int8 *)__p);
    if (v99 >= 0.0)
      *(double *)(v55 + 224) = vabdd_f64(*(double *)a4, v99) * 1000.0;
  }
  if ((std::string **)(v55 + 160) != &v117)
    sub_10003282C(v55 + 160, v117, (__int128 *)v118, 0xAAAAAAAAAAAAAAABLL * ((v118 - (char *)v117) >> 3));
  *(_BYTE *)(v55 + 25) = 1;
  *(_BYTE *)(v55 + 136) = a3;
  *(double *)(v55 + 144) = a6;
  *(_OWORD *)(v55 + 112) = *(_OWORD *)(v55 + 232);
  *(_DWORD *)(v55 + 128) = *(_DWORD *)(v55 + 248);
  *(_OWORD *)(v55 + 312) = *(_OWORD *)(v55 + 256);
  *(_DWORD *)(v55 + 328) = *(_DWORD *)(v55 + 272);
  if (!*(_BYTE *)(v55 + 26))
    *(_BYTE *)(v55 + 24) = 1;
  v100 = sub_1000350CC((_QWORD *)v55);
  v101 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v102 = v55;
    if (*(char *)(v55 + 23) < 0)
      v102 = *(_QWORD *)v55;
    v103 = *(_QWORD *)(v55 + 40);
    v104 = *(void **)(v55 + 112);
    v105 = *(unsigned __int8 *)(v55 + 136);
    v106 = *(unsigned __int8 *)(v55 + 24);
    v107 = *(void **)(v55 + 80);
    v108 = *(void **)(v55 + 88);
    v109 = *(void **)(v55 + 144);
    v133[0].__r_.__value_.__r.__words[0] = 68291331;
    LOWORD(v133[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(v133[0].__r_.__value_.__r.__words[2]) = 2081;
    *(std::string::size_type *)((char *)&v133[0].__r_.__value_.__r.__words[2] + 4) = v102;
    WORD2(v133[1].__r_.__value_.__r.__words[0]) = 2049;
    *(std::string::size_type *)((char *)v133[1].__r_.__value_.__r.__words + 6) = v100;
    HIWORD(v133[1].__r_.__value_.__r.__words[1]) = 2050;
    v133[1].__r_.__value_.__r.__words[2] = v103;
    LOWORD(v134[0]) = 2050;
    *(void **)((char *)v134 + 2) = v104;
    WORD1(v134[1]) = 1025;
    HIDWORD(v134[1]) = v105;
    LOWORD(v135[0]) = 1026;
    *(_DWORD *)((char *)v135 + 2) = v106;
    HIWORD(v135[0]) = 2050;
    v135[1] = v107;
    LOWORD(v136[0]) = 2050;
    *(void **)((char *)v136 + 2) = v108;
    WORD1(v136[1]) = 2049;
    *(void **)((char *)&v136[1] + 4) = v109;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,sa received\", \"id\":%{private, location:escape_only}s, \"alertTextID\":%{private}lu, \"alertOriginationTime\":\"%{public}0.1f\", \"saReceivedTime\":\"%{public}0.1f\", \"insidePolygon\":%{private}d, \"saReceivedBeforeWEA\":%{public}d, \"salatencyOriginatorMilliSec\":\"%{public}0.2f\", \"salatencyServerMilliSec\":\"%{public}0.2f\", \"distanceToPolygon\":\"%{private}0.2f\"}", (uint8_t *)v133, 0x64u);
  }
  sub_100035270(v55);
  if (SBYTE7(v121) < 0)
    operator delete(__p[0]);
LABEL_176:

  sub_100035DDC(a1, (uint64_t *)v55, 0);
LABEL_95:
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  v133[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  sub_100004EC0((void ***)v133);

}

void sub_1000389D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  __cxa_end_catch();
  if (a37 < 0)
    operator delete(__p);
  sub_100035430((uint64_t)&a55);
  __p = &a51;
  sub_100004EC0((void ***)&__p);

  if (a28 < 0)
    operator delete(a23);
  a51 = &a29;
  sub_100004EC0((void ***)&a51);

  _Unwind_Resume(a1);
}

void sub_100038B9C(uint64_t a1, uint64_t a2, __int128 *a3, double *a4)
{
  NSObject *v8;
  std::string::size_type v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  void *v13;
  double Current;
  void *v21;
  unint64_t v22;
  __int128 v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  double v39;
  double v40;
  double v41;
  double DistanceCoordinates;
  double v43;
  double v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  __int128 v61;
  std::string *v62;
  __int128 *v63;
  unint64_t v64;
  std::string buf[2];
  void *v66[2];
  void *v67[2];
  __int128 v68;
  void *__p[2];
  _BYTE v70[32];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint8_t v79[8];
  __int16 v80;
  const char *v81;
  __int16 v82;
  _BYTE v83[18];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  int v107;

  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v9 = *(_QWORD *)(a2 + 8);
    buf[0].__r_.__value_.__r.__words[0] = 68289283;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onIgneousAlertReceived\", \"uid\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_DWORD *)(a2 + 204) == 2;
    v77[0] = kIncomingMessageInterfaceKey;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *((_QWORD *)a3 + 8)));
    v77[1] = off_100102438;
    v78[0] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10));
    v78[1] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v78, v77, 2));

    sub_1000539D0(*(_QWORD *)(a1 + 136) + 112, (void **)(a2 + 8), v13);
  }
  Current = CFAbsoluteTimeGetCurrent();
  *((double *)a3 + 3) = Current;
  *((_QWORD *)a3 + 4) = 0xBFF0000000000000;
  *((_DWORD *)a3 + 10) = -1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v71 = 0u;
  memset(v70, 0, sizeof(v70));
  v68 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v66 = 0u;
  *(_OWORD *)v67 = 0u;
  memset(buf, 0, sizeof(buf));
  __asm { FMOV            V0.2D, #10.0 }
  v73 = _Q0;
  __asm { FMOV            V0.2D, #-1.0 }
  v74 = _Q0;
  v61 = _Q0;
  v75 = _Q0;
  v72 = 0;
  v76 = 0xBFF0000000000000;
  v21 = sub_1000687EC();
  sub_10002AEE8((uint64_t)v21, buf);
  v22 = sub_100004ABC((uint64_t *)&v62, (__int128 *)buf);
  v63 = (__int128 *)v22;
  if (v22 >= v64)
  {
    v24 = (__int128 *)sub_100004ABC((uint64_t *)&v62, (__int128 *)&buf[1]);
  }
  else
  {
    if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004870((_BYTE *)v22, buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_);
    }
    else
    {
      v23 = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)&buf[1].__r_.__value_.__l + 2);
      *(_OWORD *)v22 = v23;
    }
    v24 = (__int128 *)(v22 + 24);
  }
  v63 = v24;
  v25 = sub_100036BC4((_QWORD *)a1, (char **)&v62);
  v26 = v25;
  if (v25)
  {
    if (*(double *)(v25 + 368) < 0.0)
    {
      v27 = mach_continuous_time();
      v28 = sub_1000842A4(v27);
      v29 = -1.0;
      if (v28 >= 0.0)
      {
        v30 = *(double *)(a1 + 160);
        if (v30 >= 0.0)
          v29 = v28 - v30;
      }
      *(double *)(v26 + 368) = v29;
    }
    if (*(_BYTE *)(v26 + 25))
    {
      v31 = (void *)SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v32 = 1483715975 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
        v33 = v31;
        v34 = sub_1000350CC((_QWORD *)v26);
        *(_QWORD *)v79 = 68289539;
        v80 = 2082;
        v81 = "";
        v82 = 1026;
        *(_DWORD *)v83 = v32;
        *(_WORD *)&v83[4] = 2049;
        *(_QWORD *)&v83[6] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onIgneousAlertReceived,alert already received\", \"alertMetricVectorSize\":%{public}d, \"alertTextID\":%{private}ld}", v79, 0x22u);

      }
    }
    else
    {
      if (Current < 0.0)
      {
        v60 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v79 = 68289794;
          v80 = 2082;
          *(_DWORD *)&v79[4] = 0;
          v81 = "";
          v82 = 2050;
          *(double *)v83 = Current;
          *(_WORD *)&v83[8] = 2050;
          *(_QWORD *)&v83[10] = 0xBFF0000000000000;
          v84 = 1026;
          LODWORD(v85) = -1;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,saReception,invalid time\", \"crntTime\":\"%{public}0.1f\", \"timeUnc\":\"%{public}0.1f\", \"reliability\":%{public}d}", v79, 0x2Cu);
        }
      }
      else
      {
        v36 = *(_BYTE *)(a1 + 51);
        *(_DWORD *)(v26 + 288) = *((_DWORD *)a3 + 14);
        v37 = *(__int128 *)((char *)a3 + 24);
        *(_DWORD *)(v26 + 272) = *((_DWORD *)a3 + 10);
        *(_OWORD *)(v26 + 256) = v37;
        v38 = *a3;
        *(_DWORD *)(v26 + 248) = *((_DWORD *)a3 + 4);
        *(_OWORD *)(v26 + 232) = v38;
        *(_QWORD *)(v26 + 296) = *((_QWORD *)a3 + 8);
        *(_QWORD *)(v26 + 80) = 0xBFF0000000000000;
        *(_OWORD *)(v26 + 40) = v61;
        *(_BYTE *)(v26 + 361) = v36;
        std::string::operator=((std::string *)v26, (const std::string *)(a2 + 8));
        if ((std::string **)(v26 + 160) != &v62)
          sub_10003282C(v26 + 160, v62, v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v62) >> 3));
        *(_BYTE *)(v26 + 25) = 1;
        *(_BYTE *)(v26 + 136) = 1;
        *(_QWORD *)(v26 + 144) = 0xBFF0000000000000;
        *(_OWORD *)(v26 + 112) = *(_OWORD *)(v26 + 232);
        *(_DWORD *)(v26 + 128) = *(_DWORD *)(v26 + 248);
        *(_OWORD *)(v26 + 312) = *(_OWORD *)(v26 + 256);
        *(_DWORD *)(v26 + 328) = *(_DWORD *)(v26 + 272);
        *(_OWORD *)(v26 + 400) = *(_OWORD *)(a2 + 280);
        *(_BYTE *)(v26 + 377) = *(_DWORD *)(a2 + 204) == 2;
        *(_BYTE *)(v26 + 376) = 1;
        if (*((_DWORD *)a3 + 14) == 1)
        {
          *(_QWORD *)(v26 + 304) = *((_QWORD *)a3 + 9);
          *(_QWORD *)(v26 + 280) = *((_QWORD *)a3 + 6);
        }
        v39 = *(double *)(a2 + 216);
        *(double *)(v26 + 40) = v39;
        if (v39 >= 0.0)
          *(double *)(v26 + 80) = vabdd_f64(Current, v39) * 1000.0;
        v40 = *(double *)(a2 + 224);
        *(double *)(v26 + 48) = v40;
        if (v40 >= 0.0)
          *(double *)(v26 + 104) = vabdd_f64(Current, v40) * 1000.0;
        *(_QWORD *)(v26 + 88) = 0xBFF0000000000000;
        *(_QWORD *)(v26 + 224) = 0xBFF0000000000000;
        v41 = *(double *)(a2 + 208);
        if (v41 >= 0.0)
          *(double *)(v26 + 224) = vabdd_f64(Current, v41) * 1000.0;
        if (!*(_BYTE *)(v26 + 26))
          *(_BYTE *)(v26 + 24) = 1;
        DistanceCoordinates = CLClientGetDistanceCoordinates(*a4, a4[1], *(double *)(a2 + 264), *(double *)(a2 + 272));
        *(double *)(v26 + 384) = DistanceCoordinates;
        v43 = Current - *(double *)(a2 + 224);
        v44 = DistanceCoordinates / 3600.0;
        *(_BYTE *)(v26 + 378) = v43 <= v44;
        *(double *)(v26 + 392) = v43 - v44;
        v45 = sub_1000350CC((_QWORD *)v26);
        v46 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v47 = v26;
          if (*(char *)(v26 + 23) < 0)
            v47 = *(_QWORD *)v26;
          v48 = *(_QWORD *)(v26 + 40);
          v49 = *(unsigned __int8 *)(v26 + 136);
          v50 = *(unsigned __int8 *)(v26 + 24);
          v52 = *(_QWORD *)(v26 + 104);
          v51 = *(_QWORD *)(v26 + 112);
          v53 = *(_QWORD *)(v26 + 80);
          v54 = *(_QWORD *)(v26 + 88);
          v55 = *(_QWORD *)(v26 + 384);
          v56 = *(_QWORD *)(v26 + 392);
          v58 = *(_QWORD *)(v26 + 400);
          v57 = *(_QWORD *)(v26 + 408);
          v59 = *(unsigned __int8 *)(v26 + 377);
          *(_QWORD *)v79 = 68292611;
          v80 = 2082;
          v81 = "";
          v82 = 2081;
          *(_QWORD *)v83 = v47;
          *(_WORD *)&v83[8] = 2049;
          *(_QWORD *)&v83[10] = v45;
          v84 = 2050;
          v85 = v48;
          v86 = 2050;
          v87 = v51;
          v88 = 1025;
          v89 = v49;
          v90 = 1026;
          v91 = v50;
          v92 = 2050;
          v93 = v52;
          v94 = 2050;
          v95 = v53;
          v96 = 2050;
          v97 = v54;
          v98 = 2049;
          v99 = v55;
          v100 = 2049;
          v101 = v56;
          v102 = 2049;
          v103 = v57;
          v104 = 2049;
          v105 = v58;
          v106 = 1025;
          v107 = v59;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,igneous received\", \"id\":%{private, location:escape_only}s, \"alertTextID\":%{private}lu, \"alertOriginationTime\":\"%{public}0.1f\", \"saReceivedTime\":\"%{public}0.1f\", \"insidePolygon\":%{private}d, \"saReceivedBeforeWEA\":%{public}d, \"latencyToEqOriginMilliSec\":\"%{public}0.2f\", \"salatencyOriginatorMilliSec\":\"%{public}0.2f\", \"salatencyServerMilliSec\":\"%{public}0.2f\", \"distanceToEpicenter\":\"%{private}0.2f\", \"latencyRelativeToSWave\":\"%{private}0.2f\", \"MMI\":\"%{private}0.2f\", \"magnitude\":\"%{private}0.2f\", \"isTestAlert\":%{private}hhd}", v79, 0x92u);
        }
        sub_100035270(v26);
      }
      sub_100035DDC(a1, (uint64_t *)v26, 0);
    }
  }
  else
  {
    v35 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)v79 = 68289026;
      v80 = 2082;
      v81 = "";
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onIgneousAlertReceived,alert metric object could not be created\"}", v79, 0x12u);
    }
  }
  *(_QWORD *)v79 = &v71;
  sub_100004EC0((void ***)v79);
  *(_QWORD *)v79 = &v70[8];
  sub_100004EC0((void ***)v79);
  if ((v70[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[1]);
  if (SHIBYTE(v67[0]) < 0)
    operator delete(v66[0]);
  if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
  sub_100004EC0((void ***)buf);
}

void sub_1000393A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  sub_100032A34((uint64_t)&a15);
  a15 = (void **)&a12;
  sub_100004EC0(&a15);
  _Unwind_Resume(a1);
}

void sub_100039410(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
    sub_100053414(v3 + 112, v4);

}

void sub_100039454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100039468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  char v22;
  double Current;
  double v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  char *v30;
  char *v31;
  _QWORD v32[2];
  char v33;
  char *v34;
  char *v35;
  void *__p[2];
  uint64_t v37;
  uint8_t buf[8];
  _BYTE v39[20];
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  int v43;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v6 = *(_QWORD *)(a1 + 136);
    if (v6)
    {
      sub_100053260(v6 + 112, (char *)a2);
      v3 = *(_BYTE *)(a2 + 23);
    }
    if (v3 < 0)
    {
      sub_100004870(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v37 = *(_QWORD *)(a2 + 16);
    }
    v30 = 0;
    v31 = 0;
    v32[0] = 0;
    v32[1] = &v30;
    v33 = 0;
    v8 = (char *)operator new(0x18uLL);
    v9 = v8;
    v30 = v8;
    v31 = v8;
    v32[0] = v8 + 24;
    v34 = v8;
    v35 = v8;
    *(_QWORD *)buf = v32;
    *(_QWORD *)v39 = &v34;
    *(_QWORD *)&v39[8] = &v35;
    v39[16] = 0;
    if (SHIBYTE(v37) < 0)
    {
      sub_100004870(v8, __p[0], (unint64_t)__p[1]);
      v9 = v35;
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)__p;
      *((_QWORD *)v8 + 2) = v37;
    }
    v10 = v9 + 24;
    v35 = v10;
    v39[16] = 1;
    sub_10001DD8C((uint64_t)buf);
    v31 = v10;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    v11 = sub_100036BC4((_QWORD *)a1, &v30);
    v12 = v11;
    if (v11)
    {
      if (*(double *)(v11 + 368) < 0.0)
      {
        v13 = mach_continuous_time();
        v14 = sub_1000842A4(v13);
        v15 = -1.0;
        if (v14 >= 0.0)
        {
          v16 = *(double *)(a1 + 160);
          if (v16 >= 0.0)
            v15 = v14 - v16;
        }
        *(double *)(v12 + 368) = v15;
      }
      if (!*(_BYTE *)(v12 + 26))
      {
        v22 = *(_BYTE *)(a1 + 51);
        Current = CFAbsoluteTimeGetCurrent();
        v24 = Current;
        if (Current < 0.0)
        {
          v27 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68289794;
            *(_WORD *)v39 = 2082;
            *(_DWORD *)&buf[4] = 0;
            *(_QWORD *)&v39[2] = "";
            *(_WORD *)&v39[10] = 2050;
            *(double *)&v39[12] = v24;
            v40 = 2050;
            v41 = 0xBFF0000000000000;
            v42 = 1026;
            v43 = -1;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,weaReception,invalid time\", \"crntTime\":\"%{public}0.1f\", \"timeUnc\":\"%{public}0.1f\", \"reliability\":%{public}d}", buf, 0x2Cu);
          }
        }
        else
        {
          *(_BYTE *)(v12 + 360) = v22;
          *(_BYTE *)(v12 + 26) = 1;
          *(_QWORD *)(v12 + 32) = 0xBFF0000000000000;
          *(double *)(v12 + 56) = Current;
          *(_QWORD *)(v12 + 64) = 0xBFF0000000000000;
          *(_DWORD *)(v12 + 72) = -1;
          sub_100004F00((uint64_t *)(v12 + 184));
          v25 = *(_QWORD *)(v12 + 192);
          if (v25 >= *(_QWORD *)(v12 + 200))
          {
            v26 = sub_100004ABC((uint64_t *)(v12 + 184), (__int128 *)a2);
          }
          else
          {
            sub_100004A60((_QWORD *)(v12 + 184), (__int128 *)a2);
            v26 = v25 + 24;
          }
          *(_QWORD *)(v12 + 192) = v26;
          v28 = sub_1000350CC((_QWORD *)v12);
          v29 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v39 = 2082;
            *(_QWORD *)&v39[2] = "";
            *(_WORD *)&v39[10] = 2050;
            *(double *)&v39[12] = v24;
            v40 = 2049;
            v41 = v28;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,wea displayed\", \"weaDisplayedTime\":\"%{public}0.1f\", \"alertTextID\":%{private}ld}", buf, 0x26u);
          }
          sub_100035270(v12);
        }
        sub_100035DDC(a1, (uint64_t *)v12, 0);
        goto LABEL_38;
      }
      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v39 = 2082;
        *(_QWORD *)&v39[2] = "";
        v18 = "{\"msg%{public}.0s\":\"#saanalytics,onWeaDisplayed,alert already received\"}";
        v19 = v17;
        v20 = OS_LOG_TYPE_DEFAULT;
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, 0x12u);
      }
    }
    else
    {
      v21 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v39 = 2082;
        *(_QWORD *)&v39[2] = "";
        v18 = "{\"msg%{public}.0s\":\"#saanalytics,onWeaDisplayed,alert metric object could not be created\"}";
        v19 = v21;
        v20 = OS_LOG_TYPE_ERROR;
        goto LABEL_27;
      }
    }
LABEL_38:
    *(_QWORD *)buf = &v30;
    sub_100004EC0((void ***)buf);
    return;
  }
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v39 = 2082;
    *(_QWORD *)&v39[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onWeaDisplayed,alert does not have any message,ignoring\"}", buf, 0x12u);
  }
}

void sub_1000398F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  sub_10001DD8C((uint64_t)&a24);
  sub_100004EC0(&a13);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100039954(uint64_t a1, void **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double Current;
  double v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;

  v3 = sub_100037460(a1, a2);
  v4 = SALogObjectGeneral;
  if (v3)
  {
    v5 = v3;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onUserTappedOnWEA called\"}", (uint8_t *)&v8, 0x12u);
    }
    *(_BYTE *)(v5 + 27) = 1;
    Current = CFAbsoluteTimeGetCurrent();
    if (Current >= 0.0)
    {
      v7 = *(double *)(v5 + 56);
      if (v7 >= 0.0)
        *(double *)(v5 + 216) = (Current - v7) * 1000.0;
    }
    sub_100035DDC(a1, (uint64_t *)v5, 0);
  }
  else if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    v8 = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onUserTappedOnWEA,alert metric object could not be found\"}", (uint8_t *)&v8, 0x12u);
  }
}

void sub_100039ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  double Current;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  void *v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  v4 = sub_100037460(a1, (void **)a2);
  v5 = SALogObjectGeneral;
  if (v4)
  {
    v6 = v4;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onPullTriggered called\"}", (uint8_t *)&v13, 0x12u);
    }
    *(_BYTE *)(v6 + 344) = 1;
    Current = CFAbsoluteTimeGetCurrent();
    if (Current >= 0.0)
    {
      v8 = *(double *)(v6 + 56);
      if (v8 >= 0.0)
      {
        v9 = Current;
        v10 = (Current - v8) * 1000.0;
        *(double *)(v6 + 352) = v10;
        v11 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v12 = (void *)a2;
          else
            v12 = *(void **)a2;
          v13 = 68290051;
          v14 = 0;
          v15 = 2082;
          v16 = "";
          v17 = 2081;
          v18 = v12;
          v19 = 2049;
          v20 = v9;
          v21 = 2049;
          v22 = v8;
          v23 = 2049;
          v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onPullTriggered\", \"weaTextHash\":%{private, location:escape_only}s, \"currentTime\":\"%{private}0.1f\", \"fTimeUsedForWEAReceptionLatencyComputations\":\"%{private}0.1f\", \"fLatencyOnPullTrigger\":\"%{private}0.1f\"}", (uint8_t *)&v13, 0x3Au);
        }
      }
    }
    sub_100035DDC(a1, (uint64_t *)v6, 0);
  }
  else if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    v13 = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onPullTriggered,alert metric object could not be found\"}", (uint8_t *)&v13, 0x12u);
  }
}

void sub_100039CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v6 = sub_100037460(a1, (void **)a2);
  if (v6)
  {
    v7 = (uint64_t *)v6;
    v8 = *(_QWORD *)(a3 + 48);
    v9 = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(v6 + 304) = v9;
    *(_QWORD *)(v6 + 280) = v8;
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v11 = (void *)a2;
      else
        v11 = *(void **)a2;
      v13 = 68289795;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v11;
      v19 = 2050;
      v20 = v9;
      v21 = 2050;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onPullFailed\", \"weaTextHash\":%{private, location:escape_only}s, \"responseCode\":%{public}ld, \"latency\":\"%{public}0.1f\"}", (uint8_t *)&v13, 0x30u);
    }
    sub_100035DDC(a1, v7, 0);
  }
  else
  {
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,onPullFailed,alert metric object could not be found\"}", (uint8_t *)&v13, 0x12u);
    }
  }
}

void sub_100039E9C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  __int16 v6;
  const char *v7;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 68289026;
    v5 = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,timer invoked\"}", (uint8_t *)&v4, 0x12u);
  }
  if (*(_QWORD *)(v1 + 80) == *(_QWORD *)(v1 + 72))
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      v4 = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#saanalytics,forceSubmitFirstAlert, alert metric vector does not have enough elements\"}", (uint8_t *)&v4, 0x12u);
    }
  }
  else
  {
    sub_100035DDC(v1);
  }
}

id sub_100039FD0(uint64_t a1)
{
  uint64_t v2;
  void ***v3;
  NSNumber *v4;
  void **v5;
  int v6;
  void *v7;
  NSObject *v8;
  void *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  void **v13;
  void **v14;
  const char *v15;
  char *v16;
  void **v17;
  void **v18;
  NSObject *v19;
  uint32_t v20;
  void **v21;
  _QWORD *v22;
  NSNumber *v23;
  NSNumber *v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  NSNumber *v28;
  uint64_t v29;
  NSNumber *v30;
  uint64_t v31;
  NSNumber *v32;
  uint64_t v33;
  NSNumber *v34;
  uint64_t v35;
  NSNumber *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v51;
  id v52;
  SASettings *v53;
  SASettings *v54;
  SASettings *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  SASettings *v103;
  void *v104;
  SASettings *v105;
  void *v106;
  void *__p[2];
  void *v108;
  char v109;
  _QWORD v110[61];
  _QWORD v111[61];
  _BYTE buf[28];
  __int16 v113;
  void **v114;

  v2 = *(_QWORD *)(a1 + 32);
  v110[0] = CFSTR("alertID");
  v3 = (void ***)(a1 + 40);
  v4 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", sub_1000354B8((uint64_t)&v109, *(_QWORD *)(a1 + 40)));
  v106 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v111[0] = v106;
  v110[1] = CFSTR("alertIDString");
  v5 = *v3;
  v6 = *((char *)*v3 + 23);
  if (v6 < 0)
    v7 = v5[1];
  else
    v7 = (void *)*((unsigned __int8 *)*v3 + 23);
  if (v7)
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v5;
      if (v6 < 0)
        v9 = *v5;
      *(_QWORD *)buf = 68289283;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,getAlertID\", \"fAlertUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
      LOBYTE(v6) = *((_BYTE *)v5 + 23);
    }
    if ((v6 & 0x80) != 0)
    {
      sub_100004870(__p, *v5, (unint64_t)v5[1]);
    }
    else
    {
      v10 = *(_OWORD *)v5;
      v108 = v5[2];
      *(_OWORD *)__p = v10;
    }
    goto LABEL_32;
  }
  sub_10000E8A0(__p, "");
  v11 = (char *)v5[20];
  if (v5[21] == v11)
  {
    v16 = (char *)v5[23];
    if (v5[24] == v16)
    {
      v51 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v15 = "{\"msg%{public}.0s\":\"#saanalytics,#warning,getAlertID,wea and sa text vector empty\"}";
      v19 = v51;
      v20 = 18;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v15, buf, v20);
      goto LABEL_32;
    }
    SACommonUtils::getHashForString(v16, (uint64_t *)buf);
    if (SHIBYTE(v108) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v108 = *(void **)&buf[16];
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (void **)__p[0];
      if (SHIBYTE(v108) >= 0)
        v17 = __p;
      v18 = (void **)v5[23];
      if (*((char *)v18 + 23) < 0)
        v18 = (void **)*v18;
      *(_QWORD *)buf = 68289539;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v17;
      v113 = 2081;
      v114 = v18;
      v15 = "{\"msg%{public}.0s\":\"#saanalytics,getAlertID,created using wea\", \"hash\":%{private, location:escape_only"
            "}s, \"alertText\":%{private, location:escape_only}s}";
      goto LABEL_30;
    }
  }
  else
  {
    SACommonUtils::getHashForString(v11, (uint64_t *)buf);
    if (SHIBYTE(v108) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v108 = *(void **)&buf[16];
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (void **)__p[0];
      if (SHIBYTE(v108) >= 0)
        v13 = __p;
      v14 = (void **)v5[20];
      if (*((char *)v14 + 23) < 0)
        v14 = (void **)*v14;
      *(_QWORD *)buf = 68289539;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v13;
      v113 = 2081;
      v114 = v14;
      v15 = "{\"msg%{public}.0s\":\"#saanalytics,getAlertID,created using SA text\", \"hash\":%{private, location:escape_"
            "only}s, \"alertText\":%{private, location:escape_only}s}";
LABEL_30:
      v19 = v12;
      v20 = 38;
      goto LABEL_31;
    }
  }
LABEL_32:
  if (SHIBYTE(v108) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
  v111[1] = v98;
  v110[2] = CFSTR("alertReceivedViaPush");
  v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 40) + 288) == 2));
  v111[2] = v97;
  v110[3] = CFSTR("country");
  v22 = (_QWORD *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    v22 = (_QWORD *)*v22;
  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
  v111[3] = v96;
  v110[4] = CFSTR("deviceTimeUncertaintyBucketed");
  v23 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", SATime::getTimeUncertaintyBucket((SATime *)(*(_QWORD *)(a1 + 40) + 112)));
  v95 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v111[4] = v95;
  v110[5] = CFSTR("deviceTimeUncertaintyBucketForWEALatency");
  v24 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", SATime::getTimeUncertaintyBucket((SATime *)(*(_QWORD *)(a1 + 40) + 56)));
  v94 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v111[5] = v94;
  v110[6] = CFSTR("isDeviceTimeReliable");
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 40) + 128) != 0));
  v111[6] = v93;
  v110[7] = CFSTR("isDeviceTimeReliableForWEALatency");
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 40) + 72) != 0));
  v111[7] = v92;
  v110[8] = CFSTR("isLocationAuthorized");
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 43)));
  v111[8] = v91;
  v110[9] = CFSTR("isSafetyAlertReceivedFirst");
  v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 24)));
  v111[9] = v90;
  v110[10] = CFSTR("isSAReceived");
  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 25)));
  v111[10] = v89;
  v110[11] = CFSTR("isUserInsideAlertPolygon");
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 136)));
  v111[11] = v88;
  v110[12] = CFSTR("isWEAReceived");
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 26)));
  v111[12] = v87;
  v110[13] = CFSTR("userTappedOnWEA");
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 27)));
  v111[13] = v86;
  v110[14] = CFSTR("isWiFiReachable");
  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 41)));
  v111[14] = v85;
  v110[15] = CFSTR("latencyBetweenWEAandSA");
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", fabs(*(double *)(*(_QWORD *)(a1 + 40) + 96))));
  v111[15] = v84;
  v110[16] = CFSTR("latencyBetweenWEAandSARealValue");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 96)));
  v111[16] = v83;
  v110[17] = CFSTR("numberOfChanelsSubscribed");
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 32)));
  v111[17] = v82;
  v110[18] = CFSTR("saLatencyRelativeToOriginatorTime");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 80)));
  v111[18] = v81;
  v110[19] = CFSTR("saLatencyRelativeToServerTime");
  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 88)));
  v111[19] = v80;
  v110[20] = CFSTR("userDistanceFromAlertPolygon");
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 144)));
  v111[20] = v79;
  v110[21] = CFSTR("weaLatencyRelativeToOriginatorTIme");
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 32)));
  v111[21] = v78;
  v110[22] = CFSTR("isChannelMapAvailable");
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 46)));
  v111[22] = v77;
  v110[23] = CFSTR("isCompanionNearby");
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 47)));
  v111[23] = v76;
  v110[24] = CFSTR("isCountryKnown");
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 48)));
  v111[24] = v75;
  v110[25] = CFSTR("isLocationAvailable");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 45)));
  v111[25] = v74;
  v110[26] = CFSTR("isSupportedByTelephony");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 44)));
  v111[26] = v73;
  v110[27] = CFSTR("latencyBetweenWeaAndUserTap");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 216)));
  v111[27] = v72;
  v110[28] = CFSTR("saLatencyRelativeToServerIngressTime");
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 224)));
  v111[28] = v71;
  v110[29] = CFSTR("latencyBetweenWEAandSAConsumedValue");
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 336)));
  v111[29] = v70;
  v110[30] = CFSTR("isPullTriggered");
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 344)));
  v111[30] = v69;
  v110[31] = CFSTR("latencyForPullRequest");
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 352)));
  v111[31] = v68;
  v110[32] = CFSTR("latencyForPullResponse");
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 280)));
  v111[32] = v67;
  v110[33] = CFSTR("pullResponseCodeStr");
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304)));
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "stringValue"));
  v111[33] = v65;
  v110[34] = CFSTR("isSupportedByCountry");
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 49)));
  v111[34] = v64;
  v110[35] = CFSTR("isFirstUnlocked");
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 50)));
  v111[35] = v63;
  v110[36] = CFSTR("isUnlockedOnWea");
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 360)));
  v111[36] = v62;
  v110[37] = CFSTR("isUnlockedOnSa");
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 361)));
  v111[37] = v61;
  v110[38] = CFSTR("maContentVersionStr");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 56)));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "stringValue"));
  v111[38] = v59;
  v110[39] = CFSTR("maCompatibilityVersionStr");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 52)));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "stringValue"));
  v111[39] = v57;
  v110[40] = CFSTR("secondsSinceDaemonStart");
  v25 = *(double *)(*(_QWORD *)(a1 + 40) + 368);
  if (v25 < 0.0)
    v25 = *(double *)(a1 + 48);
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25));
  v111[40] = v56;
  v110[41] = CFSTR("isChannelSubscribed");
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(v2 + 32) > 0));
  v111[41] = v99;
  v110[42] = CFSTR("isIgneousChannelSubscribed");
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(v2 + 36) > 0));
  v111[42] = v100;
  v110[43] = CFSTR("pushNwConfig");
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(v2 + 64)));
  v111[43] = v101;
  v110[44] = CFSTR("isCellularDataReachable");
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 42)));
  v111[44] = v102;
  v110[45] = CFSTR("percentageOfTimeRrcConnected");
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 60)));
  v111[45] = v104;
  v110[46] = CFSTR("pushInterface");
  v26 = (_QWORD *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v26 = (_QWORD *)*v26;
  v105 = (SASettings *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26));
  v111[46] = v105;
  v110[47] = CFSTR("isEmergencyAlertEnabled");
  v27 = SASettings::instance(v105);
  v28 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27));
  v103 = (SASettings *)objc_claimAutoreleasedReturnValue(v28);
  v111[47] = v103;
  v110[48] = CFSTR("isAmberAlertEnabled");
  v29 = SASettings::instance(v103);
  v30 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29));
  v55 = (SASettings *)objc_claimAutoreleasedReturnValue(v30);
  v111[48] = v55;
  v110[49] = CFSTR("isPublicSafetyAlertEnabled");
  v31 = SASettings::instance(v55);
  v32 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 64))(v31));
  v54 = (SASettings *)objc_claimAutoreleasedReturnValue(v32);
  v111[49] = v54;
  v110[50] = CFSTR("isIphoneAnalyticsEnabled");
  v33 = SASettings::instance(v54);
  v34 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33));
  v53 = (SASettings *)objc_claimAutoreleasedReturnValue(v34);
  v111[50] = v53;
  v110[51] = CFSTR("isSignificantLocationEnabled");
  v35 = SASettings::instance(v53);
  v36 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35));
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  v111[51] = v37;
  v110[52] = CFSTR("metricType");
  v38 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v38 = (_QWORD *)*v38;
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38));
  v111[52] = v39;
  v110[53] = CFSTR("distanceToEpicenter");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 384)));
  v111[53] = v40;
  v110[54] = CFSTR("latencyRelativeToSWave");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 392)));
  v111[54] = v41;
  v110[55] = CFSTR("latencyRelativeToEqOriginTime");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 104)));
  v111[55] = v42;
  v110[56] = CFSTR("magnitude");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 400)));
  v111[56] = v43;
  v110[57] = CFSTR("MMI");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 408)));
  v111[57] = v44;
  v110[58] = CFSTR("isTestAlert");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 377)));
  v111[58] = v45;
  v110[59] = CFSTR("wasAlertReceivedBeforeExpectedSWave");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 378)));
  v111[59] = v46;
  v110[60] = CFSTR("weaHandling");
  v47 = *(_QWORD *)(a1 + 40);
  v48 = (_QWORD *)(v47 + 416);
  if (*(char *)(v47 + 439) < 0)
    v48 = (_QWORD *)*v48;
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v48));
  v111[60] = v49;
  v52 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v111, v110, 61));

  if (SHIBYTE(v108) < 0)
    operator delete(__p[0]);

  return v52;
}

void sub_10003AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_BYTE *sub_10003B35C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 79) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v4;
  }
  result = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
    return sub_100004870(result, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)result = v6;
  return result;
}

void sub_10003B3E0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 79) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_10003B3FC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void sub_10003B440(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 1483715975 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 1026;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,cleanup\", \"alertMetricVectorSize\":%{public}d}", buf, 0x18u);
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_1000273E4(&v14);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(uint64_t **)(a1 + 72);
  v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    sub_100035DDC(a1, v12, 1);
    v12 += 55;
  }
}

void sub_10003B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100028C54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10003B5C4(uint64_t a1)
{
  uint32_t v2;
  _BOOL8 result;
  uint64_t v4;
  _BOOL4 v5;
  const char *v6;
  _BOOL4 v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;

  if (!*((_BYTE *)sub_10003D044() + 179))
  {
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v6 = "{\"msg%{public}.0s\":\"#saanalytics,#pfm,#warning,failed,pullDisabled\"}";
LABEL_10:
    v8 = v4;
    v9 = OS_LOG_TYPE_DEFAULT;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v8, v9, v6, (uint8_t *)&v11, 0x12u);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 49))
  {
    v4 = SALogObjectGeneral;
    v7 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v7)
      return result;
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v6 = "{\"msg%{public}.0s\":\"#saanalytics,#pfm,failed,pullNotSupported\"}";
    goto LABEL_10;
  }
  v2 = *((_DWORD *)sub_10003D044() + 45);
  if (v2 < 0x65)
    return arc4random_uniform(0x64u) <= v2;
  v2 = *((_DWORD *)sub_1000687EC() + 1);
  if (v2 < 0x65)
    return arc4random_uniform(0x64u) <= v2;
  v10 = SALogObjectGeneral;
  result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v6 = "{\"msg%{public}.0s\":\"#saanalytics,#pfm,failed,invalidPullPc\"}";
    v8 = v10;
    v9 = OS_LOG_TYPE_DEBUG;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_10003B788(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v6 = SALogObjectGeneral;
  v7 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v7)
  {
    v16 = 68289539;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 1025;
    v21 = a2;
    v22 = 1025;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onMaVersionChange\", \"compVersion\":%{private}d, \"contentVersion\":%{private}d}", (uint8_t *)&v16, 0x1Eu);
  }
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  v8 = *(_QWORD *)(a1 + 136);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
      *(_DWORD *)(v9 + 444) = a2;
      *(_DWORD *)(v9 + 448) = a3;
    }
    v7 = *(_QWORD *)(v8 + 48);
    if (v7)
      sub_10005F548(v7, a2, a3);
  }
  result = sub_10007FD14((SAPlatformInfo *)v7);
  v13 = *(_QWORD *)(a1 + 152);
  v12 = (uint64_t *)(a1 + 152);
  v11 = v13;
  if ((_DWORD)result)
  {
    if (!v11)
    {
      v14 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 68289026;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onMaVersionChange,fOnBleReceivedMetrics init\"}", (uint8_t *)&v16, 0x12u);
      }
      operator new();
    }
  }
  else if (v11)
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onMaVersionChange,fOnBleReceivedMetrics reset\"}", (uint8_t *)&v16, 0x12u);
    }
    return sub_10003B99C(v12, 0);
  }
  return result;
}

uint64_t sub_10003B99C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100042710(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_10003B9D4(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saanalytics,onEnhancedDeliveryEnabled\", \"isEnhancedDeliveryEnabled\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  *(_BYTE *)(a1 + 40) = a2;
  result = *(_QWORD **)(a1 + 136);
  if (result)
    return sub_10005AD84(result, a2);
  return result;
}

uint64_t sub_10003BAB4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000599A4(result);
    operator delete();
  }
  return result;
}

void sub_10003BAF0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;

  v3 = a2;
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2113;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onAssetReceived\", \"rmSupported\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  sub_100035874(a1);

}

void sub_10003BBCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003BBE4(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1025;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onIgneousChannelUpdate\", \"numOfChannels\":%{private}d}", (uint8_t *)v6, 0x18u);
  }
  *(_DWORD *)(a1 + 36) = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5)
    sub_10005AE7C(v5, a2 > 0);
}

void sub_10003BCCC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 440;
        sub_10003BD3C(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10003BD3C(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  v3 = (void **)(a1 + 184);
  sub_100004EC0(&v3);
  v3 = (void **)(a1 + 160);
  sub_100004EC0(&v3);
  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_10003BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  if (a1 == a2)
    return 0;
  v5 = a1;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  while (1)
  {
    v8 = *(unsigned __int8 *)(v5 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = *(_QWORD *)(v5 + 8);
    if (v9 != v7)
      goto LABEL_19;
    v10 = v6 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
    if ((v8 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v5 + 23))
      return 1;
    v11 = 0;
    while (*(unsigned __int8 *)(v5 + v11) == v10[v11])
    {
      if (v8 == ++v11)
        return 1;
    }
LABEL_19:
    v5 += 24;
    if (v5 == a2)
      return 0;
  }
  if (memcmp(*(const void **)v5, v10, *(_QWORD *)(v5 + 8)))
    goto LABEL_19;
  return 1;
}

__n128 sub_10003BE88(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  v4 = *(__int128 *)((char *)a2 + 40);
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  v6 = *(__int128 *)((char *)a2 + 104);
  v7 = *(__int128 *)((char *)a2 + 120);
  v8 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  v9 = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v10 = a2[17];
  v12 = a2[14];
  v11 = a2[15];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v10;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v11;
  v13 = a2[21];
  v15 = a2[18];
  v14 = a2[19];
  *(_OWORD *)(a1 + 320) = a2[20];
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v15;
  *(_OWORD *)(a1 + 304) = v14;
  v16 = a2[25];
  v18 = a2[22];
  v17 = a2[23];
  *(_OWORD *)(a1 + 384) = a2[24];
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 208) = a2[13];
  result = (__n128)a2[26];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(__n128 *)(a1 + 416) = result;
  *((_QWORD *)a2 + 53) = 0;
  *((_QWORD *)a2 + 54) = 0;
  *((_QWORD *)a2 + 52) = 0;
  return result;
}

unint64_t sub_10003BF7C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_10003C328(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_10003C27C(a2, a3);
  }
  else
  {
    return sub_10003C184(a2, a3);
  }
}

unint64_t sub_10003C184(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_10003C27C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_10003C328(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_10003C3E8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_10003C454(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000223E0(result);
    operator delete();
  }
  return result;
}

void sub_10003C494()
{
  operator delete();
}

_QWORD *sub_10003C4A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2CB8;
  return result;
}

void sub_10003C4CC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2CB8;
}

void sub_10003C4E4()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onSettingsChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_10003C594(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10003C5D0()
{
}

_QWORD *sub_10003C5DC(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_10003C68C(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_100004984();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_10003CA64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10003CA7C(1, v1);
  _Unwind_Resume(a1);
}

void sub_10003CA7C(char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_10003CAD0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  char isKindOfClass;
  NSObject *v9;
  unsigned int v10;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void *v17;

  v4 = a2;
  if (qword_100102D78 != -1)
    dispatch_once(&qword_100102D78, &stru_1000F2D48);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100102D80, "objectForKey:", v4));
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2114;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sapref,\", \"number\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
  }
  v7 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v5, v7);
  if ((isKindOfClass & 1) != 0)
  {
    v9 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(v5, "BOOLValue");
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      LODWORD(v17) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sapref,\", \"val\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }

    *a3 = objc_msgSend(v5, "BOOLValue");
  }

  return isKindOfClass & 1;
}

void sub_10003CC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10003CCC8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.safetyalerts"));
  v2 = (void *)qword_100102D80;
  qword_100102D80 = (uint64_t)v1;

}

uint64_t sub_10003CCFC(uint64_t a1, void *a2, _DWORD *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  if (qword_100102D98 != -1)
    dispatch_once(&qword_100102D98, &stru_1000F2D68);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100102DA0, "objectForKey:", v4));
  v6 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  if ((isKindOfClass & 1) != 0)
    *a3 = objc_msgSend(v5, "intValue");

  return isKindOfClass & 1;
}

void sub_10003CDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003CDBC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.safetyalerts"));
  v2 = (void *)qword_100102DA0;
  qword_100102DA0 = (uint64_t)v1;

}

uint64_t sub_10003CDF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  __int128 v9;
  uint64_t v10;

  v4 = a2;
  if (qword_100102DA8 != -1)
    dispatch_once(&qword_100102DA8, &stru_1000F2D88);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100102DB0, "objectForKey:", v4));
  v6 = objc_opt_class(NSString);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  if ((isKindOfClass & 1) != 0)
  {
    sub_10000E8A0(&v9, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = v10;
  }

  return isKindOfClass & 1;
}

void sub_10003CEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10003CEE8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.safetyalerts"));
  v2 = (void *)qword_100102DB0;
  qword_100102DB0 = (uint64_t)v1;

}

uint64_t sub_10003CF1C(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  uint64_t v8;

  v4 = a2;
  if (qword_100102DB8 != -1)
    dispatch_once(&qword_100102DB8, &stru_1000F2DA8);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100102DC0, "objectForKey:", v4));
  v6 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v5, "doubleValue");
    *a3 = v8;
  }

  return isKindOfClass & 1;
}

void sub_10003CFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003CFDC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.safetyalerts"));
  v2 = (void *)qword_100102DC0;
  qword_100102DC0 = (uint64_t)v1;

}

void sub_10003D010(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.safetyalerts"));
  v2 = (void *)qword_100102DD0;
  qword_100102DD0 = (uint64_t)v1;

}

void *sub_10003D044()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1001029B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001029B8))
  {
    sub_10003D12C((uint64_t)&unk_100102860);
    __cxa_atexit((void (*)(void *))sub_10003D0D4, &unk_100102860, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001029B8);
  }
  return &unk_100102860;
}

void sub_10003D0BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001029B8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D0D4(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));

  return a1;
}

uint64_t sub_10003D12C(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;

  if (qword_100102DC8 != -1)
    dispatch_once(&qword_100102DC8, &stru_1000F2DC8);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100102DD0, "dictionaryRepresentation"));
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = sub_10003D82C(v2, CFSTR("CORE_LOCATION_TEST"), 0);
  *(double *)(a1 + 16) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("LOCATION_RECHECK_FREQUENCY_SECONDS"), (id)0xE10);
  *(_BYTE *)(a1 + 24) = sub_10003D82C(*(void **)a1, CFSTR("CORE_TELEPHONY_TEST"), 0);
  *(_BYTE *)(a1 + 25) = sub_10003D82C(*(void **)a1, CFSTR("CLOUD_CHANNEL_TEST"), 0);
  *(_BYTE *)(a1 + 26) = sub_10003D82C(*(void **)a1, CFSTR("CLOUD_CHANNEL_USING_SANDBOX"), 0);
  *(_BYTE *)(a1 + 27) = sub_10003D82C(*(void **)a1, CFSTR("IS_TIMER_SIMULATED"), 0);
  *(_BYTE *)(a1 + 28) = sub_10003D82C(*(void **)a1, CFSTR("IS_ANALYTICS_ENABLED"), (id)1);
  *(double *)(a1 + 32) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("LOCAL_CHANNEL_TTL"), 0);
  *(double *)(a1 + 40) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("CA_METRIC_SUBMISSION_WAIT_TIME_SEC"), (id)0x4B0);
  *(_BYTE *)(a1 + 48) = sub_10003D82C(*(void **)a1, CFSTR("IS_ENABLED"), (id)1);
  *(_BYTE *)(a1 + 49) = sub_10003D82C(*(void **)a1, CFSTR("IS_SPI_TEST"), 0);
  *(_BYTE *)(a1 + 50) = sub_10003D82C(*(void **)a1, CFSTR("IS_NW_REACHABILITY_TEST"), 0);
  *(double *)(a1 + 56) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("NETWORK_CHANGE_HYSTERESIS_MS"), (id)0x7D0);
  v3 = (char *)sub_10003D984(*(void **)a1, CFSTR("DEFAULT_CHANNEL"), "SkFOMTdfYkRIbi1yT2NDTA==");
  sub_10000E8A0((_QWORD *)(a1 + 64), v3);
  *(_BYTE *)(a1 + 88) = sub_10003D82C(*(void **)a1, CFSTR("IS_MOBILE_ASSET_SUPPORTED"), (id)1);
  *(double *)(a1 + 96) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("ASSET_DOWNLOAD_INTERVAL"), (id)0x93A80);
  *(_BYTE *)(a1 + 104) = sub_10003D82C(*(void **)a1, CFSTR("IS_MOBILE_ASSET_TEST"), 0);
  v4 = (char *)sub_10003D984(*(void **)a1, CFSTR("MOBILE_ASSET_STARTUP_TEST_FILE"), "");
  sub_10000E8A0((_QWORD *)(a1 + 112), v4);
  *(_BYTE *)(a1 + 136) = sub_10003D82C(*(void **)a1, CFSTR("IS_MAGNET_MODE_MONITOR_TEST_ENVIRONMENT"), 0);
  *(double *)(a1 + 144) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("ENTER_MAGNET_MODE_HYSTERESIS_MS"), (id)0x1D4C0);
  *(double *)(a1 + 152) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("EXIT_MAGNET_MODE_HYSTERESIS_MS"), (id)0xEA60);
  *(double *)(a1 + 160) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("INIT_PENDING_TASK_CLEANUP_TIMER"), (id)0x78);
  *(double *)(a1 + 168) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("ALERT_DELAY_TOLERANCE_SECONDS"), (id)0x15180);
  *(_BYTE *)(a1 + 176) = sub_10003D82C(*(void **)a1, CFSTR("IS_ADDL_DETAILS_HI_ENABLED"), (id)1);
  *(_BYTE *)(a1 + 177) = sub_10003D82C(*(void **)a1, CFSTR("PULL_SERVICE_TEST"), 0);
  *(_BYTE *)(a1 + 178) = sub_10003D82C(*(void **)a1, CFSTR("IS_PULL_ON_DEMAND"), (id)1);
  *(_BYTE *)(a1 + 179) = sub_10003D82C(*(void **)a1, CFSTR("IS_PULL_METRICS_ON_WEA_ENABLED"), 0);
  *(_DWORD *)(a1 + 180) = sub_10003D8D8(*(void **)a1, CFSTR("PULL_METRICS_CONFIG_PERCENTAGE_OVERRIDE"), (id)0xFFFFFFFFLL);
  *(_BYTE *)(a1 + 184) = sub_10003D82C(*(void **)a1, CFSTR("IS_IGNORE_OLD_ALERTS"), (id)1);
  v5 = (char *)sub_10003D984(*(void **)a1, CFSTR("PULL_SERVER"), "");
  sub_10000E8A0((_QWORD *)(a1 + 192), v5);
  *(_BYTE *)(a1 + 216) = sub_10003D82C(*(void **)a1, CFSTR("BATTERY_SERVICE_TEST"), 0);
  *(_BYTE *)(a1 + 217) = sub_10003D82C(*(void **)a1, CFSTR("WOW_ASSERTION_TEST"), 0);
  *(_BYTE *)(a1 + 218) = sub_10003D82C(*(void **)a1, CFSTR("WOW_ASSERTION_ENABLED"), (id)1);
  *(double *)(a1 + 224) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("WOW_ASSERTION_RECHECK_INTERVAL"), (id)0x1C20);
  *(_BYTE *)(a1 + 232) = sub_10003D82C(*(void **)a1, CFSTR("LOCK_MONITOR_TEST"), 0);
  *(_DWORD *)(a1 + 236) = sub_10003D8D8(*(void **)a1, CFSTR("PUSH_METRICS_CONFIG_PERCENTAGE_OVERRIDE"), (id)0xFFFFFFFFLL);
  *(_BYTE *)(a1 + 240) = sub_10003D82C(*(void **)a1, CFSTR("CORE_ROUTINE_TEST"), 0);
  *(_BYTE *)(a1 + 241) = sub_10003D82C(*(void **)a1, CFSTR("BIOME_TEST"), 0);
  *(_BYTE *)(a1 + 242) = sub_10003D82C(*(void **)a1, CFSTR("CORE_MOTION_TEST"), 0);
  *(_BYTE *)(a1 + 243) = sub_10003D82C(*(void **)a1, CFSTR("CORE_WIFI_TEST"), 0);
  *(_BYTE *)(a1 + 244) = sub_10003D82C(*(void **)a1, CFSTR("CFNOTIFICATION_TEST"), 0);
  *(_BYTE *)(a1 + 245) = sub_10003D82C(*(void **)a1, CFSTR("BLE_TRANSPORT_TEST"), 0);
  *(_DWORD *)(a1 + 248) = sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_SUPPORTED"), (id)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 252) = sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_PERIOD_SECONDS"), (id)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 256) = sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_FIXED_DELAY_SECONDS"), (id)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 260) = sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_RANDOM_DELAY_SECONDS"), (id)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 264) = sub_10003D82C(*(void **)a1, CFSTR("ROLLING_METRICS_NON_XPC_TRIGGER"), 0);
  *(double *)(a1 + 272) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_ALERT_HISTORY_DURATION_SECONDS"), (id)0x15180);
  *(double *)(a1 + 280) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("ROLLING_METRICS_STATE_HISTORY_DURATION_SECONDS"), (id)0x54600);
  *(double *)(a1 + 288) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("MANIFEST_DOWNLOAD_TIMEOUT_SECONDS"), (id)0x12C);
  *(_BYTE *)(a1 + 296) = sub_10003D82C(*(void **)a1, CFSTR("IS_SETTINGS_TEST"), 0);
  *(_BYTE *)(a1 + 297) = sub_10003D82C(*(void **)a1, CFSTR("IS_SA_LIVABILTY_ENABLED"), 0);
  *(_DWORD *)(a1 + 300) = sub_10003D8D8(*(void **)a1, CFSTR("EFFICACY_METRIC_PARTICIPATION_PERCENTAGE"), (id)0xFFFFFFFFLL);
  *(_BYTE *)(a1 + 304) = sub_10003D82C(*(void **)a1, CFSTR("IGNEOUS_TEST_ENABLED"), 0);
  *(_DWORD *)(a1 + 308) = sub_10003D8D8(*(void **)a1, CFSTR("IGNEOUS_ADOPTION_METRICS_SUBMISSION_PERIOD"), (id)0x15180);
  *(_DWORD *)(a1 + 312) = sub_10003D8D8(*(void **)a1, CFSTR("BLE_RELAY_SELECTION_METRICS_XPC_PERIOD"), (id)0xE10);
  *(_DWORD *)(a1 + 316) = sub_10003D8D8(*(void **)a1, CFSTR("BLE_RELAY_SELECTION_METRICS_DAY_PERCENTAGE"), (id)0x1D);
  *(_DWORD *)(a1 + 320) = sub_10003D8D8(*(void **)a1, CFSTR("BLE_RELAY_SELECTION_METRICS_NIGHT_PERCENTAGE"), (id)0xE);
  *(_BYTE *)(a1 + 324) = sub_10003D82C(*(void **)a1, CFSTR("UN_USER_NOTIFICATION_TEST_ENABLED"), 0);
  *(double *)(a1 + 328) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("CODEBOOK_DOWNLOAD_TIMEOUT_SECONDS"), (id)0x12C);
  *(double *)(a1 + 336) = (double)(int)sub_10003D8D8(*(void **)a1, CFSTR("CODEBOOK_DOWNLOAD_PERIOD_SECONDS"), (id)0xFFFFFFFFLL);
  return a1;
}

void sub_10003D7D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);

  _Unwind_Resume(a1);
}

id sub_10003D82C(void *a1, void *a2, id a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v6));
    if (v7)
    {
      v8 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        a3 = objc_msgSend(v7, "BOOLValue");
    }

  }
  return a3;
}

void sub_10003D8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10003D8D8(void *a1, void *a2, id a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v6));
    if (v7)
    {
      v8 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        a3 = objc_msgSend(v7, "intValue");
    }

  }
  return a3;
}

void sub_10003D964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10003D984(void *a1, void *a2, id a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v6));
    if (v7)
    {
      v8 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        a3 = objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    }

  }
  return a3;
}

void sub_10003DA14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10003DA34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  dispatch_time_t v13;
  NSObject *v14;
  _QWORD block[6];

  v9 = a2;
  *(_QWORD *)a1 = v9;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 46) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    if (v10 == a3)
    {
      *(_QWORD *)(a1 + 176) = a1 + 152;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 152);
      goto LABEL_6;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  *(_QWORD *)(a1 + 176) = v10;
LABEL_6:
  *(_QWORD *)(a1 + 184) = 0;
  sub_100004F4C(a1 + 192, a4);
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 257) = 0;
  sub_100004F4C(a1 + 264, a5);
  v11 = objc_msgSend(objc_alloc((Class)CLRegulatoryConfig), "initWithQueue:defaultConfig:", *(_QWORD *)a1, 0);
  v12 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v11;

  sub_10003DD30(a1, CFSTR("USA"), CFSTR("allowed"));
  sub_10003DD30(a1, CFSTR("JPN"), CFSTR("motionHarvestOnly"));
  *(_WORD *)(a1 + 44) = 257;
  *(_WORD *)(a1 + 50) = 256;
  v13 = dispatch_time(0, 60000000000);
  v14 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003E02C;
  block[3] = &unk_1000F1EB8;
  block[4] = a1;
  dispatch_after(v13, v14, block);

  return a1;
}

void sub_10003DC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100027E48(v6, *(char **)(v1 + 136));
  sub_100027E48(v5, *(char **)(v1 + 112));
  sub_100027E48(v4, *(char **)(v1 + 88));
  sub_100027E48(v3, *(char **)(v1 + 64));

  _Unwind_Resume(a1);
}

void sub_10003DD30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  id v26;
  __int16 v27;
  void *v28;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && v6)
  {
    v8 = objc_alloc_init((Class)NSMutableSet);
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "addObject:", v5);
      v10 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithObjectsAndKeys:", &__kCFBooleanTrue, v7, 0);
      if (v10)
      {
        v11 = *(void **)(a1 + 184);
        v18 = 0;
        v12 = objc_msgSend(v11, "addConfigForIsoList:config:error:", v9, v10, &v18);
        v13 = v18;
        v14 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289794;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          v23 = 1026;
          v24 = v12;
          v25 = 2114;
          v26 = v5;
          v27 = 2114;
          v28 = v7;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,addCountryConfig\", \"success\":%{public}hhd, \"country\":%{public, location:escape_only}@, \"config\":%{public, location:escape_only}@}", buf, 0x2Cu);
        }
      }
      else
      {
        v17 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,addCountryConfig,d null\"}", buf, 0x12u);
        }
        v13 = 0;
      }

    }
    else
    {
      v16 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,addCountryConfig,isoList null\"}", buf, 0x12u);
      }
    }

  }
  else
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,addCountryConfig,invalidArgs\"}", buf, 0x12u);
    }
  }

}

void sub_10003DFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10003E02C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003E094;
  v3[3] = &unk_1000F1EB8;
  v3[4] = v1;
  sub_10003E094((uint64_t)v3);
  objc_autoreleasePoolPop(v2);
}

void sub_10003E094(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  unsigned __int8 *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 224))
  {
    v2 = (id)SALogObjectWarning;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      if (*(_BYTE *)(v1 + 47))
      {
        if (*(_BYTE *)(v1 + 46))
          v3 = "true";
        else
          v3 = "false";
      }
      else
      {
        v3 = "notSet";
      }
      if (*(_BYTE *)(v1 + 41))
      {
        if (*(_BYTE *)(v1 + 40))
          v4 = "true";
        else
          v4 = "false";
      }
      else
      {
        v4 = "notSet";
      }
      if (*(_BYTE *)(v1 + 43))
      {
        if (*(_BYTE *)(v1 + 42))
          v5 = "true";
        else
          v5 = "false";
      }
      else
      {
        v5 = "notSet";
      }
      if (*(_BYTE *)(v1 + 9))
      {
        if (*(_BYTE *)(v1 + 8))
          v6 = "true";
        else
          v6 = "false";
      }
      else
      {
        v6 = "notSet";
      }
      v7 = (unsigned __int8 *)sub_10003D044();
      if (*(_BYTE *)(v1 + 45))
      {
        if (*(_BYTE *)(v1 + 44))
          v8 = "true";
        else
          v8 = "false";
      }
      else
      {
        v8 = "notSet";
      }
      if (*(_BYTE *)(v1 + 49))
      {
        if (*(_BYTE *)(v1 + 48))
          v9 = "true";
        else
          v9 = "false";
      }
      else
      {
        v9 = "notSet";
      }
      if (*(_BYTE *)(v1 + 51))
      {
        if (*(_BYTE *)(v1 + 50))
          v10 = "true";
        else
          v10 = "false";
      }
      else
      {
        v10 = "notSet";
      }
      v11 = v7[88];
      if (*(_BYTE *)(v1 + 53))
      {
        if (*(_BYTE *)(v1 + 52))
          v12 = "true";
        else
          v12 = "false";
      }
      else
      {
        v12 = "notSet";
      }
      v13 = *(_QWORD *)(v1 + 72);
      v14[0] = 68291843;
      v14[1] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = 60;
      v19 = 2082;
      v20 = v3;
      v21 = 2082;
      v22 = v4;
      v23 = 2082;
      v24 = v5;
      v25 = 2082;
      v26 = v6;
      v27 = 1026;
      v28 = v11;
      v29 = 2082;
      v30 = v8;
      v31 = 2082;
      v32 = v9;
      v33 = 2082;
      v34 = v10;
      v35 = 2082;
      v36 = v12;
      v37 = 2049;
      v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#chsel,Safety Alerts init timedout\", \"timeout\":%{public}d, \"country\":%{public, location:escape_only}s, \"lsOn\":%{public, location:escape_only}s, \"telephony\":%{public, location:escape_only}s, \"locAvailable\":%{public, location:escape_only}s, \"isMobileAssetEnabled\":%{public}hhd, \"fIsAllowedByNetwork\":%{public, location:escape_only}s, \"channelMapAvailable\":%{public, location:escape_only}s, \"isCompanionNearby\":%{public, location:escape_only}s, \"isParticipating\":%{public, location:escape_only}s, \"channelListSize\":%{private}lu}", (uint8_t *)v14, 0x78u);
    }

  }
}

void sub_10003E2F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10003E308(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v10;

  v2 = (_QWORD *)(a1 + 264);
  v3 = *(_QWORD **)(a1 + 288);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v10 = (void **)(a1 + 232);
  sub_100041654(&v10);
  v5 = *(_QWORD **)(a1 + 216);
  if (v5 == (_QWORD *)(a1 + 192))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 192);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:

  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  sub_100027E48(a1 + 128, *(char **)(a1 + 136));
  sub_100027E48(a1 + 104, *(char **)(a1 + 112));
  sub_100027E48(a1 + 80, *(char **)(a1 + 88));
  sub_100027E48(a1 + 56, *(char **)(a1 + 64));

  return a1;
}

void sub_10003E410(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onParticipationChange\", \"isParticipating\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 52) = a2 | 0x100;
  sub_10003E4F0(a1, 0);
}

void sub_10003E4F0(uint64_t a1, int a2)
{
  NSObject *v3;
  _BOOL8 v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  SAPlatformInfo *v15;
  int v16;
  unsigned int v17;
  SAPlatformInfo *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  unsigned __int8 v22;
  int v23;
  NSObject *v24;
  CLLocationDegrees v25;
  CLLocationDegrees v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  NSArray *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  uint64_t **v37;
  _BOOL4 v38;
  _BOOL4 v39;
  SAPlatformInfo *v40;
  int v41;
  SAPlatformInfo *v42;
  int v43;
  int v44;
  unsigned int v45;
  SACommonUtils *v46;
  int isLivabiltyEnabled;
  int v48;
  int v49;
  void *v50;
  void *v51;
  NSObject *v52;
  int v53;
  NSObject *v54;
  uint64_t **v55;
  NSObject *v56;
  int v57;
  _BOOL4 v58;
  _BOOL4 v59;
  SACommonUtils *v60;
  int v61;
  NSObject *v62;
  char *v63;
  NSObject *v64;
  std::string::size_type size;
  int v66;
  NSObject *v67;
  std::string *p_str;
  int v69;
  uint64_t v70;
  _BOOL4 v71;
  _BOOL4 v72;
  NSObject *v73;
  char *v74;
  _BYTE *v75;
  int v76;
  _BOOL4 v77;
  NSObject *v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  _BYTE *v82;
  int v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  const char *v90;
  uint64_t *v91;
  char **v92;
  char *v93[2];
  char **v94;
  char *v95;
  uint64_t v96;
  char **v97;
  char *v98;
  uint64_t v99;
  std::string __str;
  _BYTE buf[30];
  const char *v102;
  _BYTE v103[10];
  __int16 v104;
  const char *v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  int v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  unsigned int v119;
  __int16 v120;
  int v121;
  _BYTE __dst[28];

  v3 = (id)SALogObjectGeneral;
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 47))
    {
      if (*(_BYTE *)(a1 + 46))
        v5 = "true";
      else
        v5 = "false";
    }
    else
    {
      v5 = "notSet";
    }
    v90 = v5;
    if (*(_BYTE *)(a1 + 41))
    {
      if (*(_BYTE *)(a1 + 40))
        v6 = "true";
      else
        v6 = "false";
    }
    else
    {
      v6 = "notSet";
    }
    v88 = v6;
    if (*(_BYTE *)(a1 + 43))
    {
      if (*(_BYTE *)(a1 + 42))
        v7 = "true";
      else
        v7 = "false";
    }
    else
    {
      v7 = "notSet";
    }
    v87 = v7;
    if (*(_BYTE *)(a1 + 9))
    {
      if (*(_BYTE *)(a1 + 8))
        v8 = "true";
      else
        v8 = "false";
    }
    else
    {
      v8 = "notSet";
    }
    if (*(_BYTE *)(a1 + 45))
    {
      if (*(_BYTE *)(a1 + 44))
        v9 = "true";
      else
        v9 = "false";
    }
    else
    {
      v9 = "notSet";
    }
    if (*(_BYTE *)(a1 + 49))
    {
      if (*(_BYTE *)(a1 + 48))
        v10 = "true";
      else
        v10 = "false";
    }
    else
    {
      v10 = "notSet";
    }
    if (*(_BYTE *)(a1 + 51))
    {
      if (*(_BYTE *)(a1 + 50))
        v11 = "true";
      else
        v11 = "false";
    }
    else
    {
      v11 = "notSet";
    }
    v13 = *(_QWORD *)(a1 + 232);
    v12 = *(_QWORD *)(a1 + 240);
    if (*(_BYTE *)(a1 + 53))
    {
      if (*(_BYTE *)(a1 + 52))
        v14 = "true";
      else
        v14 = "false";
    }
    else
    {
      v14 = "notSet";
    }
    v15 = (SAPlatformInfo *)objc_msgSend(*(id *)SAPlatformInfo::instance((SAPlatformInfo *)v4), "isEqualToString:", CFSTR("iPhone"));
    v16 = (int)v15;
    v17 = objc_msgSend(*(id *)SAPlatformInfo::instance(v15), "isEqualToString:", CFSTR("Watch"));
    *(_DWORD *)buf = 68292099;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v90;
    *(_WORD *)&buf[28] = 2082;
    v102 = v88;
    *(_WORD *)v103 = 2082;
    *(_QWORD *)&v103[2] = v87;
    v104 = 2082;
    v105 = v8;
    v106 = 2082;
    v107 = v9;
    v108 = 2082;
    v109 = v10;
    v110 = 2082;
    v111 = v11;
    v112 = 1025;
    v113 = -858993459 * ((unint64_t)(v12 - v13) >> 3);
    v114 = 2082;
    v115 = v14;
    v116 = 1025;
    v117 = v16;
    v118 = 1025;
    v119 = v17;
    v120 = 1026;
    v121 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,runChannelUpdate,Voters\", \"country\":%{public, location:escape_only}s, \"lsOn\":%{public, location:escape_only}s, \"telephony\":%{public, location:escape_only}s, \"locAvailable\":%{public, location:escape_only}s, \"fIsAllowedByNetwork\":%{public, location:escape_only}s, \"channelMapAvailable\":%{public, location:escape_only}s, \"isCompanionNearby\":%{public, location:escape_only}s, \"channelMapsSize\":%{private}d, \"isParticipating\":%{public, location:escape_only}s, \"isPhone\":%{private}d, \"isWatch\":%{private}d, \"forceOrDeferChannelUpdate\":%{public}hhd}", buf, 0x7Au);
  }

  v91 = (uint64_t *)(a1 + 56);
  sub_100027E48(a1 + 56, *(char **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v19 = *(_BYTE *)(a1 + 47)
     && *(_BYTE *)(a1 + 46)
     && *(_BYTE *)(a1 + 41)
     && *(_BYTE *)(a1 + 40)
     && *(_BYTE *)(a1 + 9)
     && *(_BYTE *)(a1 + 8) != 0;
  if (*(_BYTE *)(a1 + 43))
    v20 = *(_BYTE *)(a1 + 42) != 0;
  else
    v20 = 0;
  if (*(_BYTE *)(a1 + 53))
    v21 = *(_BYTE *)(a1 + 52) != 0;
  else
    v21 = 0;
  v22 = objc_msgSend(*(id *)SAPlatformInfo::instance(v18), "isEqualToString:", CFSTR("iPhone"));
  v98 = 0;
  v99 = 0;
  v97 = &v98;
  if ((v22 & 1) == 0)
  {
    v33 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_74;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v34 = "{\"msg%{public}.0s\":\"#chsel,updateSAChannels,SA not supported on watch\"}";
LABEL_72:
    v35 = v33;
    v36 = 18;
LABEL_73:
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, buf, v36);
    goto LABEL_74;
  }
  v23 = v19 && v20 && v21;
  v24 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateSAChannels,state\", \"isSaRegisterPreCheckPass\":%{public}hhd}", buf, 0x18u);
  }
  if ((v23 & 1) == 0)
  {
    v33 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_74;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v34 = "{\"msg%{public}.0s\":\"#chsel,updateSAChannels,precondition failed\"}";
    goto LABEL_72;
  }
  if (*((_BYTE *)sub_10003D044() + 88))
  {
    v25 = *(double *)(a1 + 16);
    v26 = *(double *)(a1 + 24);
    v27 = *(double *)(a1 + 32);
    v28 = *(_QWORD *)(a1 + 232);
    v29 = *(_QWORD *)(a1 + 240);
    memset(__dst, 0, 24);
    if (v28 != v29)
    {
      v30 = 0;
      while (1)
      {
        v31 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannelFromMap\", \"index\":%{public}d}", buf, 0x18u);
        }
        __str.__r_.__value_.__r.__words[0] = 0xBFF0000000000000;
        if (SAGeometry::isCircleInGeometry(*(SAGeometry **)v28, v25, v26, v27, (SAGeometry *)&__str, v32))
          break;
        ++v30;
        v28 += 40;
        if (v28 == v29)
          goto LABEL_196;
      }
      std::string::operator=((std::string *)__dst, (const std::string *)(v28 + 16));
      *(_DWORD *)&__dst[24] = 0;
      v81 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v82 = __dst;
        if (__dst[23] < 0)
          v82 = *(_BYTE **)__dst;
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v82;
        *(_WORD *)&buf[28] = 2050;
        v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannelFromMap\", \"channelId\":%{private, location:escape_only}s, \"channelType\":%{public}lu}", buf, 0x26u);
      }
      if ((__dst[23] & 0x80000000) != 0)
      {
        sub_100004870(buf, *(void **)__dst, *(unint64_t *)&__dst[8]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)__dst;
        *(_QWORD *)&buf[16] = *(_QWORD *)&__dst[16];
      }
      *(_DWORD *)&buf[24] = *(_DWORD *)&__dst[24];
      sub_1000418C0((uint64_t **)&v97, (uint64_t)buf, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
LABEL_196:
    v86 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v99;
      v34 = "{\"msg%{public}.0s\":\"#chsel,ch\", \"channelListSize\":%{public}lu}";
      v35 = v86;
      v36 = 28;
      goto LABEL_73;
    }
  }
  else
  {
    v73 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,runChannelUpdate,assetNotEnabled,pickDefault\"}", buf, 0x12u);
    }
    v74 = (char *)sub_10003D044();
    if (v74[87] < 0)
    {
      sub_100004870(buf, *((void **)v74 + 8), *((_QWORD *)v74 + 9));
    }
    else
    {
      *(_OWORD *)buf = *((_OWORD *)v74 + 4);
      *(_QWORD *)&buf[16] = *((_QWORD *)v74 + 10);
    }
    *(_DWORD *)&buf[24] = 0;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100004870(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
      v83 = *(_DWORD *)&buf[24];
    }
    else
    {
      v83 = 0;
      *(_OWORD *)__dst = *(_OWORD *)buf;
      *(_QWORD *)&__dst[16] = *(_QWORD *)&buf[16];
    }
    *(_DWORD *)&__dst[24] = v83;
    sub_1000418C0((uint64_t **)&v97, (uint64_t)__dst, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v84 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v85 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)__dst = 68289282;
      *(_WORD *)&__dst[8] = 2082;
      *(_QWORD *)&__dst[10] = "";
      *(_WORD *)&__dst[18] = 2050;
      *(_QWORD *)&__dst[20] = v85;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,ch\", \"channelListSize,MA,\":%{public}lu}", __dst, 0x1Cu);
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
LABEL_74:
  sub_100027DC4(v91, v97, &v98);
  v37 = (uint64_t **)(a1 + 80);
  if ((char ***)(a1 + 80) != &v97)
    v37 = sub_100028FC4(v37, v97, &v98);
  v38 = !*(_BYTE *)(a1 + 47)
     || !*(_BYTE *)(a1 + 46)
     || !*(_BYTE *)(a1 + 41)
     || !*(_BYTE *)(a1 + 40)
     || !*(_BYTE *)(a1 + 9)
     || *(_BYTE *)(a1 + 8) == 0;
  if (*(_BYTE *)(a1 + 51))
    v39 = *(_BYTE *)(a1 + 50) != 0;
  else
    v39 = 0;
  v40 = (SAPlatformInfo *)objc_msgSend(*(id *)SAPlatformInfo::instance((SAPlatformInfo *)v37), "isEqualToString:", CFSTR("iPhone"));
  v41 = (int)v40;
  v42 = (SAPlatformInfo *)objc_msgSend(*(id *)SAPlatformInfo::instance(v40), "isEqualToString:", CFSTR("Watch"));
  v43 = v39 || v38;
  if (((v43 | v42 ^ 1) & 1) != 0)
  {
    v44 = 0;
  }
  else
  {
    v42 = (SAPlatformInfo *)sub_10004020C(a1);
    v44 = (int)v42;
  }
  if (((v43 | v41 ^ 1) & 1) != 0)
  {
    v45 = 0;
  }
  else
  {
    v42 = (SAPlatformInfo *)sub_10004020C(a1);
    v45 = v42;
  }
  v46 = (SACommonUtils *)SAPlatformInfo::instance(v42);
  isLivabiltyEnabled = 0;
  if (*((_BYTE *)v46 + 9) && v44 | v45)
    isLivabiltyEnabled = SACommonUtils::isLivabiltyEnabled(v46);
  v48 = sub_10006C32C(a1 + 256, (double *)(a1 + 16));
  if (*(_BYTE *)(a1 + 224))
  {
    v49 = v48;
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
    objc_msgSend(v50, "setSAEWEnabledState:", v49 & (v44 | v45));

  }
  *((_WORD *)sub_100003038() + 54) = v45 | v44 | 0x100;
  v51 = (void *)SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v52 = v51;
    v53 = sub_10004020C(a1);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v44;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v45;
    LOWORD(v102) = 1026;
    *(_DWORD *)((char *)&v102 + 2) = isLivabiltyEnabled;
    HIWORD(v102) = 1026;
    *(_DWORD *)v103 = v53;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateIgneousChannels,state\", \"registerIgneousOnWatch\":%{public}hhd, \"registerIgneousOnPhone\":%{public}hhd, \"registerLivability\":%{public}hhd, \"isSAEWEnabled\":%{public}hhd}", buf, 0x2Au);

  }
  v95 = 0;
  v96 = 0;
  v94 = &v95;
  if (((v45 | v44) & 1) != 0)
  {
    sub_10006B330(a1 + 256, (double *)(a1 + 16), (uint64_t **)&v94);
    if (isLivabiltyEnabled)
      sub_10006BD0C(a1 + 256, (double *)(a1 + 16), (uint64_t **)&v94);
  }
  else
  {
    v54 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateIgneousChannels,one of preconditions failed for ingneous\"}", buf, 0x12u);
    }
  }
  sub_100027DC4(v91, v94, &v95);
  v55 = (uint64_t **)(a1 + 104);
  if ((char ***)(a1 + 104) != &v94)
    v55 = sub_100028FC4(v55, v94, &v95);
  if (*(_QWORD *)(a1 + 288))
  {
    v56 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,fOnBLERelayUpdateCB\"}", buf, 0x12u);
    }
    v57 = sub_10004020C(a1);
    v55 = (uint64_t **)sub_1000275A8(a1 + 264, v57, *(_QWORD *)(a1 + 120) != 0);
  }
  v58 = *(_BYTE *)(a1 + 47)
     && *(_BYTE *)(a1 + 46)
     && *(_BYTE *)(a1 + 41)
     && *(_BYTE *)(a1 + 40)
     && *(_BYTE *)(a1 + 9)
     && *(_BYTE *)(a1 + 8) != 0;
  if (*(_BYTE *)(a1 + 43))
    v59 = *(_BYTE *)(a1 + 42) != 0;
  else
    v59 = 0;
  v60 = (SACommonUtils *)SAPlatformInfo::instance((SAPlatformInfo *)v55);
  v61 = 0;
  if (v58 && v59 && *((_BYTE *)v60 + 9))
    v61 = SACommonUtils::isLivabiltyEnabled(v60);
  v62 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v61;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateLivabilityChannels,state\", \"registerLivability\":%{public}hhd}", buf, 0x18u);
  }
  v93[0] = 0;
  v93[1] = 0;
  v92 = v93;
  if ((v61 & 1) != 0)
  {
    v63 = (char *)sub_1000687EC();
    if (v63[71] < 0)
      sub_100004870(&__str, *((void **)v63 + 6), *((_QWORD *)v63 + 7));
    else
      __str = *(std::string *)(v63 + 2);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v66 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v67 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v66 >= 0)
          p_str = &__str;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = p_str;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel\", \"livabiltyChannel\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      memset(buf, 0, 24);
      std::string::operator=((std::string *)buf, &__str);
      *(_DWORD *)&buf[24] = 0;
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_100004870(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
        v69 = *(_DWORD *)&buf[24];
      }
      else
      {
        v69 = 0;
        *(_OWORD *)__dst = *(_OWORD *)buf;
        *(_QWORD *)&__dst[16] = *(_QWORD *)&buf[16];
      }
      *(_DWORD *)&__dst[24] = v69;
      sub_1000418C0((uint64_t **)&v92, (uint64_t)__dst, (uint64_t)__dst);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      LOBYTE(v66) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
    }
    if ((v66 & 0x80) != 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v64 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateLivabilityChannels,precondition failed\"}", buf, 0x12u);
    }
  }
  sub_100027DC4(v91, v92, v93);
  if ((char ***)(a1 + 128) != &v92)
    sub_100028FC4((uint64_t **)(a1 + 128), v92, v93);
  v70 = *(_QWORD *)(a1 + 176);
  if (v70)
  {
    buf[0] = a2;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v70 + 48))(v70, v91, buf);
  }
  if (!*(_BYTE *)(a1 + 224))
  {
    if (*(_BYTE *)(a1 + 41))
    {
      if (*(_BYTE *)(a1 + 40))
      {
        v71 = *(_BYTE *)(a1 + 9) == 0;
        v72 = *(_BYTE *)(a1 + 47) == 0;
      }
      else
      {
        v71 = 0;
        v72 = 0;
      }
    }
    else
    {
      v71 = 1;
      v72 = 1;
    }
    v75 = sub_10003D044();
    v76 = v75[88];
    if (v75[88])
      v76 = *(_BYTE *)(a1 + 49) == 0;
    if (*(_BYTE *)(a1 + 41))
    {
      v77 = !*(_BYTE *)(a1 + 43) || v71;
      if (((v76 | v72 | v77) & 1) == 0 && *(_BYTE *)(a1 + 45))
      {
        v78 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,initComplete\"}", buf, 0x12u);
        }
        *(_BYTE *)(a1 + 224) = 1;
        v79 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
        objc_msgSend(v79, "setSAEWEnabledState:", v96 != 0);

        v80 = *(_QWORD *)(a1 + 216);
        if (v80)
          (*(void (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80);
      }
    }
  }
  sub_100027E48((uint64_t)&v92, v93[0]);
  sub_100027E48((uint64_t)&v94, v95);
  sub_100027E48((uint64_t)&v97, v98);
}

void sub_10003F4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,char *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 153) < 0)
    operator delete(*(void **)(v37 - 176));
  sub_100027E48((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_10003F628(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3, double a4, double a5)
{
  NSObject *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v17[5];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  CLLocationDegrees v23;
  __int16 v24;
  CLLocationDegrees v25;
  __int16 v26;
  double v27;

  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289795;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    v23 = a2;
    v24 = 2049;
    v25 = a3;
    v26 = 2049;
    v27 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onLocationChanged\", \"lat\":\"%{private}0.6f\", \"lon\":\"%{private}0.6f\", \"unc\":\"%{private}0.2f\"}", buf, 0x30u);
  }
  *(CLLocationCoordinate2D *)(a1 + 16) = CLLocationCoordinate2DMake(a2, a3);
  *(double *)(a1 + 32) = a5;
  *(_WORD *)(a1 + 8) = 257;
  v10 = objc_alloc((Class)CLLocation);
  v11 = *(double *)(a1 + 16);
  v12 = *(double *)(a1 + 24);
  v13 = *(double *)(a1 + 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v15 = objc_msgSend(v10, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v14, v11, v12, 0.0, v13, -1.0);

  v16 = *(void **)(a1 + 184);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10003F81C;
  v17[3] = &unk_1000F2DE8;
  v17[4] = a1;
  objc_msgSend(v16, "fetchInfoForLocation:withReply:", v15, v17);
  sub_10003E4F0(a1, 0);

}

void sub_10003F7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003F81C(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  __int128 *v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  __int16 v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  std::string v24;
  std::string __p;
  std::string v26;
  uint8_t buf[8];
  _BYTE v28[20];
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = *(void **)(a1 + 32);
  if (v10)
  {
    v12 = SALogObjectWarning;
    if (os_log_type_enabled((os_log_t)SALogObjectWarning, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v28 = 2082;
      *(_QWORD *)&v28[2] = "";
      *(_WORD *)&v28[10] = 2113;
      *(_QWORD *)&v28[12] = v8;
      v29 = 2113;
      v30 = v9;
      v31 = 2113;
      v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,fetchInfoForLocationReply,onError\", \"config\":%{private, location:escape_only}@, \"info\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x30u);
    }
    sub_10003FBE4((uint64_t)v11, 0);
    sub_10003FCE4(0);
    v13 = sub_100003038();
    *(_QWORD *)v28 = 0;
    *(_QWORD *)&v28[8] = 0;
    *(_QWORD *)buf = 0;
    sub_10003FE8C((uint64_t)v13, (const std::string *)buf);
    if ((v28[15] & 0x80000000) != 0)
    {
      v14 = *(void **)buf;
LABEL_6:
      operator delete(v14);
    }
  }
  else
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v28 = 2082;
      *(_QWORD *)&v28[2] = "";
      *(_WORD *)&v28[10] = 2113;
      *(_QWORD *)&v28[12] = v8;
      v29 = 2113;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,fetchInfoForLocationReply\", \"config\":%{private, location:escape_only}@, \"info\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    if (v8)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("allowed")));
      v16 = v4 != 0;
    }
    else
    {
      v16 = 0;
    }
    sub_10003FBE4((uint64_t)v11, v16);
    if (v8)
    {

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("motionHarvestOnly")));
      v17 = v11 != 0;
    }
    else
    {
      v17 = 0;
    }
    sub_10003FCE4(v17);
    if (v8)

    if (!v9)
    {
      v22 = sub_100003038();
      memset(&v26, 0, sizeof(v26));
      sub_10003FE8C((uint64_t)v22, &v26);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_6;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("kCLRegGeoRegionMatchedKey")));
    v19 = v18;
    if (v18)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKey:", CFSTR("kCLRegNameKey")));
      v21 = sub_100003038();
      if (v20)
        sub_10000E8A0(&v24, (char *)objc_msgSend(objc_retainAutorelease(v20), "UTF8String"));
      else
        memset(&v24, 0, sizeof(v24));
      sub_10003FE8C((uint64_t)v21, &v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);

    }
    else
    {
      v23 = sub_100003038();
      memset(&__p, 0, sizeof(__p));
      sub_10003FE8C((uint64_t)v23, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

  }
LABEL_30:

}

void sub_10003FB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10003FBE4(uint64_t a1, int a2)
{
  NSObject *v4;
  __int128 *v5;
  __int16 v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onCountrySupportChanged\", \"isSupported\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  *(_WORD *)(a1 + 46) = a2 | 0x100;
  v5 = sub_100003038();
  v6 = *(unsigned __int8 *)(a1 + 47);
  if (*(_BYTE *)(a1 + 47))
    v6 = *(_BYTE *)(a1 + 46) != 0;
  *((_WORD *)v5 + 48) = v6 | 0x100;
  sub_10003E4F0(a1, 0);
}

void sub_10003FCE4(__int16 a1)
{
  NSObject *v2;
  int v3;
  SAPlatformInfo *v4;
  NSObject *v5;
  __int128 *v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;

  v2 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)sub_1000687EC() + 488);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onMotionHarvestOnlySupportChanged\", \"asset config value\":%{public}hhd}", (uint8_t *)&v9, 0x18u);
  }

  v4 = (SAPlatformInfo *)sub_1000687EC();
  if (*((_BYTE *)v4 + 488))
  {
    if (objc_msgSend(*(id *)SAPlatformInfo::instance(v4), "isEqualToString:", CFSTR("iPhone")))
      *((_WORD *)sub_100003038() + 49) = a1 | 0x100;
    v5 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_100003038();
      if (*((_BYTE *)v6 + 99))
        v7 = *((_BYTE *)v6 + 98) == 0;
      else
        v7 = 1;
      v8 = !v7;
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 1025;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onMotionHarvestOnlySupportChanged\", \"isSupported\":%{private}hhd}", (uint8_t *)&v9, 0x18u);
    }

  }
}

void sub_10003FE74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *sub_10003FE8C(uint64_t a1, const std::string *a2)
{
  NSObject *v4;
  const std::string *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const std::string *v11;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v7[0] = 68289283;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ss,setCountryName\", \"countryName\":%{private, location:escape_only}s}", (uint8_t *)v7, 0x1Cu);
  }
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void sub_10003FF74(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onLocationAuthorized\", \"isAuthorized\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 40) = a2 | 0x100;
  if ((a2 & 1) == 0)
  {
    *(_WORD *)(a1 + 8) = 256;
    *(CLLocationCoordinate2D *)(a1 + 16) = kCLLocationCoordinate2DInvalid;
    *(_QWORD *)(a1 + 32) = 0xBFF0000000000000;
    sub_10003FCE4(0);
  }
  sub_10003E4F0(a1, 1);
}

void sub_100040080(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onInexpensiveNetworkConnected\", \"isConnected\":%{public}hhd}", (uint8_t *)v4, 0x18u);
  }
}

__int128 *sub_100040140(uint64_t a1, int a2)
{
  NSObject *v3;
  __int128 *result;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onCellNetworkConnected\", \"isConnected\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  result = sub_100003038();
  *((_WORD *)result + 55) = a2 | 0x100;
  return result;
}

uint64_t sub_10004020C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 257);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v3;
    v10 = 1026;
    v11 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,isFeatureEnabled,\", \"fIsEnhanceDeliverySwitchEnabled,\":%{public}hhd, \"ffEnabled,\":%{public}hhd}", (uint8_t *)v5, 0x1Eu);
  }
  return *(unsigned __int8 *)(a1 + 257);
}

void sub_1000402E0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = "true";
    if (*(_BYTE *)(a1 + 47))
    {
      if (*(_BYTE *)(a1 + 46))
        v4 = "true";
      else
        v4 = "false";
    }
    else
    {
      v4 = "notSet";
    }
    if (*(_BYTE *)(a1 + 41))
    {
      if (*(_BYTE *)(a1 + 40))
        v5 = "true";
      else
        v5 = "false";
    }
    else
    {
      v5 = "notSet";
    }
    if (*(_BYTE *)(a1 + 43))
    {
      if (*(_BYTE *)(a1 + 42))
        v6 = "true";
      else
        v6 = "false";
    }
    else
    {
      v6 = "notSet";
    }
    if (*(_BYTE *)(a1 + 9))
    {
      if (*(_BYTE *)(a1 + 8))
        v7 = "true";
      else
        v7 = "false";
    }
    else
    {
      v7 = "notSet";
    }
    if (*(_BYTE *)(a1 + 45))
    {
      if (*(_BYTE *)(a1 + 44))
        v8 = "true";
      else
        v8 = "false";
    }
    else
    {
      v8 = "notSet";
    }
    if (*(_BYTE *)(a1 + 49))
    {
      if (*(_BYTE *)(a1 + 48))
        v9 = "true";
      else
        v9 = "false";
    }
    else
    {
      v9 = "notSet";
    }
    if (*(_BYTE *)(a1 + 51))
    {
      if (*(_BYTE *)(a1 + 50))
        v10 = "true";
      else
        v10 = "false";
    }
    else
    {
      v10 = "notSet";
    }
    if (*(_BYTE *)(a1 + 53))
    {
      if (!*(_BYTE *)(a1 + 52))
        v3 = "false";
    }
    else
    {
      v3 = "notSet";
    }
    v11 = *(_QWORD *)(a1 + 72);
    v12[0] = 68291331;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v4;
    v17 = 2082;
    v18 = v5;
    v19 = 2082;
    v20 = v6;
    v21 = 2082;
    v22 = v7;
    v23 = 2082;
    v24 = v8;
    v25 = 2082;
    v26 = v9;
    v27 = 2082;
    v28 = v10;
    v29 = 2082;
    v30 = v3;
    v31 = 2049;
    v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,states\", \"country\":%{public, location:escape_only}s, \"lsOn\":%{public, location:escape_only}s, \"telephony\":%{public, location:escape_only}s, \"locAvailable\":%{public, location:escape_only}s, \"fIsAllowedByNetwork\":%{public, location:escape_only}s, \"channelMapAvailable\":%{public, location:escape_only}s, \"isCompanionNearby\":%{public, location:escape_only}s, \"isParticipating\":%{public, location:escape_only}s, \"channelListSize\":%{private}lu}", (uint8_t *)v12, 0x6Cu);
  }
}

void sub_1000404F4(uint64_t a1, void *a2)
{
  char *v3;
  NSObject *v4;
  uint64_t i;
  uint64_t v6;
  __int128 *v7;
  __int16 v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  char *j;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  int v34;
  __int128 *v35;
  __int16 v36;
  NSObject *v37;
  NSObject *v38;
  char *v39;
  id v40;
  void *v41;
  char *v42;
  void *v43;
  id v44;
  void *__p[2];
  char v46;
  uint64_t buf;
  __int16 v48;
  const char *v49;
  __int16 v50;
  char *v51;

  v3 = a2;
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289283;
    v48 = 2082;
    v49 = "";
    v50 = 2113;
    v51 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onAssetReceived\", \"asset\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  v6 = *(_QWORD *)(a1 + 232);
  for (i = *(_QWORD *)(a1 + 240); i != v6; sub_100040FD0(i))
    i -= 40;
  *(_QWORD *)(a1 + 240) = v6;
  *(_WORD *)(a1 + 48) = 256;
  v7 = sub_100003038();
  v8 = *(unsigned __int8 *)(a1 + 49);
  if (*(_BYTE *)(a1 + 49))
    v8 = *(_BYTE *)(a1 + 48) != 0;
  *((_WORD *)v7 + 50) = v8 | 0x100;
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("features")));
  if (v43 && (v9 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v43, v9) & 1) != 0))
  {
    v44 = v43;
    v10 = (char *)objc_msgSend(v44, "count");
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v48 = 2082;
      v49 = "";
      v50 = 2050;
      v51 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,features,size\", \"size\":%{public}lu}", (uint8_t *)&buf, 0x1Cu);
    }
    if (v10)
    {
      for (j = 0; j != v10; ++j)
      {
        v13 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          buf = 68289282;
          v48 = 2082;
          v49 = "";
          v50 = 1026;
          LODWORD(v51) = (_DWORD)j;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,loop\", \"index\":%{public}d}", (uint8_t *)&buf, 0x18u);
        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndex:", j, v39));
        if (v14 && (v15 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v14, v15) & 1) != 0))
        {
          v16 = v14;
          v17 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289282;
            v48 = 2082;
            v49 = "";
            v50 = 2114;
            v51 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,feature\", \"feature\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", CFSTR("properties")));
          if (v18 && (v19 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v18, v19) & 1) != 0))
          {
            v20 = v18;
            v21 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              buf = 68289282;
              v48 = 2082;
              v49 = "";
              v50 = 2114;
              v51 = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,properties\", \"properties\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
            }
            v42 = v20;
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", CFSTR("ch_config")));
            if (v22 && (v23 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v22, v23) & 1) != 0))
            {
              v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("mp_channel")));
              if (v41 && (v24 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v41, v24) & 1) != 0))
              {
                v40 = v41;
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", CFSTR("geometry")));
                v39 = v3;
                if (v25
                  && (v26 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v25, v26) & 1) != 0))
                {
                  sub_10000E8A0(__p, (char *)objc_msgSend(objc_retainAutorelease(v40), "UTF8String"));
                  sub_1000416C4(&buf, v25, (__int128 *)__p);
                  if (v46 < 0)
                    operator delete(__p[0]);
                  sub_100040E38((int64x2_t *)(a1 + 232), (uint64_t)&buf);
                  sub_100040FD0((uint64_t)&buf);
                }
                else
                {
                  v32 = SALogObjectGeneral;
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    buf = 68289026;
                    v48 = 2082;
                    v49 = "";
                    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,geometryFailed\"}", (uint8_t *)&buf, 0x12u);
                  }
                }

                v29 = v39;
              }
              else
              {
                v29 = v3;
                v31 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  buf = 68289026;
                  v48 = 2082;
                  v49 = "";
                  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,channelIdObjectFailed\"}", (uint8_t *)&buf, 0x12u);
                }
              }

            }
            else
            {
              v29 = v3;
              v30 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                buf = 68289026;
                v48 = 2082;
                v49 = "";
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,channelConfigIdObjectFailed\"}", (uint8_t *)&buf, 0x12u);
              }
            }

            v3 = v29;
          }
          else
          {
            v28 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              buf = 68289026;
              v48 = 2082;
              v49 = "";
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,propertiesIdObjectFailed\"}", (uint8_t *)&buf, 0x12u);
            }
          }

        }
        else
        {
          v27 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289282;
            v48 = 2082;
            v49 = "";
            v50 = 2050;
            v51 = j;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,elementIsNotDictionary\", \"index\":%{public}lu}", (uint8_t *)&buf, 0x1Cu);
          }
        }

      }
      v33 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v34 = -858993459 * ((*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
        buf = 68289282;
        v48 = 2082;
        v49 = "";
        v50 = 1026;
        LODWORD(v51) = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,features\", \"size\":%{public}d}", (uint8_t *)&buf, 0x18u);
      }
      if (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a1 + 232))
      {
        *(_WORD *)(a1 + 48) = 257;
        v35 = sub_100003038();
        v36 = *(unsigned __int8 *)(a1 + 49);
        if (*(_BYTE *)(a1 + 49))
          v36 = *(_BYTE *)(a1 + 48) != 0;
        *((_WORD *)v35 + 50) = v36 | 0x100;
      }
      sub_10003E4F0(a1, 0);
    }
    else
    {
      v38 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        v48 = 2082;
        v49 = "";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,noFeatureInAsset\"}", (uint8_t *)&buf, 0x12u);
      }
    }

  }
  else
  {
    v37 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v48 = 2082;
      v49 = "";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,invalid_features\"}", (uint8_t *)&buf, 0x12u);
    }
  }

}

void sub_100040D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  sub_100040FD0((uint64_t)&a26);

  _Unwind_Resume(a1);
}

uint64_t sub_100040E38(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  int64x2_t v21;
  char *v22;
  int64x2_t *v23;

  v4 = a1[1].u64[0];
  v5 = a1->u64[1];
  if (v5 >= v4)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    if (v8 + 1 > 0x666666666666666)
      sub_100004C50();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - a1->i64[0]) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    v23 = a1 + 1;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        sub_100004984();
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = v12;
    v21.i64[0] = (uint64_t)&v12[40 * v8];
    v22 = &v12[40 * v11];
    sub_1000417F0(v21.i64[0], a2);
    v13 = v21.i64[0];
    v7 = v21.i64[0] + 40;
    v21.i64[1] = v21.i64[0] + 40;
    v15 = a1->i64[0];
    v14 = a1->u64[1];
    if (v14 == a1->i64[0])
    {
      v18 = vdupq_n_s64(v14);
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v14 - 40);
        v14 -= 40;
        *(_OWORD *)(v13 - 40) = v16;
        v13 -= 40;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v17 = *(_OWORD *)(v14 + 16);
        *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
        *(_OWORD *)(v13 + 16) = v17;
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      while (v14 != v15);
      v18 = *a1;
      v7 = v21.i64[1];
    }
    a1->i64[0] = v13;
    a1->i64[1] = v7;
    v21 = v18;
    v19 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v22;
    v22 = v19;
    v20 = (char *)v18.i64[0];
    result = sub_100041874((uint64_t)&v20);
  }
  else
  {
    result = (uint64_t)sub_1000417F0((_QWORD *)a1->i64[1], a2);
    v7 = v5 + 40;
    a1->i64[1] = v5 + 40;
  }
  a1->i64[1] = v7;
  return result;
}

void sub_100040FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100041874((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100040FD0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return sub_100028C54(a1);
}

void sub_100041000(uint64_t a1, int a2)
{
  NSObject *v4;
  __int128 *v5;
  __int16 v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onTelephonySupport\", \"isSupported\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  *(_WORD *)(a1 + 42) = a2 | 0x100;
  v5 = sub_100003038();
  v6 = *(unsigned __int8 *)(a1 + 43);
  if (*(_BYTE *)(a1 + 43))
    v6 = *(_BYTE *)(a1 + 42) != 0;
  *((_WORD *)v5 + 46) = v6 | 0x100;
  sub_10003E4F0(a1, 0);
}

void sub_100041100(SAPlatformInfo *a1, __int16 a2)
{
  if (objc_msgSend(*(id *)SAPlatformInfo::instance(a1), "isEqualToString:", CFSTR("Watch")))
  {
    *((_WORD *)a1 + 25) = a2 | 0x100;
    sub_10003E4F0((uint64_t)a1, 0);
  }
}

void sub_100041154(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_1000273E4(&v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1000411D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100028C54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000411E8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,onEnhancedDeliveryEnabled,\", \"isEnabled,\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 257) = a2;
  *((_WORD *)sub_100003038() + 53) = *(unsigned __int8 *)(a1 + 257) | 0x100;
  sub_10003E4F0(a1, 1);
}

void sub_1000412D4(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL4 v4;
  BOOL v5;
  SAPlatformInfo *v6;
  int v7;
  unsigned int v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  __int128 *v12;
  BOOL v13;
  char v14;
  void *v15;
  unsigned int v16;
  __int128 *v17;
  _BOOL4 v18;
  __int128 *v19;
  __int16 v20;
  __int128 *v21;
  BOOL v22;
  char v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 *v29;
  int v30;
  int v31;
  __int128 *v32;
  BOOL v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  _BOOL4 v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  int v68;

  v4 = *(_BYTE *)(a1 + 47)
    && *(_BYTE *)(a1 + 46)
    && *(_BYTE *)(a1 + 41)
    && *(_BYTE *)(a1 + 40)
    && *(_BYTE *)(a1 + 9)
    && *(_BYTE *)(a1 + 8) != 0;
  if (*(_BYTE *)(a1 + 51))
    v5 = *(_BYTE *)(a1 + 50) != 0;
  else
    v5 = 0;
  v6 = (SAPlatformInfo *)objc_msgSend(*(id *)SAPlatformInfo::instance((SAPlatformInfo *)a1), "isEqualToString:", CFSTR("iPhone"));
  v7 = (int)v6;
  v8 = objc_msgSend(*(id *)SAPlatformInfo::instance(v6), "isEqualToString:", CFSTR("Watch"));
  v9 = 0;
  *a2 = sub_10006C32C(a1 + 256, (double *)(a1 + 16));
  if (!v5 && v4 && v8)
    v9 = sub_10004020C(a1);
  v10 = 0;
  if (!v5 && (v4 & v7) != 0)
    v10 = sub_10004020C(a1);
  v11 = *a2;
  if (*a2)
    v11 = v10 | v9;
  a2[4] = v11;
  a2[1] = v4;
  a2[3] = v5;
  a2[2] = sub_10004020C(a1);
  v12 = sub_100003038();
  if (*((_BYTE *)v12 + 113))
    v13 = *((_BYTE *)v12 + 112) == 0;
  else
    v13 = 1;
  v14 = !v13;
  a2[5] = v14;
  if (objc_msgSend(*(id *)SAPlatformInfo::instance((SAPlatformInfo *)v12), "isEqualToString:", CFSTR("iPhone")))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
    v16 = objc_msgSend(v15, "isSafetyDataSubmissionAllowed");

  }
  else
  {
    v16 = 0;
  }
  v17 = sub_100003038();
  v18 = 0;
  if (!*((_BYTE *)v17 + 117) || !*((_BYTE *)v17 + 116))
  {
LABEL_33:
    if (v16)
      goto LABEL_34;
    goto LABEL_38;
  }
  v19 = sub_100003038();
  if (*((_BYTE *)v19 + 99))
  {
    v18 = *((_BYTE *)v19 + 98) != 0;
    goto LABEL_33;
  }
  v18 = 0;
  if (v16)
  {
LABEL_34:
    if (a2[5])
      v20 = 1;
    else
      v20 = v18;
    goto LABEL_39;
  }
LABEL_38:
  v20 = 0;
LABEL_39:
  *((_WORD *)sub_100003038() + 59) = v20 | 0x100;
  v21 = sub_100003038();
  if (*((_BYTE *)v21 + 119))
    v22 = *((_BYTE *)v21 + 118) == 0;
  else
    v22 = 1;
  v23 = !v22;
  a2[6] = v23;
  v24 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = a2[4];
    v26 = a2[1];
    v27 = a2[3];
    v28 = a2[2];
    v38 = *a2;
    v39 = a2[5];
    v29 = sub_100003038();
    v40 = v16;
    v30 = *((unsigned __int8 *)v29 + 117);
    v31 = *((unsigned __int8 *)v29 + 116);
    v32 = sub_100003038();
    if (v30)
      v33 = v31 == 0;
    else
      v33 = 1;
    v34 = !v33;
    v35 = a2[6];
    if (*((_BYTE *)v32 + 99))
      v36 = *((_BYTE *)v32 + 98) == 0;
    else
      v36 = 1;
    v37 = !v36;
    *(_DWORD *)buf = 68292099;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v45 = 1025;
    v46 = v25;
    v47 = 1025;
    v48 = v26;
    v49 = 1025;
    v50 = v27;
    v51 = 1025;
    v52 = v28;
    v53 = 1025;
    v54 = v38;
    v55 = 1025;
    v56 = v4;
    v57 = 1025;
    v58 = v39;
    v59 = 1025;
    v60 = v34;
    v61 = 1025;
    v62 = v37;
    v63 = 1025;
    v64 = v18;
    v65 = 1025;
    v66 = v40;
    v67 = 1025;
    v68 = v35;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getIgneousStateParameters,state\", \"isEnabled\":%{private}hhd, \"inSupportedCountry\":%{private}hhd, \"isInMagnetMode\":%{private}hhd, \"isUserOptedIn\":%{private}hhd, \"inCoverageRegion\":%{private}hhd, \"isInCountry\":%{private}hhd, \"emergencyAlert\":%{private}hhd, \"motionHarvestPref\":%{private}hhd, \"motionHarvestOnlyInCountry\":%{private}hhd, \"motionHarvestAvailable\":%{private}hhd, \"improveSafety\":%{private}hhd, \"isMotionHarvestAllowed\":%{private}hhd}", buf, 0x5Au);
  }

}

void sub_10004163C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100041654(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_100040FD0(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1000416C4(_QWORD *a1, void *a2, __int128 *a3)
{
  NSDictionary *v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;

  v5 = a2;
  v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_1000F2E18;
  SAGeometry::SAGeometry((SAGeometry *)(v6 + 3), v5);
  *a1 = v7;
  a1[1] = v6;
  v8 = a1 + 2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004870(v8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    a1[4] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v9;
  }

  return a1;
}

void sub_10004174C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100028C54(v2);

  _Unwind_Resume(a1);
}

void sub_100041780(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100041790(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F2E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000417C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

}

_QWORD *sub_1000417F0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1 + 2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100004870(v6, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    a1[4] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_100041860(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100028C54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100041874(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_100040FD0(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *sub_1000418C0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = sub_100027C58((uint64_t)a1, &v9, a2);
  v6 = (_OWORD *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    sub_1000162D4(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_100041958(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _BYTE v8[24];

  v7 = a2;
  *a1 = off_1000F2E68;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_100004F4C((uint64_t)(a1 + 5), a4);
  a1[9] = 0;
  sub_100004F4C((uint64_t)v8, (uint64_t)(a1 + 5));
  sub_100058390(v7);
}

void sub_100041A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v17 = a13;
  if (a13 == &a10)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  v19 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v14 + 72) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD **)(v14 + 64);
  if (v20 == v15)
  {
    v21 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_13;
    v21 = 5;
    v15 = *(_QWORD **)(v14 + 64);
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v21))(v15);
LABEL_13:
  sub_100004EC0(&a9);

  _Unwind_Resume(a1);
}

void sub_100041B2C(uint64_t a1, void *a2)
{
  SACommonUtils *v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  SACommonUtils *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void **v24;

  v3 = a2;
  v4 = SALogObjectGeneral;
  if (v3)
  {
    v5 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      SACommonUtils::getAnyCmam(v3, __p);
      v6 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2081;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,onAlertReceived,cleanupPullsInProgress\", \"cmam\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v18 < 0)
        operator delete(__p[0]);
    }

    v8 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    v9 = v3;
    if (v8 == v7)
      goto LABEL_34;
    v10 = v7;
    while (!SACommonUtils::isHashMatch(v8, v9))
    {
      v8 += 24;
      if (v8 == v7)
        goto LABEL_35;
    }
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v8 + 23) >= 0)
        v12 = v8;
      else
        v12 = *(_QWORD *)v8;
      *(_DWORD *)buf = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2081;
      v24 = (void **)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,onAlertReceived,clearingPullHash\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    if (v8 == v7)
      goto LABEL_35;
    v13 = v8 + 24;
    if (v8 + 24 == v7)
    {
LABEL_34:
      v10 = v8;
    }
    else
    {
      v10 = v8;
      do
      {
        if (SACommonUtils::isHashMatch(v13, v9))
        {
          v14 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v13 + 23) >= 0)
              v15 = v13;
            else
              v15 = *(_QWORD *)v13;
            *(_DWORD *)buf = 68289283;
            v20 = 0;
            v21 = 2082;
            v22 = "";
            v23 = 2081;
            v24 = (void **)v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,onAlertReceived,clearingPullHash\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
        }
        else
        {
          if (*(char *)(v10 + 23) < 0)
            operator delete(*(void **)v10);
          v16 = *(_OWORD *)v13;
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v13 + 16);
          *(_OWORD *)v10 = v16;
          v10 += 24;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
        }
        v13 += 24;
      }
      while (v13 != v7);
    }
LABEL_35:

    sub_100041E98(a1 + 16, v10, *(__int128 **)(a1 + 24));
    goto LABEL_36;
  }
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,#warning,onAlertReceived,dictionaryIsNil\"}", buf, 0x12u);
  }
LABEL_36:

}

void sub_100041E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100041E98(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_10004255C((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_100041F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 **v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void **v8;
  int v9;
  void *v10;
  const void *v11;
  size_t v12;
  NSObject *v14;
  const void **i;
  int v16;
  size_t v17;
  const void *v18;
  void *v19;
  void **v20;
  size_t v21;
  __int128 v23;
  NSObject *v24;
  void *__p[2];
  uint64_t v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const void *v32;

  if (*(char *)(a2 + 23) < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      return;
    v2 = a1 + 16;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = (__int128 **)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 24);
    sub_100004870(__p, *(void **)a2, v6);
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      return;
    v2 = a1 + 16;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = (__int128 **)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)__p = *(_OWORD *)a2;
    v26 = *(_QWORD *)(a2 + 16);
  }
  if (v3 == v5)
    goto LABEL_58;
  v7 = v26 >= 0 ? (void *)HIBYTE(v26) : __p[1];
  v8 = v26 >= 0 ? __p : (void **)__p[0];
  while (1)
  {
    v9 = *(char *)(v3 + 23);
    v10 = v9 >= 0 ? (void *)*(unsigned __int8 *)(v3 + 23) : *(void **)(v3 + 8);
    v11 = v9 >= 0 ? (const void *)v3 : *(const void **)v3;
    v12 = (size_t)(v7 >= v10 ? v10 : v7);
    if (!memcmp(v11, v8, v12) && v7 == v10)
      break;
    v3 += 24;
    if (v3 == v5)
      goto LABEL_58;
  }
  v14 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 2081;
    v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,onAlertPullFailed,clearingPullHash\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (v3 == v5)
  {
LABEL_58:
    v3 = v5;
  }
  else
  {
    for (i = (const void **)(v3 + 24); i != (const void **)v5; i += 3)
    {
      v16 = *((char *)i + 23);
      if (v16 >= 0)
        v17 = *((unsigned __int8 *)i + 23);
      else
        v17 = (size_t)i[1];
      if (v16 >= 0)
        v18 = i;
      else
        v18 = *i;
      if (v26 >= 0)
        v19 = (void *)HIBYTE(v26);
      else
        v19 = __p[1];
      if (v26 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      if ((unint64_t)v19 >= v17)
        v21 = v17;
      else
        v21 = (size_t)v19;
      if (!memcmp(v18, v20, v21) && v19 == (void *)v17)
      {
        v24 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          v28 = 0;
          v29 = 2082;
          v30 = "";
          v31 = 2081;
          v32 = v18;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,onAlertPullFailed,clearingPullHash\", \"hash\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
      }
      else
      {
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        v23 = *(_OWORD *)i;
        *(_QWORD *)(v3 + 16) = i[2];
        *(_OWORD *)v3 = v23;
        v3 += 24;
        *((_BYTE *)i + 23) = 0;
        *(_BYTE *)i = 0;
      }
    }
  }
  sub_100041E98(v2, v3, *v4);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
}

void sub_1000421E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_10004220C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  unsigned __int8 *v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned __int8 *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  unsigned __int8 *v26;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = SALogObjectGeneral;
  result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (!v5)
  {
    if (!result)
      return result;
    v21 = 68289026;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v12 = "{\"msg%{public}.0s\":\"#pull,#warning,notPulling,hashIsEmpty\"}";
    v13 = v6;
    v14 = 18;
    goto LABEL_24;
  }
  if (result)
  {
    v8 = *(unsigned __int8 **)a2;
    if (v4 >= 0)
      v8 = (unsigned __int8 *)a2;
    v21 = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#pull\", \"hash\":%{private, location:escape_only}s}", (uint8_t *)&v21, 0x1Cu);
  }
  if (sub_1000299F8(*(void *****)(a1 + 8), a2))
  {
    v9 = SALogObjectGeneral;
    v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v10)
      return result;
    if (*(char *)(a2 + 23) >= 0)
      v11 = (unsigned __int8 *)a2;
    else
      v11 = *(unsigned __int8 **)a2;
    v21 = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v11;
    v12 = "{\"msg%{public}.0s\":\"#pull,#warning,notPulling,saAlreadyFound\", \"hash\":%{private, location:escape_only}s}";
    v13 = v9;
LABEL_23:
    v14 = 28;
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v21, v14);
    return 0;
  }
  v15 = sub_1000049AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (unsigned __int8 **)a2);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = SALogObjectGeneral;
  result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v15 != v16)
  {
    if (!result)
      return result;
    if (*(char *)(a2 + 23) >= 0)
      v18 = (unsigned __int8 *)a2;
    else
      v18 = *(unsigned __int8 **)a2;
    v21 = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v18;
    v12 = "{\"msg%{public}.0s\":\"#pull,#warning,notPulling,alreadyInProgress\", \"hash\":%{private, location:escape_only}s}";
    v13 = v17;
    goto LABEL_23;
  }
  if (result)
  {
    if (*(char *)(a2 + 23) >= 0)
      v19 = (unsigned __int8 *)a2;
    else
      v19 = *(unsigned __int8 **)a2;
    v21 = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,pullTriggered\", \"hash\":%{private, location:escape_only}s}", (uint8_t *)&v21, 0x1Cu);
    v15 = *(_QWORD *)(a1 + 24);
  }
  if (v15 >= *(_QWORD *)(a1 + 32))
  {
    v20 = sub_100004ABC((uint64_t *)(a1 + 16), (__int128 *)a2);
  }
  else
  {
    sub_100004A60((_QWORD *)(a1 + 16), (__int128 *)a2);
    v20 = v15 + 24;
  }
  *(_QWORD *)(a1 + 24) = v20;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a2);
  return 1;
}

void sub_100042538(uint64_t a1)
{
  sub_1000425CC(a1);
  operator delete();
}

__int128 *sub_10004255C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1000425CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_1000F2E68;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == (_QWORD *)(a1 + 40))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 40);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v6 = (void **)(a1 + 16);
  sub_100004EC0(&v6);
  return a1;
}

uint64_t sub_100042658(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#brm,initializing\"}", (uint8_t *)v4, 0x12u);
  }
  return a1;
}

uint64_t sub_100042710(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#brm,destructor\"}", (uint8_t *)v4, 0x12u);
  }
  return a1;
}

void sub_1000427C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  time_t v6;
  double v7;
  __int128 *v8;
  float v9;
  char *v10;
  void **v11;
  char *v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  __int16 v17;
  _BYTE v18[10];
  int v19;
  double v20;
  double v21;
  void *v22[2];
  void *v23[2];
  __int128 v24;
  void *v25[2];
  void *__p[2];
  __int128 v27;
  __int16 v28;
  int v29;
  char v30;
  int v31;
  char v32;
  int v33;
  char v34;
  char v35;
  char v36;
  int v37;

  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289026;
    v17 = 2082;
    *(_QWORD *)v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#brm,onBleAlertReceived\"}", (uint8_t *)&v16, 0x12u);
  }
  v6 = time(0);
  LOBYTE(v29) = 0;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 0;
  v7 = (double)(uint64_t)((double)(uint64_t)(double)v6 + -978307200.0);
  *(double *)&v16 = v7;
  LOBYTE(v17) = *(_BYTE *)(a3 + 1);
  v8 = sub_100003038();
  v9 = *(float *)(a3 + 8);
  *(_DWORD *)&v18[2] = (int)*((double *)v8 + 16);
  *(_DWORD *)&v18[6] = (int)v9;
  v19 = *(_DWORD *)(a3 + 4);
  std::string::operator=((std::string *)v22, (const std::string *)(a2 + 8));
  if (SHIBYTE(v24) < 0)
  {
    *(_QWORD *)&v24 = 9;
    v10 = (char *)v23[1];
  }
  else
  {
    v10 = (char *)&v23[1];
    HIBYTE(v24) = 9;
  }
  strcpy(v10, "Recipient");
  if (SHIBYTE(__p[0]) < 0)
  {
    v25[1] = (void *)3;
    v11 = (void **)v25[0];
  }
  else
  {
    v11 = v25;
    HIBYTE(__p[0]) = 3;
  }
  *(_DWORD *)v11 = 6646850;
  if (SHIBYTE(v27) < 0)
  {
    *(_QWORD *)&v27 = 10;
    v12 = (char *)__p[1];
  }
  else
  {
    v12 = (char *)&__p[1];
    HIBYTE(v27) = 10;
  }
  strcpy(v12, "Advertiser");
  v13 = *(_DWORD *)(a2 + 344);
  if (!v30)
    v30 = 1;
  v14 = *(_DWORD *)(a2 + 348);
  v29 = v13;
  v31 = v14;
  v32 = 1;
  v33 = v14;
  v34 = 1;
  v15 = (v7 - *(double *)(a2 + 352)) * 1000.0;
  v20 = (v7 - *(double *)(a2 + 216)) * 1000.0;
  v21 = v15;
  v37 = sub_100042AB4();
  sub_100042B88((uint64_t)&v16);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
}

void sub_100042A98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042AB4()
{
  char *v0;
  __int128 v1;
  uint64_t v2;
  _BYTE v4[48];
  char v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4[0] = 0;
  *(_OWORD *)&v4[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v4[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v4[36] = &_mh_execute_header;
  *(_DWORD *)&v4[44] = 0;
  v7 = 0;
  v8 = 0;
  __p = 0;
  v0 = (char *)sub_1000687EC();
  v1 = *((_OWORD *)v0 + 26);
  *(_OWORD *)v4 = *((_OWORD *)v0 + 25);
  *(_OWORD *)&v4[16] = v1;
  *(_OWORD *)&v4[32] = *((_OWORD *)v0 + 27);
  v5 = v0[448];
  if (v0 + 400 == v4)
    return *(unsigned int *)&v4[4];
  sub_100017854(&__p, *((uint64_t **)v0 + 57), *((uint64_t **)v0 + 58), (uint64_t)(*((_QWORD *)v0 + 58) - *((_QWORD *)v0 + 57)) >> 3);
  v2 = *(unsigned int *)&v4[4];
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_100042B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100042B88(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v29 = 0;
    v30 = 2082;
    v31 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#brm,submitMetrics\"}", buf, 0x12u);
  }
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10004312C;
  v27[3] = &unk_1000F1ED8;
  v27[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.safetyAlerts.onBleAlertSentOrReceived"), v27);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = a1 + 40;
    v4 = v6;
    v7 = *(unsigned __int8 *)(v5 - 32);
    if (*(_BYTE *)(v5 + 97))
      v8 = *(_BYTE *)(v5 + 96);
    else
      v8 = 0;
    v9 = v8;
    v10 = *(_DWORD *)(v5 - 28);
    v11 = *(_DWORD *)(v5 - 24);
    v12 = *(_DWORD *)(v5 - 20);
    v13 = *(_DWORD *)(v5 + 144);
    if (*(_BYTE *)(v5 + 104))
      v14 = *(_DWORD *)(v5 + 100);
    else
      v14 = -1;
    if (*(_BYTE *)(v5 + 112))
      v15 = *(_DWORD *)(v5 + 108);
    else
      v15 = 0;
    if (*(_BYTE *)(v5 + 120))
      v16 = *(_DWORD *)(v5 + 116);
    else
      v16 = 0;
    if (*(_BYTE *)(v5 + 136))
      v17 = *(_QWORD *)(v5 + 128);
    else
      v17 = 0;
    v19 = *(_QWORD *)(v5 - 16);
    v18 = *(_QWORD *)(v5 - 8);
    if (*(char *)(v5 + 23) >= 0)
      v4 = v5;
    if (*(char *)(v5 + 47) >= 0)
      v20 = v5 + 24;
    else
      v20 = *(_QWORD *)(v5 + 24);
    if (*(char *)(v5 + 71) >= 0)
      v21 = v5 + 48;
    else
      v21 = *(_QWORD *)(v5 + 48);
    v22 = *(char *)(v5 + 95);
    v25 = *(_QWORD *)(v5 + 72);
    v24 = v5 + 72;
    v23 = v25;
    if (v22 >= 0)
      v26 = v24;
    else
      v26 = v23;
    *(_DWORD *)buf = 68293123;
    v29 = 0;
    v30 = 2082;
    v31 = "";
    v32 = 1025;
    v33 = v7;
    v34 = 1025;
    v35 = v9;
    v36 = 1025;
    v37 = v10;
    v38 = 1025;
    v39 = v11;
    v40 = 1025;
    v41 = v12;
    v42 = 1025;
    v43 = v13;
    v44 = 1025;
    v45 = v14;
    v46 = 1025;
    v47 = v15;
    v48 = 1025;
    v49 = v16;
    v50 = 2049;
    v51 = v17;
    v52 = 2049;
    v53 = v18;
    v54 = 2049;
    v55 = v19;
    v56 = 2081;
    v57 = v4;
    v58 = 2081;
    v59 = v20;
    v60 = 2081;
    v61 = v21;
    v62 = 2081;
    v63 = v26;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"brm,submitMetrics\", \"isBleAdvertiser\":%{private}hhd, \"wasSAReceived\":%{private}hhd, \"batteryChargeLevel\":%{private}d, \"bleRelayFanOutSetting\":%{private}d, \"meanNumNearbyDevices\":%{private}d, \"bleRelayAdvertiseDuration\":%{private}d, \"alertIndex\":%{private}d, \"bleReceivedRSSI\":%{private}d, \"bleReceivedRSSIBucketed\":%{private}d, \"bleLatencyRelativeToSATime\":\"%{private}0.2f\", \"latencyRelativeToBleAdvertiseTime\":\"%{private}0.2f\", \"latencyRelativeToOriginatorTime\":\"%{private}0.2f\", \"alertUID\":%{private, location:escape_only}s, \"deviceRole\":%{private, location:escape_only}s, \"pushInterface\":%{private, location:escape_only}s, \"source\":%{private, location:escape_only}s}", buf, 0x8Eu);
  }
}

uint64_t sub_100042E24(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_100042E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  time_t v8;
  __int128 *v9;
  float v10;
  char *v11;
  char *v12;
  int v13;
  _DWORD v14[2];
  __int16 v15;
  _BYTE v16[10];
  int v17;
  double v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  void *v22[2];
  void *__p[2];
  __int128 v24;
  __int16 v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  int v34;

  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68289026;
    v14[1] = 0;
    v15 = 2082;
    *(_QWORD *)v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#brm,onBleAlertSent\"}", (uint8_t *)v14, 0x12u);
  }
  v8 = time(0);
  LOBYTE(v26) = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 0;
  LOBYTE(v15) = *(_BYTE *)(a4 + 1);
  v9 = sub_100003038();
  v10 = *(float *)(a4 + 8);
  *(_DWORD *)&v16[2] = (int)*((double *)v9 + 16);
  *(_DWORD *)&v16[6] = (int)v10;
  v17 = *(_DWORD *)(a4 + 4);
  std::string::operator=((std::string *)v19, (const std::string *)(a2 + 8));
  if (SHIBYTE(v21) < 0)
  {
    *(_QWORD *)&v21 = 10;
    v11 = (char *)v20[1];
  }
  else
  {
    v11 = (char *)&v20[1];
    HIBYTE(v21) = 10;
  }
  strcpy(v11, "Advertiser");
  if (SHIBYTE(v24) < 0)
  {
    *(_QWORD *)&v24 = 4;
    v12 = (char *)__p[1];
  }
  else
  {
    v12 = (char *)&__p[1];
    HIBYTE(v24) = 4;
  }
  strcpy(v12, "APNS");
  v13 = *(_DWORD *)(a2 + 344);
  if (!v27)
    v27 = 1;
  v26 = v13;
  v18 = ((double)(uint64_t)((double)(uint64_t)(double)v8 + -978307200.0) - *(double *)(a2 + 216)) * 1000.0;
  v25 = 257;
  v34 = sub_100042AB4();
  sub_10004830C((uint64_t *)(a3 + 64), (uint64_t *)v22);
  sub_100042B88((uint64_t)v14);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
}

void sub_100043110(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

NSMutableDictionary *sub_10004312C(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v2 = objc_opt_new(NSMutableDictionary);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("isBleAdvertiser"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v4, CFSTR("batteryChargeLevel"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("bleRelayFanOutSetting"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("meanNumNearbyDevices"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 32)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, CFSTR("latencyRelativeToBleAdvertiseTime"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 24)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("latencyRelativeToOriginatorTime"));

  v9 = *(_QWORD *)(a1 + 32);
  v10 = (_QWORD *)(v9 + 40);
  if (*(char *)(v9 + 63) < 0)
    v10 = (_QWORD *)*v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v11, CFSTR("alertUID"));

  v12 = *(_QWORD *)(a1 + 32);
  v13 = (_QWORD *)(v12 + 64);
  if (*(char *)(v12 + 87) < 0)
    v13 = (_QWORD *)*v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v14, CFSTR("deviceRole"));

  v15 = *(_QWORD *)(a1 + 32);
  v16 = (_QWORD *)(v15 + 88);
  if (*(char *)(v15 + 111) < 0)
    v16 = (_QWORD *)*v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v17, CFSTR("pushInterface"));

  v18 = *(_QWORD *)(a1 + 32);
  v19 = (_QWORD *)(v18 + 112);
  if (*(char *)(v18 + 135) < 0)
    v19 = (_QWORD *)*v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v20, CFSTR("source"));

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 184)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v21, CFSTR("bleRelayAdvertiseDuration"));

  v22 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v22 + 137))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v22 + 136)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v23, CFSTR("wasSAReceived"));

    v22 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v22 + 144))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v22 + 140)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v24, CFSTR("alertIndex"));

    v22 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v22 + 152))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v22 + 148)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v25, CFSTR("bleReceivedRSSI"));

    v22 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v22 + 160))
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v22 + 156)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v26, CFSTR("bleReceivedRSSIBucketed"));

    v22 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v22 + 176))
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v22 + 168)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v27, CFSTR("bleLatencyRelativeToSATime"));

  }
  return v2;
}

void sub_1000434CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100043524(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  id v8;

  v7 = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1000F2E98;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = v7;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 136), "None");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  sub_10000E8A0((_QWORD *)(a1 + 208), "NotAvailable");
  sub_10000E8A0((_QWORD *)(a1 + 232), "Unknown");
  sub_10000E8A0((_QWORD *)(a1 + 256), "Unknown");
  sub_10000E8A0((_QWORD *)(a1 + 280), "Unknown");
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = -1;
  *(_QWORD *)(a1 + 357) = 0x1000000000000;
  *(_BYTE *)(a1 + 365) = 1;
  *(_QWORD *)(a1 + 366) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 456) = (unint64_t)a4;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  operator new();
}

void sub_1000437F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  id **v12;
  uint64_t *v13;
  void **v14;
  void *v15;
  void **v16;
  uint64_t v17;

  v15 = *(void **)(v10 + 464);
  if (v15)
  {
    *(_QWORD *)(v10 + 472) = v15;
    operator delete(v15);
  }
  sub_10004B95C(a10);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v14);
  v16 = *(void ***)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  if (v16)
    sub_10004C4C8(v16);
  sub_1000220F4(v12, 0);
  v17 = *v13;
  *v13 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);

  _Unwind_Resume(a1);
}

uint64_t sub_100043948(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  *(_QWORD *)a1 = off_1000F2E98;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,released\"}", (uint8_t *)v7, 0x12u);
  }
  v3 = *(void **)(a1 + 464);
  if (v3)
  {
    *(_QWORD *)(a1 + 472) = v3;
    operator delete(v3);
  }
  sub_10004B95C(a1 + 88);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v4 = *(void ***)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    sub_10004C4C8(v4);
  sub_1000220F4((id **)(a1 + 40), 0);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  return a1;
}

void sub_100043A80(uint64_t a1)
{
  sub_100043948(a1);
  operator delete();
}

void sub_100043AA4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  unint64_t v8;

  v2 = (unint64_t)*(double *)(a2 + 8);
  *(_QWORD *)(a1 + 456) = v2;
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2050;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,updateMaConfig\", \"fRollingPeriodSeconds\":%{public}llu}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_100043B6C(uint64_t a1, uint64_t a2)
{
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  void **v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  std::string __p;
  _QWORD v40[5];
  std::string v41;
  _BYTE v42[24];
  _BYTE *v43;
  _QWORD v44[3];
  _QWORD *v45;
  std::string v46;
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD block[4];
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD v52[4];
  _BYTE __dst[24];
  _BYTE buf[24];

  if (*(_QWORD *)(a2 + 24))
  {
    v4 = (char *)sub_10003D044();
    if (v4[215] < 0)
    {
      sub_100004870(buf, *((void **)v4 + 24), *((_QWORD *)v4 + 25));
    }
    else
    {
      *(_OWORD *)buf = *((_OWORD *)v4 + 12);
      *(_QWORD *)&buf[16] = *((_QWORD *)v4 + 26);
    }
    v6 = buf[23];
    LOBYTE(v7) = buf[23];
    v8 = *(_QWORD *)&buf[8];
    if (buf[23] >= 0)
      v9 = buf[23];
    else
      v9 = *(_QWORD *)&buf[8];
    if (!v9)
    {
      v10 = (char *)sub_1000687EC();
      if (v10[47] < 0)
      {
        sub_100004870(__dst, *((void **)v10 + 3), *((_QWORD *)v10 + 4));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v10 + 24);
        *(_QWORD *)&__dst[16] = *((_QWORD *)v10 + 5);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_QWORD *)&buf[16] = *(_QWORD *)&__dst[16];
      *(_OWORD *)buf = *(_OWORD *)__dst;
      v6 = HIBYTE(*(_QWORD *)&__dst[16]);
      v8 = *(_QWORD *)&__dst[8];
      v7 = HIBYTE(*(_QWORD *)&__dst[16]);
    }
    if ((v7 & 0x80u) != 0)
      v6 = v8;
    if (v6)
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 && *(_BYTE *)(v11 + 32))
      {
        v12 = (char *)sub_1000687EC();
        if (v12[95] < 0)
        {
          sub_100004870(__dst, *((void **)v12 + 9), *((_QWORD *)v12 + 10));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v12 + 72);
          *(_QWORD *)&__dst[16] = *((_QWORD *)v12 + 11);
        }
        v20 = (void **)(a1 + 64);
        if (*(char *)(a1 + 87) < 0)
          operator delete(*v20);
        *(_OWORD *)v20 = *(_OWORD *)__dst;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)&__dst[16];
        if (*(char *)(a1 + 87) < 0)
        {
          if (*(_QWORD *)(a1 + 72))
          {
LABEL_43:
            SACommonUtils::getHashForString((char *)(a1 + 64), (uint64_t *)&__p);
            if (buf[23] >= 0)
              v21 = buf;
            else
              v21 = *(const std::string::value_type **)buf;
            if (buf[23] >= 0)
              v22 = buf[23];
            else
              v22 = *(_QWORD *)&buf[8];
            v23 = std::string::insert(&__p, 0, v21, v22);
            v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            *(_QWORD *)&__dst[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
            *(_OWORD *)__dst = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_10000E8A0(&v46, "/var/mobile/Library/com.apple.safetyalerts/");
            v25 = *(char *)(a1 + 87);
            if (v25 >= 0)
              v26 = (const std::string::value_type *)(a1 + 64);
            else
              v26 = *(const std::string::value_type **)(a1 + 64);
            if (v25 >= 0)
              v27 = *(unsigned __int8 *)(a1 + 87);
            else
              v27 = *(_QWORD *)(a1 + 72);
            v28 = std::string::append(&v46, v26, v27);
            v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v46.__r_.__value_.__l.__data_);
            v30 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              v46.__r_.__value_.__r.__words[0] = 68289026;
              LOWORD(v46.__r_.__value_.__r.__words[1]) = 2082;
              *(std::string::size_type *)((char *)&v46.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,downloadManifest,downloadingManifest\"}", (uint8_t *)&v46, 0x12u);
            }
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *((double *)sub_10003D044() + 36);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3321888768;
            v40[2] = sub_1000447CC;
            v40[3] = &unk_1000F2EE8;
            v40[4] = a1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              sub_100004870(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v41 = __p;
            v35 = v42;
            sub_100004F4C((uint64_t)v42, a2);
            v45 = 0;
            v44[0] = off_1000F1E38;
            v44[1] = objc_retainBlock(v40);
            v45 = v44;
            sub_1000624A4(v31, (uint64_t *)__dst, (uint64_t)&__p, 3, (uint64_t)v44, v32);
            v36 = v45;
            if (v45 == v44)
            {
              v37 = 4;
              v36 = v44;
            }
            else
            {
              if (!v45)
                goto LABEL_73;
              v37 = 5;
            }
            (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_73:
            if (v43 == v42)
            {
              v38 = 4;
            }
            else
            {
              if (!v43)
              {
LABEL_78:
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v41.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                goto LABEL_35;
              }
              v38 = 5;
              v35 = v43;
            }
            (*(void (**)(_QWORD *))(*v35 + 8 * v38))(v35);
            goto LABEL_78;
          }
        }
        else if (*(_BYTE *)(a1 + 87))
        {
          goto LABEL_43;
        }
        v33 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__dst = 68289026;
          *(_WORD *)&__dst[8] = 2082;
          *(_QWORD *)&__dst[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,downloadManifest,empty manifest file name\"}", __dst, 0x12u);
        }
        v34 = *(NSObject **)(a1 + 24);
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 3321888768;
        v47[2] = sub_100044668;
        v47[3] = &unk_1000F2EB8;
        v15 = v48;
        sub_100004F4C((uint64_t)v48, a2);
        dispatch_async(v34, v47);
        v16 = (_QWORD *)v48[3];
      }
      else
      {
        v13 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__dst = 68289026;
          *(_WORD *)&__dst[8] = 2082;
          *(_QWORD *)&__dst[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,downloadManifest,downloaderNotReady\"}", __dst, 0x12u);
        }
        v14 = *(NSObject **)(a1 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_100044504;
        block[3] = &unk_1000F2EB8;
        v15 = v50;
        sub_100004F4C((uint64_t)v50, a2);
        dispatch_async(v14, block);
        v16 = (_QWORD *)v50[3];
      }
    }
    else
    {
      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)__dst = 68289026;
        *(_WORD *)&__dst[8] = 2082;
        *(_QWORD *)&__dst[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,downloadManifest,pullCnameUnavailable\"}", __dst, 0x12u);
      }
      v18 = *(NSObject **)(a1 + 24);
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3321888768;
      v51[2] = sub_100044360;
      v51[3] = &unk_1000F2EB8;
      v15 = v52;
      sub_100004F4C((uint64_t)v52, a2);
      dispatch_async(v18, v51);
      v16 = (_QWORD *)v52[3];
    }
    if (v16 == v15)
    {
      v19 = 4;
      v16 = v15;
    }
    else
    {
      if (!v16)
        goto LABEL_35;
      v19 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v19))();
LABEL_35:
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    return;
  }
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,downloadManifest,invalidCallback\"}", buf, 0x12u);
  }
}

void sub_100044258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,char a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _QWORD *v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a34;
  if (a34 == &a31)
  {
    v44 = 4;
    v43 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_6:
  if (a30 == v40)
  {
    v45 = 4;
  }
  else
  {
    if (!a30)
      goto LABEL_11;
    v45 = 5;
    v40 = a30;
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v45))(v40);
LABEL_11:
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (*(char *)(v41 - 73) < 0)
    operator delete(*(void **)(v41 - 96));
  _Unwind_Resume(exception_object);
}

void sub_100044360(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10004448C;
  v5[3] = &unk_1000F2EB8;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_10004448C((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100044448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004448C(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t sub_1000444C4(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 32, a2 + 32);
}

_QWORD *sub_1000444D0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100044504(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100044630;
  v5[3] = &unk_1000F2EB8;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100044630((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000445EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100044630(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

void sub_100044668(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[24];
  _BYTE *v7;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100044794;
  v5[3] = &unk_1000F2EB8;
  v3 = v6;
  sub_100004F4C((uint64_t)v6, a1 + 32);
  sub_100044794((uint64_t)v5);
  if (v7 == v6)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
    v3 = v7;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100044750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100044794(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

void sub_1000447CC(uint64_t a1, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  std::string *v43;
  std::string *v44;
  std::error_code *v45;
  const std::__fs::filesystem::path *v46;
  int v47;
  void *v48;
  const std::__fs::filesystem::path *v49;
  std::error_code *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  const __CFString *v55;
  void *v56;
  _BYTE buf[50];
  _QWORD *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  uint8_t v65[8];
  __int16 v66;
  const char *v67;
  char v68;

  v2 = a2;
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 32);
  v55 = CFSTR("status");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 ^ 1u));
  v56 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));

  v7 = sub_10004D658();
  sub_10004E620((uint64_t)v7, 1, v6);
  if ((v2 & 1) == 0)
  {
    v11 = SALogObjectGeneral;
    goto LABEL_57;
  }
  v8 = (uint64_t *)(v3 + 40);
  v9 = *(char *)(v3 + 63);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v3 + 48))
    {
      v10 = *v8;
      goto LABEL_8;
    }
LABEL_12:
    v14 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *v8;
      if (v9 >= 0)
        v15 = v3 + 40;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,loadManifest,invalidPath\", \"manifest\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_34;
  }
  if (!*(_BYTE *)(v3 + 63))
    goto LABEL_12;
  v10 = v3 + 40;
LABEL_8:
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v10, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v12));
    if (v13)
    {
      if (objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v13, 0, 0)))
      {
        operator new();
      }
      v20 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(v3 + 63) >= 0)
          v21 = v3 + 40;
        else
          v21 = *(_QWORD *)(v3 + 40);
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,loadManifest,parseFailed\", \"manifest\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }

    }
    else
    {
      v18 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(v3 + 63) >= 0)
          v19 = v3 + 40;
        else
          v19 = *(_QWORD *)(v3 + 40);
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,loadManifest,readFailed\", \"manifest\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
    }

  }
  else
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 63) >= 0)
        v17 = v3 + 40;
      else
        v17 = *(_QWORD *)(v3 + 40);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,loadManifest,pathNotDerived\", \"manifest\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }

LABEL_34:
  v22 = *(_QWORD *)(v4 + 48);
  v11 = SALogObjectGeneral;
  if (v22)
  {
    v53 = v3;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(unsigned __int8 *)(v22 + 48);
      v24 = *(_QWORD *)(v22 + 32);
      v25 = *(_QWORD *)(v22 + 40);
      v26 = (*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3;
      *(_DWORD *)buf = 68290051;
      *(_WORD *)&buf[8] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v23;
      *(_WORD *)&buf[24] = 2049;
      *(_QWORD *)&buf[26] = v24;
      *(_WORD *)&buf[34] = 2049;
      *(_QWORD *)&buf[36] = v25;
      *(_WORD *)&buf[44] = 1025;
      *(_DWORD *)&buf[46] = v26;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#manifest\", \"isValid\":%{private}hhd, \"start\":\"%{private}0.1f\", \"end\":\"%{private}0.1f\", \"nEntries\":%{private}d}", buf, 0x32u);
      v11 = SALogObjectGeneral;
    }
    v27 = *(uint64_t **)v22;
    v54 = *(uint64_t **)(v22 + 8);
    if (*(uint64_t **)v22 != v54)
    {
      do
      {
        v28 = *v27;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v29 = (_QWORD *)(v28 + 48);
          if (*(char *)(v28 + 71) < 0)
            v29 = (_QWORD *)*v29;
          v30 = *(_QWORD *)(v28 + 8);
          v31 = *(_QWORD *)(v28 + 32);
          v32 = *(_QWORD *)(v28 + 40);
          v33 = *(unsigned __int8 *)(v28 + 145);
          v34 = *(unsigned __int8 *)(v28 + 144);
          v35 = *(unsigned __int8 *)(v28 + 146);
          *(_DWORD *)buf = 68290819;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2049;
          *(_QWORD *)&buf[20] = v30;
          *(_WORD *)&buf[28] = 2049;
          *(_QWORD *)&buf[30] = v31;
          *(_WORD *)&buf[38] = 2049;
          *(_QWORD *)&buf[40] = v32;
          *(_WORD *)&buf[48] = 2081;
          v58 = v29;
          v59 = 1025;
          v60 = v33;
          v61 = 1025;
          v62 = v34;
          v63 = 1025;
          v64 = v35;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#manifestEntry\", \"serverTime\":\"%{private}0.1f\", \"effective\":\"%{private}0.1f\", \"expires\":\"%{private}0.1f\", \"uid\":%{private, location:escape_only}s, \"isSaSent\":%{private}hhd, \"isIgneousSent\":%{private}hhd, \"fIsValid\":%{private}hhd}", buf, 0x4Cu);
          v11 = SALogObjectGeneral;
        }
        v36 = *(_QWORD **)(v28 + 120);
        v37 = (_QWORD *)(v28 + 128);
        if (v36 != v37)
        {
          do
          {
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              v38 = v36 + 4;
              if (*((char *)v36 + 55) < 0)
                v38 = (_QWORD *)*v38;
              v39 = v36 + 7;
              if (*((char *)v36 + 79) < 0)
                v39 = (_QWORD *)*v39;
              *(_DWORD *)buf = 68289539;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2081;
              *(_QWORD *)&buf[20] = v38;
              *(_WORD *)&buf[28] = 2081;
              *(_QWORD *)&buf[30] = v39;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#manifestEntry,weaList\", \"weaHashType\":%{private, location:escape_only}s, \"weaHash\":%{private, location:escape_only}s}", buf, 0x26u);
              v11 = SALogObjectGeneral;
            }
            v40 = (_QWORD *)v36[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v36[2];
                v42 = *v41 == (_QWORD)v36;
                v36 = v41;
              }
              while (!v42);
            }
            v36 = v41;
          }
          while (v41 != v37);
        }
        ++v27;
      }
      while (v27 != v54);
    }
    v3 = v53;
  }
LABEL_57:
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,manifest downloaded\"}", buf, 0x12u);
    v11 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,eraseManifests\"}", buf, 0x12u);
  }
  v43 = (std::string *)sub_10000E8A0(v65, "/var/mobile/Library/com.apple.safetyalerts/");
  v44 = std::string::append(v43, "efficacy_manifest.txt", 0x15uLL);
  *(std::string *)buf = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (v68 < 0)
    operator delete(*(void **)v65);
  v46 = (const std::__fs::filesystem::path *)(v3 + 40);
  v47 = buf[23];
  v48 = *(void **)buf;
  if (buf[23] >= 0)
    v49 = (const std::__fs::filesystem::path *)buf;
  else
    v49 = *(const std::__fs::filesystem::path **)buf;
  remove(v49, v45);
  if (*(char *)(v3 + 63) < 0)
  {
    if (!*(_QWORD *)(v3 + 48))
      goto LABEL_72;
    v46 = (const std::__fs::filesystem::path *)v46->__pn_.__r_.__value_.__r.__words[0];
LABEL_71:
    remove(v46, v50);
    goto LABEL_74;
  }
  if (*(_BYTE *)(v3 + 63))
    goto LABEL_71;
LABEL_72:
  v51 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v65 = 68289026;
    v66 = 2082;
    v67 = "";
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,eraseManifests,empty file name\"}", v65, 0x12u);
  }
LABEL_74:
  if (v47 < 0)
    operator delete(v48);
  buf[0] = 0;
  v52 = *(_QWORD *)(v3 + 88);
  if (!v52)
    sub_100004FB0();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v52 + 48))(v52, buf);

}

void sub_10004509C()
{
  operator delete();
}

uint64_t sub_10004511C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  return sub_100004F4C(a1 + 64, a2 + 64);
}

void sub_100045180(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_10004519C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_100045200(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double v12;
  __CFCalendar *v13;
  void *v14;
  uint64_t v15;
  double v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *i;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id obj;
  id v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[8];
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  id v49;

  v3 = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 32) = _Q0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  v36 = v3;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("manifest")));
  if (v34 && (v9 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v34, v9) & 1) != 0))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKey:", CFSTR("start")));
    if (v10 && (v11 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
    {
      v33 = v10;
      objc_msgSend(v10, "doubleValue");
      *(double *)(a1 + 32) = v12 + -978307200.0;
      v13 = CFCalendarCopyCurrent();
      CFCalendarDecomposeAbsoluteTime(v13, *(CFAbsoluteTime *)(a1 + 32), "M", a1 + 24);
      if (v13)
        CFRelease(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKey:", CFSTR("end")));
      if (v14 && (v15 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v14, v15) & 1) != 0))
      {
        v32 = v14;
        objc_msgSend(v14, "doubleValue");
        *(double *)(a1 + 40) = v16 + -978307200.0;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKey:", CFSTR("messages")));
        if (v17 && (v18 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v17, v18) & 1) != 0))
        {
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v19 = v17;
          obj = v19;
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
          if (v20)
          {
            v37 = *(_QWORD *)v39;
            do
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v39 != v37)
                  objc_enumerationMutation(obj);
                v22 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
                if (v22)
                {
                  v23 = objc_opt_class(NSDictionary);
                  if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
                  {
                    v22;
                    operator new();
                  }
                }
                v24 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 68289539;
                  *(_DWORD *)&buf[4] = 0;
                  v44 = 2082;
                  v45 = "";
                  v46 = 2081;
                  v47 = "message";
                  v48 = 2113;
                  v49 = v36;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
                }
              }
              v19 = obj;
              v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
            }
            while (v20);
          }

          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            v31 = SALogObjectGeneral;
            v25 = obj;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289539;
              *(_DWORD *)&buf[4] = 0;
              v44 = 2082;
              v45 = "";
              v46 = 2081;
              v47 = "msgsCount";
              v48 = 2113;
              v49 = v36;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
            }
          }
          else
          {
            *(_BYTE *)(a1 + 48) = 1;
            v25 = obj;
            sub_100047134((_QWORD *)a1);
          }
        }
        else
        {

          v29 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            v44 = 2082;
            v45 = "";
            v46 = 2081;
            v47 = "msgs";
            v48 = 2113;
            v49 = v36;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
          }
          v25 = 0;
        }

      }
      else
      {

        v28 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          v44 = 2082;
          v45 = "";
          v46 = 2081;
          v47 = "end";
          v48 = 2113;
          v49 = v36;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
        }
      }

    }
    else
    {

      v27 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        v44 = 2082;
        v45 = "";
        v46 = 2081;
        v47 = "start";
        v48 = 2113;
        v49 = v36;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }

  }
  else
  {

    v26 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v44 = 2082;
      v45 = "";
      v46 = 2081;
      v47 = "manifest";
      v48 = 2113;
      v49 = v36;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,parseFailed\", \"field\":%{private, location:escape_only}s, \"manifestDictionary\":%{private, location:escape_only}@}", buf, 0x26u);
    }
  }

  return a1;
}

void sub_100046CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,void **a36)
{
  void *v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void *v40;
  void *v41;
  void *v42;

  sub_10004BDF0(*(_QWORD **)(v38 + 128));
  if (*(char *)(v38 + 119) < 0)
    operator delete(*v37);
  if (*(char *)(v38 + 95) < 0)
    operator delete(*a36);
  if (*(char *)(v38 + 71) < 0)
    operator delete(*v39);
  sub_10004C36C((id **)v38, 0);

  operator delete();
}

void sub_100047134(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  void **v6;
  _BYTE *v7;
  int v8;
  _QWORD *v9;
  _BYTE *v10;
  BOOL v11;
  void *__p[2];
  uint64_t v13;
  void **v14;
  uint8_t buf[8];
  _BYTE v16[10];
  __int16 v17;
  void **v18;

  v1 = (uint64_t *)*a1;
  v2 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v2)
  {
    v3 = a1 + 7;
    do
    {
      v4 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *v1;
        if (*(char *)(*v1 + 71) < 0)
        {
          sub_100004870(__p, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
          v13 = *(_QWORD *)(v5 + 64);
        }
        v6 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v16 = 2082;
        *(_QWORD *)&v16[2] = "";
        v17 = 2081;
        v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,updateHashToCount\", \"uid\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }

      sub_10004BA8C((uint64_t)buf, (_QWORD *)(*v1 + 120));
      v7 = *(_BYTE **)buf;
      if (*(_BYTE **)buf != v16)
      {
        do
        {
          if ((char)v7[79] < 0)
          {
            sub_100004870(__p, *((void **)v7 + 7), *((_QWORD *)v7 + 8));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)(v7 + 56);
            v13 = *((_QWORD *)v7 + 9);
          }
          if (sub_10004C514(v3, (unsigned __int8 *)__p))
          {
            v14 = __p;
            v8 = *((_DWORD *)sub_10004C6AC(v3, (unsigned __int8 *)__p, (__int128 **)&v14) + 10);
            v14 = __p;
            *((_DWORD *)sub_10004C6AC(v3, (unsigned __int8 *)__p, (__int128 **)&v14) + 10) = v8 + 1;
          }
          else
          {
            v14 = __p;
            *((_DWORD *)sub_10004C6AC(v3, (unsigned __int8 *)__p, (__int128 **)&v14) + 10) = 1;
          }
          if (SHIBYTE(v13) < 0)
            operator delete(__p[0]);
          v9 = (_QWORD *)*((_QWORD *)v7 + 1);
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_BYTE *)*((_QWORD *)v7 + 2);
              v11 = *(_QWORD *)v10 == (_QWORD)v7;
              v7 = v10;
            }
            while (!v11);
          }
          v7 = v10;
        }
        while (v10 != v16);
      }
      sub_10004BDF0(*(_QWORD **)v16);
      ++v1;
    }
    while (v1 != v2);
  }
}

void sub_100047394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t sub_1000473D4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100047414()
{
  operator new();
}

void sub_100047464()
{
  operator delete();
}

void sub_100047488(uint64_t a1, uint64_t a2)
{
  time_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[4];
  _BYTE v16[24];
  _BYTE *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t buf;
  __int16 v21;
  const char *v22;

  if (!*(_QWORD *)(a2 + 24))
  {
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v21 = 2082;
      v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,#warning,prepare,invalidCallback\"}", (uint8_t *)&buf, 0x12u);
    }
    return;
  }
  *(_BYTE *)(a1 + 16) = 1;
  if (!*(_QWORD *)(a1 + 32))
    return;
  v4 = time(0);
  v5 = *(_QWORD *)(a1 + 456);
  v6 = *(_QWORD *)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_1000476EC;
  v15[3] = &unk_1000F2EB8;
  v7 = v16;
  sub_100004F4C((uint64_t)v16, a2);
  v18[0] = off_1000F0E88;
  v18[1] = objc_retainBlock(v15);
  v19 = v18;
  (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v6 + 16))(v6, v18, (double)((uint64_t)(double)v4 % v5 + v5));
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
    goto LABEL_9;
  }
  if (v19)
  {
    v12 = 5;
LABEL_9:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + 8 * v12))(v11, v8, v9, v10);
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return;
    v14 = 5;
    v7 = v17;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v14))(v7);
}

void sub_100047678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  _QWORD *v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a20;
  if (a20 == &a17)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a16 == v20)
  {
    v24 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v24 = 5;
    v20 = a16;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v24))(v20);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000476EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,biomeDone\"}", (uint8_t *)v5, 0x12u);
  }
  LOBYTE(v5[0]) = 1;
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v3 + 48))(v3, v5);
}

void sub_1000477C4(uint64_t a1, double a2, double a3)
{
  CFAbsoluteTime Current;
  NSObject *v7;
  __n128 v8;
  __n128 v9;
  _BOOL4 v10;
  BOOL v11;
  NSObject *v12;
  _BOOL4 v13;
  id ****v14;
  id ***v15;
  id ***v16;
  id **v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  CFAbsoluteTime v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  _BOOL4 v40;

  Current = CFAbsoluteTimeGetCurrent();
  v7 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8.n128_f64[0] = a2;
    v9.n128_f64[0] = a3;
    v10 = sub_100047C4C(*(_QWORD *)(a1 + 32), v8, v9);
    *(_DWORD *)buf = 68290307;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 2049;
    v32 = Current;
    v33 = 2049;
    v34 = a2;
    v35 = 2049;
    v36 = a3;
    v37 = 1025;
    v38 = v10;
    v39 = 1025;
    v40 = sub_100047DBC(a1, a2, a3);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,run\", \"now\":\"%{private}0.1f\", \"startTsSeconds\":\"%{private}0.1f\", \"endTsSeconds\":\"%{private}0.1f\", \"isWeaCapable\":%{private}hhd, \"isSaCapable\":%{private}hhd}", buf, 0x3Cu);
  }

  if (!*(_QWORD *)(a1 + 48))
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    *(_DWORD *)buf = 68289026;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v26 = "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetric,empty manifest\"}";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v26, buf, 0x12u);
    goto LABEL_34;
  }
  v11 = sub_100054770(*(_QWORD *)(a1 + 56), (double)*(unint64_t *)(a1 + 456));
  v12 = SALogObjectGeneral;
  v13 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (!v11)
  {
    if (!v13)
      goto LABEL_34;
    *(_DWORD *)buf = 68289026;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v26 = "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetric,too soon to collect\"}";
    goto LABEL_33;
  }
  if (v13)
  {
    *(_DWORD *)buf = 68289026;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric\"}", buf, 0x12u);
  }
  v14 = *(id *****)(a1 + 48);
  v15 = *v14;
  v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      v17 = *v15;
      if (*v15)
      {
        if (*((_BYTE *)v17 + 146))
        {
          v18 = *((double *)v17 + 4);
          if (v18 <= a3)
          {
            if (v18 >= a2)
            {
              if (*((double *)v17 + 5) >= a2)
              {
                if (*((_BYTE *)v17 + 144))
                  sub_1000484BC(a1, v15, 1, a2);
                else
                  sub_1000484BC(a1, v15, 0, a2);
                goto LABEL_24;
              }
              v25 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289026;
                v28 = 0;
                v29 = 2082;
                v30 = "";
                v20 = v25;
                v21 = "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric,skipOldMessage\"}";
                goto LABEL_23;
              }
            }
            else
            {
              v24 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289026;
                v28 = 0;
                v29 = 2082;
                v30 = "";
                v20 = v24;
                v21 = "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric,skipGeneratedBeforeRollingPeriod\"}";
                goto LABEL_23;
              }
            }
          }
          else
          {
            v19 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289026;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v20 = v19;
              v21 = "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric,skipFutureMessage\"}";
LABEL_23:
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 0x12u);
            }
          }
        }
        else
        {
          v23 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v28 = 0;
            v29 = 2082;
            v30 = "";
            v20 = v23;
            v21 = "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric,not valid\"}";
            goto LABEL_23;
          }
        }
      }
      else
      {
        v22 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v28 = 0;
          v29 = 2082;
          v30 = "";
          v20 = v22;
          v21 = "{\"msg%{public}.0s\":\"#eff,collectingEfficacyMetric,skipNullEntry\"}";
          goto LABEL_23;
        }
      }
LABEL_24:
      ++v15;
    }
    while (v15 != v16);
  }
LABEL_34:
  *(_BYTE *)(a1 + 16) = 0;
}

void sub_100047C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100047C4C(uint64_t a1, __n128 a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  void **v20;

  v3 = a3.n128_u64[0];
  v4 = a2.n128_u64[0];
  if (a1)
    v5 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  else
    v5 = 3;
  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000E8A0(__p, off_1000F30C0[v5]);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2049;
    v16 = v4;
    v17 = 2049;
    v18 = v3;
    v19 = 2081;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,isWeaCapable,biomeStatus\", \"startSeconds\":\"%{private}0.1f\", \"endSeconds\":\"%{private}0.1f\", \"result\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
  }

  return (v5 - 1) < 2;
}

void sub_100047DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100047DBC(uint64_t a1, double a2, double a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  void **v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  _BOOL4 v17;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  void **v38;

  v6 = sub_100053BB8(*(_QWORD *)(a1 + 56), a2, a3);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v7 + 80))(v7, a2, a3);
    v9 = (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), a2, a3);
  }
  else
  {
    v8 = 3;
    v9 = 3;
  }
  v10 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v23;
    sub_10000E8A0(v23, off_1000F30C0[v6]);
    if (v24 < 0)
      v11 = (void **)v23[0];
    sub_10000E8A0(v21, off_1000F30C0[v8]);
    v12 = v22;
    v13 = (void **)v21[0];
    sub_10000E8A0(__p, off_1000F30C0[v9]);
    v14 = v21;
    if (v12 < 0)
      v14 = v13;
    if (v20 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 68290307;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2049;
    v30 = a2;
    v31 = 2049;
    v32 = a3;
    v33 = 2081;
    v34 = v11;
    v35 = 2081;
    v36 = v14;
    v37 = 2081;
    v38 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,isSaCapable,biomeStatus\", \"startSeconds\":\"%{private}0.1f\", \"endSeconds\":\"%{private}0.1f\", \"subStatus\":%{private, location:escape_only}s, \"nwCellularStatus\":%{private, location:escape_only}s, \"nwWifiStatus\":%{private, location:escape_only}s}", buf, 0x44u);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    if (v24 < 0)
      operator delete(v23[0]);
  }

  v17 = v8 == 1 || v9 == 1;
  return v6 == 1 && v17;
}

void sub_100047FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

char *sub_100048020(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
    v9[0] = 68289283;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2049;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,OnHistoricalLocationReceivedCb\", \"HistoricalLocationCount\":%{private}lu}", (uint8_t *)v9, 0x1Cu);
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = (char *)(a1 + 464);
  if (*(_QWORD *)a2 != v6 && result != (char *)a2)
    return sub_10004BEF8(result, *(char **)a2, v6, (v6 - *(_QWORD *)a2) >> 5);
  return result;
}

uint64_t sub_10004811C(double **a1, void *a2, double a3, double a4)
{
  NSArray *v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t isCircleInGeometryHelper;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v18;

  v8 = a2;
  v18 = 0;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    LOBYTE(isCircleInGeometryHelper) = 0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    while (1)
    {
      v15 = *v9;
      if ((isCircleInGeometryHelper & 1) != 0 || v15 >= a3)
      {
        if (v15 >= a3 && v15 <= a4)
        {
          if (v14 >= -90.0 && v14 <= 90.0 && v13 >= -180.0 && v13 <= 180.0 && v12 > 0.0)
          {
            if ((SAGeometry::isCircleInGeometryHelper((SAGeometry *)&v18, v14, v13, v12, v8, v7) & 1) != 0)
            {
              isCircleInGeometryHelper = 1;
              goto LABEL_28;
            }
            v12 = -1.0;
            v14 = 0.0;
            v13 = 0.0;
          }
          isCircleInGeometryHelper = 1;
          if ((SAGeometry::isCircleInGeometryHelper((SAGeometry *)&v18, v9[1], v9[2], v9[3], v8, v7) & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          LOBYTE(isCircleInGeometryHelper) = 1;
        }
      }
      else
      {
        v14 = v9[1];
        v13 = v9[2];
        v12 = v9[3];
      }
      v9 += 4;
      if (v9 == v10)
        goto LABEL_22;
    }
  }
  v14 = 0.0;
  v13 = 0.0;
  v12 = 0.0;
LABEL_22:
  isCircleInGeometryHelper = 0;
  if (v14 >= -90.0 && v14 <= 90.0)
  {
    isCircleInGeometryHelper = 0;
    if (v13 >= -180.0 && v13 <= 180.0 && v12 > 0.0)
      isCircleInGeometryHelper = SAGeometry::isCircleInGeometryHelper((SAGeometry *)&v18, v14, v13, v12, v8, v7);
  }
LABEL_28:

  return isCircleInGeometryHelper;
}

void sub_1000482F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004830C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v2 = *a1;
  if (!*a1)
  {
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 4;
      a2 = (uint64_t *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 4;
    }
    v4 = 1701736270;
    goto LABEL_18;
  }
  if (v2 == 2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 11;
      a2 = (uint64_t *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 11;
    }
    strcpy((char *)a2, "Inexpensive");
  }
  else
  {
    if (v2 == 1)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (uint64_t *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 4;
      }
      v4 = 1312905047;
LABEL_18:
      *(_DWORD *)a2 = v4;
      *((_BYTE *)a2 + 4) = 0;
      return;
    }
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 4;
      a2 = (uint64_t *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 4;
    }
    strcpy((char *)a2, "None");
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      v7[0] = 68289283;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1025;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"eff, invalid,\", \"incoming interface\":%{private}d}", (uint8_t *)v7, 0x18u);
    }
  }
}

void sub_1000484BC(uint64_t a1, id ***a2, int a3, double a4)
{
  NSObject *v6;
  id *v7;
  id *v8;
  id *v9;
  double v10;
  double v11;
  __n128 v12;
  __n128 v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  void **v21;
  int v22;
  std::string::size_type v23;
  std::string *p_str;
  std::string *v25;
  int v27;
  NSObject *v28;
  const char *v29;
  id v30;
  char v31;
  SACommonUtils *v32;
  double v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  id **v42;
  char *v43;
  std::string::size_type v44;
  int v45;
  std::string::size_type *v46;
  int v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  NSObject *v52;
  std::string::size_type v53;
  void *v54;
  BOOL v55;
  NSMutableArray *v56;
  SAGeometry *v57;
  objc_object *v58;
  SAGeometry *PolygonFromCoordinates;
  void *v60;
  char v61;
  void *v62;
  BOOL v63;
  NSArray *v64;
  SAGeometry *v65;
  double *v66;
  double *v67;
  char isLocationInCircle;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v74;
  std::string *v75;
  uint64_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  void *v82;
  void **v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  double v87;
  NSObject *v89;
  std::string::size_type v90;
  __int128 *v91;
  char *v92;
  std::string *v93;
  std::string *v94;
  int v95;
  std::string *v96;
  uint64_t v97;
  int v98;
  int v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  NSObject *v104;
  std::string *v105;
  void *v106;
  BOOL v107;
  void *v108;
  void *v109;
  BOOL v110;
  void *v111;
  unsigned int v112;
  NSObject *v113;
  id **v114;
  const char *v115;
  const char *v116;
  int v117;
  size_t v118;
  id *v119;
  id **v120;
  id *v121;
  id **v122;
  unint64_t v123;
  char *v124;
  void **v125;
  const char *v126;
  void **v127;
  NSObject *v128;
  _QWORD *v129;
  double v130;
  uint64_t v131;
  double v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  std::string *v137;
  std::string *v138;
  uint64_t *v139;
  int v140;
  char v141;
  char v142;
  double v143;
  char *v144;
  double v145;
  char *v146;
  double v147;
  char *v148;
  double v149;
  char *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  void **v156;
  void **v157;
  NSObject *v158;
  std::string *v159;
  double v160;
  uint64_t v161;
  double v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  std::string *v168;
  id **v169;
  void **v170;
  char v171;
  char *v172;
  double v173;
  char *v174;
  double v175;
  char *v176;
  double v177;
  char v182;
  int v183;
  char v184;
  _BOOL4 v185;
  double v187;
  char *v188;
  BOOL v189;
  char v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  int v194;
  int v195;
  BOOL v196;
  int v197;
  int v198;
  char *__s;
  char v200;
  _BOOL4 v201;
  char v202;
  int v203;
  char v204;
  char v205;
  char v206;
  uint64_t v208;
  unint64_t v209;
  std::string v210;
  std::string v211;
  std::string v212;
  void *__p[2];
  __int128 v214;
  int v215;
  std::string v216;
  std::string v217;
  std::string v218;
  std::string v219;
  double v220;
  __int128 *v221;
  void *__dst[2];
  id *v223;
  _BYTE buf[48];
  __int16 v225;
  std::string *v226;
  __int16 v227;
  std::string *v228;
  std::string v229;
  std::string *v230;
  std::string __str;
  std::string *v232;

  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (*a2)[2];
    v7 = (*a2)[3];
    v9 = (*a2)[1];
    *(_DWORD *)buf = 68290051;
    *(_WORD *)&buf[8] = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v7;
    *(_WORD *)&buf[28] = 2049;
    *(_QWORD *)&buf[30] = v8;
    *(_WORD *)&buf[38] = 2049;
    *(_QWORD *)&buf[40] = v9;
    v225 = 1025;
    LODWORD(v226) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType\", \"originator_timestamp\":\"%{private}.2f\", \"ingress_timestamp\":\"%{private}.2f\", \"server_timestamp\":\"%{private}.2f\", \"isIgneous\":%{private}d}", buf, 0x36u);
  }

  v10 = *((double *)*a2 + 4);
  v11 = *((double *)*a2 + 5);
  v220 = *((double *)*a2 + 1);
  v12.n128_f64[0] = v10;
  v13.n128_f64[0] = v11;
  v201 = sub_100047C4C(*(_QWORD *)(a1 + 32), v12, v13);
  v14 = v220 + 1800.0;
  v15 = v220;
  if (a3)
  {
    v16 = sub_100053D44(*(_QWORD *)(a1 + 56), v220, v14);
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
    {
      v18 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v17 + 80))(v17, v220, v14);
      v19 = (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), v220, v14);
    }
    else
    {
      v18 = 3;
      v19 = 3;
    }
    v20 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = __p;
      sub_10000E8A0(__p, off_1000F30C0[v16]);
      if (SBYTE7(v214) < 0)
        v21 = (void **)__p[0];
      sub_10000E8A0(&__str, off_1000F30C0[v18]);
      v22 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      v23 = __str.__r_.__value_.__r.__words[0];
      sub_10000E8A0(&v229, off_1000F30C0[v19]);
      p_str = &__str;
      if (v22 < 0)
        p_str = (std::string *)v23;
      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v229;
      else
        v25 = (std::string *)v229.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2049;
      *(double *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2049;
      *(double *)&buf[30] = v14;
      *(_WORD *)&buf[38] = 2081;
      *(_QWORD *)&buf[40] = v21;
      v225 = 2081;
      v226 = p_str;
      v227 = 2081;
      v228 = v25;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,isIgneousCapable,biomeStatus\", \"startSeconds\":\"%{private}0.1f\", \"endSeconds\":\"%{private}0.1f\", \"subStatus\":%{private, location:escape_only}s, \"nwCellularStatus\":%{private, location:escape_only}s, \"nwWifiStatus\":%{private, location:escape_only}s}", buf, 0x44u);
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v229.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SBYTE7(v214) < 0)
        operator delete(__p[0]);
    }

    if (v16 == 1)
    {
      _ZF = v18 == 1 || v19 == 1;
      v27 = _ZF;
      v185 = v27;
    }
    else
    {
      v185 = 0;
    }
  }
  else
  {
    v185 = sub_100047DBC(a1, v220, v14);
  }
  v28 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v201;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v185;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType\", \"wasWeaCapable\":%{public}hhd, \"wasSaCapable\":%{public}hhd}", buf, 0x1Eu);
  }

  v29 = "WEA_AND_SA";
  if (!v201 || !v185)
    v29 = "WEA";
  if (!v201)
    v29 = "SA";
  __s = (char *)v29;
  if (!v201 && !v185)
  {
    v39 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v40 = "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,not capable, skipping\"}";
LABEL_53:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v40, buf, 0x12u);
    return;
  }
  v30 = ***a2;
  v31 = sub_10004811C((double **)(a1 + 464), v30, v10, v11);

  if ((v31 & 1) == 0)
  {
    v39 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v40 = "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,not in polygon,skipping submission\"}";
    goto LABEL_53;
  }
  v192 = SACommonUtils::didRebootSince(v32, a4);
  v33 = v220;
  sub_10000E8A0(&v219, "NotAvailable");
  sub_10000E8A0(&v218, "Unknown");
  sub_10000E8A0(&v217, "Unknown");
  sub_10000E8A0(&v216, "Unknown");
  v34 = *(_QWORD *)(a1 + 32);
  if (v34)
  {
    v196 = (*(unsigned int (**)(uint64_t, double, double))(*(_QWORD *)v34 + 80))(v34, v10, v11) - 1 < 2;
    (*(void (**)(_BYTE *__return_ptr, double, double))(**(_QWORD **)(a1 + 32) + 96))(buf, v220, v14);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    v219 = *(std::string *)buf;
    (*(void (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), v220, v220);
    v195 = v35;
    (*(void (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), v220, v220 + 10.0);
    v194 = v36;
    v193 = (*(unsigned int (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32), v220, v33 + 300.0)- 1 < 2;
    (*(void (**)(_BYTE *__return_ptr, double, double))(**(_QWORD **)(a1 + 32) + 120))(buf, v220, v14);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    v218 = *(std::string *)buf;
    (*(void (**)(_BYTE *__return_ptr, double, double))(**(_QWORD **)(a1 + 32) + 128))(buf, v220, v220);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    v217 = *(std::string *)buf;
    (*(void (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32), v220, v220);
    v198 = v37;
    v197 = (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32), v220, v220 + 10.0);
    v187 = (*(double (**)(_QWORD, double *))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32), &v220);
    v38 = (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), v10, v11);
    (*(void (**)(_BYTE *__return_ptr, double))(**(_QWORD **)(a1 + 32) + 144))(buf, v220);
    v191 = v38 == 1;
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    v216 = *(std::string *)buf;
  }
  else
  {
    v191 = 0;
    v187 = -1.0;
    v196 = 0;
    v197 = -1;
    v195 = -1;
    v193 = 0;
    v194 = -1;
    v198 = -1;
  }
  v41 = *(_QWORD *)(a1 + 56);
  if (a3)
  {
    v183 = sub_100053D44(v41, v220, v14);
    v42 = *a2;
    v43 = (char *)(*a2 + 18);
  }
  else
  {
    v183 = sub_100053BB8(v41, v220, v14);
    v42 = *a2;
    v43 = (char *)*a2 + 145;
  }
  v190 = *v43;
  *(_OWORD *)__p = 0u;
  v214 = 0u;
  v215 = 1065353216;
  sub_10004BA8C((uint64_t)&v212, v42 + 15);
  v44 = v212.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v212.__r_.__value_.__l.__data_ != &v212.__r_.__value_.__r.__words[1])
  {
    v200 = 0;
    v202 = 0;
    v45 = 0;
    v205 = 0;
    v206 = 0;
    while (1)
    {
      v221 = (__int128 *)0xBFF0000000000000;
      memset(&v211, 0, sizeof(v211));
      v46 = (std::string::size_type *)(v44 + 56);
      v47 = sub_100054640(*(_QWORD *)(a1 + 56), v44 + 56, &v221, &v211);
      v48 = objc_alloc((Class)NSDictionary);
      v49 = SACommonUtils::convertStringToDictionary((uint64_t *)&v211);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      v203 = v45;
      v51 = objc_msgSend(v48, "initWithDictionary:", v50);

      v52 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = v44 + 56;
        if (*(char *)(v44 + 79) < 0)
          v53 = *v46;
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v47;
        *(_WORD *)&buf[24] = 2081;
        *(_QWORD *)&buf[26] = v53;
        *(_WORD *)&buf[34] = 2049;
        *(_QWORD *)&buf[36] = v221;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,isWeaReceived\", \"isWeaReceived\":%{private}d, \"hash\":%{private, location:escape_only}s, \"timestamp\":\"%{private}.2f\"}", buf, 0x2Cu);
      }

      if (v51)
      {
        objc_msgSend(v51, "enumerateKeysAndObjectsUsingBlock:", &stru_1000F2F18);
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("Polygons")));
        v55 = v54 == 0;

        if (v55)
        {
          v61 = 0;
        }
        else
        {
          v56 = objc_opt_new(NSMutableArray);
          v57 = (SAGeometry *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("Polygons")));
          PolygonFromCoordinates = SAGeometry::getPolygonFromCoordinates(v57, v58);
          v60 = (void *)objc_claimAutoreleasedReturnValue(PolygonFromCoordinates);
          -[NSMutableArray addObject:](v56, "addObject:", v60);

          v61 = sub_10004811C((double **)(a1 + 464), v56, v10, v11);
          v202 = 1;
        }
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("Circles")));
        v63 = v62 == 0;

        if (v63)
        {
          isLocationInCircle = 0;
        }
        else
        {
          v65 = (SAGeometry *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("Circles")));
          v66 = *(double **)(a1 + 464);
          v67 = *(double **)(a1 + 472);
          if (v66 != v67)
          {
            isLocationInCircle = 0;
            v69 = 0.0;
            v70 = 0.0;
            v71 = 0.0;
            while (1)
            {
              v72 = *v66;
              if ((isLocationInCircle & 1) != 0 || v72 >= v10)
              {
                if (v72 >= v10 && v72 <= v11)
                {
                  if (v71 >= -90.0 && v71 <= 90.0 && v70 >= -180.0 && v70 <= 180.0 && v69 > 0.0)
                  {
                    if ((SAGeometry::isLocationInCircle(v65, v71, v70, v69, v64) & 1) != 0)
                    {
                      isLocationInCircle = 1;
                      goto LABEL_97;
                    }
                    v69 = -1.0;
                    v71 = 0.0;
                    v70 = 0.0;
                  }
                  isLocationInCircle = 1;
                  if ((SAGeometry::isLocationInCircle(v65, v66[1], v66[2], v66[3], v64) & 1) != 0)
                    goto LABEL_97;
                }
                else
                {
                  isLocationInCircle = 1;
                }
              }
              else
              {
                v71 = v66[1];
                v70 = v66[2];
                v69 = v66[3];
              }
              v66 += 4;
              if (v66 == v67)
                goto LABEL_91;
            }
          }
          v71 = 0.0;
          v70 = 0.0;
          v69 = 0.0;
LABEL_91:
          isLocationInCircle = 0;
          if (v71 >= -90.0 && v71 <= 90.0)
          {
            isLocationInCircle = 0;
            if (v70 >= -180.0 && v70 <= 180.0 && v69 > 0.0)
              isLocationInCircle = SAGeometry::isLocationInCircle(v65, v71, v70, v69, v64);
          }
LABEL_97:

          v202 = 1;
        }
        v200 |= v61 | isLocationInCircle;
      }
      memset(&v210, 0, sizeof(v210));
      v74 = *(_QWORD *)(a1 + 56);
      if (*(char *)(v44 + 79) < 0)
      {
        sub_100004870(__dst, *(void **)(v44 + 56), *(_QWORD *)(v44 + 64));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v46;
        v223 = *(id **)(v44 + 72);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1000F2FB0;
      __str.__r_.__value_.__l.__size_ = v74 + 1152;
      v232 = &__str;
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1000F3030;
      v229.__r_.__value_.__l.__size_ = v74 + 1152;
      v230 = &v229;
      sub_10001177C((uint64_t)buf, (uint64_t)&__str, (uint64_t)&v229);
      v75 = v230;
      if (v230 == &v229)
      {
        v75 = &v229;
        v76 = 4;
      }
      else
      {
        if (!v230)
          goto LABEL_107;
        v76 = 5;
      }
      (*(void (**)(void))(v75->__r_.__value_.__r.__words[0] + 8 * v76))();
LABEL_107:
      v77 = v232;
      if (v232 == &__str)
      {
        v77 = &__str;
        v78 = 4;
      }
      else
      {
        if (!v232)
          goto LABEL_112;
        v78 = 5;
      }
      (*(void (**)(void))(v77->__r_.__value_.__r.__words[0] + 8 * v78))();
LABEL_112:
      v79 = *(_QWORD *)(v74 + 1176);
      v80 = *(_QWORD *)(v74 + 1184);
      v81 = -1.0;
      if (v79 != v80)
      {
        if (SHIBYTE(v223) >= 0)
          v82 = (void *)HIBYTE(v223);
        else
          v82 = __dst[1];
        if (SHIBYTE(v223) >= 0)
          v83 = __dst;
        else
          v83 = (void **)__dst[0];
        do
        {
          v84 = *(unsigned __int8 *)(v79 + 31);
          if ((v84 & 0x80u) == 0)
            v85 = (void *)*(unsigned __int8 *)(v79 + 31);
          else
            v85 = *(void **)(v79 + 16);
          if (v85 != v82)
            goto LABEL_135;
          if ((v84 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v79 + 8), v83, *(_QWORD *)(v79 + 16)))
              goto LABEL_135;
          }
          else if (*(_BYTE *)(v79 + 31))
          {
            v86 = 0;
            while (*(unsigned __int8 *)(v79 + v86 + 8) == *((unsigned __int8 *)v83 + v86))
            {
              if (v84 == ++v86)
                goto LABEL_130;
            }
            goto LABEL_135;
          }
LABEL_130:
          v87 = *(double *)v79;
          if (*(double *)v79 >= v10 && v87 <= v11)
          {
            std::string::operator=(&v210, (const std::string *)(v79 + 32));
            v95 = 1;
            v81 = v87;
            goto LABEL_137;
          }
LABEL_135:
          v79 += 56;
        }
        while (v79 != v80);
      }
      v95 = 0;
LABEL_137:
      sub_100012184(buf);
      if (SHIBYTE(v223) < 0)
        operator delete(__dst[0]);
      v89 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        v90 = v44 + 56;
        if (*(char *)(v44 + 79) < 0)
          v90 = *v46;
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v95;
        *(_WORD *)&buf[24] = 2081;
        *(_QWORD *)&buf[26] = v90;
        *(_WORD *)&buf[34] = 2049;
        *(_QWORD *)&buf[36] = v221;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,isWeaDisplayed\", \"isWeaDisplayed\":%{private}d, \"hash\":%{private, location:escape_only}s, \"timestamp\":\"%{private}.2f\"}", buf, 0x2Cu);
      }

      v91 = v221;
      *(_QWORD *)buf = v44 + 56;
      v92 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)(v44 + 56), (__int128 **)buf);
      v92[40] = v95;
      v92[41] = v47;
      *(_DWORD *)(v92 + 42) = __str.__r_.__value_.__l.__data_;
      *((_WORD *)v92 + 23) = WORD2(__str.__r_.__value_.__r.__words[0]);
      *((_QWORD *)v92 + 6) = v91;
      *((double *)v92 + 7) = v81;
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v210.__r_.__value_.__l.__data_);

      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      v93 = *(std::string **)(v44 + 8);
      if (v93)
      {
        do
        {
          v94 = v93;
          v93 = (std::string *)v93->__r_.__value_.__r.__words[0];
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = *(std::string **)(v44 + 16);
          _ZF = v94->__r_.__value_.__r.__words[0] == v44;
          v44 = (std::string::size_type)v94;
        }
        while (!_ZF);
      }
      v206 |= v47;
      v45 = v47 | v203;
      v205 |= v95;
      v44 = (std::string::size_type)v94;
      if (v94 == (std::string *)&v212.__r_.__value_.__r.__words[1])
        goto LABEL_156;
    }
  }
  v205 = 0;
  v206 = 0;
  LOBYTE(v45) = 0;
  v202 = 0;
  v200 = 0;
LABEL_156:
  sub_10004BDF0((_QWORD *)v212.__r_.__value_.__l.__size_);
  v96 = (std::string *)*a2;
  v204 = v45;
  if (*((char *)*a2 + 71) < 0)
    sub_100004870(&__str, v96[2].__r_.__value_.__l.__data_, v96[2].__r_.__value_.__l.__size_);
  else
    __str = v96[2];
  v208 = 0;
  v209 = 0xBFF0000000000000;
  memset(&v229, 0, sizeof(v229));
  v97 = *(_QWORD *)(a1 + 56);
  if (a3)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      sub_100004870(buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      *(std::string *)buf = __str;
    v98 = sub_100023260(v97 + 1728, (unsigned __int8 **)buf, &v209, &v229);
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      sub_100004870(buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      *(std::string *)buf = __str;
    v98 = sub_100023260(v97 + 1536, (unsigned __int8 **)buf, &v209, &v229);
  }
  v99 = v98;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v100 = objc_alloc((Class)NSDictionary);
  v101 = SACommonUtils::convertStringToDictionary((uint64_t *)&v229);
  v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
  v103 = objc_msgSend(v100, "initWithDictionary:", v102);

  v104 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
  {
    v105 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v105 = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v99;
    *(_WORD *)&buf[24] = 2081;
    *(_QWORD *)&buf[26] = v105;
    *(_WORD *)&buf[34] = 2049;
    *(_QWORD *)&buf[36] = v209;
    _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,sa\", \"isSaReceived\":%{private}d, \"saUid\":%{private, location:escape_only}s, \"timestamp\":\"%{private}.2f\"}", buf, 0x2Cu);
  }

  if (!v103)
    goto LABEL_181;
  v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKey:", kIncomingMessageInterfaceKey));
  v107 = v106 == 0;

  if (!v107)
  {
    objc_msgSend(v103, "enumerateKeysAndObjectsUsingBlock:", &stru_1000F2F38);
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKey:", kIncomingMessageInterfaceKey));
    v208 = (int)objc_msgSend(v108, "intValue");

  }
  v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKey:", kIsReceivedViaPushKey));
  v110 = v109 == 0;

  if (v110)
  {
LABEL_181:
    v184 = 0;
  }
  else
  {
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKey:", kIsReceivedViaPushKey));
    v112 = objc_msgSend(v111, "BOOLValue");

    v113 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v112;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,saMetaValue\", \"isReceivedViaPushKey\":%{private}hhd}", buf, 0x18u);
    }

    v184 = v112;
  }
  v114 = *a2;
  v115 = (const char *)objc_msgSend(CFSTR("USGSTest"), "UTF8String");
  v116 = v115;
  v117 = *((char *)v114 + 95);
  if (v117 >= 0)
    v118 = *((unsigned __int8 *)v114 + 95);
  else
    v118 = (size_t)v114[10];
  if (v118 == strlen(v115))
  {
    v121 = v114[9];
    v120 = v114 + 9;
    v119 = v121;
    if (v117 >= 0)
      v122 = v120;
    else
      v122 = (id **)v119;
    v189 = memcmp(v122, v116, v118) == 0;
  }
  else
  {
    v189 = 0;
  }
  v123 = v209;
  *(_QWORD *)buf = &__str;
  v124 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)buf);
  v124[40] = v99;
  v124[41] = v99;
  *((_QWORD *)v124 + 6) = v123;
  *((_QWORD *)v124 + 7) = v123;
  sub_10004BA8C((uint64_t)__dst, *a2 + 15);
  v182 = v99 | v206;
  v125 = (void **)__dst[0];
  if (__dst[0] != &__dst[1])
  {
    v126 = "IGNEOUS_WEA";
    if (!a3)
      v126 = "WEA";
    v188 = (char *)v126;
    v127 = (void **)(a1 + 304);
    do
    {
      v128 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
      {
        v129 = v125 + 7;
        if (*((char *)v125 + 79) < 0)
          v129 = (_QWORD *)*v129;
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v129;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType\", \"wea\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }

      if (*((char *)v125 + 79) < 0)
      {
        sub_100004870(buf, v125[7], (unint64_t)v125[8]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(v125 + 7);
        *(_QWORD *)&buf[16] = v125[9];
      }
      if (*((char *)v125 + 55) < 0)
        sub_100004870(&v212, v125[4], (unint64_t)v125[5]);
      else
        v212 = *(std::string *)(v125 + 4);
      sub_10000E8A0(&v211, "Unknown");
      v130 = -1.0;
      if (*(_QWORD *)(a1 + 32))
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        if (sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[40])
        {
          v131 = *(_QWORD *)(a1 + 32);
          v221 = (__int128 *)buf;
          v132 = *((double *)sub_10004CBB4((uint64_t *)__p, buf, &v221) + 7);
          v221 = (__int128 *)buf;
          v133 = sub_10004CBB4((uint64_t *)__p, buf, &v221);
          (*(void (**)(std::string *__return_ptr, uint64_t, double, double))(*(_QWORD *)v131 + 128))(&v210, v131, v132, *((double *)v133 + 7));
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v211.__r_.__value_.__l.__data_);
          v211 = v210;
          v134 = *(_QWORD *)(a1 + 32);
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v135 = sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210);
          v130 = (*(double (**)(uint64_t, char *))(*(_QWORD *)v134 + 136))(v134, v135 + 56);
        }
      }
      std::string::operator=((std::string *)(a1 + 88), &__str);
      sub_10004BE30((std::string *)(a1 + 112), __s);
      if (*(char *)(a1 + 159) < 0)
      {
        *(_QWORD *)(a1 + 144) = 4;
        v136 = *(char **)(a1 + 136);
      }
      else
      {
        *(_BYTE *)(a1 + 159) = 4;
        v136 = (char *)(a1 + 136);
      }
      strcpy(v136, "None");
      sub_10004BE30((std::string *)(a1 + 160), v188);
      std::string::operator=((std::string *)(a1 + 184), &v212);
      std::string::operator=((std::string *)(a1 + 208), &v219);
      std::string::operator=((std::string *)(a1 + 232), &v218);
      if (*(_QWORD *)(a1 + 32)
        && (v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf,
            sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[40]))
      {
        v137 = &v211;
      }
      else
      {
        v137 = &v217;
      }
      std::string::operator=((std::string *)(a1 + 256), v137);
      std::string::operator=((std::string *)(a1 + 280), &v216);
      v138 = (std::string *)*a2;
      if (*((char *)*a2 + 119) < 0)
        sub_100004870(&v210, v138[4].__r_.__value_.__l.__data_, v138[4].__r_.__value_.__l.__size_);
      else
        v210 = v138[4];
      if (*(char *)(a1 + 327) < 0)
        operator delete(*v127);
      *(_OWORD *)v127 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 320) = *((_QWORD *)&v210.__r_.__value_.__l + 2);
      *(_DWORD *)(a1 + 328) = v198;
      *(_DWORD *)(a1 + 332) = v197;
      *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 448);
      v139 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 56);
      *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 444);
      if (sub_10004C514(v139, (unsigned __int8 *)v125 + 56))
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)(v125 + 7);
        v140 = *((_DWORD *)sub_10004C6AC(v139, (unsigned __int8 *)v125 + 56, (__int128 **)&v210) + 10);
      }
      else
      {
        v140 = 0;
      }
      *(_DWORD *)(a1 + 344) = v140;
      *(_DWORD *)(a1 + 348) = v195;
      *(_DWORD *)(a1 + 352) = v194;
      *(_BYTE *)(a1 + 356) = v193;
      *(_BYTE *)(a1 + 357) = v196;
      *(_BYTE *)(a1 + 358) = v183 == 1;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v141 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210)[41];
      *(_BYTE *)(a1 + 359) = v141;
      *(_BYTE *)(a1 + 360) = v141;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      *(_BYTE *)(a1 + 361) = (sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[41] != 0) & (v202 ^ 1 | v200);
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      *(_BYTE *)(a1 + 362) = sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[41];
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      *(_BYTE *)(a1 + 363) = sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[40];
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      *(_BYTE *)(a1 + 364) = (sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[41] != 0) & v202;
      *(_BYTE *)(a1 + 365) = v191;
      *(_BYTE *)(a1 + 366) = v182 & 1;
      *(_BYTE *)(a1 + 367) = v190;
      *(_BYTE *)(a1 + 368) = v192;
      *(_BYTE *)(a1 + 369) = *(_BYTE *)(a1 + 440);
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      v142 = sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[41];
      if (v142)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        v142 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210)[41];
        if (v142)
        {
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v143 = *((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 6);
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          v142 = vabdd_f64(v143, *((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210) + 6)) <= 300.0;
        }
      }
      *(_BYTE *)(a1 + 370) = v142;
      *(_BYTE *)(a1 + 371) = 0;
      *(_BYTE *)(a1 + 372) = v189;
      *(_BYTE *)(a1 + 373) = v184;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v144 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210);
      v145 = -1.0;
      if (*((double *)v144 + 6) > 0.0)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        v145 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210) + 6)
              - *((double *)*a2 + 3))
             * 1000.0;
      }
      *(double *)(a1 + 376) = v145;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v146 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210);
      v147 = -1.0;
      if (*((double *)v146 + 6) > 0.0)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        v147 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210) + 6)
              - *((double *)*a2 + 1))
             * 1000.0;
      }
      *(double *)(a1 + 384) = v147;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v148 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210);
      v149 = -1.0;
      if (*((double *)v148 + 6) > 0.0)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        v149 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210) + 6)
              - *((double *)*a2 + 2))
             * 1000.0;
      }
      *(double *)(a1 + 392) = v149;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      v150 = sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210);
      v151 = -1.0;
      if (*((double *)v150 + 6) > 0.0)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v151 = (*((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 6) - *((double *)*a2 + 3)) * 1000.0;
      }
      *(double *)(a1 + 400) = v151;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      v152 = -1.0;
      if (*((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 6) > 0.0)
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        if (*((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 7) > 0.0)
        {
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v153 = *((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 7);
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v152 = (v153 - *((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 6)) * 1000.0;
        }
      }
      *(double *)(a1 + 408) = v152;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      v154 = -1.0;
      if (sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[41])
      {
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        if (sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210)[41])
        {
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v155 = *((double *)sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210) + 6);
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          v154 = (v155 - *((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v210) + 6))
               * 1000.0;
        }
      }
      *(double *)(a1 + 416) = v154;
      if (!*(_QWORD *)(a1 + 32)
        || (v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf,
            !sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[40]))
      {
        v130 = v187;
      }
      *(double *)(a1 + 424) = v130;
      *(_QWORD *)(a1 + 432) = 0xBFF0000000000000;
      if (v201
        || (v210.__r_.__value_.__r.__words[0] = (std::string::size_type)buf,
            sub_10004CBB4((uint64_t *)__p, buf, (__int128 **)&v210)[40]))
      {
        sub_10004A9E8(a1);
      }
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v212.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v156 = (void **)v125[1];
      if (v156)
      {
        do
        {
          v157 = v156;
          v156 = (void **)*v156;
        }
        while (v156);
      }
      else
      {
        do
        {
          v157 = (void **)v125[2];
          _ZF = *v157 == v125;
          v125 = v157;
        }
        while (!_ZF);
      }
      v125 = v157;
    }
    while (v157 != &__dst[1]);
  }
  sub_10004BDF0((_QWORD *)__dst[1]);
  v158 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
  {
    v159 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v159 = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v159;
    _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType\", \"sa\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }

  sub_10000E8A0(buf, "Unknown");
  v160 = -1.0;
  if (*(_QWORD *)(a1 + 32))
  {
    __dst[0] = &__str;
    if (sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst)[41])
    {
      v161 = *(_QWORD *)(a1 + 32);
      v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v162 = *((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v212) + 6);
      v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v163 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)&v212);
      (*(void (**)(void **__return_ptr, uint64_t, double, double))(*(_QWORD *)v161 + 128))(__dst, v161, v162, *((double *)v163 + 6));
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_OWORD *)buf = *(_OWORD *)__dst;
      *(_QWORD *)&buf[16] = v223;
      v164 = *(_QWORD *)(a1 + 32);
      __dst[0] = &__str;
      v165 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst);
      v160 = (*(double (**)(uint64_t, char *))(*(_QWORD *)v164 + 136))(v164, v165 + 48);
    }
  }
  std::string::operator=((std::string *)(a1 + 88), &__str);
  sub_10004BE30((std::string *)(a1 + 112), __s);
  sub_10004830C(&v208, (uint64_t *)(a1 + 136));
  if (a3)
    v166 = "IGNEOUS";
  else
    v166 = "SA";
  sub_10004BE30((std::string *)(a1 + 160), v166);
  if (*(char *)(a1 + 207) < 0)
  {
    *(_QWORD *)(a1 + 192) = 4;
    v167 = *(char **)(a1 + 184);
  }
  else
  {
    v167 = (char *)(a1 + 184);
    *(_BYTE *)(a1 + 207) = 4;
  }
  strcpy(v167, "None");
  std::string::operator=((std::string *)(a1 + 208), &v219);
  std::string::operator=((std::string *)(a1 + 232), &v218);
  if (*(_QWORD *)(a1 + 32)
    && (__dst[0] = &__str, sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst)[41]))
  {
    v168 = (std::string *)buf;
  }
  else
  {
    v168 = &v217;
  }
  std::string::operator=((std::string *)(a1 + 256), v168);
  std::string::operator=((std::string *)(a1 + 280), &v216);
  v169 = *a2;
  if (*((char *)*a2 + 119) < 0)
  {
    sub_100004870(__dst, v169[12], (unint64_t)v169[13]);
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v169 + 6);
    v223 = v169[14];
  }
  v170 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    operator delete(*v170);
  *(_OWORD *)v170 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 320) = v223;
  *(_DWORD *)(a1 + 328) = v198;
  *(_DWORD *)(a1 + 332) = v197;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 448);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 444);
  *(_DWORD *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 348) = v195;
  *(_DWORD *)(a1 + 352) = v194;
  *(_BYTE *)(a1 + 356) = v193;
  *(_BYTE *)(a1 + 357) = v196;
  *(_BYTE *)(a1 + 358) = v183 == 1;
  __dst[0] = &__str;
  v171 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst)[41];
  *(_BYTE *)(a1 + 359) = v171;
  *(_BYTE *)(a1 + 360) = v171;
  *(_BYTE *)(a1 + 361) = v205 & 1 & (v200 | ~v202);
  *(_BYTE *)(a1 + 362) = v204 & 1;
  *(_BYTE *)(a1 + 363) = v205 & 1;
  *(_BYTE *)(a1 + 364) = v202 & 1;
  *(_BYTE *)(a1 + 365) = v191;
  *(_BYTE *)(a1 + 366) = v182 & 1;
  *(_BYTE *)(a1 + 367) = v190;
  *(_BYTE *)(a1 + 368) = v192;
  *(_BYTE *)(a1 + 369) = *(_BYTE *)(a1 + 440);
  *(_WORD *)(a1 + 370) = 0;
  *(_BYTE *)(a1 + 372) = v189;
  *(_BYTE *)(a1 + 373) = v184;
  __dst[0] = &__str;
  v172 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst);
  v173 = -1.0;
  if (*((double *)v172 + 6) > 0.0)
  {
    __dst[0] = &__str;
    v173 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst) + 6)
          - *((double *)*a2 + 3))
         * 1000.0;
  }
  *(double *)(a1 + 376) = v173;
  __dst[0] = &__str;
  v174 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst);
  v175 = -1.0;
  if (*((double *)v174 + 6) > 0.0)
  {
    __dst[0] = &__str;
    v175 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst) + 6)
          - *((double *)*a2 + 1))
         * 1000.0;
  }
  *(double *)(a1 + 384) = v175;
  __dst[0] = &__str;
  v176 = sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst);
  v177 = -1.0;
  if (*((double *)v176 + 6) > 0.0)
  {
    __dst[0] = &__str;
    v177 = (*((double *)sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst) + 6)
          - *((double *)*a2 + 2))
         * 1000.0;
  }
  *(double *)(a1 + 392) = v177;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 400) = _Q0;
  *(_QWORD *)(a1 + 416) = 0xBFF0000000000000;
  if (!*(_QWORD *)(a1 + 32)
    || (__dst[0] = &__str, !sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst)[41]))
  {
    v160 = v187;
  }
  *(double *)(a1 + 424) = v160;
  *(_QWORD *)(a1 + 432) = 0xBFF0000000000000;
  if (v185 || (__dst[0] = &__str, sub_10004CBB4((uint64_t *)__p, (unsigned __int8 *)&__str, (__int128 **)__dst)[41]))
    sub_10004A9E8(a1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_10004C464((uint64_t)__p);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
}

void sub_10004A510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a70;
  char a72;
  void *a73;
  void *v73;
  uint64_t v74;

  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);

  if (*(char *)(v74 - 217) < 0)
    operator delete(*(void **)(v74 - 240));
  if (*(char *)(v74 - 185) < 0)
    operator delete(*(void **)(v74 - 208));
  sub_10004C464((uint64_t)&a57);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a70);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_10004A818(id a1, id a2, id a3, BOOL *a4)
{
  id v5;
  id v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289539;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v5;
    v13 = 2113;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,weaReceivedMetaValue\", \"key\":%{private, location:escape_only}@, \"value\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x26u);
  }

}

void sub_10004A900(id a1, id a2, id a3, BOOL *a4)
{
  id v5;
  id v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289539;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v5;
    v13 = 2113;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,collectEfficacyMetricForAlertType,saMetaValue\", \"key\":%{private, location:escape_only}@, \"value\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x26u);
  }

}

void sub_10004A9E8(uint64_t a1)
{
  __CFCalendar *v2;
  double Current;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  int v45;
  int v46;
  uint8_t buf[8];
  __int16 v48;
  const char *v49;
  __int16 v50;
  _BYTE v51[44];
  __int16 v52;
  _BYTE v53[10];
  _QWORD *v54;
  _BYTE v55[6];
  _BYTE v56[6];
  _BYTE v57[6];
  uint64_t v58;
  _BYTE v59[10];
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;

  v46 = 0;
  v2 = CFCalendarCopyCurrent();
  Current = CFAbsoluteTimeGetCurrent();
  CFCalendarDecomposeAbsoluteTime(v2, Current, "H", &v46);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)buf = (uint64_t)Current;
  sub_100052BB8(v4, (uint64_t *)buf);
  if (v2)
    CFRelease(v2);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10004AE28;
  v44[3] = &unk_1000F2F58;
  v44[4] = a1;
  v45 = v46;
  AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.efficacy"), v44);
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (_QWORD *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      v7 = (_QWORD *)*v7;
    v8 = (_QWORD *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      v8 = (_QWORD *)*v8;
    v9 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0)
      v10 = (_QWORD *)*v10;
    v11 = (_QWORD *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
      v11 = (_QWORD *)*v11;
    v49 = "";
    *(_DWORD *)v51 = v46;
    *(_WORD *)&v51[4] = 2081;
    *(_QWORD *)&v51[6] = v6;
    *(_QWORD *)&v51[16] = v7;
    *(_QWORD *)&v51[26] = v8;
    *(_QWORD *)&v51[36] = v9;
    *(_QWORD *)v53 = v10;
    v48 = 2082;
    *(_WORD *)&v51[14] = 2082;
    *(_WORD *)&v51[24] = 2082;
    *(_WORD *)&v51[34] = 2082;
    v52 = 2082;
    *(_WORD *)&v53[8] = 2082;
    v12 = *(_DWORD *)(a1 + 340);
    v54 = v11;
    v13 = *(_DWORD *)(a1 + 336);
    *(_DWORD *)&v55[2] = v12;
    v14 = *(_DWORD *)(a1 + 348);
    *(_DWORD *)&v56[2] = v13;
    v15 = *(unsigned __int8 *)(a1 + 356);
    *(_DWORD *)&v57[2] = v14;
    v16 = *(unsigned __int8 *)(a1 + 357);
    *(_DWORD *)((char *)&v58 + 2) = v15;
    v17 = *(unsigned __int8 *)(a1 + 358);
    *(_DWORD *)v59 = v16;
    v18 = *(unsigned __int8 *)(a1 + 359);
    *(_DWORD *)&v59[6] = v17;
    v19 = *(unsigned __int8 *)(a1 + 360);
    v61 = v18;
    v20 = *(unsigned __int8 *)(a1 + 361);
    v63 = v19;
    v62 = 1025;
    v64 = 1025;
    v21 = *(unsigned __int8 *)(a1 + 362);
    v65 = v20;
    v22 = *(unsigned __int8 *)(a1 + 363);
    v67 = v21;
    v23 = *(unsigned __int8 *)(a1 + 364);
    v69 = v22;
    v24 = *(unsigned __int8 *)(a1 + 365);
    v71 = v23;
    v25 = *(unsigned __int8 *)(a1 + 366);
    v73 = v24;
    v26 = *(unsigned __int8 *)(a1 + 367);
    v75 = v25;
    v27 = *(unsigned __int8 *)(a1 + 368);
    v77 = v26;
    v50 = 1026;
    *(_WORD *)v55 = 1026;
    *(_WORD *)v56 = 1026;
    *(_WORD *)v57 = 1026;
    LOWORD(v58) = 1026;
    HIWORD(v58) = 1026;
    *(_WORD *)&v59[4] = 1026;
    v60 = 1026;
    v66 = 1026;
    v68 = 1026;
    v70 = 1026;
    v72 = 1026;
    v74 = 1026;
    v76 = 1026;
    v78 = 1026;
    v79 = v27;
    v28 = *(_QWORD *)(a1 + 384);
    v81 = *(_QWORD *)(a1 + 376);
    v83 = v28;
    v29 = *(_QWORD *)(a1 + 400);
    v85 = *(_QWORD *)(a1 + 392);
    v87 = v29;
    v30 = *(_QWORD *)(a1 + 416);
    v89 = *(_QWORD *)(a1 + 408);
    v80 = 2050;
    v82 = 2050;
    v84 = 2050;
    v86 = 2050;
    v88 = 2050;
    v90 = 2050;
    v91 = v30;
    *(_DWORD *)buf = 68296451;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,metric submitted\", \"hourOfMetricTrigger\":%{public}d, \"alertIDString\":%{private, location:escape_only}s, \"participationType\":%{public, location:escape_only}s, \"pushInterface\":%{public, location:escape_only}s, \"efficacyType\":%{public, location:escape_only}s, \"hashType\":%{public, location:escape_only}s, \"cellularConnectionStatus\":%{public, location:escape_only}s, \"maCompatibilityVersion\":%{public}d, \"maContentVersion\":%{public}d, \"wifiQuality\":%{public}d, \"WoW\":%{public}d, \"wasCellularInternetReachable\":%{public}d, \"wasChannelSubscribed\":%{public}d, \"wasSaReceived\":%{public}d, \"wasUserInSaPolygon\":%{private}d, \"wasUserInWeaPolygon\":%{private}d, \"wasWeaAlertReceived\":%{public}d, \"wasWeaDisplayed\":%{public}d, \"didWeaHavePolygon\":%{public}d, \"wasWifiInternetReachable\":%{public}d, \"wasAnyAlertReceived\":%{public}d, \"wasSaExpected\":%{public}d, \"wasRebootedDuringRollingPeriod\":%{public}d, \"saLatencyRelativeToOriginatorTime\":\"%{public}0.3f\", \"saLatencyRelativeToServerTime\":\"%{public}0.3f\", \"saLatencyFromServerIngressTime\":\"%{public}0.3f\", \"weaLatencyRelativeToOriginatorTime\":\"%{public}0.3f\", \"weaDisplayedLatencyRelativeToReceivedTime\":\"%{public}0.3f\", \"weaMinusSaTimestamp\":\"%{public}0.3f\"}", buf, 0xF0u);
    v5 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v31 = (_QWORD *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v31 = (_QWORD *)*v31;
    v32 = (_QWORD *)(a1 + 256);
    if (*(char *)(a1 + 279) < 0)
      v32 = (_QWORD *)*v32;
    v33 = (_QWORD *)(a1 + 280);
    if (*(char *)(a1 + 303) < 0)
      v33 = (_QWORD *)*v33;
    v34 = (_QWORD *)(a1 + 304);
    if (*(char *)(a1 + 327) < 0)
      v34 = (_QWORD *)*v34;
    v35 = *(_DWORD *)(a1 + 328);
    v36 = *(unsigned __int8 *)(a1 + 369);
    v37 = *(unsigned __int8 *)(a1 + 370);
    v38 = *(unsigned __int8 *)(a1 + 371);
    v39 = *(unsigned __int8 *)(a1 + 372);
    v40 = *(unsigned __int8 *)(a1 + 373);
    v41 = *(_DWORD *)(a1 + 344);
    v42 = *(_QWORD *)(a1 + 424);
    v43 = *(_QWORD *)(a1 + 432);
    *(_DWORD *)buf = 68292355;
    *(_DWORD *)&buf[4] = 0;
    v48 = 2082;
    v49 = "";
    v50 = 2082;
    *(_QWORD *)v51 = v31;
    *(_WORD *)&v51[8] = 2082;
    *(_QWORD *)&v51[10] = v32;
    *(_WORD *)&v51[18] = 2081;
    *(_QWORD *)&v51[20] = v33;
    *(_WORD *)&v51[28] = 2082;
    *(_QWORD *)&v51[30] = v34;
    *(_WORD *)&v51[38] = 1026;
    *(_DWORD *)&v51[40] = v35;
    v52 = 1026;
    *(_DWORD *)v53 = v36;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v37;
    LOWORD(v54) = 1026;
    *(_DWORD *)((char *)&v54 + 2) = v38;
    HIWORD(v54) = 1026;
    *(_DWORD *)v55 = v39;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)v56 = v40;
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)v57 = v41;
    *(_WORD *)&v57[4] = 2050;
    v58 = v42;
    *(_WORD *)v59 = 2050;
    *(_QWORD *)&v59[2] = v43;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#eff,metric submitted continue\", \"RAT\":%{public, location:escape_only}s, \"rrcConnectionStatus\":%{public, location:escape_only}s, \"APSDConnectivityStatus\":%{private, location:escape_only}s, \"weaHandling\":%{public, location:escape_only}s, \"cellularQuality\":%{public}d, \"wasEnhancedDeliveryEnabled\":%{public}d, \"isWeaMinusSALessThanThreshold\":%{public}d, \"isAuthenticated\":%{public}d, \"isTestAlert\":%{public}d, \"isReceivedViaPush\":%{public}d, \"numAlertsPerDay\":%{public}d, \"timeSinceRrcConnection\":\"%{public}.3f\", \"weaMinusSaNextMatch\":\"%{public}.3f\"}", buf, 0x78u);
  }
}

id sub_10004AE28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD v58[44];
  _QWORD v59[44];

  v1 = *(_QWORD *)(a1 + 32);
  v58[0] = CFSTR("hourOfMetricTrigger");
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  v59[0] = v57;
  v58[1] = CFSTR("manifestVersionNumber");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v1 + 48) + 24)));
  v59[1] = v56;
  v58[2] = CFSTR("alertIDString");
  v2 = (_QWORD *)(v1 + 88);
  if (*(char *)(v1 + 111) < 0)
    v2 = (_QWORD *)*v2;
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
  v59[2] = v55;
  v58[3] = CFSTR("participationType");
  v3 = (_QWORD *)(v1 + 112);
  if (*(char *)(v1 + 135) < 0)
    v3 = (_QWORD *)*v3;
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  v59[3] = v54;
  v58[4] = CFSTR("pushInterface");
  v4 = (_QWORD *)(v1 + 136);
  if (*(char *)(v1 + 159) < 0)
    v4 = (_QWORD *)*v4;
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  v59[4] = v53;
  v58[5] = CFSTR("efficacyType");
  v5 = (_QWORD *)(v1 + 160);
  if (*(char *)(v1 + 183) < 0)
    v5 = (_QWORD *)*v5;
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  v59[5] = v52;
  v58[6] = CFSTR("hashType");
  v6 = (_QWORD *)(v1 + 184);
  if (*(char *)(v1 + 207) < 0)
    v6 = (_QWORD *)*v6;
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  v59[6] = v51;
  v58[7] = CFSTR("cellularConnectionStatus");
  v7 = (_QWORD *)(v1 + 208);
  if (*(char *)(v1 + 231) < 0)
    v7 = (_QWORD *)*v7;
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  v59[7] = v50;
  v58[8] = CFSTR("RAT");
  v8 = (_QWORD *)(v1 + 232);
  if (*(char *)(v1 + 255) < 0)
    v8 = (_QWORD *)*v8;
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v59[8] = v49;
  v58[9] = CFSTR("rrcConnectionStatus");
  v9 = (_QWORD *)(v1 + 256);
  if (*(char *)(v1 + 279) < 0)
    v9 = (_QWORD *)*v9;
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  v59[9] = v48;
  v58[10] = CFSTR("APSDConnectivityStatus");
  v10 = (_QWORD *)(v1 + 280);
  if (*(char *)(v1 + 303) < 0)
    v10 = (_QWORD *)*v10;
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
  v59[10] = v47;
  v58[11] = CFSTR("weaHandling");
  v11 = (_QWORD *)(v1 + 304);
  if (*(char *)(v1 + 327) < 0)
    v11 = (_QWORD *)*v11;
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  v59[11] = v46;
  v58[12] = CFSTR("CellularQuality");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 328)));
  v59[12] = v45;
  v58[13] = CFSTR("cellularQualityAverage");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 332)));
  v59[13] = v44;
  v58[14] = CFSTR("maContentVersion");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 336)));
  v59[14] = v43;
  v58[15] = CFSTR("maCompatibilityVersion");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 340)));
  v59[15] = v42;
  v58[16] = CFSTR("numAlertsPerDay");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 344)));
  v59[16] = v41;
  v58[17] = CFSTR("WifiQuality");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 348)));
  v59[17] = v40;
  v58[18] = CFSTR("wifiQualityAverage");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 352)));
  v59[18] = v39;
  v58[19] = CFSTR("WoW");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 356)));
  v59[19] = v38;
  v58[20] = CFSTR("wasCellularInternetReachable");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 357)));
  v59[20] = v37;
  v58[21] = CFSTR("wasChannelSubscribed");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 358)));
  v59[21] = v36;
  v58[22] = CFSTR("wasSaReceived");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 359)));
  v59[22] = v35;
  v58[23] = CFSTR("wasUserInSaPolygon");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 360)));
  v59[23] = v34;
  v58[24] = CFSTR("wasUserInWeaPolygon");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 361)));
  v59[24] = v33;
  v58[25] = CFSTR("wasWeaAlertReceived");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 362)));
  v59[25] = v32;
  v58[26] = CFSTR("wasWeaDisplayed");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 363)));
  v59[26] = v31;
  v58[27] = CFSTR("didWeaHavePolygon");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 364)));
  v59[27] = v30;
  v58[28] = CFSTR("wasWifiInternetReachable");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 365)));
  v59[28] = v29;
  v58[29] = CFSTR("wasAnyAlertReceived");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 366)));
  v59[29] = v28;
  v58[30] = CFSTR("wasSaExpected");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 367)));
  v59[30] = v27;
  v58[31] = CFSTR("wasRebootedDuringRollingPeriod");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 368)));
  v59[31] = v26;
  v58[32] = CFSTR("wasEnhancedDeliveryEnabled");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 369)));
  v59[32] = v25;
  v58[33] = CFSTR("isWeaMinusSALessThanThreshold");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 370)));
  v59[33] = v24;
  v58[34] = CFSTR("isTestAlert");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 372)));
  v59[34] = v23;
  v58[35] = CFSTR("isReceivedViaPush");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 373)));
  v59[35] = v12;
  v58[36] = CFSTR("saLatencyRelativeToOriginatorTime");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 376)));
  v59[36] = v13;
  v58[37] = CFSTR("saLatencyRelativeToServerTime");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 384)));
  v59[37] = v14;
  v58[38] = CFSTR("saLatencyFromServerIngressTime");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 392)));
  v59[38] = v15;
  v58[39] = CFSTR("weaLatencyRelativeToOriginatorTime");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 400)));
  v59[39] = v16;
  v58[40] = CFSTR("weaDisplayedLatencyRelativeToReceivedTime");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 408)));
  v59[40] = v17;
  v58[41] = CFSTR("weaMinusSaTimestamp");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 416)));
  v59[41] = v18;
  v58[42] = CFSTR("timeSinceRrcConnection");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 424)));
  v59[42] = v19;
  v58[43] = CFSTR("weaMinusSaNextMatch");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 432)));
  v59[43] = v20;
  v22 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 44));

  return v22;
}

void sub_10004B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

uint64_t sub_10004B95C(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10004BA1C(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_10004C3C4(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10004BA8C(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  void **v4;
  void **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t *v16[3];
  uint64_t *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (void **)(a2 + 1);
  v5 = (void **)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 8);
    while (v7 != v3)
    {
      v8 = v3;
      if (v6)
      {
        do
        {
          v9 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v8[2];
          v10 = *v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (v10);
      }
      if ((sub_10002789C(v9 + 7, v5 + 7) & 0x80) != 0)
      {
        if (!*v3)
        {
LABEL_15:
          v17 = v3;
          v12 = (uint64_t)v3;
          v11 = (uint64_t **)v3;
          goto LABEL_16;
        }
        goto LABEL_11;
      }
      v11 = (uint64_t **)sub_10004BCD8(a1, &v17, (uint64_t)(v5 + 4));
LABEL_12:
      if (*v11)
        goto LABEL_17;
      v12 = (uint64_t)v17;
LABEL_16:
      sub_10004BC0C((uint64_t)v16, a1, (uint64_t)(v5 + 4));
      sub_1000162D4((uint64_t **)a1, v12, v11, v16[0]);
      v16[0] = 0;
      sub_10004BD68((uint64_t)v16);
LABEL_17:
      v13 = (void **)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (void **)v5[2];
          v10 = *v14 == v5;
          v5 = v14;
        }
        while (!v10);
      }
      if (v14 == v4)
        return a1;
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      v5 = v14;
    }
    v9 = v3;
    if (!v6)
      goto LABEL_15;
LABEL_11:
    v17 = v9;
    v11 = (uint64_t **)(v9 + 1);
    goto LABEL_12;
  }
  return a1;
}

void sub_10004BBF8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_10004BDF0(*v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_10004BC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = operator new(0x50uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100004870(v6 + 32, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  result = v7 + 56;
  if (*(char *)(a3 + 47) < 0)
  {
    result = sub_100004870(result, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 40);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_10004BCAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_10004BD68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004BCD8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = (void **)(a3 + 24);
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 7;
        if ((sub_10002789C(v6, (void **)v4 + 7) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if ((sub_10002789C(v8, v6) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v7;
  return v5;
}

void sub_10004BD68(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10004BDAC((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void sub_10004BDAC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_10004BDF0(_QWORD *a1)
{
  if (a1)
  {
    sub_10004BDF0(*a1);
    sub_10004BDF0(a1[1]);
    sub_10004BDAC((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

std::string *sub_10004BE30(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_10001E03C(a1, __s, v4);
}

char *sub_10004BE64(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004870(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_10004BEDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10004BEF8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_100004C50();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10004C000(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_10004C000(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_100004C50();
  result = (char *)sub_10004C040((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_10004C040(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_100004984();
  return operator new(32 * a2);
}

void sub_10004C078()
{
  operator delete();
}

_QWORD *sub_10004C08C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2FB0;
  result[1] = v3;
  return result;
}

uint64_t sub_10004C0C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2FB0;
  a2[1] = v2;
  return result;
}

void sub_10004C0DC(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100023D0C((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_10004C1A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004C1E4()
{
}

void sub_10004C1F4()
{
  operator delete();
}

_QWORD *sub_10004C208(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3030;
  result[1] = v3;
  return result;
}

uint64_t sub_10004C23C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3030;
  a2[1] = v2;
  return result;
}

void sub_10004C258(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v3, 0x12u);
    }
    sub_1000254A8(v1);
  }
}

uint64_t sub_10004C324(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004C360()
{
}

id **sub_10004C36C(id **result, id *a2)
{
  id *v2;
  id v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;

    operator delete();
  }
  return result;
}

uint64_t sub_10004C3C4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_10004C400(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10004C400(uint64_t a1)
{
  sub_10004BDF0(*(_QWORD **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_10004C36C((id **)a1, 0);
  return a1;
}

uint64_t sub_10004C464(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_10004C4C8(void **a1)
{
  void **v2;

  sub_10004C464((uint64_t)(a1 + 7));
  v2 = a1;
  sub_10004BA1C(&v2);
  operator delete();
}

unsigned __int8 *sub_10004C514(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = sub_1000354B8((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (sub_10004C60C(i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

BOOL sub_10004C60C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

char *sub_10004C6AC(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _BYTE *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = a1 + 3;
  v8 = sub_1000354B8((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (sub_10004C60C((unsigned __int8 *)v14 + 16, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = *a3;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = v14 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_100004870(v17, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v18 = *v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v17 = v18;
  }
  *((_DWORD *)v14 + 10) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_100004984();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)a1[2];
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = a1 + 2;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v14 = *v37;
LABEL_75:
    *v37 = v14;
    goto LABEL_76;
  }
  *(_QWORD *)v14 = a1[2];
  a1[2] = (uint64_t)v14;
  *(_QWORD *)(v36 + 8 * v3) = a1 + 2;
  if (*(_QWORD *)v14)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_10004CAC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10004CAF0(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_10004CB3C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7[3];
  uint64_t v8;

  v5 = (uint64_t **)sub_10004BCD8((uint64_t)a1, &v8, a2);
  if (!*v5)
  {
    v6 = v5;
    sub_10004BC0C((uint64_t)v7, (uint64_t)a1, a3);
    sub_1000162D4(a1, v8, v6, v7[0]);
    v7[0] = 0;
    sub_10004BD68((uint64_t)v7);
  }
}

char *sub_10004CBB4(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _BYTE *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = a1 + 3;
  v8 = sub_1000354B8((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (sub_10004C60C((unsigned __int8 *)v14 + 16, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = *a3;
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = v14 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_100004870(v17, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v18 = *v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v17 = v18;
  }
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_100004984();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)a1[2];
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = a1 + 2;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v14 = *v37;
LABEL_75:
    *v37 = v14;
    goto LABEL_76;
  }
  *(_QWORD *)v14 = a1[2];
  a1[2] = (uint64_t)v14;
  *(_QWORD *)(v36 + 8 * v3) = a1 + 2;
  if (*(_QWORD *)v14)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_10004CFD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004CFFC(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  _QWORD v21[3];
  _QWORD *v22;

  v5 = a2;
  sub_100004F4C((uint64_t)v21, a3);
  *a1 = off_1000F2B70;
  if (!v22)
  {
    a1[4] = 0;
    goto LABEL_11;
  }
  if (v22 == v21)
  {
    a1[4] = a1 + 1;
    (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, a1 + 1);
  }
  else
  {
    a1[4] = (*(uint64_t (**)(void))(*v22 + 16))();
  }
  v6 = v22;
  if (v22 == v21)
  {
    v7 = 4;
    v6 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  *a1 = off_1000F30F0;
  sub_100004F4C((uint64_t)(a1 + 5), a3);
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SABatteryServiceTest,init\"}", buf, 0x12u);
  }
  v9 = v5;
  v10 = (uint64_t *)sub_100017A18();
  v11 = v9;
  v15[0] = off_1000F3138;
  v15[1] = a1;
  v15[2] = v11;
  v16 = v15;
  sub_100017D40(v10, 4, (uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_17;
  }
  if (v16)
  {
    v13 = 5;
LABEL_17:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }

  return a1;
}

void sub_10004D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  void *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == &a16)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v21 + 8 * v22))(v21);
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *sub_10004D2EC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = off_1000F30F0;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = off_1000F2B70;
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_10004D388(_QWORD *a1)
{
  sub_10004D2EC(a1);
  operator delete();
}

uint64_t sub_10004D3B4(uint64_t a1)
{

  return a1;
}

void sub_10004D3DC(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10004D414(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = off_1000F3138;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id sub_10004D458(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = off_1000F3138;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void sub_10004D48C(uint64_t a1)
{

}

void sub_10004D494(id *a1)
{

  operator delete(a1);
}

void sub_10004D4BC(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(a1 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10004D584;
  v7[3] = &unk_1000F2B98;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t sub_10004D53C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004D578()
{
}

void sub_10004D584(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  int int64;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  _BOOL4 v13;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_autoreleasePoolPush();
  v4 = *(id *)(a1 + 32);
  if (xpc_dictionary_get_int64(v4, "TestMessageType") == 4)
  {
    int64 = xpc_dictionary_get_int64(v4, "BatteryConnected");
    v7 = 0x4049000000000000;
    v8 = int64 != 0;
    v9 = v8;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = int64 == 0;
    v6 = *(_QWORD *)(v2 + 64);
    if (!v6)
      sub_100004FB0();
    (*(void (**)(uint64_t, _BOOL4 *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13, &v7);
  }

  objc_autoreleasePoolPop(v3);
}

void sub_10004D644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_10004D658()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100102A88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100102A88))
  {
    sub_10004D878((uint64_t)&unk_1001029C0);
    __cxa_atexit((void (*)(void *))sub_10004D6E8, &unk_1001029C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100102A88);
  }
  return &unk_1001029C0;
}

void sub_10004D6D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100102A88);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D6E8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v9;
  uint8_t buf[8];
  __int128 v11;
  void *v12;
  uint64_t v13;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v11) = 2082;
    *(_QWORD *)((char *)&v11 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,release\"}", buf, 0x12u);
  }
  v3 = *(NSObject **)(a1 + 192);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v11 = 3221225472;
  *((_QWORD *)&v11 + 1) = sub_10004E5E8;
  v12 = &unk_1000F1EB8;
  v13 = a1;
  dispatch_async(v3, buf);

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v4 = *(_QWORD **)(a1 + 128);
  if (v4 == (_QWORD *)(a1 + 104))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = *(_QWORD **)(a1 + 96);
  if (v6 == (_QWORD *)(a1 + 72))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v9 = (void **)(a1 + 24);
  sub_10000E814(&v9);
  return a1;
}

uint64_t sub_10004D878(uint64_t a1)
{
  NSObject *v2;
  dispatch_queue_attr_t v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  *(_QWORD *)(sub_100010480(a1) + 192) = 0;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,init\"}", buf, 0x12u);
  }
  v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = dispatch_queue_create("com.apple.safetyalerts.networkActivityMetrics", v4);
  v6 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v5;

  v7 = *(NSObject **)(a1 + 192);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004D9A8;
  block[3] = &unk_1000F1EB8;
  block[4] = a1;
  dispatch_async(v7, block);
  return a1;
}

_QWORD *sub_10004D9A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  char *v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  NSObject *v26;
  void *v28[2];
  int64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  void *__p[2];
  unsigned __int8 v33;
  void **v34;
  _BYTE __str[32];
  _QWORD v36[3];

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 192));
  sub_10000E8A0(__str, "network_activity");
  v2 = (_QWORD *)(v1 + 160);
  std::string::operator=((std::string *)(v1 + 160), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  *(_BYTE *)(v1 + 1) = 0;
  *(_QWORD *)(v1 + 136) = 2000;
  sub_10000E8A0(__str, "/var/mobile/Library/com.apple.safetyalerts/");
  sub_10000E8A0(__p, "network_activity.elog");
  if ((v33 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v33 & 0x80u) == 0)
    v4 = v33;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append((std::string *)__str, (const std::string::value_type *)v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v29 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)v28 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v33 < 0)
    operator delete(__p[0]);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v29 >= 0)
    v7 = (char *)v28;
  else
    v7 = (char *)v28[0];
  v34 = __p;
  v30[0] = off_1000F32A0;
  v31 = v30;
  __p[0] = off_1000F3210;
  if (v7)
  {
    sub_10000E8A0(__str, v7);
    v8 = (void **)(v1 + 48);
    if (*(char *)(v1 + 71) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)__str;
    *(_QWORD *)(v1 + 64) = *(_QWORD *)&__str[16];
    v9 = (uint64_t)v34;
    if (v34)
    {
      if (v34 == __p)
      {
        *(_QWORD *)&__str[24] = __str;
        (*((void (**)(void **, _BYTE *))__p[0] + 3))(__p, __str);
LABEL_29:
        v13 = v1 + 72;
        if (__str != (_BYTE *)(v1 + 72))
        {
          v14 = *(_QWORD *)&__str[24];
          v15 = *(_QWORD *)(v1 + 96);
          if (*(_BYTE **)&__str[24] == __str)
          {
            if (v15 == v13)
            {
              (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v36);
              (*(void (**)(_QWORD))(**(_QWORD **)&__str[24] + 32))(*(_QWORD *)&__str[24]);
              *(_QWORD *)&__str[24] = 0;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1 + 96) + 24))(*(_QWORD *)(v1 + 96), __str);
              (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96));
              *(_QWORD *)(v1 + 96) = 0;
              *(_QWORD *)&__str[24] = __str;
              (*(void (**)(_QWORD *, uint64_t))(v36[0] + 24))(v36, v1 + 72);
              (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
            }
            else
            {
              (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__str + 24))(__str, v1 + 72);
              (*(void (**)(_QWORD))(**(_QWORD **)&__str[24] + 32))(*(_QWORD *)&__str[24]);
              *(_QWORD *)&__str[24] = *(_QWORD *)(v1 + 96);
            }
            *(_QWORD *)(v1 + 96) = v13;
          }
          else if (v15 == v13)
          {
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 24))(v1 + 72, __str);
            (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96));
            *(_QWORD *)(v1 + 96) = *(_QWORD *)&__str[24];
            *(_QWORD *)&__str[24] = __str;
          }
          else
          {
            *(_QWORD *)&__str[24] = *(_QWORD *)(v1 + 96);
            *(_QWORD *)(v1 + 96) = v14;
          }
        }
        v16 = *(_QWORD **)&__str[24];
        if (*(_BYTE **)&__str[24] == __str)
        {
          v17 = 4;
          v16 = __str;
        }
        else
        {
          if (!*(_QWORD *)&__str[24])
            goto LABEL_43;
          v17 = 5;
        }
        (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_43:
        v18 = (uint64_t)v31;
        if (v31)
        {
          if (v31 == v30)
          {
            *(_QWORD *)&__str[24] = __str;
            (*(void (**)(uint64_t, _QWORD *))(v30[0] + 24))((uint64_t)v30, __str);
LABEL_48:
            v19 = v1 + 104;
            if (__str != (_BYTE *)(v1 + 104))
            {
              v20 = *(_QWORD *)&__str[24];
              v21 = *(_QWORD *)(v1 + 128);
              if (*(_BYTE **)&__str[24] == __str)
              {
                if (v21 == v19)
                {
                  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v36);
                  (*(void (**)(_QWORD))(**(_QWORD **)&__str[24] + 32))(*(_QWORD *)&__str[24]);
                  *(_QWORD *)&__str[24] = 0;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1 + 128) + 24))(*(_QWORD *)(v1 + 128), __str);
                  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 128) + 32))(*(_QWORD *)(v1 + 128));
                  *(_QWORD *)(v1 + 128) = 0;
                  *(_QWORD *)&__str[24] = __str;
                  (*(void (**)(_QWORD *, uint64_t))(v36[0] + 24))(v36, v1 + 104);
                  (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
                }
                else
                {
                  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__str + 24))(__str, v1 + 104);
                  (*(void (**)(_QWORD))(**(_QWORD **)&__str[24] + 32))(*(_QWORD *)&__str[24]);
                  *(_QWORD *)&__str[24] = *(_QWORD *)(v1 + 128);
                }
                *(_QWORD *)(v1 + 128) = v19;
              }
              else if (v21 == v19)
              {
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 24))(v1 + 104, __str);
                (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 128) + 32))(*(_QWORD *)(v1 + 128));
                *(_QWORD *)(v1 + 128) = *(_QWORD *)&__str[24];
                *(_QWORD *)&__str[24] = __str;
              }
              else
              {
                *(_QWORD *)&__str[24] = *(_QWORD *)(v1 + 128);
                *(_QWORD *)(v1 + 128) = v20;
              }
            }
            v22 = *(_QWORD **)&__str[24];
            if (*(_BYTE **)&__str[24] == __str)
            {
              v23 = 4;
              v22 = __str;
            }
            else
            {
              if (!*(_QWORD *)&__str[24])
              {
LABEL_62:
                *(_QWORD *)(v1 + 144) = 5000;
                goto LABEL_63;
              }
              v23 = 5;
            }
            (*(void (**)(void))(*v22 + 8 * v23))();
            goto LABEL_62;
          }
          v18 = (*(uint64_t (**)(void))(*v31 + 16))();
        }
        *(_QWORD *)&__str[24] = v18;
        goto LABEL_48;
      }
      v9 = (*((uint64_t (**)(void))*v34 + 2))();
    }
    *(_QWORD *)&__str[24] = v9;
    goto LABEL_29;
  }
  v10 = SALogObjectGeneral;
  if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v30;
    v12 = 4;
    goto LABEL_67;
  }
  if (*(char *)(v1 + 183) < 0)
    v2 = (_QWORD *)*v2;
  *(_QWORD *)__str = 68289283;
  *(_WORD *)&__str[8] = 2082;
  *(_QWORD *)&__str[10] = "";
  *(_WORD *)&__str[18] = 2081;
  *(_QWORD *)&__str[20] = v2;
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,invalidArgs\", \"history\":%{private, location:escape_only}s}", __str, 0x1Cu);
LABEL_63:
  v11 = v31;
  if (v31 == v30)
  {
    v12 = 4;
    v11 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_68;
    v12 = 5;
  }
LABEL_67:
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_68:
  v24 = v34;
  if (v34 == __p)
  {
    v25 = 4;
    v24 = __p;
  }
  else
  {
    if (!v34)
      goto LABEL_73;
    v25 = 5;
  }
  (*((void (**)(void))*v24 + v25))();
LABEL_73:
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28[0]);
    if (v7)
      return sub_10004E0A0(v1);
  }
  else if (v7)
  {
    return sub_10004E0A0(v1);
  }
  v26 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)__str = 68289026;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", __str, 0x12u);
  }
  return sub_10004E0A0(v1);
}

void sub_10004DFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    sub_100004860(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10004E0A0(uint64_t a1)
{
  double Current;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  double v12;
  void **v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t j;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  void *v35[2];
  uint64_t v36;
  unint64_t v37;
  int v38;
  __int128 __p;
  uint64_t v40;
  double v41[5];
  unint64_t v42;
  int v43;
  char v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[4];
  uint8_t buf[8];
  _BYTE v51[32];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 192));
  Current = CFAbsoluteTimeGetCurrent();
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289539;
    *(_WORD *)v51 = 2082;
    *(_QWORD *)&v51[2] = "";
    *(_WORD *)&v51[10] = 2049;
    *(double *)&v51[12] = Current;
    *(_WORD *)&v51[20] = 2049;
    *(double *)&v51[22] = Current + -604800.0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,deleteOldActivitiesInternal\", \"now\":\"%{private}0.1f\", \"deleteBeforeTsSeconds\":\"%{private}0.1f\"}", buf, 0x26u);
  }
  v47[0] = off_1000F3330;
  v47[1] = a1;
  v48 = v47;
  v45[0] = off_1000F33B0;
  v45[1] = a1;
  v46 = v45;
  sub_10001177C((uint64_t)v49, (uint64_t)v47, (uint64_t)v45);
  v4 = v46;
  if (v46 == v45)
  {
    v5 = 4;
    v4 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = v48;
  if (v48 == v47)
  {
    v7 = 4;
    v6 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  v44 = 0;
  v43 = 0;
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v41[0] = a1;
  v41[1] = Current + -604800.0;
  *(_QWORD *)&v41[2] = &v44;
  *(_QWORD *)&v41[3] = &v43;
  *(_QWORD *)&v41[4] = &v42;
  v42 = 0xBFF0000000000000;
  if (v9 != v10)
  {
    while (!sub_10004FB00(v41, (double *)v9))
    {
      v9 += 40;
      if (v9 == v10)
      {
        v9 = v10;
        goto LABEL_25;
      }
    }
    if (v9 != v10)
    {
      for (i = v9 + 40; i != v10; i += 40)
      {
        if (!sub_10004FB00(v41, (double *)i))
        {
          v12 = *(double *)i;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(i + 8);
          *(double *)v9 = v12;
          v13 = (void **)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            operator delete(*v13);
          v14 = *(_OWORD *)(i + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(i + 32);
          *(_OWORD *)v13 = v14;
          *(_BYTE *)(i + 39) = 0;
          *(_BYTE *)(i + 16) = 0;
          v9 += 40;
        }
      }
    }
  }
LABEL_25:
  v15 = *(uint64_t **)(a1 + 32);
  if ((uint64_t *)v9 != v15)
  {
    sub_100014068((uint64_t)buf, *(uint64_t **)(a1 + 32), v15, v9);
    v9 = v16;
    for (j = *(_QWORD *)(a1 + 32); j != v9; j -= 40)
    {
      if (*(char *)(j - 1) < 0)
        operator delete(*(void **)(j - 24));
    }
    *(_QWORD *)(a1 + 32) = v9;
  }
  if (*(_QWORD *)(a1 + 24) == v9)
  {
    v18 = v42;
    v19 = v43;
    sub_10000E8A0(v35, "{}");
    v37 = v18;
    v38 = v19;
    if (SHIBYTE(v36) < 0)
    {
      sub_100004870(&__p, v35[0], (unint64_t)v35[1]);
    }
    else
    {
      __p = *(_OWORD *)v35;
      v40 = v36;
    }
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 32);
    if (v21 >= v20)
    {
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - *v8) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0x666666666666666)
        sub_100004C50();
      v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - *v8) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x333333333333333)
        v27 = 0x666666666666666;
      else
        v27 = v25;
      *(_QWORD *)&v51[24] = a1 + 40;
      if (v27)
        v28 = (char *)sub_100011E8C(a1 + 40, v27);
      else
        v28 = 0;
      v29 = &v28[40 * v24];
      *(_QWORD *)buf = v28;
      *(_QWORD *)v51 = v29;
      *(_QWORD *)&v51[16] = &v28[40 * v27];
      v30 = v37;
      *((_DWORD *)v29 + 2) = v38;
      *(_QWORD *)v29 = v30;
      v31 = __p;
      *((_QWORD *)v29 + 4) = v40;
      *((_OWORD *)v29 + 1) = v31;
      v40 = 0;
      __p = 0uLL;
      *(_QWORD *)&v51[8] = v29 + 40;
      sub_10004FCE4((uint64_t *)(a1 + 24), buf);
      v32 = *(_QWORD *)(a1 + 32);
      sub_1000120FC((uint64_t)buf);
      v33 = SHIBYTE(v40);
      *(_QWORD *)(a1 + 32) = v32;
      if (v33 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v22 = v37;
      *(_DWORD *)(v21 + 8) = v38;
      *(_QWORD *)v21 = v22;
      v23 = __p;
      *(_QWORD *)(v21 + 32) = v40;
      *(_OWORD *)(v21 + 16) = v23;
      v40 = 0;
      __p = 0uLL;
      *(_QWORD *)(a1 + 32) = v21 + 40;
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
  }
  if (v44)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(a1 + 71))
        return sub_100012184(v49);
      goto LABEL_56;
    }
    if (*(_QWORD *)(a1 + 56))
LABEL_56:
      sub_100013194((char *)a1);
  }
  return sub_100012184(v49);
}

void sub_10004E520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  if (a15 < 0)
    operator delete(__p);
  sub_100012184((_QWORD *)(v38 - 160));
  _Unwind_Resume(a1);
}

void sub_10004E5E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10004E0A0(v1);
  *(_BYTE *)v1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v1 + 8) = _Q0;
  *(_BYTE *)(v1 + 152) = 0;
  sub_10000E854((uint64_t *)(v1 + 24));
}

void sub_10004E620(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  int v11;

  v5 = a3;
  v6 = *(NSObject **)(a1 + 192);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E6AC;
  block[3] = &unk_1000F31C0;
  v11 = a2;
  v9 = v5;
  v10 = a1;
  v7 = v5;
  dispatch_async(v6, block);

}

void sub_10004E6AC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  SACommonUtils *v3;
  NSObject *v4;
  CFAbsoluteTime Current;
  void *__p[2];
  uint64_t v7;
  uint8_t buf[8];
  _BYTE v9[32];

  v1 = *(_DWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (SACommonUtils *)*(id *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 192));
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v9 = 2082;
    *(_QWORD *)&v9[2] = "";
    *(_WORD *)&v9[10] = 1025;
    *(_DWORD *)&v9[12] = v1;
    *(_WORD *)&v9[16] = 2113;
    *(_QWORD *)&v9[18] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,updateNetworkActivityInternal\", \"networkActivityType\":%{private}d, \"metaVal\":%{private, location:escape_only}@}", buf, 0x22u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  SACommonUtils::convertDictionaryToString(v3, (uint64_t)__p);
  *(CFAbsoluteTime *)buf = Current;
  *(_DWORD *)v9 = v1;
  if (SHIBYTE(v7) < 0)
  {
    sub_100004870(&v9[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v9[8] = *(_OWORD *)__p;
    *(_QWORD *)&v9[24] = v7;
  }
  sub_10000A914(v2, (double *)buf);
  if ((v9[31] & 0x80000000) != 0)
    operator delete(*(void **)&v9[8]);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);

}

void sub_10004E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10004E864(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  __int16 v6;
  const char *v7;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 192));
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 68289026;
    v5 = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,onFirstUnlockInternal\"}", (uint8_t *)&v4, 0x12u);
  }
  if (*(_BYTE *)(v1 + 184))
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,onFirstUnlock,skip\"}", (uint8_t *)&v4, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(v1 + 184) = 1;
    if (*(_BYTE *)(v1 + 1))
      sub_100013708(v1);
  }
}

void sub_10004E9A8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 192));
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,submitMetricsInternal\"}", (uint8_t *)v6, 0x12u);
  }
  v3 = (double)(86400 * ((uint64_t)(double)time(0) / 86400)) + -978307200.0;
  v4 = (double)((uint64_t)v3 - 86400);
  v5 = (double)(uint64_t)v3;
  sub_10004EB08(v1, 0, v4, v5);
  sub_10004EB08(v1, 2, v4, v5);
  sub_10004EB08(v1, 1, v4, v5);
}

void sub_10004EB08(uint64_t a1, int a2, double a3, double a4)
{
  os_log_t *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  _BOOL4 v41;
  void *v42;
  uint64_t v43;
  unsigned int v44;
  NSObject *v45;
  os_log_t *v46;
  NSObject *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  _QWORD v57[4];
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8_t buf[8];
  _BYTE v68[32];
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  int v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;
  __int16 v85;
  const char *v86;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 192));
  v8 = (os_log_t *)&SALogObjectGeneral;
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v68 = 2082;
    *(_QWORD *)&v68[2] = "";
    *(_WORD *)&v68[10] = 2049;
    *(double *)&v68[12] = a3;
    *(_WORD *)&v68[20] = 2049;
    *(double *)&v68[22] = a4;
    *(_WORD *)&v68[30] = 1025;
    v69 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,submitMetricInternal\", \"startTimeSeconds\":\"%{private}0.1f\", \"endTimeSeconds\":\"%{private}0.1f\", \"networkActivityType\":%{private}d}", buf, 0x2Cu);
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v82[0] = off_1000F3430;
  v82[1] = a1;
  v83 = v82;
  v80[0] = off_1000F34B0;
  v80[1] = a1;
  v81 = v80;
  sub_10001177C((uint64_t)&v84, (uint64_t)v82, (uint64_t)v80);
  v10 = v81;
  if (v81 == v80)
  {
    v11 = 4;
    v10 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v12 = v83;
  if (v83 == v82)
  {
    v13 = 4;
    v12 = v82;
    goto LABEL_12;
  }
  if (v83)
  {
    v13 = 5;
LABEL_12:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v14 = v64;
  v65 = v64;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  if (v15 == v16 || !*(_BYTE *)a1)
  {
    v30 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    v31 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v31 = (_QWORD *)*v31;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v68 = 2082;
    *(_QWORD *)&v68[2] = "";
    *(_WORD *)&v68[10] = 2081;
    *(_QWORD *)&v68[12] = v31;
    v27 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllEventsStrictlyWithin,skipping,notReady\", \"history\":%"
          "{private, location:escape_only}s}";
    v28 = v30;
    v29 = 28;
    goto LABEL_42;
  }
  do
  {
    if (*(double *)v15 >= a3 && *(double *)v15 <= a4)
    {
      if (v14 >= v66)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - v64) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666)
          sub_100004C50();
        if (0x999999999999999ALL * ((uint64_t)(v66 - v64) >> 3) > v19)
          v19 = 0x999999999999999ALL * ((uint64_t)(v66 - v64) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - v64) >> 3) >= 0x333333333333333)
          v20 = 0x666666666666666;
        else
          v20 = v19;
        *(_QWORD *)&v68[24] = &v66;
        if (v20)
          v21 = (char *)sub_100011E8C((uint64_t)&v66, v20);
        else
          v21 = 0;
        v22 = &v21[40 * v18];
        *(_QWORD *)buf = v21;
        *(_QWORD *)v68 = v22;
        *(_QWORD *)&v68[8] = v22;
        *(_QWORD *)&v68[16] = &v21[40 * v20];
        v23 = *(_QWORD *)v15;
        *((_DWORD *)v22 + 2) = *(_DWORD *)(v15 + 8);
        *(_QWORD *)v22 = v23;
        v24 = v22 + 16;
        if (*(char *)(v15 + 39) < 0)
        {
          sub_100004870(v24, *(void **)(v15 + 16), *(_QWORD *)(v15 + 24));
          v22 = *(char **)&v68[8];
        }
        else
        {
          v25 = *(_OWORD *)(v15 + 16);
          *((_QWORD *)v22 + 4) = *(_QWORD *)(v15 + 32);
          *(_OWORD *)v24 = v25;
        }
        *(_QWORD *)&v68[8] = v22 + 40;
        sub_10004FCE4((uint64_t *)&v64, buf);
        v14 = v65;
        sub_1000120FC((uint64_t)buf);
      }
      else
      {
        sub_1000140F4((uint64_t)&v64, (uint64_t *)v15);
        v14 += 40;
      }
      v65 = v14;
    }
    v15 += 40;
  }
  while (v15 != v16);
  v26 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v68 = 2082;
    *(_QWORD *)&v68[2] = "";
    *(_WORD *)&v68[10] = 1025;
    *(_DWORD *)&v68[12] = -858993459 * ((v14 - v64) >> 3);
    v27 = "{\"msg%{public}.0s\":\"#saEventHistory,findAllEventsStrictlyWithin\", \"responseSize\":%{private}d}";
    v28 = v26;
    v29 = 24;
LABEL_42:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
  }
LABEL_43:
  sub_100012184(&v84);
  v32 = v65;
  if (v64 != v65)
  {
    v55 = 0;
    v56 = 0;
    v33 = v64 + 16;
    while (1)
    {
      v35 = v33 - 16;
      v34 = *(_QWORD *)(v33 - 16);
      *(_DWORD *)v68 = *(_DWORD *)(v33 - 8);
      *(_QWORD *)buf = v34;
      if (*(char *)(v33 + 23) < 0)
      {
        sub_100004870(&v68[8], *(void **)v33, *(_QWORD *)(v33 + 8));
      }
      else
      {
        v36 = *(_OWORD *)v33;
        *(_QWORD *)&v68[24] = *(_QWORD *)(v33 + 16);
        *(_OWORD *)&v68[8] = v36;
      }
      if (*(_DWORD *)v68 != a2)
        goto LABEL_64;
      v37 = SACommonUtils::convertStringToDictionary((uint64_t *)&v68[8]);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v39 = v38;
      if (!v38
        || (v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("status"))),
            v41 = v40 == 0,
            v40,
            v41))
      {
        v45 = *v8;
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          v84 = 68289026;
          v85 = 2082;
          v86 = "";
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nam,submitMetricInternal,activity status does not exist\"}", (uint8_t *)&v84, 0x12u);
        }
        goto LABEL_63;
      }
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "objectForKey:", CFSTR("status")));
      v43 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v42, v43) & 1) == 0)
        break;
      v44 = objc_msgSend(v42, "intValue");
      if (!v44)
      {
        ++v55;
        goto LABEL_62;
      }
      if (v44 == 1)
      {
        LODWORD(v56) = v56 + 1;
        goto LABEL_62;
      }
      if (v44 != 2)
      {
        v46 = v8;
        v51 = *v8;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          v84 = 68289026;
          v85 = 2082;
          v86 = "";
          v48 = v51;
          v49 = OS_LOG_TYPE_DEFAULT;
          v50 = "{\"msg%{public}.0s\":\"#nam,submitMetricInternal,#warning,activity not supported\"}";
LABEL_60:
          _os_log_impl((void *)&_mh_execute_header, v48, v49, v50, (uint8_t *)&v84, 0x12u);
        }
        goto LABEL_61;
      }
      ++HIDWORD(v56);
LABEL_62:

LABEL_63:
LABEL_64:
      if ((v68[31] & 0x80000000) != 0)
        operator delete(*(void **)&v68[8]);
      v33 += 40;
      if (v35 + 40 == v32)
        goto LABEL_73;
    }
    v46 = v8;
    v47 = *v8;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v84 = 68289026;
      v85 = 2082;
      v86 = "";
      v48 = v47;
      v49 = OS_LOG_TYPE_ERROR;
      v50 = "{\"msg%{public}.0s\":\"#nam,submitMetricInternal,activity status is not a number\"}";
      goto LABEL_60;
    }
LABEL_61:
    v8 = v46;
    goto LABEL_62;
  }
  v56 = 0;
  v55 = 0;
LABEL_73:
  v52 = vcvtmd_s64_f64((double)v55 * 100.0 / (double)(v55 + (int)v56));
  v53 = vcvtmd_s64_f64((double)(int)v56 * 100.0 / (double)(v55 + (int)v56));
  v54 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68291075;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v68 = 2082;
    *(_QWORD *)&v68[2] = "";
    *(_WORD *)&v68[10] = 2049;
    *(double *)&v68[12] = a3;
    *(_WORD *)&v68[20] = 2049;
    *(double *)&v68[22] = a4;
    *(_WORD *)&v68[30] = 1025;
    v69 = a2;
    v70 = 1025;
    v71 = v55 + v56 + HIDWORD(v56);
    v72 = 1025;
    v73 = v55 + v56;
    v74 = 1025;
    v75 = v52;
    v76 = 1025;
    v77 = v53;
    v78 = 1025;
    v79 = HIDWORD(v56);
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nam,submitMetricInternal\", \"startTimeSeconds\":\"%{private}0.1f\", \"endTimeSeconds\":\"%{private}0.1f\", \"networkActivityType\":%{private}d, \"totalCount\":%{private}d, \"totalAttemptedActicityCount\":%{private}d, \"successRate\":%{private}d, \"failureRate\":%{private}d, \"droppedCount\":%{private}d}", buf, 0x4Au);
  }
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_10004F3C8;
  v57[3] = &unk_1000F31E0;
  v58 = a2;
  v59 = v55 + v56 + HIDWORD(v56);
  v60 = v55 + v56;
  v61 = v52;
  v62 = v53;
  v63 = HIDWORD(v56);
  AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.networkActivity"), v57);
  *(_QWORD *)buf = &v64;
  sub_10000E814((void ***)buf);
}

void sub_10004F2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  *(_QWORD *)(v39 - 160) = &a20;
  sub_10000E814((void ***)(v39 - 160));
  _Unwind_Resume(a1);
}

id sub_10004F3C8(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __int128 *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v14[7];
  _QWORD v15[7];

  v14[0] = CFSTR("networkActivityType");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]));
  v15[0] = v2;
  v14[1] = CFSTR("totalCount");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]));
  v15[1] = v3;
  v14[2] = CFSTR("totalAttemptedActicityCount");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]));
  v15[2] = v4;
  v14[3] = CFSTR("successRate");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[11]));
  v15[3] = v5;
  v14[4] = CFSTR("failureRate");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[12]));
  v15[4] = v6;
  v14[5] = CFSTR("activityDroppedCount");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[13]));
  v15[5] = v7;
  v14[6] = CFSTR("isEnhancedDeliveryEnabled");
  v8 = sub_100003038();
  if (*((_BYTE *)v8 + 109))
    v9 = *((_BYTE *)v8 + 108) == 0;
  else
    v9 = 1;
  v10 = !v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10));
  v15[6] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 7));

  return v12;
}

void sub_10004F588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_10004F5EC()
{
  operator delete();
}

_QWORD *sub_10004F600()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3210;
  return result;
}

void sub_10004F624(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3210;
}

uint64_t sub_10004F63C(uint64_t a1, int *a2, uint64_t a3)
{
  std::string v5;

  std::to_string(&v5, *a2);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v5;
  return 1;
}

uint64_t sub_10004F690(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10004F6CC()
{
}

void sub_10004F6DC()
{
  operator delete();
}

_QWORD *sub_10004F6F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F32A0;
  return result;
}

void sub_10004F714(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F32A0;
}

uint64_t sub_10004F72C(uint64_t a1, uint64_t a2, int *a3)
{
  char *v4;
  char *v6[2];
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004870(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  if (SHIBYTE(v7) < 0)
  {
    v4 = v6[0];
    *a3 = atoi(v6[0]);
    operator delete(v4);
  }
  else
  {
    *a3 = atoi((const char *)v6);
  }
  return 1;
}

uint64_t sub_10004F7B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10004F7EC()
{
}

void sub_10004F7FC()
{
  operator delete();
}

_QWORD *sub_10004F810(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3330;
  result[1] = v3;
  return result;
}

uint64_t sub_10004F844(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3330;
  a2[1] = v2;
  return result;
}

void sub_10004F860(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_10004F92C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10004F968()
{
}

void sub_10004F978()
{
  operator delete();
}

_QWORD *sub_10004F98C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F33B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10004F9C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F33B0;
  a2[1] = v2;
  return result;
}

__n128 sub_10004F9DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_10004FAB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10004FAF4()
{
}

BOOL sub_10004FB00(double *a1, double *a2)
{
  double v3;
  uint64_t v4;
  _DWORD *v6;
  double v7;
  double v8;
  double *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  const char *p_p;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BOOL4 v32;

  v3 = *a1;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)&v3 + 96);
  if (!v4)
    sub_100004FB0();
  v6 = a2 + 1;
  (*(void (**)(uint64_t, double *, void **))(*(_QWORD *)v4 + 48))(v4, a2 + 1, &__p);
  v7 = *a2;
  v8 = a1[1];
  if (*a2 < v8)
    **((_BYTE **)a1 + 2) = 1;
  v9 = (double *)*((_QWORD *)a1 + 4);
  if (*v9 < v7)
  {
    *v9 = v7;
    **((_DWORD **)a1 + 3) = *v6;
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v11 = (_QWORD *)(*(_QWORD *)&v3 + 160);
    if (*(char *)(*(_QWORD *)&v3 + 183) < 0)
      v11 = (_QWORD *)*v11;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *a2;
    if (SHIBYTE(v18) < 0)
    {
      if (v17)
        p_p = (const char *)__p;
      else
        p_p = "";
    }
    else
    {
      p_p = (const char *)&__p;
      if (!HIBYTE(v18))
        p_p = "";
    }
    *(_DWORD *)buf = 68290307;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v11;
    v25 = 2049;
    v26 = v12;
    v27 = 2049;
    v28 = v13;
    v29 = 2081;
    v30 = p_p;
    v31 = 1025;
    v32 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saEventHistory,cleanup\", \"history\":%{private, location:escape_only}s, \"before\":\"%{private}0.1f\", \"ts\":\"%{private}0.1f\", \"value\":%{private, location:escape_only}s, \"remove\":%{private}hhd}", buf, 0x40u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return v7 < v8;
}

void sub_10004FCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004FCE4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000144C8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_10004FD5C()
{
  operator delete();
}

_QWORD *sub_10004FD70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3430;
  result[1] = v3;
  return result;
}

uint64_t sub_10004FDA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3430;
  a2[1] = v2;
  return result;
}

void sub_10004FDC0(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100013708((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_10004FE8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004FEC8()
{
}

void sub_10004FED8()
{
  operator delete();
}

_QWORD *sub_10004FEEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F34B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10004FF20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F34B0;
  a2[1] = v2;
  return result;
}

__n128 sub_10004FF3C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100050018(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100050054()
{
}

uint64_t sub_100050060(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_buf;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  NSObject *v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  NSObject *v77;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  NSObject *v86;
  std::string *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  NSObject *v95;
  std::string *v96;
  uint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  NSObject *v103;
  std::string *v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  NSObject *v110;
  std::string *v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v119;
  void **v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  _QWORD v125[3];
  _QWORD *v126;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _QWORD v137[3];
  _QWORD *v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  _QWORD v145[3];
  _QWORD *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  _QWORD v151[3];
  _QWORD *v152;
  _QWORD v153[3];
  _QWORD *v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _QWORD v159[3];
  _QWORD *v160;
  std::string buf;
  __int128 v162;
  uint64_t v163;
  __int128 __p;
  uint64_t v165;
  _QWORD v166[3];
  _QWORD *v167;
  _QWORD v168[3];
  _QWORD *v169;
  __int128 v170;
  char v171;
  __int128 v172;
  uint64_t v173;
  __int16 v174;

  v119 = sub_100010374(a1) + 192;
  sub_100010374(v119);
  sub_100010374(a1 + 384);
  sub_100010374(a1 + 576);
  sub_100054E18(a1 + 768);
  sub_100054E18(a1 + 960);
  sub_1000254FC(a1 + 1152);
  sub_1000254FC(a1 + 1344);
  sub_1000254FC(a1 + 1536);
  sub_1000254FC(a1 + 1728);
  *(_QWORD *)(a1 + 1920) = 0;
  v2 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,initialized\"}", (uint8_t *)&buf, 0x12u);
  }

  sub_100010374((uint64_t)&buf);
  *(std::string *)a1 = buf;
  v9 = (void **)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000E854((uint64_t *)(a1 + 24));
    operator delete(*v9);
    *v9 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = v162;
  *(_QWORD *)(a1 + 40) = v163;
  v163 = 0;
  v162 = 0uLL;
  v10 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = __p;
  *(_QWORD *)(a1 + 64) = v165;
  HIBYTE(v165) = 0;
  LOBYTE(__p) = 0;
  v12 = (_QWORD *)(a1 + 96);
  v11 = *(_QWORD **)(a1 + 96);
  v13 = v166;
  *(_QWORD *)(a1 + 96) = 0;
  if (v11 == (_QWORD *)(a1 + 72))
  {
    v14 = 4;
    v11 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v11)
      goto LABEL_12;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 8 * v14))(v11, v3, v4, v5, v6, v7, v8);
LABEL_12:
  if (!v167)
  {
LABEL_15:
    *v12 = 0;
    goto LABEL_17;
  }
  if (v167 != v166)
  {
    *v12 = v167;
    v12 = &v167;
    goto LABEL_15;
  }
  *v12 = a1 + 72;
  (*(void (**)(_QWORD *, uint64_t))(v166[0] + 24))(v166, a1 + 72);
LABEL_17:
  v16 = (_QWORD *)(a1 + 128);
  v15 = *(_QWORD **)(a1 + 128);
  v17 = v168;
  *(_QWORD *)(a1 + 128) = 0;
  if (v15 == (_QWORD *)(a1 + 104))
  {
    v18 = 4;
    v15 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v15)
      goto LABEL_22;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v18))(v15, v3, v4, v5, v6, v7, v8);
LABEL_22:
  if (!v169)
  {
LABEL_25:
    *v16 = 0;
    goto LABEL_27;
  }
  if (v169 != v168)
  {
    *v16 = v169;
    v16 = &v169;
    goto LABEL_25;
  }
  *v16 = a1 + 104;
  (*(void (**)(_QWORD *, uint64_t))(v168[0] + 24))(v168, a1 + 104);
LABEL_27:
  *(_OWORD *)(a1 + 136) = v170;
  *(_BYTE *)(a1 + 152) = v171;
  v19 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v172;
  v20 = v169;
  *(_QWORD *)(a1 + 176) = v173;
  HIBYTE(v173) = 0;
  LOBYTE(v172) = 0;
  *(_WORD *)(a1 + 184) = v174;
  if (v20 == v168)
  {
    v21 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_34;
    v21 = 5;
    v17 = v20;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v21))(v17);
LABEL_34:
  if (v167 == v166)
  {
    v22 = 4;
  }
  else
  {
    if (!v167)
      goto LABEL_39;
    v22 = 5;
    v13 = v167;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v22))(v13);
LABEL_39:
  if (SHIBYTE(v165) < 0)
    operator delete((void *)__p);
  v120 = (void **)&v162;
  sub_10000E814(&v120);
  sub_10000E8A0(&buf, "ls");
  std::string::operator=((std::string *)(a1 + 160), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 136) = 200;
  sub_100051AE8(&buf, "ls.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  v159[0] = off_1000F3550;
  v160 = v159;
  v157[0] = off_1000F35E0;
  v158 = v157;
  v30 = sub_100051660(a1, (char *)p_buf, v159, v157);
  v31 = v158;
  if (v158 == v157)
  {
    v32 = 4;
    v31 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_51;
    v32 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v31 + 8 * v32))(v31, v24, v25, v26, v27, v28, v29);
LABEL_51:
  v33 = v160;
  if (v160 == v159)
  {
    v34 = 4;
    v33 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_56;
    v34 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v33 + 8 * v34))(v33, v24, v25, v26, v27, v28, v29);
LABEL_56:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v30 & 1) != 0)
      goto LABEL_63;
  }
  else if ((v30 & 1) != 0)
  {
    goto LABEL_63;
  }
  v35 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_63:
  sub_10000E8A0(&buf, "pushp");
  std::string::operator=((std::string *)(a1 + 352), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 193) = 0;
  *(_QWORD *)(a1 + 328) = 200;
  sub_100051AE8(&buf, "pushp.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &buf;
  else
    v36 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v155[0] = off_1000F3550;
  v156 = v155;
  v153[0] = off_1000F35E0;
  v154 = v153;
  v42 = sub_100051660(v119, (char *)v36, v155, v153);
  v43 = v154;
  if (v154 == v153)
  {
    v44 = 4;
    v43 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_73;
    v44 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v43 + 8 * v44))(v43, v37, v38, v39, v40, v41);
LABEL_73:
  v45 = v156;
  if (v156 == v155)
  {
    v46 = 4;
    v45 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_78;
    v46 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v45 + 8 * v46))(v45, v37, v38, v39, v40, v41);
LABEL_78:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v42 & 1) != 0)
      goto LABEL_85;
  }
  else if ((v42 & 1) != 0)
  {
    goto LABEL_85;
  }
  v47 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_85:
  sub_10000E8A0(&buf, "sub");
  std::string::operator=((std::string *)(a1 + 544), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 385) = 0;
  *(_QWORD *)(a1 + 520) = 200;
  sub_100051AE8(&buf, "sub.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &buf;
  else
    v48 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v151[0] = off_1000F3550;
  v152 = v151;
  v149[0] = off_1000F35E0;
  v150 = v149;
  v53 = sub_100051660(a1 + 384, (char *)v48, v151, v149);
  v54 = v150;
  if (v150 == v149)
  {
    v55 = 4;
    v54 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_95;
    v55 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v54 + 8 * v55))(v54, v49, v50, v51, v52);
LABEL_95:
  v56 = v152;
  if (v152 == v151)
  {
    v57 = 4;
    v56 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_100;
    v57 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v56 + 8 * v57))(v56, v49, v50, v51, v52);
LABEL_100:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v53 & 1) != 0)
      goto LABEL_107;
  }
  else if ((v53 & 1) != 0)
  {
    goto LABEL_107;
  }
  v58 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_107:
  sub_10000E8A0(&buf, "wea_received");
  std::string::operator=((std::string *)(a1 + 1504), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1345) = 0;
  *(_QWORD *)(a1 + 1480) = 2000;
  sub_100051AE8(&buf, "wea_received.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &buf;
  else
    v59 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v148 = v147;
  v145[0] = off_1000F3670;
  v146 = v145;
  v147[0] = off_1000F3670;
  v63 = sub_100023004(a1 + 1344, (char *)v59, 0x1388uLL, (uint64_t)v147, (uint64_t)v145);
  v64 = v146;
  if (v146 == v145)
  {
    v65 = 4;
    v64 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_117;
    v65 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v64 + 8 * v65))(v64, v60, v61, v62);
LABEL_117:
  v66 = v148;
  if (v148 == v147)
  {
    v67 = 4;
    v66 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_122;
    v67 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v66 + 8 * v67))(v66, v60, v61, v62);
LABEL_122:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v63 & 1) != 0)
      goto LABEL_129;
  }
  else if ((v63 & 1) != 0)
  {
    goto LABEL_129;
  }
  v68 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_129:
  sub_10000E8A0(&buf, "wea_displayed");
  std::string::operator=((std::string *)(a1 + 1312), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1153) = 0;
  *(_QWORD *)(a1 + 1288) = 2000;
  sub_100051AE8(&buf, "wea_displayed.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &buf;
  else
    v69 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v144 = v143;
  v141[0] = off_1000F3670;
  v142 = v141;
  v143[0] = off_1000F3670;
  v72 = sub_100023004(a1 + 1152, (char *)v69, 0x1388uLL, (uint64_t)v143, (uint64_t)v141);
  v73 = v142;
  if (v142 == v141)
  {
    v74 = 4;
    v73 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_139;
    v74 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v73 + 8 * v74))(v73, v70, v71);
LABEL_139:
  v75 = v144;
  if (v144 == v143)
  {
    v76 = 4;
    v75 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_144;
    v76 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v75 + 8 * v76))(v75, v70, v71);
LABEL_144:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v72 & 1) != 0)
      goto LABEL_151;
  }
  else if ((v72 & 1) != 0)
  {
    goto LABEL_151;
  }
  v77 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_151:
  sub_10000E8A0(&buf, "sa");
  std::string::operator=((std::string *)(a1 + 1696), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1537) = 0;
  *(_QWORD *)(a1 + 1672) = 2000;
  sub_100051AE8(&buf, "sa.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &buf;
  else
    v78 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v140 = v139;
  v137[0] = off_1000F3670;
  v138 = v137;
  v139[0] = off_1000F3670;
  v81 = sub_100023004(a1 + 1536, (char *)v78, 0x1388uLL, (uint64_t)v139, (uint64_t)v137);
  v82 = v138;
  if (v138 == v137)
  {
    v83 = 4;
    v82 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_161;
    v83 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v82 + 8 * v83))(v82, v79, v80);
LABEL_161:
  v84 = v140;
  if (v140 == v139)
  {
    v85 = 4;
    v84 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_166;
    v85 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v84 + 8 * v85))(v84, v79, v80);
LABEL_166:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v81 & 1) != 0)
      goto LABEL_173;
  }
  else if ((v81 & 1) != 0)
  {
    goto LABEL_173;
  }
  v86 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_173:
  sub_10000E8A0(&buf, "ig");
  std::string::operator=((std::string *)(a1 + 1888), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 1729) = 0;
  *(_QWORD *)(a1 + 1864) = 2000;
  sub_100051AE8(&buf, "ig.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = &buf;
  else
    v87 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v136 = v135;
  v133[0] = off_1000F3670;
  v134 = v133;
  v135[0] = off_1000F3670;
  v90 = sub_100023004(a1 + 1728, (char *)v87, 0x1388uLL, (uint64_t)v135, (uint64_t)v133);
  v91 = v134;
  if (v134 == v133)
  {
    v92 = 4;
    v91 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_183;
    v92 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v91 + 8 * v92))(v91, v88, v89);
LABEL_183:
  v93 = v136;
  if (v136 == v135)
  {
    v94 = 4;
    v93 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_188;
    v94 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v93 + 8 * v94))(v93, v88, v89);
LABEL_188:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v90 & 1) != 0)
      goto LABEL_195;
  }
  else if ((v90 & 1) != 0)
  {
    goto LABEL_195;
  }
  v95 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_195:
  sub_10000E8A0(&buf, "ig_sub");
  std::string::operator=((std::string *)(a1 + 736), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 577) = 0;
  *(_QWORD *)(a1 + 712) = 200;
  sub_100051AE8(&buf, "ig_sub.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = &buf;
  else
    v96 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v132 = v131;
  v129[0] = off_1000F35E0;
  v130 = v129;
  v131[0] = off_1000F3550;
  v98 = sub_100051660(a1 + 576, (char *)v96, v131, v129);
  v99 = v130;
  if (v130 == v129)
  {
    v100 = 4;
    v99 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_205;
    v100 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v99 + 8 * v100))(v99, v97);
LABEL_205:
  v101 = v132;
  if (v132 == v131)
  {
    v102 = 4;
    v101 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_210;
    v102 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v101 + 8 * v102))(v101, v97);
LABEL_210:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v98 & 1) != 0)
      goto LABEL_217;
  }
  else if ((v98 & 1) != 0)
  {
    goto LABEL_217;
  }
  v103 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_217:
  sub_10000E8A0(&buf, "slc");
  std::string::operator=((std::string *)(a1 + 928), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 769) = 0;
  *(_QWORD *)(a1 + 904) = 2000;
  sub_100051AE8(&buf, "slc.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v104 = &buf;
  else
    v104 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v128 = v127;
  v125[0] = off_1000F3780;
  v126 = v125;
  v127[0] = off_1000F36F0;
  v105 = sub_100051BC4(a1 + 768, (char *)v104, v127, v125);
  v106 = v126;
  if (v126 == v125)
  {
    v107 = 4;
    v106 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_227;
    v107 = 5;
  }
  (*(void (**)(_QWORD *))(*v106 + 8 * v107))(v106);
LABEL_227:
  v108 = v128;
  if (v128 == v127)
  {
    v109 = 4;
    v108 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_232;
    v109 = 5;
  }
  (*(void (**)(_QWORD *))(*v108 + 8 * v109))(v108);
LABEL_232:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v105 & 1) != 0)
      goto LABEL_239;
  }
  else if ((v105 & 1) != 0)
  {
    goto LABEL_239;
  }
  v110 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

LABEL_239:
  sub_10000E8A0(&buf, "submission_timestamp");
  std::string::operator=((std::string *)(a1 + 1120), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 961) = 0;
  *(_QWORD *)(a1 + 1096) = 2000;
  sub_100051AE8(&buf, "submission_timestamp.elog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v111 = &buf;
  else
    v111 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v124 = v123;
  v121[0] = off_1000F3780;
  v122 = v121;
  v123[0] = off_1000F36F0;
  v112 = sub_100051BC4(a1 + 960, (char *)v111, v123, v121);
  v113 = v122;
  if (v122 == v121)
  {
    v114 = 4;
    v113 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_249;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_249:
  v115 = v124;
  if (v124 == v123)
  {
    v116 = 4;
    v115 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_254;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_254:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v112 & 1) != 0)
      return a1;
  }
  else if ((v112 & 1) != 0)
  {
    return a1;
  }
  v117 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,#warning,persistentStorageConfigFailed\"}", (uint8_t *)&buf, 0x12u);
  }

  return a1;
}

void sub_100051204(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

void sub_100051610()
{
  JUMPOUT(0x1000515C0);
}

void sub_100051618()
{
  JUMPOUT(0x1000515C8);
}

void sub_100051620()
{
  JUMPOUT(0x1000515D0);
}

void sub_100051628()
{
  JUMPOUT(0x1000515D8);
}

void sub_100051630()
{
  JUMPOUT(0x1000515E0);
}

void sub_100051638()
{
  JUMPOUT(0x1000515E8);
}

void sub_100051640()
{
  JUMPOUT(0x1000515F0);
}

void sub_100051648()
{
  JUMPOUT(0x1000515F8);
}

void sub_100051650()
{
  JUMPOUT(0x100051600);
}

void sub_100051658()
{
  JUMPOUT(0x100051608);
}

uint64_t sub_100051660(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  void **v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[32];
  _QWORD v25[3];

  if (a2 && a3[3] && a4[3])
  {
    sub_10000E8A0(v24, a2);
    v7 = (void **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)v24;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)&v24[16];
    v8 = (_QWORD *)a3[3];
    if (v8)
    {
      if (v8 == a3)
      {
        *(_QWORD *)&v24[24] = v24;
        (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v24);
      }
      else
      {
        *(_QWORD *)&v24[24] = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
      }
    }
    else
    {
      *(_QWORD *)&v24[24] = 0;
    }
    v13 = a1 + 72;
    if (v24 != (_BYTE *)(a1 + 72))
    {
      v14 = *(_QWORD *)&v24[24];
      v15 = *(_QWORD *)(a1 + 96);
      if (*(_BYTE **)&v24[24] == v24)
      {
        if (v15 == v13)
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v24 + 24))(v24, v25);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = 0;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)&v24[24] = v24;
          (*(void (**)(_QWORD *, uint64_t))(v25[0] + 24))(v25, a1 + 72);
          (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v24 + 24))(v24, a1 + 72);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 96);
        }
        *(_QWORD *)(a1 + 96) = v13;
      }
      else if (v15 == v13)
      {
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 24))(a1 + 72, v24);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
        *(_QWORD *)(a1 + 96) = *(_QWORD *)&v24[24];
        *(_QWORD *)&v24[24] = v24;
      }
      else
      {
        *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v14;
      }
    }
    v16 = *(_QWORD **)&v24[24];
    if (*(_BYTE **)&v24[24] == v24)
    {
      v17 = 4;
      v16 = v24;
    }
    else
    {
      if (!*(_QWORD *)&v24[24])
        goto LABEL_29;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_29:
    v18 = (_QWORD *)a4[3];
    if (v18)
    {
      if (v18 == a4)
      {
        *(_QWORD *)&v24[24] = v24;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v24);
      }
      else
      {
        *(_QWORD *)&v24[24] = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      }
    }
    else
    {
      *(_QWORD *)&v24[24] = 0;
    }
    v19 = a1 + 104;
    if (v24 != (_BYTE *)(a1 + 104))
    {
      v20 = *(_QWORD *)&v24[24];
      v21 = *(_QWORD *)(a1 + 128);
      if (*(_BYTE **)&v24[24] == v24)
      {
        if (v21 == v19)
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v24 + 24))(v24, v25);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = 0;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128), v24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)&v24[24] = v24;
          (*(void (**)(_QWORD *, uint64_t))(v25[0] + 24))(v25, a1 + 104);
          (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v24 + 24))(v24, a1 + 104);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 128);
        }
        *(_QWORD *)(a1 + 128) = v19;
      }
      else if (v21 == v19)
      {
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 24))(a1 + 104, v24);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
        *(_QWORD *)(a1 + 128) = *(_QWORD *)&v24[24];
        *(_QWORD *)&v24[24] = v24;
      }
      else
      {
        *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v20;
      }
    }
    v22 = *(_QWORD **)&v24[24];
    if (*(_BYTE **)&v24[24] == v24)
    {
      v23 = 4;
      v22 = v24;
    }
    else
    {
      if (!*(_QWORD *)&v24[24])
      {
LABEL_48:
        *(_QWORD *)(a1 + 144) = 64;
        return 1;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_48;
  }
  v9 = SALogObjectGeneral;
  v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    v12 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v12 = (_QWORD *)*v12;
    *(_QWORD *)v24 = 68289283;
    *(_WORD *)&v24[8] = 2082;
    *(_QWORD *)&v24[10] = "";
    *(_WORD *)&v24[18] = 2081;
    *(_QWORD *)&v24[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,invalidArgs\", \"history\":%{private, location:escape_only}s}", v24, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_100051AD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

void sub_100051AE8(std::string *a1, char *a2)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *__p[2];
  unsigned __int8 v8;
  std::string v9;

  sub_10000E8A0(&v9, "/var/mobile/Library/com.apple.safetyalerts/");
  sub_10000E8A0(__p, a2);
  if ((v8 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_100051B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051BC4(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  void **v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[32];
  _QWORD v25[3];

  if (a2 && a3[3] && a4[3])
  {
    sub_10000E8A0(v24, a2);
    v7 = (void **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)v24;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)&v24[16];
    v8 = (_QWORD *)a3[3];
    if (v8)
    {
      if (v8 == a3)
      {
        *(_QWORD *)&v24[24] = v24;
        (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v24);
      }
      else
      {
        *(_QWORD *)&v24[24] = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
      }
    }
    else
    {
      *(_QWORD *)&v24[24] = 0;
    }
    v13 = a1 + 72;
    if (v24 != (_BYTE *)(a1 + 72))
    {
      v14 = *(_QWORD *)&v24[24];
      v15 = *(_QWORD *)(a1 + 96);
      if (*(_BYTE **)&v24[24] == v24)
      {
        if (v15 == v13)
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v24 + 24))(v24, v25);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = 0;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)&v24[24] = v24;
          (*(void (**)(_QWORD *, uint64_t))(v25[0] + 24))(v25, a1 + 72);
          (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v24 + 24))(v24, a1 + 72);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 96);
        }
        *(_QWORD *)(a1 + 96) = v13;
      }
      else if (v15 == v13)
      {
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 24))(a1 + 72, v24);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
        *(_QWORD *)(a1 + 96) = *(_QWORD *)&v24[24];
        *(_QWORD *)&v24[24] = v24;
      }
      else
      {
        *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v14;
      }
    }
    v16 = *(_QWORD **)&v24[24];
    if (*(_BYTE **)&v24[24] == v24)
    {
      v17 = 4;
      v16 = v24;
    }
    else
    {
      if (!*(_QWORD *)&v24[24])
        goto LABEL_29;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_29:
    v18 = (_QWORD *)a4[3];
    if (v18)
    {
      if (v18 == a4)
      {
        *(_QWORD *)&v24[24] = v24;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v24);
      }
      else
      {
        *(_QWORD *)&v24[24] = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      }
    }
    else
    {
      *(_QWORD *)&v24[24] = 0;
    }
    v19 = a1 + 104;
    if (v24 != (_BYTE *)(a1 + 104))
    {
      v20 = *(_QWORD *)&v24[24];
      v21 = *(_QWORD *)(a1 + 128);
      if (*(_BYTE **)&v24[24] == v24)
      {
        if (v21 == v19)
        {
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v24 + 24))(v24, v25);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = 0;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128), v24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)&v24[24] = v24;
          (*(void (**)(_QWORD *, uint64_t))(v25[0] + 24))(v25, a1 + 104);
          (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v24 + 24))(v24, a1 + 104);
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[24] + 32))(*(_QWORD *)&v24[24]);
          *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 128);
        }
        *(_QWORD *)(a1 + 128) = v19;
      }
      else if (v21 == v19)
      {
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 24))(a1 + 104, v24);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
        *(_QWORD *)(a1 + 128) = *(_QWORD *)&v24[24];
        *(_QWORD *)&v24[24] = v24;
      }
      else
      {
        *(_QWORD *)&v24[24] = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v20;
      }
    }
    v22 = *(_QWORD **)&v24[24];
    if (*(_BYTE **)&v24[24] == v24)
    {
      v23 = 4;
      v22 = v24;
    }
    else
    {
      if (!*(_QWORD *)&v24[24])
      {
LABEL_48:
        *(_QWORD *)(a1 + 144) = 5000;
        return 1;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_48;
  }
  v9 = SALogObjectGeneral;
  v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    v12 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v12 = (_QWORD *)*v12;
    *(_QWORD *)v24 = 68289283;
    *(_WORD *)&v24[8] = 2082;
    *(_QWORD *)&v24[10] = "";
    *(_WORD *)&v24[18] = 2081;
    *(_QWORD *)&v24[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,invalidArgs\", \"history\":%{private, location:escape_only}s}", v24, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_100052038(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005204C(uint64_t a1)
{
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v49;
  void **v50;

  *(_BYTE *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v49 = _Q0;
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_BYTE *)(a1 + 152) = 0;
  v7 = (void **)(a1 + 24);
  sub_10000E854((uint64_t *)(a1 + 24));
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = v49;
  *(_BYTE *)(a1 + 344) = 0;
  sub_10000E854((uint64_t *)(a1 + 216));
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 400) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 536) = 0;
  sub_10000E854((uint64_t *)(a1 + 408));
  sub_1000254A8(a1 + 1152);
  sub_1000254A8(a1 + 1344);
  sub_1000254A8(a1 + 1536);
  *(_BYTE *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 976) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 1112) = 0;
  sub_10000E854((uint64_t *)(a1 + 984));
  *(_BYTE *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 784) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 920) = 0;
  sub_10000E854((uint64_t *)(a1 + 792));
  sub_1000254A8(a1 + 1728);
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 592) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 728) = 0;
  sub_10000E854((uint64_t *)(a1 + 600));
  if (*(char *)(a1 + 1911) < 0)
    operator delete(*(void **)(a1 + 1888));
  v8 = *(_QWORD **)(a1 + 1856);
  if (v8 == (_QWORD *)(a1 + 1832))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 1832);
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  v10 = *(_QWORD **)(a1 + 1824);
  if (v10 == (_QWORD *)(a1 + 1800))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 1800);
  }
  else
  {
    if (!v10)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  if (*(char *)(a1 + 1799) < 0)
    operator delete(*(void **)(a1 + 1776));
  v50 = (void **)(a1 + 1752);
  sub_100023A94(&v50);
  if (*(char *)(a1 + 1719) < 0)
    operator delete(*(void **)(a1 + 1696));
  v12 = *(_QWORD **)(a1 + 1664);
  if (v12 == (_QWORD *)(a1 + 1640))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 1640);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = *(_QWORD **)(a1 + 1632);
  if (v14 == (_QWORD *)(a1 + 1608))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1608);
  }
  else
  {
    if (!v14)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  if (*(char *)(a1 + 1607) < 0)
    operator delete(*(void **)(a1 + 1584));
  v50 = (void **)(a1 + 1560);
  sub_100023A94(&v50);
  if (*(char *)(a1 + 1527) < 0)
    operator delete(*(void **)(a1 + 1504));
  v16 = *(_QWORD **)(a1 + 1472);
  if (v16 == (_QWORD *)(a1 + 1448))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 1448);
  }
  else
  {
    if (!v16)
      goto LABEL_36;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_36:
  v18 = *(_QWORD **)(a1 + 1440);
  if (v18 == (_QWORD *)(a1 + 1416))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 1416);
  }
  else
  {
    if (!v18)
      goto LABEL_41;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_41:
  if (*(char *)(a1 + 1415) < 0)
    operator delete(*(void **)(a1 + 1392));
  v50 = (void **)(a1 + 1368);
  sub_100023A94(&v50);
  if (*(char *)(a1 + 1335) < 0)
    operator delete(*(void **)(a1 + 1312));
  v20 = *(_QWORD **)(a1 + 1280);
  if (v20 == (_QWORD *)(a1 + 1256))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 1256);
  }
  else
  {
    if (!v20)
      goto LABEL_50;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_50:
  v22 = *(_QWORD **)(a1 + 1248);
  if (v22 == (_QWORD *)(a1 + 1224))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 1224);
  }
  else
  {
    if (!v22)
      goto LABEL_55;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_55:
  if (*(char *)(a1 + 1223) < 0)
    operator delete(*(void **)(a1 + 1200));
  v50 = (void **)(a1 + 1176);
  sub_100023A94(&v50);
  if (*(char *)(a1 + 1143) < 0)
    operator delete(*(void **)(a1 + 1120));
  v24 = *(_QWORD **)(a1 + 1088);
  if (v24 == (_QWORD *)(a1 + 1064))
  {
    v25 = 4;
    v24 = (_QWORD *)(a1 + 1064);
  }
  else
  {
    if (!v24)
      goto LABEL_64;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_64:
  v26 = *(_QWORD **)(a1 + 1056);
  if (v26 == (_QWORD *)(a1 + 1032))
  {
    v27 = 4;
    v26 = (_QWORD *)(a1 + 1032);
  }
  else
  {
    if (!v26)
      goto LABEL_69;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_69:
  if (*(char *)(a1 + 1031) < 0)
    operator delete(*(void **)(a1 + 1008));
  v50 = (void **)(a1 + 984);
  sub_10000E814(&v50);
  if (*(char *)(a1 + 951) < 0)
    operator delete(*(void **)(a1 + 928));
  v28 = *(_QWORD **)(a1 + 896);
  if (v28 == (_QWORD *)(a1 + 872))
  {
    v29 = 4;
    v28 = (_QWORD *)(a1 + 872);
  }
  else
  {
    if (!v28)
      goto LABEL_78;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_78:
  v30 = *(_QWORD **)(a1 + 864);
  if (v30 == (_QWORD *)(a1 + 840))
  {
    v31 = 4;
    v30 = (_QWORD *)(a1 + 840);
  }
  else
  {
    if (!v30)
      goto LABEL_83;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_83:
  if (*(char *)(a1 + 839) < 0)
    operator delete(*(void **)(a1 + 816));
  v50 = (void **)(a1 + 792);
  sub_10000E814(&v50);
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  v32 = *(_QWORD **)(a1 + 704);
  if (v32 == (_QWORD *)(a1 + 680))
  {
    v33 = 4;
    v32 = (_QWORD *)(a1 + 680);
  }
  else
  {
    if (!v32)
      goto LABEL_92;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_92:
  v34 = *(_QWORD **)(a1 + 672);
  if (v34 == (_QWORD *)(a1 + 648))
  {
    v35 = 4;
    v34 = (_QWORD *)(a1 + 648);
  }
  else
  {
    if (!v34)
      goto LABEL_97;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_97:
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
  v50 = (void **)(a1 + 600);
  sub_10000E814(&v50);
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  v36 = *(_QWORD **)(a1 + 512);
  if (v36 == (_QWORD *)(a1 + 488))
  {
    v37 = 4;
    v36 = (_QWORD *)(a1 + 488);
  }
  else
  {
    if (!v36)
      goto LABEL_106;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_106:
  v38 = *(_QWORD **)(a1 + 480);
  if (v38 == (_QWORD *)(a1 + 456))
  {
    v39 = 4;
    v38 = (_QWORD *)(a1 + 456);
  }
  else
  {
    if (!v38)
      goto LABEL_111;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_111:
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  v50 = (void **)(a1 + 408);
  sub_10000E814(&v50);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v40 = *(_QWORD **)(a1 + 320);
  if (v40 == (_QWORD *)(a1 + 296))
  {
    v41 = 4;
    v40 = (_QWORD *)(a1 + 296);
  }
  else
  {
    if (!v40)
      goto LABEL_120;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_120:
  v42 = *(_QWORD **)(a1 + 288);
  if (v42 == (_QWORD *)(a1 + 264))
  {
    v43 = 4;
    v42 = (_QWORD *)(a1 + 264);
  }
  else
  {
    if (!v42)
      goto LABEL_125;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_125:
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v50 = (void **)(a1 + 216);
  sub_10000E814(&v50);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v44 = *(_QWORD **)(a1 + 128);
  if (v44 == (_QWORD *)(a1 + 104))
  {
    v45 = 4;
    v44 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v44)
      goto LABEL_134;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_134:
  v46 = *(_QWORD **)(a1 + 96);
  if (v46 == (_QWORD *)(a1 + 72))
  {
    v47 = 4;
    v46 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v46)
      goto LABEL_139;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_139:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v50 = v7;
  sub_10000E814(&v50);
  return a1;
}

void sub_1000526E0(uint64_t a1, int a2)
{
  NSObject *v4;
  CFAbsoluteTime Current;
  void *v6[2];
  uint64_t v7;
  uint8_t buf[8];
  __int16 v9;
  _BYTE __p[22];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 1921) && *(unsigned __int8 *)(a1 + 1920) == a2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v9 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateLsStatusNoChange\", \"status\":%{private}hhd}", buf, 0x18u);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1920) = a2 | 0x100;
    Current = CFAbsoluteTimeGetCurrent();
    sub_10000E8A0(v6, "{}");
    *(CFAbsoluteTime *)buf = Current;
    LOBYTE(v9) = a2;
    if (SHIBYTE(v7) < 0)
    {
      sub_100004870(&__p[6], v6[0], (unint64_t)v6[1]);
    }
    else
    {
      *(_OWORD *)&__p[6] = *(_OWORD *)v6;
      v11 = v7;
    }
    sub_10000A1D0(a1, (double *)buf);
    if (SHIBYTE(v11) < 0)
      operator delete(*(void **)&__p[6]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
  }
}

void sub_100052844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052880(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  double v4;
  void *v5[2];
  uint64_t v6;
  double v7[2];
  __int128 __p;
  uint64_t v9;

  v3 = *a2;
  v4 = (double)*a2;
  sub_10000E8A0(v5, "{}");
  v7[0] = v4;
  *(_QWORD *)&v7[1] = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004870(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  sub_100052958(a1 + 768, v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_100052924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100052958(uint64_t a1, double *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[4];

  v26[0] = off_1000F3810;
  v26[1] = a1;
  v27 = v26;
  v24[0] = off_1000F3890;
  v24[1] = a1;
  v25 = v24;
  sub_10001177C((uint64_t)v28, (uint64_t)v26, (uint64_t)v24);
  v4 = v25;
  if (v25 == v24)
  {
    v5 = 4;
    v4 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v27;
  if (v27 == v26)
  {
    v7 = 4;
    v6 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v17[0] = 68289539;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2081;
    v21 = v9;
    v22 = 2081;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,update\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)v17, 0x26u);
  }
  sub_10005547C(a1, a2);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 71))
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 56))
LABEL_21:
    sub_100055B0C((char *)a1);
LABEL_22:
  if (!*(_BYTE *)(a1 + 1) && !*(_BYTE *)(a1 + 185))
  {
    *(_BYTE *)a1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_BYTE *)(a1 + 152) = 0;
    sub_10000E854((uint64_t *)(a1 + 24));
  }
  return sub_100012184(v28);
}

void sub_100052B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_100052BB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  double v4;
  void *v5[2];
  uint64_t v6;
  double v7[2];
  __int128 __p;
  uint64_t v9;

  v3 = *a2;
  v4 = (double)*a2;
  sub_10000E8A0(v5, "{}");
  v7[0] = v4;
  *(_QWORD *)&v7[1] = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004870(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  sub_100052958(a1 + 960, v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_100052C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052C90(uint64_t a1, int a2)
{
  NSObject *v4;
  CFAbsoluteTime Current;
  void *v6[2];
  uint64_t v7;
  uint8_t buf[8];
  __int16 v9;
  _BYTE __p[22];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 1923) && *(unsigned __int8 *)(a1 + 1922) == a2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v9 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updatePushParticipationStatusNoChange\", \"status\":%{private}hhd}", buf, 0x18u);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1922) = a2 | 0x100;
    Current = CFAbsoluteTimeGetCurrent();
    sub_10000E8A0(v6, "{}");
    *(CFAbsoluteTime *)buf = Current;
    LOBYTE(v9) = a2;
    if (SHIBYTE(v7) < 0)
    {
      sub_100004870(&__p[6], v6[0], (unint64_t)v6[1]);
    }
    else
    {
      *(_OWORD *)&__p[6] = *(_OWORD *)v6;
      v11 = v7;
    }
    sub_10000A1D0(a1 + 192, (double *)buf);
    if (SHIBYTE(v11) < 0)
      operator delete(*(void **)&__p[6]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
  }
}

void sub_100052DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052E30(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  CFAbsoluteTime Current;
  void *v7[2];
  uint64_t v8;
  uint8_t buf[8];
  __int16 v10;
  _BYTE __p[22];
  uint64_t v12;

  if (*(_BYTE *)(a1 + 1927) && *(unsigned __int8 *)(a1 + 1926) == a2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v10 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousSubscription,no change\", \"status\":%{private}hhd}", buf, 0x18u);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1926) = a2 | 0x100;
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v10 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousSubscription\", \"status\":%{private}hhd}", buf, 0x18u);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_10000E8A0(v7, "{}");
    *(CFAbsoluteTime *)buf = Current;
    LOBYTE(v10) = a2;
    if (SHIBYTE(v8) < 0)
    {
      sub_100004870(&__p[6], v7[0], (unint64_t)v7[1]);
    }
    else
    {
      *(_OWORD *)&__p[6] = *(_OWORD *)v7;
      v12 = v8;
    }
    sub_10000A1D0(a1 + 576, (double *)buf);
    if (SHIBYTE(v12) < 0)
      operator delete(*(void **)&__p[6]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
}

void sub_10005300C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100053048(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  CFAbsoluteTime Current;
  void *v7[2];
  uint64_t v8;
  uint8_t buf[8];
  __int16 v10;
  _BYTE __p[22];
  uint64_t v12;

  if (*(_BYTE *)(a1 + 1925) && *(unsigned __int8 *)(a1 + 1924) == a2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v10 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateSubscriptionStatusNoChange\", \"status\":%{private}hhd}", buf, 0x18u);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1924) = a2 | 0x100;
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v10 = 2082;
      *(_QWORD *)__p = "";
      *(_WORD *)&__p[8] = 1025;
      *(_DWORD *)&__p[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateSubscription\", \"status\":%{private}hhd}", buf, 0x18u);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_10000E8A0(v7, "{}");
    *(CFAbsoluteTime *)buf = Current;
    LOBYTE(v10) = a2;
    if (SHIBYTE(v8) < 0)
    {
      sub_100004870(&__p[6], v7[0], (unint64_t)v7[1]);
    }
    else
    {
      *(_OWORD *)&__p[6] = *(_OWORD *)v7;
      v12 = v8;
    }
    sub_10000A1D0(a1 + 384, (double *)buf);
    if (SHIBYTE(v12) < 0)
      operator delete(*(void **)&__p[6]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
}

void sub_100053224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100053260(uint64_t a1, char *a2)
{
  NSObject *v4;
  char *v5;
  double Current;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  double buf;
  _BYTE v12[10];
  __int16 v13;
  char *v14;
  char v15;
  void *__p;
  char v17;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v5 = a2;
    else
      v5 = *(char **)a2;
    *(_QWORD *)&buf = 68289283;
    *(_WORD *)v12 = 2082;
    *(_QWORD *)&v12[2] = "";
    v13 = 2081;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateWeaDisplayed\", \"weaText\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  Current = CFAbsoluteTimeGetCurrent();
  SACommonUtils::getHashForString(a2, (uint64_t *)v9);
  sub_10000E8A0(v7, "{}");
  sub_100025280((uint64_t)&buf, (__int128 *)v9, (__int128 *)v7, Current);
  sub_100030BDC(a1 + 1152, &buf);
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(*(void **)v12);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1000533C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_100023B48((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_100053414(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double Current;
  NSObject *v8;
  NSObject *v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  char v13;
  void *v14[2];
  uint64_t v15;
  void *__p;
  _BYTE v17[10];
  char v18;
  char v19;
  void *v20;
  char v21;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &stru_1000F3520);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("Body")));
    v6 = v5;
    if (v5)
    {
      sub_10000E8A0(&__p, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
      SACommonUtils::getHashForString((char *)&__p, (uint64_t *)v14);
      if (v18 < 0)
        operator delete(__p);
      Current = CFAbsoluteTimeGetCurrent();
      SACommonUtils::convertDictionaryToString((SACommonUtils *)v4, (uint64_t)v12);
      if (SHIBYTE(v15) < 0)
      {
        sub_100004870(v10, v14[0], (unint64_t)v14[1]);
      }
      else
      {
        *(_OWORD *)v10 = *(_OWORD *)v14;
        v11 = v15;
      }
      sub_100025280((uint64_t)&__p, (__int128 *)v10, (__int128 *)v12, Current);
      sub_100030BDC(a1 + 1344, (double *)&__p);
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(*(void **)v17);
      if (SHIBYTE(v11) < 0)
        operator delete(v10[0]);
      if (v13 < 0)
        operator delete(v12[0]);
      if (SHIBYTE(v15) < 0)
        operator delete(v14[0]);
    }
    else
    {
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        *(_WORD *)v17 = 2082;
        *(_QWORD *)&v17[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateWeaReceived,unable to read message id,ignoring.\"}", (uint8_t *)&__p, 0x12u);
      }
    }

  }
  else
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289026;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateWeaReceived,alert does not have any info,ignoring.\"}", (uint8_t *)&__p, 0x12u);
    }
  }

}

void sub_100053668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_100053700(id a1, id a2, id a3, BOOL *a4)
{
  id v5;
  id v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289539;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2113;
    v12 = v5;
    v13 = 2113;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateWeaReceived\", \"key\":%{private, location:escape_only}@, \"value\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x26u);
  }

}

void sub_1000537E8(uint64_t a1, void **a2, void *a3)
{
  SACommonUtils *v5;
  NSObject *v6;
  void *v7;
  double Current;
  void *v9[2];
  void *v10;
  void *v11[2];
  char v12;
  double buf;
  _BYTE v14[10];
  __int16 v15;
  void *v16;
  char v17;
  void *__p;
  char v19;

  v5 = a3;
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    *(_QWORD *)&buf = 68289283;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    v15 = 2081;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateSaReceived\", \"uid\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  Current = CFAbsoluteTimeGetCurrent();
  SACommonUtils::convertDictionaryToString(v5, (uint64_t)v11);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(v9, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a2;
    v10 = a2[2];
  }
  sub_100025280((uint64_t)&buf, (__int128 *)v9, (__int128 *)v11, Current);
  sub_100030BDC(a1 + 1536, &buf);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(*(void **)v14);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);

}

void sub_100053974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000539D0(uint64_t a1, void **a2, void *a3)
{
  SACommonUtils *v5;
  NSObject *v6;
  void *v7;
  double Current;
  void *v9[2];
  void *v10;
  void *v11[2];
  char v12;
  double buf;
  _BYTE v14[10];
  __int16 v15;
  void *v16;
  char v17;
  void *__p;
  char v19;

  v5 = a3;
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    *(_QWORD *)&buf = 68289283;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    v15 = 2081;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,updateIgneousReceived\", \"uid\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  Current = CFAbsoluteTimeGetCurrent();
  SACommonUtils::convertDictionaryToString(v5, (uint64_t)v11);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004870(v9, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a2;
    v10 = a2[2];
  }
  sub_100025280((uint64_t)&buf, (__int128 *)v9, (__int128 *)v11, Current);
  sub_100030BDC(a1 + 1728, &buf);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(*(void **)v14);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);

}

void sub_100053B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100053BB8(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD **v11;
  _QWORD *v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  void **v22;

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  sub_10000BFF8(a1 + 384, (uint64_t)&v11, a2, a3);
  v5 = sub_10005C30C((uint64_t)&v11);
  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000E8A0(__p, off_1000F3D00[(int)v5]);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2049;
    v18 = a2;
    v19 = 2049;
    v20 = a3;
    v21 = 2081;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,wasSubscribedWithinWindow\", \"startTsSeconds\":\"%{private}0.1f\", \"endTsSeconds\":\"%{private}0.1f\", \"result\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
  }

  sub_10001606C((uint64_t)&v11, v12[0]);
  return v5;
}

void sub_100053D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  void *v13;

  sub_10001606C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100053D44(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD **v11;
  _QWORD *v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  void **v22;

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  sub_10000BFF8(a1 + 576, (uint64_t)&v11, a2, a3);
  v5 = sub_10005C30C((uint64_t)&v11);
  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000E8A0(__p, off_1000F3D00[(int)v5]);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2049;
    v18 = a2;
    v19 = 2049;
    v20 = a3;
    v21 = 2081;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,wasIgneousSubscribedWithinWindow\", \"startTsSeconds\":\"%{private}0.1f\", \"endTsSeconds\":\"%{private}0.1f\", \"result\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
  }

  sub_10001606C((uint64_t)&v11, v12[0]);
  return v5;
}

void sub_100053EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  void *v13;

  sub_10001606C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_100053ED0(uint64_t a1, double a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void **v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint8_t buf[8];
  __int128 v22;
  uint64_t *v23;
  unint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[4];

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v22) = 2082;
    *(_QWORD *)((char *)&v22 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,deleteOldAlerts\"}", buf, 0x12u);
  }
  sub_100032C94(a1 + 1152, 1, a2);
  sub_100032C94(a1 + 1344, 1, a2);
  sub_100032C94(a1 + 1536, 1, a2);
  sub_100032C94(a1 + 1728, 1, a2);
  v27[0] = off_1000F3910;
  v27[1] = a1 + 960;
  v28 = v27;
  v25[0] = off_1000F3990;
  v25[1] = a1 + 960;
  v26 = v25;
  sub_10001177C((uint64_t)v29, (uint64_t)v27, (uint64_t)v25);
  v5 = v26;
  if (v26 == v25)
  {
    v6 = 4;
    v5 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  v7 = v28;
  if (v28 == v27)
  {
    v8 = 4;
    v7 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v20 = 0;
  v18 = 0xBFF0000000000000;
  v19 = 0;
  v9 = *(_QWORD *)(a1 + 984);
  v10 = *(_QWORD *)(a1 + 992);
  *(_QWORD *)buf = a1 + 960;
  *(double *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = &v20;
  v23 = &v19;
  v24 = &v18;
  if (v9 != v10)
  {
    while (!sub_100056D48((double *)buf, (double *)v9))
    {
      v9 += 40;
      if (v9 == v10)
      {
        v9 = v10;
        goto LABEL_25;
      }
    }
    if (v9 != v10)
    {
      for (i = v9 + 40; i != v10; i += 40)
      {
        if (!sub_100056D48((double *)buf, (double *)i))
        {
          *(_OWORD *)v9 = *(_OWORD *)i;
          v12 = (void **)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            operator delete(*v12);
          v13 = *(_OWORD *)(i + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(i + 32);
          *(_OWORD *)v12 = v13;
          *(_BYTE *)(i + 39) = 0;
          *(_BYTE *)(i + 16) = 0;
          v9 += 40;
        }
      }
    }
  }
LABEL_25:
  v14 = *(_QWORD *)(a1 + 992);
  if (v9 != v14)
  {
    v15 = sub_100056920(v14, *(_QWORD *)(a1 + 992), v9);
    for (j = *(_QWORD *)(a1 + 992); j != v15; j -= 40)
    {
      if (*(char *)(j - 1) < 0)
        operator delete(*(void **)(j - 24));
    }
    *(_QWORD *)(a1 + 992) = v15;
  }
  if (v20)
  {
    if ((*(char *)(a1 + 1031) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(a1 + 1031))
        return sub_100012184(v29);
      goto LABEL_36;
    }
    if (*(_QWORD *)(a1 + 1016))
LABEL_36:
      sub_100055B0C((char *)(a1 + 960));
  }
  return sub_100012184(v29);
}

void sub_1000541BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012184((_QWORD *)(v1 - 120));
  _Unwind_Resume(a1);
}

_QWORD *sub_100054244(uint64_t a1, double a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,deleteOldStates\"}", (uint8_t *)v6, 0x12u);
  }
  sub_100056F2C(a1, a2);
  sub_100056F2C(a1 + 192, a2);
  sub_100056F2C(a1 + 384, a2);
  return sub_100056F2C(a1 + 576, a2);
}

_QWORD *sub_100054334(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  unint64_t v21;
  _BYTE v22[10];
  __int16 v23;
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[4];

  v27[0] = off_1000F3B10;
  v27[1] = a1;
  v28 = v27;
  v25[0] = off_1000F3B90;
  v25[1] = a1;
  v26 = v25;
  sub_10001177C((uint64_t)v29, (uint64_t)v27, (uint64_t)v25);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_10001606C(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*(double *)(a1 + 8) <= a3)
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || !*(_BYTE *)a1)
    {
      v12 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v19 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v19 = (_QWORD *)*v19;
        v21 = 68289283;
        *(_WORD *)v22 = 2082;
        *(_QWORD *)&v22[2] = "";
        v23 = 2081;
        v24 = v19;
        v14 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValuesWithin,skipping,notReady\", \"history\":%{pri"
              "vate, location:escape_only}s}";
        goto LABEL_32;
      }
    }
    else
    {
      v21 = sub_100054888(a1, a3);
      *(_QWORD *)v22 = v15;
      if ((_BYTE)v15)
        sub_100057C08((uint64_t **)a2, (uint64_t *)&v21, (uint64_t *)&v21);
      v17 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      while (v17 != v16)
      {
        if (*(double *)v17 >= a3 && *(double *)v17 <= a4)
          sub_100057C08((uint64_t **)a2, (uint64_t *)(v17 + 8), (uint64_t *)(v17 + 8));
        v17 += 40;
      }
    }
  }
  else
  {
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v13 = (_QWORD *)*v13;
      v21 = 68289283;
      *(_WORD *)v22 = 2082;
      *(_QWORD *)&v22[2] = "";
      v23 = 2081;
      v24 = v13;
      v14 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findAllValuesWithin,outOfRangeArgs\", \"history\":%{private,"
            " location:escape_only}s}";
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v21, 0x1Cu);
    }
  }
  return sub_100012184(v29);
}

void sub_1000545C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012184((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_100054640(uint64_t a1, uint64_t a2, _QWORD *a3, std::string *a4)
{
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v8 = a1 + 1344;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004870(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
  }
  v9 = sub_100023260(v8, (unsigned __int8 **)__p, a3, a4);
  v10 = v9;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    if ((v10 & 1) != 0)
      return 1;
  }
  else if ((v9 & 1) != 0)
  {
    return 1;
  }
  v12 = a1 + 1152;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004870(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
  }
  v11 = sub_100023260(v12, (unsigned __int8 **)v14, a3, a4);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v11;
}

void sub_10005473C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_100054770(uint64_t a1, double a2)
{
  double Current;
  int64_t v5;
  char v6;
  int64_t v7;
  int64_t v8;
  NSObject *v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int64_t v15;
  __int16 v16;
  int64_t v17;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_100054888(a1 + 960, Current);
  if (!v6)
    return 1;
  v7 = vcvtmd_s64_f64(Current / a2);
  v8 = vcvtmd_s64_f64((double)v5 / a2);
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289539;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2049;
    v15 = v7;
    v16 = 2049;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#evtTrk,isLastSubmissionOlderThanRollingPeriod\", \"currentRollingPeriod\":%{private}lld, \"prevRollingPeriod\":%{private}lld}", (uint8_t *)v11, 0x26u);
  }
  return v7 > v8;
}

unint64_t sub_100054888(uint64_t a1, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[4];

  v31[0] = off_1000F3C10;
  v31[1] = a1;
  v32 = v31;
  v29[0] = off_1000F3C90;
  v29[1] = a1;
  v30 = v29;
  sub_10001177C((uint64_t)v33, (uint64_t)v31, (uint64_t)v29);
  v4 = v30;
  if (v30 == v29)
  {
    v5 = 4;
    v4 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v32;
  if (v32 == v31)
  {
    v7 = 4;
    v6 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v10 = (_QWORD *)*v10;
    v21 = 68289539;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = v9;
    v27 = 2081;
    v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,findLatestValueBefore\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", (uint8_t *)&v21, 0x26u);
  }
  if (*(double *)(a1 + 8) > a2)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v12 = (_QWORD *)*v12;
      v21 = 68289283;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2081;
      v26 = v12;
      v13 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,InvalidArgs\", \"history\":%{private, "
            "location:escape_only}s}";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v21, 0x1Cu);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  if (v14 == v15 || !*(_BYTE *)a1)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v18 = (_QWORD *)*v18;
      v21 = 68289283;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2081;
      v26 = v18;
      v13 = "{\"msg%{public}.0s\":\"#saEventHistory,#warning,findLatestValueBefore,skipping,notReady\", \"history\":%{pri"
            "vate, location:escape_only}s}";
      goto LABEL_31;
    }
LABEL_32:
    LOBYTE(v17) = 0;
    v19 = 0;
    goto LABEL_33;
  }
  while (v15 != v14)
  {
    v16 = *(double *)(v15 - 40);
    v15 -= 40;
    if (v16 <= a2)
    {
      v17 = *(_QWORD *)(v15 + 8);
      goto LABEL_35;
    }
  }
  v17 = *(_QWORD *)(v14 + 8);
LABEL_35:
  v19 = v17 & 0xFFFFFFFFFFFFFF00;
LABEL_33:
  sub_100012184(v33);
  return v19 | v17;
}

void sub_100054B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_100054BCC(uint64_t a1)
{
  sub_100054C30(a1);
  sub_100054C30(a1 + 192);
  sub_100054C30(a1 + 384);
  sub_10002316C(a1 + 1344);
  sub_10002316C(a1 + 1152);
  sub_10002316C(a1 + 1536);
  sub_10002316C(a1 + 1728);
  sub_100054C30(a1 + 576);
  sub_100054D24(a1 + 768);
  sub_100054D24(a1 + 960);
}

void sub_100054C30(uint64_t a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (*(_BYTE *)(a1 + 184))
  {
    v1 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      v3 = 2082;
      v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,onFirstUnlock,skip\"}", (uint8_t *)v2, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 184) = 1;
    if (*(_BYTE *)(a1 + 1))
      sub_100010ECC(a1);
  }
}

void sub_100054D24(uint64_t a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (*(_BYTE *)(a1 + 184))
  {
    v1 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      v3 = 2082;
      v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,onFirstUnlock,skip\"}", (uint8_t *)v2, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 184) = 1;
    if (*(_BYTE *)(a1 + 1))
      sub_100056078(a1);
  }
}

uint64_t sub_100054E18(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_1000ADFD0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 160), "Unknown");
  *(_WORD *)(a1 + 184) = 0;
  return a1;
}

void sub_100054E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v2 + 128);
  if (v5 == (_QWORD *)(v2 + 104))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 96);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v3 = *(_QWORD **)(v2 + 96);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_11:
  if (*(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  sub_10000E814((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100054F28()
{
  operator delete();
}

_QWORD *sub_100054F3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3550;
  return result;
}

void sub_100054F60(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3550;
}

uint64_t sub_100054F78(int a1, _BYTE *a2, std::string *a3)
{
  char *v3;

  if (*a2)
    v3 = "1";
  else
    v3 = "0";
  sub_10004BE30(a3, v3);
  return 1;
}

uint64_t sub_100054FB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100054FEC()
{
}

void sub_100054FFC()
{
  operator delete();
}

_QWORD *sub_100055010()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F35E0;
  return result;
}

void sub_100055034(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F35E0;
}

uint64_t sub_10005504C(uint64_t a1, uint64_t a2, BOOL *a3)
{
  void *v4;
  int v5;
  void **v6;
  BOOL v7;
  void *__p[2];
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004870(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  v4 = (void *)HIBYTE(v10);
  v5 = SHIBYTE(v10);
  if (v10 < 0)
    v4 = __p[1];
  if (v4 == (void *)1)
  {
    v6 = (void **)__p[0];
    if (v10 >= 0)
      v6 = __p;
    v7 = *(_BYTE *)v6 != 48;
  }
  else
  {
    v7 = 1;
  }
  *a3 = v7;
  if (v5 < 0)
    operator delete(__p[0]);
  return 1;
}

uint64_t sub_1000550F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100055130()
{
}

void sub_100055140()
{
  operator delete();
}

_QWORD *sub_100055154()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3670;
  return result;
}

void sub_100055178(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3670;
}

uint64_t sub_100055190(int a1, uint64_t a2, std::string *this)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_100004870(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100055200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005521C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100055258()
{
}

void sub_100055268()
{
  operator delete();
}

_QWORD *sub_10005527C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F36F0;
  return result;
}

void sub_1000552A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F36F0;
}

uint64_t sub_1000552B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string v5;

  std::to_string(&v5, *a2);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v5;
  return 1;
}

uint64_t sub_10005530C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100055348()
{
}

void sub_100055358()
{
  operator delete();
}

_QWORD *sub_10005536C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3780;
  return result;
}

void sub_100055390(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3780;
}

uint64_t sub_1000553A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v4;
  char *v6[2];
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004870(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  if (SHIBYTE(v7) < 0)
  {
    v4 = v6[0];
    *a3 = atoi(v6[0]);
    operator delete(v4);
  }
  else
  {
    *a3 = atoi((const char *)v6);
  }
  return 1;
}

uint64_t sub_100055434(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100055470()
{
}

void sub_10005547C(uint64_t a1, double *a2)
{
  NSObject *v3;
  _QWORD *v4;
  double *v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  _QWORD *v9;
  void **i;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  double *v14;
  char *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  double *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE *v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  double *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  char *v63;
  char *v64;
  double v65;
  double v66;
  double *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint8_t buf[8];
  _BYTE v74[24];
  uint64_t v75;

  if (*a2 >= 0.0)
  {
    v5 = a2;
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(char **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-v6] >> 3) >= *(_QWORD *)(a1 + 136))
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(a1 + 160);
        if (*(char *)(a1 + 183) < 0)
          v9 = (_QWORD *)*v9;
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v74 = 2082;
        *(_QWORD *)&v74[2] = "";
        *(_WORD *)&v74[10] = 2081;
        *(_QWORD *)&v74[12] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,maxHistoryLenReached\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
        v6 = *(_QWORD *)(a1 + 24);
        v7 = *(char **)(a1 + 32);
      }
      v7 = (char *)sub_100056920(v6 + 40, (uint64_t)v7, v6);
      for (i = *(void ***)(a1 + 32); i != (void **)v7; i -= 5)
      {
        if (*((char *)i - 1) < 0)
          operator delete(*(i - 3));
      }
      *(_QWORD *)(a1 + 32) = v7;
      *(_BYTE *)(a1 + 152) = 1;
      v6 = *(_QWORD *)(a1 + 24);
    }
    if (v7 == (char *)v6)
    {
      v12 = v7;
    }
    else
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-v6] >> 3);
      v12 = v7;
      do
      {
        v13 = v11 >> 1;
        v14 = (double *)&v12[-40 * (v11 >> 1)];
        v16 = *(v14 - 5);
        v15 = (char *)(v14 - 5);
        v11 += ~(v11 >> 1);
        if (*v5 >= v16)
          v11 = v13;
        else
          v12 = v15;
      }
      while (v11);
    }
    v17 = (uint64_t)&v12[-v6] / 40;
    v18 = v6 + 40 * v17;
    v19 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v7 >= v19)
    {
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-v6] >> 3) + 1;
      if (v32 > 0x666666666666666)
        sub_100004C50();
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v6) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x333333333333333)
        v34 = 0x666666666666666;
      else
        v34 = v32;
      v72 = a1 + 40;
      if (v34)
      {
        v36 = (char *)sub_10005699C(v34);
      }
      else
      {
        v36 = 0;
        v35 = 0;
      }
      v39 = &v36[40 * v17];
      v68 = v36;
      v69 = v39;
      v70 = v39;
      v71 = &v36[40 * v35];
      if (v17 == v35)
      {
        if ((uint64_t)&v12[-v6] < 1)
        {
          if (v12 == (char *)v6)
            v42 = 1;
          else
            v42 = 2 * v17;
          v75 = a1 + 40;
          v43 = (char *)sub_10005699C(v42);
          v45 = v69;
          v46 = v70;
          v47 = v69;
          v48 = (uint64_t)&v43[40 * (v42 >> 2)];
          if (v70 != v69)
          {
            v48 = (uint64_t)&v43[40 * (v42 >> 2) + v70 - v69];
            v49 = &v43[40 * (v42 >> 2)];
            v50 = v69;
            do
            {
              *(_OWORD *)v49 = *(_OWORD *)v50;
              v51 = *((_OWORD *)v50 + 1);
              *((_QWORD *)v49 + 4) = *((_QWORD *)v50 + 4);
              *((_OWORD *)v49 + 1) = v51;
              *((_QWORD *)v50 + 3) = 0;
              *((_QWORD *)v50 + 4) = 0;
              *((_QWORD *)v50 + 2) = 0;
              v49 += 40;
              v50 += 40;
            }
            while (v49 != (char *)v48);
            v47 = v46;
          }
          v52 = v68;
          v53 = v71;
          v68 = v43;
          v69 = &v43[40 * (v42 >> 2)];
          *(_QWORD *)buf = v52;
          *(_QWORD *)v74 = v45;
          v70 = (char *)v48;
          v71 = &v43[40 * v44];
          *(_QWORD *)&v74[8] = v47;
          *(_QWORD *)&v74[16] = v53;
          sub_1000569E0((uint64_t)buf);
          v39 = v70;
        }
        else
        {
          v40 = v17 + 2;
          if (v17 >= -1)
            v40 = v17 + 1;
          v41 = (uint64_t)&v39[-40 * (v40 >> 1)];
          v39 = (char *)sub_100056920((uint64_t)v39, (uint64_t)v39, v41);
          v69 = (char *)v41;
          v70 = v39;
        }
      }
      *(_OWORD *)v39 = *(_OWORD *)v5;
      v54 = (double *)(v39 + 16);
      if (*((char *)v5 + 39) < 0)
      {
        sub_100004870(v54, *((void **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v55 = *((_OWORD *)v5 + 1);
        v54[2] = v5[4];
        *(_OWORD *)v54 = v55;
      }
      v56 = v69;
      v57 = v70 + 40;
      v70 += 40;
      v58 = *(_QWORD *)(a1 + 24);
      if (v58 != v18)
      {
        v59 = v18;
        do
        {
          *(_OWORD *)(v56 - 40) = *(_OWORD *)(v59 - 40);
          v60 = *(_OWORD *)(v59 - 24);
          *((_QWORD *)v56 - 1) = *(_QWORD *)(v59 - 8);
          *(_OWORD *)(v56 - 24) = v60;
          v56 -= 40;
          *(_QWORD *)(v59 - 16) = 0;
          *(_QWORD *)(v59 - 8) = 0;
          *(_QWORD *)(v59 - 24) = 0;
          v59 -= 40;
        }
        while (v59 != v58);
        v57 = v70;
      }
      v69 = v56;
      v61 = *(_QWORD *)(a1 + 32);
      if (v61 != v18)
      {
        do
        {
          *(_OWORD *)v57 = *(_OWORD *)v18;
          v62 = *(_OWORD *)(v18 + 16);
          *((_QWORD *)v57 + 4) = *(_QWORD *)(v18 + 32);
          *((_OWORD *)v57 + 1) = v62;
          *(_QWORD *)(v18 + 24) = 0;
          *(_QWORD *)(v18 + 32) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          v57 += 40;
          v18 += 40;
        }
        while (v18 != v61);
        v56 = v69;
        v18 = *(_QWORD *)(a1 + 32);
      }
      v63 = *(char **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v56;
      *(_QWORD *)(a1 + 32) = v57;
      v64 = *(char **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v71;
      v70 = (char *)v18;
      v71 = v64;
      v68 = v63;
      v69 = v63;
      sub_1000569E0((uint64_t)&v68);
    }
    else if ((char *)v18 == v7)
    {
      *(_OWORD *)v7 = *(_OWORD *)v5;
      v37 = (_BYTE *)(v6 + 40 * v17 + 16);
      if (*((char *)v5 + 39) < 0)
      {
        sub_100004870(v37, *((void **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v38 = *((_OWORD *)v5 + 1);
        *(double *)(v6 + 40 * v17 + 32) = v5[4];
        *(_OWORD *)v37 = v38;
      }
      *(_QWORD *)(a1 + 32) = v7 + 40;
    }
    else
    {
      v67 = v5;
      v20 = (char *)(v18 + 40);
      v21 = v7 - 40;
      v22 = v7;
      if ((unint64_t)v7 >= 0x28)
      {
        v22 = v7;
        do
        {
          *v22 = *(_OWORD *)v21;
          v23 = *((_OWORD *)v21 + 1);
          *((_QWORD *)v22 + 4) = *((_QWORD *)v21 + 4);
          v22[1] = v23;
          *((_QWORD *)v21 + 3) = 0;
          *((_QWORD *)v21 + 4) = 0;
          *((_QWORD *)v21 + 2) = 0;
          v22 = (_OWORD *)((char *)v22 + 40);
          v21 += 40;
        }
        while (v21 < v7);
      }
      *(_QWORD *)(a1 + 32) = v22;
      if (v7 != v20)
      {
        v24 = 0;
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v20) >> 3);
        v26 = v6 + 40 * v25 + 40 * v17;
        v27 = -40 * v25;
        do
        {
          v28 = v26 + v24;
          *(_OWORD *)&v7[v24 - 40] = *(_OWORD *)(v26 + v24 - 40);
          v29 = (uint64_t)&v7[v24 - 24];
          if (v7[v24 - 1] < 0)
            operator delete(*(void **)v29);
          v24 -= 40;
          v30 = *(_OWORD *)(v28 - 24);
          *(_QWORD *)(v29 + 16) = *(_QWORD *)(v28 - 8);
          *(_OWORD *)v29 = v30;
          *(_BYTE *)(v28 - 1) = 0;
          *(_BYTE *)(v28 - 24) = 0;
        }
        while (v27 != v24);
      }
      v5 = v67;
      v31 = v67;
      if (v18 <= (unint64_t)v67)
        v31 = &v67[5 * (*(_QWORD *)(a1 + 32) > (unint64_t)v67)];
      *(_OWORD *)v18 = *(_OWORD *)v31;
      std::string::operator=((std::string *)(v6 + 40 * v17 + 16), (const std::string *)(v31 + 2));
    }
    v65 = *(double *)(a1 + 8);
    v66 = *v5;
    if (v65 < 0.0 || v65 > v66)
      *(double *)(a1 + 8) = v66;
    if (*(double *)(a1 + 16) < v66)
      *(double *)(a1 + 16) = v66;
  }
  else
  {
    v3 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 160);
      if (*(char *)(a1 + 183) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v74 = 2082;
      *(_QWORD *)&v74[2] = "";
      *(_WORD *)&v74[10] = 2081;
      *(_QWORD *)&v74[12] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,updateWithInvalidArgs\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }
}

void sub_100055AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 32) = v11;
  _Unwind_Resume(exception_object);
}

void sub_100055B0C(char *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  _WORD v11[6];
  _QWORD *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 48;
    if (a1[71] < 0)
      v3 = (_QWORD *)*v3;
    v4 = a1 + 160;
    if (a1[183] < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = v3;
    v19 = 2081;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,save\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (a1[184])
  {
    v5 = a1 + 48;
    if (a1[71] < 0)
      v5 = *(char **)v5;
    sub_10000E8A0(&__p, "0002");
    sub_100081C30((uint64_t)buf, v5, (uint64_t)&__p);
    if (SBYTE3(v12) < 0)
      operator delete(__p);
    if (v21)
      operator new[]();
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1 + 160;
      if (a1[183] < 0)
        v9 = (_QWORD *)*v9;
      __p = (void *)68289283;
      v11[0] = 2082;
      *(_QWORD *)&v11[1] = "";
      v11[5] = 2081;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,cannotOpenFileToSave\", \"history\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100081FA4((uint64_t)buf);
  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1 + 160;
      if (a1[183] < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,#warning,deferSavingTillFirstUnlock\", \"history\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    a1[185] = 1;
  }
}

void sub_100055E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  sub_100081FA4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100055F00()
{
  operator delete();
}

_QWORD *sub_100055F14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3810;
  result[1] = v3;
  return result;
}

uint64_t sub_100055F48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3810;
  a2[1] = v2;
  return result;
}

void sub_100055F64(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100056078((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100056030(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10005606C()
{
}

void sub_100056078(uint64_t a1)
{
  NSObject *v2;
  const char **v3;
  _QWORD *v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char **v8;
  const char *v9;
  char v10;
  char v11;
  const std::__fs::filesystem::path *v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char **v17;
  __int16 v18;
  _QWORD *v19;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v3 = (const char **)*v3;
    v4 = (_QWORD *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v3;
    v18 = 2081;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saEventHistory,load\", \"filePath\":%{private, location:escape_only}s, \"debugName\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    v8 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v8 = (const char **)*v8;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v8;
    v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,deferLoadingTillFirstUnlock\", \"filePath\":%{private, loc"
         "ation:escape_only}s}";
    goto LABEL_28;
  }
  v5 = (const char **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    v6 = *v5;
  }
  else
  {
    v6 = (const char *)(a1 + 48);
    if (!*(_BYTE *)(a1 + 71))
      return;
  }
  sub_10000E8A0(buf, "0002");
  v10 = sub_10008167C(v6, (uint64_t)buf);
  v11 = v10;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v11 & 1) != 0)
LABEL_19:
      operator new[]();
  }
  else if ((v10 & 1) != 0)
  {
    goto LABEL_19;
  }
  v12 = (const std::__fs::filesystem::path *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v12 = (const std::__fs::filesystem::path *)*v5;
  if (sub_100081088(v12))
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0)
        v5 = (const char **)*v5;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v5;
      v9 = "{\"msg%{public}.0s\":\"#saEventHistory,load,#warning,unabletToRemoveFile\", \"filePath\":%{private, location:escape_only}s}";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
    }
  }
}

void sub_100056678(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  sub_10008161C((uint64_t)&a35);
  operator delete[]();
}

void sub_100056798()
{
  operator delete();
}

_QWORD *sub_1000567AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3890;
  result[1] = v3;
  return result;
}

uint64_t sub_1000567E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3890;
  a2[1] = v2;
  return result;
}

__n128 sub_1000567FC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_1000568D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100056914()
{
}

uint64_t sub_100056920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void **v6;
  __int128 v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0)
        operator delete(*v6);
      v7 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(v5 + 39) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      a3 += 40;
      v5 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_10005699C(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    sub_100004984();
  return operator new(40 * a1);
}

uint64_t sub_1000569E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100056A44()
{
  operator delete();
}

_QWORD *sub_100056A58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3910;
  result[1] = v3;
  return result;
}

uint64_t sub_100056A8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3910;
  a2[1] = v2;
  return result;
}

void sub_100056AA8(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100056078((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100056B74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100056BB0()
{
}

void sub_100056BC0()
{
  operator delete();
}

_QWORD *sub_100056BD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3990;
  result[1] = v3;
  return result;
}

uint64_t sub_100056C08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3990;
  a2[1] = v2;
  return result;
}

__n128 sub_100056C24(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100056D00(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100056D3C()
{
}

BOOL sub_100056D48(double *a1, double *a2)
{
  double v3;
  uint64_t v4;
  _QWORD *v6;
  double v7;
  double v8;
  double *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  const char *p_p;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BOOL4 v32;

  v3 = *a1;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)&v3 + 96);
  if (!v4)
    sub_100004FB0();
  v6 = a2 + 1;
  (*(void (**)(uint64_t, double *, void **))(*(_QWORD *)v4 + 48))(v4, a2 + 1, &__p);
  v7 = *a2;
  v8 = a1[1];
  if (*a2 < v8)
    **((_BYTE **)a1 + 2) = 1;
  v9 = (double *)*((_QWORD *)a1 + 4);
  if (*v9 < v7)
  {
    *v9 = v7;
    **((_QWORD **)a1 + 3) = *v6;
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v11 = (_QWORD *)(*(_QWORD *)&v3 + 160);
    if (*(char *)(*(_QWORD *)&v3 + 183) < 0)
      v11 = (_QWORD *)*v11;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *a2;
    if (SHIBYTE(v18) < 0)
    {
      if (v17)
        p_p = (const char *)__p;
      else
        p_p = "";
    }
    else
    {
      p_p = (const char *)&__p;
      if (!HIBYTE(v18))
        p_p = "";
    }
    *(_DWORD *)buf = 68290307;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v11;
    v25 = 2049;
    v26 = v12;
    v27 = 2049;
    v28 = v13;
    v29 = 2081;
    v30 = p_p;
    v31 = 1025;
    v32 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saEventHistory,cleanup\", \"history\":%{private, location:escape_only}s, \"before\":\"%{private}0.1f\", \"ts\":\"%{private}0.1f\", \"value\":%{private, location:escape_only}s, \"remove\":%{private}hhd}", buf, 0x40u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return v7 < v8;
}

void sub_100056F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100056F2C(uint64_t a1, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  double v12;
  void **v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t j;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  unint64_t v41;
  char v42;
  __int128 __p;
  uint64_t v44;
  double v45[5];
  unint64_t v46;
  __int16 v47;
  char *v48;
  _BYTE v49[24];
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[4];

  v53[0] = off_1000F3A10;
  v53[1] = a1;
  v54 = v53;
  v51[0] = off_1000F3A90;
  v51[1] = a1;
  v52 = v51;
  sub_10001177C((uint64_t)v55, (uint64_t)v53, (uint64_t)v51);
  v4 = v52;
  if (v52 == v51)
  {
    v5 = 4;
    v4 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v54;
  if (v54 == v53)
  {
    v7 = 4;
    v6 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v47 = 0;
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v45[0] = a1;
  v45[1] = a2;
  *(_QWORD *)&v45[2] = (char *)&v47 + 1;
  *(_QWORD *)&v45[3] = &v47;
  *(_QWORD *)&v45[4] = &v46;
  v46 = 0xBFF0000000000000;
  if (v9 != v10)
  {
    while (!sub_10005771C(v45, (double *)v9))
    {
      v9 += 40;
      if (v9 == v10)
      {
        v9 = v10;
        goto LABEL_23;
      }
    }
    if (v9 != v10)
    {
      for (i = v9 + 40; i != v10; i += 40)
      {
        if (!sub_10005771C(v45, (double *)i))
        {
          v12 = *(double *)i;
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(i + 8);
          *(double *)v9 = v12;
          v13 = (void **)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            operator delete(*v13);
          v14 = *(_OWORD *)(i + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(i + 32);
          *(_OWORD *)v13 = v14;
          *(_BYTE *)(i + 39) = 0;
          *(_BYTE *)(i + 16) = 0;
          v9 += 40;
        }
      }
    }
  }
LABEL_23:
  v15 = *(uint64_t **)(a1 + 32);
  if ((uint64_t *)v9 != v15)
  {
    sub_100011A2C((uint64_t)&v48, *(uint64_t **)(a1 + 32), v15, v9);
    v9 = v16;
    for (j = *(_QWORD *)(a1 + 32); j != v9; j -= 40)
    {
      if (*(char *)(j - 1) < 0)
        operator delete(*(void **)(j - 24));
    }
    *(_QWORD *)(a1 + 32) = v9;
  }
  if (*(_QWORD *)(a1 + 24) == v9)
  {
    v18 = v46;
    v19 = v47;
    sub_10000E8A0(v39, "{}");
    v41 = v18;
    v42 = v19;
    if (SHIBYTE(v40) < 0)
    {
      sub_100004870(&__p, v39[0], (unint64_t)v39[1]);
    }
    else
    {
      __p = *(_OWORD *)v39;
      v44 = v40;
    }
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 32);
    if (v21 >= v20)
    {
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - *v8) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0x666666666666666)
        sub_100004C50();
      v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - *v8) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x333333333333333)
        v27 = 0x666666666666666;
      else
        v27 = v25;
      v50 = a1 + 40;
      if (v27)
        v28 = (char *)sub_100011E8C(a1 + 40, v27);
      else
        v28 = 0;
      v29 = (uint64_t)&v28[40 * v24];
      v48 = v28;
      *(_QWORD *)v49 = v29;
      *(_QWORD *)&v49[16] = &v28[40 * v27];
      v30 = v41;
      *(_BYTE *)(v29 + 8) = v42;
      *(_QWORD *)v29 = v30;
      v31 = __p;
      *(_QWORD *)(v29 + 32) = v44;
      *(_OWORD *)(v29 + 16) = v31;
      v44 = 0;
      __p = 0uLL;
      *(_QWORD *)&v49[8] = v29 + 40;
      sub_100011ED0(a1 + 40, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24), v29, v29);
      v32 = *(_QWORD *)(a1 + 40);
      v38 = *(_QWORD *)&v49[8];
      v33 = *(_OWORD *)&v49[8];
      v34 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v35;
      *(_OWORD *)v49 = v34;
      *(_OWORD *)(a1 + 32) = v33;
      *(_QWORD *)&v49[16] = v32;
      v48 = (char *)v34;
      sub_1000120FC((uint64_t)&v48);
      v36 = SHIBYTE(v44);
      *(_QWORD *)(a1 + 32) = v38;
      if (v36 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v22 = v41;
      *(_BYTE *)(v21 + 8) = v42;
      *(_QWORD *)v21 = v22;
      v23 = __p;
      *(_QWORD *)(v21 + 32) = v44;
      *(_OWORD *)(v21 + 16) = v23;
      v44 = 0;
      __p = 0uLL;
      *(_QWORD *)(a1 + 32) = v21 + 40;
    }
    if (SHIBYTE(v40) < 0)
      operator delete(v39[0]);
  }
  if (HIBYTE(v47))
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(a1 + 71))
        return sub_100012184(v55);
      goto LABEL_54;
    }
    if (*(_QWORD *)(a1 + 56))
LABEL_54:
      sub_100010958((char *)a1);
  }
  return sub_100012184(v55);
}

void sub_10005734C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  if (a17 < 0)
    operator delete(__p);
  sub_100012184((_QWORD *)(v41 - 120));
  _Unwind_Resume(a1);
}

void sub_100057418()
{
  operator delete();
}

_QWORD *sub_10005742C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3A10;
  result[1] = v3;
  return result;
}

uint64_t sub_100057460(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3A10;
  a2[1] = v2;
  return result;
}

void sub_10005747C(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100010ECC((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100057548(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100057584()
{
}

void sub_100057594()
{
  operator delete();
}

_QWORD *sub_1000575A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3A90;
  result[1] = v3;
  return result;
}

uint64_t sub_1000575DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3A90;
  a2[1] = v2;
  return result;
}

__n128 sub_1000575F8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_1000576D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100057710()
{
}

BOOL sub_10005771C(double *a1, double *a2)
{
  double v3;
  uint64_t v4;
  _BYTE *v6;
  double v7;
  double v8;
  double *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  const char *p_p;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BOOL4 v32;

  v3 = *a1;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)&v3 + 96);
  if (!v4)
    sub_100004FB0();
  v6 = a2 + 1;
  (*(void (**)(uint64_t, double *, void **))(*(_QWORD *)v4 + 48))(v4, a2 + 1, &__p);
  v7 = *a2;
  v8 = a1[1];
  if (*a2 < v8)
    **((_BYTE **)a1 + 2) = 1;
  v9 = (double *)*((_QWORD *)a1 + 4);
  if (*v9 < v7)
  {
    *v9 = v7;
    **((_BYTE **)a1 + 3) = *v6;
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v11 = (_QWORD *)(*(_QWORD *)&v3 + 160);
    if (*(char *)(*(_QWORD *)&v3 + 183) < 0)
      v11 = (_QWORD *)*v11;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *a2;
    if (SHIBYTE(v18) < 0)
    {
      if (v17)
        p_p = (const char *)__p;
      else
        p_p = "";
    }
    else
    {
      p_p = (const char *)&__p;
      if (!HIBYTE(v18))
        p_p = "";
    }
    *(_DWORD *)buf = 68290307;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v11;
    v25 = 2049;
    v26 = v12;
    v27 = 2049;
    v28 = v13;
    v29 = 2081;
    v30 = p_p;
    v31 = 1025;
    v32 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#saEventHistory,cleanup\", \"history\":%{private, location:escape_only}s, \"before\":\"%{private}0.1f\", \"ts\":\"%{private}0.1f\", \"value\":%{private, location:escape_only}s, \"remove\":%{private}hhd}", buf, 0x40u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return v7 < v8;
}

void sub_1000578E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100057904()
{
  operator delete();
}

_QWORD *sub_100057918(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3B10;
  result[1] = v3;
  return result;
}

uint64_t sub_10005794C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3B10;
  a2[1] = v2;
  return result;
}

void sub_100057968(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100056078((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100057A34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100057A70()
{
}

void sub_100057A80()
{
  operator delete();
}

_QWORD *sub_100057A94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3B90;
  result[1] = v3;
  return result;
}

uint64_t sub_100057AC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3B90;
  a2[1] = v2;
  return result;
}

__n128 sub_100057AE4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100057BC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100057BFC()
{
}

uint64_t *sub_100057C08(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000162D4(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_100057CC4()
{
  operator delete();
}

_QWORD *sub_100057CD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3C10;
  result[1] = v3;
  return result;
}

uint64_t sub_100057D0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3C10;
  a2[1] = v2;
  return result;
}

void sub_100057D28(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_BYTE **)(a1 + 8);
  if (!v1[1])
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,init,load\"}", (uint8_t *)v3, 0x12u);
    }
    sub_100056078((uint64_t)v1);
    *v1 = 1;
  }
}

uint64_t sub_100057DF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100057E30()
{
}

void sub_100057E40()
{
  operator delete();
}

_QWORD *sub_100057E54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3C90;
  result[1] = v3;
  return result;
}

uint64_t sub_100057E88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3C90;
  a2[1] = v2;
  return result;
}

__n128 sub_100057EA4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __n128 result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 1) && !*(_BYTE *)(v1 + 185))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#raii,destroy,clear\"}", (uint8_t *)v9, 0x12u);
    }
    *(_BYTE *)v1 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v1 + 8) = _Q0;
    *(_BYTE *)(v1 + 152) = 0;
    sub_10000E854((uint64_t *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100057F80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100057FBC()
{
}

uint64_t sub_100057FC8(uint64_t a1, _QWORD **a2, SAPlatformInfo **a3)
{
  NSObject *v6;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  __int128 v18;
  NSObject *v19;
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  _BYTE v24[48];
  char v25;
  void *__p;
  void *v27;
  uint64_t v28;
  _BYTE buf[32];
  __int128 v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *v34[2];
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,handleBleAlert\"}", buf, 0x12u);
  }
  if (*a3 && *a2)
  {
    v36 = 0u;
    *(_OWORD *)v34 = 0u;
    memset(v35, 0, sizeof(v35));
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    *(_OWORD *)v31 = 0u;
    memset(buf, 0, sizeof(buf));
    __asm { FMOV            V0.2D, #10.0 }
    v38 = _Q0;
    __asm { FMOV            V0.2D, #-1.0 }
    v39 = _Q0;
    v40 = _Q0;
    v37 = 0;
    v41 = 0xBFF0000000000000;
    v13 = sub_1000687EC();
    sub_10002AEE8((uint64_t)v13, (std::string *)buf);
    if (sub_100031944((uint64_t)*a3, (void **)(a1 + 176), (uint64_t)buf, 0))
    {
      v14 = SALogObjectGeneral;
      v15 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v24 = 68289026;
        *(_DWORD *)&v24[4] = 0;
        *(_WORD *)&v24[8] = 2082;
        *(_QWORD *)&v24[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alerthandler,handleBleAlert,duplicateAlert\"}", v24, 0x12u);
        v15 = 0;
      }
    }
    else
    {
      sub_10003176C(*a3, (void **)(a1 + 176));
      v24[0] = 0;
      *(_OWORD *)&v24[4] = xmmword_1000ADFE0;
      *(_OWORD *)&v24[20] = xmmword_1000ADFF0;
      *(_QWORD *)&v24[36] = &_mh_execute_header;
      *(_DWORD *)&v24[44] = 0;
      v27 = 0;
      v28 = 0;
      __p = 0;
      v17 = (char *)sub_1000687EC();
      v18 = *((_OWORD *)v17 + 26);
      *(_OWORD *)v24 = *((_OWORD *)v17 + 25);
      *(_OWORD *)&v24[16] = v18;
      *(_OWORD *)&v24[32] = *((_OWORD *)v17 + 27);
      v25 = v17[448];
      if (v17 + 400 != v24)
        sub_100017854(&__p, *((uint64_t **)v17 + 57), *((uint64_t **)v17 + 58), (uint64_t)(*((_QWORD *)v17 + 58) - *((_QWORD *)v17 + 57)) >> 3);
      if (v25)
      {
        v15 = sub_10006C76C(*a2, a1);
      }
      else
      {
        v19 = SALogObjectGeneral;
        v15 = 0;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v21[0] = 68289026;
          v21[1] = 0;
          v22 = 2082;
          v23 = "";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alerthandler,handleBleAlert,display blocked by MA\"}", (uint8_t *)v21, 0x12u);
          v15 = 0;
        }
      }
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
    }
    *(_QWORD *)v24 = &v36;
    sub_100004EC0((void ***)v24);
    *(_QWORD *)v24 = (char *)v35 + 8;
    sub_100004EC0((void ***)v24);
    if (SBYTE7(v35[0]) < 0)
      operator delete(v34[0]);
    if (SHIBYTE(v33) < 0)
      operator delete(v32[1]);
    if (SHIBYTE(v32[0]) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v30) < 0)
      operator delete(*(void **)&buf[24]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v16 = SALogObjectGeneral;
    v15 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,handleBleAlert,invalid parser or displayAlert\"}", buf, 0x12u);
      return 0;
    }
  }
  return v15;
}

void sub_100058364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);
  sub_100032A34((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_100058390(void *a1)
{
  id v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  v1 = a1;
  v2 = *((unsigned __int8 *)sub_10003D044() + 177);
  v3 = SALogObjectGeneral;
  v4 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,create,test\"}", (uint8_t *)&v5, 0x12u);
    }
    operator new();
  }
  if (v4)
  {
    v5 = 68289026;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pull,create,prod\"}", (uint8_t *)&v5, 0x12u);
  }
  operator new();
}

void sub_100058568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == v12)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  operator delete();
}

void sub_10005862C(void *a1)
{
  id v1;

  v1 = a1;
  if (*((_BYTE *)sub_10003D044() + 243))
    operator new();
  operator new();
}

void sub_10005874C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100058810(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;

  sub_100004F4C((uint64_t)v7, a3);
  *a1 = off_1000F3D88;
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *a1 = off_1000F3D30;
  return a1;
}

void sub_1000588C0()
{
  operator delete();
}

uint64_t sub_1000588E4(uint64_t a1)
{

  return a1;
}

void sub_10005890C(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100058948(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  id v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  NSObject *v14;
  _BOOL4 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v9 = a2;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = (unint64_t)a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  sub_100050060(a1 + 112);
  *(_WORD *)(a1 + 2040) = 0;
  if (a3 <= 0.0)
  {
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v11 = "{\"msg%{public}.0s\":\"#rm,initFailed,invalidRollingPeriod\"}";
      goto LABEL_10;
    }
  }
  else if (a4 >= 0.0)
  {
    if (a5 >= 0.0)
    {
      v14 = SALogObjectGeneral;
      v15 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
      if (a4 + a5 <= a3)
      {
        if (v15)
        {
          *(_DWORD *)buf = 68289026;
          v17 = 0;
          v18 = 2082;
          v19 = "";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,initializing\"}", buf, 0x12u);
        }
        operator new();
      }
      if (v15)
      {
        *(_DWORD *)buf = 68289026;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v11 = "{\"msg%{public}.0s\":\"#rm,initFailed,delayTooLong\"}";
        v12 = v14;
        goto LABEL_11;
      }
    }
    else
    {
      v10 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v11 = "{\"msg%{public}.0s\":\"#rm,initFailed,invalidRandomDelay\"}";
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v11 = "{\"msg%{public}.0s\":\"#rm,initFailed,invalidFixedDelay\"}";
LABEL_10:
      v12 = v10;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
    }
  }

  return a1;
}

void sub_10005916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a31 == v41)
  {
    v44 = 4;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v44 = 5;
    v41 = a31;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v44))(v41);
LABEL_6:
  v45 = a27;
  if (a27 == &a24)
  {
    v46 = 4;
    v45 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_11;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_11:
  if (a19 < 0)
    operator delete(__p);
  sub_10005935C(&a36);
  sub_10005204C(v40);
  sub_10005B0A0(v39);
  v47 = *(_QWORD *)(v36 + 64);
  *(_QWORD *)(v36 + 64) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  sub_100059B90(a10, 0);
  sub_100059B54(v38, 0);
  v48 = *(_QWORD *)(v36 + 40);
  *(_QWORD *)(v36 + 40) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *v42;
  *v42 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);

  _Unwind_Resume(a1);
}

_QWORD *sub_10005935C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_100059408(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_time_t v6;
  NSObject *v7;
  _QWORD block[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,cleanup\"}", buf, 0x12u);
  }
  v3 = (uint64_t)((double)((unint64_t)(uint64_t)(double)time(0) / *(_QWORD *)(a1 + 8) * *(_QWORD *)(a1 + 8))
               + -978307200.0);
  v4 = v3 - (unint64_t)*((double *)sub_10003D044() + 34);
  v5 = v3 - (unint64_t)*((double *)sub_10003D044() + 35);
  sub_100053ED0(a1 + 112, (double)v4);
  sub_100054244(a1 + 112, (double)v5);
  v6 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 10800000000000);
  v7 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005AECC;
  block[3] = &unk_1000F1EB8;
  block[4] = a1;
  dispatch_after(v6, v7, block);
}

void sub_100059580(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  xpc_object_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD handler[5];
  uint8_t buf[8];
  _BYTE v16[32];
  double v17;
  __int16 v18;
  double v19;

  if (*((_DWORD *)sub_10003D044() + 66))
  {
    v2 = (uint64_t)(double)time(0);
    v3 = (double)(uint64_t)(*(_QWORD *)(a1 + 8) + (unint64_t)v2 / *(_QWORD *)(a1 + 8) * *(_QWORD *)(a1 + 8));
    v4 = (uint64_t)(*(double *)(a1 + 16) + v3);
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2050;
      *(double *)&v16[12] = (double)v2;
      *(_WORD *)&v16[20] = 2050;
      *(double *)&v16[22] = v3;
      *(_WORD *)&v16[30] = 2050;
      v17 = (double)v4;
      v18 = 2050;
      v19 = (double)(v4 - v2);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,#test,nextFireDelay\", \"now\":\"%{public}0.1f\", \"endOfDay\":\"%{public}0.1f\", \"nextExpiry\":\"%{public}0.1f\", \"delay\":\"%{public}0.1f\"}", buf, 0x3Au);
    }
    v6 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)((double)(v4 - v2) * 1000000000.0));
    v7 = *(NSObject **)a1;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v16 = 3221225472;
    *(_QWORD *)&v16[8] = sub_100059C8C;
    *(_QWORD *)&v16[16] = &unk_1000F1EB8;
    *(_QWORD *)&v16[24] = a1;
    dispatch_after(v6, v7, buf);
  }
  else
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8)
    {
      v9 = (uint64_t)(double)time(0);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = (uint64_t)(*(double *)(a1 + 16) + (double)(uint64_t)(v10 + v9 / v10 * v10));
      v12 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v16 = 2082;
        *(_QWORD *)&v16[2] = "";
        *(_WORD *)&v16[10] = 2050;
        *(double *)&v16[12] = (double)(uint64_t)v9;
        *(_WORD *)&v16[20] = 2050;
        *(double *)&v16[22] = (double)(uint64_t)(v10 + v9 / v10 * v10);
        *(_WORD *)&v16[30] = 2050;
        v17 = (double)v11;
        v18 = 2050;
        v19 = (double)(uint64_t)(v11 - v9);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,nextFireDelay\", \"now\":\"%{public}0.1f\", \"endOfDay\":\"%{public}0.1f\", \"nextExpiry\":\"%{public}0.1f\", \"delay\":\"%{public}0.1f\"}", buf, 0x3Au);
        v10 = *(_QWORD *)(a1 + 8);
      }
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_INTERVAL, v10);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, (uint64_t)(double)(uint64_t)(v11 - v9));
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_RANDOM_INITIAL_DELAY, (uint64_t)*(double *)(a1 + 24));
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, 30);
      xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 0);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10005A3D0;
      handler[3] = &unk_1000F1DE8;
      handler[4] = a1;
      xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.rm"), "UTF8String"), v8, handler);
    }
    else
    {
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v16 = 2082;
        *(_QWORD *)&v16[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,#warning,cantCreateXpcDictionary\"}", buf, 0x12u);
      }
    }

  }
}

void sub_100059988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000599A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68289026;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,~SARollingMetrics\"}", (uint8_t *)v10, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*(_QWORD *)(a1 + 48))
    sub_100059B54((uint64_t *)(a1 + 48), 0);
  if (*(_QWORD *)(a1 + 56))
    sub_100059B90((uint64_t *)(a1 + 56), 0);
  sub_10005204C(a1 + 112);
  sub_10005B0A0(a1 + 72);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100059B90((uint64_t *)(a1 + 56), 0);
  sub_100059B54((uint64_t *)(a1 + 48), 0);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);

  return a1;
}

uint64_t sub_100059B54(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10005F148(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100059B90(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10006F510(result);
    operator delete();
  }
  return result;
}

void sub_100059BCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,onInitCompleted\"}", (uint8_t *)v4, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
    sub_10006F6E4(v3);
}

uint64_t sub_100059C8C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100059CB4(v1);
  return sub_100059580(v1);
}

void sub_100059CB4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  SASettings *v5;
  uint64_t v6;
  SASettings *v7;
  uint64_t v8;
  SASettings *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  SACommonUtils *v14;
  int v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  SACommonUtils *v20;
  int v21;
  int v22;
  uint32_t v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  time_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _QWORD v38[5];
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint8_t buf[8];
  __int128 v46;
  void *v47;
  _QWORD v48[3];

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    LOWORD(v46) = 2082;
    *(_QWORD *)((char *)&v46 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,onActivityTriggered\"}", buf, 0x12u);
  }
  if (!*(_BYTE *)(a1 + 2040))
  {
    v18 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_QWORD *)buf = 68289026;
    LOWORD(v46) = 2082;
    *(_QWORD *)((char *)&v46 + 2) = "";
    v19 = "{\"msg%{public}.0s\":\"#rm,#warning,device not unlocked since boot\"}";
    goto LABEL_26;
  }
  v3 = sub_10004D658();
  v4 = *((_QWORD *)v3 + 24);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v46 = 3221225472;
  *((_QWORD *)&v46 + 1) = sub_10004E9A8;
  v47 = &unk_1000F1EB8;
  v48[0] = v3;
  dispatch_async(v4, buf);
  if (!*(_BYTE *)(a1 + 2041))
  {
    v18 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_QWORD *)buf = 68289026;
    LOWORD(v46) = 2082;
    *(_QWORD *)((char *)&v46 + 2) = "";
    v19 = "{\"msg%{public}.0s\":\"#rm,#warning,country not supported\"}";
    goto LABEL_26;
  }
  v6 = SASettings::instance(v5);
  v7 = (SASettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (!(_DWORD)v7
    || (v8 = SASettings::instance(v7),
        v9 = (SASettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8),
        (v9 & 1) == 0))
  {
    v18 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_QWORD *)buf = 68289026;
    LOWORD(v46) = 2082;
    *(_QWORD *)((char *)&v46 + 2) = "";
    v19 = "{\"msg%{public}.0s\":\"#rm,#warning,phoneAnalytics Or SLC is restricted\"}";
    goto LABEL_26;
  }
  v10 = SASettings::instance(v9);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) & 1) == 0)
  {
    v18 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_QWORD *)buf = 68289026;
    LOWORD(v46) = 2082;
    *(_QWORD *)((char *)&v46 + 2) = "";
    v19 = "{\"msg%{public}.0s\":\"#rm,#warning,emergencyAlert is disabled\"}";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0x12u);
    return;
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_58;
  v11 = (uint64_t)(double)time(0);
  v12 = sub_100053BB8(a1 + 112, (double)(unint64_t)(v11 - *(_QWORD *)(a1 + 8)), (double)v11) - 1 < 2;
  v13 = sub_100053D44(a1 + 112, (double)(unint64_t)(v11 - *(_QWORD *)(a1 + 8)), (double)v11) - 1 < 2
     || v12;
  v14 = (SACommonUtils *)sub_10003D044();
  v15 = *((_DWORD *)v14 + 75);
  if (SACommonUtils::isLivabiltyEnabled(v14))
    v16 = 100;
  else
    v16 = v15;
  if (v16 < 0)
    v16 = *((_DWORD *)sub_1000687EC() + 4);
  if (v16 == 100)
  {
    v17 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      LOWORD(v46) = 2082;
      *(_QWORD *)((char *)&v46 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,isParticipatingInEfficacyMetrics,true,allParticipating\"}", buf, 0x12u);
    }
    goto LABEL_48;
  }
  v20 = (SACommonUtils *)sub_10003D044();
  v21 = *((_DWORD *)v20 + 59);
  if (SACommonUtils::isLivabiltyEnabled(v20))
    v22 = 100;
  else
    v22 = v21;
  if (v22 < 0)
    v22 = *((_DWORD *)sub_1000687EC() + 3);
  v23 = v16 - v22;
  if (v16 >= v22)
  {
    if ((v13 & 1) != 0)
    {
      v24 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_48;
      v25 = 1;
      goto LABEL_45;
    }
  }
  else
  {
    if (!v13)
    {
LABEL_42:
      v25 = 0;
      goto LABEL_44;
    }
    v23 = vcvtmd_s64_f64((double)v16 * 100.0 / (double)v22);
  }
  if (v23 > 0x64)
    goto LABEL_42;
  v25 = arc4random_uniform(0x64u) <= v23;
LABEL_44:
  v24 = SALogObjectGeneral;
  if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (!v25)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_45:
  *(_QWORD *)buf = 68290051;
  LOWORD(v46) = 2082;
  *(_QWORD *)((char *)&v46 + 2) = "";
  WORD5(v46) = 1025;
  HIDWORD(v46) = v16;
  LOWORD(v47) = 1025;
  *(_DWORD *)((char *)&v47 + 2) = v22;
  HIWORD(v47) = 1025;
  LODWORD(v48[0]) = v13;
  WORD2(v48[0]) = 1025;
  *(_DWORD *)((char *)v48 + 6) = v25;
  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,isParticipatingInEfficacyMetrics,\", \"efficacyMetricParticipationPercentage\":%{private}d, \"pushParticipationPercentage\":%{private}d, \"isSubscribed\":%{private}hhd, \"isParticipating\":%{private}hhd}", buf, 0x2Au);
  if (!v25)
    goto LABEL_58;
LABEL_48:
  sub_10005A658(a1, 0);
  v26 = *(_QWORD *)(a1 + 40);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_10005A70C;
  v38[3] = &unk_1000F1E08;
  v38[4] = a1;
  v43[0] = off_1000F1E38;
  v43[1] = objc_retainBlock(v38);
  v44 = v43;
  sub_100043B6C(v26, (uint64_t)v43);
  v27 = v44;
  if (v44 == v43)
  {
    v28 = 4;
    v27 = v43;
    goto LABEL_52;
  }
  if (v44)
  {
    v28 = 5;
LABEL_52:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  v29 = *(_QWORD *)(a1 + 40);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10005AABC;
  v37[3] = &unk_1000F1E08;
  v37[4] = a1;
  v41[0] = off_1000F1E38;
  v41[1] = objc_retainBlock(v37);
  v42 = v41;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 16))(v29, v41);
  v30 = v42;
  if (v42 == v41)
  {
    v31 = 4;
    v30 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_64;
  sub_10005A658(a1, 1);
  v32 = *(_QWORD *)(a1 + 64);
  v39[0] = off_1000F4008;
  v40 = v39;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v32 + 16))(v32, v39);
  v33 = v40;
  if (v40 == v39)
  {
    v34 = 4;
    v33 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_64;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_64:
  v35 = time(0);
  v36 = *(_QWORD *)(a1 + 32);
  if (v36)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, (uint64_t)((double)((unint64_t)(uint64_t)(double)v35 / *(_QWORD *)(a1 + 8) * *(_QWORD *)(a1 + 8))+ -978307200.0)- *(_QWORD *)(a1 + 8));
}

void sub_10005A350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char *v31;
  uint64_t v32;

  v31 = a26;
  if (a26 == &a23)
  {
    v32 = 4;
    v31 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10005A3D0(uint64_t a1, void *a2)
{
  NSObject **v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint8_t buf[8];
  __int128 v15;
  void *v16;
  NSObject **v17;

  v2 = *(NSObject ***)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#rm,#warning,process_xpcActivity,activity is nil\"}";
LABEL_13:
    v10 = buf;
    goto LABEL_14;
  }
  state = xpc_activity_get_state(v3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,process_xpcActivity\"}", buf, 0x12u);
  }
  if (!state)
    goto LABEL_15;
  if (state != 2)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#rm,#warning,process_xpcActivity,unexpectedXpcActivity\"}";
    goto LABEL_13;
  }
  v7 = *v2;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v15 = 3221225472;
  *((_QWORD *)&v15 + 1) = sub_10005A620;
  v16 = &unk_1000F1EB8;
  v17 = v2;
  dispatch_async(v7, buf);
  if (!xpc_activity_set_state(v4, 5))
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 68289026;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v9 = "{\"msg%{public}.0s\":\"#rm,#warning,process_xpcActivity,failedToSetState\"}";
      v10 = (uint8_t *)v11;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 0x12u);
    }
  }
LABEL_15:

}

void sub_10005A608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A620(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  sub_100059CB4(v1);
  sub_100059580(v1);
  objc_autoreleasePoolPop(v2);
}

void sub_10005A658(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  int v7;

  if (a2 == 1)
  {
    v5 = (uint64_t *)(a1 + 72);
    v7 = 1;
    goto LABEL_5;
  }
  if (!a2)
  {
    v7 = 0;
    v3 = sub_10005B9B8((uint64_t *)(a1 + 72), 0, &v7);
    sub_10005BED4(v3 + 3, 1, 1);
    v7 = 0;
    v4 = sub_10005B9B8((uint64_t *)(a1 + 72), 0, &v7);
    sub_10005BED4(v4 + 3, 0, 0);
    v7 = 0;
    v5 = (uint64_t *)(a1 + 72);
    a2 = 0;
LABEL_5:
    v6 = sub_10005B9B8(v5, a2, &v7);
    sub_10005BED4(v6 + 3, 2, 2);
  }
  sub_10005ABE4(*(uint64_t **)(a1 + 88));
}

void sub_10005A70C(uint64_t a1, char a2)
{
  _QWORD *v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((a2 & 1) != 0)
  {
    if (v5)
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,#downloadManifestCompleted\"}", (uint8_t *)&v6, 0x12u);
    }
    sub_10005A834((uint64_t)v3, 1);
    sub_10005A950(v3);
  }
  else if (v5)
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,#warning,downloadManifestFailed\"}", (uint8_t *)&v6, 0x12u);
  }
}

void sub_10005A834(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;

  v2 = *(_QWORD **)(a1 + 88);
  if (v2)
  {
    do
    {
      v6 = v2 + 4;
      v5 = (uint64_t *)v2[4];
      if (v5)
      {
        v7 = v2 + 4;
        v8 = v2[4];
        do
        {
          v9 = *(_DWORD *)(v8 + 28);
          v10 = v9 < a2;
          if (v9 >= a2)
            v11 = (uint64_t *)v8;
          else
            v11 = (uint64_t *)(v8 + 8);
          if (!v10)
            v7 = (_QWORD *)v8;
          v8 = *v11;
        }
        while (*v11);
        if (v7 != v6 && *((_DWORD *)v7 + 7) <= a2)
        {
          v12 = v2 + 4;
          v13 = v2[4];
          do
          {
            v14 = *(_DWORD *)(v13 + 28);
            v15 = v14 < a2;
            if (v14 >= a2)
              v16 = (uint64_t *)v13;
            else
              v16 = (uint64_t *)(v13 + 8);
            if (!v15)
              v12 = (_QWORD *)v13;
            v13 = *v16;
          }
          while (*v16);
          if (v12 != v6 && *((_DWORD *)v12 + 7) <= a2)
          {
            v17 = (_QWORD *)v12[1];
            v18 = v12;
            if (v17)
            {
              do
              {
                v19 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v19 = (_QWORD *)v18[2];
                v20 = *v19 == (_QWORD)v18;
                v18 = v19;
              }
              while (!v20);
            }
            if ((_QWORD *)v2[3] == v12)
              v2[3] = v19;
            --v2[5];
            sub_10005BF88(v5, v12);
            operator delete(v12);
          }
        }
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v21 = *(uint64_t **)(a1 + 88);
  }
  else
  {
    v21 = 0;
  }
  sub_10005ABE4(v21);
}

void sub_10005A950(_QWORD *a1)
{
  time_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9[2];

  v2 = time(0);
  v3 = a1[1];
  v4 = (uint64_t)((double)((uint64_t)(double)v2 / v3 * v3) + -978307200.0);
  v5 = v4 - v3;
  LODWORD(v8) = 0;
  if (!sub_10005B9B8(a1 + 9, 0, &v8)[5])
  {
    v6 = (_BYTE *)a1[5];
    if (v6)
    {
      if (v6[16])
      {
        (*(void (**)(_BYTE *, double, double))(*(_QWORD *)v6 + 24))(v6, (double)v5, (double)v4);
        sub_100053ED0((uint64_t)(a1 + 14), (double)v4);
      }
    }
  }
  LODWORD(v8) = 1;
  if (!sub_10005B9B8(a1 + 9, 1, &v8)[5])
  {
    v7 = a1[8];
    if (v7)
    {
      if (*(_BYTE *)(v7 + 16))
      {
        v9[0] = 0;
        v9[1] = 0;
        v8 = v9;
        sub_100054334((uint64_t)(a1 + 110), (uint64_t)&v8, (double)v5, (double)v4);
        SAGridMetrics::onSlcHistoryCb((_QWORD *)a1[8], &v8);
        (*(void (**)(_QWORD, double, double))(*(_QWORD *)a1[8] + 24))(a1[8], (double)v5, (double)v4);
        sub_10001606C((uint64_t)&v8, v9[0]);
      }
    }
  }
}

void sub_10005AAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001606C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_10005AABC(uint64_t a1, char a2)
{
  _QWORD *v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((a2 & 1) != 0)
  {
    if (v5)
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,biomeCompleted\"}", (uint8_t *)&v6, 0x12u);
    }
    sub_10005A834((uint64_t)v3, 0);
    sub_10005A950(v3);
  }
  else if (v5)
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,biomeCompleteFailed\"}", (uint8_t *)&v6, 0x12u);
  }
}

void sub_10005ABE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  NSObject *v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (uint64_t *)v1[3];
      if (v2 != v1 + 4)
      {
        v3 = SALogObjectGeneral;
        do
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
          {
            v4 = *((_DWORD *)v1 + 4);
            v5 = *((_DWORD *)v2 + 7);
            *(_DWORD *)buf = 68289539;
            v10 = 0;
            v11 = 2082;
            v12 = "";
            v13 = 1025;
            v14 = v4;
            v15 = 1025;
            v16 = v5;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rm,printWaitConditions\", \"metrics\":%{private}d, \"condition\":%{private}d}", buf, 0x1Eu);
            v3 = SALogObjectGeneral;
          }
          v6 = (uint64_t *)v2[1];
          if (v6)
          {
            do
            {
              v7 = v6;
              v6 = (uint64_t *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (uint64_t *)v2[2];
              v8 = *v7 == (_QWORD)v2;
              v2 = v7;
            }
            while (!v8);
          }
          v2 = v7;
        }
        while (v7 != v1 + 4);
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
}

void sub_10005AD3C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    sub_10005F208(v4, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    sub_10006FF78(v5, a2);
}

_QWORD *sub_10005AD84(_QWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *result;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rm,onEnhancedDeliveryEnabled\", \"isEnhancedDeliveryEnabled\":%{public}hhd}", (uint8_t *)v8, 0x18u);
  }
  v5 = a1[5];
  if (v5)
    *(_BYTE *)(v5 + 440) = a2;
  v6 = (_BYTE *)a1[6];
  if (v6)
    sub_10005F2D8(v6, a2);
  result = (_QWORD *)a1[7];
  if (result)
    return sub_10006FD9C((uint64_t)result, a2);
  return result;
}

void sub_10005AE7C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100052E30(a1 + 112, a2);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    sub_10005F3A8(v4, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    sub_100070098(v5, a2);
}

uint64_t sub_10005AECC(uint64_t a1)
{
  return sub_100059408(*(_QWORD *)(a1 + 32));
}

void sub_10005AED4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  double v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;

  *(_QWORD *)(a1 + 8) = (unint64_t)*(double *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100043AA4(*(_QWORD *)(a1 + 40), a2);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(double *)(a1 + 24);
    v5 = (unint64_t)*(double *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    v7[0] = 68289794;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v6;
    v12 = 2050;
    v13 = v5;
    v14 = 2050;
    v15 = (unint64_t)v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rm,updateMaConfig\", \"fRollingPeriodSeconds\":%{public}llu, \"fFixedDelaySeconds\":%{public}lu, \"fRandomDelaySeconds\":%{public}lu}", (uint8_t *)v7, 0x30u);
  }
}

void sub_10005AFD0(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,onSupportedByCountry\", \"isSupported\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 2041) = a2;
}

uint64_t sub_10005B0A0(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      sub_10005BDFC(v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_10005B100()
{
  operator delete();
}

_QWORD *sub_10005B114(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3E08;
  result[1] = v3;
  return result;
}

uint64_t sub_10005B148(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3E08;
  a2[1] = v2;
  return result;
}

void sub_10005B164(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(a2[1] - *a2) >> 5;
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2049;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,OnHistoricalLocationReceivedCb\", \"HistoricalLocationCount\":%{private}lu}", (uint8_t *)v8, 0x1Cu);
  }
  sub_10005A834((uint64_t)v3, 2);
  v6 = v3[5];
  if (v6)
    sub_100048020(v6, (uint64_t)a2);
  v7 = v3[8];
  if (v7)
    SAGridMetrics::onHistoricalLocationReceivedCb(v7, (uint64_t)a2);
  sub_10005A950(v3);
}

uint64_t sub_10005B274(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10005B2B0()
{
}

_QWORD *sub_10005B2BC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10005B424(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_10005B434()
{
  operator delete();
}

_QWORD *sub_10005B448()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3E88;
  return result;
}

void sub_10005B46C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3E88;
}

uint64_t sub_10005B488(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10005B4C4()
{
}

_QWORD *sub_10005B4D0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10005B638(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_10005B648()
{
  operator delete();
}

_QWORD *sub_10005B65C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F3F08;
  return result;
}

void sub_10005B680(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F3F08;
}

uint64_t sub_10005B69C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10005B6D8()
{
}

_QWORD *sub_10005B6E4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10005B84C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_10005B85C()
{
  operator delete();
}

_QWORD *sub_10005B870(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3F88;
  result[1] = v3;
  return result;
}

uint64_t sub_10005B8A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3F88;
  a2[1] = v2;
  return result;
}

void sub_10005B8C0()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rm,onSettingsChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_10005B970(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10005B9AC()
{
}

_QWORD *sub_10005B9B8(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[3] = v10 + 4;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_100004984();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_10005BDA0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_10005BDB8(1, v1);
  _Unwind_Resume(a1);
}

void sub_10005BDB8(char a1, _QWORD **a2)
{
  if (a1)
  {
    sub_10005BDFC(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_10005BDFC(_QWORD *a1)
{
  if (a1)
  {
    sub_10005BDFC(*a1);
    sub_10005BDFC(a1[1]);
    operator delete(a1);
  }
}

void sub_10005BE38()
{
  operator delete();
}

_QWORD *sub_10005BE4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F4008;
  return result;
}

void sub_10005BE70(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F4008;
}

uint64_t sub_10005BE8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10005BEC8()
{
}

uint64_t *sub_10005BED4(uint64_t *result, int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_100016328((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *sub_10005BF88(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10005C30C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL4 v8;
  int v9;

  v3 = *(_QWORD **)(a1 + 8);
  v1 = (_QWORD *)(a1 + 8);
  v2 = v3;
  if (!v3)
    goto LABEL_12;
  v4 = v1;
  v5 = v2;
  do
  {
    if (*((_BYTE *)v5 + 25))
      v6 = v5;
    else
      v6 = v5 + 1;
    if (*((_BYTE *)v5 + 25))
      v4 = v5;
    v5 = (_QWORD *)*v6;
  }
  while (*v6);
  do
  {
    v7 = v2;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  LODWORD(v2) = v4 != v1;
  if (v7 == v1 || *((_BYTE *)v7 + 25))
LABEL_12:
    v7 = v1;
  v8 = v7 != v1;
  if (v7 == v1)
    v9 = (int)v2;
  else
    v9 = 1;
  if ((v2 & v8) != 0)
    LODWORD(v2) = 2;
  if (v9)
    return v2;
  else
    return 3;
}

void sub_10005C388(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  _QWORD *v4;
  id v5;
  __int128 v6;
  id v7;

  v3 = a1;
  v7 = v3;
  if (*((_BYTE *)sub_10003D044() + 324))
  {
    v4 = operator new(0x28uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = off_1000F40B8;
    v5 = v3;
    v4[3] = off_1000F3DB8;
    v4[4] = v5;
    *a2 = v4 + 3;
    a2[1] = v4;
  }
  else
  {
    sub_10005C498(&v7, &v6);
    *(_OWORD *)a2 = v6;
    v5 = v7;
  }

}

void sub_10005C428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_10005C448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F40B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005C458(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F40B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10005C488(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10005C498@<X0>(void **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_10005C4F0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10005C4DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10005C4F0(_QWORD *a1, void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000F4108;
  sub_100061530(a1 + 3, *a2);
  return a1;
}

void sub_10005C528(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10005C53C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005C54C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10005C57C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10005C58C(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  v3 = a2;
  *a1 = off_1000F4158;
  v4 = v3;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = v4;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,init\"}", (uint8_t *)v7, 0x12u);
  }

  return a1;
}

uint64_t sub_10005C674(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  *(_QWORD *)a1 = off_1000F4158;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,deinit\"}", (uint8_t *)v4, 0x12u);
  }

  return a1;
}

void sub_10005C754(uint64_t a1)
{
  sub_10005C674(a1);
  operator delete();
}

uint64_t sub_10005C778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t result;
  id v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t buf;
  __int16 v16;
  const char *v17;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery\"}", (uint8_t *)&buf, 0x12u);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result
    || (v8 = objc_alloc_init((Class)CBDiscovery),
        v9 = *(void **)(a1 + 16),
        *(_QWORD *)(a1 + 16) = v8,
        v9,
        (result = *(_QWORD *)(a1 + 16)) != 0))
  {
    objc_msgSend((id)result, "setDiscoveryFlags:", *(_QWORD *)(a2 + 8));
    objc_msgSend(*(id *)(a1 + 16), "setDispatchQueue:", *(_QWORD *)a2);
    objc_msgSend(*(id *)(a1 + 16), "addDiscoveryType:", *(unsigned int *)(a2 + 16));
    objc_msgSend(*(id *)(a1 + 16), "setUseCase:", *(unsigned int *)(a2 + 20));
    objc_msgSend(*(id *)(a1 + 16), "setBleScanRateScreenOff:", *(unsigned int *)(a2 + 24));
    objc_msgSend(*(id *)(a1 + 16), "setBleScanRate:", *(unsigned int *)(a2 + 28));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_10005C98C;
    v12[3] = &unk_1000F41C0;
    v12[4] = a1;
    v10 = v13;
    sub_100004F4C((uint64_t)v13, a3);
    objc_msgSend(*(id *)(a1 + 16), "setDeviceFoundHandler:", v12);
    objc_msgSend(*(id *)(a1 + 16), "activateWithCompletion:", &stru_1000F4210);
    if (v14 == v13)
    {
      v11 = 4;
    }
    else
    {
      if (!v14)
        return 1;
      v11 = 5;
      v10 = v14;
    }
    (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
    return 1;
  }
  return result;
}

void sub_10005C944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  _QWORD *v18;
  uint64_t v20;

  if (a18 == v18)
  {
    v20 = 4;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
    v18 = a18;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10005C98C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD block[4];
  id v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2113;
    v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery\", \"inDevice\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  v6 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10005CB14;
  block[3] = &unk_1000F4190;
  v7 = v3;
  v11 = v7;
  sub_100004F4C((uint64_t)v12, a1 + 40);
  dispatch_async(v6, block);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v9 = 5;
LABEL_7:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

}

void sub_10005CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10005CB14(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  _BYTE v7[24];
  _BYTE *v8;

  v2 = objc_autoreleasePoolPush();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10005CC60;
  v5[3] = &unk_1000F4190;
  v6 = *(id *)(a1 + 32);
  v3 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  sub_10005CC60((uint64_t)v5);
  if (v8 == v7)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
    v3 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10005CC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_10005CC60(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  id v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  v2 = *(id *)(a1 + 32);
  v6 = v2;
  v3 = *(_QWORD *)(a1 + 64);
  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery,fOnBLEAlertCb\"}", buf, 0x12u);
      v3 = *(_QWORD *)(a1 + 64);
      if (!v3)
        sub_100004FB0();
    }
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v3 + 48))(v3, &v6);
    v2 = v6;
  }
  else if (v5)
  {
    *(_DWORD *)buf = 68289026;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery,fOnBLEAlertCb failed\"}", buf, 0x12u);
  }

}

void sub_10005CDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10005CDCC(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_10005CDD8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10005CE0C(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  NSError *v10;

  v2 = a2;
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 68289026;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery,activateWithCompletion\"}", (uint8_t *)&v5, 0x12u);
  }
  if (v2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289283;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2113;
      v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startDiscovery\", \"Error\":%{private, location:escape_only}@}", (uint8_t *)&v5, 0x1Cu);
    }
  }

}

void sub_10005CF3C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,stopDiscovery\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

uint64_t sub_10005D008(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startAdvertising\"}", (uint8_t *)&v13, 0x12u);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v9 = SALogObjectGeneral;
    v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v10)
      return result;
    v13 = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v11 = "{\"msg%{public}.0s\":\"#bleti,startAdvertising,fDispatchQueue invalid\"}";
    goto LABEL_10;
  }
  v5 = objc_alloc_init((Class)CBAdvertiser);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;

  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    objc_msgSend(v7, "setDispatchQueue:", *(_QWORD *)(a1 + 8));
    objc_msgSend(*(id *)(a1 + 24), "setAdvertiseRate:", *(unsigned int *)(a2 + 8));
    objc_msgSend(*(id *)(a1 + 24), "setUseCase:", *(unsigned int *)(a2 + 12));
    objc_msgSend(*(id *)(a1 + 24), "setSafetyAlertsAlertData:", *(_QWORD *)(a2 + 16));
    objc_msgSend(*(id *)(a1 + 24), "setSafetyAlertsSignature:", *(_QWORD *)(a2 + 24));
    objc_msgSend(*(id *)(a1 + 24), "setSafetyAlertsVersion:", *(unsigned __int8 *)(a2 + 40));
    objc_msgSend(*(id *)(a1 + 24), "setSafetyAlertsAlertID:", *(_QWORD *)(a2 + 32));
    objc_msgSend(*(id *)(a1 + 24), "activateWithCompletion:", &stru_1000F4230);
    return 1;
  }
  v9 = SALogObjectGeneral;
  v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v12)
  {
    v13 = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v11 = "{\"msg%{public}.0s\":\"#bleti,startAdvertising fAdvertiser invalid\"}";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, 0x12u);
    return 0;
  }
  return result;
}

void sub_10005D214(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  NSError *v10;

  v2 = a2;
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 68289026;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startAdvertisingCb\"}", (uint8_t *)&v5, 0x12u);
  }
  if (v2)
  {
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289283;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2113;
      v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,startAdvertisingCb\", \"Error\":%{private, location:escape_only}@}", (uint8_t *)&v5, 0x1Cu);
    }
  }

}

void sub_10005D344(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,stopAdvertisingOverBLE\"}", (uint8_t *)&v6, 0x12u);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v4 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bleti,stopAdvertisingOverBLE,advertiser released\"}", (uint8_t *)&v6, 0x12u);
    }
  }
}

BOOL sub_10005D474(_BYTE *a1)
{
  int v2;
  unint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL8 result;
  stat v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  char *v13;
  char v14[1024];

  bzero(v14, 0x400uLL);
  v2 = *a1;
  if (!*a1)
    return 1;
  v3 = 0;
  while (1)
  {
    v14[v3] = v2;
    if (v2 == 47)
    {
      if (stat(v14, &v7))
        break;
    }
LABEL_8:
    result = 1;
    if (v3 <= 0x3FD)
    {
      v2 = a1[++v3];
      if (v2)
        continue;
    }
    return result;
  }
  v4 = mkdir(v14, 0x1FFu);
  v5 = SALogObjectGeneral;
  result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"createDirectoriesToPath dir created\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_8;
  }
  if (result)
  {
    *(_DWORD *)buf = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,createDirectoriesToPath dir created failed\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    return 0;
  }
  return result;
}

BOOL sub_10005D630(const char *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL8 result;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if (!a1)
  {
    v7 = SALogObjectGeneral;
    result = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"setFileProtectionClass,sFilename==nullptr\"}", buf, 0x12u);
    return 0;
  }
  v4 = open(a1, 2);
  if (v4 < 0)
  {
    v9 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *__error();
      *(_DWORD *)buf = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1025;
      LODWORD(v19) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setFileProtectionClass,open,\", \"errno,\":%{private}d}", buf, 0x18u);
    }
LABEL_13:

    return 0;
  }
  v5 = v4;
  v6 = fcntl(v4, 63);
  if (v6 != (_DWORD)a2)
  {
    v11 = fcntl(v5, 64, a2);
    close(v5);
    if (!v11)
      goto LABEL_15;
    v9 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *__error();
      *(_DWORD *)buf = 68290051;
      v16 = 2082;
      v15 = 0;
      v17 = "";
      v18 = 2081;
      v19 = a1;
      v20 = 1025;
      v21 = v6;
      v22 = 1025;
      v23 = a2;
      v24 = 1025;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,setFileProtectionClass\", \"file,\":%{private, location:escape_only}s, \"oldPc,\":%{private}d, \"newPc,\":%{private}d, \"errno,\":%{private}d}", buf, 0x2Eu);
    }
    goto LABEL_13;
  }
  close(v5);
LABEL_15:
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290051;
    v16 = 2082;
    v15 = 0;
    v17 = "";
    v18 = 2081;
    v19 = a1;
    v20 = 1025;
    v21 = v6;
    v22 = 1025;
    v23 = a2;
    v24 = 1025;
    v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setFileProtectionClass\", \"file,\":%{private, location:escape_only}s, \"oldPc,\":%{private}d, \"newPc,\":%{private}d, \"ret,\":%{private}d}", buf, 0x2Eu);
  }
  return 1;
}

void sub_10005D908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10005D924(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a1)
  {
    if (a2)
      operator new[]();
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v3 = "{\"msg%{public}.0s\":\"#ps,#warning,invalidToPath\"}";
      goto LABEL_8;
    }
  }
  else
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v3 = "{\"msg%{public}.0s\":\"#ps,#warning,invalidFromPath\"}";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v5, 0x12u);
    }
  }
  return 0;
}

void sub_10005DD88()
{
  FILE *v0;
  void *v1;

  sub_10005DDEC(v0);
  operator delete[]();
}

FILE *sub_10005DDEC(FILE *result)
{
  FILE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (result)
  {
    v1 = result;
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ps,Closing fp\"}", (uint8_t *)v3, 0x12u);
    }
    return (FILE *)fclose(v1);
  }
  return result;
}

uint64_t *sub_10005DEAC(uint64_t *a1)
{
  sub_10005E97C(a1, 0);
  return a1;
}

uint64_t start()
{
  void *v0;
  SAPlatformInfo *v1;
  SAPlatformInfo *v2;
  id *v3;
  NSObject *v4;
  _BOOL8 v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  v0 = objc_autoreleasePoolPush();
  signal(14, (void (__cdecl *)(int))sub_10005E26C);
  signal(2, (void (__cdecl *)(int))sub_10005E26C);
  signal(3, (void (__cdecl *)(int))sub_10005E26C);
  signal(15, (void (__cdecl *)(int))sub_10005E26C);
  SALogInit();
  v2 = (SAPlatformInfo *)objc_msgSend(*(id *)SAPlatformInfo::instance(v1), "isEqualToString:", CFSTR("iPhone"));
  if ((v2 & 1) != 0
    || (v3 = (id *)SAPlatformInfo::instance(v2), objc_msgSend(*v3, "isEqualToString:", CFSTR("Watch")))
    && *((_BYTE *)v3 + 8))
  {
    v4 = SALogObjectGeneral;
    v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      v13 = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1025;
      v18 = 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ff1\", \"enabled\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
    }
    if (*((_BYTE *)SAPlatformInfo::instance((SAPlatformInfo *)v5) + 9))
    {
      v6 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = _os_feature_enabled_impl("SafetyAlerts", "SafetyAlertsLivability");
        v13 = 68289283;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        v17 = 1025;
        v18 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ff2\", \"enabled\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
      }

    }
    v8 = *((unsigned __int8 *)sub_10003D044() + 48);
    v9 = SALogObjectGeneral;
    v10 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        v13 = 68289026;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SafetyAlerts features enabled\"}", (uint8_t *)&v13, 0x12u);
      }
      sub_10005E1F4();
    }
    if (v10)
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v11 = "{\"msg%{public}.0s\":\"SafetyAlerts disabled\"}";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, 0x12u);
    }
  }
  else
  {
    v9 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v11 = "{\"msg%{public}.0s\":\"SafetyAlerts not supported in this platform\"}";
      goto LABEL_15;
    }
  }
  objc_autoreleasePoolPop(v0);
  return 0;
}

void sub_10005E1DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005E1F4()
{
  operator new();
}

void sub_10005E234()
{
  operator delete();
}

uint64_t *sub_10005E258(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  return sub_10005E97C(&qword_100102DD8, v1);
}

void sub_10005E26C(int a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  NSObject *v7;
  _OWORD *v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject **v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20[2];
  void *__p[2];
  uint64_t v22;
  _OWORD *v23;
  std::__shared_weak_count *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint8_t v27[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint8_t *v32;
  uint64_t buf;
  __int16 v34;
  const char *v35;
  __int16 v36;
  _OWORD *v37;

  sub_10000E8A0(__p, "com.apple.safetyalerts.shutdown");
  v25[0] = off_1000F42C8;
  v26 = v25;
  v2 = (char *)operator new(0x58uLL);
  v3 = (std::__shared_weak_count *)v2;
  *((_QWORD *)v2 + 1) = 0;
  v4 = (unint64_t *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_1000F4278;
  v5 = v2 + 24;
  v32 = v27;
  *(_QWORD *)v27 = off_1000F42C8;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    *v5 = *(_OWORD *)__p;
    *((_QWORD *)v2 + 5) = v22;
LABEL_3:
    v3[3].__vftable = (std::__shared_weak_count_vtbl *)&v3[2];
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v27 + 24))((uint64_t)v27, &v3[2].__vftable);
    goto LABEL_8;
  }
  sub_100004870(v2 + 24, __p[0], (unint64_t)__p[1]);
  v6 = (uint64_t)v32;
  if (v32)
  {
    if (v32 == v27)
      goto LABEL_3;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 16))();
  }
  v3[3].__vftable = (std::__shared_weak_count_vtbl *)v6;
LABEL_8:
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8 = v5;
    if (SHIBYTE(v3[1].__shared_weak_owners_) < 0)
      v8 = *(_OWORD **)v5;
    buf = 68289283;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sharedobj,create\", \"id\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  v9 = v32;
  if (v32 == v27)
  {
    v10 = 4;
    v9 = v27;
  }
  else
  {
    if (!v32)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_17:
  v23 = v5;
  v24 = v3;
  v11 = v26;
  if (v26 == v25)
  {
    v12 = 4;
    v11 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_22;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_22:
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if ((a1 - 2) < 2 || a1 == 15)
  {
    alarm(0xAu);
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v27 = 68289282;
      *(_DWORD *)&v27[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 1026;
      v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SafetyAlerts shutdown started\", \"signal\":%{public}d}", v27, 0x18u);
    }
    v14 = (NSObject **)qword_100102DD8;
    v20[0] = (uint64_t)v5;
    v20[1] = (uint64_t)v3;
    do
      v15 = __ldxr(v4);
    while (__stxr(v15 + 1, v4));
    sub_10007891C(v14, v20);
    do
      v16 = __ldaxr(v4);
    while (__stlxr(v16 - 1, v4));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (a1 == 14)
  {
    sub_10005E67C();
    _Exit(1);
  }
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_10005E5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  std::__shared_weak_count *v27;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v29 = a27;
  if (a27 == &a24)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v31);
  v32 = a23;
  if (a23 == &a20)
  {
    v33 = 4;
    v32 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void (__cdecl *sub_10005E67C())(int)
{
  signal(14, (void (__cdecl *)(int))1);
  signal(2, (void (__cdecl *)(int))1);
  signal(3, (void (__cdecl *)(int))1);
  return signal(15, (void (__cdecl *)(int))1);
}

void sub_10005E6B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005E6C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10005E6F8(uint64_t a1)
{
  void **v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;

  v2 = (void **)(a1 + 24);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4 = v2;
    if (*(char *)(a1 + 47) < 0)
      v4 = *v2;
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sharedobj,release\", \"id\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    sub_100004FB0();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v6 = *(_QWORD **)(a1 + 72);
  if (v6 == (_QWORD *)(a1 + 48))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
}

void sub_10005E830(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_10005E844()
{
  operator delete();
}

_QWORD *sub_10005E858()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F42C8;
  return result;
}

void sub_10005E87C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F42C8;
}

void sub_10005E894()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  sub_10005E97C(&qword_100102DD8, 0);
  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SafetyAlerts shutdown complete\"}", (uint8_t *)v1, 0x12u);
  }
  sub_10005E67C();
  _Exit(0);
}

uint64_t sub_10005E934(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4328))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10005E970()
{
  return &off_1000F4328;
}

uint64_t *sub_10005E97C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 423) < 0)
      operator delete(*(void **)(v2 + 400));
    if (*(char *)(v2 + 399) < 0)
      operator delete(*(void **)(v2 + 376));
    if (*(char *)(v2 + 375) < 0)
      operator delete(*(void **)(v2 + 352));
    v3 = *(_QWORD *)(v2 + 336);
    *(_QWORD *)(v2 + 336) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v17 = (void **)(v2 + 288);
    sub_100004EC0(&v17);
    v17 = (void **)(v2 + 264);
    sub_10005EBC4(&v17);
    v17 = (void **)(v2 + 208);
    sub_10005EC38(&v17);
    sub_100028C54(v2 + 192);
    sub_100028C54(v2 + 176);
    v4 = *(_QWORD *)(v2 + 168);
    *(_QWORD *)(v2 + 168) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(v2 + 160);
    *(_QWORD *)(v2 + 160) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(v2 + 152);
    *(_QWORD *)(v2 + 152) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    sub_10005ECAC((uint64_t *)(v2 + 144), 0);
    sub_100028C54(v2 + 128);
    v7 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *(_QWORD *)(v2 + 96);
    *(_QWORD *)(v2 + 96) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    sub_100028C54(v2 + 40);
    v16 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    sub_100028C54(v2 + 16);
    sub_10005ECE8((uint64_t *)(v2 + 8), 0);

    operator delete();
  }
  return result;
}

void sub_10005EBC4(void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 11;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10005EC38(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100029C60(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10005ECAC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10007E288(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10005ECE8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000261F8(result);
    operator delete();
  }
  return result;
}

void sub_10005ED24()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  __cxa_atexit((void (*)(void *))sub_10005DEAC, &qword_100102DD8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_10005ED64(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  _BOOL8 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  xpc_object_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  _QWORD v17[3];
  _QWORD *v18;
  uint8_t buf[8];
  _BYTE v20[24];
  uint64_t v21;

  v3 = a2;
  *(_DWORD *)a1 = 0;
  v4 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = SALogObjectGeneral;
  v6 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v20 = 2082;
    *(_QWORD *)&v20[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,init\"}", buf, 0x12u);
  }
  v7 = SASettings::instance((SASettings *)v6);
  v17[0] = off_1000F4388;
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  v10 = *((_DWORD *)sub_10003D044() + 77);
  *(double *)(a1 + 16) = (double)v10;
  if (v10 <= 0)
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v20 = 2082;
      *(_QWORD *)&v20[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ar,setupXpcActivity,invalid submission period\"}", buf, 0x12u);
    }
  }
  else
  {
    v11 = xpc_dictionary_create(0, 0, 0);
    v12 = SALogObjectGeneral;
    if (v11)
    {
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v20 = 2082;
        *(_QWORD *)&v20[2] = "";
        *(_WORD *)&v20[10] = 2049;
        *(_QWORD *)&v20[12] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,setupXpcActivity\", \"fSubmissionPeriod\":\"%{private}0.1f\"}", buf, 0x1Cu);
      }
      xpc_dictionary_set_int64(v11, XPC_ACTIVITY_INTERVAL, (uint64_t)*(double *)(a1 + 16));
      xpc_dictionary_set_BOOL(v11, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_int64(v11, XPC_ACTIVITY_DELAY, 0);
      xpc_dictionary_set_int64(v11, XPC_ACTIVITY_GRACE_PERIOD, 30);
      xpc_dictionary_set_string(v11, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
      xpc_dictionary_set_BOOL(v11, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_dictionary_set_BOOL(v11, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
      v14 = (const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.ar"), "UTF8String");
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)v20 = 3221225472;
      *(_QWORD *)&v20[8] = sub_10005F624;
      *(_QWORD *)&v20[16] = &unk_1000F1DE8;
      v21 = a1;
      xpc_activity_register(v14, v11, buf);
    }
    else if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v20 = 2082;
      *(_QWORD *)&v20[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ar,setupXpcActivity,cant create xpcDictionary\"}", buf, 0x12u);
    }

  }
  return a1;
}

void sub_10005F0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;

  v16 = a12;
  if (a12 == v14)
  {
    v17 = 4;
    v16 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_10005F148(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,released\"}", (uint8_t *)v4, 0x12u);
  }

  return a1;
}

void sub_10005F208(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onIsInCoveredAreaStateChange\", \"isInCoveredArea\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 1) = a2;
}

void sub_10005F2D8(_BYTE *a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onEnhancedDeliveryStateChanged\", \"isEnhancedDeliveryEnabled\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *a1 = a2;
}

void sub_10005F3A8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onSubscriptionStateChange\", \"isSubscribed\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 3) = a2;
}

void sub_10005F478(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onCompanionNearby\", \"isNearby\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_BYTE *)(a1 + 2) = a2;
}

void sub_10005F548(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289539;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1025;
    v11 = a2;
    v12 = 1025;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onMaVersionChange\", \"compVersion\":%{private}d, \"contentVersion\":%{private}d}", (uint8_t *)v7, 0x1Eu);
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a2;
}

void sub_10005F624(uint64_t a1, void *a2)
{
  uint64_t v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint8_t buf[8];
  __int128 v15;
  void *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#ar,processXpcActivity,activity is nil\"}";
LABEL_13:
    v10 = buf;
    goto LABEL_14;
  }
  state = xpc_activity_get_state(v3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,processXpcActivity\"}", buf, 0x12u);
  }
  if (!state)
    goto LABEL_15;
  if (state != 2)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#ar,processXpcActivity,unexpected xpcActivity\"}";
    goto LABEL_13;
  }
  v7 = *(NSObject **)(v2 + 8);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v15 = 3221225472;
  *((_QWORD *)&v15 + 1) = sub_10005F874;
  v16 = &unk_1000F1EB8;
  v17 = v2;
  dispatch_async(v7, buf);
  if (!xpc_activity_set_state(v4, 5))
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 68289026;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v9 = "{\"msg%{public}.0s\":\"#ar,processXpcActivity,failed to set state\"}";
      v10 = (uint8_t *)v11;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, v10, 0x12u);
    }
  }
LABEL_15:

}

void sub_10005F85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005F874(uint64_t a1)
{
  unsigned __int8 *v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  SASettings *v7;
  int v8;
  uint64_t v9;
  SASettings *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  SAPlatformInfo *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  int v23;
  int v24;
  _QWORD v25[5];
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;

  v1 = *(unsigned __int8 **)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onXpcActivityTriggered\"}", buf, 0x12u);
  }
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10005FB68;
  v25[3] = &unk_1000F1ED8;
  v25[4] = v1;
  AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.edAdoptionRate"), v25);
  v4 = (id)SALogObjectGeneral;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = SASettings::instance((SASettings *)v5);
    v7 = (SASettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
    v8 = (int)v7;
    v9 = SASettings::instance(v7);
    v10 = (SASettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    v11 = (int)v10;
    v12 = *v1;
    v13 = v1[2];
    v14 = SASettings::instance(v10);
    v15 = (SAPlatformInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
    v16 = (int)v15;
    v17 = v1[3];
    v18 = *((unsigned __int8 *)SAPlatformInfo::instance(v15) + 11);
    v19 = v1[1];
    v20 = *((_DWORD *)v1 + 6);
    v21 = *((_DWORD *)v1 + 7);
    *(_DWORD *)buf = 68291587;
    v28 = 2082;
    v27 = 0;
    v29 = "";
    v30 = 1026;
    v31 = v8;
    v32 = 1026;
    v33 = v11;
    v34 = 1026;
    v35 = v12;
    v36 = 1026;
    v37 = v13;
    v38 = 1026;
    v39 = v16;
    v40 = 1026;
    v41 = v17;
    v42 = 1026;
    v43 = v18;
    v44 = 1025;
    v45 = v19;
    v46 = 1026;
    v47 = v20;
    v48 = 1026;
    v49 = v21;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,submitAdoptionRateMetrics\", \"isAmberAlertEnabled\":%{public}hhd, \"isEmergencyAlertEnabled\":%{public}hhd, \"isEnhancedDeliveryEnabled\":%{public}hhd, \"isMagnetMode\":%{public}hhd, \"isPublicSafetyEnabled\":%{public}hhd, \"isSubscribed\":%{public}hhd, \"isTinkerWatch\":%{public}hhd, \"userInCoveredRegion\":%{private}hhd, \"maContentVersion\":%{public}d, \"maCompatibilityVersion\":%{public}d}", buf, 0x4Eu);
  }

  AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.codebook.adoptionRate"), &stru_1000F4358);
  v22 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_DWORD *)(sub_10001EB78()[1] + 76);
    v24 = *(_DWORD *)(sub_10001EB78()[1] + 72);
    *(_DWORD *)buf = 68289539;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 1025;
    v31 = v23;
    v32 = 1025;
    v33 = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,submitCodebookAdoptionMetrics\", \"compatibilityVersion\":%{private}d, \"contentVersion\":%{private}d}", buf, 0x1Eu);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10005FB4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10005FB68(SASettings *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  NSNumber *v3;
  uint64_t v4;
  NSNumber *v5;
  void *v6;
  SASettings *v7;
  uint64_t v8;
  NSNumber *v9;
  void *v10;
  SAPlatformInfo *v11;
  NSNumber *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  SASettings *v20;
  _QWORD v21[10];
  SASettings *v22;
  uint64_t v23;
  void *v24;
  SASettings *v25;
  void *v26;
  SAPlatformInfo *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v1 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v21[0] = CFSTR("isAmberAlertEnabled");
  v2 = SASettings::instance(a1);
  v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2));
  v20 = (SASettings *)objc_claimAutoreleasedReturnValue(v3);
  v22 = v20;
  v21[1] = CFSTR("isEmergencyAlertEnabled");
  v4 = SASettings::instance(v20);
  v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4));
  v23 = objc_claimAutoreleasedReturnValue(v5);
  v21[2] = CFSTR("isEnhancedDeliveryEnabled");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *v1));
  v24 = v6;
  v21[3] = CFSTR("isMagnetMode");
  v7 = (SASettings *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[2]));
  v25 = v7;
  v21[4] = CFSTR("isPublicSafetyEnabled");
  v8 = SASettings::instance(v7);
  v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v26 = v10;
  v21[5] = CFSTR("isSubscribed");
  v11 = (SAPlatformInfo *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[3]));
  v27 = v11;
  v21[6] = CFSTR("isTinkerWatch");
  v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)SAPlatformInfo::instance(v11) + 11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v28 = v13;
  v21[7] = CFSTR("maContentVersion");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v1 + 6)));
  v29 = v14;
  v21[8] = CFSTR("maCompatibilityVersion");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v1 + 7)));
  v30 = v15;
  v21[9] = CFSTR("userInCoveredRegion");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v1[1]));
  v31 = v16;
  v17 = (void *)v23;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, v21, 10));

  return v18;
}

void sub_10005FDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_10005FE6C(id a1)
{
  NSNumber *v1;
  void *v2;
  NSNumber *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v7[0] = CFSTR("compatibilityVersion");
  v1 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(sub_10001EB78()[1] + 76));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v7[1] = CFSTR("contentVersion");
  v8[0] = v2;
  v3 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(sub_10001EB78()[1] + 72));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v8[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));

  return (NSDictionary *)v5;
}

void sub_10005FF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10005FF78()
{
  operator delete();
}

_QWORD *sub_10005FF8C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F4388;
  return result;
}

void sub_10005FFB0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F4388;
}

void sub_10005FFC8()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ar,onSettingsChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_100060078(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000600B4()
{
}

uint64_t sub_1000600C0(uint64_t a1, void *a2, double a3)
{
  id v5;
  int v6;

  v5 = a2;
  *(_QWORD *)a1 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v5, 1uLL);
  *(double *)(a1 + 8) = a3;
  v6 = dword_100102A90++;
  *(_DWORD *)(a1 + 16) = v6;
  sub_100060164(a1, (uint64_t)"#dbg,#pull,SAAlertObject()");

  return a1;
}

void sub_100060144(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_100060164(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void **v21;

  v4 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    SACommonUtils::getAnyCmam(*(SACommonUtils **)a1, __p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68290051;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = a2;
    v16 = 1026;
    v17 = v5;
    v18 = 2050;
    v19 = v6;
    v20 = 2081;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlertObject\", \"context\":%{public, location:escape_only}s, \"uid\":%{public}d, \"fTime\":\"%{public}0.1f\", \"cmam\":%{private, location:escape_only}s}", buf, 0x36u);
    if (v9 < 0)
      operator delete(__p[0]);
  }

}

void sub_100060294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000602AC(uint64_t a1)
{
  sub_100060164(a1, (uint64_t)"#dbg,#pull,~SAAlertObject()");
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;

  return a1;
}

BOOL sub_1000602EC(void **a1, void *a2)
{
  SACommonUtils *v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  size_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BOOL8 v13;
  NSObject *v14;
  size_t v15;
  const void *p_p;
  size_t v17;
  _BOOL4 v18;
  NSObject *v19;
  void **p_s1;
  NSObject *v21;
  void *__s1;
  size_t v24;
  unsigned __int8 v25;
  void *__p;
  size_t v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  const void *v36;
  __int16 v37;
  _BOOL4 v38;

  v3 = a2;
  v4 = SALogObjectGeneral;
  if (v3)
  {
    v5 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      SACommonUtils::getAnyCmam(v3, &__p);
      v6 = (v28 & 0x80u) == 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 68289283;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#saAlert,isSameSafetyAlert\", \"otherAlert\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((char)v28 < 0)
        operator delete(__p);
    }

    sub_1000606CC(&__p, v3);
    v7 = v28;
    if ((v28 & 0x80u) != 0)
      v7 = v27;
    if (!v7)
    {
      v14 = SALogObjectGeneral;
      v13 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v30 = 0;
        v31 = 2082;
        v32 = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlert,isSameSafetyAlert,OtherAlertUidEmpty\"}", buf, 0x12u);
        v13 = 0;
      }
      goto LABEL_40;
    }
    sub_1000606CC(&__s1, *a1);
    v8 = v25;
    if ((char)v25 < 0)
    {
      v12 = v24;
      if (v24)
      {
        v9 = v28;
        v11 = v27;
        v10 = __s1;
LABEL_20:
        if ((v9 & 0x80u) == 0)
          v15 = v9;
        else
          v15 = v11;
        if ((v9 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v15 >= v12)
          v17 = v12;
        else
          v17 = v15;
        v18 = memcmp(v10, p_p, v17) == 0;
        v13 = v15 == v12 && v18;
        v19 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          p_s1 = &__s1;
          if ((v8 & 0x80u) != 0)
            p_s1 = (void **)__s1;
          *(_DWORD *)buf = 68289795;
          v30 = 0;
          v31 = 2082;
          v32 = "";
          v33 = 2081;
          v34 = p_s1;
          v35 = 2081;
          v36 = p_p;
          v37 = 1025;
          v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlert,isSameSafetyAlert\", \"self\":%{private, location:escape_only}s, \"otherAlert\":%{private, location:escape_only}s, \"compareResult\":%{private}hhd}", buf, 0x2Cu);
        }
LABEL_38:
        if ((char)v25 < 0)
          operator delete(__s1);
LABEL_40:
        if ((char)v28 < 0)
          operator delete(__p);
        goto LABEL_42;
      }
    }
    else if (v25)
    {
      v9 = v28;
      v10 = &__s1;
      v11 = v27;
      v12 = v25;
      goto LABEL_20;
    }
    v21 = SALogObjectGeneral;
    v13 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlert,isSameSafetyAlert,SelfAlertUidEmpty\"}", buf, 0x12u);
      v13 = 0;
    }
    goto LABEL_38;
  }
  v13 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlert,#warning,isSameSafetyAlert,failed,otherAlertIsNil\"}", buf, 0x12u);
    v13 = 0;
  }
LABEL_42:

  return v13;
}

void sub_100060690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1000606CC(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("uid")));
    if (v5 && (v6 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
    {
      v7 = objc_retainAutorelease(v5);
      sub_10000E8A0(a1, (char *)objc_msgSend(v7, "UTF8String"));

    }
    else
    {
      v8 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v9[0] = 68289026;
        v9[1] = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saAlert,isSameSafetyAlert,infoError,noMatch\"}", (uint8_t *)v9, 0x12u);
      }
      sub_10000E8A0(a1, "");
    }

  }
  else
  {
    sub_10000E8A0(a1, "");
  }

}

void sub_10006081C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100060850(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void **v9;
  NSObject *v10;
  NSOperationQueue *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  _BYTE v23[24];
  _BYTE *v24;

  v5 = a2;
  sub_100004F4C((uint64_t)v23, a3);
  *a1 = off_1000F4480;
  v6 = v24;
  if (v24 == v23)
  {
    v7 = 4;
    v6 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_1000F4408;
  v8 = v5;
  a1[2] = 0;
  v9 = (void **)(a1 + 2);
  a1[1] = v8;
  a1[3] = 0;
  a1[4] = 0;
  sub_100004F4C((uint64_t)(a1 + 5), a3);
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 68289026;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,init\"}", (uint8_t *)&v19, 0x12u);
  }
  v11 = objc_opt_new(NSOperationQueue);
  v12 = (void *)a1[3];
  a1[3] = v11;

  v13 = (void *)a1[3];
  if (v13)
  {
    objc_msgSend(v13, "setUnderlyingQueue:", a1[1]);
    v14 = objc_alloc_init((Class)CMMotionActivityManager);
    v15 = *v9;
    *v9 = v14;

    if (*v9)
    {
      if (a1[3])
      {
        v16 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 68289026;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          v17 = "{\"msg%{public}.0s\":\"#motion,Activity manager created\"}";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v19, 0x12u);
        }
      }
    }
  }
  else
  {
    v16 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 68289026;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v17 = "{\"msg%{public}.0s\":\"#motion,invalid motionOpQueue\"}";
      goto LABEL_15;
    }
  }

  return a1;
}

void sub_100060AA8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100060B20(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  *(_QWORD *)a1 = off_1000F4408;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,deinit\"}", (uint8_t *)v9, 0x12u);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "stopActivityUpdates");
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = 0;

  }
  v6 = *(_QWORD **)(a1 + 64);
  if (v6 == (_QWORD *)(a1 + 40))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 40);
    goto LABEL_11;
  }
  if (v6)
  {
    v7 = 5;
LABEL_11:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_100060C5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

void sub_100060C6C(uint64_t a1)
{
  sub_100060B20(a1);
  operator delete();
}

uint64_t sub_100060C90(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,startMonitoring\"}", buf, 0x12u);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100060D90;
      v6[3] = &unk_1000F4428;
      v6[4] = a1;
      objc_msgSend(v3, "startActivityUpdatesToQueue:withHandler:", v4, v6);
    }
  }
  return 1;
}

void sub_100060D90(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  id *v8;
  int v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  v16 = v4;
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,cb\"}", buf, 0x12u);
  }
  if (v16)
  {
    v8 = (id *)(v5 + 32);
    objc_storeStrong((id *)(v5 + 32), a2);
    if ((objc_msgSend(*(id *)(v5 + 32), "stationary") & 1) != 0)
    {
      v9 = 0;
    }
    else if ((objc_msgSend(*v8, "walking") & 1) != 0)
    {
      v9 = 1;
    }
    else if ((objc_msgSend(*v8, "automotive") & 1) != 0)
    {
      v9 = 3;
    }
    else if (objc_msgSend(*v8, "cycling"))
    {
      v9 = 4;
    }
    else
    {
      v9 = 5;
    }
    v10 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = objc_msgSend(*v8, "stationary");
      v12 = objc_msgSend(*v8, "walking");
      v13 = objc_msgSend(*v8, "automotive");
      v14 = objc_msgSend(*v8, "cycling");
      *(_DWORD *)buf = 68290307;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1025;
      v22 = v11;
      v23 = 1025;
      v24 = v12;
      v25 = 1025;
      v26 = v13;
      v27 = 1025;
      v28 = v14;
      v29 = 1025;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,cb\", \"isStationary\":%{private}hhd, \"walking\":%{private}hhd, \"automotive\":%{private}hhd, \"cycling\":%{private}hhd, \"fMotionState\":%{private}d}", buf, 0x30u);
    }

    *(_DWORD *)buf = v9;
    v15 = *(_QWORD *)(v5 + 64);
    if (!v15)
      sub_100004FB0();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 48))(v15, buf);
    *((_DWORD *)sub_100003038() + 12) = v9;
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100060FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100061018(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#motion,stopMonitoring\"}", (uint8_t *)v4, 0x12u);
  }
  objc_msgSend(*(id *)(a1 + 16), "stopActivityUpdates");
  return 1;
}

void sub_1000610E8()
{
  operator delete();
}

uint64_t sub_1000610FC(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return a1;
}

void sub_100061200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10006138C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000613CC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  id v13;

  v3 = a2;
  if (v3)
  {
    v4 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "content"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "threadIdentifier"));
      v7[0] = 68289539;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2113;
      v11 = v6;
      v12 = 2113;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#notif,addNotificationRequest failed\", \"threadId\":%{private, location:escape_only}@, \"inUNError\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x26u);

    }
  }

}

void sub_1000614D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_100061530(_QWORD *a1, void *a2)
{
  id v3;
  SAPlatformInfo *v4;
  SAUnUserNotificationProxy *v5;
  void *v6;

  v3 = a2;
  *a1 = off_1000F4528;
  v4 = (SAPlatformInfo *)v3;
  a1[1] = v4;
  a1[2] = 0;
  if (*((_BYTE *)SAPlatformInfo::instance(v4) + 9))
  {
    v5 = -[SAUnUserNotificationProxy initWithQueue:]([SAUnUserNotificationProxy alloc], "initWithQueue:", a1[1]);
    v6 = (void *)a1[2];
    a1[2] = v5;

  }
  return a1;
}

void sub_1000615A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000615C4(id *a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void *v15;

  if (*((_BYTE *)SAPlatformInfo::instance((SAPlatformInfo *)a1) + 9))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1])
        goto LABEL_11;
      a2 = (uint64_t *)*a2;
    }
    else if (!*((_BYTE *)a2 + 23))
    {
LABEL_11:
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 68289026;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#notif,warning,emptyContent\"}", (uint8_t *)&v10, 0x12u);
      }
      return;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v7 = SALogObjectGeneral;
    v8 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        v10 = 68289283;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2113;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#notif,\", \"str\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      }
      objc_msgSend(a1[2], "postNotification:withSilence:", v6, a3);
    }
    else if (v8)
    {
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#notif,warning,cantCreateDisplayStr\"}", (uint8_t *)&v10, 0x12u);
    }

  }
}

void sub_1000617A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000617BC(uint64_t a1)
{

  return a1;
}

void sub_1000617EC(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10006182C(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  NSObject *v12;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  _BYTE v18[24];
  _BYTE *v19;

  v5 = a2;
  sub_100004F4C((uint64_t)v18, a3);
  *a1 = off_1000F3D88;
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_1000F4568;
  v8 = v5;
  a1[1] = v8;
  a1[2] = 0;
  sub_100004F4C((uint64_t)(a1 + 3), a3);
  a1[7] = 0;
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,init\"}", (uint8_t *)&v14, 0x12u);
  }
  v10 = objc_alloc_init((Class)CWFInterface);
  v11 = (void *)a1[2];
  a1[2] = v10;

  if (!a1[2])
  {
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#wifi,init,unable to create cwInterface\"}", (uint8_t *)&v14, 0x12u);
    }
  }

  return a1;
}

void sub_1000619F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v1 + 48);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v1 + 48);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_100061A60(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  *(_QWORD *)a1 = off_1000F4568;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,deinit\"}", (uint8_t *)v8, 0x12u);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
  v5 = *(_QWORD **)(a1 + 48);
  if (v5 == (_QWORD *)(a1 + 24))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 24);
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

void sub_100061B7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

void sub_100061B8C(uint64_t a1)
{
  sub_100061A60(a1);
  operator delete();
}

void sub_100061BB0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  uint8_t buf[8];
  _BYTE v13[24];
  uint64_t v14;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v13 = 2082;
    *(_QWORD *)&v13[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,startMonitoring\"}", buf, 0x12u);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "activate");
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v13 = 2082;
      *(_QWORD *)&v13[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,setupMonitoringEvent\"}", buf, 0x12u);
    }
    v5 = *(void **)(a1 + 16);
    if (v5)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)v13 = 3221225472;
      *(_QWORD *)&v13[8] = sub_100002DD0;
      *(_QWORD *)&v13[16] = &unk_1000F4588;
      v14 = a1;
      objc_msgSend(v5, "setEventHandler:", buf);
    }
    else
    {
      v7 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v13 = 2082;
        *(_QWORD *)&v13[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,setupMonitoringEvent,cwInterface nil\"}", buf, 0x12u);
      }
    }
    v8 = *(void **)(a1 + 16);
    v11 = 0;
    objc_msgSend(v8, "startMonitoringEventType:error:", 7, &v11);
    v9 = v11;
    if (v9)
    {
      v10 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v13 = 2082;
        *(_QWORD *)&v13[2] = "";
        *(_WORD *)&v13[10] = 2114;
        *(_QWORD *)&v13[12] = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,registerForLinkQualityNotifications\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }

  }
  else
  {
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v13 = 2082;
      *(_QWORD *)&v13[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,startMonitoring,cwInterface is nil\"}", buf, 0x12u);
    }
  }
}

id sub_100061E68(uint64_t a1)
{
  NSObject *v2;
  id result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,stopMonitoring\"}", (uint8_t *)v4, 0x12u);
  }
  result = *(id *)(a1 + 16);
  if (result)
    return objc_msgSend(result, "stopMonitoringEventType:", 7);
  return result;
}

void sub_100061F2C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_autoreleasePoolPush();
  if (objc_msgSend(*(id *)(a1 + 32), "type") == (id)7)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "info"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CWFEventLinkQualityMetricKey));

    *(_DWORD *)(v2 + 56) = objc_msgSend(v5, "CCA");
    objc_msgSend(v5, "rxRate");
    if (v6 != 0.0)
    {
      objc_msgSend(v5, "rxRate");
      v8 = (int)v7;
      *(_DWORD *)(v2 + 60) = (int)v7;
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 68289283;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 1025;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,cb\", \"wifiRxPhyRate\":%{private}d}", (uint8_t *)&v12, 0x18u);
      }
      v12 = v8;
      v10 = *(_QWORD *)(v2 + 48);
      if (!v10)
        sub_100004FB0();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v12);
      *((double *)sub_100003038() + 7) = (double)v8;
    }

  }
  else
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wifi,setupMonitoringEvent,unexpected type\"}", (uint8_t *)&v12, 0x12u);
    }
  }
  objc_autoreleasePoolPop(v3);
}

void sub_100062114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100062138(uint64_t a1, void *a2)
{
  id v3;
  void **v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;

  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v5 = objc_alloc_init((Class)NSOperationQueue);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;

  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    objc_msgSend(v7, "setName:", CFSTR("com.apple.safetyalerts.doq"));
    objc_msgSend(*(id *)(a1 + 24), "setUnderlyingQueue:", *(_QWORD *)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration"));
    if (!v8)
    {
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      {
        v17 = 68289026;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#safd,cannotInitConfig\"}", (uint8_t *)&v17, 0x12u);
      }
      goto LABEL_18;
    }
    if (qword_100102DE0 != -1)
      dispatch_once(&qword_100102DE0, &stru_1000F4620);
    v9 = (id)qword_100102DE8;
    if (v9)
    {
      v10 = objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v8, v9, *(_QWORD *)(a1 + 24)));
      v11 = *v4;
      *v4 = (void *)v10;

      if (*v4)
      {
        *(_BYTE *)(a1 + 32) = 1;
LABEL_17:

LABEL_18:
        goto LABEL_19;
      }
      v14 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      v17 = 68289026;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v15 = "{\"msg%{public}.0s\":\"#safd,cannotInitUrlSession\"}";
    }
    else
    {
      v14 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      v17 = 68289026;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v15 = "{\"msg%{public}.0s\":\"#safd,cannotInitDelegate\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v17, 0x12u);
    goto LABEL_17;
  }
  v12 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
  {
    v17 = 68289026;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#safd,cannotInitOperationQueue\"}", (uint8_t *)&v17, 0x12u);
  }
LABEL_19:

  return a1;
}

void sub_100062418(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id *sub_100062464(id *a1)
{

  return a1;
}

BOOL sub_1000624A4(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, double a6)
{
  uint64_t v7;
  _BOOL8 v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  _QWORD *v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  _QWORD v59[5];
  __int128 __p;
  uint64_t v61;
  _BYTE v62[24];
  _BYTE *v63;
  int v64;

  if (!*(_BYTE *)(a1 + 32))
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 68289026;
    v48 = 0;
    v49 = 2082;
    v50 = "";
    v9 = "{\"msg%{public}.0s\":\"#safd,notInitialized\"}";
    v10 = v12;
    v11 = OS_LOG_TYPE_ERROR;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, 0x12u);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 33))
  {
    v15 = *((unsigned __int8 *)a2 + 23);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    if (!v15)
    {
      v7 = SALogObjectGeneral;
      v8 = 0;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return v8;
      *(_DWORD *)buf = 68289026;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v9 = "{\"msg%{public}.0s\":\"#safd,#warning,srcIsEmpty\"}";
      goto LABEL_5;
    }
    v18 = *(unsigned __int8 *)(a3 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(a3 + 8);
    if (!v18)
    {
      v7 = SALogObjectGeneral;
      v8 = 0;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return v8;
      *(_DWORD *)buf = 68289026;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v9 = "{\"msg%{public}.0s\":\"#safd,#warning,dstIsEmpty\"}";
      goto LABEL_5;
    }
    if ((a4 - 1) >= 7)
    {
      v7 = SALogObjectGeneral;
      v8 = 0;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return v8;
      *(_DWORD *)buf = 68289026;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v9 = "{\"msg%{public}.0s\":\"#safd,#warning,invalidProtectionClass\"}";
      goto LABEL_5;
    }
    if (!*(_QWORD *)(a5 + 24))
    {
      v7 = SALogObjectGeneral;
      v8 = 0;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        return v8;
      *(_DWORD *)buf = 68289026;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v9 = "{\"msg%{public}.0s\":\"#safd,#warning,invalidCallback\"}";
      goto LABEL_5;
    }
    if (v16 >= 0)
      v22 = a2;
    else
      v22 = (uint64_t *)*a2;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v23));

    if (!v24)
    {
      v27 = SALogObjectGeneral;
      v8 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v48 = 0;
        v49 = 2082;
        v50 = "";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#safd,#warning,cannotInitSrcUrl\"}", buf, 0x12u);
        v8 = 0;
      }
      goto LABEL_74;
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v24));
    v26 = v25;
    if (!v25)
    {
      v28 = SALogObjectGeneral;
      v8 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v48 = 0;
        v49 = 2082;
        v50 = "";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#safd,#warning,cannotInitNewRequest\"}", buf, 0x12u);
        v8 = 0;
      }
      goto LABEL_73;
    }
    if (a6 <= 0.0)
      a6 = 300.0;
    objc_msgSend(v25, "setTimeoutInterval:", a6);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_100004870(v45, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v45 = *(_OWORD *)a3;
      v46 = *(_QWORD *)(a3 + 16);
    }
    objc_msgSend(v26, "setAllowsCellularAccess:", 0, v45[0]);
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3321888768;
    v59[2] = sub_100062CBC;
    v59[3] = &unk_1000F45F0;
    v59[4] = a1;
    if (SHIBYTE(v46) < 0)
    {
      sub_100004870(&__p, v45[0], (unint64_t)v45[1]);
    }
    else
    {
      __p = *(_OWORD *)v45;
      v61 = v46;
    }
    v64 = a4;
    v29 = v62;
    sub_100004F4C((uint64_t)v62, a5);
    v30 = objc_retainBlock(v59);
    v31 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v32 = a2;
      else
        v32 = (uint64_t *)*a2;
      if (*(char *)(a3 + 23) >= 0)
        v33 = (void *)a3;
      else
        v33 = *(void **)a3;
      *(_DWORD *)buf = 68290051;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v51 = 2081;
      v52 = v32;
      v53 = 2081;
      v54 = v33;
      v55 = 1025;
      v56 = a4;
      v57 = 2049;
      v58 = a6;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#safd,requestedDownload\", \"src\":%{private, location:escape_only}s, \"dst\":%{private, location:escape_only}s, \"class\":%{private}d, \"timeout\":\"%{private}0.1f\"}", buf, 0x36u);
    }
    v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "downloadTaskWithRequest:completionHandler:", v26, v30));
    v35 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v34;

    v36 = *(void **)(a1 + 16);
    v8 = v36 != 0;
    if (v36)
    {
      *(_BYTE *)(a1 + 33) = 1;
      objc_msgSend(v36, "resume");
      v37 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      *(_DWORD *)buf = 68289026;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v38 = "{\"msg%{public}.0s\":\"#safd,initialized\"}";
      v39 = v37;
      v40 = 18;
    }
    else
    {
      v41 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      if (*((char *)a2 + 23) >= 0)
        v42 = a2;
      else
        v42 = (uint64_t *)*a2;
      if (*(char *)(a3 + 23) >= 0)
        v43 = (void *)a3;
      else
        v43 = *(void **)a3;
      *(_DWORD *)buf = 68290051;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v51 = 2081;
      v52 = v42;
      v53 = 2081;
      v54 = v43;
      v55 = 1025;
      v56 = a4;
      v57 = 2049;
      v58 = a6;
      v38 = "{\"msg%{public}.0s\":\"#safd,#warning,requestedDownloadFailed\", \"src\":%{private, location:escape_only}s, "
            "\"dst\":%{private, location:escape_only}s, \"class\":%{private}d, \"timeout\":\"%{private}0.1f\"}";
      v39 = v41;
      v40 = 54;
    }
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
LABEL_64:

    if (v63 == v62)
    {
      v44 = 4;
    }
    else
    {
      if (!v63)
      {
LABEL_69:
        if (SHIBYTE(v61) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v46) < 0)
          operator delete(v45[0]);
LABEL_73:

LABEL_74:
        return v8;
      }
      v44 = 5;
      v29 = v63;
    }
    (*(void (**)(_QWORD *))(*v29 + 8 * v44))(v29);
    goto LABEL_69;
  }
  v7 = SALogObjectGeneral;
  v8 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v48 = 0;
    v49 = 2082;
    v50 = "";
    v9 = "{\"msg%{public}.0s\":\"#safd,#warning,concurrentDownloadsNotAllowed\"}";
LABEL_5:
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_8;
  }
  return v8;
}

void sub_100062C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;
  void *v38;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100062CBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject **v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  unsigned int v18;
  NSObject *v19;
  id v20;
  id v21;
  const char *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[5];
  _BYTE v35[24];
  _BYTE *v36;
  BOOL v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  _BYTE v43[18];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(NSObject ***)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v13 = v9;
  if (v13)
  {
    v14 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289539;
      v39 = 0;
      v40 = 2082;
      v41 = "";
      v42 = 2113;
      *(_QWORD *)v43 = v12;
      *(_WORD *)&v43[8] = 2113;
      *(_QWORD *)&v43[10] = v13;
      v15 = "{\"msg%{public}.0s\":\"#safd,downloadFailed\", \"response\":%{private, location:escape_only}@, \"error\":%{p"
            "rivate, location:escape_only}@}";
      v16 = v14;
      v17 = 38;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
    }
LABEL_20:

LABEL_21:
    v25 = 0;
    goto LABEL_22;
  }
  if (!v12)
  {
    v18 = -1;
    goto LABEL_16;
  }
  v18 = objc_msgSend(v12, "statusCode");
  if (v18 != 200)
  {
LABEL_16:
    v26 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289539;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 1025;
    *(_DWORD *)v43 = v18;
    *(_WORD *)&v43[4] = 2113;
    *(_QWORD *)&v43[6] = v12;
    v15 = "{\"msg%{public}.0s\":\"#safd,downloadFailedWithResponse\", \"resultCode\":%{private}d, \"response\":%{private,"
          " location:escape_only}@}";
    v16 = v26;
LABEL_18:
    v17 = 34;
    goto LABEL_19;
  }
  v19 = SALogObjectGeneral;
  if (!v11)
  {
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289539;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 1025;
    *(_DWORD *)v43 = 200;
    *(_WORD *)&v43[4] = 2113;
    *(_QWORD *)&v43[6] = v12;
    v15 = "{\"msg%{public}.0s\":\"#safd,tempFileInvalid\", \"resultCode\":%{private}d, \"response\":%{private, location:escape_only}@}";
    v16 = v19;
    goto LABEL_18;
  }
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    v42 = 1025;
    *(_DWORD *)v43 = 200;
    *(_WORD *)&v43[4] = 2113;
    *(_QWORD *)&v43[6] = v12;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#safd,downloadSuccess\", \"resultCode\":%{private}d, \"response\":%{private, location:escape_only}@}", buf, 0x22u);
  }

  v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "path")));
  v21 = objc_msgSend(v20, "UTF8String");
  v22 = (const char *)(a1 + 40);
  v23 = a1 + 40;
  if (*(char *)(a1 + 63) < 0)
    v23 = *(_QWORD *)v22;
  v24 = sub_10005D924((uint64_t)v21, v23);

  if (!v24)
    goto LABEL_21;
  if (*(char *)(a1 + 63) < 0)
    v22 = *(const char **)v22;
  v25 = sub_10005D630(v22, *(unsigned int *)(a1 + 96));
LABEL_22:
  v27 = *v10;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3321888768;
  v34[2] = sub_1000630A4;
  v34[3] = &unk_1000F45C0;
  v34[4] = v10;
  sub_100004F4C((uint64_t)v35, a1 + 64);
  v37 = v25;
  dispatch_async(v27, v34);
  v32 = v36;
  if (v36 == v35)
  {
    v33 = 4;
    v32 = v35;
    goto LABEL_26;
  }
  if (v36)
  {
    v33 = 5;
LABEL_26:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v32 + 8 * v33))(v32, v28, v29, v30, v31);
  }

}

void sub_100063064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000630A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[5];
  _BYTE v7[24];
  _BYTE *v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_autoreleasePoolPush();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_1000631E0;
  v6[3] = &unk_1000F45C0;
  v6[4] = v2;
  v4 = v7;
  sub_100004F4C((uint64_t)v7, a1 + 40);
  v9 = *(_BYTE *)(a1 + 72);
  sub_1000631E0((uint64_t)v6);
  if (v8 == v7)
  {
    v5 = 4;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
    v4 = v8;
LABEL_5:
    (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
  }
  objc_autoreleasePoolPop(v3);
}

void sub_10006319C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  _QWORD *v18;
  uint64_t v20;

  if (a18 == v18)
  {
    v20 = 4;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
    v18 = a18;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000631E0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = 0;
  v3 = *(_BYTE *)(a1 + 72);
  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t sub_100063224(uint64_t a1, uint64_t a2)
{
  return sub_100004F4C(a1 + 40, a2 + 40);
}

_QWORD *sub_100063230(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100063264(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100004870((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  return sub_100004F4C(a1 + 64, a2 + 64);
}

void sub_1000632C8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1000632E4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_10006344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000634A4(id a1)
{
  SAFileDownloaderDelegate *v1;
  void *v2;

  v1 = objc_alloc_init(SAFileDownloaderDelegate);
  v2 = (void *)qword_100102DE8;
  qword_100102DE8 = (uint64_t)v1;

}

_QWORD *sub_1000634CC(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;

  v7 = a2;
  sub_100004F4C((uint64_t)v26, a3);
  sub_100004F4C((uint64_t)v24, a4);
  *a1 = off_1000F46C8;
  v8 = v25;
  if (v25 == v24)
  {
    v9 = 4;
    v8 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v27;
  if (v27 == v26)
  {
    v11 = 4;
    v10 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  *a1 = off_1000F4650;
  v12 = v7;
  a1[1] = v12;
  sub_100004F4C((uint64_t)(a1 + 2), a3);
  sub_100004F4C((uint64_t)(a1 + 6), a4);
  v13 = (uint64_t *)sub_100017A18();
  v22[0] = off_1000F4718;
  v22[1] = a1;
  v23 = v22;
  sub_100017D40(v13, 5, (uint64_t)v22);
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  v16 = (uint64_t *)sub_100017A18();
  v20[0] = off_1000F4718;
  v20[1] = a1;
  v21 = v20;
  sub_100017D40(v16, 6, (uint64_t)v20);
  v17 = v21;
  if (v21 == v20)
  {
    v18 = 4;
    v17 = v20;
    goto LABEL_20;
  }
  if (v21)
  {
    v18 = 5;
LABEL_20:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }

  return a1;
}

void sub_1000636A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = *(_QWORD **)(v14 + 72);
  if (v21 == v16)
  {
    v22 = 4;
    v21 = v16;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  v23 = *(_QWORD **)(v14 + 40);
  if (v23 == v15)
  {
    v24 = 4;
    v23 = v15;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:

  _Unwind_Resume(a1);
}

uint64_t sub_1000637B0(uint64_t a1, char a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  double v9;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v13 = a4;
  v14 = a3;
  v11 = a6;
  v12 = a5;
  v10 = a2;
  v9 = a7;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, double *, double *, double *, double *, char *, double *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

void sub_10006380C(uint64_t a1)
{
  sub_100063C3C(a1);
  operator delete();
}

uint64_t sub_100063830()
{
  return 1;
}

uint64_t sub_100063838()
{
  return 1;
}

void sub_10006385C()
{
  operator delete();
}

_QWORD *sub_100063870(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4718;
  result[1] = v3;
  return result;
}

uint64_t sub_1000638A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4718;
  a2[1] = v2;
  return result;
}

void sub_1000638C0(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006398C;
  v7[3] = &unk_1000F2B98;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t sub_100063944(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100063980()
{
}

void sub_10006398C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  int int64;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  v3 = v2;
  if (!v2)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v9 = "{\"msg%{public}.0s\":\"#lmTest,InvalidTestInputObject\"}";
    v10 = v8;
    v11 = 18;
    goto LABEL_18;
  }
  int64 = xpc_dictionary_get_int64(v2, "TestMessageType");
  if (int64 == 5)
  {
    LOBYTE(v14) = xpc_dictionary_get_int64(v3, "LocationAuthorizationChanged") != 0;
    v12 = *(_QWORD *)(v1 + 72);
    if (!v12)
      sub_100004FB0();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v14);
  }
  else if (int64 == 6)
  {
    v5 = xpc_dictionary_get_double(v3, "LocationChangedLat");
    v6 = xpc_dictionary_get_double(v3, "LocationChangedLon");
    v7 = xpc_dictionary_get_double(v3, "LocationChangedHunc");
    if (v5 >= -90.0
      && v5 <= 90.0
      && v6 >= -180.0
      && v6 <= 180.0
      && (fabs(fabs(v5) + -0.0000001) > 0.0000001 || fabs(fabs(v6) + -0.0000001) > 0.0000001)
      && v7 > 0.0)
    {
      sub_1000637B0(v1 + 16, 0, v5, v6, 0.0, v7, 0.0);
      goto LABEL_19;
    }
    v13 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2049;
    v19 = v5;
    v20 = 2049;
    v21 = v6;
    v22 = 2049;
    v23 = v7;
    v9 = "{\"msg%{public}.0s\":\"#lmTest,InvalidTestInputs\", \"lat\":\"%{private}0.1f\", \"lon\":\"%{private}0.1f\", \"h"
         "unc\":\"%{private}0.1f\"}";
    v10 = v13;
    v11 = 48;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
  }
LABEL_19:

}

void sub_100063C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100063C3C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1000F4650;
  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 40);
  if (v5 == (_QWORD *)(a1 + 16))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 16);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

void sub_100063CD0(void *a1)
{
  a1;
  if (*((_BYTE *)sub_10003D044() + 241))
    operator new();
  operator new();
}

void sub_100063D68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete();
}

_QWORD *sub_100063DA4(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v5 = a2;
  sub_100004F4C((uint64_t)v9, a3);
  *a1 = off_1000F0CD0;
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_1000F4798;
  a1[1] = v5;
  return a1;
}

void sub_100063E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100063E7C(uint64_t a1)
{

  return a1;
}

void sub_100063EA4(uint64_t a1)
{

  operator delete();
}

void sub_100063EDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;

  v5 = a2;
  *(_BYTE *)a1 = 0;
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  sub_100004F4C(a1 + 16, a3);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_10001E0F8(v6);
}

void sub_100063F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD **)(v1 + 40);
  if (v8 == v3)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_10;
    v9 = 5;
    v3 = *(_QWORD **)(v1 + 40);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v9))(v3);
LABEL_10:

  _Unwind_Resume(a1);
}

uint64_t sub_100063FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 40);
  if (v4 == (_QWORD *)(a1 + 16))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_100064078(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD v14[3];
  _QWORD *v15;
  uint8_t buf[8];
  __int128 v17;
  uint8_t *v18;
  _QWORD v19[3];

  sub_100004F4C((uint64_t)buf, a2);
  v3 = a1 + 16;
  if (buf != (uint8_t *)(a1 + 16))
  {
    v4 = v18;
    v5 = *(_QWORD *)(a1 + 40);
    if (v18 == buf)
    {
      if (v5 == v3)
      {
        (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v19);
        (*(void (**)(uint8_t *))(*(_QWORD *)v18 + 32))(v18);
        v18 = 0;
        (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), buf);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
        *(_QWORD *)(a1 + 40) = 0;
        v18 = buf;
        (*(void (**)(_QWORD *, uint64_t))(v19[0] + 24))(v19, a1 + 16);
        (*(void (**)(_QWORD *))(v19[0] + 32))(v19);
      }
      else
      {
        (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)buf + 24))(buf, a1 + 16);
        (*(void (**)(uint8_t *))(*(_QWORD *)v18 + 32))(v18);
        v18 = *(uint8_t **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v3;
    }
    else if (v5 == v3)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 24))(a1 + 16, buf);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 40) = v18;
      v18 = buf;
    }
    else
    {
      v18 = *(uint8_t **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v4;
    }
  }
  v6 = v18;
  if (v18 == buf)
  {
    v7 = 4;
    v6 = buf;
  }
  else
  {
    if (!v18)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_15:
  if (*(_BYTE *)a1)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v17) = 2082;
    *(_QWORD *)((char *)&v17 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#bletransport,subscribeForBLEDiscovery\"}";
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    *(_QWORD *)&v17 = 0x2000000;
    *(_QWORD *)buf = *(id *)(a1 + 8);
    *((_QWORD *)&v17 + 1) = 0x10A0000001ALL;
    LODWORD(v18) = sub_1000172E0();
    HIDWORD(v18) = sub_1000171E8();
    v10 = *(_QWORD *)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100064440;
    v13[3] = &unk_1000F47C8;
    v13[4] = a1;
    v14[0] = off_1000F47F8;
    v14[1] = objc_retainBlock(v13);
    v15 = v14;
    (*(void (**)(uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v10 + 24))(v10, buf, v14);
    v11 = v15;
    if (v15 == v14)
    {
      v12 = 4;
      v11 = v14;
    }
    else
    {
      if (!v15)
      {
LABEL_27:
        *(_BYTE *)a1 = 1;

        return;
      }
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
    goto LABEL_27;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v17) = 2082;
    *(_QWORD *)((char *)&v17 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"#bletransport,subscribeForBLEDiscovery,invalid fBleTransportInterface\"}";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
  }
}

void sub_1000643DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, id a19)
{
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == &a15)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_100064440(uint64_t a1, void *a2)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  void **v21;
  NSObject *v22;
  void **v23;
  void **v24;
  SAPlatformInfo *v25;
  NSObject *v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  void **v32;
  unsigned int *v33;
  int v34;
  int v35;
  NSObject *v36;
  unsigned int *v37;
  int v38;
  BOOL v39;
  int v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  const char *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  const char *v48;
  unsigned int *v49;
  int v50;
  BOOL v51;
  int v52;
  NSObject *v53;
  unsigned int *v54;
  int v55;
  BOOL v56;
  int v57;
  NSObject *v58;
  unsigned int *v59;
  int v60;
  BOOL v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  char v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  id v117;
  void *__p[2];
  uint64_t v119;
  void *v120[2];
  uint64_t v121;
  int v122;
  char __s[8];
  _OWORD v124[2];
  _OWORD v125[3];
  uint64_t v126;
  uint8_t buf[4];
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[25];
  uint64_t v149;
  char v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[28];
  __int16 v156;
  void **v157;
  __int16 v158;
  int *v159;
  __int16 v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[24];
  __int16 v165;
  _OWORD *v166;

  v2 = *(_QWORD *)(a1 + 32);
  v117 = a2;
  v3 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v128 = 0;
    LOWORD(v129) = 2082;
    *(_QWORD *)((char *)&v129 + 2) = "";
    WORD5(v129) = 1025;
    HIDWORD(v129) = objc_msgSend(v117, "safetyAlertsAlertIndex");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb\", \"Index\":%{private}d}", buf, 0x18u);
  }

  buf[0] = 0;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v141 = 0;
  v142 = 1;
  v149 = 0;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  memset(v148, 0, sizeof(v148));
  v150 = -1;
  v151 = 0;
  v152 = -4131;
  v154 = 0;
  v153 = 0;
  v126 = 0;
  memset(v125, 0, sizeof(v125));
  memset(v124, 0, 28);
  v122 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsSignature"));
  if (objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertData"));
    v6 = objc_msgSend(v5, "length") == 0;

    if (!v6)
    {
      LODWORD(v153) = objc_msgSend(v117, "safetyAlertsAlertIndex");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertID"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertID"));
      v9 = objc_msgSend(v8, "length");
      if (v9 >= 3)
        v10 = 3;
      else
        v10 = v9;
      objc_msgSend(v7, "getBytes:length:", &v122, v10);

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsSignature"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsSignature"));
      objc_msgSend(v11, "getBytes:length:", v125, objc_msgSend(v12, "length"));

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertData"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertData"));
      objc_msgSend(v13, "getBytes:length:", v124, objc_msgSend(v14, "length"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertData"));
      v16 = objc_msgSend(v15, "length");

      v17 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertData"));
        v19 = objc_msgSend(v18, "length");
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsSignature"));
        v21 = (void **)objc_msgSend(v20, "length");
        *(_QWORD *)v155 = 68289539;
        *(_WORD *)&v155[8] = 2082;
        *(_QWORD *)&v155[10] = "";
        *(_WORD *)&v155[18] = 2049;
        *(_QWORD *)&v155[20] = v19;
        v156 = 2049;
        v157 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb\", \"safetyAlertsAlertData.length\":%{private}llu, \"safetyAlertsSignature.length\":%{private}llu}", v155, 0x26u);

      }
      v120[0] = 0;
      v120[1] = 0;
      v121 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v119 = 0;
      if ((SACommonUtils::convertCharToHex((uint64_t)v125, 0x38u, (uint64_t)v120) & 1) != 0)
      {
        *(_OWORD *)&v155[12] = *(_OWORD *)((char *)v124 + 12);
        *(_OWORD *)v155 = v124[0];
        v155[17] = 0;
        if ((SACommonUtils::convertCharToHex((uint64_t)v155, 0x1Cu, (uint64_t)__p) & 1) != 0)
        {
          v22 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            v23 = v120;
            if (v121 < 0)
              v23 = (void **)v120[0];
            v24 = __p;
            if (v119 < 0)
              v24 = (void **)__p[0];
            *(_QWORD *)v155 = 68289539;
            *(_WORD *)&v155[8] = 2082;
            *(_QWORD *)&v155[10] = "";
            *(_WORD *)&v155[18] = 2081;
            *(_QWORD *)&v155[20] = v23;
            v156 = 2081;
            v157 = v24;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb\", \"hexSignatureStringh\":%{private, location:escape_only}s, \"hexDataString\":%{private, location:escape_only}s}", v155, 0x26u);
          }
          v25 = (SAPlatformInfo *)sub_10001EB78();
          if (sub_10002058C(v25, (uint64_t)v120, (uint64_t)__p))
          {
            v26 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v155 = 68289026;
              *(_WORD *)&v155[8] = 2082;
              *(_QWORD *)&v155[10] = "";
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,authenticated\"}", v155, 0x12u);
            }
            v141 = 1;
          }
          v27 = SACommonUtils::convertCharToHex((uint64_t)&v122, 3u, (uint64_t)&v139 + 8);
          v28 = SALogObjectGeneral;
          if ((v27 & 1) == 0)
          {
            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              goto LABEL_55;
            *(_QWORD *)v155 = 68289026;
            *(_WORD *)&v155[8] = 2082;
            *(_QWORD *)&v155[10] = "";
            v44 = "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,invalid UID\"}";
            v45 = v28;
            goto LABEL_54;
          }
          v29 = (id)SALogObjectGeneral;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "safetyAlertsAlertID"));
            v31 = (void *)v30;
            if (v140 >= 0)
              v32 = (void **)&v139 + 1;
            else
              v32 = (void **)*((_QWORD *)&v139 + 1);
            *(_QWORD *)v155 = 68289795;
            *(_WORD *)&v155[8] = 2082;
            *(_QWORD *)&v155[10] = "";
            *(_WORD *)&v155[18] = 2113;
            *(_QWORD *)&v155[20] = v30;
            v156 = 2081;
            v157 = v32;
            v158 = 2081;
            v159 = &v122;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,UID\", \"data.inDevice.safetyAlertsAlertID\":%{private, location:escape_only}@, \"igneousAlertInformation.bleAlertUID\":%{private, location:escape_only}s, \"alertUID\":%{private, location:escape_only}s}", v155, 0x30u);

          }
          if (!(_DWORD)v16)
          {
            v46 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v155 = 68289026;
              *(_WORD *)&v155[8] = 2082;
              *(_QWORD *)&v155[10] = "";
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid data\"}", v155, 0x12u);
            }
LABEL_156:
            v43 = SALogObjectGeneral;
            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              goto LABEL_55;
            *(_QWORD *)v155 = 68289026;
            *(_WORD *)&v155[8] = 2082;
            *(_QWORD *)&v155[10] = "";
            v44 = "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,PDU decode failed\"}";
            goto LABEL_53;
          }
          memset(v155, 0, 24);
          v161 = 0;
          v162 = 0;
          v163 = 0;
          *(_QWORD *)__s = 0;
          v34 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&__s[4], v124, v16, 3u, 3uLL, __s, v33);
          v35 = v34;
          if (v34)
          {
            *(_DWORD *)__s = v34;
            sub_10000E8A0(v164, &__s[4]);
            if ((v155[23] & 0x80000000) != 0)
              operator delete(*(void **)v155);
            *(_OWORD *)v155 = *(_OWORD *)v164;
            *(_QWORD *)&v155[16] = *(_QWORD *)&v164[16];
          }
          v36 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v164 = 68289539;
            *(_WORD *)&v164[8] = 2082;
            *(_QWORD *)&v164[10] = "";
            *(_WORD *)&v164[18] = 1025;
            *(_DWORD *)&v164[20] = *(_DWORD *)__s;
            v165 = 2081;
            v166 = v124;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateRegionCode\", \"offset\":%{private}d, \"alertData\":%{private, location:escape_only}s}", v164, 0x22u);
          }
          if (v35)
          {
            v38 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v155[24], (char *)v124 + *(unsigned int *)__s, v16, 2u, 2uLL, __s, v37);
            v39 = v38 != 0;
            if (v38)
              *(_DWORD *)__s = v38;
            v40 = *(unsigned __int16 *)&v155[24];
            v41 = SALogObjectGeneral;
            if (*(unsigned __int16 *)&v155[24] != 3 && *(unsigned __int16 *)&v155[24] <= 0xEFDAu)
            {
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v164 = 68289283;
                *(_WORD *)&v164[8] = 2082;
                *(_QWORD *)&v164[10] = "";
                *(_WORD *)&v164[18] = 1025;
                *(_DWORD *)&v164[20] = v40;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateSender,invalid\", \"Sender\":%{private}d}", v164, 0x18u);
                v39 = 0;
                v41 = SALogObjectGeneral;
              }
              else
              {
                v39 = 0;
              }
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v164 = 68289283;
              *(_WORD *)&v164[8] = 2082;
              *(_QWORD *)&v164[10] = "";
              *(_WORD *)&v164[18] = 1025;
              *(_DWORD *)&v164[20] = *(_DWORD *)__s;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateSender\", \"offset\":%{private}d}", v164, 0x18u);
            }
            if (v39)
            {
              v50 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v155[26], (char *)v124 + *(unsigned int *)__s, v16, 1u, 1uLL, __s, v49);
              v51 = v50 != 0;
              if (v50)
                *(_DWORD *)__s = v50;
              v52 = v155[26];
              v53 = SALogObjectGeneral;
              if (v155[26] != 18)
              {
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v164 = 68289283;
                  *(_WORD *)&v164[8] = 2082;
                  *(_QWORD *)&v164[10] = "";
                  *(_WORD *)&v164[18] = 1025;
                  *(_DWORD *)&v164[20] = v52;
                  _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateEventByte,invalid\", \"eventType\":%{private}d}", v164, 0x18u);
                  v51 = 0;
                  v53 = SALogObjectGeneral;
                }
                else
                {
                  v51 = 0;
                }
              }
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v164 = 68289283;
                *(_WORD *)&v164[8] = 2082;
                *(_QWORD *)&v164[10] = "";
                *(_WORD *)&v164[18] = 1025;
                *(_DWORD *)&v164[20] = *(_DWORD *)__s;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateEventByte\", \"offset\":%{private}d}", v164, 0x18u);
              }
              if (v51)
              {
                __s[4] = 0;
                v55 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&__s[4], (char *)v124 + *(unsigned int *)__s, v16, 1u, 1uLL, __s, v54);
                v56 = v55 != 0;
                if (v55)
                {
                  *(_DWORD *)__s = v55;
                  v155[27] = __s[4] & 0xF;
                  v57 = __s[4] >> 4;
                  LOBYTE(v156) = __s[4] >> 4;
                }
                else
                {
                  v57 = v156;
                }
                v58 = SALogObjectGeneral;
                if (v57 != 1)
                {
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)v164 = 68289539;
                    *(_WORD *)&v164[8] = 2082;
                    *(_QWORD *)&v164[10] = "";
                    *(_WORD *)&v164[18] = 1025;
                    *(_DWORD *)&v164[20] = v57;
                    v165 = 1025;
                    LODWORD(v166) = __s[4];
                    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateEventInfo,invalid\", \"eventInfoEventCategory\":%{private}d, \"unsignedByte\":%{private}d}", v164, 0x1Eu);
                    v56 = 0;
                    v58 = SALogObjectGeneral;
                  }
                  else
                  {
                    v56 = 0;
                  }
                }
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v164 = 68289283;
                  *(_WORD *)&v164[8] = 2082;
                  *(_QWORD *)&v164[10] = "";
                  *(_WORD *)&v164[18] = 1025;
                  *(_DWORD *)&v164[20] = *(_DWORD *)__s;
                  _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateEventInfo\", \"offset\":%{private}d}", v164, 0x18u);
                }
                if (v56)
                {
                  __s[4] = 0;
                  v60 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&__s[4], (char *)v124 + *(unsigned int *)__s, v16, 1u, 1uLL, __s, v59);
                  v61 = v60 != 0;
                  if (v60)
                  {
                    *(_DWORD *)__s = v60;
                    v62 = __s[4] & 0x1F;
                    HIBYTE(v156) = __s[4] & 0x1F;
                    LOBYTE(v157) = (__s[4] & 0x20) != 0;
                  }
                  else
                  {
                    v62 = HIBYTE(v156);
                  }
                  v63 = SALogObjectGeneral;
                  if (v62 != 4)
                  {
                    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_QWORD *)v164 = 68289283;
                      *(_WORD *)&v164[8] = 2082;
                      *(_QWORD *)&v164[10] = "";
                      *(_WORD *)&v164[18] = 1025;
                      *(_DWORD *)&v164[20] = v62;
                      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateAlertInfo,invalid\", \"alertInfoAlertType\":%{private}d}", v164, 0x18u);
                      v61 = 0;
                      v63 = SALogObjectGeneral;
                    }
                    else
                    {
                      v61 = 0;
                    }
                  }
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)v164 = 68289283;
                    *(_WORD *)&v164[8] = 2082;
                    *(_QWORD *)&v164[10] = "";
                    *(_WORD *)&v164[18] = 1025;
                    *(_DWORD *)&v164[20] = *(_DWORD *)__s;
                    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateAlertInfo\", \"offset\":%{private}d}", v164, 0x18u);
                  }
                  if (v61)
                  {
                    if (sub_100066A04((uint64_t)v124, v16, v155, (int *)__s, v64, v65, v66))
                    {
                      if (sub_100066BDC((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v67, v68, v69))
                      {
                        if (sub_100066CE4((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v70, v71, v72))
                        {
                          if (sub_100066E8C((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v73, v74, v75))
                          {
                            if (sub_100066F94((uint64_t)v124, v16, (int *)__s, v76, v77, v78, v79))
                            {
                              if (sub_100066F94((uint64_t)v124, v16, (int *)__s, v80, v81, v82, v83))
                              {
                                if (sub_10006709C((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v84, v85, v86))
                                {
                                  if (sub_1000671A4((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v87, v88, v89))
                                  {
                                    if (sub_1000672AC((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v90, v91, v92))
                                    {
                                      if (sub_100067450((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v93, v94, v95))
                                      {
                                        if (sub_1000675DC((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v96, v97, v98))
                                        {
                                          if (sub_100067768((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v99, v100, v101))
                                          {
                                            if ((BYTE3(v157) & 1) == 0)
                                            {
LABEL_118:
                                              sub_100067C90((uint64_t *)v155, (uint64_t)buf);
                                              v105 = 1;
                                              goto LABEL_147;
                                            }
                                            if (!sub_100067870((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v102, v103, v104))
                                            {
                                              v47 = SALogObjectGeneral;
                                              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))goto LABEL_146;
                                              *(_QWORD *)v164 = 68289026;
                                              *(_WORD *)&v164[8] = 2082;
                                              *(_QWORD *)&v164[10] = "";
                                              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid Lang Code\"}";
                                              goto LABEL_145;
                                            }
                                            if (!sub_100067978((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v108, v109, v110))
                                            {
                                              v47 = SALogObjectGeneral;
                                              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))goto LABEL_146;
                                              *(_QWORD *)v164 = 68289026;
                                              *(_WORD *)&v164[8] = 2082;
                                              *(_QWORD *)&v164[10] = "";
                                              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invali"
                                                    "d CountryCode\"}";
                                              goto LABEL_145;
                                            }
                                            if (!sub_100067A80((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v111, v112, v113))
                                            {
                                              v47 = SALogObjectGeneral;
                                              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))goto LABEL_146;
                                              *(_QWORD *)v164 = 68289026;
                                              *(_WORD *)&v164[8] = 2082;
                                              *(_QWORD *)&v164[10] = "";
                                              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid MessageLen\"}";
                                              goto LABEL_145;
                                            }
                                            if (!v160
                                              || sub_100067B88((uint64_t)v124, v16, (uint64_t)v155, (int *)__s, v114, v115, v116))
                                            {
                                              goto LABEL_118;
                                            }
                                            v47 = SALogObjectGeneral;
                                            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                            {
                                              *(_QWORD *)v164 = 68289026;
                                              *(_WORD *)&v164[8] = 2082;
                                              *(_QWORD *)&v164[10] = "";
                                              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invali"
                                                    "d messageData\"}";
                                              goto LABEL_145;
                                            }
LABEL_146:
                                            sub_100067C90((uint64_t *)v155, (uint64_t)buf);
                                            v105 = 0;
LABEL_147:
                                            if (SHIBYTE(v163) < 0)
                                              operator delete(v161);
                                            if ((v155[23] & 0x80000000) != 0)
                                              operator delete(*(void **)v155);
                                            if ((v105 & 1) != 0)
                                            {
                                              HIDWORD(v153) = objc_msgSend(v117, "bleRSSI");
                                              v106 = *(_QWORD *)(v2 + 40);
                                              v43 = SALogObjectGeneral;
                                              v107 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
                                              if (v106)
                                              {
                                                if (v107)
                                                {
                                                  *(_QWORD *)v155 = 68289026;
                                                  *(_WORD *)&v155[8] = 2082;
                                                  *(_QWORD *)&v155[10] = "";
                                                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,fOnBLEAlertCb\"}", v155, 0x12u);
                                                  v106 = *(_QWORD *)(v2 + 40);
                                                  if (!v106)
                                                    sub_100004FB0();
                                                }
                                                (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v106 + 48))(v106, buf);
                                                goto LABEL_55;
                                              }
                                              if (!v107)
                                              {
LABEL_55:
                                                if (SHIBYTE(v119) < 0)
                                                  operator delete(__p[0]);
                                                if (SHIBYTE(v121) < 0)
                                                  operator delete(v120[0]);
                                                goto LABEL_59;
                                              }
                                              *(_QWORD *)v155 = 68289026;
                                              *(_WORD *)&v155[8] = 2082;
                                              *(_QWORD *)&v155[10] = "";
                                              v44 = "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,fOnBLEAlertCb failed\"}";
                                              goto LABEL_53;
                                            }
                                            goto LABEL_156;
                                          }
                                          v47 = SALogObjectGeneral;
                                          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                            goto LABEL_146;
                                          *(_QWORD *)v164 = 68289026;
                                          *(_WORD *)&v164[8] = 2082;
                                          *(_QWORD *)&v164[10] = "";
                                          v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid Range\"}";
                                        }
                                        else
                                        {
                                          v47 = SALogObjectGeneral;
                                          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                            goto LABEL_146;
                                          *(_QWORD *)v164 = 68289026;
                                          *(_WORD *)&v164[8] = 2082;
                                          *(_QWORD *)&v164[10] = "";
                                          v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid Lon\"}";
                                        }
                                      }
                                      else
                                      {
                                        v47 = SALogObjectGeneral;
                                        if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                          goto LABEL_146;
                                        *(_QWORD *)v164 = 68289026;
                                        *(_WORD *)&v164[8] = 2082;
                                        *(_QWORD *)&v164[10] = "";
                                        v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid Lat\"}";
                                      }
                                    }
                                    else
                                    {
                                      v47 = SALogObjectGeneral;
                                      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                        goto LABEL_146;
                                      *(_QWORD *)v164 = 68289026;
                                      *(_WORD *)&v164[8] = 2082;
                                      *(_QWORD *)&v164[10] = "";
                                      v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid GeoCode\"}";
                                    }
                                  }
                                  else
                                  {
                                    v47 = SALogObjectGeneral;
                                    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                      goto LABEL_146;
                                    *(_QWORD *)v164 = 68289026;
                                    *(_WORD *)&v164[8] = 2082;
                                    *(_QWORD *)&v164[10] = "";
                                    v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid MMI\"}";
                                  }
                                }
                                else
                                {
                                  v47 = SALogObjectGeneral;
                                  if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                    goto LABEL_146;
                                  *(_QWORD *)v164 = 68289026;
                                  *(_WORD *)&v164[8] = 2082;
                                  *(_QWORD *)&v164[10] = "";
                                  v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid magnitude\"}";
                                }
                              }
                              else
                              {
                                v47 = SALogObjectGeneral;
                                if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                  goto LABEL_146;
                                *(_QWORD *)v164 = 68289026;
                                *(_WORD *)&v164[8] = 2082;
                                *(_QWORD *)&v164[10] = "";
                                v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid  res byte 2\"}";
                              }
                            }
                            else
                            {
                              v47 = SALogObjectGeneral;
                              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_146;
                              *(_QWORD *)v164 = 68289026;
                              *(_WORD *)&v164[8] = 2082;
                              *(_QWORD *)&v164[10] = "";
                              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid res byte 1\"}";
                            }
                          }
                          else
                          {
                            v47 = SALogObjectGeneral;
                            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                              goto LABEL_146;
                            *(_QWORD *)v164 = 68289026;
                            *(_WORD *)&v164[8] = 2082;
                            *(_QWORD *)&v164[10] = "";
                            v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid ExpInfo\"}";
                          }
                        }
                        else
                        {
                          v47 = SALogObjectGeneral;
                          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                            goto LABEL_146;
                          *(_QWORD *)v164 = 68289026;
                          *(_WORD *)&v164[8] = 2082;
                          *(_QWORD *)&v164[10] = "";
                          v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid ExpInfo\"}";
                        }
                      }
                      else
                      {
                        v47 = SALogObjectGeneral;
                        if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_146;
                        *(_QWORD *)v164 = 68289026;
                        *(_WORD *)&v164[8] = 2082;
                        *(_QWORD *)&v164[10] = "";
                        v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid sentTime\"}";
                      }
                    }
                    else
                    {
                      v47 = SALogObjectGeneral;
                      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_146;
                      *(_QWORD *)v164 = 68289026;
                      *(_WORD *)&v164[8] = 2082;
                      *(_QWORD *)&v164[10] = "";
                      v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid MsgInfo\"}";
                    }
                  }
                  else
                  {
                    v47 = SALogObjectGeneral;
                    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_146;
                    *(_QWORD *)v164 = 68289026;
                    *(_WORD *)&v164[8] = 2082;
                    *(_QWORD *)&v164[10] = "";
                    v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid AlertInfo\"}";
                  }
                }
                else
                {
                  v47 = SALogObjectGeneral;
                  if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_146;
                  *(_QWORD *)v164 = 68289026;
                  *(_WORD *)&v164[8] = 2082;
                  *(_QWORD *)&v164[10] = "";
                  v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid EventInfo\"}";
                }
              }
              else
              {
                v47 = SALogObjectGeneral;
                if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_146;
                *(_QWORD *)v164 = 68289026;
                *(_WORD *)&v164[8] = 2082;
                *(_QWORD *)&v164[10] = "";
                v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid EventByte\"}";
              }
            }
            else
            {
              v47 = SALogObjectGeneral;
              if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                goto LABEL_146;
              *(_QWORD *)v164 = 68289026;
              *(_WORD *)&v164[8] = 2082;
              *(_QWORD *)&v164[10] = "";
              v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid sender\"}";
            }
          }
          else
          {
            v47 = SALogObjectGeneral;
            if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              goto LABEL_146;
            *(_QWORD *)v164 = 68289026;
            *(_WORD *)&v164[8] = 2082;
            *(_QWORD *)&v164[10] = "";
            v48 = "{\"msg%{public}.0s\":\"#bletransport,decodeEQAlertToBLEPacket,invalid region code\"}";
          }
LABEL_145:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v48, v164, 0x12u);
          goto LABEL_146;
        }
        v43 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v164 = 68289026;
          *(_WORD *)&v164[8] = 2082;
          *(_QWORD *)&v164[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,preparePDUAndSignatureForValidation,invalid data\"}", v164, 0x12u);
          v43 = SALogObjectGeneral;
        }
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          goto LABEL_55;
      }
      else
      {
        v43 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v155 = 68289026;
          *(_WORD *)&v155[8] = 2082;
          *(_QWORD *)&v155[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,preparePDUAndSignatureForValidation,invalid signature\"}", v155, 0x12u);
          v43 = SALogObjectGeneral;
        }
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          goto LABEL_55;
      }
      *(_QWORD *)v155 = 68289026;
      *(_WORD *)&v155[8] = 2082;
      *(_QWORD *)&v155[10] = "";
      v44 = "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,invalid PDU or Sign\"}";
LABEL_53:
      v45 = v43;
LABEL_54:
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, v155, 0x12u);
      goto LABEL_55;
    }
  }
  else
  {

  }
  v42 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v155 = 68289026;
    *(_WORD *)&v155[8] = 2082;
    *(_QWORD *)&v155[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,onBleCoreAlertCb,invalid data\"}", v155, 0x12u);
  }
LABEL_59:
  sub_100032ACC((uint64_t)buf);

}

void sub_100065B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_100032ACC((uint64_t)&a37);

  _Unwind_Resume(a1);
}

uint64_t sub_100065C6C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  v2 = SALogObjectGeneral;
  if (!*(_BYTE *)a1 && os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,AlreadyUnsubscribedFromAlertOverBLE\"}", (uint8_t *)&v6, 0x12u);
    v2 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,unsubscribeForBLEDiscovery\"}", (uint8_t *)&v6, 0x12u);
  }
  *(_BYTE *)a1 = 0;
  v3 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3 == (_QWORD *)(a1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_100065DDC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  double Current;
  double v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  _BOOL4 v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  _BOOL4 v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  id v40;
  void *v41;
  NSObject *v42;
  void *__p;
  id location;
  int v45;
  int v46;
  id v47;
  id v48;
  id v49;
  BOOL v50;
  unsigned int v51;
  uint8_t v52[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;
  _BYTE buf[33];
  __int128 v59;
  uint64_t v60;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,startAdvertisingIgneousAlert\"}", buf, 0x12u);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v13 = "{\"msg%{public}.0s\":\"#bletransport,startAdvertisingIgneousAlert,fDispatchQueue invalid\"}";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0x12u);
    return;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v13 = "{\"msg%{public}.0s\":\"#bletransport,startAdvertisingIgneousAlert,invalid fBleTransportInterface\"}";
    goto LABEL_19;
  }
  location = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[21] = 0;
  *(_QWORD *)&buf[16] = 0;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a2 + 152;
    if (*(char *)(a2 + 175) < 0)
      v6 = *(_QWORD *)(a2 + 152);
    *(_DWORD *)v52 = 68289283;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 2081;
    v57 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,getBleRelayData,\", \"alertData\":%{private, location:escape_only}s}", v52, 0x1Cu);
  }
  v7 = *(unsigned __int8 *)(a2 + 175);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 160);
  if (!v7)
  {
    v14 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_26;
    *(_DWORD *)v52 = 68289026;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v15 = "{\"msg%{public}.0s\":\"#bletransport,getBleRelayData,invalid data\"}";
LABEL_24:
    v16 = v14;
    v17 = 18;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, v52, v17);
    goto LABEL_26;
  }
  v51 = 0;
  if ((SACommonUtils::convertHexToChar(a2 + 152, (uint64_t)buf, 0x1Cu, &v51) & 1) == 0)
  {
    v14 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_26;
    *(_DWORD *)v52 = 68289026;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v15 = "{\"msg%{public}.0s\":\"#bletransport,getBleRelayData,can't read data\"}";
    goto LABEL_24;
  }
  v8 = v51;
  if (v51 == 28)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v10 = *(double *)(a2 + 216);
    buf[17] = (int)((Current - v10) * 1000.0 / (double)sub_1000176E4());
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 28));
    goto LABEL_27;
  }
  v27 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v52 = 68289283;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 1025;
    LODWORD(v57) = v8;
    v15 = "{\"msg%{public}.0s\":\"#bletransport,getBleRelayData,invalid data payload.\", \"encodedDataLen\":%{private}d}";
    v16 = v27;
    v17 = 24;
    goto LABEL_25;
  }
LABEL_26:
  v11 = 0;
LABEL_27:
  v18 = v47;
  v47 = v11;

  v51 = 0;
  v60 = 0;
  v59 = 0u;
  memset(&buf[1], 0, 32);
  buf[0] = 48;
  v19 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v20 = a2 + 128;
    if (*(char *)(a2 + 151) < 0)
      v20 = *(_QWORD *)(a2 + 128);
    *(_DWORD *)v52 = 68289283;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 2081;
    v57 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,getSignature,\", \"Signature\":%{private, location:escape_only}s}", v52, 0x1Cu);
  }
  v21 = *(unsigned __int8 *)(a2 + 151);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a2 + 136);
  if (!v21)
  {
    v23 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    *(_DWORD *)v52 = 68289026;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v26 = "{\"msg%{public}.0s\":\"#bletransport,getSignature,invalid data\"}";
LABEL_47:
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v26, v52, 0x12u);
    goto LABEL_48;
  }
  if ((SACommonUtils::convertHexToChar(a2 + 128, (uint64_t)buf, 0x38u, &v51) & 1) == 0)
  {
    v23 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    *(_DWORD *)v52 = 68289026;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v26 = "{\"msg%{public}.0s\":\"#bletransport,getSignature,can't read signature\"}";
    goto LABEL_47;
  }
  v22 = v51;
  v23 = SALogObjectGeneral;
  v24 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v22 != 56)
  {
    if (v24)
    {
      *(_DWORD *)v52 = 68289026;
      v53 = 0;
      v54 = 2082;
      v55 = "";
      v26 = "{\"msg%{public}.0s\":\"#bletransport,getSignature,invalid signature.\"}";
      goto LABEL_47;
    }
LABEL_48:
    v25 = 0;
    goto LABEL_49;
  }
  if (v24)
  {
    *(_DWORD *)v52 = 68289283;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 1025;
    LODWORD(v57) = 56;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readIndexDataAndSignature,\", \"encodedDataLen\":%{private}d}", v52, 0x18u);
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 56));
LABEL_49:
  v28 = v48;
  v48 = v25;

  v51 = 48;
  v29 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v30 = a2 + 176;
    if (*(char *)(a2 + 199) < 0)
      v30 = *(_QWORD *)(a2 + 176);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,getBleUID,\", \"bleAlertUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v31 = *(unsigned __int8 *)(a2 + 199);
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a2 + 184);
  if (!v31)
  {
    v36 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_67;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v37 = "{\"msg%{public}.0s\":\"#bletransport,getBleUID,invalid data\"}";
LABEL_65:
    v38 = v36;
    v39 = 18;
LABEL_66:
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, buf, v39);
    goto LABEL_67;
  }
  *(_DWORD *)v52 = 0;
  if ((SACommonUtils::convertHexToChar(a2 + 176, (uint64_t)&v51, 3u, (unsigned int *)v52) & 1) == 0)
  {
    v36 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_67;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v37 = "{\"msg%{public}.0s\":\"#bletransport,getBleUID,can't read UID\"}";
    goto LABEL_65;
  }
  v32 = *(_DWORD *)v52;
  v33 = SALogObjectGeneral;
  v34 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v32 == 3)
  {
    if (v34)
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = 3;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,getBleUID,\", \"encodedDataLen\":%{private}d}", buf, 0x18u);
    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v51, 3));
    goto LABEL_68;
  }
  if (v34)
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v32;
    v37 = "{\"msg%{public}.0s\":\"#bletransport,getBleUID,invalid UID.\", \"encodedDataLen\":%{private}d}";
    v38 = v33;
    v39 = 24;
    goto LABEL_66;
  }
LABEL_67:
  v35 = 0;
LABEL_68:
  v40 = v49;
  v49 = v35;

  if (v47 && v48 && v49)
  {
    objc_storeStrong(&location, *(id *)(a1 + 8));
    v45 = sub_1000173D8();
    v46 = 266;
    v50 = sub_100017574();
    (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), &location);
    v41 = *(void **)(a1 + 8);
    sub_10000E8A0(&__p, "BLEActiveAdvertisingIntervalTimer");
    SATimer::create(v41);
  }
  v42 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,startAdvertisingIgneousAlert invalid BLE info\"}", buf, 0x12u);
  }

}

void sub_100066860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  sub_1000669C4(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000668D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,stopAdvertisingIgneousAlertOverBLE,advertiser release before\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    result = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

id *sub_1000669C4(id *a1)
{

  return a1;
}

BOOL sub_100066A04(uint64_t a1, void *a2, _BYTE *a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v9;
  _BOOL8 v10;
  unsigned int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v16;
  int v17;
  unsigned __int8 v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v19 = 0;
  v9 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v19, (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v10 = v9 != 0;
  if (v9)
  {
    *a4 = v9;
    v11 = v19;
    v12 = v19 & 3;
    a3[31] = v19 & 3;
    v13 = (v11 >> 3) & 0xF;
    a3[32] = (v11 >> 3) & 0xF;
    a3[33] = v11 >> 7;
  }
  else
  {
    v12 = a3[31];
    v13 = a3[32];
  }
  v14 = SALogObjectGeneral;
  if (v12 != 1 || v13 != 1)
  {
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v16 = a3[33];
      *(_DWORD *)buf = 68289795;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 1025;
      v25 = v12;
      v26 = 1025;
      v27 = v13;
      v28 = 1025;
      v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateMsgInfo,invalid\", \"msgInfoMsgType\":%{private}d, \"msgInfoResponseType\":%{private}d, \"msgInfoLanguageFlag\":%{private}d}", buf, 0x24u);
      v10 = 0;
      v14 = SALogObjectGeneral;
    }
    else
    {
      v10 = 0;
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *a4;
    *(_DWORD *)buf = 68289283;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 1025;
    v25 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateMsgInfo\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v10;
}

BOOL sub_100066BDC(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 36), (void *)(a1 + *a4), a2, 4u, 4uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readSentTime\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100066CE4(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v17 = 0;
  v10 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v17, (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v11 = v10;
  if (v10)
    *a4 = v10;
  v12 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(char *)(a1 + *a4);
    *(_DWORD *)buf = 68289539;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1025;
    v23 = v13;
    v24 = 1025;
    v25 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateExpInfo\", \"alertData[offset]\":%{private}d, \"unsignedByte\":%{private}d}", buf, 0x1Eu);
    v12 = SALogObjectGeneral;
  }
  v14 = v17;
  *(_BYTE *)(a3 + 40) = v17 & 3;
  *(_BYTE *)(a3 + 41) = v14 >> 2;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *a4;
    *(_DWORD *)buf = 68289283;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1025;
    v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateExpInfo\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v11 != 0;
}

BOOL sub_100066E8C(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 42), (void *)(a1 + *a4), a2, 2u, 2uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readOriginTime\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100066F94(uint64_t a1, void *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;

  v13 = 0;
  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v13, (void *)(a1 + *a3), a2, 1u, 1uLL, a3, a7);
  v9 = v8;
  if (v8)
    *a3 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a3;
    *(_DWORD *)buf = 68289283;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1025;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateReserveByte\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_10006709C(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 46), (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readMagnitude\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_1000671A4(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 47), (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readMMI\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_1000672AC(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  int v16;
  unsigned __int8 v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v18 = 0;
  v10 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v18, (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v11 = v10;
  if (v10)
  {
    *a4 = v10;
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(char *)(a1 + v11);
      *(_DWORD *)buf = 68289539;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 1025;
      v24 = v13;
      v25 = 1025;
      v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateGeoCode\", \"alertData[offset]\":%{private}d, \"unsignedByte\":%{private}d}", buf, 0x1Eu);
    }
    v14 = v18;
    *(_BYTE *)(a3 + 48) = v18 & 0xF;
    *(_BYTE *)(a3 + 49) = v14 >> 5;
  }
  v15 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *a4;
    *(_DWORD *)buf = 68289283;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 1025;
    v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateGeoCode\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v11 != 0;
}

BOOL sub_100067450(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v16 = 0;
  v9 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v16, (void *)(a1 + *a4), a2, 3u, 3uLL, a4, a7);
  v10 = v9;
  if (v9)
  {
    *a4 = v9;
    v11 = v16;
    *(_DWORD *)(a3 + 52) = v16;
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1025;
      v22 = v11;
      v23 = 1025;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateLat\", \"epi_latitude\":%{private}d, \"intBytes\":%{private}d}", buf, 0x1Eu);
    }
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *a4;
    *(_DWORD *)buf = 68289283;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1025;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateLat\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v10 != 0;
}

BOOL sub_1000675DC(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v16 = 0;
  v9 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)&v16, (void *)(a1 + *a4), a2, 3u, 3uLL, a4, a7);
  v10 = v9;
  if (v9)
  {
    *a4 = v9;
    v11 = v16;
    *(_DWORD *)(a3 + 56) = v16;
    v12 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1025;
      v22 = v11;
      v23 = 1025;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateLon\", \"epi_longitude\":%{private}d, \"intBytes\":%{private}d}", buf, 0x1Eu);
    }
  }
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *a4;
    *(_DWORD *)buf = 68289283;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1025;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateLon\", \"offset\":%{private}d}", buf, 0x18u);
  }
  return v10 != 0;
}

BOOL sub_100067768(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 60), (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateRange\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100067870(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 62), (void *)(a1 + *a4), a2, 2u, 2uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateLanguageCode\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100067978(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 64), (void *)(a1 + *a4), a2, 2u, 2uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateCountryCode\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100067A80(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 66), (void *)(a1 + *a4), a2, 1u, 1uLL, a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateMessageLen\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

BOOL sub_100067B88(uint64_t a1, void *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v8 = SACommonUtils::copyDataAndReturnNewLen((SACommonUtils *)(a3 + 72), (void *)(a1 + *a4), a2, *(unsigned __int16 *)(a3 + 66), *(unsigned __int16 *)(a3 + 66), a4, a7);
  v9 = v8;
  if (v8)
    *a4 = v8;
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a4;
    v13[0] = 68289283;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1025;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,readAndValidateMessageData\", \"offset\":%{private}d}", (uint8_t *)v13, 0x18u);
  }
  return v9 != 0;
}

void sub_100067C90(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  int v31;
  int v32;
  double v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  _BYTE buf[28];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v5 = a1;
    else
      v5 = (uint64_t *)*a1;
    v6 = *((unsigned __int16 *)a1 + 12);
    v7 = *((unsigned __int8 *)a1 + 26);
    v8 = *((unsigned __int8 *)a1 + 27);
    v9 = *((unsigned __int8 *)a1 + 28);
    v10 = *((unsigned __int8 *)a1 + 29);
    v11 = *((unsigned __int8 *)a1 + 30);
    v12 = *((unsigned __int8 *)a1 + 31);
    v13 = *((unsigned __int8 *)a1 + 32);
    v14 = *((unsigned __int8 *)a1 + 33);
    v15 = *((unsigned int *)a1 + 9);
    v16 = *((unsigned __int8 *)a1 + 40);
    v17 = *((unsigned __int8 *)a1 + 41);
    v18 = *((__int16 *)a1 + 21);
    v19 = *((unsigned __int8 *)a1 + 96);
    v20 = *((unsigned __int8 *)a1 + 46);
    v21 = *((unsigned __int8 *)a1 + 47);
    v22 = *((unsigned __int8 *)a1 + 48);
    v23 = *((unsigned __int8 *)a1 + 49);
    v24 = *((_DWORD *)a1 + 13);
    v25 = *((_DWORD *)a1 + 14);
    v26 = *((unsigned __int8 *)a1 + 60);
    *(_DWORD *)buf = 68294659;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v5;
    v43 = 1025;
    v44 = v6;
    v45 = 1025;
    v46 = v7;
    v47 = 1025;
    v48 = v8;
    v49 = 1025;
    v50 = v9;
    v51 = 1025;
    v52 = v10;
    v53 = 1025;
    v54 = v11;
    v55 = 1025;
    v56 = v12;
    v57 = 1025;
    v58 = v13;
    v59 = 1025;
    v60 = v14;
    v61 = 2049;
    v62 = v15;
    v63 = 1025;
    v64 = v16;
    v65 = 1025;
    v66 = v17;
    v67 = 1025;
    v68 = v18;
    v69 = 1025;
    v70 = v19;
    v71 = 1025;
    v72 = v20;
    v73 = 1025;
    v74 = v21;
    v75 = 1025;
    v76 = v22;
    v77 = 1025;
    v78 = v23;
    v79 = 1025;
    v80 = v24;
    v81 = 1025;
    v82 = v25;
    v83 = 1025;
    v84 = v26;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,updateBleDataToAlertData\", \"regionCode\":%{private, location:escape_only}s, \"Sender\":%{private}d, \"eventType\":%{private}d, \"eventInfoPayloadLayout\":%{private}d, \"eventInfoEventCategory\":%{private}d, \"alertInfoAlertType\":%{private}d, \"alertInfoFloodFill\":%{private}d, \"msgInfoMsgType\":%{private}d, \"msgInfoResponseType\":%{private}d, \"msgInfoLanguageFlag\":%{private}d, \"sentTime\":%{private}llu, \"expirationLen\":%{private}d, \"expirationNum\":%{private}d, \"orginTimeOffsetFromSentTime\":%{private}d, \"bleAdvertiseTime\":%{private}d, \"Magnitude\":%{private}d, \"MMI\":%{private}d, \"GeoCodeType\":%{private}d, \"geoCodeScale\":%{private}d, \"epi_latitude\":%{private}d, \"epi_longitude\":%{private}d, \"effectiveDistance\":%{private}d}", buf, 0x9Eu);
  }
  sub_10000E8A0(buf, "USGS_BLE");
  v27 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v27);
  v28 = *(_QWORD *)buf;
  *(_OWORD *)v27 = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)&buf[16];
  LOBYTE(v28) = *((_BYTE *)a1 + 46);
  v29 = 10.0;
  LODWORD(v29) = *((_DWORD *)a1 + 9);
  v30 = (double)v29 + -978307200.0;
  *(double *)(a2 + 216) = v30;
  *(double *)(a2 + 280) = (double)v28 / 10.0;
  *(double *)(a2 + 232) = v30;
  v31 = *((unsigned __int8 *)a1 + 96);
  v32 = sub_1000176E4();
  v33 = *(double *)(a2 + 216);
  *(double *)(a2 + 352) = v33 + (double)(v32 * v31 / 0x3E8u);
  v34 = *((char *)a1 + 40);
  if (v34 <= 3)
    *(double *)(a2 + 240) = v33 + (double)(dword_1000B1EE0[v34] * *((unsigned __int8 *)a1 + 41));
  v35 = *((unsigned __int16 *)a1 + 21);
  v36 = v35 & 3;
  v37 = (v35 >> 12) & 1;
  v38 = (v35 >> 2) & 0x1FFF;
  if (v37)
    v39 = -v38;
  else
    v39 = v38;
  v40 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v41 = *(_QWORD *)(a2 + 224);
    *(_DWORD *)buf = 68290051;
    *(_WORD *)&buf[8] = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v41;
    v43 = 1025;
    v44 = v39;
    v45 = 1025;
    v46 = v36;
    v47 = 1025;
    v48 = v37;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,updateBleDataToAlertData\", \"OriginTime\":\"%{private}3f\", \"originTimeUnitCount\":%{private}d, \"originTimeUnit\":%{private}d, \"isNegative\":%{private}d}", buf, 0x2Eu);
  }
  __asm { BR              X9 }
}

void sub_100067FC8(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_t *v4;
  const char *v5;
  int v6;
  double v7;
  double v8;
  NSObject *v9;
  char *v10;
  void **v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64x2_t v15;
  float64x2_t v16;
  double v17;
  unsigned int v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  BOOL v23;
  const char *v24;
  int v25;
  const char *v26;
  BOOL v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  _BYTE v41[28];
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  float64_t v61;
  __int16 v62;
  float64_t v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  unsigned int v72;

  LODWORD(a1) = *(_DWORD *)(v2 + 36);
  v8 = (double)*(unint64_t *)&a1 + v7 + (double)v6 * 0.1;
  *(double *)(v1 + 224) = v8;
  v9 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v41 = 68289283;
    *(_DWORD *)&v41[4] = 0;
    *(_WORD *)&v41[8] = 2082;
    *(_QWORD *)&v41[10] = "";
    *(_WORD *)&v41[18] = 2049;
    *(double *)&v41[20] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,updateBleDataToAlertData\", \"OriginTime\":\"%{private}3f\"}", v41, 0x1Cu);
  }
  *(_BYTE *)(v1 + 328) = *(_BYTE *)(v2 + 26);
  if (*(char *)(v2 + 23) >= 0)
    v10 = (char *)v2;
  else
    v10 = *(char **)v2;
  sub_10000E8A0(v41, v10);
  v11 = (void **)(v1 + 56);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v11);
  HIDWORD(v12) = *(_DWORD *)&v41[4];
  *(_OWORD *)v11 = *(_OWORD *)v41;
  *(_QWORD *)(v1 + 72) = *(_QWORD *)&v41[16];
  LODWORD(v12) = *(_DWORD *)(v2 + 36);
  v13 = (double)v12 + v7;
  *(double *)(v1 + 208) = v13;
  v14 = *(_QWORD *)(v2 + 52);
  v15.i64[0] = v14;
  v15.i64[1] = HIDWORD(v14);
  v16 = vaddq_f64(vdivq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_n_s64(0x40E1940000000000uLL)), (float64x2_t)xmmword_1000AE030);
  v40 = v16;
  *(float64x2_t *)(v1 + 264) = v16;
  *(_DWORD *)(v1 + 332) = *(unsigned __int8 *)(v2 + 31);
  *(_DWORD *)(v1 + 336) = *(unsigned __int8 *)(v2 + 29);
  *(_WORD *)(v1 + 340) = *(_WORD *)(v2 + 24);
  LOBYTE(v16.f64[0]) = *(_BYTE *)(v2 + 47);
  v17 = (double)*(unint64_t *)&v16.f64[0] / 10.0;
  *(double *)(v1 + 288) = v17;
  *(_BYTE *)v1 = 1;
  *(_WORD *)(v1 + 342) = *(_WORD *)(v2 + 48);
  v18 = *(unsigned __int8 *)(v2 + 60);
  *(double *)(v1 + 320) = (double)v18;
  v19 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v1 + 55) < 0)
    {
      if (*(_QWORD *)(v1 + 40))
        v20 = *(const char **)(v1 + 32);
      else
        v20 = "";
    }
    else if (*(_BYTE *)(v1 + 55))
    {
      v20 = v5;
    }
    else
    {
      v20 = "";
    }
    v21 = *(char *)(v1 + 31);
    if (v21 < 0)
    {
      v22 = *(const char **)(v1 + 8);
      v23 = *(_QWORD *)(v1 + 16) == 0;
    }
    else
    {
      v22 = (const char *)(v1 + 8);
      v23 = v21 == 0;
    }
    if (v23)
      v24 = "";
    else
      v24 = v22;
    v25 = *(char *)(v1 + 199);
    if (v25 < 0)
    {
      v26 = *(const char **)(v1 + 176);
      v27 = *(_QWORD *)(v1 + 184) == 0;
    }
    else
    {
      v26 = (const char *)(v1 + 176);
      v27 = v25 == 0;
    }
    if (v27)
      v28 = "";
    else
      v28 = v26;
    if (*(char *)(v2 + 23) < 0)
    {
      if (*(_QWORD *)(v2 + 8))
        v29 = *(const char **)v2;
      else
        v29 = "";
    }
    else if (*(_BYTE *)(v2 + 23))
    {
      v29 = (const char *)v2;
    }
    else
    {
      v29 = "";
    }
    v30 = *(_QWORD *)(v1 + 216);
    v31 = *(_QWORD *)(v1 + 224);
    v32 = *(_QWORD *)(v1 + 232);
    v33 = *(_QWORD *)(v1 + 240);
    v34 = *(_QWORD *)(v1 + 280);
    v36 = *(_QWORD *)(v1 + 248);
    v35 = *(_QWORD *)(v1 + 256);
    v37 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 304);
    v39 = *(_QWORD *)(v1 + 352);
    *(_DWORD *)v41 = 68293891;
    *(_DWORD *)&v41[4] = 0;
    *(_WORD *)&v41[8] = 2082;
    *(_QWORD *)&v41[10] = "";
    *(_WORD *)&v41[18] = 2081;
    *(_QWORD *)&v41[20] = v20;
    v42 = 2081;
    v43 = v24;
    v44 = 2081;
    v45 = v28;
    v46 = 2081;
    v47 = v29;
    v48 = 2049;
    v49 = v13;
    v50 = 2049;
    v51 = v30;
    v52 = 2049;
    v53 = v31;
    v54 = 2049;
    v55 = v32;
    v56 = 2049;
    v57 = v33;
    v58 = 2049;
    v59 = v35;
    v60 = 2049;
    v61 = v40.f64[0];
    v62 = 2049;
    v63 = v40.f64[1];
    v64 = 2049;
    *(_QWORD *)(v3 + 140) = v34;
    v65 = 2049;
    *(_QWORD *)(v3 + 150) = v36;
    v66 = 2049;
    v67 = v37;
    v68 = 2049;
    *(_QWORD *)(v3 + 170) = v38;
    v69 = 2049;
    *(double *)(v3 + 180) = v17;
    v70 = 2049;
    *(_QWORD *)(v3 + 190) = v39;
    v71 = 1025;
    v72 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,updateBleDataToAlertData\", \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"bleAlertUID\":%{private, location:escape_only}s, \"regionCode\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\", \"magnitude\":\"%{private}0.3f\", \"depth\":\"%{private}0.3f\", \"mmiLat\":\"%{private}0.3f\", \"mmiLon\":\"%{private}0.3f\", \"mmiLevel\":\"%{private}0.3f\", \"bleAdvertiseTime\":\"%{private}0.3f\", \"effectiveDistance\":%{private}d}", v41, 0xCCu);
  }
}

uint64_t sub_100068354(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_100068394(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100068418(result, a4);
    result = (_QWORD *)sub_10006846C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000683F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1000684EC(&a9);
  _Unwind_Resume(a1);
}

char *sub_100068418(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    sub_100004C50();
  result = (char *)sub_10001DFA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t sub_10006846C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_10001D8C0(a4 + v7, a2 + v7);
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1000684C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 280;
    do
    {
      sub_10001DE04(v4 + v2);
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000684EC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10001DE04(v4 - 280);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10006855C(uint64_t a1)
{

  return a1;
}

void sub_100068584(uint64_t a1)
{

  operator delete();
}

uint64_t sub_1000685BC()
{
  return 0;
}

id sub_1000685C4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F47F8;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1000685F8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100068608(uint64_t a1, id *a2)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_100068638(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4868))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100068674()
{
  return &off_1000F4868;
}

void sub_100068684()
{
  operator delete();
}

_QWORD *sub_100068698(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4888;
  result[1] = v3;
  return result;
}

uint64_t sub_1000686CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4888;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000686E8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bletransport,BLEActiveAdvertisingIntervalTimerCb\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_1000668D0(v1);
}

uint64_t sub_1000687A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000687E0()
{
}

void *sub_1000687EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100102D30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100102D30))
  {
    sub_10006B0D4((uint64_t)&unk_100102B40);
    __cxa_atexit((void (*)(void *))sub_10006887C, &unk_100102B40, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100102D30);
  }
  return &unk_100102B40;
}

void sub_100068864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100102D30);
  _Unwind_Resume(a1);
}

uint64_t sub_10006887C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  v2 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v2)
    operator delete();
  v3 = *(void **)(a1 + 456);
  if (v3)
  {
    *(_QWORD *)(a1 + 464) = v3;
    operator delete(v3);
  }
  sub_100032A34(a1 + 176);
  v5 = (void **)(a1 + 152);
  sub_1000684EC(&v5);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_100068928(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD *v26;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
    {
      if (*(_QWORD *)(a1 + 32))
        v3 = *(const char **)v3;
      else
        v3 = "<empty>";
    }
    else if (!*(_BYTE *)(a1 + 47))
    {
      v3 = "<empty>";
    }
    v4 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v4 = (_QWORD *)*v4;
    v6 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 4);
    v7 = *(_DWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v9 = (_QWORD *)*v9;
    v10[0] = 68290819;
    v11 = 2082;
    v10[1] = 0;
    v12 = "";
    v13 = 1025;
    v14 = v8;
    v15 = 1025;
    v16 = v6;
    v17 = 1025;
    v18 = v5;
    v19 = 1025;
    v20 = v7;
    v21 = 2081;
    v22 = v3;
    v23 = 2081;
    v24 = v4;
    v25 = 2081;
    v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,log\", \"pullpc\":%{private}d, \"appc\":%{private}d, \"efficacyParticipationPercentage\":%{private}d, \"wowControls\":%{private}d, \"pullCname\":%{private, location:escape_only}s, \"efficacyManifestFileName\":%{private, location:escape_only}s, \"codebookFileName\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x48u);
  }
}

void sub_100068A7C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void **v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void **v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  void **v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  double v55;
  id v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  NSObject *v63;
  const char *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  NSObject *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  NSObject *v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  NSObject *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  uint64_t i;
  uint64_t v87;
  void **v88;
  void **v95;
  void **v96;
  void **v97;
  void **v98;
  __int128 v99;
  void *v100;
  std::string __p;
  std::string buf[2];
  void *v103[2];
  void *v104[4];
  void *v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;

  v3 = a2;
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].__r_.__value_.__r.__words[0] = 68289283;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2113;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#assetConfig,onAssetReceived\", \"asset\":%{private, location:escape_only}@}", (uint8_t *)buf, 0x1Cu);
  }
  v5 = v3;
  v6 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].__r_.__value_.__r.__words[0] = 68289283;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2113;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#assetConfig,readAPNConfigAsset\", \"asset\":%{private, location:escape_only}@}", (uint8_t *)buf, 0x1Cu);
  }

  if (!v5)
  {
    v13 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_81;
    buf[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v14 = "{\"msg%{public}.0s\":\"#assetConfig,#warning,readAPNConfigAsset,nilAssetDictionary\"}";
    goto LABEL_15;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("config")));
  if (!v7 || (v8 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v7, v8) & 1) == 0))
  {

    v13 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_81;
    buf[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v14 = "{\"msg%{public}.0s\":\"#assetConfig,#warning,readAPNConfigAsset,nilConfig\"}";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)buf, 0x12u);
    goto LABEL_81;
  }
  v9 = v7;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("metrics")));
  if (v10 && (v11 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
    v12 = v10;
  else
    v12 = 0;

  *(_DWORD *)(a1 + 4) = -1;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("pullpc")));
  if (v15)
  {
    v16 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
      *(_DWORD *)(a1 + 4) = objc_msgSend(v15, "intValue");
  }

  *(_DWORD *)(a1 + 12) = -1;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("appc")));
  if (v17)
  {
    v18 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v17, v18) & 1) != 0)
      *(_DWORD *)(a1 + 12) = objc_msgSend(v17, "intValue");
  }

  *(_DWORD *)(a1 + 16) = 100;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("efficacyParticipationPercentage")));
  if (v19)
  {
    v20 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0)
      *(_DWORD *)(a1 + 16) = objc_msgSend(v19, "intValue");
  }

  *(_DWORD *)(a1 + 120) = -1;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("onAlertReceivedDuration")));
  if (v21)
  {
    v22 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
      *(_DWORD *)(a1 + 120) = objc_msgSend(v21, "intValue");
  }

  *(_BYTE *)(a1 + 488) = 1;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("motionHarvestOnlyInCountry")));
  if (v23)
  {
    v24 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v23, v24) & 1) != 0)
      *(_BYTE *)(a1 + 488) = objc_msgSend(v23, "intValue") != 0;
  }

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("apns")));
  if (v25 && (v26 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v25, v26) & 1) != 0))
    v27 = v25;
  else
    v27 = 0;

  *(_DWORD *)(a1 + 8) = 1;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", CFSTR("wowControls")));
  if (v28)
  {
    v29 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
      *(_DWORD *)(a1 + 8) = objc_msgSend(v28, "intValue");
  }

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("pull")));
  if (v30 && (v31 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v30, v31) & 1) != 0))
    v32 = v30;
  else
    v32 = 0;

  v33 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v33);
  *v33 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKey:", CFSTR("server")));
  if (v34)
  {
    v35 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v34, v35) & 1) != 0)
    {
      sub_10001D858(v34, buf);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v33);
      *(_OWORD *)v33 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
    }
  }

  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("livability")));
  if (v36 && (v37 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v36, v37) & 1) != 0))
    v38 = v36;
  else
    v38 = 0;

  v39 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v39);
  *v39 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("weaEnrichmentChannel")));
  if (v40)
  {
    v41 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v40, v41) & 1) != 0)
    {
      sub_10001D858(v40, buf);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v39);
      *(_OWORD *)v39 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
    }
  }

  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("security")));
  if (v42 && (v43 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v42, v43) & 1) != 0))
    v44 = v42;
  else
    v44 = 0;

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKey:", CFSTR("codebookFileName")));
  if (v45)
  {
    v46 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v45, v46) & 1) != 0)
    {
      sub_10001D858(v45, buf);
      v47 = (void **)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        operator delete(*v47);
      *(_OWORD *)v47 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
    }
  }

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKey:", CFSTR("codebookDownloadPeriodSeconds")));
  if (v48)
  {
    v49 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v48, v49) & 1) != 0)
      *(_DWORD *)(a1 + 20) = objc_msgSend(v48, "intValue");
  }

  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("edcfu")));
  if (v50 && (v51 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v50, v51) & 1) != 0))
    v52 = v50;
  else
    v52 = 0;

  *(_DWORD *)(a1 + 492) = 0;
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", CFSTR("uptakeCoefficient")));
  if (v53)
  {
    v54 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v53, v54) & 1) != 0)
    {
      objc_msgSend(v53, "doubleValue");
      *(float *)&v55 = v55;
      *(_DWORD *)(a1 + 492) = LODWORD(v55);
    }
  }

  *(_BYTE *)a1 = 1;
LABEL_81:

  v56 = v5;
  v57 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].__r_.__value_.__r.__words[0] = 68289283;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2113;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v56;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"metrics\":%{private, location:escape_only}@}", (uint8_t *)buf, 0x1Cu);
  }
  if (!v5)
  {
    v63 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_127;
    buf[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v64 = "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset,nilAssetDictionary\"}";
    goto LABEL_93;
  }
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKey:", CFSTR("config")));
  if (!v58 || (v59 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v58, v59) & 1) == 0))
  {

    v63 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_127;
    buf[0].__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    v64 = "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset,nilConfig\"}";
LABEL_93:
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, v64, (uint8_t *)buf, 0x12u);
    goto LABEL_127;
  }
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKey:", CFSTR("metrics")));
  if (v60 && (v61 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v60, v61) & 1) != 0))
    v62 = v60;
  else
    v62 = 0;

  v65 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].__r_.__value_.__r.__words[0] = 68289283;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2113;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v62;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"metricsData\":%{private, location:escape_only}@}", (uint8_t *)buf, 0x1Cu);
  }
  v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", CFSTR("rmEnable"), 0, 0, 0));
  if (v66)
  {
    v67 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v66, v67) & 1) != 0)
    {
      v68 = -[NSObject intValue](v66, "intValue") != 0;

      *(_WORD *)(a1 + 124) = v68 | 0x100;
      v66 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 125))
          sub_10006B2FC();
        v69 = *(unsigned __int8 *)(a1 + 124);
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v69;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"rmSupport\":%{public}d}", (uint8_t *)buf, 0x18u);
      }
    }
  }

  v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", CFSTR("rmPeriodInSeconds")));
  if (v70)
  {
    v71 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v70, v71) & 1) != 0)
    {
      v72 = -[NSObject intValue](v70, "intValue");

      *(_DWORD *)(a1 + 128) = v72;
      *(_BYTE *)(a1 + 132) = 1;
      v70 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 132))
          sub_10006B2FC();
        v73 = *(_DWORD *)(a1 + 128);
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v73;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"metricPeriod\":%{public}d}", (uint8_t *)buf, 0x18u);
      }
    }
  }

  v74 = objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", CFSTR("rmFixedDelayInSeconds")));
  if (v74)
  {
    v75 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v74, v75) & 1) != 0)
    {
      v76 = -[NSObject intValue](v74, "intValue");

      *(_DWORD *)(a1 + 136) = v76;
      *(_BYTE *)(a1 + 140) = 1;
      v74 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 140))
          sub_10006B2FC();
        v77 = *(_DWORD *)(a1 + 136);
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v77;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"metricFixDelay\":%{public}d}", (uint8_t *)buf, 0x18u);
      }
    }
  }

  v78 = objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", CFSTR("rmRandomDelayInSeconds")));
  if (v78)
  {
    v79 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v78, v79) & 1) != 0)
    {
      v80 = -[NSObject intValue](v78, "intValue");

      *(_DWORD *)(a1 + 144) = v80;
      *(_BYTE *)(a1 + 148) = 1;
      v78 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 148))
          sub_10006B2FC();
        v81 = *(_DWORD *)(a1 + 144);
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v81;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"metricRandomDelay\":%{public}d}", (uint8_t *)buf, 0x18u);
      }
    }
  }

  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", CFSTR("efficacyManifestFileName")));
  if (v82 && (v83 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v82, v83) & 1) != 0))
  {
    sub_10001D858(v82, buf);
    __p = buf[0];

    v84 = (_QWORD *)(a1 + 72);
    std::string::operator=((std::string *)(a1 + 72), &__p);
    v85 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 95) < 0)
        v84 = (_QWORD *)*v84;
      buf[0].__r_.__value_.__r.__words[0] = 68289283;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2081;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v84;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,readRollingMetricAsset\", \"efficacyManifestFileName\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {

  }
LABEL_127:

  if (!*(_QWORD *)(a1 + 480))
    operator new();
  v87 = *(_QWORD *)(a1 + 152);
  for (i = *(_QWORD *)(a1 + 160); i != v87; i = sub_10001DE04(i - 280))
    ;
  *(_QWORD *)(a1 + 160) = v87;
  v88 = (void **)(a1 + 176);
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)v105 = 0u;
  v106 = 0u;
  memset(v104, 0, sizeof(v104));
  *(_OWORD *)v103 = 0u;
  memset(buf, 0, sizeof(buf));
  __asm { FMOV            V0.2D, #10.0 }
  v110 = _Q0;
  __asm { FMOV            V0.2D, #-1.0 }
  v111 = _Q0;
  v112 = _Q0;
  v109 = 0;
  v113 = 0xBFF0000000000000;
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v88);
  *v88 = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  v95 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v95);
  *(_OWORD *)v95 = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)&buf[1].__r_.__value_.__l + 2);
  *((_BYTE *)&buf[1].__r_.__value_.__s + 23) = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v96 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*v96);
  *(_OWORD *)v96 = *(_OWORD *)v103;
  *(void **)(a1 + 240) = v104[0];
  HIBYTE(v104[0]) = 0;
  LOBYTE(v103[0]) = 0;
  v97 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*v97);
  *(_OWORD *)v97 = *(_OWORD *)&v104[1];
  *(void **)(a1 + 264) = v104[3];
  HIBYTE(v104[3]) = 0;
  LOBYTE(v104[1]) = 0;
  v98 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v98);
  *(_OWORD *)v98 = *(_OWORD *)v105;
  *(_QWORD *)(a1 + 288) = v106;
  BYTE7(v106) = 0;
  LOBYTE(v105[0]) = 0;
  sub_1000329A0((uint64_t *)(a1 + 296));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v107 = 0uLL;
  *((_QWORD *)&v106 + 1) = 0;
  sub_1000329A0((uint64_t *)(a1 + 320));
  v99 = v111;
  *(_OWORD *)(a1 + 344) = v110;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v109 = 0;
  v108 = 0uLL;
  *(_OWORD *)(a1 + 360) = v99;
  *(_OWORD *)(a1 + 376) = v112;
  *(_QWORD *)(a1 + 392) = v113;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
  sub_100004EC0((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106 + 8;
  sub_100004EC0((void ***)&__p);
  if (SBYTE7(v106) < 0)
    operator delete(v105[0]);
  if (SHIBYTE(v104[3]) < 0)
    operator delete(v104[1]);
  if (SHIBYTE(v104[0]) < 0)
    operator delete(v103[0]);
  if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = xmmword_1000B2120;
  *(_OWORD *)(a1 + 424) = xmmword_1000B2130;
  *(_QWORD *)(a1 + 440) = 1;
  *(_BYTE *)(a1 + 448) = 0;
  v100 = *(void **)(a1 + 456);
  if (v100)
  {
    *(_QWORD *)(a1 + 464) = v100;
    operator delete(v100);
  }
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  sub_1000188BC(*(_QWORD *)(a1 + 480), v56, (int64x2_t *)(a1 + 152), (std::string *)(a1 + 176));
  sub_10001C0C0(*(_QWORD *)(a1 + 480), v56, (BOOL *)(a1 + 400));
  *(_BYTE *)a1 = 1;

}

void sub_100069C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100069F28(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  double v8;
  unsigned int v9;
  unint64_t v10;
  _DWORD *v11;
  double v12;
  NSObject *v13;
  double v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 68289026;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,getRollingMetrics\"}", (uint8_t *)&v17, 0x12u);
  }
  if ((*((_DWORD *)sub_10003D044() + 62) & 0x80000000) != 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 125);
    if (*(_BYTE *)(a1 + 125))
      v5 = *(unsigned __int8 *)(a1 + 124);
  }
  else
  {
    v5 = *((_DWORD *)sub_10003D044() + 62);
  }
  *(_BYTE *)a2 = v5 != 0;
  if ((*((_DWORD *)sub_10003D044() + 63) & 0x80000000) == 0)
  {
    v7 = (char *)sub_10003D044() + 252;
LABEL_11:
    LODWORD(v6) = *v7;
    v8 = (double)v6;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 132))
  {
    v7 = (_DWORD *)(a1 + 128);
    goto LABEL_11;
  }
  v8 = 4294967300.0;
LABEL_12:
  a2[1] = v8;
  if ((*((_DWORD *)sub_10003D044() + 64) & 0x80000000) != 0)
  {
    if (*(_BYTE *)(a1 + 140))
      v9 = *(_DWORD *)(a1 + 136);
    else
      v9 = -1;
  }
  else
  {
    v9 = *((_DWORD *)sub_10003D044() + 64);
  }
  a2[2] = (double)v9;
  if ((*((_DWORD *)sub_10003D044() + 65) & 0x80000000) == 0)
  {
    v11 = (char *)sub_10003D044() + 260;
LABEL_22:
    LODWORD(v10) = *v11;
    v12 = (double)v10;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 148))
  {
    v11 = (_DWORD *)(a1 + 144);
    goto LABEL_22;
  }
  v12 = 4294967300.0;
LABEL_23:
  a2[3] = v12;
  v13 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a2[2];
    v15 = (unint64_t)a2[1];
    v16 = *(unsigned __int8 *)a2;
    v17 = 68290050;
    v19 = 2082;
    v18 = 0;
    v20 = "";
    v21 = 1026;
    v22 = v16;
    v23 = 2050;
    v24 = v15;
    v25 = 1026;
    v26 = (int)v12;
    v27 = 1026;
    v28 = (int)v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetConfig,getRollingMetrics\", \"rmSupported\":%{public}d, \"rollingPeriodSeconds\":%{public}lu, \"randomDelaySeconds\":%{public}d, \"fixedDelay\":%{public}d}", (uint8_t *)&v17, 0x2Eu);
  }
}

uint64_t sub_10006A168(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6 && v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v7));
    if (v9 && (v10 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
    {
      objc_msgSend(v9, "doubleValue");
      v12 = v11;
      *a4 = v11;
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 68289283;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2049;
        v23 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,readFloat,value\", \"value\":\"%{private}0.3f\"}", (uint8_t *)&v18, 0x1Cu);
      }
      v14 = 1;
    }
    else
    {
      v16 = SALogObjectGeneral;
      v14 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 68289026;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,readFloat,keyIdObjectFailed\"}", (uint8_t *)&v18, 0x12u);
        v14 = 0;
      }
    }

  }
  else
  {
    v15 = SALogObjectGeneral;
    v14 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,invalid dictionary or Key\"}", (uint8_t *)&v18, 0x12u);
      v14 = 0;
    }
  }

  return v14;
}

void sub_10006A394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10006A3BC(uint64_t a1, void *a2, void *a3, unsigned int *a4, _QWORD *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;

  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (v8 && v9 && a5)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));
    if (v11 && (v12 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v11, v12) & 1) != 0))
    {
      v13 = objc_retainAutorelease(v11);
      *a5 = v13;
      v14 = objc_msgSend(v13, "count");
      *a4 = v14;
      v15 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 68289283;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2049;
        v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,arrayLen,size\", \"arrayLen\":%{private}lu}", (uint8_t *)&v20, 0x1Cu);
      }

      v16 = 1;
    }
    else
    {
      v18 = SALogObjectGeneral;
      v16 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 68289026;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,invalid_keyId\"}", (uint8_t *)&v20, 0x12u);
        v16 = 0;
      }
    }

  }
  else
  {
    v17 = SALogObjectGeneral;
    v16 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,invalid dictionary or Key\"}", (uint8_t *)&v20, 0x12u);
      v16 = 0;
    }
  }

  return v16;
}

void sub_10006A5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL sub_10006A630(uint64_t a1, void *a2, void *a3, unsigned int *a4, uint64_t a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  _DWORD *v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  void *v37;
  _BOOL4 v38;
  void *v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;

  v8 = a2;
  v9 = a3;
  v10 = v9;
  v39 = v8;
  if (v8 && v9)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));
    if (!v11 || (v12 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v11, v12) & 1) == 0))
    {
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v41 = 0;
        v42 = 2082;
        v43 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,Array read failed\"}", buf, 0x12u);
      }
    }
    v14 = v11;
    v15 = objc_msgSend(v14, "count");
    *a4 = v15;
    v38 = v15 != 0;
    if (v15)
    {
      v37 = v11;
      v16 = 0;
      do
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndex:", v16, v37));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKey:", v10));
        if (v18 && (v19 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v18, v19) & 1) != 0))
          v20 = objc_msgSend(v18, "intValue");
        else
          v20 = -1;

        v22 = *(unsigned int **)(a5 + 8);
        v21 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v22 >= v21)
        {
          v24 = *(unsigned int **)a5;
          v25 = ((uint64_t)v22 - *(_QWORD *)a5) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            sub_100004C50();
          v27 = v21 - (_QWORD)v24;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)sub_10001DBC8(a5 + 16, v28);
            v24 = *(unsigned int **)a5;
            v22 = *(unsigned int **)(a5 + 8);
          }
          else
          {
            v29 = 0;
          }
          v30 = (unsigned int *)&v29[4 * v25];
          *v30 = v20;
          v23 = v30 + 1;
          while (v22 != v24)
          {
            v31 = *--v22;
            *--v30 = v31;
          }
          *(_QWORD *)a5 = v30;
          *(_QWORD *)(a5 + 8) = v23;
          *(_QWORD *)(a5 + 16) = &v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        *(_QWORD *)(a5 + 8) = v23;
        v32 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v33 = ((uint64_t)v23 - *(_QWORD *)a5) >> 2;
          *(_DWORD *)buf = 68289539;
          v41 = 0;
          v42 = 2082;
          v43 = "";
          v44 = 1025;
          v45 = v20;
          v46 = 2049;
          v47 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,value\", \"tempValue\":%{private}d, \"valueSize\":%{private}lu}", buf, 0x22u);
        }

        ++v16;
      }
      while (v16 < *a4);
    }
    else
    {
      v35 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v41 = 0;
        v42 = 2082;
        v43 = "";
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,data array empty\"}", buf, 0x12u);
      }
    }

  }
  else
  {
    v34 = SALogObjectGeneral;
    v38 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v41 = 0;
      v42 = 2082;
      v43 = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,invalid dictionary or Key\"}", buf, 0x12u);
      v38 = 0;
    }
  }

  return v38;
}

void sub_10006AA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

BOOL sub_10006AA84(uint64_t a1, void *a2, void *a3, unsigned int *a4, uint64_t *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  unsigned int v14;
  _BOOL8 v15;
  NSObject *v16;
  _BOOL4 v17;
  __int128 v18;
  unint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  NSObject *v33;
  __int128 v35;
  void *v36;
  void *v37;
  _BYTE buf[28];

  v8 = a2;
  v9 = a3;
  v36 = v9;
  v37 = v8;
  if (v8 && v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));
    if (!v10 || (v11 = v10, v12 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v10, v12) & 1) == 0))
    {
      v33 = SALogObjectGeneral;
      v15 = 0;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,invalid_keyId\"}", buf, 0x12u);
        v15 = 0;
      }
      goto LABEL_34;
    }
    v13 = v10;
    v14 = objc_msgSend(v13, "count");
    *a4 = v14;
    v15 = v14 != 0;
    v16 = SALogObjectGeneral;
    v17 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (!v17
        || (*(_DWORD *)buf = 68289283,
            *(_DWORD *)&buf[4] = 0,
            *(_WORD *)&buf[8] = 2082,
            *(_QWORD *)&buf[10] = "",
            *(_WORD *)&buf[18] = 1025,
            *(_DWORD *)&buf[20] = v14,
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,\", \"numberOfItemsInArray\":%{private}d}", buf, 0x18u), *a4))
      {
        v19 = 0;
        *(_QWORD *)&v18 = 68289283;
        v35 = v18;
        do
        {
          v20 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,channelNameArray\"}", buf, 0x12u);
          }
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndex:", v19, v35));
          if (v21 && (v22 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v21, v22) & 1) != 0))
          {
            sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v21), "UTF8String"));
            v23 = a5[1];
            if (v23 >= a5[2])
            {
              v26 = sub_100004ABC(a5, (__int128 *)buf);
            }
            else
            {
              if ((buf[23] & 0x80000000) != 0)
              {
                sub_100004870((_BYTE *)a5[1], *(void **)buf, *(unint64_t *)&buf[8]);
              }
              else
              {
                v24 = *(_OWORD *)buf;
                *(_QWORD *)(v23 + 16) = *(_QWORD *)&buf[16];
                *(_OWORD *)v23 = v24;
              }
              v26 = v23 + 24;
              a5[1] = v23 + 24;
            }
            a5[1] = v26;
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          else
          {
            v25 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v35;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2049;
              *(_QWORD *)&buf[20] = v19;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SAAssetConfig,channel\", \"i\":%{private}lu}", buf, 0x1Cu);
            }
          }

          v10 = v11;
          ++v19;
        }
        while (v19 < *a4);
      }
      v27 = SALogObjectGeneral;
      if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        goto LABEL_33;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v28;
      v29 = "{\"msg%{public}.0s\":\"#SAAssetConfig,channel\", \"size\":%{private}lu}";
      v30 = v27;
      v31 = 28;
    }
    else
    {
      if (!v17)
      {
LABEL_33:

LABEL_34:
        goto LABEL_35;
      }
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v29 = "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,data array empty\"}";
      v30 = v16;
      v31 = 18;
    }
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    goto LABEL_33;
  }
  v32 = SALogObjectGeneral;
  v15 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#SAAssetConfig,invalid dictionary or Key\"}", buf, 0x12u);
    v15 = 0;
  }
LABEL_35:

  return v15;
}

void sub_10006AF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;

  *(_QWORD *)(v23 + 8) = v21;
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10006AFC4(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  v5 = *(_QWORD *)(a1 + 152);
  for (i = *(_QWORD *)(a1 + 160); v5 != i; v5 += 280)
  {
    sub_10001D8C0((uint64_t)&v15, v5);
    if (v26 <= a4 && v28 >= a4 && v27 <= a5 && v29 >= a5)
    {
      v14 = v25;
      *a2 = v24;
      *a3 = v14;
    }
    v34 = (void **)&v33;
    sub_100004EC0(&v34);
    v34 = (void **)&v32;
    sub_100004EC0(&v34);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
  }
}

uint64_t sub_10006B0D4(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_1000B2140;
  *(_DWORD *)(a1 + 20) = 86400;
  v2 = (_QWORD *)(a1 + 24);
  sub_10000E8A0((_QWORD *)(a1 + 24), "https://safety-alert.apple.com/v1/alert/");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_10000E8A0((_QWORD *)(a1 + 72), "efficacy_manifest_v2.txt");
  sub_10000E8A0((_QWORD *)(a1 + 96), "codebook.json");
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  *(_WORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0x4024000000000000;
  *(_OWORD *)(a1 + 352) = xmmword_1000B2150;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 368) = _Q1;
  *(_OWORD *)(a1 + 384) = _Q1;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 404) = xmmword_1000ADFE0;
  *(_OWORD *)(a1 + 420) = xmmword_1000ADFF0;
  *(_DWORD *)(a1 + 436) = 0;
  *(_QWORD *)(a1 + 440) = 1;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_BYTE *)(a1 + 488) = 1;
  *(_DWORD *)(a1 + 492) = 0;
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 47) < 0)
      v2 = (_QWORD *)*v2;
    v10[0] = 68289283;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#assetDefault\", \"fPullServerName\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x1Cu);
  }
  return a1;
}

void sub_10006B2B8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[95] < 0)
    operator delete(*v3);
  if (v1[71] < 0)
    operator delete(*v4);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10006B2FC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void sub_10006B330(uint64_t a1, double *a2, uint64_t **a3)
{
  NSObject *v3;
  _QWORD *v4;
  __int128 v5;
  double v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  SAGridId *v10;
  double v11;
  double v13;
  unsigned int GlobalTileIdFromLatLonAndGridSizeInDegrees;
  uint64_t *v16;
  const std::string::value_type *v17;
  uint32_t v18;
  NSObject *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24;
  char v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  const std::string::value_type *v32;
  std::string *p_p;
  const std::string::value_type *v34;
  uint64_t *v35;
  uint32_t v36;
  NSObject *v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  void *v42;
  char v43;
  void **v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  const std::string::value_type *v50;
  std::string *v51;
  NSObject *v52;
  __int128 v53;
  uint64_t v54;
  void *v57;
  _BYTE v58[15];
  char v59;
  std::string __p;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string __dst;
  _BYTE v66[10];
  __int16 v67;
  std::string *v68;
  __int16 v69;
  int v70;
  _QWORD v71[2];
  uint8_t buf[8];
  void *v73[2];
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  void *v88;
  void *v89;
  double v90;
  _QWORD v91[3];
  double v92;
  _QWORD v93[3];

  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v73[0]) = 2082;
    *(void **)((char *)v73 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels\"}", buf, 0x12u);
  }
  v4 = sub_1000687EC();
  v62 = 0;
  v63 = 0;
  v64 = 0;
  sub_100068394(&v62, v4[19], v4[20], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v4[20] - v4[19]) >> 3));
  *(double *)&v5 = *a2;
  v6 = a2[1];
  v7 = *a2 == 0.0;
  if (v6 != 0.0)
    v7 = 0;
  if (v6 <= 180.0 && v6 >= -180.0 && *(double *)&v5 <= 90.0 && (*(double *)&v5 >= -90.0 ? (v8 = !v7) : (v8 = 0), v8))
  {
    v9 = v62;
    v54 = v63;
    if (v62 != v63)
    {
      *(_QWORD *)&v5 = 68290051;
      v53 = v5;
      do
      {
        v10 = (SAGridId *)sub_10001D8C0((uint64_t)buf, v9);
        memset(&__p, 0, sizeof(__p));
        v11 = *a2;
        if (*a2 >= v83 && v11 <= v85)
        {
          v13 = a2[1];
          if (v13 >= v84 && v13 <= v86)
          {
            GlobalTileIdFromLatLonAndGridSizeInDegrees = SAGridId::generateGlobalTileIdFromLatLonAndGridSizeInDegrees(v10, v11, v13, v87, v81, v82);
            v17 = (const std::string::value_type *)v91[0];
            v16 = (uint64_t *)v91[1];
            while (v17 != (const std::string::value_type *)v16)
            {
              sub_10000E8A0(&v57, "");
              if ((int)v90 <= 0x64 && (v18 = (int)v90, arc4random_uniform(0x64u) <= v18))
              {
                std::to_string(&__dst, GlobalTileIdFromLatLonAndGridSizeInDegrees);
                v20 = v17[23];
                if (v20 >= 0)
                  v21 = v17;
                else
                  v21 = *(const std::string::value_type **)v17;
                if (v20 >= 0)
                  v22 = *((unsigned __int8 *)v17 + 23);
                else
                  v22 = *((_QWORD *)v17 + 1);
                v23 = std::string::insert(&__dst, 0, v21, v22);
                v24 = (void *)v23->__r_.__value_.__r.__words[0];
                v71[0] = v23->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
                v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                if (v59 < 0)
                  operator delete(v57);
                v57 = v24;
                *(_QWORD *)v58 = v71[0];
                *(_QWORD *)&v58[7] = *(_QWORD *)((char *)v71 + 7);
                v59 = v25;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  v25 = v59;
                  v24 = v57;
                }
                if (v25 >= 0)
                  v26 = &v57;
                else
                  v26 = (void **)v24;
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26, v53));
                v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "dataUsingEncoding:", 4));

                if (v28)
                {
                  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "base64EncodedStringWithOptions:", 0));
                  v30 = v29;
                  if (v29)
                  {
                    sub_10000E8A0(&__dst, (char *)objc_msgSend(objc_retainAutorelease(v29), "UTF8String"));
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    __p = __dst;
                    v61 = 2;
                    v31 = SALogObjectGeneral;
                    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    {
                      v32 = v17;
                      if (v17[23] < 0)
                        v32 = *(const std::string::value_type **)v17;
                      p_p = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = v53;
                      LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2082;
                      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
                      WORD1(__dst.__r_.__value_.__r.__words[2]) = 1025;
                      HIDWORD(__dst.__r_.__value_.__r.__words[2]) = GlobalTileIdFromLatLonAndGridSizeInDegrees;
                      *(_WORD *)v66 = 2081;
                      *(_QWORD *)&v66[2] = v32;
                      v67 = 2081;
                      v68 = p_p;
                      v69 = 1025;
                      v70 = 2;
                      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,Dithering\", \"tileIdKey\":%{private}d, \"channelPrefix\":%{private, location:escape_only}s, \"channelId\":%{private, location:escape_only}s, \"channelType\":%{private}d}", (uint8_t *)&__dst, 0x32u);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      sub_100004870(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                    else
                      __dst = __p;
                    *(_DWORD *)v66 = v61;
                    sub_1000418C0(a3, (uint64_t)&__dst, (uint64_t)&__dst);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                  }

                }
              }
              else
              {
                v19 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  __dst.__r_.__value_.__r.__words[0] = 68289026;
                  LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2082;
                  *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,pp is 0\"}", (uint8_t *)&__dst, 0x12u);
                }
              }
              if (v59 < 0)
                operator delete(v57);
              v17 += 24;
            }
            v34 = (const std::string::value_type *)v93[0];
            v35 = (uint64_t *)v93[1];
            while (v34 != (const std::string::value_type *)v35)
            {
              sub_10000E8A0(&v57, "");
              if ((int)v92 <= 0x64 && (v36 = (int)v92, arc4random_uniform(0x64u) <= v36))
              {
                std::to_string(&__dst, GlobalTileIdFromLatLonAndGridSizeInDegrees);
                v38 = v34[23];
                if (v38 >= 0)
                  v39 = v34;
                else
                  v39 = *(const std::string::value_type **)v34;
                if (v38 >= 0)
                  v40 = *((unsigned __int8 *)v34 + 23);
                else
                  v40 = *((_QWORD *)v34 + 1);
                v41 = std::string::insert(&__dst, 0, v39, v40);
                v42 = (void *)v41->__r_.__value_.__r.__words[0];
                v71[0] = v41->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
                v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
                v41->__r_.__value_.__l.__size_ = 0;
                v41->__r_.__value_.__r.__words[2] = 0;
                v41->__r_.__value_.__r.__words[0] = 0;
                if (v59 < 0)
                  operator delete(v57);
                v57 = v42;
                *(_QWORD *)v58 = v71[0];
                *(_QWORD *)&v58[7] = *(_QWORD *)((char *)v71 + 7);
                v59 = v43;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  v43 = v59;
                  v42 = v57;
                }
                if (v43 >= 0)
                  v44 = &v57;
                else
                  v44 = (void **)v42;
                v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44, v53));
                v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "dataUsingEncoding:", 4));

                if (v46)
                {
                  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "base64EncodedStringWithOptions:", 0));
                  v48 = v47;
                  if (v47)
                  {
                    sub_10000E8A0(&__dst, (char *)objc_msgSend(objc_retainAutorelease(v47), "UTF8String"));
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    __p = __dst;
                    v61 = 2;
                    v49 = SALogObjectGeneral;
                    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                    {
                      v50 = v34;
                      if (v34[23] < 0)
                        v50 = *(const std::string::value_type **)v34;
                      v51 = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = v53;
                      LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2082;
                      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
                      WORD1(__dst.__r_.__value_.__r.__words[2]) = 1025;
                      HIDWORD(__dst.__r_.__value_.__r.__words[2]) = GlobalTileIdFromLatLonAndGridSizeInDegrees;
                      *(_WORD *)v66 = 2081;
                      *(_QWORD *)&v66[2] = v50;
                      v67 = 2081;
                      v68 = v51;
                      v69 = 1025;
                      v70 = 2;
                      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,Non-Dithering\", \"tileIdKey\":%{private}d, \"channelPrefix\":%{private, location:escape_only}s, \"channelId\":%{private, location:escape_only}s, \"channelType\":%{private}d}", (uint8_t *)&__dst, 0x32u);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      sub_100004870(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                    else
                      __dst = __p;
                    *(_DWORD *)v66 = v61;
                    sub_1000418C0(a3, (uint64_t)&__dst, (uint64_t)&__dst);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                  }

                }
              }
              else
              {
                v37 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  __dst.__r_.__value_.__r.__words[0] = 68289026;
                  LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2082;
                  *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,pp is 0\"}", (uint8_t *)&__dst, 0x12u);
                }
              }
              if (v59 < 0)
                operator delete(v57);
              v34 += 24;
            }
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        sub_100004EC0((void ***)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        sub_100004EC0((void ***)&__dst);
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        if (v80 < 0)
          operator delete(v79);
        if (v78 < 0)
          operator delete(v77);
        if (v76 < 0)
          operator delete(v75);
        if (v74 < 0)
          operator delete(v73[0]);
        v9 += 280;
      }
      while (v9 != v54);
    }
  }
  else
  {
    v52 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v73[0]) = 2082;
      *(void **)((char *)v73 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,invalid locationd\"}", buf, 0x12u);
    }
  }
  *(_QWORD *)buf = &v62;
  sub_1000684EC((void ***)buf);
}

void sub_10006BBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char *a50)
{
  void *v50;
  void *v51;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_10001DE04((uint64_t)&a50);
  a50 = &a34;
  sub_1000684EC((void ***)&a50);
  _Unwind_Resume(a1);
}

void sub_10006BD0C(uint64_t a1, double *a2, uint64_t **a3)
{
  NSObject *v4;
  _QWORD *v5;
  __int128 v6;
  double v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  SAGridId *v12;
  std::string::size_type v13;
  double v14;
  double v16;
  unsigned int GlobalTileIdFromLatLonAndGridSizeInDegrees;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  void *v22;
  char v23;
  void **p_p;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  std::string *v31;
  NSObject *v32;
  __int128 v33;
  void *__p;
  _BYTE v36[15];
  char v37;
  std::string v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __dst;
  _BYTE v44[10];
  __int16 v45;
  std::string *v46;
  __int16 v47;
  int v48;
  _QWORD v49[2];
  uint8_t buf[8];
  void *v51[2];
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  std::string::size_type v58;
  unsigned __int8 v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v51[0]) = 2082;
    *(void **)((char *)v51 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateIgneousLivabilityChannels\"}", buf, 0x12u);
  }
  v5 = sub_1000687EC();
  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_100068394(&v40, v5[19], v5[20], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v5[20] - v5[19]) >> 3));
  *(double *)&v6 = *a2;
  v7 = a2[1];
  v8 = *a2 == 0.0;
  if (v7 != 0.0)
    v8 = 0;
  if (v7 <= 180.0 && v7 >= -180.0 && *(double *)&v6 <= 90.0 && (*(double *)&v6 >= -90.0 ? (v9 = !v8) : (v9 = 0), v9))
  {
    v10 = v40;
    v11 = v41;
    if (v40 != v41)
    {
      *(_QWORD *)&v6 = 68290051;
      v33 = v6;
      do
      {
        v12 = (SAGridId *)sub_10001D8C0((uint64_t)buf, v10);
        memset(&v38, 0, sizeof(v38));
        v13 = v59;
        if ((v59 & 0x80u) != 0)
          v13 = v58;
        if (v13)
        {
          v14 = *a2;
          if (*a2 >= v62 && v14 <= v64)
          {
            v16 = a2[1];
            if (v16 >= v63 && v16 <= v65)
            {
              GlobalTileIdFromLatLonAndGridSizeInDegrees = SAGridId::generateGlobalTileIdFromLatLonAndGridSizeInDegrees(v12, v14, v16, v66, v60, v61);
              sub_10000E8A0(&__p, "");
              std::to_string(&__dst, GlobalTileIdFromLatLonAndGridSizeInDegrees);
              if ((v59 & 0x80u) == 0)
                v19 = (const std::string::value_type *)&v57;
              else
                v19 = (const std::string::value_type *)v57;
              if ((v59 & 0x80u) == 0)
                v20 = v59;
              else
                v20 = v58;
              v21 = std::string::insert(&__dst, 0, v19, v20);
              v22 = (void *)v21->__r_.__value_.__r.__words[0];
              v49[0] = v21->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
              v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
              v21->__r_.__value_.__l.__size_ = 0;
              v21->__r_.__value_.__r.__words[2] = 0;
              v21->__r_.__value_.__r.__words[0] = 0;
              if (v37 < 0)
                operator delete(__p);
              __p = v22;
              *(_QWORD *)v36 = v49[0];
              *(_QWORD *)&v36[7] = *(_QWORD *)((char *)v49 + 7);
              v37 = v23;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst.__r_.__value_.__l.__data_);
                v23 = v37;
                v22 = __p;
              }
              if (v23 >= 0)
                p_p = &__p;
              else
                p_p = (void **)v22;
              v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p, v33));
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "dataUsingEncoding:", 4));

              if (v26)
              {
                v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "base64EncodedStringWithOptions:", 0));
                v28 = v27;
                if (v27)
                {
                  sub_10000E8A0(&__dst, (char *)objc_msgSend(objc_retainAutorelease(v27), "UTF8String"));
                  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v38.__r_.__value_.__l.__data_);
                  v38 = __dst;
                  v39 = 2;
                  v29 = SALogObjectGeneral;
                  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  {
                    v30 = &v57;
                    if ((v59 & 0x80u) != 0)
                      v30 = v57;
                    v31 = &v38;
                    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
                    __dst.__r_.__value_.__r.__words[0] = v33;
                    LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2082;
                    *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
                    WORD1(__dst.__r_.__value_.__r.__words[2]) = 1025;
                    HIDWORD(__dst.__r_.__value_.__r.__words[2]) = GlobalTileIdFromLatLonAndGridSizeInDegrees;
                    *(_WORD *)v44 = 2081;
                    *(_QWORD *)&v44[2] = v30;
                    v45 = 2081;
                    v46 = v31;
                    v47 = 1025;
                    v48 = 2;
                    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,updateIgneousLivabilityChannels,livabilityChannel\", \"tileIdKey\":%{private}d, \"channelPrefix\":%{private, location:escape_only}s, \"channelId\":%{private, location:escape_only}s, \"channelType\":%{private}d}", (uint8_t *)&__dst, 0x32u);
                  }
                  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                    sub_100004870(&__dst, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
                  else
                    __dst = v38;
                  *(_DWORD *)v44 = v39;
                  sub_1000418C0(a3, (uint64_t)&__dst, (uint64_t)&__dst);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__dst.__r_.__value_.__l.__data_);
                }

              }
              if (v37 < 0)
                operator delete(__p);
              if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v38.__r_.__value_.__l.__data_);
            }
          }
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        sub_100004EC0((void ***)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
        sub_100004EC0((void ***)&__dst);
        if (v67)
        {
          v68 = v67;
          operator delete(v67);
        }
        if ((char)v59 < 0)
          operator delete(v57);
        if (v56 < 0)
          operator delete(v55);
        if (v54 < 0)
          operator delete(v53);
        if (v52 < 0)
          operator delete(v51[0]);
        v10 += 280;
      }
      while (v10 != v11);
    }
  }
  else
  {
    v32 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v51[0]) = 2082;
      *(void **)((char *)v51 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,getChannels,invalid locationd\"}", buf, 0x12u);
    }
  }
  *(_QWORD *)buf = &v40;
  sub_1000684EC((void ***)buf);
}

void sub_10006C270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44)
{
  void *v44;
  void *v45;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  sub_10001DE04((uint64_t)&a44);
  a44 = &a28;
  sub_1000684EC((void ***)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C32C(uint64_t a1, double *a2)
{
  NSObject *v3;
  _QWORD *v4;
  double v5;
  double v6;
  _BOOL4 v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint8_t buf[8];
  void *v22[2];
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *__p;
  void *v35;
  _BYTE v36[32];
  _BYTE v37[24];

  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v22[0]) = 2082;
    *(void **)((char *)v22 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,isLocationWithinIgneousCoveredRegion\"}", buf, 0x12u);
  }
  v4 = sub_1000687EC();
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_100068394(&v17, v4[19], v4[20], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v4[20] - v4[19]) >> 3));
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2 == 0.0;
  if (v6 != 0.0)
    v7 = 0;
  if (v6 <= 180.0 && v6 >= -180.0 && v5 <= 90.0 && v5 >= -90.0 && !v7)
  {
    v9 = v17;
    v10 = v18;
    if (v17 != v18)
    {
      while (1)
      {
        sub_10001D8C0((uint64_t)buf, v9);
        v11 = *a2 < v30 || *a2 > v32;
        if (v11 || (v12 = a2[1], v12 < v31))
        {
          v20 = (void **)v37;
          sub_100004EC0(&v20);
          v20 = (void **)v36;
          sub_100004EC0(&v20);
          if (__p)
          {
            v35 = __p;
            operator delete(__p);
          }
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v26);
          if (v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v22[0]);
        }
        else
        {
          v13 = v33;
          v20 = (void **)v37;
          sub_100004EC0(&v20);
          v20 = (void **)v36;
          sub_100004EC0(&v20);
          if (__p)
          {
            v35 = __p;
            operator delete(__p);
          }
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v26);
          if (v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v22[0]);
          if (v12 <= v13)
          {
            v15 = 1;
            goto LABEL_45;
          }
        }
        v9 += 280;
        if (v9 == v10)
          goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  v14 = SALogObjectGeneral;
  v15 = 0;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v22[0]) = 2082;
    *(void **)((char *)v22 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#chsel,isLocationWithinIgneousCoveredRegion,invalid locationd\"}", buf, 0x12u);
LABEL_44:
    v15 = 0;
  }
LABEL_45:
  *(_QWORD *)buf = &v17;
  sub_1000684EC((void ***)buf);
  return v15;
}

void sub_10006C640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10006C664(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;

  *a1 = *a3;
  v5 = a3[1];
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[2] = *a4;
  v8 = a4[1];
  a1[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 68289026;
    v13[1] = 0;
    v14 = 2082;
    v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,SAAlertDisplay\"}", (uint8_t *)v13, 0x12u);
  }
  return a1;
}

uint64_t sub_10006C76C(_QWORD *a1, uint64_t a2)
{
  if (*(_BYTE *)a2)
  {
    if (*(_WORD *)(a2 + 340) == 3)
      return sub_10006C798(a1, a2);
  }
  else if ((*(_DWORD *)(a2 + 204) - 1) <= 2)
  {
    return sub_10006C798(a1, a2);
  }
  return sub_10006CC88((SAPlatformInfo *)a1, a2);
}

uint64_t sub_10006C798(_QWORD *a1, uint64_t a2)
{
  int v2;
  void *v9;
  NSObject *v10;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;

  if (*a1)
  {
    v2 = sub_10006D2F8(a2);
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    memset(v12, 0, sizeof(v12));
    __asm { FMOV            V0.2D, #10.0 }
    v22 = _Q0;
    __asm { FMOV            V0.2D, #-1.0 }
    v23 = _Q0;
    v24 = _Q0;
    v21 = 0;
    v25 = 0xBFF0000000000000;
    v9 = sub_1000687EC();
    sub_10002AEE8((uint64_t)v9, (std::string *)v12);
    __asm { BR              X10 }
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v12 = 68289026;
    *(_DWORD *)&v12[4] = 0;
    *(_WORD *)&v12[8] = 2082;
    *(_QWORD *)&v12[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,displayProdBleAlert,invalid telephony\"}", v12, 0x12u);
  }
  return 0;
}

void sub_10006CC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  sub_100032A34((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CC88(SAPlatformInfo *a1, uint64_t a2)
{
  int v3;
  void *v10;
  NSObject *v11;
  const char *v12;
  _BYTE buf[32];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;

  if (*(_QWORD *)a1)
  {
    if (*((_BYTE *)SAPlatformInfo::instance(a1) + 9))
    {
      v3 = sub_10006D2F8(a2);
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      memset(buf, 0, sizeof(buf));
      __asm { FMOV            V0.2D, #10.0 }
      v24 = _Q0;
      __asm { FMOV            V0.2D, #-1.0 }
      v25 = _Q0;
      v26 = _Q0;
      v27 = 0xBFF0000000000000;
      v10 = sub_1000687EC();
      sub_10002AEE8((uint64_t)v10, (std::string *)buf);
      __asm { BR              X10 }
    }
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v12 = "{\"msg%{public}.0s\":\"#alertdisplay,displayTestBleAlert,not internal install\"}";
      goto LABEL_8;
    }
  }
  else
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v12 = "{\"msg%{public}.0s\":\"#alertdisplay,displayTestBleAlert,invalid telephony\"}";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0x12u);
    }
  }
  return 0;
}

void sub_10006D288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  sub_100032A34((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D2F8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  NSObject *v8;
  uint64_t result;
  NSObject *v10;
  _BOOL4 v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 332);
    v4 = *(unsigned __int16 *)(a1 + 340);
    v15 = 68289539;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 1025;
    v20 = v3;
    v21 = 1025;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation\", \"bleMsgTypes\":%{private}d, \"bleSenderType\":%{private}d}", (uint8_t *)&v15, 0x1Eu);
  }
  v5 = *(_DWORD *)(a1 + 332);
  v6 = *(unsigned __int16 *)(a1 + 340);
  if ((v5 - 1) <= 1 && v6 == 3)
  {
    v10 = SALogObjectGeneral;
    v11 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v11)
    {
      v15 = 68289026;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation isLiveAppleAlert or isLiveAppleUpdateAlert\"}", (uint8_t *)&v15, 0x12u);
      return 0;
    }
  }
  else if (v5 || v6 != 3)
  {
    if (v5 == 1 && v6 == 61403)
    {
      v12 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 68289026;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation isLivabilityAlert\"}", (uint8_t *)&v15, 0x12u);
      }
      return 3;
    }
    else if (v5 == 1 && v6 == 61404)
    {
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 68289026;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation isInternalTestAlert\"}", (uint8_t *)&v15, 0x12u);
      }
      return 4;
    }
    else
    {
      result = 7;
      if (v5 == 1 && v6 >= 0xEFDE)
      {
        v14 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 68289026;
          v16 = 0;
          v17 = 2082;
          v18 = "";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation isQEOrDevTest\"}", (uint8_t *)&v15, 0x12u);
        }
        return 5;
      }
    }
  }
  else
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 68289026;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#alertdisplay,parseAlertInformation isLiveAppleTestAlert\"}", (uint8_t *)&v15, 0x12u);
    }
    return 2;
  }
  return result;
}

void sub_10006D79C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006D7B8(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];

  v3 = a2;
  *a1 = off_1000F4908;
  v4 = v3;
  a1[1] = v4;
  a1[2] = 0;
  v5[0] = off_1000F4948;
  v5[1] = a1;
  v5[3] = v5;
  sub_10006DCE8((uint64_t)(a1 + 3), v4, 30.0);
}

void sub_10006D8A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  sub_10006DDD8(v4);

  _Unwind_Resume(a1);
}

uint64_t sub_10006D90C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1000F4908;
  sub_10006DDD8(a1 + 24);

  return a1;
}

void sub_10006D950(uint64_t a1)
{
  sub_10006D90C(a1);
  operator delete();
}

void sub_10006D974(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  double v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#wow,assertWoW,scheduled\", \"state\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  LOBYTE(v7[0]) = 0;
  if (!a2 || (v5 = *((_DWORD *)sub_1000687EC() + 2), LOBYTE(v7[0]) = v5 != 0, v6 = -1.0, !v5))
    v6 = 0.0;
  sub_10006DA74((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)v7, v6);
}

void sub_10006DA74(unsigned __int8 *a1, unsigned __int8 *a2, double a3)
{
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  _QWORD block[5];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  double v16;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saHysteresis,setValue\", \"delay\":\"%{public}0.2f\"}", buf, 0x1Cu);
  }
  if (a3 < 0.0)
    a3 = *((double *)a1 + 1);
  if (a3 == 0.0)
  {
    v7 = *a2;
    if (a1[64] || !a1[1] || *a1 != v7)
    {
      *(_WORD *)a1 = v7 | 0x100;
      a1[64] = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)a1 + 3) + 40))(*((_QWORD *)a1 + 3));
      v8 = *((_QWORD *)a1 + 2);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006DE48;
      block[3] = &unk_1000F1EB8;
      block[4] = a1;
      dispatch_async(v8, block);
    }
  }
  else
  {
    v9 = *a2;
    if (!a1[1] || *a1 != v9)
    {
      *(_WORD *)a1 = v9 | 0x100;
      a1[64] = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)a1 + 3) + 40))(*((_QWORD *)a1 + 3));
      sub_10006DF84((uint64_t)a1);
    }
  }
}

void sub_10006DC24()
{
  operator delete();
}

_QWORD *sub_10006DC38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4948;
  result[1] = v3;
  return result;
}

uint64_t sub_10006DC6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4948;
  a2[1] = v2;
  return result;
}

id sub_10006DC88(uint64_t a1, unsigned __int8 *a2)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return objc_msgSend(result, "assertWoW:", *a2);
  return result;
}

uint64_t sub_10006DCA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10006DCDC()
{
}

void sub_10006DCE8(uint64_t a1, void *a2, double a3)
{
  id v5;
  id v6;
  void *__p;

  v5 = a2;
  *(_DWORD *)a1 = 0;
  *(double *)(a1 + 8) = a3;
  v6 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  sub_10000E8A0(&__p, "com.apple.safetyalerts.hysteresisTimer");
  SATimer::create(v6);
}

void sub_10006DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v19;

  v19 = *v17;
  *v17 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);

  _Unwind_Resume(a1);
}

uint64_t sub_10006DDD8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  return a1;
}

void sub_10006DE48(uint64_t a1)
{
  unsigned __int8 *v1;
  void *v2;

  v1 = *(unsigned __int8 **)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  sub_10006DE78(v1);
  objc_autoreleasePoolPop(v2);
}

void sub_10006DE78(unsigned __int8 *a1)
{
  NSObject *v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saHysteresis,onHysteresisTimerExpired\"}", (uint8_t *)v8, 0x12u);
  }
  v3 = a1[3];
  if (a1[1])
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v6 = v3 != 0;
    v5 = a1[1] != 0;
  }
  else
  {
    v5 = *a1;
    v6 = a1[2];
  }
  if (v5 != v6)
  {
    *((_WORD *)a1 + 1) = *(_WORD *)a1;
    v7 = *((_QWORD *)a1 + 7);
    if (v7)
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v7 + 48))(v7, a1 + 2);
  }
}

_QWORD *sub_10006DF84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 24);
  v4[0] = off_1000F49D8;
  v4[1] = a1;
  v5 = v4;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10006E028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10006E068()
{
  operator delete();
}

_QWORD *sub_10006E07C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F49D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10006E0B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F49D8;
  a2[1] = v2;
  return result;
}

void sub_10006E0CC(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v1[64] = 0;
  sub_10006DE78(v1);
}

uint64_t sub_10006E0D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10006E114()
{
}

uint64_t sub_10006E120(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *(_QWORD *)a1 = v5;
  sub_100004F4C(a1 + 8, a3);
  *(_BYTE *)(a1 + 40) = 0;

  return a1;
}

void sub_10006E170(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10006E188(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10006E1E0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3 = *(_QWORD *)(v1 + 32);
  if (!v3)
    sub_100004FB0();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  objc_autoreleasePoolPop(v2);
}

void sub_10006E220(uint64_t a1)
{
  NSObject *v1;
  xpc_object_t v3;
  void *v10;
  SAPlatformInfo *v11;
  unsigned int v12;
  __int128 v13;
  double v14;
  int64_t v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD handler[5];
  uint8_t v19[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  _BYTE buf[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 __p;
  _BYTE v34[32];
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;

  if (*(_BYTE *)(a1 + 40))
  {
    v1 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xpcsel,#warning,activityAlreadyScheduled\"}", buf, 0x12u);
    }
  }
  else
  {
    v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      v35 = 0u;
      __p = 0u;
      memset(v34, 0, sizeof(v34));
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      v29 = 0u;
      memset(buf, 0, sizeof(buf));
      __asm { FMOV            V0.2D, #10.0 }
      v37 = _Q0;
      __asm { FMOV            V0.2D, #-1.0 }
      v38 = _Q0;
      v39 = _Q0;
      v36 = 0;
      v40 = 0xBFF0000000000000;
      v10 = sub_1000687EC();
      sub_10002AEE8((uint64_t)v10, (std::string *)buf);
      v12 = objc_msgSend(*(id *)SAPlatformInfo::instance(v11), "isEqualToString:", CFSTR("Watch"));
      v13 = v38;
      if (v12)
        v14 = *(double *)&v38;
      else
        v14 = *((double *)&v38 + 1);
      if (v14 <= 0.0)
        v14 = 30.0;
      v15 = (uint64_t)v14;
      v16 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v19 = 68289794;
        *(_DWORD *)&v19[4] = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2050;
        v23 = (double)v15;
        v24 = 2050;
        v25 = v13;
        v26 = 2050;
        v27 = *((_QWORD *)&v13 + 1);
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xpcsel,scheduleXPCActivity,\", \"delayPeriod\":\"%{public}0.3f\", \"watchHysteresis\":\"%{public}0.3f\", \"phoneHysteresis\":\"%{public}0.3f\"}", v19, 0x30u);
      }
      xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
      xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, v15);
      xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10006E5C4;
      handler[3] = &unk_1000F1DE8;
      handler[4] = a1;
      xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.icu"), "UTF8String"), v3, handler);
      *(_BYTE *)(a1 + 40) = 1;
      *(_QWORD *)v19 = &v35;
      sub_100004EC0((void ***)v19);
      *(_QWORD *)v19 = &v34[8];
      sub_100004EC0((void ***)v19);
      if ((v34[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      if (SHIBYTE(v32) < 0)
        operator delete(*((void **)&v31 + 1));
      if (SBYTE7(v31) < 0)
        operator delete((void *)v30);
      if (SHIBYTE(v29) < 0)
        operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    else
    {
      v17 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xpcsel,#warning,scheduleXPCActivity error\"}", buf, 0x12u);
      }
    }

  }
}

void sub_10006E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  sub_100032A34((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10006E5C4(uint64_t a1, void *a2)
{
  uint64_t v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint8_t buf[8];
  _BYTE v15[24];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    v9 = "{\"msg%{public}.0s\":\"#xpcsel,#warning,process_xpcActivity,activity is nil\"}";
LABEL_15:
    v10 = buf;
    goto LABEL_16;
  }
  state = xpc_activity_get_state(v3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    *(_WORD *)&v15[10] = 2050;
    *(_QWORD *)&v15[12] = state;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xpcsel,runXPCActivity Scheduled\", \"state\":%{public}llu}", buf, 0x1Cu);
  }
  if (!state)
    goto LABEL_17;
  if (state != 2)
  {
    v8 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    v9 = "{\"msg%{public}.0s\":\"#xpcsel,#warning,runXPCActivity,invalidActicity\"}";
    goto LABEL_15;
  }
  if (*(_QWORD *)(v2 + 32))
  {
    v7 = *(NSObject **)v2;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v15 = 3221225472;
    *(_QWORD *)&v15[8] = sub_10006E1E0;
    *(_QWORD *)&v15[16] = &unk_1000F1EB8;
    v16 = v2;
    dispatch_async(v7, buf);
  }
  if (!xpc_activity_set_state(v4, 5))
  {
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 68289026;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v9 = "{\"msg%{public}.0s\":\"#xpcsel,#warning,runXPCActivity,setState fail\"}";
      v10 = (uint8_t *)v11;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 0x12u);
    }
  }
LABEL_17:

}

void sub_10006E810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006E828(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    xpc_activity_unregister((const char *)objc_msgSend(CFSTR("com.apple.safetyalerts.icu"), "UTF8String"));
    *(_BYTE *)(a1 + 40) = 0;
  }
}

void sub_10006E860(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint8_t buf[8];
  __int16 v7;
  const char *v8;

  v3 = a2;
  *(_OWORD *)a1 = xmmword_1000B2320;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  sub_10000E8A0((_QWORD *)(a1 + 128), "Unknown");
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,init\"}", buf, 0x12u);
  }
  *(double *)(a1 + 24) = (double)*((int *)sub_10003D044() + 78);
  sub_100063CD0(*(void **)(a1 + 40));
}

void sub_10006F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a29 == v35)
  {
    v38 = 4;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v38 = 5;
    v35 = a29;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v38))(v35);
LABEL_6:
  v39 = a25;
  if (a25 == &a22)
  {
    v40 = 4;
    v39 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_11:
  if (a16 < 0)
    operator delete(__p);
  sub_10005935C(&a34);
  v41 = *(_QWORD *)(v36 + 160);
  *(_QWORD *)(v36 + 160) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *v34;
  *v34 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (*(char *)(v36 + 151) < 0)
    operator delete(*a9);
  sub_10005BDFC(*(_QWORD **)(v36 + 112));

  _Unwind_Resume(a1);
}

uint64_t sub_10006F510(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,released\"}", (uint8_t *)&v11, 0x12u);
    v2 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,unregisterForLinkQualityNotifications\"}", (uint8_t *)&v11, 0x12u);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v3, "stopMonitoringEventType:", 7);
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v4, "invalidate");
      v5 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

    }
  }
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;

  v8 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_10005BDFC(*(_QWORD **)(a1 + 112));

  return a1;
}

void sub_10006F6D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100004860(a1);
  _Unwind_Resume(a1);
}

void sub_10006F6E4(uint64_t a1)
{
  NSObject *v2;
  char v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289026;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onInitCompleted\"}", (uint8_t *)v12, 0x12u);
  }
  *(_BYTE *)(a1 + 168) = 1;
  v3 = *(_BYTE *)(a1 + 61);
  if (v3)
  {
    v3 = *(_BYTE *)(a1 + 60) != 0;
    v4 = *(_QWORD **)(a1 + 160);
    v5 = v4 == 0;
    if (v4 && *(_BYTE *)(a1 + 60))
    {
      v6 = 6;
LABEL_11:
      (*(void (**)(void))(*v4 + 8 * v6))();
      goto LABEL_12;
    }
  }
  else
  {
    v4 = *(_QWORD **)(a1 + 160);
    v5 = v4 == 0;
  }
  if (!v5 && (v3 & 1) == 0)
  {
    v6 = 5;
    goto LABEL_11;
  }
LABEL_12:
  v7 = *(_QWORD *)(a1 + 112);
  if (v7)
  {
    v8 = a1 + 112;
    do
    {
      v9 = *(_DWORD *)(v7 + 28);
      v10 = v9 < 2;
      if (v9 >= 2)
        v11 = (uint64_t *)v7;
      else
        v11 = (uint64_t *)(v7 + 8);
      if (!v10)
        v8 = v7;
      v7 = *v11;
    }
    while (*v11);
    if (v8 != a1 + 112 && *(int *)(v8 + 28) <= 2)
    {
      sub_100072298((uint64_t **)(a1 + 104), 2);
      sub_10006F848(a1);
    }
  }
}

void sub_10006F848(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  NSObject *v11;
  SACommonUtils *v12;
  int v13;
  uint64_t v14;
  _QWORD v15[5];
  int v16;
  uint8_t buf[8];
  _BYTE v18[24];
  uint64_t v19;
  int v20;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 2082;
    *(_QWORD *)&v18[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,submitMetrics\"}", buf, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    v4 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v18 = 2082;
    *(_QWORD *)&v18[2] = "";
    *(_WORD *)&v18[10] = 2049;
    *(_QWORD *)&v18[12] = v3;
    v5 = "{\"msg%{public}.0s\":\"#bm,submitMetrics,fetch in progress\", \"count\":%{private}lu}";
    v6 = v4;
    v7 = 28;
    goto LABEL_6;
  }
  v8 = SALogObjectGeneral;
  v9 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v9
    && (*(_DWORD *)buf = 68289026,
        *(_DWORD *)&buf[4] = 0,
        *(_WORD *)v18 = 2082,
        *(_QWORD *)&v18[2] = "",
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,submitAdvertisorStatusMetrics\"}", buf, 0x12u), (v10 = *(_QWORD *)(a1 + 120)) != 0))
  {
    v11 = SALogObjectGeneral;
    v12 = (SACommonUtils *)os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      *(_WORD *)&v18[10] = 2049;
      *(_QWORD *)&v18[12] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,submitAdvertisorStatusMetrics,fetch in progress\", \"count\":%{private}lu}", buf, 0x1Cu);
    }
  }
  else
  {
    v13 = SACommonUtils::currentHourOfDay((SACommonUtils *)v9);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v18 = 3221225472;
    *(_QWORD *)&v18[8] = sub_1000711E8;
    *(_QWORD *)&v18[16] = &unk_1000F2F58;
    v19 = a1;
    v20 = v13;
    v12 = (SACommonUtils *)AnalyticsSendEventLazy(CFSTR("com.apple.safetyAlerts.bleRelayStatus"), buf);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10007082C;
    v15[3] = &unk_1000F2F58;
    v15[4] = a1;
    v16 = SACommonUtils::currentHourOfDay(v12);
    AnalyticsSendEventLazy(CFSTR("com.apple.safetyAlerts.relaySelectionCriteria"), v15);
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    v14 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v5 = "{\"msg%{public}.0s\":\"#bm,submitMetrics,not Submitting\"}";
      v6 = v14;
      v7 = 18;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
}

void sub_10006FB3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  double v7;
  double v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_autoreleasePoolPush();
  if (objc_msgSend(*(id *)(a1 + 32), "type") == (id)7)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "info"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CWFEventLinkQualityMetricKey));

    v6 = objc_msgSend(v5, "CCA");
    if (!*(_BYTE *)(v2 + 92))
      *(_BYTE *)(v2 + 92) = 1;
    *(_DWORD *)(v2 + 88) = v6;
    objc_msgSend(v5, "rxRate");
    if (v7 != 0.0)
    {
      objc_msgSend(v5, "rxRate");
      if (!*(_BYTE *)(v2 + 100))
        *(_BYTE *)(v2 + 100) = 1;
      *(_DWORD *)(v2 + 96) = (int)v8;
    }

  }
  else
  {
    v9 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289026;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,setupMonitoringEvent,unexpected type\"}", (uint8_t *)v10, 0x12u);
    }
  }
  objc_autoreleasePoolPop(v3);
}

void sub_10006FC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006FCC8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onCellNetworkConnectionChange\", \"isConnected\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 56) = a2 | 0x100;
}

_QWORD *sub_10006FD9C(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *result;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289283;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1025;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onEnhancedDeliveryStateChanged\", \"isEnhancedDeliveryEnabled\":%{private}hhd}", (uint8_t *)v7, 0x18u);
  }
  *(_WORD *)(a1 + 60) = a2 | 0x100;
  result = *(_QWORD **)(a1 + 160);
  if (result)
  {
    if (*(_BYTE *)(a1 + 168) && (a2 & 1) != 0)
    {
      v6 = 6;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
    }
    if (*(_BYTE *)(a1 + 168) && (a2 & 1) == 0)
    {
      v6 = 5;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
    }
  }
  return result;
}

void sub_10006FEA4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onInexpensiveNetworkConnectionChange\", \"isConnected\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 66) = a2 | 0x100;
}

void sub_10006FF78(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onIsInCoveredAreaStateChange\", \"isInCoveredArea\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 58) = a2 | 0x100;
}

void sub_10007004C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;

  v2 = a1 + 112;
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
  {
    v4 = (uint64_t **)(a1 + 104);
    v5 = v2;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(_DWORD *)(v5 + 28) <= a2)
      sub_100072298(v4, a2);
  }
}

void sub_100070098(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onSubscriptionStateChange\", \"isSubscribed\":%{private}hhd}", (uint8_t *)v5, 0x18u);
  }
  *(_WORD *)(a1 + 62) = a2 | 0x100;
}

void sub_10007016C(uint64_t a1, void *a2)
{
  uint64_t v2;
  _xpc_activity_s *v3;
  _xpc_activity_s *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  uint8_t buf[8];
  __int128 v19;
  void *v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#bm,processXpcActivity,activity is nil\"}";
    goto LABEL_17;
  }
  state = xpc_activity_get_state(v3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,processXpcActivity\"}", buf, 0x12u);
  }
  if (state == 2)
  {
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v19) = 2082;
      *(_QWORD *)((char *)&v19 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,processXpcActivity,run\"}", buf, 0x12u);
    }
    v14 = *(NSObject **)(v2 + 40);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v19 = 3221225472;
    *((_QWORD *)&v19 + 1) = sub_100070470;
    v20 = &unk_1000F1EB8;
    v21 = v2;
    dispatch_async(v14, buf);
    if (xpc_activity_set_state(v4, 5))
      goto LABEL_20;
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v15[0] = 68289026;
    v15[1] = 0;
    v16 = 2082;
    v17 = "";
    v8 = "{\"msg%{public}.0s\":\"#bm,processXpcActivity,failed to set state\"}";
    v9 = (uint8_t *)v15;
LABEL_18:
    v10 = v12;
    v11 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }
  if (state)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#bm,processXpcActivity,unexpected xpcActivity\"}";
LABEL_17:
    v9 = buf;
    goto LABEL_18;
  }
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v19) = 2082;
    *(_QWORD *)((char *)&v19 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#bm,processXpcActivity,checkin\"}";
    v9 = buf;
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v8, v9, 0x12u);
  }
LABEL_20:

}

void sub_100070458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100070470(uint64_t a1)
{
  uint64_t v1;
  SACommonUtils *v2;
  int v3;
  uint32_t *v4;
  uint32_t v5;
  BOOL v6;
  NSObject *v7;
  time_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (SACommonUtils *)objc_autoreleasePoolPush();
  v3 = SACommonUtils::currentHourOfDay(v2);
  *(_BYTE *)(v1 + 16) = 0;
  if (v3 >= *(_DWORD *)v1 && v3 <= *(_DWORD *)(v1 + 4))
  {
    v4 = (uint32_t *)((char *)sub_10003D044() + 316);
  }
  else
  {
    if (v3 < *(_DWORD *)(v1 + 8) || v3 > *(_DWORD *)(v1 + 12))
      goto LABEL_11;
    v4 = (uint32_t *)((char *)sub_10003D044() + 320);
  }
  if (*v4 <= 0x64)
  {
    v5 = *v4;
    v6 = arc4random_uniform(0x64u) <= v5;
  }
  else
  {
    v6 = 0;
  }
  *(_BYTE *)(v1 + 16) = v6;
LABEL_11:
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 68289026;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onXpcActivityTriggered\"}", (uint8_t *)&v14, 0x12u);
  }
  v8 = time(0);
  if (!*(_BYTE *)(v1 + 168))
    sub_10005BED4((uint64_t *)(v1 + 104), 2, 2);
  v9 = *(_QWORD *)(v1 + 160);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    sub_10005BED4((uint64_t *)(v1 + 104), 0, 0);
  }
  if (*(_QWORD *)(v1 + 152))
  {
    sub_10005BED4((uint64_t *)(v1 + 104), 1, 1);
    v10 = (uint64_t)((double)(uint64_t)(double)v8 + -978307200.0);
    v11 = *(_QWORD *)(v1 + 152);
    v14 = (uint64_t)_NSConcreteStackBlock;
    *(_QWORD *)&v15 = 3221225472;
    *((_QWORD *)&v15 + 1) = sub_100070714;
    v16 = &unk_1000F4A48;
    v17 = v1;
    v18 = v10;
    v19[0] = off_1000F0E88;
    v19[1] = objc_retainBlock(&v14);
    v20 = v19;
    (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v11 + 24))(v11, v19, 0.0);
    v12 = v20;
    if (v20 == v19)
    {
      v13 = 4;
      v12 = v19;
      goto LABEL_22;
    }
    if (v20)
    {
      v13 = 5;
LABEL_22:
      (*(void (**)(void))(*v12 + 8 * v13))();
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000706D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100070714(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  _BYTE v5[24];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v5 = 68289026;
    *(_WORD *)&v5[8] = 2082;
    *(_QWORD *)&v5[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,biome done\"}", v5, 0x12u);
  }
  sub_10007004C(v2, 1);
  (*(void (**)(_BYTE *__return_ptr, double))(**(_QWORD **)(v2 + 152) + 144))(v5, (double)*(uint64_t *)(a1 + 40));
  v4 = (void **)(v2 + 128);
  if (*(char *)(v2 + 151) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_QWORD *)(v2 + 144) = *(_QWORD *)&v5[16];
  sub_10006F848(v2);
}

NSMutableDictionary *sub_10007082C(uint64_t a1)
{
  uint64_t v2;
  NSMutableDictionary *v3;
  void *v4;
  NSNumber *v5;
  void *v6;
  SASettings *v7;
  uint64_t v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSNumber *v18;
  void *v19;
  void *v20;
  void *v21;
  NSNumber *v22;
  void *v23;
  NSNumber *v24;
  void *v25;
  NSNumber *v26;
  void *v27;
  NSNumber *v28;
  void *v29;
  NSNumber *v30;
  void *v31;
  NSNumber *v32;
  void *v33;
  NSNumber *v34;
  void *v35;
  NSNumber *v36;
  void *v37;
  NSNumber *v38;
  void *v39;
  NSNumber *v40;
  void *v41;
  NSNumber *v42;
  void *v43;
  _QWORD *v44;
  void *v45;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_new(NSMutableDictionary);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v4, CFSTR("timeofSample"));

  v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_100003038() + 16));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v6, CFSTR("batteryChargeLevel"));

  v8 = SASettings::instance(v7);
  v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v10, CFSTR("isBleOn"));

  if (*(_BYTE *)(v2 + 61))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 60)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v11, CFSTR("isEnhancedDeliveryEnabled"));

  }
  if (*(_BYTE *)(v2 + 59))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 58)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v12, CFSTR("deviceInCoveredRegion"));

  }
  if (*(_BYTE *)(v2 + 63))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 62)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v13, CFSTR("isSubscribedtoESA"));

  }
  if (*(_BYTE *)(v2 + 57))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 56)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v14, CFSTR("isCellularDataReachable"));

  }
  if (*(_BYTE *)(v2 + 65))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 64)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v15, CFSTR("isType22ScanActive"));

  }
  if (*(_BYTE *)(v2 + 67))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 66)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v16, CFSTR("isWifiDataReachable"));

  }
  if (*(_BYTE *)(v2 + 80))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 72)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v17, CFSTR("meanNumNearbyDevices"));

  }
  if (*(_BYTE *)(v2 + 92) && *(_BYTE *)(v2 + 67) && *(_BYTE *)(v2 + 66))
  {
    v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070F00(*(_DWORD *)(v2 + 88)));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v19, CFSTR("wifiCCA"));

  }
  if (*(_BYTE *)(v2 + 100) && *(_BYTE *)(v2 + 67) && *(_BYTE *)(v2 + 66))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 96)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v20, CFSTR("wifiRxPhyRate"));

  }
  v21 = *(void **)(v2 + 48);
  if (v21 && objc_msgSend(v21, "count"))
  {
    v22 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -65.0, 200.0));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v23, CFSTR("numDevicesRSSIRange01"));

    v24 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -71.0, -66.0));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v25, CFSTR("numDevicesRSSIRange02"));

    v26 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -75.0, -72.0));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v27, CFSTR("numDevicesRSSIRange03"));

    v28 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -78.0, -76.0));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v29, CFSTR("numDevicesRSSIRange04"));

    v30 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -80.0, -79.0));
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v31, CFSTR("numDevicesRSSIRange05"));

    v32 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -82.0, -81.0));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v33, CFSTR("numDevicesRSSIRange06"));

    v34 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -84.0, -83.0));
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v35, CFSTR("numDevicesRSSIRange07"));

    v36 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -86.0, -85.0));
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v37, CFSTR("numDevicesRSSIRange08"));

    v38 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -88.0, -87.0));
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v39, CFSTR("numDevicesRSSIRange09"));

    v40 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -90.0, -89.0));
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v41, CFSTR("numDevicesRSSIRange10"));

    v42 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -200.0, -91.0));
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v43, CFSTR("numDevicesRSSIRange11"));

  }
  v44 = (_QWORD *)(v2 + 128);
  if ((*(char *)(v2 + 151) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v2 + 151))
      return v3;
    goto LABEL_31;
  }
  if (*(_QWORD *)(v2 + 136))
  {
    v44 = (_QWORD *)*v44;
LABEL_31:
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v45, CFSTR("apsdInterface"));

  }
  return v3;
}

void sub_100070E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100070F00(int a1)
{
  NSObject *v2;
  unsigned int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1025;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm\", \"wifiCCA\":%{private}d}", (uint8_t *)v5, 0x18u);
  }
  if (a1 <= 0x63)
    v3 = a1 / 0xAu + 1;
  else
    v3 = 11;
  if (a1 >= 0)
    return v3;
  else
    return 0;
}

uint64_t sub_100070FE4(void *a1, double a2, double a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v12[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10007193C;
    v12[3] = &unk_1000F4A70;
    *(double *)&v12[5] = a2;
    *(double *)&v12[6] = a3;
    v12[4] = &v13;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v12);
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_DWORD *)v14 + 6);
      *(_DWORD *)buf = 68289795;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2049;
      v22 = a2;
      v23 = 2049;
      v24 = a3;
      v25 = 1025;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,numDevicesWithinRSSIRange\", \"minRSSI\":\"%{private}0.2f\", \"maxRSSI\":\"%{private}0.2f\", \"num\":%{private}d}", buf, 0x2Cu);
    }
    v9 = *((unsigned int *)v14 + 6);
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v10 = SALogObjectGeneral;
    v9 = 0;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,numDevicesWithinRSSIRange,histogram is empty\"}", buf, 0x12u);
      v9 = 0;
    }
  }

  return v9;
}

void sub_1000711C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

NSMutableDictionary *sub_1000711E8(uint64_t a1)
{
  uint64_t v2;
  NSMutableDictionary *v3;
  void *v4;
  NSNumber *v5;
  void *v6;
  SASettings *v7;
  uint64_t v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSNumber *v18;
  void *v19;
  void *v20;
  id v21;
  NSNumber *v22;
  void *v23;
  NSNumber *v24;
  void *v25;
  NSNumber *v26;
  void *v27;
  NSNumber *v28;
  void *v29;
  NSNumber *v30;
  void *v31;
  NSNumber *v32;
  void *v33;
  NSNumber *v34;
  void *v35;
  NSNumber *v36;
  void *v37;
  NSNumber *v38;
  void *v39;
  NSNumber *v40;
  void *v41;
  NSNumber *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  NSNumber *v46;
  void *v47;
  __int128 *v48;
  BOOL v49;
  uint64_t v50;
  void *v51;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_new(NSMutableDictionary);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v4, CFSTR("timeofSample"));

  v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_100003038() + 16));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v6, CFSTR("batteryChargeLevel"));

  v8 = SASettings::instance(v7);
  v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v10, CFSTR("isBleOn"));

  if (*(_BYTE *)(v2 + 61))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 60)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v11, CFSTR("isEnhancedDeliveryEnabled"));

  }
  if (*(_BYTE *)(v2 + 59))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 58)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v12, CFSTR("deviceInCoveredRegion"));

  }
  if (*(_BYTE *)(v2 + 63))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 62)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v13, CFSTR("isSubscribedtoESA"));

  }
  if (*(_BYTE *)(v2 + 57))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 56)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v14, CFSTR("isCellularDataReachable"));

  }
  if (*(_BYTE *)(v2 + 65))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 64)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v15, CFSTR("isType22ScanActive"));

  }
  if (*(_BYTE *)(v2 + 67))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 66)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v16, CFSTR("isWifiDataReachable"));

  }
  if (*(_BYTE *)(v2 + 80))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 72)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v17, CFSTR("meanNumNearbyDevices"));

  }
  if (*(_BYTE *)(v2 + 92) && *(_BYTE *)(v2 + 67) && *(_BYTE *)(v2 + 66))
  {
    v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070F00(*(_DWORD *)(v2 + 88)));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v19, CFSTR("wifiCCA"));

  }
  if (*(_BYTE *)(v2 + 100) && *(_BYTE *)(v2 + 67) && *(_BYTE *)(v2 + 66))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 96)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v20, CFSTR("wifiRxPhyRate"));

  }
  v21 = *(id *)(v2 + 48);
  if (v21)
  {
    v21 = objc_msgSend(v21, "count");
    if (v21)
    {
      v22 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -65.0, 200.0));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v23, CFSTR("numDevicesRSSIRange01"));

      v24 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -71.0, -66.0));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v25, CFSTR("numDevicesRSSIRange02"));

      v26 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -75.0, -72.0));
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v27, CFSTR("numDevicesRSSIRange03"));

      v28 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -78.0, -76.0));
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v29, CFSTR("numDevicesRSSIRange04"));

      v30 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -80.0, -79.0));
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v31, CFSTR("numDevicesRSSIRange05"));

      v32 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -82.0, -81.0));
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v33, CFSTR("numDevicesRSSIRange06"));

      v34 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -84.0, -83.0));
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v35, CFSTR("numDevicesRSSIRange07"));

      v36 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -86.0, -85.0));
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v37, CFSTR("numDevicesRSSIRange08"));

      v38 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -88.0, -87.0));
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v39, CFSTR("numDevicesRSSIRange09"));

      v40 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -90.0, -89.0));
      v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v41, CFSTR("numDevicesRSSIRange10"));

      v42 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100070FE4(*(void **)(v2 + 48), -200.0, -91.0));
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v43, CFSTR("numDevicesRSSIRange11"));

    }
  }
  v44 = (_QWORD *)(v2 + 128);
  if (*(char *)(v2 + 151) < 0)
  {
    if (!*(_QWORD *)(v2 + 136))
      goto LABEL_32;
    v44 = (_QWORD *)*v44;
    goto LABEL_31;
  }
  if (*(_BYTE *)(v2 + 151))
  {
LABEL_31:
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v45, CFSTR("apsdInterface"));

  }
LABEL_32:
  v46 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", SACommonUtils::isLivabiltyEnabled((SACommonUtils *)v21));
  v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v47, CFSTR("isLiveOn"));

  v48 = sub_100003038();
  if (*((_BYTE *)v48 + 121))
    v49 = *((_BYTE *)v48 + 120) == 0;
  else
    v49 = 1;
  v50 = !v49;
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v50));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v51, CFSTR("isAdvertiser"));

  return v3;
}

void sub_1000718B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10007193C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v11, v6) & 1) != 0)
  {
    v7 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      objc_msgSend(v11, "doubleValue");
      if (v8 >= *(double *)(a1 + 40))
      {
        objc_msgSend(v11, "doubleValue");
        if (v9 <= *(double *)(a1 + 48))
        {
          objc_msgSend(v5, "doubleValue");
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (int)(v10
                                                                            + (double)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                             + 24));
        }
      }
    }
  }

}

void sub_100071A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100071A20()
{
  operator delete();
}

_QWORD *sub_100071A34()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F4AA0;
  return result;
}

void sub_100071A58(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F4AA0;
}

uint64_t sub_100071A74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100071AB0()
{
}

void sub_100071AC0()
{
  operator delete();
}

_QWORD *sub_100071AD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4B20;
  result[1] = v3;
  return result;
}

uint64_t sub_100071B08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4B20;
  a2[1] = v2;
  return result;
}

void sub_100071B24(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  unint64_t v5;
  SASettings *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4);
    v18 = 68289283;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onPeopleDensityCb\", \"count\":%{private}lu}", (uint8_t *)&v18, 0x1Cu);
  }
  v6 = (SASettings *)objc_msgSend(*(id *)(v3 + 48), "removeAllObjects");
  if (*(_BYTE *)(v3 + 80))
    *(_BYTE *)(v3 + 80) = 0;
  v7 = SASettings::instance(v6);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) || a2[1] == *a2)
  {
    *(_WORD *)(v3 + 64) = 256;
  }
  else
  {
    *(_WORD *)(v3 + 64) = 257;
    v8 = (a2[1] - *a2) / 48;
    v9 = (48 * v8) | 8;
    while (--v8)
    {
      v10 = v9 - 48;
      v11 = *(unsigned __int8 *)(*a2 - 24 + v9 - 8);
      v9 -= 48;
      if (v11)
      {
        v12 = (id)SALogObjectGeneral;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *a2 + v10;
          if (!*(_BYTE *)(v13 + 16))
            sub_10006B2FC();
          v14 = *(_QWORD *)v13;
          v15 = *(_QWORD *)(v13 + 8);
          v16 = *(_QWORD *)(v13 - 8);
          v17 = *(_QWORD *)(v13 + 24);
          v18 = 68290051;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2049;
          v23 = v14;
          v24 = 2049;
          v25 = v15;
          v26 = 2049;
          v27 = v16;
          v28 = 2049;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onPeopleDensityCb,lastEvent,\", \"startTimestamp\":\"%{private}0.2f\", \"endTimestamp\":\"%{private}0.2f\", \"densityScore\":\"%{private}0.2f\", \"scanDuration\":\"%{private}0.2f\"}", (uint8_t *)&v18, 0x3Au);
        }

        *(_QWORD *)(v3 + 72) = *(_QWORD *)(*a2 + v10 - 8);
        *(_BYTE *)(v3 + 80) = 1;
        objc_msgSend(*(id *)(v3 + 48), "addEntriesFromDictionary:", *(_QWORD *)(*a2 + v10 + 32));
        break;
      }
    }
  }
  sub_10007004C(v3, 0);
  sub_10006F848(v3);
}

void sub_100071D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100071DA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100071DE4()
{
}

void sub_100071DF4()
{
  operator delete();
}

_QWORD *sub_100071E08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4BA0;
  result[1] = v3;
  return result;
}

uint64_t sub_100071E3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4BA0;
  a2[1] = v2;
  return result;
}

void sub_100071E58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  SASettings *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 68289026;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onCurrentPeopleDensityRecievedCb\"}", (uint8_t *)&v17, 0x12u);
  }
  v5 = (SASettings *)objc_msgSend(*(id *)(v3 + 48), "removeAllObjects");
  if (*(_BYTE *)(v3 + 80))
    *(_BYTE *)(v3 + 80) = 0;
  v6 = SASettings::instance(v5);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6))
  {
    *(_WORD *)(v3 + 64) = 257;
    v7 = (uint64_t)((double)(uint64_t)(double)time(0) + -978307200.0);
    v8 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a2;
      v9 = a2[1];
      v11 = a2[4];
      v12 = 0xBFF0000000000000;
      if (*((_BYTE *)a2 + 24))
        v12 = a2[2];
      v17 = 68290307;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2049;
      v22 = v7;
      v23 = 2049;
      v24 = v9;
      v25 = 2049;
      v26 = v10;
      v27 = 2049;
      v28 = v11;
      v29 = 2049;
      v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onCurrentPeopleDensityRecievedCb\", \"now\":%{private}llu, \"startTimestamp\":\"%{private}0.2f\", \"densityScore\":\"%{private}0.2f\", \"scanDuration\":\"%{private}0.2f\", \"endTimestamp\":\"%{private}0.2f\"}", (uint8_t *)&v17, 0x44u);
    }
    v13 = a2[5];
    if (v13)
    {
      v14 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0 && (double)v7 - *((double *)a2 + 1) < 3600.0)
      {
        *(_QWORD *)(v3 + 72) = *a2;
        *(_BYTE *)(v3 + 80) = 1;
        objc_msgSend(*(id *)(v3 + 48), "addEntriesFromDictionary:", a2[5]);
        v15 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(v3 + 48);
          v17 = 68289283;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2113;
          v22 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onCurrentPeopleDensityRecievedCb\", \"fRSSIHistogram\":%{private, location:escape_only}@}", (uint8_t *)&v17, 0x1Cu);
        }
      }
    }
  }
  else
  {
    *(_WORD *)(v3 + 64) = 256;
  }
  sub_10007004C(v3, 0);
  sub_10006F848(v3);
}

uint64_t sub_100072104(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100072140()
{
}

void sub_100072150()
{
  operator delete();
}

_QWORD *sub_100072164()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F4C20;
  return result;
}

void sub_100072188(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F4C20;
}

void sub_1000721A0()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bm,onSettingsChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_100072250(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10007228C()
{
}

void sub_100072298(uint64_t **a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = *((_DWORD *)v6 + 7);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (!v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 7) <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_10005BF88(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t sub_10007235C(uint64_t a1)
{
  NSObject *v2;
  dispatch_queue_attr_t v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  SAPlatformInfo *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD block[5];
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE buf[18];
  SAPlatformInfo *v29;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 248) = xmmword_1000B27D0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  if (!sub_10005D474("/var/mobile/Library/com.apple.safetyalerts/"))
  {
    v2 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,unableToCreateAppRoot\"}", buf, 0x12u);
    }
  }
  v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = dispatch_queue_create("com.apple.safetyalert.listener", v4);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  v7 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100072914;
  block[3] = &unk_1000F1EB8;
  block[4] = a1;
  dispatch_async(v7, block);
  v26[0] = off_1000F5CF0;
  v26[1] = a1;
  v27 = v26;
  v8 = operator new(0x280uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = off_1000F5D80;
  v29 = (SAPlatformInfo *)buf;
  *(_QWORD *)buf = off_1000F5CF0;
  *(_QWORD *)&buf[8] = a1;
  sub_100029DDC((uint64_t)(v8 + 3), v9, (uint64_t)buf);
  v10 = v29;
  if (v29 == (SAPlatformInfo *)buf)
  {
    v11 = 4;
    v10 = (SAPlatformInfo *)buf;
    goto LABEL_8;
  }
  if (v29)
  {
    v11 = 5;
LABEL_8:
    v10 = (SAPlatformInfo *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v8 + 3;
  *(_QWORD *)(a1 + 136) = v8;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (sub_10007FD14(v10))
  {
    sub_10005C388(*(void **)a1, buf);
    v15 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v16 = *(std::__shared_weak_count **)(a1 + 184);
    *(_OWORD *)(a1 + 176) = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = v27;
  if (v27 == v26)
  {
    v23 = 4;
    v22 = v26;
    goto LABEL_29;
  }
  if (v27)
  {
    v23 = 5;
LABEL_29:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  return a1;
}

void sub_1000726A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, void ***a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v24 = a18;
  if (a18 == &a15)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v25 = 5;
  }
  ((void (*)(void))(*v24)[v25])();
LABEL_6:
  sub_100031578(v18 + 352);
  v26 = *(_QWORD *)(v18 + 336);
  *(_QWORD *)(v18 + 336) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  a15 = (void **)(v18 + 288);
  sub_100004EC0(&a15);
  sub_10005EBC4(&a15);
  sub_10005EC38(&a15);
  sub_100028C54(v22);
  sub_100028C54(v21);
  v27 = *(_QWORD *)(v18 + 168);
  *(_QWORD *)(v18 + 168) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v18 + 160);
  *(_QWORD *)(v18 + 160) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(v18 + 152) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_10005ECAC(v20, 0);
  sub_100028C54(v19);
  v30 = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v18 + 120) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(v18 + 112);
  *(_QWORD *)(v18 + 112) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v18 + 104) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(v18 + 96);
  *(_QWORD *)(v18 + 96) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v18 + 88) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v18 + 80) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v18 + 72) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v18 + 64) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v18 + 56) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_100028C54(v18 + 40);
  v39 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v18 + 32) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_100028C54(v18 + 16);
  sub_10005ECE8((uint64_t *)(v18 + 8), 0);

  _Unwind_Resume(a1);
}

void sub_100072914(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_autoreleasePoolPush();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10007297C;
  v3[3] = &unk_1000F1EB8;
  v3[4] = v1;
  sub_10007297C((uint64_t)v3);
}

void sub_10007297C(uint64_t a1)
{
  void **v1;
  NSObject *v2;
  void *v3;
  void *__p;
  uint8_t buf[8];
  _WORD v6[8];

  v1 = *(void ***)(a1 + 32);
  v2 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v6[0] = 2082;
    *(_QWORD *)&v6[1] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,safetyAlertsDaemon is up and running\"}", buf, 0x12u);
  }

  v3 = *v1;
  sub_10000E8A0(&__p, "com.apple.safetyalerts.initPendingTaskCleanUpTimer");
  SATimer::create(v3);
}

void sub_1000741E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v16 - 168);
  if (v18 == (_QWORD *)(v16 - 192))
  {
    v19 = 4;
    v18 = (_QWORD *)(v16 - 192);
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_10007958C(&STACK[0x370]);

  sub_100074840(&STACK[0x570]);
  _Unwind_Resume(a1);
}

void sub_1000745E8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,timer invoked\"}", (uint8_t *)&v11, 0x12u);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 336) + 40))(*(_QWORD *)(v1 + 336));
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v1 + 272) - *(_QWORD *)(v1 + 264)) >> 3);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 296) - *(_QWORD *)(v1 + 288)) >> 3);
    v11 = 68289538;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v4;
    v17 = 2050;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,timer invoked\", \"Alert\":%{public}llu, \"Wea\":%{public}llu}", (uint8_t *)&v11, 0x26u);
  }
  v6 = *(_QWORD *)(v1 + 264);
  v7 = *(_QWORD *)(v1 + 272);
  if (v7 != v6)
  {
    do
    {

      v7 -= 88;
    }
    while (v7 != v6);
    *(_QWORD *)(v1 + 272) = v6;
  }
  if (*(_QWORD *)(v1 + 296) != *(_QWORD *)(v1 + 288))
    sub_100004F00((uint64_t *)(v1 + 288));
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v1 + 272) - *(_QWORD *)(v1 + 264)) >> 3);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 296) - *(_QWORD *)(v1 + 288)) >> 3);
    v11 = 68289538;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v9;
    v17 = 2050;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,timer invoked\", \"Alert\":%{public}llu, \"Wea\":%{public}llu}", (uint8_t *)&v11, 0x26u);
  }
}

_QWORD *sub_100074840(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = a1 + 16;
  v3 = (_QWORD *)a1[19];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[15];
  if (v5 == a1 + 12)
  {
    v6 = 4;
    v5 = a1 + 12;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[11];
  if (v7 == a1 + 8)
  {
    v8 = 4;
    v7 = a1 + 8;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[7];
  if (v9 == a1 + 4)
  {
    v10 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[3];
  if (v11 == a1)
  {
    v12 = 4;
    v11 = a1;
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

void sub_10007494C(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  NSObject *v19;
  char *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  _QWORD v27[2];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 1026;
    LODWORD(v27[0]) = a2;
    WORD2(v27[0]) = 1026;
    *(_DWORD *)((char *)v27 + 6) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onChannelUpdate\", \"saChannelCount\":%{public}d, \"igneousChannelCount\":%{public}d}", buf, 0x1Eu);
  }
  if (*(double *)(v5 + 256) > 0.0)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 175))
      {
        v8 = *(_QWORD *)(v5 + 16);
        if (v8)
        {
          v9 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289282;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 1026;
            LODWORD(v27[0]) = a2;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onChannelUpdate\", \"noOfChannels\":%{public}d}", buf, 0x18u);
          }
          *(_DWORD *)(v8 + 32) = a2;
          v10 = *(_QWORD *)(v8 + 136);
          if (v10)
            sub_100053048(v10 + 112, a2 > 0);
          sub_10003BBE4(*(_QWORD *)(v5 + 16), a3);
          v11 = *(_QWORD *)(v5 + 16);
          v12 = *(_QWORD *)(v5 + 8);
          v13 = *(unsigned __int8 *)(v12 + 175);
          if (*(_BYTE *)(v12 + 175))
            v14 = *(unsigned __int8 *)(v12 + 174) != 0;
          else
            v14 = 0;
          v15 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289538;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 1026;
            LODWORD(v27[0]) = v13;
            WORD2(v27[0]) = 1026;
            *(_DWORD *)((char *)v27 + 6) = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onCountryKnown\", \"isKnown\":%{public}hhd, \"isSupported\":%{public}hhd}", buf, 0x1Eu);
          }
          *(_BYTE *)(v11 + 48) = v13;
          *(_BYTE *)(v11 + 49) = v14;
          v16 = *(_QWORD *)(v11 + 136);
          if (v16)
            sub_10005AFD0(v16, v14);
        }
        v17 = *(char **)(v5 + 288);
        v18 = *(char **)(v5 + 296);
        if (v17 != v18)
        {
          do
          {
            v19 = SALogObjectGeneral;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              v20 = v17;
              if (v17[23] < 0)
                v20 = *(char **)v17;
              *(_DWORD *)buf = 68289283;
              v23 = 0;
              v24 = 2082;
              v25 = "";
              v26 = 2081;
              v27[0] = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onChannelUpdate,processPendingWeaDisplayedAlert\", \"alert\":%{private, location:escape_only}s}", buf, 0x1Cu);
            }
            v21 = v17;
            if (v17[23] < 0)
              v21 = *(char **)v17;
            sub_100074C6C(v5, v21);
            v17 += 24;
          }
          while (v17 != v18);
          sub_100004F00((uint64_t *)(v5 + 288));
        }
      }
    }
  }
}

void sub_100074C6C(uint64_t a1, char *a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  CFAbsoluteTime Current;
  NSObject *v8;
  void **v9;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  const char *v26;
  NSObject *v27;
  void **v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  _BYTE buf[40];

  if (*(double *)(a1 + 256) <= 0.0)
  {
    v11 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onWeaDisplayedNotification,noLocation,deferAlert\", \"weaMessage\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_10000E8A0(__p, a2);
    v13 = *(_QWORD *)(a1 + 296);
    v12 = *(_QWORD *)(a1 + 304);
    if (v13 < v12)
    {
      v14 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 16) = v31;
      *(_OWORD *)v13 = v14;
      *(_QWORD *)(a1 + 296) = v13 + 24;
      return;
    }
    v16 = *(_QWORD *)(a1 + 288);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100004C50();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    *(_QWORD *)&buf[32] = a1 + 304;
    if (v20)
      v21 = (char *)sub_100004C64(a1 + 304, v20);
    else
      v21 = 0;
    v22 = &v21[24 * v17];
    *(_QWORD *)buf = v21;
    *(_QWORD *)&buf[8] = v22;
    *(_QWORD *)&buf[24] = &v21[24 * v20];
    v23 = *(_OWORD *)__p;
    *((_QWORD *)v22 + 2) = v31;
    *(_OWORD *)v22 = v23;
    __p[1] = 0;
    v31 = 0;
    __p[0] = 0;
    *(_QWORD *)&buf[16] = v22 + 24;
    sub_100004BDC((uint64_t *)(a1 + 288), buf);
    v24 = *(_QWORD *)(a1 + 296);
    sub_100004DBC((uint64_t)buf);
    v25 = SHIBYTE(v31);
    *(_QWORD *)(a1 + 296) = v24;
    if (v25 < 0)
      goto LABEL_29;
    return;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v4 + 175) || !*(_BYTE *)(v4 + 174))
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onWeaNotification,#warning,notSupported\"}", buf, 0x12u);
    }
    return;
  }
  if (!*((_BYTE *)sub_10003D044() + 304))
  {
    v5 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_36;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v26 = "{\"msg%{public}.0s\":\"#ctsa,not in wea test\"}";
LABEL_35:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v26, buf, 0x12u);
    goto LABEL_36;
  }
  v5 = SALogObjectGeneral;
  v6 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (!a2)
  {
    if (!v6)
      goto LABEL_36;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v26 = "{\"msg%{public}.0s\":\"#ctsa,not valid wea\"}";
    goto LABEL_35;
  }
  if (v6)
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ctsa,sendWeaTestNotification\"}", buf, 0x12u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = a2;
    *(_WORD *)&buf[28] = 2050;
    *(CFAbsoluteTime *)&buf[30] = Current;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ctsa,sendWeaTestNotification\", \"weaMessage\":%{public, location:escape_only}s, \"RecieveTS\":\"%{public}0.3f\"}", buf, 0x26u);
  }
  sub_10000E8A0(buf, a2);
  v9 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)&buf[16];
  *(CFAbsoluteTime *)(a1 + 440) = Current;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kSAWEAAlertReceived"), 0, 0, 1u);
LABEL_36:
  sub_10000E8A0(buf, a2);
  SACommonUtils::getHashForString(buf, (uint64_t *)__p);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v27 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v28 = __p;
    if (v31 < 0)
      v28 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = a2;
    *(_WORD *)&buf[28] = 2081;
    *(_QWORD *)&buf[30] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onWeaDisplayedNotification\", \"message\":%{private, location:escape_only}s, \"hash\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    sub_10000E8A0(buf, a2);
    sub_100039468(v29, (uint64_t)buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*(_QWORD *)(a1 + 104)
      && sub_10003B5C4(*(_QWORD *)(a1 + 16))
      && sub_10004220C(*(_QWORD *)(a1 + 104), (uint64_t)__p))
    {
      sub_100039ABC(*(_QWORD *)(a1 + 16), (uint64_t)__p);
    }
  }
  if (SHIBYTE(v31) < 0)
LABEL_29:
    operator delete(__p[0]);
}

void sub_1000751D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_100075240(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  unsigned __int8 *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = a2;
    v13 = 1026;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onBLERelayUpdateCB,\", \"isIgenousCapable\":%{public}d, \"isIgenousEnabled\":%{public}d}", (uint8_t *)v8, 0x1Eu);
  }
  v7 = *(unsigned __int8 **)(v5 + 144);
  if (v7)
  {
    sub_10007F68C(v7);
    sub_10007F750(*(unsigned __int8 **)(v5 + 144));
  }
}

void sub_100075330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 144);
  if (v2)
    sub_10007E92C(v2);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 136);
    if (v4)
      sub_100059BCC(v4);
  }
}

void sub_100075374(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onEnhancedDeliveryEnabled,\", \"enhancedDeliveryEnabled,\":%{public}hhd}", (uint8_t *)v8, 0x18u);
  }
  *(_BYTE *)(a1 + 344) = a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1000274D0(v5, a2);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    sub_10003B9D4(v6, a2);
  v7 = *(unsigned __int8 **)(a1 + 144);
  if (v7)
    sub_10007F750(v7);
}

void sub_100075470(uint64_t a1, uint64_t a2, CLLocationDegrees a3, CLLocationDegrees a4, double a5, double a6, double a7)
{
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void **v27;
  uint64_t v28;
  uint64_t i;
  void *__p[2];
  char v31;
  uint8_t buf[8];
  __int16 v33;
  const char *v34;
  __int16 v35;
  CLLocationDegrees v36;
  __int16 v37;
  CLLocationDegrees v38;
  __int16 v39;
  double v40;

  v13 = *(_QWORD *)(a1 + 32);
  v14 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v33 = 2082;
    v34 = "";
    v35 = 2049;
    v36 = a3;
    v37 = 2049;
    v38 = a4;
    v39 = 2049;
    v40 = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onLocationChanged\", \"lat\":\"%{private}0.6f\", \"lon\":\"%{private}0.6f\", \"unc\":\"%{private}0.2f\"}", buf, 0x30u);
  }
  *(CLLocationCoordinate2D *)(v13 + 232) = CLLocationCoordinate2DMake(a3, a4);
  *(double *)(v13 + 256) = a6;
  *(CFAbsoluteTime *)(v13 + 248) = CFAbsoluteTimeGetCurrent();
  sub_100026410(*(_QWORD *)(v13 + 8), *(CLLocationDegrees *)(v13 + 232), *(CLLocationDegrees *)(v13 + 240), a5, *(double *)(v13 + 256));
  v15 = *(_QWORD *)(v13 + 40);
  if (v15)
    (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*(_QWORD *)v15 + 96))(v15, a2, *(double *)(v13 + 232), *(double *)(v13 + 240), a5, *(double *)(v13 + 256), a7);
  v16 = *(_QWORD *)(v13 + 16);
  if (v16)
  {
    v17 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      v35 = 1026;
      LODWORD(v36) = 1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onLocationAvailable\", \"isAvailable\":%{public}hhd}", buf, 0x18u);
      v18 = *(_QWORD *)(v13 + 16);
      v17 = SALogObjectGeneral;
    }
    else
    {
      v18 = v16;
    }
    *(_BYTE *)(v16 + 45) = 1;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(double *)(v13 + 256);
      v21 = *(double *)(v13 + 232);
      v20 = *(double *)(v13 + 240);
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2049;
      v36 = v21;
      v37 = 2049;
      v38 = v20;
      v39 = 2049;
      v40 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onLocationChanged\", \"lat\":\"%{private}0.6f\", \"lon\":\"%{private}0.6f\", \"unc\":\"%{private}0.2f\"}", buf, 0x30u);
    }
    v22 = *(_QWORD *)(v18 + 136);
    if (v22)
    {
      *(_QWORD *)buf = (uint64_t)((double)(uint64_t)(double)time(0) + -978307200.0);
      sub_100052880(v22 + 112, (uint64_t *)buf);
    }
  }
  v23 = *(unsigned __int8 **)(v13 + 144);
  if (v23)
    sub_10007E9FC(v23);
  if (*(double *)(v13 + 256) > 0.0)
  {
    v24 = *(_QWORD *)(v13 + 264);
    v25 = *(_QWORD *)(v13 + 272);
    if (v24 != v25)
    {
      do
      {
        v26 = (id)SALogObjectGeneral;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          SACommonUtils::getAnyCmam(*(SACommonUtils **)(v24 + 80), __p);
          if (v31 >= 0)
            *(double *)&v27 = COERCE_DOUBLE(__p);
          else
            v27 = (void **)__p[0];
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2081;
          v36 = *(double *)&v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onLocationChanged,processPendingAlert\", \"alert\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v31 < 0)
            operator delete(__p[0]);
        }

        sub_100076048((_QWORD *)v13, v24, *(void **)(v24 + 80));
        v24 += 88;
      }
      while (v24 != v25);
      v28 = *(_QWORD *)(v13 + 264);
      for (i = *(_QWORD *)(v13 + 272); i != v28; i -= 88)

      *(_QWORD *)(v13 + 272) = v28;
    }
  }
  sub_100079008(v13, 0);
  sub_100078408(v13, a3, a4);
}

void sub_100075884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007589C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,SafetyAlertsDaemon::onLocationAuthorized\", \"isAuthorized\":%{public}d}", (uint8_t *)&v11, 0x18u);
  }
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
    sub_100026538(v5, a2);
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onLocationAuthorized\", \"status\":%{public}hhd}", (uint8_t *)&v11, 0x18u);
    }
    *(_BYTE *)(v6 + 43) = a2;
    if ((a2 & 1) == 0)
      *(_BYTE *)(v6 + 45) = 0;
    v8 = *(_QWORD *)(v6 + 136);
    if (v8)
      sub_1000526E0(v8 + 112, a2);
  }
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289283;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1025;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,updateCfuLocationServiceStatus\", \"isEnabled\":%{private}hhd}", (uint8_t *)&v11, 0x18u);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
  objc_msgSend(v10, "setLocationServicesEnabled:", a2);

}

void sub_100075A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100075AA8(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t buf[8];
  _WORD v7[8];

  if (sub_10007FD14((SAPlatformInfo *)a1))
  {
    v2 = a1[18];
    if (v2)
      sub_10007F5D0(v2);
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v7[0] = 2082;
      *(_QWORD *)&v7[1] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,initDeinitBleCore\"}", buf, 0x12u);
    }
    operator new();
  }
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v7[0] = 2082;
    *(_QWORD *)&v7[1] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,initDeinitBleCore release\"}", buf, 0x12u);
  }
  return sub_10005ECAC(a1 + 18, 0);
}

void sub_100075D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100028C54((uint64_t)&a9);
  sub_100028C54((uint64_t)&a11);
  sub_100028C54((uint64_t)&a13);
  operator delete();
}

void sub_100075DA4(uint64_t *a1, int a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289538;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 1026;
    v21 = a2;
    v22 = 1026;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,networkReachability\", \"type\":%{public}d, \"isConnected\":%{public}hhd}", (uint8_t *)&v16, 0x1Eu);
  }
  if (!a2)
  {
    sub_100026614(a1[1], a3);
    v8 = a1[2];
    if (v8)
    {
      v9 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 68289282;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 1026;
        v21 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onInexpensiveNetworkConnected\", \"status\":%{public}hhd}", (uint8_t *)&v16, 0x18u);
      }
      *(_BYTE *)(v8 + 41) = a3;
      v10 = *(_QWORD *)(v8 + 136);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 56);
        if (v11)
          sub_10006FEA4(v11, a3);
      }
    }
    if (a1[18])
      sub_10007F45C();
    goto LABEL_22;
  }
  if (a2 == 1)
  {
    sub_1000266EC(a1[1], a3);
    v12 = a1[2];
    if (v12)
    {
      v13 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 68289282;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 1026;
        v21 = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onCellNetworkConnected\", \"status\":%{public}hhd}", (uint8_t *)&v16, 0x18u);
      }
      *(_BYTE *)(v12 + 42) = a3;
      v14 = *(_QWORD *)(v12 + 136);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 56);
        if (v15)
          sub_10006FCC8(v15, a3);
      }
    }
    goto LABEL_22;
  }
  if (a2 != 2)
  {
LABEL_22:
    sub_100079008((uint64_t)a1, 0);
    return;
  }
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,networkReachability,invalid type\"}", (uint8_t *)&v16, 0x12u);
  }
}

void sub_100076048(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  SAPlatformInfo *v9;
  SAPlatformInfo *v10;
  SACommonUtils *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  double Current;
  SAPlatformInfo *v19;
  double v20;
  double v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  NSObject *v53;
  _BYTE *v54;
  void *v55;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  double CFAbsoluteTimeFromTimeString;
  SACommonUtils *v64;
  char isLivabiltyEnabled;
  char v66;
  NSObject *v67;
  char v68;
  NSObject *v69;
  NSObject *v70;
  _BYTE *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  void *DeepCopy;
  void *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  unint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int64x2_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  int v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int64x2_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  uint64_t v147;
  double v148;
  double v149;
  uint64_t v150;
  SASettings *v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  NSObject *v162;
  NSObject *v163;
  id v164;
  uint64_t v165;
  NSObject *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  NSObject *v173;
  _BOOL8 v174;
  const char *v175;
  const char *v177;
  const char *v178;
  const char *v179;
  BOOL v180;
  const char *v181;
  const char *v182;
  BOOL v183;
  const char *v184;
  uint64_t v185;
  NSObject *v186;
  _OWORD *v187;
  void *v188;
  void *v189;
  char *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  NSObject *v197;
  uint64_t v198;
  void *v199;
  void *v200;
  NSObject *v201;
  int64x2_t *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  SAPlatformInfo *v209;
  CFPropertyListRef propertyList;
  CFPropertyListRef propertyLista;
  CFPropertyListRef propertyListb;
  id v213;
  double v214;
  _BYTE v215[28];
  uint64_t v216;
  _BYTE v217[24];
  const __CFString *v218;
  const __CFString *v219;
  const __CFString *v220;
  _BYTE v221[32];
  _OWORD v222[3];
  _OWORD v223[2];
  _OWORD v224[3];
  _QWORD v225[3];
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  uint8_t __dst[16];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t buf;
  _OWORD buf_8[2];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char v246;
  int v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _OWORD v253[2];
  uint64_t v254;
  char v255;
  uint64_t v256;
  __int16 v257;
  uint64_t v258;
  uint64_t v259;

  v5 = a3;
  v6 = a1[16];
  v213 = v5;
  if (!v6)
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    buf = 68289026;
    LOWORD(buf_8[0]) = 2082;
    *(_QWORD *)((char *)buf_8 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#daemon,#warning,isIgneousAlert,invalid parser\"}";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&buf, 0x12u);
LABEL_8:

    v9 = (SAPlatformInfo *)v213;
    v10 = v9;
    if (!v9)
    {
      v29 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,nilAlertReceived\"}", (uint8_t *)&buf, 0x12u);
      }
      goto LABEL_146;
    }
    v11 = (SACommonUtils *)SAPlatformInfo::instance(v9);
    if (*((_BYTE *)v11 + 9))
    {
      v12 = a1[1];
      if (*(_BYTE *)(v12 + 175))
      {
        if (*(_BYTE *)(v12 + 174) && SACommonUtils::isLivabiltyEnabled(v11))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(-[SAPlatformInfo valueForKey:](v10, "valueForKey:", CFSTR("encodedPDUList")));
          v14 = objc_msgSend(v13, "count");
          v15 = (void *)objc_claimAutoreleasedReturnValue(-[SAPlatformInfo objectForKey:](v10, "objectForKey:", CFSTR("server_timestamp")));
          if (v15)
          {
            v16 = objc_opt_class(NSNumber);
            if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
            {
              v17 = v15;
              Current = CFAbsoluteTimeGetCurrent();
              v19 = v10;
              objc_msgSend(v17, "doubleValue");
              v21 = v20;
              v22 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                buf = 68289794;
                LOWORD(buf_8[0]) = 2082;
                *(_QWORD *)((char *)buf_8 + 2) = "";
                WORD5(buf_8[0]) = 2050;
                *(double *)((char *)buf_8 + 12) = v21 + -978307200.0;
                WORD2(buf_8[1]) = 2050;
                *(double *)((char *)&buf_8[1] + 6) = Current;
                HIWORD(buf_8[1]) = 2050;
                *(double *)&v236 = Current - (v21 + -978307200.0);
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,livabilityMessageLatency\", \"serverTimestamp\":\"%{public}0.1f\", \"deviceTimestamp\":\"%{public}0.1f\", \"latency\":\"%{public}0.1f\"}", (uint8_t *)&buf, 0x30u);
              }

              v10 = v19;
            }
          }
          v23 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289282;
            LOWORD(buf_8[0]) = 2082;
            *(_QWORD *)((char *)buf_8 + 2) = "";
            WORD5(buf_8[0]) = 2050;
            *(_QWORD *)((char *)buf_8 + 12) = v14;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,encodedpdulist array,size\", \"size\":%{public}lu}", (uint8_t *)&buf, 0x1Cu);
          }
          if (v14)
          {
            buf = (uint64_t)_NSConcreteStackBlock;
            *(_QWORD *)&buf_8[0] = 3221225472;
            *((_QWORD *)&buf_8[0] + 1) = sub_10007867C;
            *(_QWORD *)&buf_8[1] = &unk_1000F4CF0;
            *((_QWORD *)&buf_8[1] + 1) = a1;
            objc_msgSend(v13, "enumerateObjectsUsingBlock:", &buf);

LABEL_146:
            goto LABEL_147;
          }

        }
      }
    }
    v53 = (id)SALogObjectGeneral;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      SACommonUtils::getAnyCmam(v10, v221);
      v54 = v221[23] >= 0 ? v221 : *(_BYTE **)v221;
      buf = 68289283;
      LOWORD(buf_8[0]) = 2082;
      *(_QWORD *)((char *)buf_8 + 2) = "";
      WORD5(buf_8[0]) = 2081;
      *(_QWORD *)((char *)buf_8 + 12) = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#daemon,onAlertReceived\", \"alert\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if ((v221[23] & 0x80000000) != 0)
        operator delete(*(void **)v221);
    }

    v55 = (void *)objc_claimAutoreleasedReturnValue(-[SAPlatformInfo objectForKey:](v10, "objectForKey:", CFSTR("geometry")));
    if (!v55)
    {
      v69 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,missingGeometry\"}", (uint8_t *)&buf, 0x12u);
      }
      goto LABEL_145;
    }
    if (*((double *)a1 + 32) <= 0.0)
    {
      v70 = (id)SALogObjectGeneral;
      v209 = v10;
      propertyLista = v55;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        SACommonUtils::getAnyCmam(v10, v221);
        v71 = v221[23] >= 0 ? v221 : *(_BYTE **)v221;
        buf = 68289283;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        WORD5(buf_8[0]) = 2081;
        *(_QWORD *)((char *)buf_8 + 12) = v71;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,noLocation,deferAlert\", \"alert\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
        if ((v221[23] & 0x80000000) != 0)
          operator delete(*(void **)v221);
      }

      v72 = a1;
      v74 = *(_QWORD *)a2;
      v73 = *(_QWORD *)(a2 + 8);
      v76 = *(_DWORD *)(a2 + 16);
      v75 = *(_DWORD *)(a2 + 20);
      v78 = *(_QWORD *)(a2 + 24);
      v77 = *(_QWORD *)(a2 + 32);
      v204 = *(_DWORD *)(a2 + 40);
      v207 = *(_DWORD *)(a2 + 44);
      v79 = *(_QWORD *)(a2 + 48);
      v80 = *(_DWORD *)(a2 + 56);
      v81 = *(_DWORD *)(a2 + 60);
      v82 = *(_QWORD *)(a2 + 64);
      v83 = *(_QWORD *)(a2 + 72);
      DeepCopy = (void *)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v10, 1uLL);
      v85 = DeepCopy;
      v86 = v80;
      v88 = a1[34];
      v87 = a1[35];
      if (v88 >= v87)
      {
        v202 = (int64x2_t *)(a1 + 33);
        v92 = a1[33];
        v93 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v88 - v92) >> 3);
        if ((unint64_t)(v93 + 1) > 0x2E8BA2E8BA2E8BALL)
          sub_100004C50();
        v94 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v87 - v92) >> 3);
        v95 = 2 * v94;
        if (2 * v94 <= v93 + 1)
          v95 = v93 + 1;
        if (v94 >= 0x1745D1745D1745DLL)
          v96 = 0x2E8BA2E8BA2E8BALL;
        else
          v96 = v95;
        *((_QWORD *)&buf_8[1] + 1) = a1 + 35;
        if (v96)
        {
          v97 = v85;
          v96 = (unint64_t)sub_100079758(v96);
          v85 = v97;
          v203 = v98;
        }
        else
        {
          v203 = 0;
        }
        v99 = v96;
        v100 = v96 + 88 * v93;
        *(_QWORD *)v100 = v74;
        *(_QWORD *)(v100 + 8) = v73;
        *(_DWORD *)(v100 + 16) = v76;
        *(_DWORD *)(v100 + 20) = v75;
        *(_QWORD *)(v100 + 24) = v78;
        *(_QWORD *)(v100 + 32) = v77;
        *(_DWORD *)(v100 + 40) = v204;
        *(_DWORD *)(v100 + 44) = v207;
        *(_QWORD *)(v100 + 48) = v79;
        *(_DWORD *)(v100 + 56) = v86;
        *(_DWORD *)(v100 + 60) = v81;
        *(_QWORD *)(v100 + 64) = v82;
        *(_QWORD *)(v100 + 72) = v83;
        v101 = v85;
        *(_QWORD *)(v100 + 80) = v85;
        a1 = v72;
        v102 = v72[33];
        v103 = v72[34];
        if (v103 == v102)
        {
          v109 = vdupq_n_s64(v103);
          v104 = v100;
          v55 = (void *)propertyLista;
        }
        else
        {
          v104 = v100;
          v55 = (void *)propertyLista;
          do
          {
            *(_OWORD *)(v104 - 88) = *(_OWORD *)(v103 - 88);
            v105 = *(_OWORD *)(v103 - 72);
            v106 = *(_OWORD *)(v103 - 56);
            v107 = *(_OWORD *)(v103 - 40);
            *(_OWORD *)(v104 - 24) = *(_OWORD *)(v103 - 24);
            *(_OWORD *)(v104 - 40) = v107;
            *(_OWORD *)(v104 - 56) = v106;
            *(_OWORD *)(v104 - 72) = v105;
            v108 = *(_QWORD *)(v103 - 8);
            *(_QWORD *)(v103 - 8) = 0;
            *(_QWORD *)(v104 - 8) = v108;
            v104 -= 88;
            v103 -= 88;
          }
          while (v103 != v102);
          v109 = *v202;
        }
        v90 = v100 + 88;
        v72[33] = v104;
        v72[34] = v100 + 88;
        buf_8[0] = v109;
        v110 = v72[35];
        v72[35] = v99 + 88 * v203;
        *(_QWORD *)&buf_8[1] = v110;
        buf = v109.i64[0];
        sub_1000797A0((uint64_t)&buf);
        v89 = v101;
      }
      else
      {
        *(_QWORD *)v88 = v74;
        *(_QWORD *)(v88 + 8) = v73;
        *(_DWORD *)(v88 + 16) = v76;
        *(_DWORD *)(v88 + 20) = v75;
        *(_QWORD *)(v88 + 24) = v78;
        *(_QWORD *)(v88 + 32) = v77;
        *(_DWORD *)(v88 + 40) = v204;
        *(_DWORD *)(v88 + 44) = v207;
        *(_QWORD *)(v88 + 48) = v79;
        *(_DWORD *)(v88 + 56) = v80;
        *(_DWORD *)(v88 + 60) = v81;
        *(_QWORD *)(v88 + 64) = v82;
        *(_QWORD *)(v88 + 72) = v83;
        v89 = DeepCopy;
        *(_QWORD *)(v88 + 80) = DeepCopy;
        v90 = v88 + 88;
        v55 = (void *)propertyLista;
      }
      a1[34] = v90;

      v10 = v209;
      goto LABEL_145;
    }
    __asm { FMOV            V0.2D, #-1.0 }
    *(double *)&v216 = CFAbsoluteTimeGetCurrent();
    *(_QWORD *)v217 = 0xBFF0000000000000;
    *(_DWORD *)&v217[8] = -1;
    v60 = (void *)objc_claimAutoreleasedReturnValue(-[SAPlatformInfo objectForKey:](v10, "objectForKey:", CFSTR("server_timestamp")));
    if (!v60 || (v61 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v60, v61) & 1) == 0))
    {
      v91 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,serverTimeStampMissingOrInvalid\"}", (uint8_t *)&buf, 0x12u);
      }
LABEL_109:
      if (sub_100029410((void ****)a1 + 26, v10))
      {
        v112 = a1[13];
        if (v112)
          sub_100041B2C(v112, v10);
        v214 = -1.0;
        v113 = v55;
        operator new();
      }
      v114 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,saAlreadyExists\"}", (uint8_t *)&buf, 0x12u);
      }
LABEL_144:

LABEL_145:
      goto LABEL_146;
    }
    sub_10000E8A0(&buf, (char *)objc_msgSend(objc_retainAutorelease(v60), "cStringUsingEncoding:", 4));
    v62 = HIBYTE(buf_8[0]);
    if (buf_8[0] < 0)
      v62 = *(_QWORD *)&buf_8[0];
    if (v62)
    {
      CFAbsoluteTimeFromTimeString = SACommonUtils::extractCFAbsoluteTimeFromTimeString((unsigned __int8 *)&buf);
      v64 = (SACommonUtils *)sub_10003D044();
      if (*((_BYTE *)v64 + 184))
      {
        isLivabiltyEnabled = SACommonUtils::isLivabiltyEnabled(v64);
        v66 = *(double *)&v216 < 0.0 ? 1 : isLivabiltyEnabled;
        if ((v66 & 1) == 0
          && vabdd_f64(*(double *)&v216, CFAbsoluteTimeFromTimeString) > *((double *)sub_10003D044() + 21))
        {
          v67 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v221 = 68289026;
            *(_DWORD *)&v221[4] = 0;
            *(_WORD *)&v221[8] = 2082;
            *(_QWORD *)&v221[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,alertTooOld\"}", v221, 0x12u);
          }
          v68 = 0;
LABEL_106:
          if (SHIBYTE(buf_8[0]) < 0)
            operator delete((void *)buf);
          if ((v68 & 1) == 0)
            goto LABEL_144;
          goto LABEL_109;
        }
      }
    }
    else
    {
      v111 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v221 = 68289026;
        *(_DWORD *)&v221[4] = 0;
        *(_WORD *)&v221[8] = 2082;
        *(_QWORD *)&v221[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,serverTimeStampEmpty\"}", v221, 0x12u);
      }
    }
    v68 = 1;
    goto LABEL_106;
  }
  if (sub_10002A788(v6, v5) == 5)
  {
    v7 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    buf = 68289026;
    LOWORD(buf_8[0]) = 2082;
    *(_QWORD *)((char *)buf_8 + 2) = "";
    v8 = "{\"msg%{public}.0s\":\"#daemon,#warning,isIgneousAlert,notIgneous or IngneousTest\"}";
    goto LABEL_7;
  }

  v24 = v213;
  v25 = a1[16];
  if (v25)
  {
    v26 = sub_10002A788(v25, v24);
    if (v26 == 5)
    {
      v27 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        v28 = "{\"msg%{public}.0s\":\"#daemon,#warning,processIgneousAlert,notIgneous or IngneousTest\"}";
LABEL_42:
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&buf, 0x12u);
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    if ((sub_100030FE4(a1[16], v24) & 1) == 0)
    {
      v27 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        v28 = "{\"msg%{public}.0s\":\"#daemon,#warning,processIgneousAlert,production check failed\"}";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    v30 = CFAbsoluteTimeGetCurrent();
    if (*((double *)a1 + 32) <= 0.0 || v30 - *((double *)a1 + 31) >= 7200.0)
    {
      v35 = (id)SALogObjectGeneral;
      propertyList = v24;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        SACommonUtils::getAnyCmam((SACommonUtils *)v24, v221);
        v36 = v221[23] >= 0 ? v221 : *(_BYTE **)v221;
        buf = 68289283;
        LOWORD(buf_8[0]) = 2082;
        *(_QWORD *)((char *)buf_8 + 2) = "";
        WORD5(buf_8[0]) = 2081;
        *(_QWORD *)((char *)buf_8 + 12) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertReceived,processIgneousAlert,location needs refresh\", \"alert\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
        if ((v221[23] & 0x80000000) != 0)
          operator delete(*(void **)v221);
      }

      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v39 = *(_DWORD *)(a2 + 16);
      v40 = *(_DWORD *)(a2 + 20);
      v42 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(a2 + 32);
      v43 = *(_DWORD *)(a2 + 40);
      v44 = *(_DWORD *)(a2 + 44);
      v45 = *(_QWORD *)(a2 + 48);
      v46 = *(_DWORD *)(a2 + 56);
      v47 = *(_DWORD *)(a2 + 60);
      v206 = *(_QWORD *)(a2 + 64);
      v208 = *(_QWORD *)(a2 + 72);
      v48 = (void *)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, propertyList, 1uLL);
      v49 = v48;
      v51 = a1[34];
      v50 = a1[35];
      if (v51 >= v50)
      {
        v115 = a1[33];
        v116 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v51 - v115) >> 3);
        if ((unint64_t)(v116 + 1) > 0x2E8BA2E8BA2E8BALL)
          sub_100004C50();
        v117 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v50 - v115) >> 3);
        v118 = 2 * v117;
        if (2 * v117 <= v116 + 1)
          v118 = v116 + 1;
        if (v117 >= 0x1745D1745D1745DLL)
          v119 = 0x2E8BA2E8BA2E8BALL;
        else
          v119 = v118;
        *((_QWORD *)&buf_8[1] + 1) = a1 + 35;
        if (v119)
        {
          v120 = (char *)sub_100079758(v119);
          v205 = v121;
          v122 = v120;
        }
        else
        {
          v122 = 0;
          v205 = 0;
        }
        v133 = &v122[88 * v116];
        *(_QWORD *)v133 = v38;
        *((_QWORD *)v133 + 1) = v37;
        *((_DWORD *)v133 + 4) = v39;
        *((_DWORD *)v133 + 5) = v40;
        *((_QWORD *)v133 + 3) = v42;
        *((_QWORD *)v133 + 4) = v41;
        *((_DWORD *)v133 + 10) = v43;
        *((_DWORD *)v133 + 11) = v44;
        *((_QWORD *)v133 + 6) = v45;
        *((_DWORD *)v133 + 14) = v46;
        *((_DWORD *)v133 + 15) = v47;
        *((_QWORD *)v133 + 8) = v206;
        *((_QWORD *)v133 + 9) = v208;
        *((_QWORD *)v133 + 10) = v49;
        v134 = a1[33];
        v135 = a1[34];
        if (v135 == v134)
        {
          v141 = vdupq_n_s64(v135);
          v136 = v133;
        }
        else
        {
          v136 = v133;
          do
          {
            *(_OWORD *)(v136 - 88) = *(_OWORD *)(v135 - 88);
            v137 = *(_OWORD *)(v135 - 72);
            v138 = *(_OWORD *)(v135 - 56);
            v139 = *(_OWORD *)(v135 - 40);
            *(_OWORD *)(v136 - 24) = *(_OWORD *)(v135 - 24);
            *(_OWORD *)(v136 - 40) = v139;
            *(_OWORD *)(v136 - 56) = v138;
            *(_OWORD *)(v136 - 72) = v137;
            v140 = *(_QWORD *)(v135 - 8);
            *(_QWORD *)(v135 - 8) = 0;
            *((_QWORD *)v136 - 1) = v140;
            v136 -= 88;
            v135 -= 88;
          }
          while (v135 != v134);
          v141 = *(int64x2_t *)(a1 + 33);
        }
        v52 = v133 + 88;
        a1[33] = v136;
        a1[34] = v133 + 88;
        buf_8[0] = v141;
        v142 = a1[35];
        a1[35] = &v122[88 * v205];
        *(_QWORD *)&buf_8[1] = v142;
        buf = v141.i64[0];
        sub_1000797A0((uint64_t)&buf);
      }
      else
      {
        *(_QWORD *)v51 = v38;
        *(_QWORD *)(v51 + 8) = v37;
        *(_DWORD *)(v51 + 16) = v39;
        *(_DWORD *)(v51 + 20) = v40;
        *(_QWORD *)(v51 + 24) = v42;
        *(_QWORD *)(v51 + 32) = v41;
        *(_DWORD *)(v51 + 40) = v43;
        *(_DWORD *)(v51 + 44) = v44;
        *(_QWORD *)(v51 + 48) = v45;
        *(_DWORD *)(v51 + 56) = v46;
        *(_DWORD *)(v51 + 60) = v47;
        *(_QWORD *)(v51 + 64) = v206;
        *(_QWORD *)(v51 + 72) = v208;
        *(_QWORD *)(v51 + 80) = v48;
        v52 = (char *)(v51 + 88);
      }
      a1[34] = v52;
      v143 = a1[4];
      if (v143)
        (*(void (**)(uint64_t))(*(_QWORD *)v143 + 56))(v143);

      v24 = (id)propertyList;
      goto LABEL_43;
    }
    LOBYTE(buf) = 0;
    memset(buf_8, 0, sizeof(buf_8));
    v236 = 0u;
    v237 = 0u;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    v241 = 0u;
    v242 = 0u;
    v243 = 0u;
    v244 = 0u;
    v245 = 0u;
    v246 = 0;
    v247 = 1;
    v254 = 0;
    v248 = 0u;
    v249 = 0u;
    v250 = 0u;
    v251 = 0u;
    v252 = 0u;
    memset(v253, 0, 25);
    v255 = -1;
    v256 = 0;
    v257 = -4131;
    v259 = 0;
    v258 = 0;
    switch(v26)
    {
      case 1:
        if ((sub_10002D0D4(a1[16], v24, (uint64_t)&buf) & 1) != 0)
        {
          if (!sub_10002E1E8(a1[16], (uint64_t)&buf))
          {
            sub_100030770(a1[16], (uint64_t)&buf);
            v147 = a1[16];
            v148 = *((double *)&v248 + 1);
            v149 = *(double *)&v248;
            sub_10000E8A0(v221, "");
            sub_10002CD2C(v147, 0, v221, (uint64_t)buf_8, v148, v149);
            if ((v221[23] & 0x80000000) != 0)
              operator delete(*(void **)v221);
            v150 = a1[5];
            if (v150)
              (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v150 + 48))(v150, buf_8);
            v151 = (SASettings *)a1[2];
            if (v151)
            {
              v152 = *(_OWORD *)(a2 + 48);
              v231 = *(_OWORD *)(a2 + 32);
              v232 = v152;
              v233 = *(_OWORD *)(a2 + 64);
              v153 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)__dst = *(_OWORD *)a2;
              v230 = v153;
              sub_100038B9C((uint64_t)v151, (uint64_t)&buf, (__int128 *)__dst, (double *)a1 + 29);
            }
            if (a1[21])
            {
              v154 = SASettings::instance(v151);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v154 + 88))(v154))
              {
                memset(v224, 0, sizeof(v224));
                memset(v223, 0, sizeof(v223));
                memset(v222, 0, sizeof(v222));
                memset(v221, 0, sizeof(v221));
                __asm { FMOV            V0.2D, #10.0 }
                *(_OWORD *)&v225[1] = _Q0;
                __asm { FMOV            V0.2D, #-1.0 }
                v226 = _Q0;
                v227 = _Q0;
                v225[0] = 0;
                v228 = 0xBFF0000000000000;
                v157 = sub_1000687EC();
                sub_10002AEE8((uint64_t)v157, (std::string *)v221);
                if ((v221[23] & 0x80000000) != 0)
                {
                  sub_100004870(v215, *(void **)v221, *(unint64_t *)&v221[8]);
                }
                else
                {
                  *(_OWORD *)v215 = *(_OWORD *)v221;
                  *(_QWORD *)&v215[16] = *(_QWORD *)&v221[16];
                }
                v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](NSLocale, "preferredLanguages"));
                v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "objectAtIndex:", 0));

                v162 = SALogObjectGeneral;
                if (v161)
                {
                  v163 = (id)SALogObjectGeneral;
                  if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                  {
                    v164 = objc_msgSend(objc_retainAutorelease(v161), "UTF8String");
                    v216 = 68289283;
                    *(_WORD *)v217 = 2082;
                    *(_QWORD *)&v217[2] = "";
                    *(_WORD *)&v217[10] = 2081;
                    *(_QWORD *)&v217[12] = v164;
                    _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,preferredLanguage,\", \"language\":%{private, location:escape_only}s}", (uint8_t *)&v216, 0x1Cu);
                  }

                  if (objc_msgSend(v161, "containsString:", CFSTR("es-")))
                    std::string::operator=((std::string *)v215, (const std::string *)&v221[24]);
                }
                else if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  v216 = 68289026;
                  *(_WORD *)v217 = 2082;
                  *(_QWORD *)&v217[2] = "";
                  _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,preferredLanguage, nil,\"}", (uint8_t *)&v216, 0x12u);
                }
                sub_10000E8A0(&v216, "Earthquake Alert");
                (*(void (**)(_QWORD, uint64_t *, _BYTE *))(*(_QWORD *)a1[21] + 16))(a1[21], &v216, v215);
                (*(void (**)(_QWORD))(*(_QWORD *)a1[21] + 24))(a1[21]);
                if ((v217[15] & 0x80000000) != 0)
                  operator delete((void *)v216);

                if ((v215[23] & 0x80000000) != 0)
                  operator delete(*(void **)v215);
                sub_100032A34((uint64_t)v221);
              }
            }
            goto LABEL_188;
          }
          v31 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v221 = 68289026;
            *(_DWORD *)&v221[4] = 0;
            *(_WORD *)&v221[8] = 2082;
            *(_QWORD *)&v221[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,USGSAlert stale Alert\"}", v221, 0x12u);
          }
          v32 = a1[2];
          if (v32)
          {
            v33 = *(_OWORD *)(a2 + 48);
            v222[0] = *(_OWORD *)(a2 + 32);
            v222[1] = v33;
            v222[2] = *(_OWORD *)(a2 + 64);
            v34 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v221 = *(_OWORD *)a2;
            *(_OWORD *)&v221[16] = v34;
            sub_100038B9C(v32, (uint64_t)&buf, (__int128 *)v221, (double *)a1 + 29);
          }
        }
        else
        {
          v127 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v221 = 68289026;
            *(_DWORD *)&v221[4] = 0;
            *(_WORD *)&v221[8] = 2082;
            *(_QWORD *)&v221[10] = "";
            v128 = "{\"msg%{public}.0s\":\"#daemon,USGSAlert fails precheck\"}";
            goto LABEL_247;
          }
        }
        goto LABEL_252;
      case 2:
        if (!sub_10002E4B8(a1[16], v24, (uint64_t)&buf))
          goto LABEL_133;
        v129 = a1[2];
        if (v129)
        {
          v130 = *(_OWORD *)(a2 + 48);
          v231 = *(_OWORD *)(a2 + 32);
          v232 = v130;
          v233 = *(_OWORD *)(a2 + 64);
          v131 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)__dst = *(_OWORD *)a2;
          v230 = v131;
          sub_100038B9C(v129, (uint64_t)&buf, (__int128 *)__dst, (double *)a1 + 29);
        }
        goto LABEL_188;
      case 3:
        if (sub_10002F208(a1[16], v24, (uint64_t)&buf))
        {
          memset(v224, 0, sizeof(v224));
          memset(v223, 0, sizeof(v223));
          memset(v222, 0, sizeof(v222));
          memset(v221, 0, sizeof(v221));
          __asm { FMOV            V0.2D, #10.0 }
          *(_OWORD *)&v225[1] = _Q0;
          __asm { FMOV            V0.2D, #-1.0 }
          v226 = _Q0;
          v227 = _Q0;
          v225[0] = 0;
          v228 = 0xBFF0000000000000;
          sub_100030E2C(a1[16], (uint64_t)&buf);
          v125 = sub_1000687EC();
          sub_10002AEE8((uint64_t)v125, (std::string *)v221);
          v126 = a1[16];
          if (SBYTE7(buf_8[1]) < 0)
          {
            sub_100004870(__dst, *(void **)&buf_8[0], *((unint64_t *)&buf_8[0] + 1));
          }
          else
          {
            *(_OWORD *)__dst = buf_8[0];
            *(_QWORD *)&v230 = *(_QWORD *)&buf_8[1];
          }
          v132 = sub_10002D80C(v126, (void **)__dst, (uint64_t)v221, 0);
          if (SBYTE7(v230) < 0)
            operator delete(*(void **)__dst);
          sub_100032A34((uint64_t)v221);
          if (v132)
            (*(void (**)(_QWORD, _OWORD *, char *, __int128 *))(*(_QWORD *)a1[5] + 64))(a1[5], buf_8, (char *)&v238 + 8, &v240);
          v158 = a1[2];
          if (v158)
          {
            v159 = *(_QWORD *)(v158 + 144);
            if (v159)
              sub_1000224CC(v159, (uint64_t)&buf);
          }
          v247 = 3;
        }
        else
        {
LABEL_133:
          v132 = 0;
          v247 = v26;
        }
        goto LABEL_198;
      case 4:
        if ((sub_10002DAB0(a1[16], v24, (uint64_t)&buf) & 1) != 0)
        {
          if (!sub_10002E1E8(a1[16], (uint64_t)&buf))
          {
            sub_100030770(a1[16], (uint64_t)&buf);
            v144 = a1[16];
            v145 = *((double *)&v248 + 1);
            v146 = *(double *)&v248;
            sub_10000E8A0(v221, "");
            sub_10002CD2C(v144, 0, v221, (uint64_t)buf_8, v145, v146);
            if ((v221[23] & 0x80000000) != 0)
              operator delete(*(void **)v221);
            if (BYTE8(v253[1]))
              (*(void (**)(_QWORD, id, uint64_t *))(*(_QWORD *)a1[5] + 56))(a1[5], v24, &buf);
LABEL_188:
            v247 = v26;
            v165 = a1[18];
            if (v165)
            {
              v166 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v221 = 68289026;
                *(_DWORD *)&v221[4] = 0;
                *(_WORD *)&v221[8] = 2082;
                *(_QWORD *)&v221[10] = "";
                _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ctsa,processIgneousAlert,Send to Ble\"}", v221, 0x12u);
                v165 = a1[18];
              }
              v167 = sub_10007FAC0(v165, (uint64_t)&buf);
              v168 = a1[2];
              if (v168)
                v169 = v167;
              else
                v169 = 0;
              if (v169 == 1)
              {
                v170 = a1[18];
                *(_WORD *)v221 = *(_WORD *)v170;
                *(_DWORD *)&v221[4] = *(_DWORD *)(v170 + 64);
                v171 = *(double *)(v170 + 72);
                *(float *)&v221[8] = v171;
                v172 = *(_QWORD *)(v168 + 152);
                if (v172)
                  sub_100042E84(v172, (uint64_t)&buf, a2, (uint64_t)v221);
              }
            }
            v132 = 1;
LABEL_198:
            v173 = SALogObjectGeneral;
            v174 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
            if (v174)
            {
              if (SHIBYTE(v236) < 0)
              {
                v175 = (const char *)*((_QWORD *)&buf_8[1] + 1);
                _ZF = (_QWORD)v236 == 0;
              }
              else
              {
                v175 = (char *)&buf_8[1] + 8;
                _ZF = SHIBYTE(v236) == 0;
              }
              if (_ZF)
                v177 = "";
              else
                v177 = v175;
              if (SBYTE7(buf_8[1]) < 0)
              {
                if (*((_QWORD *)&buf_8[0] + 1))
                  v178 = *(const char **)&buf_8[0];
                else
                  v178 = "";
              }
              else if (BYTE7(buf_8[1]))
              {
                v178 = (const char *)buf_8;
              }
              else
              {
                v178 = "";
              }
              if (SHIBYTE(v239) < 0)
              {
                v179 = (const char *)*((_QWORD *)&v238 + 1);
                v180 = (_QWORD)v239 == 0;
              }
              else
              {
                v179 = (char *)&v238 + 8;
                v180 = SHIBYTE(v239) == 0;
              }
              if (v180)
                v181 = "";
              else
                v181 = v179;
              if (SBYTE7(v241) < 0)
              {
                v182 = (const char *)v240;
                v183 = *((_QWORD *)&v240 + 1) == 0;
              }
              else
              {
                v182 = (const char *)&v240;
                v183 = SBYTE7(v241) == 0;
              }
              if (v183)
                v184 = "";
              else
                v184 = v182;
              *(_DWORD *)v221 = 68293123;
              *(_DWORD *)&v221[4] = 0;
              *(_WORD *)&v221[8] = 2082;
              *(_QWORD *)&v221[10] = "";
              *(_WORD *)&v221[18] = 1025;
              *(_DWORD *)&v221[20] = v26;
              *(_WORD *)&v221[24] = 1025;
              *(_DWORD *)&v221[26] = v132;
              *(_WORD *)&v221[30] = 2081;
              *(_QWORD *)&v222[0] = v177;
              WORD4(v222[0]) = 2081;
              *(_QWORD *)((char *)v222 + 10) = v178;
              WORD1(v222[1]) = 2081;
              *(_QWORD *)((char *)&v222[1] + 4) = v181;
              WORD6(v222[1]) = 2081;
              *(_QWORD *)((char *)&v222[1] + 14) = v184;
              WORD3(v222[2]) = 2049;
              *((_QWORD *)&v222[2] + 1) = v248;
              LOWORD(v223[0]) = 2049;
              *(_QWORD *)((char *)v223 + 2) = *((_QWORD *)&v248 + 1);
              WORD5(v223[0]) = 2049;
              *(_QWORD *)((char *)v223 + 12) = v249;
              WORD2(v223[1]) = 2049;
              *(_QWORD *)((char *)&v223[1] + 6) = *((_QWORD *)&v249 + 1);
              HIWORD(v223[1]) = 2049;
              *(_QWORD *)&v224[0] = v250;
              WORD4(v224[0]) = 2049;
              *(_QWORD *)((char *)v224 + 10) = v251;
              WORD1(v224[1]) = 2049;
              *(_QWORD *)((char *)&v224[1] + 4) = *((_QWORD *)&v252 + 1);
              WORD6(v224[1]) = 2049;
              *(_QWORD *)((char *)&v224[1] + 14) = *((_QWORD *)&v251 + 1);
              WORD3(v224[2]) = 2049;
              *((_QWORD *)&v224[2] + 1) = v252;
              LOWORD(v225[0]) = 2049;
              *(_QWORD *)((char *)v225 + 2) = *(_QWORD *)&v253[0];
              _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ctsa,processIgneousAlert\", \"AlertType\":%{private}d, \"result\":%{private}d, \"source\":%{private, location:escape_only}s, \"uid\":%{private, location:escape_only}s, \"alertEnglish\":%{private, location:escape_only}s, \"alertSpanish\":%{private, location:escape_only}s, \"ingress_to_server_ts\":\"%{private}0.3f\", \"egress_from_source_ts\":\"%{private}0.3f\", \"event_origin_ts\":\"%{private}0.3f\", \"effective\":\"%{private}0.3f\", \"expires\":\"%{private}0.3f\", \"event_update_number\":\"%{private}0.3f\", \"magnitude\":\"%{private}0.3f\", \"epi_latitude\":\"%{private}0.3f\", \"epi_longitude\":\"%{private}0.3f\", \"mmiLevel\":\"%{private}0.3f\"}", v221, 0xAAu);
            }
            if (v26 == 2 || v26 == 1 && (SACommonUtils::isLivabiltyEnabled((SACommonUtils *)v174) & 1) == 0)
            {
              v185 = a1[1];
              if (!v185)
              {
                v127 = SALogObjectGeneral;
                if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_252;
                *(_DWORD *)v221 = 68289026;
                *(_DWORD *)&v221[4] = 0;
                *(_WORD *)&v221[8] = 2082;
                *(_QWORD *)&v221[10] = "";
                v128 = "{\"msg%{public}.0s\":\"#ctsa,processIgneousAlert,invalid channelManager\"}";
                goto LABEL_247;
              }
              propertyListb = v24;
              sub_1000412D4(v185 + 128, (unsigned __int8 *)&v214);
              v186 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v221 = 68290307;
                *(_DWORD *)&v221[4] = 0;
                *(_WORD *)&v221[8] = 2082;
                *(_QWORD *)&v221[10] = "";
                *(_WORD *)&v221[18] = 1025;
                *(_DWORD *)&v221[20] = BYTE4(v214);
                *(_WORD *)&v221[24] = 1025;
                *(_DWORD *)&v221[26] = BYTE1(v214);
                *(_WORD *)&v221[30] = 1025;
                LODWORD(v222[0]) = BYTE3(v214);
                WORD2(v222[0]) = 1025;
                *(_DWORD *)((char *)v222 + 6) = BYTE2(v214);
                WORD5(v222[0]) = 1025;
                HIDWORD(v222[0]) = LOBYTE(v214);
                _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,processIgneousAlert,state\", \"isEnabled\":%{private}hhd, \"inSupportedCountry\":%{private}hhd, \"isInMagnetMode\":%{private}hhd, \"isUserOptedIn\":%{private}hhd, \"inCoverageRegion\":%{private}hhd}", v221, 0x30u);
              }
              *(double *)&v216 = COERCE_DOUBLE(CFSTR("Guid"));
              if ((SBYTE7(buf_8[1]) & 0x80u) == 0)
                v187 = buf_8;
              else
                v187 = *(_OWORD **)&buf_8[0];
              v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v187));
              *(_QWORD *)v221 = v188;
              *(_QWORD *)v217 = CFSTR("saUpdateNumber");
              v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)&v251));
              *(_QWORD *)&v221[8] = v189;
              *(_QWORD *)&v217[8] = CFSTR("saAlertSource");
              if (v236 >= 0)
                v190 = (char *)&buf_8[1] + 8;
              else
                v190 = (char *)*((_QWORD *)&buf_8[1] + 1);
              v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v190));
              *(_QWORD *)&v221[16] = v191;
              *(_QWORD *)&v217[16] = CFSTR("saMagnitude");
              v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)&v252 + 1)));
              *(_QWORD *)&v221[24] = v192;
              v218 = CFSTR("saEpicenterLat");
              v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)&v251 + 1)));
              *(_QWORD *)&v222[0] = v193;
              v219 = CFSTR("saEpicenterLon");
              v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)&v252));
              *((_QWORD *)&v222[0] + 1) = v194;
              v220 = CFSTR("saMMILevel");
              v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)v253));
              *(_QWORD *)&v222[1] = v195;
              v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v221, &v216, 7));

              v197 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v215 = 68289283;
                *(_DWORD *)&v215[4] = 0;
                *(_WORD *)&v215[8] = 2082;
                *(_QWORD *)&v215[10] = "";
                *(_WORD *)&v215[18] = 2113;
                *(_QWORD *)&v215[20] = v196;
                _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,processIgneousAlert\", \"dictionary\":%{private, location:escape_only}@}", v215, 0x1Cu);
              }
              v198 = BYTE7(buf_8[1]);
              if (SBYTE7(buf_8[1]) < 0)
                v198 = *((_QWORD *)&buf_8[0] + 1);
              if (v198)
              {
                v199 = (void *)objc_opt_new(CMSafetyAnomaly);
                v200 = v199;
                if (v199)
                  objc_msgSend(v199, "notifyEvent:", v196);

              }
              else
              {
                v201 = SALogObjectGeneral;
                if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v215 = 68289026;
                  *(_DWORD *)&v215[4] = 0;
                  *(_WORD *)&v215[8] = 2082;
                  *(_QWORD *)&v215[10] = "";
                  _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,processIgneousAlert,invalid UID\"}", v215, 0x12u);
                }

              }
              v24 = (id)propertyListb;
            }
LABEL_252:
            sub_100032ACC((uint64_t)&buf);
            goto LABEL_43;
          }
          v127 = SALogObjectGeneral;
          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            goto LABEL_252;
          *(_DWORD *)v221 = 68289026;
          *(_DWORD *)&v221[4] = 0;
          *(_WORD *)&v221[8] = 2082;
          *(_QWORD *)&v221[10] = "";
          v128 = "{\"msg%{public}.0s\":\"#daemon,kAlertLivability isStaleAlert fails\"}";
        }
        else
        {
          v127 = SALogObjectGeneral;
          if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            goto LABEL_252;
          *(_DWORD *)v221 = 68289026;
          *(_DWORD *)&v221[4] = 0;
          *(_WORD *)&v221[8] = 2082;
          *(_QWORD *)&v221[10] = "";
          v128 = "{\"msg%{public}.0s\":\"#daemon,kAlertLivability fails precheck\"}";
        }
LABEL_247:
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, v128, v221, 0x12u);
        goto LABEL_252;
      default:
        goto LABEL_252;
    }
  }
  v27 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    LOWORD(buf_8[0]) = 2082;
    *(_QWORD *)((char *)buf_8 + 2) = "";
    v28 = "{\"msg%{public}.0s\":\"#daemon,#warning,processIgneousAlert,invalid parser\"}";
    goto LABEL_42;
  }
LABEL_43:

LABEL_147:
}

void sub_10007811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a72;
  void *v72;
  void *v73;

  if (a24 < 0)
    operator delete(__p);
  sub_100032A34((uint64_t)&a34);
  sub_100032ACC((uint64_t)&a72);

  _Unwind_Resume(a1);
}

void sub_100078408(uint64_t a1, double a2, double a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint8_t buf[8];
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *__p;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_1000687EC();
  v15 = 0;
  v16 = 0;
  v14 = 0;
  sub_100068394(&v14, v6[19], v6[20], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
  v7 = v14;
  v8 = v15;
  if (v14 == v15)
  {
LABEL_34:
    v13 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v19[0]) = 2082;
      *(void **)((char *)v19 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,igneousRegionCheck,rd.size==0,!updateRegionCoverage\"}", buf, 0x12u);
    }
  }
  else
  {
    while (1)
    {
      sub_10001D8C0((uint64_t)buf, v7);
      if (v27 == 0.0 && v28 == 0.0 && v29 == 0.0 && v30 == 0.0)
      {
        v9 = 3;
      }
      else if (v27 > a2 || v29 < a2 || v28 > a3 || v30 < a3)
      {
        v9 = 0;
      }
      else
      {
        v9 = 1;
        sub_1000790B0(a1, 1);
      }
      v17 = (void **)&v34;
      sub_100004EC0(&v17);
      v17 = (void **)&v33;
      sub_100004EC0(&v17);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19[0]);
      if (v9 != 3 && v9)
        break;
      v7 += 280;
      if (v7 == v8)
      {
        if (v15 == v14)
          goto LABEL_34;
        sub_1000790B0(a1, 0);
        break;
      }
    }
  }
  *(_QWORD *)buf = &v14;
  sub_1000684EC((void ***)buf);
}

void sub_100078644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_1000684EC(&a13);
  _Unwind_Resume(a1);
}

void sub_10007867C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *__p;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289283;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,object\", \"object\":%{private, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  v6 = objc_retainAutorelease(v3);
  sub_10000E8A0(&__p, (char *)objc_msgSend(v6, "UTF8String"));
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v4 + 40) + 40))(*(_QWORD *)(v4 + 40), &__p);
  if (SBYTE3(v11) < 0)
    operator delete(__p);

}

void sub_100078794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000787C4(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  const char *string;
  NSObject *v4;
  void *v5;
  void *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  v2 = a2;
  string = xpc_dictionary_get_string(v2, _xpc_event_key_name);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = string;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,com.apple.notifyd.matching rebroadcast\", \"notificationName\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x1Cu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
  objc_msgSend(v5, "postNotificationName:object:", v6, 0);

}

void sub_1000788E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10007891C(NSObject **a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD block[6];
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_1000273E4(&v28);
  v7 = v29;
  if (v29)
  {
    v8 = (unint64_t *)&v29->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100078AD0;
  block[3] = &unk_1000F4D50;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  block[4] = a1;
  block[5] = v11;
  v27 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  dispatch_async(v10, block);
  v15 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_1000273E4(&v24);
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_100078AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100028C54((uint64_t)va);
  sub_100028C54(v2);
  _Unwind_Resume(a1);
}

void sub_100078AD0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[7];

  v2 = a1[4];
  v3 = objc_autoreleasePoolPush();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_100078BB4;
  v10[3] = &unk_1000F4D50;
  v4 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v10[4] = v2;
  v10[5] = v4;
  v10[6] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_100078BB4(v10);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  objc_autoreleasePoolPop(v3);
}

void sub_100078BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100028C54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100078BB4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  SASettings *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v2 = (_QWORD *)a1[4];
  v3 = v2[1];
  if (v3)
  {
    v4 = (std::__shared_weak_count *)a1[6];
    v56 = a1[5];
    v57 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    sub_1000271EC(v3, &v56);
    v7 = v57;
    if (v57)
    {
      v8 = (unint64_t *)&v57->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = v2[4];
  if (v10)
  {
    v11 = (std::__shared_weak_count *)a1[6];
    v54 = a1[5];
    v55 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v54);
    v14 = v55;
    if (v55)
    {
      v15 = (unint64_t *)&v55->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = v2[5];
  if (v17)
  {
    v18 = (std::__shared_weak_count *)a1[6];
    v52 = a1[5];
    v53 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 32))(v17, &v52);
    v21 = v53;
    if (v53)
    {
      v22 = (unint64_t *)&v53->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = v2[7];
  if (v24)
  {
    v25 = (std::__shared_weak_count *)a1[6];
    v50 = a1[5];
    v51 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 16))(v24, &v50);
    v28 = v51;
    if (v51)
    {
      v29 = (unint64_t *)&v51->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v31 = v2[8];
  if (v31)
  {
    v32 = (std::__shared_weak_count *)a1[6];
    v48 = a1[5];
    v49 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 16))(v31, &v48);
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v38 = (SASettings *)v2[2];
  if (v38)
  {
    v39 = (std::__shared_weak_count *)a1[6];
    v46 = a1[5];
    v47 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    sub_10003B440((uint64_t)v38, &v46);
    v42 = v47;
    if (v47)
    {
      v43 = (unint64_t *)&v47->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  return SASettings::finalize(v38);
}

void sub_100078E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100028C54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100078EC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100078EEC(uint64_t a1)
{
  return sub_100028C54(a1 + 40);
}

BOOL sub_100078EF4()
{
  SACommonUtils *v0;
  uint32_t v1;
  uint32_t v2;
  _BOOL8 v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint32_t v10;
  __int16 v11;
  _BOOL4 v12;

  v0 = (SACommonUtils *)sub_10003D044();
  v1 = *((_DWORD *)v0 + 59);
  if (SACommonUtils::isLivabiltyEnabled(v0))
    v2 = 100;
  else
    v2 = v1;
  if ((v2 & 0x80000000) != 0)
    v2 = *((_DWORD *)sub_1000687EC() + 3);
  v3 = v2 <= 0x64 && arc4random_uniform(0x64u) <= v2;
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1025;
    v10 = v2;
    v11 = 1025;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,isParticipatingInMetrics\", \"appc\":%{private}d, \"isParticipating\":%{private}hhd}", (uint8_t *)v6, 0x1Eu);
  }
  return v3;
}

void sub_100079008(uint64_t a1, int a2)
{
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v4 = mach_continuous_time();
  v5 = sub_1000842A4(v4);
  if (a2 || v5 - *(double *)(a1 + 312) > 86400.0)
  {
    *(double *)(a1 + 312) = v5;
    *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 328) = -1;
    v6 = sub_100078EF4();
    sub_100026338(*(_QWORD *)(a1 + 8), v6);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 136);
      if (v8)
        sub_100052C90(v8 + 112, v6);
      v9 = "kNone";
      *(_BYTE *)(v7 + 184) = v6;
      if (v6)
        v9 = "kAny";
      *(_QWORD *)(v7 + 64) = v9;
    }
  }
}

void sub_1000790B0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1025;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,updateRegionCoverage\", \"isCovered\":%{private}hhd}", (uint8_t *)v8, 0x18u);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
  objc_msgSend(v5, "setCurrentLocationInCoveredRegion:", a2);

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 136);
    if (v7)
      sub_10005AD3C(v7, a2);
  }
}

void sub_1000791B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000791CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F4C(a1, a2);
  sub_100004F4C(v4 + 32, a2 + 32);
  sub_100004F4C(a1 + 64, a2 + 64);
  sub_100004F4C(a1 + 96, a2 + 96);
  sub_100004F4C(a1 + 128, a2 + 128);
  return a1;
}

void sub_100079240(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = (_QWORD *)v1[15];
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = (_QWORD *)v1[11];
  if (v9 == v3)
  {
    v10 = 4;
    v9 = v3;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = (_QWORD *)v1[7];
  if (v11 == v2)
  {
    v12 = 4;
    v11 = v2;
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  v13 = (_QWORD *)v1[3];
  if (v13 == v1)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_21;
    v14 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v14))(v1);
LABEL_21:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007931C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F4C(a1, a2);
  sub_100004F4C(v4 + 32, a2 + 32);
  sub_100004F4C(a1 + 64, a2 + 64);
  sub_100004F4C(a1 + 96, a2 + 96);
  sub_100004F4C(a1 + 128, a2 + 128);
  sub_100004F4C(a1 + 160, a2 + 160);
  sub_100004F4C(a1 + 192, a2 + 192);
  sub_100004F4C(a1 + 224, a2 + 224);
  sub_100004F4C(a1 + 256, a2 + 256);
  return a1;
}

void sub_1000793E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v10 = (_QWORD *)v1[31];
  if (v10 == v8)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
    v8 = (_QWORD *)v1[31];
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v11))(v8);
LABEL_6:
  v12 = (_QWORD *)v1[27];
  if (v12 == v7)
  {
    v13 = 4;
    v12 = v7;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = (_QWORD *)v1[23];
  if (v14 == v6)
  {
    v15 = 4;
    v14 = v6;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  v16 = (_QWORD *)v1[19];
  if (v16 == v5)
  {
    v17 = 4;
    v16 = v5;
  }
  else
  {
    if (!v16)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  v18 = (_QWORD *)v1[15];
  if (v18 == v4)
  {
    v19 = 4;
    v18 = v4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  v20 = (_QWORD *)v1[11];
  if (v20 == v3)
  {
    v21 = 4;
    v20 = v3;
  }
  else
  {
    if (!v20)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  v22 = (_QWORD *)v1[7];
  if (v22 == v2)
  {
    v23 = 4;
    v22 = v2;
  }
  else
  {
    if (!v22)
      goto LABEL_36;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_36:
  v24 = (_QWORD *)v1[3];
  if (v24 == v1)
  {
    v25 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_41;
    v25 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v25))(v1);
LABEL_41:
  _Unwind_Resume(exception_object);
}

void sub_10007957C()
{
  JUMPOUT(0x100079518);
}

void sub_100079584()
{
  JUMPOUT(0x100079544);
}

_QWORD *sub_10007958C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a1 + 32;
  v3 = (_QWORD *)a1[35];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[31];
  if (v5 == a1 + 28)
  {
    v6 = 4;
    v5 = a1 + 28;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[27];
  if (v7 == a1 + 24)
  {
    v8 = 4;
    v7 = a1 + 24;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[23];
  if (v9 == a1 + 20)
  {
    v10 = 4;
    v9 = a1 + 20;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[19];
  if (v11 == a1 + 16)
  {
    v12 = 4;
    v11 = a1 + 16;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[15];
  if (v13 == a1 + 12)
  {
    v14 = 4;
    v13 = a1 + 12;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[11];
  if (v15 == a1 + 8)
  {
    v16 = 4;
    v15 = a1 + 8;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[7];
  if (v17 == a1 + 4)
  {
    v18 = 4;
    v17 = a1 + 4;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[3];
  if (v19 == a1)
  {
    v20 = 4;
    v19 = a1;
    goto LABEL_45;
  }
  if (v19)
  {
    v20 = 5;
LABEL_45:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  return a1;
}

void *sub_100079758(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    sub_100004984();
  return operator new(88 * a1);
}

uint64_t sub_1000797A0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000797F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100079800(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F4D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100079830(uint64_t a1)
{
  return sub_100035C94(a1 + 24);
}

void sub_100079840()
{
  operator delete();
}

_QWORD *sub_100079854(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4DE0;
  result[1] = v3;
  return result;
}

uint64_t sub_100079888(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4DE0;
  a2[1] = v2;
  return result;
}

void sub_1000798A4(uint64_t a1, char **a2)
{
  sub_100074C6C(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1000798B0(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4E50))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000798EC()
{
  return &off_1000F4E50;
}

_QWORD *sub_1000798F8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100079A60(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100079A70()
{
  operator delete();
}

_QWORD *sub_100079A84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4E70;
  result[1] = v3;
  return result;
}

uint64_t sub_100079AB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4E70;
  a2[1] = v2;
  return result;
}

void sub_100079AD4(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
    sub_100039410(v3, v4);

}

void sub_100079B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100079B2C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4ED0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100079B68()
{
  return &off_1000F4ED0;
}

_QWORD *sub_100079B74(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100079CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100079CEC()
{
  operator delete();
}

_QWORD *sub_100079D00(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_100079D34(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4EF0;
  a2[1] = v2;
  return result;
}

void sub_100079D50(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_100041000(*(_QWORD *)(v3 + 8) + 128, v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 1026;
      v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onSupportedByTelephony\", \"status\":%{public}hhd}", (uint8_t *)v6, 0x18u);
    }
    *(_BYTE *)(v4 + 44) = v2;
  }
}

uint64_t sub_100079E38(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4F50))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100079E74()
{
  return &off_1000F4F50;
}

_QWORD *sub_100079E80(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100079FE8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_100079FF8()
{
  operator delete();
}

_QWORD *sub_10007A00C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4F70;
  result[1] = v3;
  return result;
}

uint64_t sub_10007A040(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4F70;
  a2[1] = v2;
  return result;
}

void sub_10007A05C(uint64_t a1, unsigned __int8 *a2)
{
  sub_100075374(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10007A068(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F4FD0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007A0A4()
{
  return &off_1000F4FD0;
}

void sub_10007A0B4()
{
  operator delete();
}

_QWORD *sub_10007A0C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007A0FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4FF0;
  a2[1] = v2;
  return result;
}

void sub_10007A118(uint64_t a1, id *a2)
{
  SAPlatformInfo *v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  CFAbsoluteTime Current;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  const __CFString *v22;
  uint64_t v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  unsigned int v29;

  v2 = (SAPlatformInfo *)*a2;
  if ((objc_msgSend(*(id *)SAPlatformInfo::instance(v2), "isEqualToString:", CFSTR("iPhone")) & 1) == 0)
    goto LABEL_37;
  v3 = sub_100003038();
  if (!*((_BYTE *)v3 + 119) || !*((_BYTE *)v3 + 118))
  {
    v16 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_37;
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v17 = "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,not allowed\"}";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    goto LABEL_37;
  }
  if (!v2)
  {
    v16 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      goto LABEL_37;
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v17 = "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,weaReceivedDict null\"}";
    goto LABEL_25;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SAPlatformInfo objectForKey:](v2, "objectForKey:", CFSTR("AlertMessageID")));
  if (v4 && (v5 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v4, v5) & 1) != 0))
  {
    if (objc_msgSend(v4, "intValue") == 4352)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v7 = "vE3$_0";
      LODWORD(v7) = vcvtmd_s64_f64(Current / 3600.0);
      v8 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("J%d"), v7));
      v9 = (void *)v8;
      if (v8)
      {
        v22 = CFSTR("Guid");
        v23 = v8;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
        v11 = (void *)objc_opt_new(CMSafetyAnomaly);
        if (v10
          && ((v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("Guid")))) != 0
            ? (v13 = v11 == 0)
            : (v13 = 1),
              !v13 ? (v14 = 0) : (v14 = 1),
              v12,
              !v14))
        {
          v21 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,triggered harvest\"}", buf, 0x12u);
          }
          objc_msgSend(v11, "notifyEvent:", v10);
        }
        else
        {
          v15 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,fail to call motion SPI\"}", buf, 0x12u);
          }
        }

      }
      else
      {
        v20 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v25 = 0;
          v26 = 2082;
          v27 = "";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,uid null\"}", buf, 0x12u);
        }
      }

    }
    else
    {
      v19 = (id)SALogObjectGeneral;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        v28 = 1026;
        v29 = objc_msgSend(v4, "intValue");
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,not ETWS\", \"alertMessageID\":%{public}d}", buf, 0x18u);
      }

    }
  }
  else
  {
    v18 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onMotionHarvestWeaTrigger,invalid messageID\"}", buf, 0x12u);
    }
  }

LABEL_37:
}

void sub_10007A598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10007A5F8(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5050))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007A634()
{
  return &off_1000F5050;
}

void sub_10007A644()
{
  operator delete();
}

_QWORD *sub_10007A658(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5070;
  result[1] = v3;
  return result;
}

uint64_t sub_10007A68C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5070;
  a2[1] = v2;
  return result;
}

void sub_10007A6A8(uint64_t a1, id *a2, void **a3)
{
  void *v4;
  SACommonUtils *v5;
  id v6;
  _QWORD *v7;
  void *v13;
  void *v14;
  NSObject *v15;
  int v16;
  void **v17;
  uint64_t v18;
  void *v19;
  void **v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  int v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  void **v35;
  __int16 v36;
  uint64_t v37;

  v4 = *a3;
  v5 = (SACommonUtils *)*a2;
  v6 = v4;
  v7 = *(_QWORD **)(a1 + 8);
  __asm { FMOV            V0.2D, #-1.0 }
  v25 = _Q0;
  v26 = 0;
  v27 = 0xBFF0000000000000;
  v29 = xmmword_1000B27E0;
  v28 = 2;
  v23[0] = CFAbsoluteTimeGetCurrent();
  v23[1] = 0xBFF0000000000000;
  v24 = -1;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", kIncomingMessageInterfaceKey));

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", kIncomingMessageInterfaceKey));
    *(_QWORD *)&v29 = (int)objc_msgSend(v14, "intValue");

  }
  v15 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    SACommonUtils::getAnyCmam(v5, __p);
    v16 = v22;
    v17 = (void **)__p[0];
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", kIncomingMessageInterfaceKey));
    v19 = (void *)v18;
    v20 = __p;
    *(_DWORD *)buf = 68289539;
    if (v16 < 0)
      v20 = v17;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2081;
    v35 = v20;
    v36 = 2113;
    v37 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onAlertReceived,push\", \"alert\":%{private, location:escape_only}s, \"IncomingInterface\":%{private, location:escape_only}@}", buf, 0x26u);
    if (v22 < 0)
      operator delete(__p[0]);

  }
  sub_100076048(v7, (uint64_t)v23, v5);

}

void sub_10007A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10007A8E4(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F50D0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007A920()
{
  return &off_1000F50D0;
}

uint64_t sub_10007A92C(uint64_t a1)
{

  return a1;
}

void sub_10007A954(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10007A98C()
{
  return 0;
}

id sub_10007A994(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F50F0;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10007A9C8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10007A9D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_10007A9EC(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5160))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007AA28()
{
  return &off_1000F5160;
}

uint64_t sub_10007AA34(uint64_t a1)
{

  return a1;
}

void sub_10007AA5C(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10007AA94()
{
  return 0;
}

id sub_10007AA9C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F5180;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10007AAD0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10007AAE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_10007AAF4(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F51E0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007AB30()
{
  return &off_1000F51E0;
}

uint64_t sub_10007AB3C(uint64_t a1)
{

  return a1;
}

void sub_10007AB64(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10007AB9C()
{
  return 0;
}

id sub_10007ABA4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F5200;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_10007ABD8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_10007ABE8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, uint64_t a6, double *a7)
{
  return (*(uint64_t (**)(double, double, double, double, double))(*(_QWORD *)(a1 + 8) + 16))(*a2, *a3, *a4, *a5, *a7);
}

uint64_t sub_10007AC0C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5270))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007AC48()
{
  return &off_1000F5270;
}

void sub_10007AC58()
{
  operator delete();
}

_QWORD *sub_10007AC6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5290;
  result[1] = v3;
  return result;
}

uint64_t sub_10007ACA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5290;
  a2[1] = v2;
  return result;
}

void sub_10007ACBC(uint64_t a1, char **a2)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  __int16 v14;
  const char *v15;
  __int16 v16;
  char *v17;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[1];
  if (*(_BYTE *)(v4 + 175) && *(_BYTE *)(v4 + 174))
  {
    v5 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289283;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onUserTappedOnWea\", \"hash\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    if (!v3[13] || !*((_BYTE *)sub_10003D044() + 178))
      goto LABEL_17;
    v6 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289283;
      v14 = 2082;
      v15 = "";
      v16 = 2081;
      v17 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dbg,#daemon,onUserTappedOnWea\", \"weaHash\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    v7 = v3[13];
    sub_10000E8A0(&__p, v2);
    v8 = sub_10004220C(v7, (uint64_t)&__p);
    v9 = v8;
    if (SBYTE3(v17) < 0)
    {
      operator delete(__p);
      if (!v9)
        goto LABEL_17;
    }
    else if (!v8)
    {
LABEL_17:
      v12 = v3[2];
      if (v12)
      {
        sub_10000E8A0(&__p, v2);
        sub_100039954(v12, &__p);
        if (SBYTE3(v17) < 0)
          operator delete(__p);
      }
      return;
    }
    v11 = v3[2];
    sub_10000E8A0(&__p, v2);
    sub_100039ABC(v11, (uint64_t)&__p);
    if (SBYTE3(v17) < 0)
      operator delete(__p);
    goto LABEL_17;
  }
  v10 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289283;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onUserTappedOnWea,#warning,notSupported\", \"hash\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_10007AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007AF50(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F52F0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007AF8C()
{
  return &off_1000F52F0;
}

void sub_10007AF9C()
{
  operator delete();
}

_QWORD *sub_10007AFB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5310;
  result[1] = v3;
  return result;
}

uint64_t sub_10007AFE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5310;
  a2[1] = v2;
  return result;
}

void sub_10007B000()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onNetworkConnectivityChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_10007B0B0(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5370))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B0EC()
{
  return &off_1000F5370;
}

_QWORD *sub_10007B0F8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10007B260(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100004860(a1);
}

void sub_10007B270()
{
  operator delete();
}

_QWORD *sub_10007B284(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5390;
  result[1] = v3;
  return result;
}

uint64_t sub_10007B2B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5390;
  a2[1] = v2;
  return result;
}

BOOL sub_10007B2D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(char *)(v1 + 103) < 0)
    v2 = *(_QWORD *)(v1 + 88);
  else
    v2 = *(unsigned __int8 *)(v1 + 103);
  return v2 != 0;
}

uint64_t sub_10007B2FC(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5400))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B338()
{
  return &off_1000F5400;
}

void sub_10007B348()
{
  operator delete();
}

_QWORD *sub_10007B35C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F5420;
  return result;
}

void sub_10007B380(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F5420;
}

void sub_10007B398(uint64_t a1, id *a2, _BYTE **a3)
{
  _BYTE *v3;
  id v4;
  __int128 *v5;
  std::string::size_type size;
  char v7;
  std::string *v8;
  std::string v9;

  v3 = *a3;
  v4 = *a2;
  memset(&v9, 0, sizeof(v9));
  v5 = sub_100003038();
  std::string::operator=(&v9, (const std::string *)(v5 + 4));
  size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v9.__r_.__value_.__l.__size_;
  if (!size)
  {
    *v3 = 0;
    if ((v7 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  *v3 = 1;
  objc_msgSend(v4, "removeAllObjects");
  sub_1000687EC();
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v9;
  else
    v8 = (std::string *)v9.__r_.__value_.__r.__words[0];

  if ((*((_BYTE *)&v9.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_8:
    operator delete(v9.__r_.__value_.__l.__data_);
LABEL_9:

}

void sub_10007B454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10007B474(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5490))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B4B0()
{
  return &off_1000F5490;
}

void sub_10007B4C0()
{
  operator delete();
}

_QWORD *sub_10007B4D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F54B0;
  return result;
}

void sub_10007B4F8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F54B0;
}

uint64_t sub_10007B510(SASettings *a1)
{
  uint64_t v1;

  v1 = SASettings::instance(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
}

uint64_t sub_10007B52C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5510))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B568()
{
  return &off_1000F5510;
}

void sub_10007B578()
{
  operator delete();
}

_QWORD *sub_10007B58C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5530;
  result[1] = v3;
  return result;
}

uint64_t sub_10007B5C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5530;
  a2[1] = v2;
  return result;
}

void sub_10007B5DC()
{
  NSObject *v0;
  void *v1;
  int v2;
  int v3;
  __int16 v4;
  const char *v5;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onSettingsVisited\"}", (uint8_t *)&v2, 0x12u);
    v0 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 68289026;
    v3 = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,updateCfuOnSettingsVisited\"}", (uint8_t *)&v2, 0x12u);
  }
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
  objc_msgSend(v1, "noteUserViewedEDSettings");

}

void sub_10007B700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10007B718(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5590))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B754()
{
  return &off_1000F5590;
}

void sub_10007B764()
{
  operator delete();
}

_QWORD *sub_10007B778(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F55B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007B7AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F55B0;
  a2[1] = v2;
  return result;
}

void sub_10007B7C8(uint64_t a1, unsigned __int8 *a2)
{
  sub_100075374(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10007B7D4(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5610))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B810()
{
  return &off_1000F5610;
}

void sub_10007B820()
{
  operator delete();
}

_QWORD *sub_10007B834(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5630;
  result[1] = v3;
  return result;
}

uint64_t sub_10007B868(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5630;
  a2[1] = v2;
  return result;
}

__n128 sub_10007B884@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v3 + 375) < 0)
  {
    sub_100004870((_BYTE *)a2, *(void **)(v3 + 352), *(_QWORD *)(v3 + 360));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 352);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 368);
    *(_OWORD *)a2 = v4;
  }
  if (*(char *)(v3 + 399) < 0)
  {
    sub_100004870((_BYTE *)(a2 + 24), *(void **)(v3 + 376), *(_QWORD *)(v3 + 384));
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 376);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v3 + 392);
    *(_OWORD *)(a2 + 24) = v5;
  }
  v6 = (_BYTE *)(a2 + 48);
  if (*(char *)(v3 + 423) < 0)
  {
    sub_100004870(v6, *(void **)(v3 + 400), *(_QWORD *)(v3 + 408));
  }
  else
  {
    v7 = *(_OWORD *)(v3 + 400);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 416);
    *(_OWORD *)v6 = v7;
  }
  result = *(__n128 *)(v3 + 424);
  v9 = *(_OWORD *)(v3 + 440);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(v3 + 456);
  *(_OWORD *)(a2 + 88) = v9;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_10007B950(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007B984(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F56A0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007B9C0()
{
  return &off_1000F56A0;
}

void sub_10007B9D0()
{
  operator delete();
}

_QWORD *sub_10007B9E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F56C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007BA18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F56C0;
  a2[1] = v2;
  return result;
}

void sub_10007BA34(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 v5[6];
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,igneousStateInfo,readFromChMgr\"}", buf, 0x12u);
  }
  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    sub_1000412D4(v3 + 128, v5);
    v4 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290307;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1025;
      v11 = v5[4];
      v12 = 1025;
      v13 = v5[1];
      v14 = 1025;
      v15 = v5[3];
      v16 = 1025;
      v17 = v5[2];
      v18 = 1025;
      v19 = v5[0];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,igneousStateInfo,state\", \"isEnabled\":%{private}hhd, \"inSupportedCountry\":%{private}hhd, \"isInMagnetMode\":%{private}hhd, \"isUserOptedIn\":%{private}hhd, \"inCoverageRegion\":%{private}hhd}", buf, 0x30u);
    }
  }
}

uint64_t sub_10007BBB8(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5730))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007BBF4()
{
  return &off_1000F5730;
}

void sub_10007BC04()
{
  operator delete();
}

_QWORD *sub_10007BC18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5750;
  result[1] = v3;
  return result;
}

uint64_t sub_10007BC4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5750;
  a2[1] = v2;
  return result;
}

void sub_10007BC68(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  sub_100075DA4(*(uint64_t **)(a1 + 8), *a2, *a3);
}

uint64_t sub_10007BC78(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F57C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007BCB4()
{
  return &off_1000F57C0;
}

void sub_10007BCC4()
{
  operator delete();
}

_QWORD *sub_10007BCD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F57E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007BD0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F57E0;
  a2[1] = v2;
  return result;
}

void sub_10007BD28(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  sub_100075DA4(*(uint64_t **)(a1 + 8), *a2, *a3);
}

uint64_t sub_10007BD38(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5840))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007BD74()
{
  return &off_1000F5840;
}

void sub_10007BD80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F5860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10007BD90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F5860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10007BDC0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_100028C54(a1 + 40);
  return sub_100028C54(v1);
}

void sub_10007BDF0()
{
  operator delete();
}

_QWORD *sub_10007BE04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F58B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007BE38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F58B0;
  a2[1] = v2;
  return result;
}

void sub_10007BE54(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v5 = *(unsigned __int8 *)(a3 + 9);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a3 + 16);
    v9 = *(unsigned __int8 *)(a3 + 8);
    v10 = *a2;
    v11 = (int)*(double *)a3;
    v14[0] = 68290306;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = v11;
    v19 = 1026;
    v20 = v9;
    v21 = 1026;
    v22 = v5;
    v23 = 1026;
    v24 = v8;
    v25 = 1026;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onBatteryServiceStateChanged\", \"level\":%{public}d, \"fullyCharged\":%{public}hhd, \"connected\":%{public}hhd, \"wasConnected\":%{public}hhd, \"state\":%{public}d}", (uint8_t *)v14, 0x30u);
  }
  v12 = *(_QWORD *)(v6 + 112);
  if (v12)
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v12 + 16))(v12, v5 != 0);
  v13 = *(unsigned __int8 **)(v6 + 144);
  if (v13)
    sub_10007F50C(v13);
  sub_100079008(v6, 0);
}

uint64_t sub_10007BF9C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5920))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007BFD8()
{
  return &off_1000F5920;
}

void sub_10007BFE8()
{
  operator delete();
}

_QWORD *sub_10007BFFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5940;
  result[1] = v3;
  return result;
}

uint64_t sub_10007C030(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5940;
  a2[1] = v2;
  return result;
}

void sub_10007C04C(uint64_t a1, id *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  NSObject *v15;
  void *v16;
  double v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  double v24;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = sub_1000687EC();
  sub_100068A7C((uint64_t)v4, v3);
  v5 = sub_1000687EC();
  sub_100068928((uint64_t)v5);
  v6 = *(_QWORD *)(v2 + 8);
  if (v6)
    sub_1000404F4(v6 + 128, v3);
  sub_100079008(v2, 1);
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_BYTE *)(v8 + 177))
      v9 = *(unsigned __int8 *)(v8 + 176) != 0;
    else
      v9 = 0;
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 1026;
      LODWORD(v24) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onChannelMapAvailable\", \"isAvailable\":%{public}hhd}", buf, 0x18u);
    }
    *(_BYTE *)(v7 + 46) = v9;
    v18 = 0;
    *(_DWORD *)buf = 0;
    if (v3 && (v11 = *(_QWORD *)(v2 + 88)) != 0)
    {
      (*(void (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v11 + 24))(v11, buf, &v18);
      v13 = v18;
      v12 = *(_DWORD *)buf;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    sub_10003B788(*(_QWORD *)(v2 + 16), v12, v13);
    sub_10003BAF0(*(_QWORD *)(v2 + 16), v3);
  }
  v14 = *((float *)sub_1000687EC() + 123);
  v15 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2050;
    v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,updateCfuUptakeCoefficient\", \"uptakeCoefficient\":\"%{public}f\"}", buf, 0x1Cu);
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[SAEDFollowUpManager sharedInstance](SAEDFollowUpManager, "sharedInstance"));
  *(float *)&v17 = v14;
  objc_msgSend(v16, "setUptakeCoefficient:", v17);

  if (*(double *)(v2 + 256) > 0.0)
    sub_100078408(v2, *(double *)(v2 + 232), *(double *)(v2 + 240));
  sub_100075AA8((uint64_t *)v2);

}

void sub_10007C290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10007C2B8(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F59A0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007C2F4()
{
  return &off_1000F59A0;
}

void sub_10007C304()
{
  operator delete();
}

_QWORD *sub_10007C318(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F59C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007C34C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F59C0;
  a2[1] = v2;
  return result;
}

void sub_10007C368(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[1];
  if (v4)
    sub_100041100((SAPlatformInfo *)(v4 + 128), v2 != 0);
  v5 = v3[5];
  if (v5)
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 88))(v5, v2 != 0);
  v6 = v3[2];
  if (v6)
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 68289282;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1026;
      v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#saanalytics,onCompanionNearby\", \"isNearby\":%{public}hhd}", (uint8_t *)v11, 0x18u);
    }
    *(_BYTE *)(v6 + 47) = v2;
    v8 = *(_QWORD *)(v6 + 136);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 48);
      if (v9)
        sub_10005F478(v9, v2 != 0);
    }
  }
  v10 = v3[16];
  if (v10)
    sub_1000315C8(v10, v2 != 0);
}

uint64_t sub_10007C4CC(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5A20))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007C508()
{
  return &off_1000F5A20;
}

void sub_10007C518()
{
  operator delete();
}

_QWORD *sub_10007C52C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5A40;
  result[1] = v3;
  return result;
}

uint64_t sub_10007C560(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5A40;
  a2[1] = v2;
  return result;
}

void sub_10007C57C(uint64_t a1, double *a2, uint64_t *a3, id *a4)
{
  double v5;
  uint64_t v6;
  SACommonUtils *v7;
  uint64_t v8;
  NSObject *v14;
  void **v15;
  SACommonUtils *v16;
  SACommonUtils *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  CFAbsoluteTime Current;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  __int16 v35;
  const char *v36;
  char v37;
  uint8_t buf[8];
  __int16 v39;
  const char *v40;
  __int16 v41;
  void **v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;

  v5 = *a2;
  v6 = *a3;
  v7 = (SACommonUtils *)*a4;
  v8 = *(_QWORD *)(a1 + 8);
  __asm { FMOV            V0.2D, #-1.0 }
  v28 = _Q0;
  v32 = 0;
  LODWORD(v29) = 0;
  LODWORD(v31) = 1;
  Current = CFAbsoluteTimeGetCurrent();
  v26 = 0xBFF0000000000000;
  LODWORD(v27) = -1;
  v30 = v5 * 1000.0;
  v33 = v6;
  v14 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    SACommonUtils::getAnyCmam(v7, &__p);
    v15 = v37 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v39 = 2082;
    v40 = "";
    v41 = 2081;
    v42 = v15;
    v43 = 2050;
    v44 = v6;
    v45 = 2050;
    v46 = v5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onAlertReceived,pull\", \"alert\":%{private, location:escape_only}s, \"responseCode\":%{public}ld, \"latency\":\"%{public}0.1f\"}", buf, 0x30u);
    if (v37 < 0)
      operator delete(__p);
  }

  if (v6 == 200)
  {
    sub_100076048((_QWORD *)v8, (uint64_t)&Current, v7);
  }
  else
  {
    v16 = v7;
    v17 = v16;
    if (v16)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(-[SACommonUtils objectForKey:](v16, "objectForKey:", CFSTR("SafetyAlertMissingForHash"), *(_QWORD *)&Current, v26, v27, v28, v29, *(_QWORD *)&v30, v31, v32, v33));
      if (v18 && (v19 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v18, v19) & 1) != 0))
      {
        sub_10000E8A0(buf, (char *)objc_msgSend(objc_retainAutorelease(v18), "UTF8String"));
        v20 = *(_QWORD *)(v8 + 16);
        if (v20)
          sub_100039CD8(v20, (uint64_t)buf, (uint64_t)&Current);
        if (!sub_1000299F8((void ****)(v8 + 208), (uint64_t)buf))
        {
          v21 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            __p = (void *)68289026;
            v35 = 2082;
            v36 = "";
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onAlertPullFailure,sendToTelephony\"}", (uint8_t *)&__p, 0x12u);
          }
          (*(void (**)(_QWORD, SACommonUtils *))(**(_QWORD **)(v8 + 40) + 24))(*(_QWORD *)(v8 + 40), v17);
        }
        v22 = *(_QWORD *)(v8 + 104);
        if (v22)
          sub_100041F1C(v22, (uint64_t)buf);
        if (SBYTE3(v42) < 0)
          operator delete(*(void **)buf);
      }
      else
      {
        v23 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          v39 = 2082;
          v40 = "";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertPullFailure,invalidMissingHash\"}", buf, 0x12u);
        }
      }

    }
    else
    {
      v24 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        v39 = 2082;
        v40 = "";
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,#warning,onAlertPullFailure,nilDictionary\"}", buf, 0x12u);
      }
    }

  }
}

void sub_10007C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t sub_10007C95C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5AB0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007C998()
{
  return &off_1000F5AB0;
}

void sub_10007C9A8()
{
  operator delete();
}

_QWORD *sub_10007C9BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5AD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007C9F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5AD0;
  a2[1] = v2;
  return result;
}

void sub_10007CA0C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  void *v12;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 68289026;
    LOWORD(v10) = 2082;
    *(_QWORD *)((char *)&v10 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onFirstUnlocked\"}", (uint8_t *)&v9, 0x12u);
  }
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    *(_BYTE *)(v3 + 50) = 1;
    v4 = *(_QWORD *)(v3 + 136);
    if (v4)
    {
      *(_BYTE *)(v4 + 2040) = 1;
      sub_100054BCC(v4 + 112);
    }
    v5 = *(_QWORD *)(v3 + 144);
    if (v5)
      sub_1000235D4(v5);
    v6 = sub_10004D658();
    v7 = *((_QWORD *)v6 + 24);
    v9 = (uint64_t)_NSConcreteStackBlock;
    *(_QWORD *)&v10 = 3221225472;
    *((_QWORD *)&v10 + 1) = sub_10004E864;
    v11 = &unk_1000F1EB8;
    v12 = v6;
    dispatch_async(v7, &v9);
  }
  v8 = *(_QWORD *)(v1 + 128);
  if (v8)
    sub_100031698(v8);
}

uint64_t sub_10007CB40(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5B30))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007CB7C()
{
  return &off_1000F5B30;
}

void sub_10007CB8C()
{
  operator delete();
}

_QWORD *sub_10007CBA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5B50;
  result[1] = v3;
  return result;
}

uint64_t sub_10007CBD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5B50;
  a2[1] = v2;
  return result;
}

void sub_10007CBF0(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,onLockedStatusChanged\", \"isLocked\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
    *(_BYTE *)(v5 + 51) = v2 ^ 1;
  sub_100079008(v3, 0);
}

uint64_t sub_10007CCD8(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5BB0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007CD14()
{
  return &off_1000F5BB0;
}

void sub_10007CD24()
{
  operator delete();
}

_QWORD *sub_10007CD38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5BD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007CD6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5BD0;
  a2[1] = v2;
  return result;
}

void sub_10007CD88(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 144);
  if (v1)
    sub_10007F2E8(v1);
}

uint64_t sub_10007CD9C(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5C40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007CDD8()
{
  return &off_1000F5C40;
}

void sub_10007CDE8()
{
  operator delete();
}

_QWORD *sub_10007CDFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5C60;
  result[1] = v3;
  return result;
}

uint64_t sub_10007CE30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5C60;
  a2[1] = v2;
  return result;
}

void sub_10007CE4C(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144))
    sub_10007F3AC();
}

uint64_t sub_10007CE60(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F5CD0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007CE9C()
{
  return &off_1000F5CD0;
}

void sub_10007CEAC()
{
  operator delete();
}

_QWORD *sub_10007CEC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_10007CEF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5CF0;
  a2[1] = v2;
  return result;
}

double sub_10007CF10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  double result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemon,IgneousStatusUpdate\"}", (uint8_t *)v6, 0x12u);
  }
  *(_DWORD *)(v3 + 456) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(v3 + 352), (const std::string *)a2);
  std::string::operator=((std::string *)(v3 + 376), (const std::string *)(a2 + 24));
  *(_OWORD *)(v3 + 424) = *(_OWORD *)(a2 + 72);
  result = *(double *)(a2 + 96);
  *(double *)(v3 + 448) = result;
  return result;
}

uint64_t sub_10007D004(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10007D040()
{
}

void sub_10007D04C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000F5D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10007D05C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000F5D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10007D08C(uint64_t a1)
{
  return sub_10002A580(a1 + 24);
}

void sub_10007D098(void *a1)
{
  id v1;

  v1 = a1;
  if (*((_BYTE *)sub_10003D044() + 242))
    operator new();
  operator new();
}

void sub_10007D1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

_QWORD *sub_10007D27C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;

  sub_100004F4C((uint64_t)v7, a3);
  *a1 = off_1000F4480;
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *a1 = off_1000F5DE0;
  return a1;
}

void sub_10007D32C()
{
  operator delete();
}

uint64_t sub_10007D340()
{
  return 1;
}

uint64_t sub_10007D348()
{
  return 1;
}

void sub_10007D350(void *a1)
{
  a1;
  if (*((_BYTE *)sub_10003D044() + 217))
    operator new();
  operator new();
}

void sub_10007D3E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete();
}

void sub_10007D41C(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint8_t buf[8];
  uint64_t v44;
  uint8_t *v45;

  v9 = a2;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  v10 = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 80) = *a3;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = a3[1];
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 96) = *a4;
  v14 = a4[1];
  *(_QWORD *)(a1 + 104) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 112) = *a5;
  v17 = a5[1];
  *(_QWORD *)(a1 + 120) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v38 = 0;
  v40 = 0;
  v42 = 0;
  *(_QWORD *)buf = off_1000F5E48;
  v45 = buf;
  sub_10005B2BC(buf, v37);
  v20 = v45;
  if (v45 == buf)
  {
    v21 = 4;
    v20 = buf;
  }
  else
  {
    if (!v45)
      goto LABEL_15;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_15:
  *(_QWORD *)buf = off_1000F5EC8;
  v45 = buf;
  sub_10005B4D0(buf, v39);
  v22 = v45;
  if (v45 == buf)
  {
    v23 = 4;
    v22 = buf;
  }
  else
  {
    if (!v45)
      goto LABEL_20;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_20:
  *(_QWORD *)buf = off_1000F5F48;
  v44 = a1;
  v45 = buf;
  sub_10005B6E4(buf, v41);
  v24 = v45;
  if (v45 == buf)
  {
    v25 = 4;
    v24 = buf;
  }
  else
  {
    if (!v45)
      goto LABEL_25;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_25:
  v26 = *(void **)(a1 + 8);
  sub_10000E8A0(&__p, "safetyalertsdble");
  v27 = (uint64_t)v38;
  if (v38)
  {
    if (v38 == v37)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v31);
LABEL_30:
      v28 = (uint64_t)v40;
      if (v40)
      {
        if (v40 == v39)
        {
          v34 = v33;
          (*(void (**)(_QWORD *, _BYTE *))(v39[0] + 24))(v39, v33);
LABEL_35:
          v29 = (uint64_t)v42;
          if (v42)
          {
            if (v42 == v41)
            {
              v36 = v35;
              (*(void (**)(_QWORD *, _BYTE *))(v41[0] + 24))(v41, v35);
LABEL_40:
              SACoreRoutine::create(v26);
            }
            v29 = (*(uint64_t (**)(void))(*v42 + 16))();
          }
          v36 = (_BYTE *)v29;
          goto LABEL_40;
        }
        v28 = (*(uint64_t (**)(void))(*v40 + 16))();
      }
      v34 = (_BYTE *)v28;
      goto LABEL_35;
    }
    v27 = (*(uint64_t (**)(void))(*v38 + 16))();
  }
  v32 = (_BYTE *)v27;
  goto LABEL_30;
}

void sub_10007D9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a29 == v39)
  {
    v41 = 4;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v41 = 5;
    v39 = a29;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v41))(v39);
LABEL_6:
  v42 = a25;
  if (a25 == &a22)
  {
    v43 = 4;
    v42 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_11:
  if (a17 < 0)
    operator delete(__p);
  sub_10005935C(&a34);
  sub_100028C54(v38);
  sub_100028C54(v37);
  sub_100028C54(v36);
  v44 = *(_QWORD *)(v34 + 40);
  *(_QWORD *)(v34 + 40) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_100080324(a10, 0);
  v46 = *v35;
  *v35 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);

  _Unwind_Resume(a1);
}

void sub_10007DBA4(uint64_t a1)
{
  void *v2;
  char *v3;
  __int128 v4;
  NSObject *v5;
  void *v6;
  char *v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p;
  int v14;
  _BYTE buf[48];
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v14 = 0;
  v2 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v2, CFSTR("advertiseEvaluationIntervalSeconds"), &v14) & 1) == 0)
  {
    buf[0] = 0;
    *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
    *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
    *(_QWORD *)&buf[36] = &_mh_execute_header;
    *(_DWORD *)&buf[44] = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v3 = (char *)sub_1000687EC();
    v4 = *((_OWORD *)v3 + 26);
    *(_OWORD *)buf = *((_OWORD *)v3 + 25);
    *(_OWORD *)&buf[16] = v4;
    *(_OWORD *)&buf[32] = *((_OWORD *)v3 + 27);
    v16 = v3[448];
    if (v3 + 400 == buf)
    {
      v14 = *(_DWORD *)&buf[8];
    }
    else
    {
      sub_100017854(&v17, *((uint64_t **)v3 + 57), *((uint64_t **)v3 + 58), (uint64_t)(*((_QWORD *)v3 + 58) - *((_QWORD *)v3 + 57)) >> 3);
      v14 = *(_DWORD *)&buf[8];
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
    }
  }
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289283;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,getAdvertiserEvaluationTimeout\", \"timeoutValue\":%{private}d}", buf, 0x18u);
  }
  v14 = 0;
  v6 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v6, CFSTR("discoveryEvaluationIntervalSeconds"), &v14) & 1) == 0)
  {
    buf[0] = 0;
    *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
    *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
    *(_QWORD *)&buf[36] = &_mh_execute_header;
    *(_DWORD *)&buf[44] = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v7 = (char *)sub_1000687EC();
    v8 = *((_OWORD *)v7 + 26);
    *(_OWORD *)buf = *((_OWORD *)v7 + 25);
    *(_OWORD *)&buf[16] = v8;
    *(_OWORD *)&buf[32] = *((_OWORD *)v7 + 27);
    v16 = v7[448];
    if (v7 + 400 == buf)
    {
      v14 = *(_DWORD *)&buf[12];
    }
    else
    {
      sub_100017854(&v17, *((uint64_t **)v7 + 57), *((uint64_t **)v7 + 58), (uint64_t)(*((_QWORD *)v7 + 58) - *((_QWORD *)v7 + 57)) >> 3);
      v14 = *(_DWORD *)&buf[12];
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
    }
  }
  v9 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289283;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,getDiscoverableEvaluationTimeout\", \"timeoutValue\":%{private}d}", buf, 0x18u);
    v9 = SALogObjectGeneral;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,initEvaluationTimers\"}", buf, 0x12u);
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *(void **)(a1 + 8);
  sub_10000E8A0(&__p, "blecoreAdvertiserTimer");
  SATimer::create(v12);
}

void sub_10007E1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  char *v41;
  uint64_t v42;

  v41 = a36;
  if (a36 == &a33)
  {
    v42 = 4;
    v41 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007E288(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_100028C54(a1 + 112);
  sub_100028C54(a1 + 96);
  sub_100028C54(a1 + 80);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100080324((uint64_t *)(a1 + 24), 0);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  return a1;
}

void sub_10007E334(uint64_t a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  sub_10007E66C(*(_QWORD *)(a1 + 32));
  v1 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,advertiserTimerExpiredCb\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_10007E3EC(uint64_t a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  sub_10007E66C(*(_QWORD *)(a1 + 32));
  v1 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,discoverabilityTimerExpiredCb\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_10007E4A4(unsigned __int8 *a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  v2 = *a1;
  v3 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1025;
    v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,updateSubscriptionToReceiveAlertOverBLE\", \"receive\":%{private}d}", buf, 0x18u);
  }
  v4 = *((_QWORD *)a1 + 3);
  if (v4)
  {
    if (v2)
    {
      v8[0] = off_1000F6168;
      v8[1] = a1;
      v9 = v8;
      sub_100064078(v4, (uint64_t)v8);
      v5 = v9;
      if (v9 == v8)
      {
        v6 = 4;
        v5 = v8;
      }
      else
      {
        if (!v9)
          return;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
    else
    {
      sub_100065C6C(v4);
    }
  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,updateSubscriptionToReceiveAlertOverBLE,Not a BLEAlertRelay device\"}", buf, 0x12u);
    }
  }
}

void sub_10007E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

void sub_10007E66C(uint64_t a1)
{
  double Current;
  double v3;
  char *v4;
  __int128 v5;
  NSObject *v6;
  double v7;
  unsigned int v8;
  SASettings *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  _BYTE buf[48];
  char v23;
  void *__p;
  void *v25;
  uint64_t v26;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 56);
  buf[0] = 0;
  *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
  *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
  *(_QWORD *)&buf[36] = &_mh_execute_header;
  *(_DWORD *)&buf[44] = 0;
  v25 = 0;
  v26 = 0;
  __p = 0;
  v4 = (char *)sub_1000687EC();
  v5 = *((_OWORD *)v4 + 26);
  *(_OWORD *)buf = *((_OWORD *)v4 + 25);
  *(_OWORD *)&buf[16] = v5;
  *(_OWORD *)&buf[32] = *((_OWORD *)v4 + 27);
  v23 = v4[448];
  if (v4 + 400 != buf)
    sub_100017854(&__p, *((uint64_t **)v4 + 57), *((uint64_t **)v4 + 58), (uint64_t)(*((_QWORD *)v4 + 58) - *((_QWORD *)v4 + 57)) >> 3);
  v6 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 68289283;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    v20 = 1025;
    v21 = *(_DWORD *)&buf[24];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,getMinimumTimeBetweenPeopleDensityQuery\", \"minTimeBetweenPeopleDensityQuery\":%{private}d}", (uint8_t *)v17, 0x18u);
  }
  v7 = Current - v3;
  v8 = *(_DWORD *)&buf[24];
  v9 = (SASettings *)__p;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v7 < (double)v8)
  {
    v10 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v11 = "{\"msg%{public}.0s\":\"#blecore,people density was queried recently\"}";
    v12 = v10;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
    return;
  }
  v13 = sub_10007F814(v9);
  v14 = SALogObjectGeneral;
  v15 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (!v13)
  {
    if (!v15)
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v11 = "{\"msg%{public}.0s\":\"#blecore,requestCurrentPeopleDensity failed\"}";
    v12 = v14;
    goto LABEL_17;
  }
  if (v15)
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,requestCurrentPeopleDensity\"}", buf, 0x12u);
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
}

void sub_10007E908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007E92C(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onInitCompleted\"}", (uint8_t *)v4, 0x12u);
  }
  *(_BYTE *)(a1 + 2) = 1;
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_10007E9FC(unsigned __int8 *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onLocationChanged\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007E66C((uint64_t)a1);
  sub_10007EAC8(a1);
  sub_10007ECF0((uint64_t)a1);
}

void sub_10007EAC8(unsigned __int8 *a1)
{
  int v2;
  _BOOL4 v3;
  int v4;
  double v5;
  __int128 *v6;
  int v7;
  int v8;
  NSObject *v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  v2 = sub_10007F814((SASettings *)a1);
  v3 = sub_10007F9D4();
  v4 = *((_DWORD *)sub_100003038() + 12);
  v5 = *((double *)sub_100003038() + 7);
  v6 = sub_100003038();
  v7 = *((unsigned __int8 *)v6 + 111);
  v8 = *((unsigned __int8 *)v6 + 110);
  v9 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
      v10 = v8 == 0;
    else
      v10 = 1;
    v11 = !v10;
    v12 = *((_DWORD *)sub_100003038() + 12);
    v13 = a1[48];
    v18 = 68290819;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1025;
    v23 = v12;
    v24 = 1025;
    v25 = v3;
    v26 = 1025;
    v27 = v2;
    v28 = 1025;
    v29 = v4 == 0;
    v30 = 1025;
    v31 = v5 > 10.0;
    v32 = 1025;
    v33 = v13;
    v34 = 1025;
    v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,evaluateBLEQDiscoverability\", \"motionState\":%{private}d, \"isBatteryStateGoodForBLE\":%{private}hhd, \"areAllGatesEnabled\":%{private}hhd, \"isDeviceStationary\":%{private}hhd, \"isWLQAcceptable\":%{private}hhd, \"isPeopleDensityLargeEnough\":%{private}hhd, \"isCellConnected\":%{private}hhd}", (uint8_t *)&v18, 0x3Cu);
  }

  v14 = SALogObjectGeneral;
  v15 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (!v15)
      goto LABEL_15;
    v18 = 68289026;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v16 = "{\"msg%{public}.0s\":\"#blecore,evaluateBLEQDiscoverability,true\"}";
  }
  else
  {
    if (!v15)
      goto LABEL_15;
    v18 = 68289026;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v16 = "{\"msg%{public}.0s\":\"#blecore,evaluateBLEQDiscoverability,BLE relay not possible\"}";
  }
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v18, 0x12u);
LABEL_15:
  v17 = *a1;
  *a1 = v2;
  if (v17 != v2)
    sub_10007E4A4(a1);
}

void sub_10007ECF0(uint64_t a1)
{
  id *v2;
  SASettings *v3;
  int v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  _BOOL4 v10;
  int v11;
  double v12;
  __int128 *v13;
  BOOL v14;
  int v15;
  char *v16;
  __int128 v17;
  float *v18;
  NSObject *v19;
  int v20;
  float *v21;
  unsigned int v22;
  float v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  _BOOL4 v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  int v32;
  int v33;
  NSObject *v34;
  _BOOL4 v35;
  char v36;
  uint8_t v37[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  _BYTE buf[48];
  __int16 v46;
  int v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;

  v2 = (id *)SAPlatformInfo::instance((SAPlatformInfo *)a1);
  v3 = (SASettings *)SAPlatformInfo::isAOPSupportedDevice(v2);
  if ((v3 & 1) != 0)
  {
    v4 = sub_10007F814(v3);
    v5 = *(_QWORD **)(a1 + 16);
    if (v5)
    {
      if (*(_BYTE *)(a1 + 2))
        v6 = v4;
      else
        v6 = 0;
      if ((v6 & 1) != 0)
      {
        v7 = 6;
      }
      else
      {
        if (*(_BYTE *)(a1 + 2))
          v9 = v4;
        else
          v9 = 1;
        if ((v9 & 1) != 0)
          goto LABEL_16;
        v7 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v7))();
    }
LABEL_16:
    v10 = sub_10007F9D4();
    v11 = *((_DWORD *)sub_100003038() + 12);
    v12 = *((double *)sub_100003038() + 7);
    v13 = sub_100003038();
    if (*((_BYTE *)v13 + 111))
      v14 = *((_BYTE *)v13 + 110) == 0;
    else
      v14 = 1;
    v15 = !v14;
    buf[0] = 0;
    *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
    *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
    *(_QWORD *)&buf[36] = &_mh_execute_header;
    *(_DWORD *)&buf[44] = 0;
    v50 = 0;
    v49 = 0uLL;
    v16 = (char *)sub_1000687EC();
    v17 = *((_OWORD *)v16 + 26);
    *(_OWORD *)buf = *((_OWORD *)v16 + 25);
    *(_OWORD *)&buf[16] = v17;
    *(_OWORD *)&buf[32] = *((_OWORD *)v16 + 27);
    LOBYTE(v46) = v16[448];
    if (v16 + 400 == buf)
    {
      v18 = 0;
    }
    else
    {
      sub_100017854(&v49, *((uint64_t **)v16 + 57), *((uint64_t **)v16 + 58), (uint64_t)(*((_QWORD *)v16 + 58) - *((_QWORD *)v16 + 57)) >> 3);
      v18 = (float *)v49;
    }
    v19 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)v37 = 68289539;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      v41 = 2049;
      v42 = (uint64_t)(*((_QWORD *)&v49 + 1) - (_QWORD)v18) >> 3;
      v43 = 1025;
      LODWORD(v44) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,readBleConfigFromFile no match found2\", \"FanoutSize\":%{private}llu, \"meanNumNearbyDevices\":%{private}d}", v37, 0x22u);
      v18 = (float *)v49;
    }
    v21 = (float *)*((_QWORD *)&v49 + 1);
    if (v18 == *((float **)&v49 + 1))
    {
      v23 = 0.0;
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 64);
      if (*(float *)(*((_QWORD *)&v49 + 1) - 8) >= (float)v22)
      {
        v24 = SALogObjectGeneral;
        v23 = 0.0;
        do
        {
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(double *)&v25 = *v18;
            v26 = v18[1];
            *(_DWORD *)v37 = 68289539;
            v38 = 0;
            v39 = 2082;
            v40 = "";
            v41 = 2049;
            v42 = v25;
            v43 = 2049;
            v44 = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,readBleConfigFromFile\", \"first\":\"%{private}3f\", \"second\":\"%{private}3f\"}", v37, 0x26u);
            v24 = SALogObjectGeneral;
            v22 = *(_DWORD *)(a1 + 64);
          }
          if (*v18 > (float)v22)
            break;
          v23 = v18[1];
          v18 += 2;
        }
        while (v18 != v21);
        v18 = (float *)v49;
      }
      else
      {
        v23 = *(float *)(*((_QWORD *)&v49 + 1) - 4);
      }
    }
    if (v18)
    {
      *((_QWORD *)&v49 + 1) = v18;
      operator delete(v18);
    }
    *(double *)(a1 + 72) = v23;
    v27 = (int)v23 <= 0x64 && arc4random_uniform(0x64u) <= (int)v23;
    v28 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *(_QWORD *)(a1 + 72);
      v30 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v27;
      *(_WORD *)&buf[24] = 2049;
      *(_QWORD *)&buf[26] = v29;
      *(_WORD *)&buf[34] = 1025;
      *(_DWORD *)&buf[36] = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,isBLEAllowedAfterRollingTheDice\", \"isParticipating\":%{private}d, \"fFanoutValueBasedOnPeopleDensity\":\"%{private}3f\", \"meanNumNearbyDevices\":%{private}d}", buf, 0x28u);
      v28 = SALogObjectGeneral;
    }
    v31 = v28;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = *((_DWORD *)sub_100003038() + 12);
      v33 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 68291075;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v32;
      *(_WORD *)&buf[24] = 1025;
      *(_DWORD *)&buf[26] = v10;
      *(_WORD *)&buf[30] = 1025;
      *(_DWORD *)&buf[32] = v4;
      *(_WORD *)&buf[36] = 1025;
      *(_DWORD *)&buf[38] = v11 == 0;
      *(_WORD *)&buf[42] = 1025;
      *(_DWORD *)&buf[44] = v12 > 10.0;
      v46 = 1025;
      v47 = v33;
      v48 = 1025;
      LODWORD(v49) = v15;
      WORD2(v49) = 1025;
      *(_DWORD *)((char *)&v49 + 6) = v27;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,evaluateBLEQAdvertise\", \"motionState\":%{private}d, \"isBatteryStateGoodForBLE\":%{private}hhd, \"areAllGatesEnabled\":%{private}hhd, \"isDeviceStationary\":%{private}hhd, \"isWLQAcceptable\":%{private}hhd, \"isPeopleDensityLargeEnough\":%{private}hhd, \"isCellConnected\":%{private}hhd, \"isAllowedAfterDiceRoll\":%{private}hhd}", buf, 0x42u);
    }

    v34 = SALogObjectGeneral;
    v35 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    if ((v4 & v27 & 1) != 0)
    {
      if (v35)
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,isBLEAlertRelayDevice,BLE relay possible\"}", buf, 0x12u);
      }
      v36 = 1;
    }
    else
    {
      if (v35)
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,isBLEAlertRelayDevice,BLE relay not possible\"}", buf, 0x12u);
      }
      v36 = 0;
    }
    *(_BYTE *)(a1 + 1) = v36;
    *((_WORD *)sub_100003038() + 60) = *(unsigned __int8 *)(a1 + 1) | 0x100;
    return;
  }
  v8 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,BLE not AOP HW\"}", buf, 0x12u);
  }
}

void sub_10007F2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

void sub_10007F2E8(unsigned __int8 *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onMotionStateChange\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007EAC8(a1);
  sub_10007ECF0((uint64_t)a1);
}

void sub_10007F3AC()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onWifiStatusChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_10007F45C()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onCellNetworkConnected\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_10007F50C(unsigned __int8 *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBatteryStatusChanged\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007EAC8(a1);
  sub_10007ECF0((uint64_t)a1);
}

void sub_10007F5D0(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onAssetReceived\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007DBA4(a1);
}

void sub_10007F68C(unsigned __int8 *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onIgneousEnablementChanged\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007EAC8(a1);
  sub_10007ECF0((uint64_t)a1);
}

void sub_10007F750(unsigned __int8 *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onIgneousCoverageRegionChanged\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10007EAC8(a1);
  sub_10007ECF0((uint64_t)a1);
}

uint64_t sub_10007F814(SASettings *a1)
{
  uint64_t v1;
  int v2;
  __int128 *v3;
  BOOL v4;
  _BOOL4 v5;
  unsigned int v6;
  __int128 *v7;
  BOOL v8;
  int v9;
  NSObject *v10;
  __int128 *v11;
  int v12;
  int v13;
  __int128 *v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  _DWORD v20[2];
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  int v34;

  v1 = SASettings::instance(a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
  v3 = sub_100003038();
  if (*((_BYTE *)v3 + 107))
    v4 = *((_BYTE *)v3 + 106) == 0;
  else
    v4 = 1;
  v5 = !v4 && (v3 = sub_100003038(), *((_BYTE *)v3 + 109)) && *((_BYTE *)v3 + 108) != 0;
  v6 = objc_msgSend(*(id *)SAPlatformInfo::instance((SAPlatformInfo *)v3), "isEqualToString:", CFSTR("iPhone"));
  v7 = sub_100003038();
  if (*((_BYTE *)v7 + 91))
    v8 = *((_BYTE *)v7 + 90) == 0;
  else
    v8 = 1;
  v9 = !v8;
  v10 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = sub_100003038();
    v12 = *((unsigned __int8 *)v11 + 107);
    v13 = *((unsigned __int8 *)v11 + 106);
    v14 = sub_100003038();
    if (v12)
      v15 = v13 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (*((_BYTE *)v14 + 109))
      v17 = *((_BYTE *)v14 + 108) == 0;
    else
      v17 = 1;
    v20[0] = 68290563;
    v18 = !v17;
    v20[1] = 0;
    v21 = 2082;
    v22 = "";
    v23 = 1025;
    v24 = v16;
    v25 = 1025;
    v26 = v18;
    v27 = 1025;
    v28 = v5;
    v29 = 1025;
    v30 = v2;
    v31 = 1025;
    v32 = v6;
    v33 = 1025;
    v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,areAllGatesOpen\", \"isIgneousCapable\":%{private}hhd, \"isIgneousEnabled\":%{private}hhd, \"isIgneousAllowed\":%{private}hhd, \"isBluetoothEnabled\":%{private}hhd, \"isHWAllowed\":%{private}hhd, \"isLocationAuth\":%{private}hhd}", (uint8_t *)v20, 0x36u);
  }

  return v5 & v6 & v2 & v9;
}

BOOL sub_10007F9D4()
{
  double v0;
  char *v1;
  __int128 v2;
  unsigned int v3;
  _BYTE v5[48];
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v0 = *((double *)sub_100003038() + 16);
  v5[0] = 0;
  *(_OWORD *)&v5[4] = xmmword_1000ADFE0;
  *(_OWORD *)&v5[20] = xmmword_1000ADFF0;
  *(_QWORD *)&v5[36] = &_mh_execute_header;
  *(_DWORD *)&v5[44] = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v1 = (char *)sub_1000687EC();
  v2 = *((_OWORD *)v1 + 26);
  *(_OWORD *)v5 = *((_OWORD *)v1 + 25);
  *(_OWORD *)&v5[16] = v2;
  *(_OWORD *)&v5[32] = *((_OWORD *)v1 + 27);
  v6 = v1[448];
  if (v1 + 400 == v5)
  {
    v3 = *(_DWORD *)&v5[20];
  }
  else
  {
    sub_100017854(&__p, *((uint64_t **)v1 + 57), *((uint64_t **)v1 + 58), (uint64_t)(*((_QWORD *)v1 + 58) - *((_QWORD *)v1 + 57)) >> 3);
    v3 = *(_DWORD *)&v5[20];
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return v0 > (double)v3;
}

void sub_10007FAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007FAC0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t result;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;

  v4 = SALogObjectGeneral;
  v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,processBleIgneousAlert\"}", (uint8_t *)&v14, 0x12u);
  }
  if ((sub_10007FD14((SAPlatformInfo *)v5) & 1) == 0)
  {
    v8 = SALogObjectGeneral;
    v9 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v9)
      return result;
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v10 = "{\"msg%{public}.0s\":\"#blecore,processBleIgneousAlert,BLEAlertRelay not supported\"}";
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 1))
  {
    v8 = SALogObjectGeneral;
    v11 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v11)
      return result;
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v10 = "{\"msg%{public}.0s\":\"#blecore,processBleIgneousAlert,Not a BLEAlertRelay device\"}";
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    v8 = SALogObjectGeneral;
    v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v10 = "{\"msg%{public}.0s\":\"#blecore,processBleIgneousAlert,transport error\"}";
    goto LABEL_16;
  }
  if (*(_BYTE *)(a2 + 200))
  {
    sub_100065DDC(v6, a2);
    return 1;
  }
  v8 = SALogObjectGeneral;
  v13 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v10 = "{\"msg%{public}.0s\":\"#blecore,processBleIgneousAlert,forward blocked\"}";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_10007FD14(SAPlatformInfo *a1)
{
  SAPlatformInfo *v1;
  void *v2;
  char *v3;
  __int128 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  _BYTE buf[48];
  char v15;
  void *__p;
  void *v17;
  uint64_t v18;

  v1 = (SAPlatformInfo *)SAPlatformInfo::instance(a1);
  if (!*((_BYTE *)v1 + 9))
  {
    v5 = SALogObjectGeneral;
    v6 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v6)
      return result;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v8 = "{\"msg%{public}.0s\":\"#blecore,BLE not supported on non-internal builds\"}";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
    return 0;
  }
  if ((objc_msgSend(*(id *)SAPlatformInfo::instance(v1), "isEqualToString:", CFSTR("iPhone")) & 1) == 0)
  {
    v5 = SALogObjectGeneral;
    v9 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v9)
      return result;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v8 = "{\"msg%{public}.0s\":\"#blecore,BLE not supported on this HW\"}";
    goto LABEL_11;
  }
  v13 = 0;
  v2 = sub_10003D044();
  if ((sub_10003CAD0((uint64_t)v2, CFSTR("isBLERelaySupported"), &v13) & 1) == 0)
  {
    buf[0] = 0;
    *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
    *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
    *(_QWORD *)&buf[36] = &_mh_execute_header;
    *(_DWORD *)&buf[44] = 0;
    v17 = 0;
    v18 = 0;
    __p = 0;
    v3 = (char *)sub_1000687EC();
    v4 = *((_OWORD *)v3 + 26);
    *(_OWORD *)buf = *((_OWORD *)v3 + 25);
    *(_OWORD *)&buf[16] = v4;
    *(_OWORD *)&buf[32] = *((_OWORD *)v3 + 27);
    v15 = v3[448];
    if (v3 + 400 == buf)
    {
      v13 = buf[0];
    }
    else
    {
      sub_100017854(&__p, *((uint64_t **)v3 + 57), *((uint64_t **)v3 + 58), (uint64_t)(*((_QWORD *)v3 + 58) - *((_QWORD *)v3 + 57)) >> 3);
      v13 = buf[0];
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
    }
  }
  v10 = (id)SALogObjectGeneral;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v13;
    v12 = _os_feature_enabled_impl("SafetyAlerts", "SafetyAlertsLivability");
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v11;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,isBLERelaySupported\", \"isBLERelaySupported\":%{public}d, \"isSALivabilityEnabled\":%{public}d}", buf, 0x1Eu);
  }

  if (v13)
    return _os_feature_enabled_impl("SafetyAlerts", "SafetyAlertsLivability");
  return 0;
}

void sub_10007FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_10007FFF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  SAPlatformInfo *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  int v30;
  _BYTE v31[10];
  __int16 v32;
  int v33;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v30 = 0;
    *(_WORD *)v31 = 2082;
    *(_QWORD *)&v31[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBLEAlertReceived\"}", buf, 0x12u);
  }
  if (*(_BYTE *)(a2 + 200))
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (!v5 || sub_10002E1E8(v5, a2))
    {
      v6 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v30 = 0;
        *(_WORD *)v31 = 2082;
        *(_QWORD *)&v31[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"blecore,onBLEAlertReceived,stale alert\"}", buf, 0x12u);
      }
LABEL_29:
      v22 = *(_QWORD *)(a1 + 112);
      if (v22)
      {
        *(_WORD *)buf = *(_WORD *)a1;
        v30 = *(_DWORD *)(a1 + 64);
        v23 = *(double *)(a1 + 72);
        *(float *)v31 = v23;
        v24 = *(_QWORD *)(v22 + 152);
        if (v24)
          sub_1000427C8(v24, a2, (uint64_t)buf);
      }
      return;
    }
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    v27 = *(_QWORD **)(a1 + 80);
    v28 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = *(std::__shared_weak_count **)(a1 + 104);
    v25 = *(SAPlatformInfo **)(a1 + 96);
    v26 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = sub_100057FC8(a2, &v27, &v25);
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v28;
    if (v28)
    {
      v19 = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v30 = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      v32 = 1026;
      v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBLEAlertReceived\", \"res\":%{public}d}", buf, 0x18u);
    }
    if ((v14 & 1) != 0)
      goto LABEL_29;
  }
  else
  {
    v7 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v30 = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBLEAlertReceived,Signature invalid\"}", buf, 0x12u);
    }
  }
}

void sub_100080300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100028C54((uint64_t)&a9);
  sub_100028C54((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100080324(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100063FF0(result);
    operator delete();
  }
  return result;
}

void sub_100080364()
{
  operator delete();
}

_QWORD *sub_100080378()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F5E48;
  return result;
}

void sub_10008039C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F5E48;
}

uint64_t sub_1000803B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000803F4()
{
}

void sub_100080404()
{
  operator delete();
}

_QWORD *sub_100080418()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F5EC8;
  return result;
}

void sub_10008043C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F5EC8;
}

uint64_t sub_100080458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100080494()
{
}

void sub_1000804A4()
{
  operator delete();
}

_QWORD *sub_1000804B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F5F48;
  result[1] = v3;
  return result;
}

uint64_t sub_1000804EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F5F48;
  a2[1] = v2;
  return result;
}

void sub_100080508(uint64_t a1, double *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void *v8;
  char *v9;
  __int128 v10;
  NSObject *v11;
  _BOOL4 v12;
  unsigned int v13;
  NSObject *v14;
  unsigned int v15;
  _BYTE buf[48];
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onCurrentPeopleDensityReceivedCb\"}", buf, 0x12u);
    v4 = SALogObjectGeneral;
  }
  *(_BYTE *)(v3 + 48) = 0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 4);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v5;
    *(_WORD *)&buf[28] = 2049;
    *(double *)&buf[30] = v6;
    *(_WORD *)&buf[38] = 2049;
    *(_QWORD *)&buf[40] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onCurrentPeopleDensityReceivedCb,lastEvent,\", \"startTimestamp\":\"%{private}0.2f\", \"densityScore\":\"%{private}0.2f\", \"scanDuration\":\"%{private}0.2f\"}", buf, 0x30u);
    v4 = SALogObjectGeneral;
  }
  *(_DWORD *)(v3 + 64) = *a2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onCurrentPeopleDensityReceivedCb\"}", buf, 0x12u);
  }
  v15 = 0;
  v8 = sub_10003D044();
  if ((sub_10003CCFC((uint64_t)v8, CFSTR("minDeviceDensityCount"), &v15) & 1) == 0)
  {
    buf[0] = 0;
    *(_OWORD *)&buf[4] = xmmword_1000ADFE0;
    *(_OWORD *)&buf[20] = xmmword_1000ADFF0;
    *(_QWORD *)&buf[36] = &_mh_execute_header;
    *(_DWORD *)&buf[44] = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v9 = (char *)sub_1000687EC();
    v10 = *((_OWORD *)v9 + 26);
    *(_OWORD *)buf = *((_OWORD *)v9 + 25);
    *(_OWORD *)&buf[16] = v10;
    *(_OWORD *)&buf[32] = *((_OWORD *)v9 + 27);
    v17 = v9[448];
    if (v9 + 400 == buf)
    {
      v15 = *(_DWORD *)&buf[16];
    }
    else
    {
      sub_100017854(&__p, *((uint64_t **)v9 + 57), *((uint64_t **)v9 + 58), (uint64_t)(*((_QWORD *)v9 + 58) - *((_QWORD *)v9 + 57)) >> 3);
      v15 = *(_DWORD *)&buf[16];
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
    }
  }
  v11 = SALogObjectGeneral;
  v12 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
  v13 = v15;
  if (v12)
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,getMinimumDeviceDensityCount\", \"count\":%{private}d}", buf, 0x18u);
    v13 = v15;
  }
  if (*a2 >= (double)v13)
  {
    v14 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onCurrentPeopleDensityReceivedCb\"}", buf, 0x12u);
    }
    *(_BYTE *)(v3 + 48) = 1;
  }
  sub_10007ECF0(v3);
  sub_10007EAC8((unsigned __int8 *)v3);
}

void sub_100080860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100080884(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000808C0()
{
}

void sub_1000808D0()
{
  operator delete();
}

_QWORD *sub_1000808E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F5FC8;
  return result;
}

void sub_100080908(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F5FC8;
}

void sub_100080920()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  v0 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onSettingsChanged\"}", (uint8_t *)v1, 0x12u);
  }
}

uint64_t sub_1000809D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100080A0C()
{
}

void sub_100080A1C()
{
  operator delete();
}

_QWORD *sub_100080A30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F6048;
  result[1] = v3;
  return result;
}

uint64_t sub_100080A64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F6048;
  a2[1] = v2;
  return result;
}

void sub_100080A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBLEAlertReceivedCb\"}", (uint8_t *)v5, 0x12u);
  }
  sub_10007FFF4(v3, a2);
}

uint64_t sub_100080B4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100080B88()
{
}

uint64_t sub_100080B94(uint64_t a1)
{

  return a1;
}

void sub_100080BBC(uint64_t a1)
{

  operator delete();
}

uint64_t sub_100080BF4()
{
  return 0;
}

id sub_100080BFC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1000F60D8;
  result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100080C30(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t sub_100080C40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_100080C50(uint64_t a1, uint64_t a2)
{
  if (sub_100010690(a2, (uint64_t)&off_1000F6148))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100080C8C()
{
  return &off_1000F6148;
}

void sub_100080C9C()
{
  operator delete();
}

_QWORD *sub_100080CB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F6168;
  result[1] = v3;
  return result;
}

uint64_t sub_100080CE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F6168;
  a2[1] = v2;
  return result;
}

void sub_100080D00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#blecore,onBLEAlertReceivedCb\"}", (uint8_t *)v5, 0x12u);
  }
  sub_10007FFF4(v3, a2);
}

uint64_t sub_100080DCC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100080E08()
{
}

void sub_100080E14(void *a1)
{
  id v1;

  v1 = a1;
  if (*((_BYTE *)sub_10003D044() + 216))
    operator new();
  operator new();
}

void sub_100080F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

uint64_t sub_100080FF0(uint64_t a1, char *a2, const std::string *a3)
{
  std::string *v4;

  *(_QWORD *)a1 = &off_1000F61E8;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (std::string *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (a2)
  {
    sub_10004BE30((std::string *)(a1 + 16), a2);
    std::string::operator=(v4, a3);
  }
  return a1;
}

void sub_10008105C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL sub_100081088(const std::__fs::filesystem::path *a1)
{
  NSObject *v2;
  std::error_code *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  const std::__fs::filesystem::path *v9;

  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fi,removing\", \"filePath\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return remove(a1, v3);
}

uint64_t sub_100081158(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  FILE **v9;
  uint64_t v10;
  FILE *v11;
  NSObject *v12;
  const char *v13;
  int __ptr;
  int v16;
  __int16 v17;
  const char *v18;

  v8 = sub_100080FF0(a1, a2, (const std::string *)a4);
  *(_QWORD *)v8 = &off_1000F6200;
  *(_OWORD *)(v8 + 64) = 0u;
  v9 = (FILE **)(v8 + 64);
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  if (!a2)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return a1;
    __ptr = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v13 = "{\"msg%{public}.0s\":\"#fi,#warning,read,invalidFileArgs\"}";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&__ptr, 0x12u);
    return a1;
  }
  v10 = *(unsigned __int8 *)(a4 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (!v10)
  {
    v12 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return a1;
    __ptr = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v13 = "{\"msg%{public}.0s\":\"#fi,#warning,read,invalidFileFormatVersion\"}";
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 104) = a3;
  v11 = fopen(a2, "r");
  *v9 = v11;
  if (v11)
    operator new[]();
  v12 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    __ptr = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v13 = "{\"msg%{public}.0s\":\"#fi,#warning,read,cannotOpenFile\"}";
    goto LABEL_13;
  }
  return a1;
}

void sub_100081514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v3)
    operator delete[]();
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  sub_100081584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081584(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1000F61E8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

FILE *sub_1000815D0(uint64_t a1)
{
  FILE *result;

  result = *(FILE **)(a1 + 64);
  if (result)
  {
    fclose(result);
    result = *(FILE **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (result)
      operator delete[]();
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_10008161C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1000F6200;
  sub_1000815D0(a1);
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    operator delete[]();
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return sub_100081584(a1);
}

uint64_t sub_10008167C(const char *a1, uint64_t a2)
{
  FILE *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  _BYTE __ptr[65];

  if (!a1)
  {
    v5 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v6 = "{\"msg%{public}.0s\":\"#fi,#warning,isValid,invalidArgs\"}";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0x12u);
    return 0;
  }
  v3 = fopen(a1, "r");
  if (!v3)
  {
    v5 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v6 = "{\"msg%{public}.0s\":\"#fi,#warning,isValid,cannotOpenFile\"}";
    goto LABEL_14;
  }
  if (fread(__ptr, 1uLL, 0x41uLL, v3) == 65)
  {
    __ptr[64] = 0;
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    strlen(v4);
    operator new[]();
  }
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v6 = "{\"msg%{public}.0s\":\"#fi,#warning,isValid,cannotReadHash\"}";
    goto LABEL_14;
  }
  return 0;
}

void sub_100081AF8()
{
  operator delete[]();
}

char *sub_100081B44(uint64_t a1)
{
  FILE *v2;
  char *v3;
  size_t v5;
  size_t v6;
  char __ptr;

  v2 = *(FILE **)(a1 + 64);
  if (!v2 || feof(v2))
    return 0;
  v3 = fgets(*(char **)(a1 + 96), *(_DWORD *)(a1 + 104), *(FILE **)(a1 + 64));
  if (!v3)
    return v3;
  if (feof(*(FILE **)(a1 + 64)))
    return 0;
  v5 = strlen(v3);
  if (v5 == *(_QWORD *)(a1 + 104) - 1)
  {
    for (__ptr = 0; __ptr != 10; fread(&__ptr, 1uLL, 1uLL, *(FILE **)(a1 + 64)))
    {
      if (feof(*(FILE **)(a1 + 64)))
        break;
    }
    return 0;
  }
  v6 = v5;
  if (feof(*(FILE **)(a1 + 64)))
    return 0;
  if (v3[v6 - 1] == 10)
    v3[v6 - 1] = 0;
  return v3;
}

uint64_t sub_100081C30(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  FILE **v7;
  FILE *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  NSObject *v16;
  const char *v17;
  std::string v19;
  void *__p[2];
  int64_t v21;
  _BYTE buf[32];
  __int128 v23;
  __int128 v24;
  __int16 v25;

  v6 = sub_100080FF0(a1, a2, (const std::string *)a3);
  *(_QWORD *)v6 = &off_1000F6218;
  *(_OWORD *)(v6 + 64) = 0u;
  v7 = (FILE **)(v6 + 64);
  *(_OWORD *)(v6 + 80) = 0u;
  if (!a2)
  {
    v16 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return a1;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v17 = "{\"msg%{public}.0s\":\"#fi,#warning,write,invalidFileArgs\"}";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    return a1;
  }
  v8 = fopen(a2, "w");
  *v7 = v8;
  if (!v8)
  {
    v16 = SALogObjectGeneral;
    if (!os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      return a1;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v17 = "{\"msg%{public}.0s\":\"#fi,#warning,write,cannotOpenFile\"}";
    goto LABEL_20;
  }
  *(_QWORD *)&v9 = 0x6161616161616161;
  *((_QWORD *)&v9 + 1) = 0x6161616161616161;
  v23 = v9;
  v24 = v9;
  *(_OWORD *)buf = v9;
  *(_OWORD *)&buf[16] = v9;
  v25 = 10;
  fputs(buf, v8);
  sub_10000E8A0(&v19, "\n");
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::insert(&v19, 0, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  fputs((const char *)v15, *v7);
  CC_SHA256_Init((CC_SHA256_CTX *)(a1 + 96));
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_100081E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 95) < 0)
    operator delete(*(void **)(v21 + 72));
  sub_100081584(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100081E90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char __str[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  unsigned __int8 md[32];

  if (*(_QWORD *)(result + 64))
  {
    v1 = result;
    CC_SHA256_Final(md, (CC_SHA256_CTX *)(result + 96));
    v2 = 0;
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)__str = 0u;
    v6 = 0u;
    v3 = __str;
    do
      v3 += snprintf(v3, 3uLL, "%02x", md[v2++]);
    while (v2 != 32);
    v9 = 10;
    v4 = fseek(*(FILE **)(v1 + 64), 0, 2);
    fseek(*(FILE **)(v1 + 64), 0, 0);
    fputs(__str, *(FILE **)(v1 + 64));
    fseek(*(FILE **)(v1 + 64), v4, 0);
    result = *(_QWORD *)(v1 + 64);
    if (result)
      result = fclose((FILE *)result);
    *(_QWORD *)(v1 + 64) = 0;
  }
  return result;
}

uint64_t sub_100081FA4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1000F6218;
  if (*(_QWORD *)(a1 + 64))
    sub_100081E90(a1);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return sub_100081584(a1);
}

const char *sub_100081FF4(const char *result, const char *a2)
{
  const char *v2;
  const char *v3;
  CC_LONG v4;
  char data;

  v2 = a2;
  v3 = result;
  if (a2[23] < 0)
  {
    if (!*((_QWORD *)a2 + 1))
      return result;
    result = *(const char **)a2;
  }
  else
  {
    result = a2;
    if (!a2[23])
      return result;
  }
  fputs(result, *((FILE **)v3 + 8));
  if (v2[23] < 0)
    v2 = *(const char **)v2;
  v4 = strlen(v2);
  CC_SHA256_Update((CC_SHA256_CTX *)(v3 + 96), v2, v4);
  data = 10;
  fputc(10, *((FILE **)v3 + 8));
  return (const char *)CC_SHA256_Update((CC_SHA256_CTX *)(v3 + 96), &data, 1u);
}

void SACompanionDetector::create(void *a1)
{
  id v1;

  v1 = a1;
  if (*((_BYTE *)sub_10003D044() + 136))
    operator new();
  operator new();
}

void sub_1000821BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100082238(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v5 = a2;
  sub_100004F4C((uint64_t)v9, a3);
  sub_100082348(a1, v5, (uint64_t)v9);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = &off_1000F6290;

  return a1;
}

void sub_1000822FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *sub_100082348(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;

  v5 = a2;
  *a1 = off_1000F62E0;
  v6 = v5;
  a1[1] = v6;
  sub_100004F4C((uint64_t)(a1 + 2), a3);

  return a1;
}

void sub_1000823A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000823C0(SACompanionDetectorTest *a1)
{
  SACompanionDetectorTest::~SACompanionDetectorTest(a1);
  operator delete();
}

void SACompanionDetectorTest::~SACompanionDetectorTest(SACompanionDetectorTest *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1000F62E0;
  v2 = (char *)this + 16;
  v3 = (char *)*((_QWORD *)this + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }

}

{
  SACompanionDetectorTest::~SACompanionDetectorTest(this);
  operator delete();
}

void SACoreLocation::create(void *a1)
{
  a1;
  if (*((_BYTE *)sub_10003D044() + 8))
    sub_1000824F4();
  sub_1000826A0();
}

void sub_1000824D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1000824F4()
{
  operator new();
}

void sub_100082610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

void sub_1000826A0()
{
  operator new();
}

void sub_1000827BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

void SATimer::create(void *a1)
{
  id v1;

  v1 = a1;
  operator new();
}

void sub_1000828F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete();
}

void SANetworkReachability::create(void *a1)
{
  id v1;

  v1 = a1;
  if (*((_BYTE *)sub_10003D044() + 50))
    operator new();
  operator new();
}

void sub_100082A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

uint64_t sub_100082B20(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100004FB0();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void SALogInit(void)
{
  os_log_t v0;
  void *v1;
  os_log_t v2;
  void *v3;

  if (!SALogObjectGeneral)
  {
    v0 = os_log_create("com.apple.safetyalertsd", "general");
    v1 = (void *)SALogObjectGeneral;
    SALogObjectGeneral = (uint64_t)v0;

  }
  if (!SALogObjectWarning)
  {
    v2 = os_log_create("com.apple.safetyalertsd", "warning");
    v3 = (void *)SALogObjectWarning;
    SALogObjectWarning = (uint64_t)v2;

  }
}

SafetyAlertsDaemonInterface *SafetyAlertsDaemonInterfaceProd::SafetyAlertsDaemonInterfaceProd(SafetyAlertsDaemonInterface *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v7[36];

  v5 = a2;
  sub_10007931C((uint64_t)v7, a3);
  SafetyAlertsDaemonInterface::SafetyAlertsDaemonInterface(a1, v5, (uint64_t)v7);
  sub_10007958C(v7);
  *(_QWORD *)a1 = off_1000F6308;

  return a1;
}

void sub_100082C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_10007958C((uint64_t *)va);

  _Unwind_Resume(a1);
}

void SafetyAlertsDaemonInterfaceProd::~SafetyAlertsDaemonInterfaceProd(id *this)
{
  *this = off_1000F6350;

  sub_10007958C(this + 1);
}

{
  SafetyAlertsDaemonInterfaceProd::~SafetyAlertsDaemonInterfaceProd(this);
  operator delete();
}

void SafetyAlertsDaemonInterfaceProd::processMessage(_QWORD *a1, void *a2)
{
  SAPlatformInfo *string;
  uint64_t v4;
  _BOOL4 v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v9;
  NSObject *v10;
  uint64_t v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  __int128 *v16;
  xpc_object_t reply;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  xpc_object_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  _BOOL4 v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  xpc_object_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  uint8_t *v46;
  const char *v47;
  NSObject *v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  _BOOL8 v52;
  _BOOL8 v53;
  _BOOL8 v54;
  _BOOL8 v55;
  BOOL v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint8_t *v59;
  const char *v60;
  NSObject *v61;
  id v62;
  xpc_object_t original;
  xpc_object_t xdict;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t value;
  __int16 v70;
  const char *v71;
  __int16 v72;
  uint8_t *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  uint8_t buf[48];
  __int128 v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  int64_t v87;
  _BYTE v88[128];

  original = a2;
  string = (SAPlatformInfo *)xpc_dictionary_get_string(original, "message");
  if (objc_msgSend(*(id *)SAPlatformInfo::instance(string), "isEqualToString:", CFSTR("iPhone"))
    && !strncmp((const char *)string, "userTapped", 0xAuLL))
  {
    v19 = xpc_dictionary_get_string(original, "WeaMessage");
    v20 = a1[4];
    if (v20)
    {
      *(_QWORD *)buf = v19;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v20 + 48))(v20, buf);
    }
    goto LABEL_40;
  }
  if (!strncmp((const char *)string, "networkChanged", 0xEuLL))
  {
    v8 = a1[8];
    if (!v8)
      goto LABEL_40;
    goto LABEL_18;
  }
  if (!strncmp((const char *)string, "testMessage", 0xBuLL))
  {
    v15 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = "testMessage";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,processMessage\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    v16 = sub_100017A18();
    sub_100017B10(v16, original);
    reply = xpc_dictionary_create_reply(original);
    v18 = reply;
    if (reply)
      xpc_dictionary_send_reply(reply);

    goto LABEL_40;
  }
  if (!strncmp((const char *)string, "isEnabledSync", 0xDuLL) || !strncmp((const char *)string, "isEnabled", 9uLL))
  {
    v9 = xpc_dictionary_create_reply(original);
    v10 = SALogObjectGeneral;
    if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = string;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,processMessage\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    if (v9)
    {
      v11 = a1[12];
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
        v13 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,isSafetyAlertsEnabled()\", \"isEnabled\":%{public}hhd}", buf, 0x18u);
        }
        v14 = v12;
      }
      else
      {
        v14 = 0;
      }
      xpc_dictionary_set_uint64(v9, "isEnabledResult", v14);
      xpc_dictionary_send_reply(v9);
    }
    goto LABEL_39;
  }
  if (strncmp((const char *)string, "significantEvent", 0x10uLL))
  {
    if (!strncmp((const char *)string, "fetchAvailableAlertTypes", 0x18uLL))
    {
      xdict = xpc_dictionary_create_reply(original);
      v23 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = string;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,processMessage\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      v24 = xdict;
      if (xdict)
      {
        if (a1[16])
        {
          LOBYTE(value) = 0;
          v62 = objc_alloc_init((Class)NSMutableDictionary);
          sub_100083C44((uint64_t)(a1 + 13), v62, (uint64_t)&value);
          v25 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2113;
            *(_QWORD *)&buf[20] = v62;
            *(_WORD *)&buf[28] = 1025;
            *(_DWORD *)&buf[30] = value;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,onAvailableAlertSettingsRequest()\", \"availableAlerts\":%{private, location:escape_only}@, \"initialized\":%{private}hhd}", buf, 0x22u);
          }
          xpc_dictionary_set_BOOL(xdict, "isInitialized", value);
          if ((_BYTE)value)
          {
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v26 = v62;
            v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v65, v88, 16);
            if (v27)
            {
              v28 = *(_QWORD *)v66;
              do
              {
                for (i = 0; i != v27; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v66 != v28)
                    objc_enumerationMutation(v26);
                  v30 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
                  v31 = xpc_dictionary_create(0, 0, 0);
                  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v30));
                  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("defaultValue")));

                  xpc_dictionary_set_BOOL(v31, "defaultValue", (BOOL)objc_msgSend(v33, "BOOLValue"));
                  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v30));
                  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("preferencesKey")));

                  v36 = objc_retainAutorelease(v35);
                  xpc_dictionary_set_string(v31, "preferencesKey", (const char *)objc_msgSend(v36, "UTF8String"));
                  xpc_dictionary_set_value(xdict, (const char *)objc_msgSend(objc_retainAutorelease(v30), "UTF8String"), v31);

                }
                v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v65, v88, 16);
              }
              while (v27);
            }

          }
        }
        v24 = xdict;
        xpc_dictionary_send_reply(xdict);
      }

      goto LABEL_40;
    }
    if (!strncmp((const char *)string, "settingsChanged", 0xFuLL))
    {
      v37 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = string;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,processMessage\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      v8 = a1[20];
      if (!v8)
        sub_100004FB0();
    }
    else
    {
      if (!strncmp((const char *)string, "saDelivery", 0xAuLL))
      {
        v38 = xpc_dictionary_get_BOOL(original, "Enabled");
        v39 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = "saDelivery";
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v38;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,enhancedDelivery\", \"message\":%{private, location:escape_only}s, \"isEnabled\":%{public}hhd}", buf, 0x22u);
        }
        v40 = a1[24];
        if (v40)
        {
          buf[0] = v38;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v40 + 48))(v40, buf);
        }
        goto LABEL_40;
      }
      if (strncmp((const char *)string, "enhancedDeliveryPageVisited", 0x1BuLL))
      {
        if (!strncmp((const char *)string, "saIgneousTestState", 0x12uLL))
        {
          v42 = xpc_dictionary_create_reply(original);
          v43 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2081;
            *(_QWORD *)&buf[20] = string;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,Igneous test\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
          if (v42)
          {
            v82 = 0;
            v81 = 0u;
            memset(buf, 0, sizeof(buf));
            v44 = a1[32];
            if (v44)
            {
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v44 + 48))(&value);
              sub_100083CB4((uint64_t)buf, (__int128 *)&value);
              sub_100031578((uint64_t)&value);
              v45 = SALogObjectGeneral;
              if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
              {
                v46 = &buf[24];
                if ((buf[47] & 0x80u) != 0)
                  v46 = *(uint8_t **)&buf[24];
                value = 68290050;
                v70 = 2082;
                v71 = "";
                v72 = 2082;
                v73 = v46;
                v74 = 1026;
                v75 = v87;
                v76 = 2050;
                v77 = v83;
                v78 = 2050;
                v79 = v84;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,igneousStatusInfoForTestAlert\", \"Uid\":%{public, location:escape_only}s, \"ErrorCode\":%{public}d, \"originatedLatency\":\"%{public}0.3f\", \"ingressLatency\":\"%{public}0.3f\"}", (uint8_t *)&value, 0x36u);
              }
              if ((buf[47] & 0x80u) == 0)
                v47 = (const char *)&buf[24];
              else
                v47 = *(const char **)&buf[24];
            }
            else
            {
              v47 = (const char *)&buf[24];
            }
            xpc_dictionary_set_string(v42, "igneousStateInfoUID", v47);
            if ((buf[23] & 0x80u) == 0)
              v59 = buf;
            else
              v59 = *(uint8_t **)buf;
            xpc_dictionary_set_string(v42, "igneousStateInfoChannel", (const char *)v59);
            if (v82 >= 0)
              v60 = (const char *)&v81;
            else
              v60 = (const char *)v81;
            xpc_dictionary_set_string(v42, "weaText", v60);
            xpc_dictionary_set_int64(v42, "igneousStateInfoError", v87);
            xpc_dictionary_set_double(v42, "igneousStateInfoOriginiatedLatency", v83);
            xpc_dictionary_set_double(v42, "weaAlertReceivedTs", v85);
            xpc_dictionary_set_double(v42, "igneousAlertReceivedTs", v86);
            xpc_dictionary_set_double(v42, "igneousStateInfoIngressLatency", v84);
            xpc_dictionary_send_reply(v42);
            sub_100031578((uint64_t)buf);
          }

          goto LABEL_40;
        }
        if (strncmp((const char *)string, "saIgneousEnableState", 0x14uLL))
        {
          v4 = SALogObjectGeneral;
          v5 = os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT);
          if (!string)
          {
            if (!v5)
              goto LABEL_40;
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v6 = "{\"msg%{public}.0s\":\"#daemonInterfaceProd,unknownMessage,nil\"}";
            v7 = v4;
            v22 = 18;
            goto LABEL_36;
          }
          if (v5)
          {
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2081;
            *(_QWORD *)&buf[20] = string;
            v6 = "{\"msg%{public}.0s\":\"#daemonInterfaceProd,unknownMessage\", \"message\":%{private, location:escape_only}s}";
            v7 = v4;
LABEL_35:
            v22 = 28;
LABEL_36:
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v22);
            goto LABEL_40;
          }
          goto LABEL_40;
        }
        v9 = xpc_dictionary_create_reply(original);
        v48 = SALogObjectGeneral;
        if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = string;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,enablement\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        if (v9)
        {
          v49 = a1[36];
          if (v49)
          {
            v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49);
            v51 = SALogObjectGeneral;
            v52 = HIDWORD(v50) & 1;
            v53 = (v50 >> 40) & 1;
            v54 = HIWORD(v50) & 1;
            if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68290819;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 1025;
              *(_DWORD *)&buf[20] = v50 & 1;
              *(_WORD *)&buf[24] = 1025;
              *(_DWORD *)&buf[26] = (v50 >> 8) & 1;
              *(_WORD *)&buf[30] = 1025;
              *(_DWORD *)&buf[32] = BYTE3(v50) & 1;
              *(_WORD *)&buf[36] = 1025;
              *(_DWORD *)&buf[38] = WORD1(v50) & 1;
              *(_WORD *)&buf[42] = 1025;
              *(_DWORD *)&buf[44] = BYTE4(v50) & 1;
              LOWORD(v81) = 1025;
              *(_DWORD *)((char *)&v81 + 2) = (v50 >> 40) & 1;
              WORD3(v81) = 1025;
              DWORD2(v81) = HIWORD(v50) & 1;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,igneousEnablementStateInfo\", \"inCoverageRegion\":%{private}hhd, \"inSupportedCountry\":%{private}hhd, \"isInMagnetMode\":%{private}hhd, \"isUserOptedIn\":%{private}hhd, \"isEnabled\":%{private}hhd, \"isEmergencyAlertEnabled\":%{private}hhd, \"isMotionHarvestAllowed\":%{private}hhd}", buf, 0x3Cu);
            }
            v55 = (v50 >> 8) & 1;
            v56 = v50 & 1;
            v57 = (v50 >> 16) & 1;
            v58 = (v50 >> 24) & 1;
          }
          else
          {
            v56 = 0;
            LOBYTE(v55) = 0;
            LOBYTE(v57) = 0;
            LOBYTE(v58) = 0;
            LOBYTE(v52) = 0;
            LOBYTE(v53) = 0;
            LOBYTE(v54) = 0;
          }
          xpc_dictionary_set_BOOL(v9, "saEnablementStateInCountry", v55);
          xpc_dictionary_set_BOOL(v9, "saEnablementStateInCoverageArea", v56);
          xpc_dictionary_set_BOOL(v9, "saEnablementStateInMagnetMode", v58);
          xpc_dictionary_set_BOOL(v9, "saEnablementStateOptedIn", v57);
          xpc_dictionary_set_BOOL(v9, "saEnablementStateEnabled", v52);
          xpc_dictionary_set_BOOL(v9, "saEmergencyAlertSwitchEnabled", v53);
          xpc_dictionary_set_BOOL(v9, "saMotionHarvestAllowed", v54);
          xpc_dictionary_send_reply(v9);
          v61 = SALogObjectGeneral;
          if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,igneousEnablementStateInfo\"}", buf, 0x12u);
          }
        }
LABEL_39:

        goto LABEL_40;
      }
      v41 = SALogObjectGeneral;
      if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = "saDelivery";
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#daemonInterfaceProd,enhancedDeliveryPageVisited\", \"message\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      v8 = a1[28];
      if (!v8)
        goto LABEL_40;
    }
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    goto LABEL_40;
  }
  v21 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = "testMessage";
    v6 = "{\"msg%{public}.0s\":\"#daemonInterfaceProd,significantEvent\", \"message\":%{private, location:escape_only}s}";
    v7 = v21;
    goto LABEL_35;
  }
LABEL_40:

}

void sub_100083B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;

  _Unwind_Resume(a1);
}

void sub_100083C44(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v5 = a3;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100004FB0();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);

}

void sub_100083CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100083CB4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = *(__int128 *)((char *)a2 + 72);
  v10 = *(__int128 *)((char *)a2 + 88);
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  return a1;
}

void SafetyAlertsDaemonInterfaceProd::shutdown(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_1000273E4(&v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_100083DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100028C54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *SAPlatformInfo::instance(SAPlatformInfo *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_100102D58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_100102D58))
  {
    SAPlatformInfo::SAPlatformInfo((SAPlatformInfo *)&unk_100102D48);
    __cxa_guard_release(&qword_100102D58);
  }
  return &unk_100102D48;
}

void sub_100083E6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100102D58);
  _Unwind_Resume(a1);
}

void SAPlatformInfo::SAPlatformInfo(SAPlatformInfo *this)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  const __CFBoolean *v5;
  const __CFBoolean *v6;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 12) = 0;
  v2 = MGCopyAnswer(CFSTR("DeviceClass"), 0);
  v3 = *(void **)this;
  *(_QWORD *)this = v2;

  *((_BYTE *)this + 8) = MGGetBoolAnswer(CFSTR("contains-cellular-radio"));
  *((_BYTE *)this + 9) = os_variant_has_internal_content("com.apple.safetyalerts");
  v4 = objc_msgSend(*(id *)this, "isEqualToString:", CFSTR("iPhone"));
  if (v4)
    LOBYTE(v4) = MGGetBoolAnswer(CFSTR("jkr5aFPOh/d6zTzNKYthBw"));
  *((_BYTE *)this + 10) = v4;
  *((_BYTE *)this + 11) = 0;
  v5 = (const __CFBoolean *)MGCopyAnswer(CFSTR("DeviceSupportsAOP"), 0);
  v6 = v5;
  if (v5)
  {
    *((_BYTE *)this + 12) = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }
}

void sub_100083F44(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id SAPlatformInfo::isAOPSupportedDevice(id *this)
{
  id result;

  result = objc_msgSend(*this, "isEqualToString:", CFSTR("iPhone"));
  if ((_DWORD)result)
    return (id)(*((_BYTE *)this + 12) != 0);
  return result;
}

_QWORD *SALockMonitorTest::SALockMonitorTest(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;

  v7 = a2;
  sub_100004F4C((uint64_t)v15, a3);
  sub_100004F4C((uint64_t)v13, a4);
  sub_100084124(a1, v7, (uint64_t)v15, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_10;
  }
  if (v16)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  *a1 = &off_1000F6390;

  return a1;
}

void sub_1000840A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:

  _Unwind_Resume(a1);
}

_QWORD *sub_100084124(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;

  v7 = a2;
  *a1 = off_1000F63E0;
  sub_100004F4C((uint64_t)(a1 + 1), a3);
  sub_100004F4C((uint64_t)(a1 + 5), a4);
  a1[9] = v7;
  return a1;
}

void sub_100084194(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = v2;
  v6 = *(_QWORD **)(v4 + 32);
  if (v6 == v3)
  {
    v7 = v3;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = v6;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1000841E4(uint64_t a1)
{
  sub_10008420C(a1);
  operator delete();
}

uint64_t sub_10008420C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1000F63E0;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2 == (_QWORD *)(a1 + 40))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 8))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 8);
    goto LABEL_10;
  }
  if (v4)
  {
    v5 = 5;
LABEL_10:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

double sub_1000842A4(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_100102D60;
  if (*(double *)&qword_100102D60 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_100102D60 = v2;
  }
  return v2 * (double)a1;
}

uint64_t SATime::getTimeUncertaintyBucket(SATime *this)
{
  double v1;

  v1 = *((double *)this + 1);
  if (v1 <= 0.0)
    return 0;
  if (v1 < 1.0)
    return 1;
  if (v1 < 2.0)
    return 2;
  if (v1 < 5.0)
    return 3;
  if (v1 < 10.0)
    return 4;
  if (v1 < 20.0)
    return 5;
  if (v1 < 35.0)
    return 6;
  if (v1 < 50.0)
    return 7;
  if (v1 < 75.0)
    return 8;
  if (v1 < 100.0)
    return 9;
  if (v1 < 200.0)
    return 10;
  if (v1 >= 300.0)
    return 12;
  return 11;
}

uint64_t SAGridMetrics::SAGridMetrics(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v3 = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1000F6408;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,gridMetric object created\"}", (uint8_t *)v6, 0x12u);
  }

  return a1;
}

uint64_t sub_100084570(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  *(_QWORD *)a1 = off_1000F6408;
  v2 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,gridMetric release\"}", (uint8_t *)v5, 0x12u);
  }
  sub_10001606C(a1 + 56, *(_QWORD **)(a1 + 64));
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100084660(uint64_t a1)
{
  sub_100084570(a1);
  operator delete();
}

char *SAGridMetrics::onHistoricalLocationReceivedCb(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
    v9[0] = 68289283;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2049;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,OnHistoricalLocationReceivedCb\", \"HistoricalLocationCount\":%{private}lu}", (uint8_t *)v9, 0x1Cu);
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = (char *)(a1 + 32);
  if (*(_QWORD *)a2 != v6 && result != (char *)a2)
    return sub_10004BEF8(result, *(char **)a2, v6, (v6 - *(_QWORD *)a2) >> 5);
  return result;
}

uint64_t sub_100084780(uint64_t result)
{
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void SAGridMetrics::onSlcHistoryCb(_QWORD *a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[20];

  v3 = (uint64_t **)(a1 + 7);
  if (a1 + 7 != a2)
  {
    v4 = a2 + 1;
    v5 = (_QWORD *)*a2;
    if (a1[9])
    {
      v7 = (uint64_t **)(a1 + 8);
      v6 = a1[8];
      v8 = a1[7];
      a1[7] = a1 + 8;
      *(_QWORD *)(v6 + 16) = 0;
      a1[8] = 0;
      a1[9] = 0;
      if (*(_QWORD *)(v8 + 8))
        v9 = *(uint64_t **)(v8 + 8);
      else
        v9 = (uint64_t *)v8;
      v29 = (uint64_t)(a1 + 7);
      *(_QWORD *)v30 = v9;
      *(_QWORD *)&v30[8] = v9;
      if (!v9 || (v10 = sub_1000291E0((uint64_t)v9), *(_QWORD *)v30 = v10, v5 == v4))
      {
        v17 = v5;
      }
      else
      {
        do
        {
          v11 = (uint64_t)v10;
          v12 = v5[4];
          v9[4] = v12;
          v13 = *v7;
          v14 = (uint64_t **)(a1 + 8);
          v15 = (uint64_t **)(a1 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                v14 = (uint64_t **)v13;
                if (v12 >= v13[4])
                  break;
                v13 = (uint64_t *)*v13;
                v15 = v14;
                if (!*v14)
                  goto LABEL_14;
              }
              v13 = (uint64_t *)v13[1];
            }
            while (v13);
            v15 = v14 + 1;
          }
LABEL_14:
          sub_1000162D4(v3, (uint64_t)v14, v15, v9);
          if (v11)
            v10 = sub_1000291E0(v11);
          else
            v10 = 0;
          v16 = (_QWORD *)v5[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v5[2];
              v18 = *v17 == (_QWORD)v5;
              v5 = v17;
            }
            while (!v18);
          }
          if (!v11)
            break;
          v9 = (uint64_t *)v11;
          v5 = v17;
        }
        while (v17 != v4);
        *(_QWORD *)v30 = v10;
        *(_QWORD *)&v30[8] = v11;
      }
      sub_10008549C((uint64_t)&v29);
      v5 = v17;
    }
    if (v5 != v4)
    {
      v19 = (uint64_t **)(a1 + 8);
      do
      {
        v20 = v5[4];
        v21 = (uint64_t *)operator new(0x28uLL);
        v21[4] = v20;
        v22 = *v19;
        v23 = (uint64_t **)(a1 + 8);
        v24 = (uint64_t **)(a1 + 8);
        if (*v19)
        {
          do
          {
            while (1)
            {
              v23 = (uint64_t **)v22;
              if (v22[4] <= v20)
                break;
              v22 = (uint64_t *)*v22;
              v24 = v23;
              if (!*v23)
                goto LABEL_35;
            }
            v22 = (uint64_t *)v22[1];
          }
          while (v22);
          v24 = v23 + 1;
        }
LABEL_35:
        sub_1000162D4(v3, (uint64_t)v23, v24, v21);
        v25 = (_QWORD *)v5[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v5[2];
            v18 = *v26 == (_QWORD)v5;
            v5 = v26;
          }
          while (!v18);
        }
        v5 = v26;
      }
      while (v26 != v4);
    }
  }
  v27 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v28 = a1[9];
    v29 = 68289283;
    *(_WORD *)v30 = 2082;
    *(_QWORD *)&v30[2] = "";
    *(_WORD *)&v30[10] = 2049;
    *(_QWORD *)&v30[12] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,onSlcHistoryCb\", \"fSlcTimesamps\":%{private}lu}", (uint8_t *)&v29, 0x1Cu);
  }
}

void sub_100084A28(uint64_t a1, double a2, double a3)
{
  os_log_t *v4;
  NSObject *v5;
  uint64_t v6;
  double *v7;
  uint64_t *v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  os_log_t *v19;
  BOOL v20;
  void *v21;
  SAGridId *v22;
  unsigned int GlobalTileIdFromLatLonAndGridSizeInDegrees;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  double v27;
  double v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  void *v47;
  SAGridId *v48;
  unsigned int v49;
  unsigned int v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  double v67;
  uint8_t buf[8];
  _BYTE v69[32];
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint8_t v73[8];
  _BYTE v74[20];
  __int16 v75;
  uint64_t v76;

  v4 = (os_log_t *)&SALogObjectGeneral;
  v5 = SALogObjectGeneral;
  if (os_log_type_enabled((os_log_t)SALogObjectGeneral, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 5;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(_QWORD *)&v69[2] = "";
    *(_WORD *)&v69[10] = 2049;
    *(_QWORD *)&v69[12] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,run\", \"HistoricalLocationCount\":%{private}lu}", buf, 0x1Cu);
  }
  v7 = *(double **)(a1 + 32);
  v8 = *(uint64_t **)(a1 + 40);
  if (v7 != (double *)v8)
  {
    v64 = 0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = *v4;
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
      {
        v13 = *v7;
        v14 = *((_QWORD *)v7 + 1);
        v15 = *((_QWORD *)v7 + 2);
        v16 = *((_QWORD *)v7 + 3);
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v69 = 2082;
        *(_QWORD *)&v69[2] = "";
        *(_WORD *)&v69[10] = 2049;
        *(double *)&v69[12] = v13;
        *(_WORD *)&v69[20] = 2049;
        *(_QWORD *)&v69[22] = v14;
        *(_WORD *)&v69[30] = 2049;
        v70 = v15;
        v71 = 2049;
        v72 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareGridTransitionMetric\", \"Time\":\"%{private}0.3f\", \"Lat\":\"%{private}0.3f\", \"Lon\":\"%{private}0.3f\", \"hAcc\":\"%{private}0.3f\"}", buf, 0x3Au);
      }
      v17 = v7[1];
      if (v17 < -90.0 || v17 > 90.0 || (v18 = v7[2], v18 < -180.0) || v18 > 180.0 || v7[3] <= 0.0)
      {
        v26 = *v4;
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v69 = 2082;
          *(_QWORD *)&v69[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareGridTransitionMetric,#warning,skippingInvalidLocation\"}", buf, 0x12u);
        }
      }
      else
      {
        v19 = v4;
        v20 = v11 > 90.0 || v11 < -90.0;
        if (v20
          || v10 < -180.0
          || v10 > 180.0
          || v9 <= 0.0
          || (v27 = GEOCalculateDistance(v11, v10, v17, v18), v28 = v7[3], v27 >= v9 + v28 + 300.0))
        {
          *(_QWORD *)v73 = 0;
          v67 = 0.0;
          v21 = sub_1000687EC();
          sub_10006AFC4((uint64_t)v21, v73, &v67, v7[1], v7[2]);
          GlobalTileIdFromLatLonAndGridSizeInDegrees = SAGridId::generateGlobalTileIdFromLatLonAndGridSizeInDegrees(v22, v7[1], v7[2], 0.2, *(double *)v73, v67);
          v24 = *v4;
          if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
          {
            v25 = *(unsigned int *)(a1 + 20);
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v69 = 2082;
            *(_QWORD *)&v69[2] = "";
            *(_WORD *)&v69[10] = 2049;
            *(_QWORD *)&v69[12] = GlobalTileIdFromLatLonAndGridSizeInDegrees;
            *(_WORD *)&v69[20] = 2049;
            *(_QWORD *)&v69[22] = v64;
            *(_WORD *)&v69[30] = 2049;
            v70 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareGridTransitionMetric\", \"curGridId\":%{private}lu, \"prevGridId\":%{private}lu, \"gridTransitionCount\":%{private}lu}", buf, 0x30u);
          }
          if (v20 || v10 < -180.0 || v10 > 180.0 || v9 <= 0.0)
          {
            v11 = v7[1];
            v10 = v7[2];
            v9 = v7[3];
          }
          else if (GlobalTileIdFromLatLonAndGridSizeInDegrees == v64)
          {
            GlobalTileIdFromLatLonAndGridSizeInDegrees = v64;
          }
          else
          {
            ++*(_DWORD *)(a1 + 20);
          }
          v4 = v19;
          v64 = GlobalTileIdFromLatLonAndGridSizeInDegrees;
        }
        else
        {
          if (v28 < v9)
          {
            v11 = v7[1];
            v10 = v7[2];
            v9 = v7[3];
          }
          v29 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v69 = 2082;
            *(_QWORD *)&v69[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareGridTransitionMetric,NoSignificantLocationChange\"}", buf, 0x12u);
          }
        }
      }
      v7 += 4;
    }
    while (v7 != (double *)v8);
  }
  v30 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(unsigned int *)(a1 + 20);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(_QWORD *)&v69[2] = "";
    *(_WORD *)&v69[10] = 2049;
    *(_QWORD *)&v69[12] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareGridTransitionMetric\", \"gridTransitionCount\":%{private}lu}", buf, 0x1Cu);
    v30 = *v4;
  }
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(unsigned int *)(a1 + 72);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(_QWORD *)&v69[2] = "";
    *(_WORD *)&v69[10] = 2049;
    *(_QWORD *)&v69[12] = a2;
    *(_WORD *)&v69[20] = 2049;
    *(_QWORD *)&v69[22] = a3;
    *(_WORD *)&v69[30] = 2049;
    v70 = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,prepareSLCMetric\", \"startTsSeconds\":%{private}lu, \"endTsSeconds\":%{private}lu, \"slcTimesampsCount\":%{private}lu}", buf, 0x30u);
  }
  v33 = *(_QWORD **)(a1 + 56);
  v34 = (_QWORD *)(a1 + 64);
  if (v33 != (_QWORD *)(a1 + 64))
  {
    v66 = 0;
    v65 = 0;
    v35 = 0;
    v36 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 5;
    do
    {
      if (v36 <= v35)
      {
        v41 = v35;
      }
      else
      {
        v37 = v34;
        v38 = v35;
        v39 = *v4;
        v40 = v33[4];
        v41 = v35;
        while (1)
        {
          v42 = *(_QWORD *)(a1 + 32) + 32 * v38;
          v44 = *(double *)v42;
          v43 = *(double *)(v42 + 8);
          v45 = *(double *)(v42 + 16);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v69 = 2082;
            *(_QWORD *)&v69[2] = "";
            *(_WORD *)&v69[10] = 2049;
            *(_QWORD *)&v69[12] = v40;
            *(_WORD *)&v69[20] = 2049;
            *(_QWORD *)&v69[22] = v44;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareSLCMetric,\", \"t\":%{private}lu, \"locData.timestamp\":%{private}lu}", buf, 0x26u);
            v39 = *v4;
            v40 = v33[4];
          }
          if (v44 + -3.0 < (double)v40 && v44 + 3.0 > (double)v40)
            break;
          v38 = (v41 + 1);
          v41 = v38;
          if (v36 <= v38)
          {
            v41 = v35;
            v34 = v37;
            goto LABEL_65;
          }
        }
        *(_QWORD *)v73 = 0;
        v67 = 0.0;
        v47 = sub_1000687EC();
        v34 = v37;
        sub_10006AFC4((uint64_t)v47, v73, &v67, v43, v45);
        v49 = SAGridId::generateGlobalTileIdFromLatLonAndGridSizeInDegrees(v48, v43, v45, 0.2, *(double *)v73, v67);
        v50 = v49;
        if (v66 == v49)
        {
          v51 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v69 = 2082;
            *(_QWORD *)&v69[2] = "";
            *(_WORD *)&v69[10] = 2049;
            *(_QWORD *)&v69[12] = v65;
            *(_WORD *)&v69[20] = 2049;
            *(_QWORD *)&v69[22] = v66;
            *(_WORD *)&v69[30] = 2049;
            v70 = v66;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareSLCMetric,no match\", \"totalGridTransition\":%{private}lu, \"curGridId\":%{private}lu, \"prevGridId\":%{private}lu}", buf, 0x30u);
          }
          v50 = v66;
        }
        else
        {
          v52 = v65 + 1;
          v53 = *v4;
          ++v65;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v69 = 2082;
            *(_QWORD *)&v69[2] = "";
            *(_WORD *)&v69[10] = 2049;
            *(_QWORD *)&v69[12] = v52;
            *(_WORD *)&v69[20] = 2049;
            *(_QWORD *)&v69[22] = v50;
            *(_WORD *)&v69[30] = 2049;
            v70 = v66;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gm,prepareSLCMetric\", \"totalGridTransition\":%{private}lu, \"curGridId\":%{private}lu, \"prevGridId\":%{private}lu}", buf, 0x30u);
          }
        }
        v66 = v50;
      }
LABEL_65:
      v54 = (_QWORD *)v33[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v33[2];
          v56 = *v55 == (_QWORD)v33;
          v33 = v55;
        }
        while (!v56);
      }
      v35 = v41;
      v33 = v55;
    }
    while (v55 != v34);
    if (v65)
      *(_DWORD *)(a1 + 24) = v65;
  }
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v69 = 3221225472;
  *(_QWORD *)&v69[8] = sub_1000853A0;
  *(_QWORD *)&v69[16] = &unk_1000F1ED8;
  *(_QWORD *)&v69[24] = a1 + 20;
  AnalyticsSendEventLazy(CFSTR("com.apple.safetyalerts.lba.grid"), buf);
  v57 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    v58 = *(int *)(a1 + 20);
    v59 = *(int *)(a1 + 24);
    *(_DWORD *)v73 = 68289539;
    *(_DWORD *)&v73[4] = 0;
    *(_WORD *)v74 = 2082;
    *(_QWORD *)&v74[2] = "";
    *(_WORD *)&v74[10] = 2049;
    *(_QWORD *)&v74[12] = v58;
    v75 = 2049;
    v76 = v59;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gm,submitGridMetric\", \"gridTransitions\":%{private}lu, \"slcCount\":%{private}lu}", v73, 0x26u);
  }
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 72))
  {
    v60 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v34;
    *(_QWORD *)(*v34 + 16) = 0;
    *v34 = 0;
    v34[1] = 0;
    if (*(_QWORD *)(v60 + 8))
      v61 = *(_QWORD *)(v60 + 8);
    else
      v61 = v60;
    *(_QWORD *)v73 = a1 + 56;
    *(_QWORD *)v74 = v61;
    *(_QWORD *)&v74[8] = v61;
    if (v61)
      *(_QWORD *)v74 = sub_1000291E0(v61);
    sub_10008549C((uint64_t)v73);
  }
  *(_BYTE *)(a1 + 16) = 0;
}

