int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  void *v4;

  v3 = objc_autoreleasePoolPush();
  v4 = objc_autoreleasePoolPush();
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  objc_autoreleasePoolPop(v4);
  dispatch_main();
}

uint64_t sub_10000579C(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1000057AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t variable initialization expression of Clock.heartbeatTimer()
{
  return 0;
}

uint64_t variable initialization expression of OSActivity.activityState()
{
  return 0;
}

BOOL sub_100005810(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

void type metadata accessor for UIInterfaceOrientationMask(uint64_t a1)
{
  sub_100005E3C(a1, &qword_100091498, (uint64_t)&unk_100085698);
}

void type metadata accessor for RPDataLinkType(uint64_t a1)
{
  sub_100005E3C(a1, &qword_1000914A0, (uint64_t)&unk_1000856C0);
}

__n128 initializeWithTake for Watchdog.DiagnosticState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100005854(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005874(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_100005E3C(a1, &qword_1000914A8, (uint64_t)&unk_100085738);
}

void type metadata accessor for SidecarTransport(uint64_t a1)
{
  sub_100005E3C(a1, &qword_1000914B0, (uint64_t)&unk_100085760);
}

void type metadata accessor for SidecarPacketType(uint64_t a1)
{
  sub_100005E3C(a1, &qword_1000914B8, (uint64_t)&unk_100085780);
}

uint64_t sub_1000058D8(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000058E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = *v1 & a1;
  if (result)
    *v1 &= ~a1;
  return result;
}

uint64_t sub_100005904(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

BOOL sub_10000591C(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100005928(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_100005934(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

void sub_100005944(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_1000057A4();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void sub_100005974(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = RapportDeviceChangeFlags.rawValue.getter(*v1);
  sub_100005E8C();
}

uint64_t sub_100005998()
{
  return sub_100005CC0(&qword_1000914C0, (uint64_t (*)(uint64_t))type metadata accessor for SidecarTransport, (uint64_t)&unk_10007126C);
}

BOOL sub_1000059C4(uint64_t *a1, uint64_t *a2)
{
  return == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int sub_1000059D0()
{
  Swift::UInt *v0;

  return sub_1000059D8(*v0);
}

Swift::Int sub_1000059D8(Swift::UInt a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void sub_100005A1C(int a1)
{
  Swift::UInt *v1;

  RapportControlFlags.hash(into:)(a1, *v1);
}

Swift::Int sub_100005A24(uint64_t a1)
{
  Swift::UInt *v1;

  return sub_100005A2C(a1, *v1);
}

Swift::Int sub_100005A2C(uint64_t a1, Swift::UInt a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

_QWORD *sub_100005A6C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100005A7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = j___s15SidecarTimeSync5ClockC14heartbeatTimer33_52E478E0294A7D1A30B0593D640BE43CLLSo24OS_dispatch_source_timer_pSgvpfi();
  *a1 = result;
  return result;
}

BOOL sub_100005AA0(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100005810(*a1, *v1);
}

uint64_t sub_100005AAC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10000579C(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_100005AD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005E94(a1);
  *v1 = sub_100038240(v2, v3);
  sub_100005E8C();
}

uint64_t sub_100005AF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100038244(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100005B24(uint64_t a1, _QWORD *a2)
{
  return sub_1000535DC(a1, *a2);
}

uint64_t sub_100005B2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_1000058E0(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100005B5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100005904(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100005B8C(_QWORD *a1)
{
  return sub_100053610(*a1);
}

uint64_t sub_100005B94(_QWORD *a1)
{
  return sub_1000482E8(*a1);
}

uint64_t sub_100005B9C(uint64_t *a1)
{
  return sub_10003825C(*a1);
}

uint64_t sub_100005BA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000058D8(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100005BD0(_QWORD *a1)
{
  _QWORD *v1;

  return sub_100048308(*a1, *v1);
}

BOOL sub_100005BDC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10000591C(*a1, *v1);
}

BOOL sub_100005BE8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10004830C(*a1, *v1);
}

BOOL sub_100005BF4()
{
  uint64_t *v0;

  return sub_100005928(*v0);
}

uint64_t sub_100005BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100005C14(uint64_t *a1)
{
  return sub_100005934(*a1);
}

_QWORD *sub_100005C1C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100005C28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000057AC(a1);
  *a2 = result;
  return result;
}

void sub_100005C4C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void type metadata accessor for CFData(uint64_t a1)
{
  sub_100005E3C(a1, &qword_100091528, (uint64_t)&unk_1000857A0);
}

void type metadata accessor for SidecarStreamFlags(uint64_t a1)
{
  sub_100005E3C(a1, &qword_100091530, (uint64_t)&unk_1000857D0);
}

void type metadata accessor for SidecarStreamType(uint64_t a1)
{
  sub_100005E3C(a1, &qword_100091538, (uint64_t)&unk_1000857F8);
}

uint64_t sub_100005C94()
{
  return sub_100005CC0(&qword_100091540, (uint64_t (*)(uint64_t))type metadata accessor for SidecarStreamFlags, (uint64_t)&unk_1000713C4);
}

uint64_t sub_100005CC0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005D00()
{
  return sub_100005CC0(&qword_100091548, (uint64_t (*)(uint64_t))type metadata accessor for SidecarStreamFlags, (uint64_t)&unk_100071394);
}

uint64_t sub_100005D2C()
{
  return sub_100005CC0(&qword_100091550, (uint64_t (*)(uint64_t))type metadata accessor for SidecarStreamFlags, (uint64_t)&unk_1000713EC);
}

uint64_t sub_100005D58()
{
  return sub_100005CC0(&qword_100091558, (uint64_t (*)(uint64_t))type metadata accessor for SidecarStreamFlags, (uint64_t)&unk_100071424);
}

uint64_t initializeBufferWithCopyOfBuffer for Sockaddr(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void *initializeWithCopy for Sockaddr(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t getEnumTagSinglePayload for Sockaddr(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Sockaddr(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
  sub_100005E3C(a1, (unint64_t *)&unk_100091560, (uint64_t)&unk_100085870);
}

void sub_100005E3C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005E94(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_100005EA4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for EnhancedDiscoveryController()
{
  return objc_opt_self(_TtC12SidecarRelay27EnhancedDiscoveryController);
}

uint64_t sub_100005EE8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091700);
  sub_100006CAC(v0, (uint64_t)qword_100091700);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000018, 0x80000001000715B0);
}

id sub_100005F64(char a1)
{
  void *v1;
  os_log_type_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  objc_class *v16;
  uint64_t v18;
  uint64_t v19;
  objc_super v20;

  v4 = qword_100091260;
  v5 = v1;
  if (v4 != -1)
    swift_once(&qword_100091260, sub_100005EE8);
  v6 = type metadata accessor for Logger(0);
  sub_100006CAC(v6, (uint64_t)qword_100091700);
  v7 = v5;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (sub_100006D2C(v9))
  {
    v10 = sub_100006D24(18);
    v11 = sub_100006D24(32);
    v19 = v11;
    *(_DWORD *)v10 = 136315394;
    ObjectType = swift_getObjectType(v7);
    v13 = _typeName(_:qualified:)(ObjectType, 0);
    v15 = v14;
    v18 = sub_100015FFC(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v18) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v10 + 14, v10 + 18);
    _os_log_impl((void *)&_mh_execute_header, v8, v2, "Loading %s. 'logErrorsWhenCalled' is set to: [%{BOOL}d]", (uint8_t *)v10, 0x12u);
    sub_100006D3C((uint64_t)&type metadata for Any);
    sub_100006D04(v11);
    sub_100006D04(v10);

  }
  else
  {

  }
  *((_BYTE *)v7 + OBJC_IVAR____TtC12SidecarRelay24SidecarRelayNullDelegate_logErrorsWhenCalled) = a1 & 1;

  v16 = (objc_class *)type metadata accessor for SidecarRelayNullDelegate();
  v20.receiver = v7;
  v20.super_class = v16;
  return objc_msgSendSuper2(&v20, "init");
}

id sub_10000612C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23[2];

  _StringGuts.grow(_:)(24);
  ObjectType = swift_getObjectType(v2);
  v6 = _typeName(_:qualified:)(ObjectType, 0);
  v8 = v7;
  swift_bridgeObjectRelease(0xE000000000000000);
  v23[0] = v6;
  v23[1] = v8;
  v9._countAndFlagsBits = 46;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  sub_100006D18();
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  v12 = v8;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC12SidecarRelay24SidecarRelayNullDelegate_logErrorsWhenCalled) == 1)
  {
    if (qword_100091260 != -1)
      swift_once(&qword_100091260, sub_100005EE8);
    v13 = type metadata accessor for Logger(0);
    sub_100006CAC(v13, (uint64_t)qword_100091700);
    v14 = swift_bridgeObjectRetain_n(v8, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    if (sub_100006D2C(v16))
    {
      v17 = (uint8_t *)sub_100006D24(12);
      v18 = sub_100006D24(32);
      v23[0] = v18;
      *(_DWORD *)v17 = 136380675;
      swift_bridgeObjectRetain(v12);
      v22 = sub_100015FFC(v6, v12, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v6, "%{private}s", v17, 0xCu);
      sub_100006D3C((uint64_t)&type metadata for Any);
      sub_100006D04(v18);
      sub_100006D04((uint64_t)v17);

    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
  }
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  return sub_10001F230(v19, v20, -999, v6, v12, 0);
}

void sub_100006388()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.SidecarRelayNullDelegate", 37, "init()", 6, 0);
  __break(1u);
}

id sub_1000063C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SidecarRelayNullDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SidecarRelayNullDelegate()
{
  return objc_opt_self(_TtC12SidecarRelay24SidecarRelayNullDelegate);
}

uint64_t sub_100006414()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(23, v0);
  return swift_errorRelease(v1);
}

uint64_t sub_100006474()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(33, v0);
  return swift_errorRelease(v1);
}

uint64_t sub_1000064D4()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(17, v0);
  return swift_errorRelease(v1);
}

uint64_t sub_100006544()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(18, v0);
  return swift_errorRelease(v1);
}

uint64_t sub_10000659C()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(37, v0);
  return swift_errorRelease(v1);
}

uint64_t sub_100006658()
{
  void *v0;
  id v1;

  sub_100006D18();
  v1 = sub_100006D10(22, v0);
  swift_errorRelease(v1);
  return 0;
}

void sub_1000066C8(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  id v3;
  Class isa;
  void *v5;

  v3 = sub_10000612C(0xD000000000000032, (void *)0x800000010006E340);
  sub_100006C74(0, (unint64_t *)&unk_100091910, SidecarDisplaySendingDeviceSessionState_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = (void *)_convertErrorToNSError(_:)(v3);
  ((void (**)(_QWORD, Class, void *))a2)[2](a2, isa, v5);

  swift_errorRelease(v3);
  _Block_release(a2);
}

uint64_t sub_1000067F8(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  uint64_t v18;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v15);
  v16 = a1;
  sub_1000068D4((uint64_t)v14, (uint64_t)v16, (void (**)(_QWORD, _QWORD))v15, a5, a6);
  _Block_release(v15);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_1000068D4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD), uint64_t a4, void *a5)
{
  id v6;
  void *v7;

  v6 = sub_10000612C(a4, a5);
  v7 = (void *)_convertErrorToNSError(_:)(v6);
  ((void (**)(_QWORD, void *))a3)[2](a3, v7);

  swift_errorRelease(v6);
  _Block_release(a3);
}

void sub_100006950(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  id v5;
  void *v6;

  v5 = sub_10000612C(0xD000000000000039, (void *)0x800000010006E210);
  v6 = (void *)_convertErrorToNSError(_:)(v5);
  ((void (**)(_QWORD, void *))a4)[2](a4, v6);

  swift_errorRelease(v5);
  _Block_release(a4);
}

void sub_100006A38(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  id v5;
  Class isa;
  void *v7;

  v5 = sub_10000612C(0xD00000000000001ELL, (void *)0x800000010006E1F0);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = (void *)_convertErrorToNSError(_:)(v5);
  ((void (**)(_QWORD, Class, void *))a4)[2](a4, isa, v7);

  swift_errorRelease(v5);
  _Block_release(a4);
}

uint64_t sub_100006B58(uint64_t a1)
{
  void *v2;
  id v3;

  sub_100006D18();
  v3 = sub_100006D10(34, v2);
  swift_errorRelease(v3);
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100006C30(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100006C74(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100006CAC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_100006CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100006D04(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

id sub_100006D10(uint64_t a1, void *a2)
{
  return sub_10000612C(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

uint64_t sub_100006D24(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

BOOL sub_100006D2C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100006D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_100006D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v2 = sub_100012DA8();
  v3 = sub_100006CAC(v2, (uint64_t)qword_10009A198);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id sub_100006DB8(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  unsigned int v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  objc_super v44;

  *(_QWORD *)&v1[OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap] = 0;
  v3 = OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities;
  v4 = sub_10001322C();
  v5 = sub_1000133E0();
  sub_100011EA8((uint64_t)&unk_1000918A0);
  v7 = v6;
  v8 = v1;
  *(_QWORD *)&v1[v3] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v4, v5, v7);
  v9 = OBJC_IVAR____TtC12SidecarRelay6Client_streams;
  v10 = type metadata accessor for Relay.Session(0);
  v11 = sub_100010F40(&qword_1000930C0);
  sub_100011EA8((uint64_t)&unk_1000918B0);
  *(_QWORD *)&v8[v9] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v10, v11, v12);
  v13 = OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners;
  v14 = sub_100011EDC();
  *(_QWORD *)&v8[v13] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Client.StreamListenerKey, &type metadata for Client.StreamListener, v14);
  *(_QWORD *)&v8[OBJC_IVAR____TtC12SidecarRelay6Client_connection] = a1;
  v15 = a1;
  v16 = objc_msgSend(v15, "processIdentifier");
  *(_DWORD *)&v8[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier] = v16;

  v44.receiver = v8;
  v44.super_class = (Class)type metadata accessor for Client();
  v17 = objc_msgSendSuper2(&v44, "init");
  v18 = (void *)objc_opt_self(NSXPCInterface);
  v19 = v17;
  v20 = objc_msgSend(v18, "interfaceWithProtocol:", &OBJC_PROTOCOL___SidecarRelay_Interface);
  sub_100013094((uint64_t)v20, "setExportedInterface:");

  objc_msgSend(v15, "setExportedObject:", v19);
  v21 = sub_100013034((uint64_t)&unk_100085B28);
  *(_QWORD *)(v21 + 16) = v19;
  sub_100013024(v21, v22, v23, v24, v25, v26, v27, v28, (uint64_t)_NSConcreteStackBlock);
  v29 = sub_100013330();
  v30 = sub_100013014();
  sub_100013094(v30, "setInterruptionHandler:");
  sub_10001315C();
  v31 = sub_100013034((uint64_t)&unk_100085B78);
  *(_QWORD *)(v31 + 16) = v29;
  sub_100013024(v31, v32, v33, v34, v35, v36, v37, v38, (uint64_t)_NSConcreteStackBlock);
  v39 = sub_100013330();
  v40 = sub_100013014();
  sub_100013094(v40, "setInvalidationHandler:");
  sub_10001315C();
  v41 = objc_msgSend(v18, "interfaceWithProtocol:", &OBJC_PROTOCOL___SidecarCore_Interface);
  sub_100013398((uint64_t)v41, "setRemoteObjectInterface:");

  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v42 = (void *)static OS_dispatch_queue.main.getter();
  sub_100013398((uint64_t)v42, "_setQueue:");

  objc_msgSend(v15, "resume");
  return v39;
}

void sub_1000070DC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  os_log_type_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  os_log_type_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  sub_100012D54();
  v3 = v0;
  v4 = sub_100012DA8();
  sub_100013254();
  __chkstk_darwin(v5);
  sub_1000130D8();
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - v7;
  v9 = &v0[OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap];
  sub_100012DB0((uint64_t)v9, (uint64_t)&v27);
  if (*(_QWORD *)v9 && SidecarMapTableGetCount(*(_QWORD *)v9))
  {
    sub_100013380();
    v10 = v3;
    v11 = v8;
    Logger.logObject.getter(v10);
    v12 = sub_100012FF0();
    if (sub_100012F10(v12))
    {
      v13 = (float *)sub_100006D24(8);
      sub_1000131FC(v13, 1.5047e-36);
      sub_100013078(v14, v15, *(_DWORD *)&v10[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier]);

      sub_100013048((void *)&_mh_execute_header, v16, v17, "PID %d: Terminated with Active Sessions");
      sub_100006D04((uint64_t)v13);
    }
    else
    {

      v11 = v10;
    }
  }
  else
  {
    sub_100013380();
    v18 = v3;
    v11 = (char *)Logger.logObject.getter(v18);
    v19 = static os_log_type_t.debug.getter();
    if (sub_100012F10(v19))
    {
      v20 = (float *)sub_100006D24(8);
      sub_1000131FC(v20, 1.5047e-36);
      sub_100013078(v21, v22, *(_DWORD *)&v18[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier]);

      sub_100013048((void *)&_mh_execute_header, v23, v24, "PID %d: Terminated");
      sub_100006D04((uint64_t)v20);
    }
    else
    {

      v11 = v18;
    }
    v8 = v1;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v4);
  v25 = *(void **)&v3[OBJC_IVAR____TtC12SidecarRelay6Client_connection];
  objc_msgSend(v25, "invalidate");
  objc_msgSend(v25, "setExportedObject:", 0);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100021644();
  sub_100012D28();
}

void sub_100007310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100007328((uint64_t)"PID %d: Interrupted", a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_10000731C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100007328((uint64_t)"PID %d: Invalidated", a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_100007328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  sub_100012D54();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  sub_100012DA8();
  sub_100013254();
  __chkstk_darwin(v28);
  sub_100012D7C();
  sub_100012D6C(v29);
  v30 = v20;
  v31 = sub_100012ED4();
  v32 = static os_log_type_t.debug.getter();
  if (sub_100012F10(v32))
  {
    v33 = (float *)sub_100006D24(8);
    sub_1000131FC(v33, 1.5047e-36);
    v36 = *(_DWORD *)((char *)&v30->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &a9, v34, v35);

    _os_log_impl((void *)&_mh_execute_header, v31, v22, v27, (uint8_t *)v33, 8u);
    sub_100006D04((uint64_t)v33);
  }
  else
  {

    v31 = v30;
  }

  sub_10001318C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_1000070DC();
  sub_100012D28();
}

void sub_100007424(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Class isa;

  v3 = v2;
  v6 = sub_100009AE8(a1);
  if ((v7 & 1) == 0)
  {
    v8 = v6;
    v9 = a2[3];
    v10 = a2[4];
    sub_100010F80(a2, v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    if (v12 >> 60 != 15)
    {
      v13 = v11;
      v14 = v12;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, "relaySession:receivedOPACKData:dataLink:", v8, isa, *(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink));
      sub_100012430(v13, v14);
      sub_100012E00(isa);
    }
  }
}

uint64_t sub_1000074F4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v5 = v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams;
  sub_100012DB0(v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams, (uint64_t)v18);
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)(*(_QWORD *)v5 + 16) && (v7 = sub_100039978(), (v8 & 1) != 0))
  {
    v9 = *(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * v7);
    sub_100013040();
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  swift_retain(a1);
  v10 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
  {
    sub_100013354(0, v9[2] + 1);
    v9 = v15;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    sub_100013354(v11 > 1, v12 + 1);
    v9 = v16;
  }
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = a1;
  v13[5] = v10;
  sub_100012DD0(v5, (uint64_t)v17, 33);
  sub_1000130A0();
  sub_10003CB98();
  swift_endAccess(v17);
  return sub_1000130A8();
}

void sub_100007618(_BOOL8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v6 = a1;
    type metadata accessor for RapportStreamSession();
    v7 = (void **)(a3 + 40);
    while (1)
    {
      v8 = *v7;
      a1 = static RapportRemoteDisplayDevice.== infix(_:_:)((uint64_t)*(v7 - 1), v6);
      if (a1)
        break;
      v7 += 2;
      if (!--v3)
        goto LABEL_5;
    }
    v11 = v8;
    v12 = sub_100009AE8(a2);
    if ((v13 & 1) != 0)
    {
      sub_100012E50(v12, (unint64_t *)&qword_100091750, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100012D98();
      sub_100012D40(v14, v15, -1020);
      sub_100012DC4();

    }
  }
  else
  {
LABEL_5:
    sub_100012E50(a1, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100012D40(v9, v10, -120);
    sub_100012DC4();
  }
}

void sub_100007748(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t (*v32)(char *);
  _QWORD v33[5];
  uint64_t v34;

  v32 = a1;
  v29 = a3;
  v34 = sub_100010F40(&qword_100091928);
  v5 = __chkstk_darwin(v34);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  sub_100045614(v33, a2);
  v10 = v33[0];
  v11 = v33[3];
  v12 = v33[4];
  v30 = v33[1];
  v31 = (unint64_t)(v33[2] + 64) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v12)
    goto LABEL_3;
LABEL_2:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    v18 = *(_QWORD *)(v10 + 48);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v14, v19);
    v20 = *(_QWORD *)(v10 + 56);
    v21 = _s7SessionC8IdentityVMa(0);
    sub_10001257C(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v14, (uint64_t)&v9[*(int *)(v34 + 48)], _s7SessionC8IdentityVMa);
    sub_1000126C0((uint64_t)v9, (uint64_t)v7, &qword_100091928);
    v22 = v32(v7);
    if (v3)
    {
      sub_1000126F4((uint64_t)v7, &qword_100091928);
      swift_release(v10);
      return;
    }
    if ((v22 & 1) != 0)
    {
      swift_release(v10);
      v24 = v29;
      sub_1000126C0((uint64_t)v7, v29, &qword_100091928);
      v25 = v24;
      v26 = 0;
      goto LABEL_27;
    }
    sub_1000126F4((uint64_t)v7, &qword_100091928);
    if (v12)
      goto LABEL_2;
LABEL_3:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v31)
      goto LABEL_26;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
        goto LABEL_12;
      v17 = v11 + 3;
      if (v11 + 3 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
        goto LABEL_12;
      v17 = v11 + 4;
      if (v11 + 4 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
      {
LABEL_12:
        v15 = v17;
      }
      else
      {
        v15 = v11 + 5;
        if (v11 + 5 >= v31)
          goto LABEL_26;
        v16 = *(_QWORD *)(v30 + 8 * v15);
        if (!v16)
        {
          v23 = v11 + 6;
          while (v23 < v31)
          {
            v16 = *(_QWORD *)(v30 + 8 * v23++);
            if (v16)
            {
              v15 = v23 - 1;
              goto LABEL_13;
            }
          }
LABEL_26:
          v27 = v29;
          swift_release(v10);
          v25 = v27;
          v26 = 1;
LABEL_27:
          sub_1000124AC(v25, v26, 1, v34);
          return;
        }
      }
    }
LABEL_13:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
}

uint64_t sub_100007A20(_BOOL8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char v26[24];
  _BOOL8 v27;

  v27 = a1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_streams);
  sub_100012DD0(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_streams, (uint64_t)v26, 0);
  v5 = *v4;
  v24 = v5 + 64;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v25 = (unint64_t)(v6 + 63) >> 6;
  result = sub_100013164();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    swift_retain(v16);
    sub_100013110();
    sub_100007618(v27, v16, v17);
    if (v2)
    {
      sub_100013298();
      sub_10001324C();
      sub_1000132B4();
      return v3;
    }
    v3 = v18;
    v20 = v19;
    sub_10001324C();
    if (v20)
    {
      sub_1000132B4();
      return v3;
    }
    result = sub_100013298();
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      break;
    if (v10 >= v25)
      goto LABEL_26;
    v14 = *(_QWORD *)(v24 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v25)
        goto LABEL_26;
      v14 = *(_QWORD *)(v24 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 2;
      if (v10 + 2 >= v25)
        goto LABEL_26;
      v14 = *(_QWORD *)(v24 + 8 * v15);
      if (v14)
      {
LABEL_14:
        v10 = v15;
        goto LABEL_15;
      }
      v15 = v10 + 3;
      if (v10 + 3 < v25)
      {
        v14 = *(_QWORD *)(v24 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_29;
            if (v10 >= v25)
              goto LABEL_26;
            v14 = *(_QWORD *)(v24 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
LABEL_26:
      v21 = sub_1000132B4();
      sub_100012E50(v21, (unint64_t *)&qword_100091750, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100012D98();
      sub_100012D40(v22, v23, -120);
      sub_100012DC4();
      return v3;
    }
LABEL_15:
    v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_100007C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[24];

  v5 = v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams;
  result = sub_100012DB0(v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams, (uint64_t)v13);
  if (*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    result = sub_100039978();
    if ((v7 & 1) != 0)
    {
      swift_bridgeObjectRetain(a2);
      v8 = sub_100013040();
      sub_100007D54(v8, a1, a2);
      if (*(_QWORD *)(v9 + 16))
      {
        sub_100012DD0(v5, (uint64_t)v12, 33);
        sub_1000130A0();
        v10 = sub_10003CB98();
        sub_10001336C(v10);
        return sub_1000130A8();
      }
      else
      {
        sub_1000132F4();
        sub_100012DD0(v5, (uint64_t)v12, 33);
        sub_10003C450();
        sub_10001336C(v11);
        return sub_100012E98();
      }
    }
  }
  return result;
}

void sub_100007D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v19;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v16 = a1 + 32;
    do
    {
      v6 = v5;
      while (1)
      {
        if (v6 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v19 = *(_OWORD *)(v16 + 16 * v6);
        v7 = *(_QWORD *)(v16 + 16 * v6);
        swift_retain(v7);
        v8 = *((id *)&v19 + 1);
        v9 = objc_msgSend(v8, "identifier");
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        if (v10 == a2 && v12 == a3)
        {

          swift_release(v7);
          swift_bridgeObjectRelease(a3);
          goto LABEL_12;
        }
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, a2, a3, 0);
        swift_bridgeObjectRelease(v12);
        if ((v14 & 1) == 0)
          break;

        swift_release(v7);
LABEL_12:
        if (v4 == ++v6)
          goto LABEL_19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_100055AF4();
      v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100055AF4();
      v5 = v6 + 1;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v15 + 4] = v19;
    }
    while (v4 - 1 != v6);
  }
LABEL_19:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
}

void sub_100007F3C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[24];

  v3 = v2;
  sub_100012DD0((uint64_t)v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams, (uint64_t)v10, 33);
  sub_10003C450();
  sub_10001336C(v6);
  sub_1000132F4();
  v7 = sub_100009AE8(a1);
  if ((v8 & 1) == 0)
  {
    v9 = v7;
    if (a2)
      a2 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v3, "relaySession:closedWithError:", v9, a2);

  }
}

uint64_t sub_100007FE0(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  v9 = sub_100028E50();
  v5._countAndFlagsBits = 15392;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(a3);
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(a3);
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v9;
}

uint64_t sub_10000806C(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4)
{
  Hasher._combine(_:)(a2);
  sub_1000133A4();
  String.hash(into:)(a1, a3, a4);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_1000080B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4)
    return 0;
  if (a2 == a5 && a3 == a6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0);
}

Swift::Int sub_1000080F4(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v7, a2, a3);
  swift_bridgeObjectRelease(a3);
  return Hasher._finalize()();
}

Swift::Int sub_100008168()
{
  uint64_t v0;

  return sub_1000080F4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_100008174(uint64_t a1)
{
  uint64_t v1;

  return sub_10000806C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int sub_100008180(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  sub_100013164();
  String.hash(into:)(v6, v3, v4);
  sub_1000132A0();
  return Hasher._finalize()();
}

uint64_t sub_1000081E4()
{
  uint64_t v0;

  return sub_100007FE0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_1000081F0(uint64_t *a1, uint64_t *a2)
{
  return sub_1000080B8(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_10000820C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  const char *v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  const char *v13;
  _QWORD v14[2];

  v1 = v0;
  v2 = *v0;
  if ((v1[1] & 2) != 0)
    v3 = *(_QWORD *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
  else
    v3 = 0;
  if ((unint64_t)(v2 - 1) < 3)
    v4 = v2;
  else
    v4 = 0;
  v5 = sub_1000110A4(v4);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v6._countAndFlagsBits = 0x694C6D6165727453;
  v6._object = (void *)0xEF2072656E657473;
  String.append(_:)(v6);
  v13 = v5;
  v7 = sub_100010F40(&qword_100091888);
  _print_unlocked<A, B>(_:_:)(&v13, v14, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 541869600;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  sub_100008350(v3);
  v9._countAndFlagsBits = 0x2044495550202CLL;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v13 = (const char *)v1[2];
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  return v14[0];
}

uint64_t sub_100008350(unint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  uint64_t result;
  char v7;

  if (HIDWORD(a1))
  {
    v7 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v7, 3455, 0);
    __break(1u);
  }
  else
  {
    v1 = RPStreamFlagsCopyDescription(a1);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

    v5._countAndFlagsBits = v2;
    v5._object = v4;
    String.append(_:)(v5);
    return swift_bridgeObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1000083F8()
{
  return sub_10000820C();
}

uint64_t sub_100008430()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  uint64_t v47;
  _BYTE v48[56];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[7];
  int v52;
  uint64_t v53;
  uint64_t v54;

  sub_1000131A4();
  v53 = v2;
  v54 = v3;
  v4 = v0;
  v6 = v5;
  v8 = v7;
  type metadata accessor for Logger(0);
  sub_100013254();
  __chkstk_darwin(v9);
  sub_100012DF0();
  v10 = sub_100009AE8(v6);
  if ((v11 & 1) != 0)
  {
    sub_100012E50(v10, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100012D40(v38, v39, -1020);
    sub_1000131BC();
  }
  else
  {
    sub_100012E50(v10, &qword_1000918E8, SidecarStream_ptr);
    v12 = swift_retain(v8);
    v13 = sub_1000219B0(v12);
    if (!v1)
    {
      v14 = v13;
      sub_1000130A0();
      v44 = v14;
      v15 = objc_msgSend(v14, "identifier");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v19 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners);
      sub_100012DD0((uint64_t)v4 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners, (uint64_t)&v47, 0);
      v20 = *v19;
      sub_1000130A0();
      sub_100012DE0();
      sub_100013040();
      sub_1000217A0(v6, v16, v18, v20, (uint64_t)v48);
      sub_100012F54();
      sub_1000130A8();
      v21 = swift_bridgeObjectRelease(v20);
      sub_100013270(v21, v22, &qword_1000918E0);
      if (v50)
      {
        v25 = v48[48];
        v24 = v49;
        sub_100012DD0(v8 + 24, (uint64_t)v46, 1);
        *(_QWORD *)(v8 + 32) = &off_100085AE0;
        swift_unknownObjectWeakAssign(v8 + 24, v4);
        RapportStreamSession.delegatedProcessUPID.setter(v24);
        v26 = 0;
        if ((v25 & 2) != 0)
          v26 = *(_QWORD *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
        v27 = *(_QWORD *)RapportStreamFlags.handoff.unsafeMutableAddressor();
        v28 = RapportStreamSession.streamFlags.getter();
        RapportStreamSession.streamFlags.setter(v27 | v26 | v28);
        v29 = sub_100008898();
        v31 = v30;
        (*(void (**)(void))((swift_isaMask & *v4) + 0xB0))();
        sub_100012F20(v8);
        v32 = sub_10001301C();
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          sub_100013374();
          v43 = sub_10001316C();
          v51[0] = v43;
          *(_DWORD *)v29 = 136446466;
          sub_10001301C();
          v45 = sub_100015FFC(v29, v31, v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v29 + 4, v29 + 12);
          swift_bridgeObjectRelease_n(v31, 3);
          *(_WORD *)(v29 + 12) = 2082;
          swift_retain(v8);
          v35 = RapportStreamSession.description.getter();
          v37 = v36;
          swift_release(v8);
          v45 = sub_100015FFC(v35, v37, v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v29 + 14, v29 + 22);
          sub_100012DE8(v8);
          sub_10001300C();
          sub_1000131E4((void *)&_mh_execute_header, v33, "%{public}s: Prepare %{public}s", (uint64_t)&v52);
          swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
          sub_100006D04(v43);
          sub_100006D04(v29);

        }
        else
        {

          sub_100012DE8(v8);
          swift_bridgeObjectRelease_n(v31, 2);
        }
        sub_100013194();
        sub_1000074F4(v8, v44);

        sub_100012F54();
        sub_1000130A8();
        sub_100012684((uint64_t)v48);
      }
      else
      {
        sub_100012E50(v23, (unint64_t *)&qword_100091750, NSError_ptr);
        static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
        sub_100012D98();
        sub_100012D40(v41, v42, -120);
        sub_1000131BC();

        sub_100012F54();
        sub_1000130A8();
      }
    }
  }
  return 1;
}

uint64_t sub_100008898()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;
  Swift::String v6;

  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
  sub_100013290(v5);
  sub_10001327C();
  v0._countAndFlagsBits = 47;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  sub_100011E6C();
  sub_100013130();
  v6._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v1, v2, v3);
  sub_100013290(v6);
  sub_100012E98();
  return 541346128;
}

void sub_100008948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  _BOOL4 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(id, _QWORD);
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  _DWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];
  _BYTE v98[64];
  void (*v99)(id, _QWORD);
  uint64_t v100;

  sub_1000131A4();
  a20 = v26;
  a21 = v27;
  v28 = v21;
  v30 = v29;
  sub_100010F40(&qword_100091920);
  sub_100013118();
  __chkstk_darwin(v31);
  sub_100013234();
  sub_100010F40(&qword_1000918F8);
  sub_100013118();
  v33 = __chkstk_darwin(v32);
  v35 = (char *)v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v96 = (uint64_t)v85 - v36;
  _s7SessionC8IdentityVMa(0);
  sub_100013118();
  __chkstk_darwin(v37);
  sub_100012EA0();
  v38 = type metadata accessor for Logger(0);
  sub_100012FE0();
  __chkstk_darwin(v39);
  sub_100012DF0();
  v95 = v41 - v40;
  v42 = RapportStreamSession.trafficFlags.getter();
  RapportStreamSession.trafficFlags.setter(v42 & 0xFFFFBDFF);
  sub_100007A20(v30);
  if (!v22)
  {
    v90 = v23;
    v91 = v38;
    v87 = v25;
    v88 = v35;
    v93 = v24;
    v94 = v44;
    v92 = v43;
    v86 = sub_100008898();
    v46 = v45;
    (*(void (**)(void))((swift_isaMask & *v21) + 0xB0))();
    sub_100012F20(v30);
    v47 = sub_100013070();
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    v50 = v49;
    v51 = os_log_type_enabled(v48, v49);
    v52 = v28;
    v53 = v30;
    v89 = 0;
    if (v51)
    {
      sub_100013374();
      v85[1] = v50;
      v54 = sub_10001316C();
      v97[0] = v54;
      *(_DWORD *)v50 = 136446466;
      v55 = v48;
      sub_100013070();
      a10 = sub_100015FFC(v86, v46, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease_n(v46, 3);
      *(_WORD *)(v50 + 12) = 2082;
      v86 = v50 + 14;
      swift_retain(v53);
      v56 = RapportStreamSession.description.getter();
      v58 = v57;
      sub_100013298();
      a10 = sub_100015FFC(v56, v58, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v86, v50 + 22);
      sub_100012DE8(v53);
      swift_bridgeObjectRelease(v58);
      sub_1000131E4((void *)&_mh_execute_header, v55, "%{public}s: Accept %{public}s", (uint64_t)&a16);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      sub_100006D04(v54);
      sub_100006D04(v50);

    }
    else
    {

      sub_100012DE8(v30);
      swift_bridgeObjectRelease_n(v46, 2);
    }
    sub_100013194();
    v59 = v92;
    v60 = v94;
    swift_retain(v92);
    v61 = objc_msgSend(v60, "identifier");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v63 = v62;

    sub_100012DD0((uint64_t)v52 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners, (uint64_t)v97, 33);
    sub_10003C678(v63, (uint64_t)v98);
    v64 = swift_endAccess(v97);
    sub_100013270(v64, v65, &qword_1000918E0);
    v67 = v99;
    if (v99)
    {
      v95 = v100;
      sub_10001257C(v59 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v93, _s7SessionC8IdentityVMa);
      v68 = (_QWORD *)((char *)v52 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
      v69 = sub_100012DD0((uint64_t)v52 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities, (uint64_t)v97, 0);
      v70 = *v68;
      __chkstk_darwin(v69);
      sub_1000133A4();
      v71 = v87;
      sub_100007748((uint64_t (*)(char *))sub_100012668, v70, v87);
      swift_bridgeObjectRelease(v70);
      v72 = sub_100010F40(&qword_100091928);
      if (sub_1000124B8(v71, 1, v72) == 1)
      {
        sub_1000126F4(v71, &qword_100091920);
        v73 = sub_10001322C();
        sub_100013360(v96, 1);
      }
      else
      {
        v76 = v71 + *(int *)(v72 + 48);
        v73 = sub_10001322C();
        v77 = v96;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v96, v71, v73);
        sub_100013360(v77, 0);
        sub_1000124C4(v76, _s7SessionC8IdentityVMa);
      }
      v78 = (uint64_t)v88;
      sub_1000124EC(v96, (uint64_t)v88, &qword_1000918F8);
      sub_10001322C();
      v79 = sub_1000124B8(v78, 1, v73);
      if ((_DWORD)v79 == 1)
      {
        sub_1000126F4(v78, &qword_1000918F8);
        v80 = 0;
        v81 = 0;
      }
      else
      {
        v80 = UUID.uuidString.getter(v79);
        v81 = v82;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v78, v73);
      }
      RapportStreamSession.trafficSessionID.setter(v80, v81);
      sub_100012684((uint64_t)v98);
      v83 = v94;
      v84 = v94;
      v67(v83, 0);

      sub_100013264();
      sub_10001324C();
      swift_release(v59);
      sub_100013264();
      swift_release(v59);
      sub_1000126F4(v96, &qword_1000918F8);
      sub_1000124C4(v93, _s7SessionC8IdentityVMa);
    }
    else
    {
      sub_100012E50(v66, (unint64_t *)&qword_100091750, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100012D98();
      sub_100012D40(v74, v75, -120);
      sub_100012DC4();

      sub_10001324C();
      sub_100012DE8(v59);
    }
  }
  sub_100012F9C();
}

uint64_t sub_100008F64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1 + *(int *)(sub_100010F40(&qword_100091928) + 48);
  if ((static UUID.== infix(_:_:)(v3, a2) & 1) != 0
    && (v4 = _s7SessionC8IdentityVMa(0), *(_QWORD *)(v3 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20))))
  {
    v5 = *(_BYTE *)(v3 + *(int *)(v4 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_100008FFC(_BOOL8 a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  sub_100013388(a1);
  if (v1)
  {
    sub_100012FF8();
  }
  else
  {
    v4 = v2;

    swift_release(v4);
  }
  return sub_100008898();
}

void sub_100009050()
{
  sub_100009068();
}

void sub_10000905C()
{
  sub_100009068();
}

void sub_100009068()
{
  uint64_t v0;
  uint64_t *v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  sub_100012D54();
  v3 = v2;
  v5 = v4;
  sub_100012DA8();
  sub_100012E3C();
  __chkstk_darwin(v6);
  v7 = sub_100008FFC(v5);
  v9 = v8;
  sub_100012D6C(*v1);
  sub_100012F20(v5);
  sub_100013110();
  v10 = sub_100012ED4();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = sub_100006D24(22);
    v20 = v3;
    v13 = sub_100006D24(64);
    v22 = v13;
    *(_DWORD *)v12 = 136446466;
    sub_100013110();
    v21 = sub_1000133CC(v7, v14, &v22);
    sub_10001308C((uint64_t)&v21, (uint64_t)&v22, v15, v12 + 12);
    sub_100012DBC(v9);
    *(_WORD *)(v12 + 12) = 2082;
    swift_retain(v5);
    RapportStreamSession.description.getter();
    sub_100013014();
    v21 = sub_100012F28();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 14, v12 + 22);
    sub_100012DE8(v5);
    sub_100012E98();
    sub_100012F94((void *)&_mh_execute_header, v10, v11, v20, (uint8_t *)v12);
    sub_100012EE8(v13, v16, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v13);
    sub_100006D04(v12);

    v17 = sub_1000132E0();
    v19 = v0;
  }
  else
  {

    sub_100012DE8(v5);
    sub_100012DD8(v9);
    v17 = sub_100013000();
  }
  v18(v17, v19);
  sub_100012D28();
}

void sub_10000923C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;

  sub_100012D54();
  v2 = v1;
  sub_100012DA8();
  sub_100012FE0();
  __chkstk_darwin(v3);
  v4 = sub_100012F38();
  sub_1000133C0();
  sub_100012D6C(v5);
  sub_100012F20(v2);
  sub_100012DE0();
  v6 = sub_100012ED4();
  v7 = static os_log_type_t.default.getter();
  if (sub_100013214(v6))
  {
    v8 = (uint8_t *)sub_100006D24(22);
    v9 = sub_100006D24(64);
    v16 = v9;
    *(_DWORD *)v8 = 136446466;
    sub_100012DE0();
    v11 = sub_1000131F4(v4, v10, &v16);
    sub_100012E78(v11);
    sub_100012DBC(v0);
    sub_10001305C();
    RapportStreamSession.description.getter();
    sub_1000130C4();
    v12 = sub_100012F28();
    sub_100012FB4(v12);
    sub_100012DE8(v2);
    sub_100012E98();
    sub_100012F94((void *)&_mh_execute_header, v6, v7, "%{public}s: Received Message %{public}s", v8);
    sub_100012EE8(v9, v13, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v9);
    sub_100006D04((uint64_t)v8);

    v14 = sub_1000132E0();
  }
  else
  {

    sub_100012DE8(v2);
    sub_100012DD8(v0);
    v14 = sub_100013000();
  }
  v15(v14);
  sub_100012D28();
}

void sub_1000093A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;

  sub_100012D54();
  v2 = v1;
  sub_100012DA8();
  sub_100012FE0();
  __chkstk_darwin(v3);
  v4 = sub_100012F38();
  sub_1000133C0();
  sub_100012D6C(v5);
  sub_100012F20(v2);
  sub_100012DE0();
  v6 = sub_100012ED4();
  v7 = static os_log_type_t.default.getter();
  if (sub_100013214(v6))
  {
    v8 = (uint8_t *)sub_100006D24(22);
    v9 = sub_100006D24(64);
    v16 = v9;
    *(_DWORD *)v8 = 136446466;
    sub_100012DE0();
    v11 = sub_1000131F4(v4, v10, &v16);
    sub_100012E78(v11);
    sub_100012DBC(v0);
    sub_10001305C();
    RapportStreamSession.description.getter();
    sub_1000130C4();
    v12 = sub_100012F28();
    sub_100012FB4(v12);
    sub_100012DE8(v2);
    sub_100012E98();
    sub_100012F94((void *)&_mh_execute_header, v6, v7, "%{public}s: Received Request %{public}s", v8);
    sub_100012EE8(v9, v13, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v9);
    sub_100006D04((uint64_t)v8);

    v14 = sub_1000132E0();
  }
  else
  {

    sub_100012DE8(v2);
    sub_100012DD8(v0);
    v14 = sub_100013000();
  }
  v15(v14);
  sub_100012D28();
}

void sub_10000950C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48[2];

  sub_100012D54();
  v2 = v0;
  v4 = v3;
  v5 = sub_100012DA8();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000130D8();
  __chkstk_darwin(v7);
  v9 = ((char *)&v40 - v8);
  v10 = sub_100013388(v4);
  if (v1)
  {
    v13 = sub_100008FFC(v4);
    v15 = v14;
    v16 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB0))();
    __chkstk_darwin(v16);
    sub_10001321C();
    *(_QWORD *)(v17 - 16) = v13;
    *(_QWORD *)(v17 - 8) = v15;
    __chkstk_darwin(v18);
    sub_100012FCC();
    sub_1000183F4(sub_10001263C, v19, sub_100012D04);
    sub_1000132D4(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_100012FF8();
    sub_10001320C();
  }
  else
  {
    v20 = v10;
    v21 = v12;
    swift_release(v11);
    v45 = (void *)sub_100008898();
    v23 = v22;
    v24 = RapportStreamSession.statusFlags.getter();
    sub_100013380();
    sub_100012F20(v4);
    v25 = sub_10001301C();
    Logger.logObject.getter(v25);
    v26 = sub_100012FF0();
    v46 = v26;
    if (os_log_type_enabled(v9, v26))
    {
      v27 = sub_100006D24(22);
      v44 = v20;
      v28 = v27;
      v42 = sub_100006D24(64);
      v48[0] = v42;
      *(_DWORD *)v28 = 136446466;
      v41 = v9;
      sub_10001301C();
      v47 = sub_100015FFC((uint64_t)v45, v23, v48);
      v45 = v21;
      sub_10001308C((uint64_t)&v47, (uint64_t)v48, v29, v28 + 12);
      sub_100012DBC(v23);
      *(_WORD *)(v28 + 12) = 2082;
      swift_retain(v4);
      v30 = RapportStreamSession.description.getter();
      v43 = v24;
      v32 = v31;
      swift_release(v4);
      v47 = sub_100015FFC(v30, v32, v48);
      v21 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v28 + 14, v28 + 22);
      sub_100012DE8(v4);
      swift_bridgeObjectRelease(v32);
      v33 = v41;
      sub_100012F94((void *)&_mh_execute_header, v41, (os_log_type_t)v46, "%{public}s: Status Changed %{public}s", (uint8_t *)v28);
      v34 = v42;
      sub_100012EE8(v42, v35, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v34);
      v36 = v28;
      v20 = v44;
      sub_100006D04(v36);

    }
    else
    {

      sub_100012DE8(v4);
      sub_100012DD8(v23);
    }
    (*(void (**)(NSObject *, uint64_t))(v6 + 8))(v9, v5);
    v37 = objc_msgSend(v21, "identifier");
    if (!v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v39 = v38;
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
    }
    sub_100013348(v2, "relaySession:stream:status:", v20);

  }
  sub_100012D28();
}

void sub_100009848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  sub_100012D54();
  v5 = v4;
  sub_100012DA8();
  sub_10001314C();
  __chkstk_darwin(v6);
  sub_1000130F4();
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - v8;
  sub_100013388(v5);
  if (v1)
  {
    v12 = sub_100008FFC(v5);
    v14 = v13;
    v15 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB0))();
    __chkstk_darwin(v15);
    sub_10001321C();
    *(_QWORD *)(v16 - 16) = v12;
    *(_QWORD *)(v16 - 8) = v14;
    __chkstk_darwin(v17);
    sub_100012FCC();
    sub_1000183F4(sub_100012610, v18, sub_100012D04);
    sub_10001318C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_100012FF8();
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v19 = v10;

    swift_release(v19);
    v20 = sub_100008898();
    sub_1000133C0();
    (*(void (**)(void))((swift_isaMask & v21) + 0xB0))();
    sub_100012F20(v5);
    v22 = sub_100012DE0();
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = sub_100006D24(22);
      v37 = sub_100006D24(64);
      v39[0] = v37;
      *(_DWORD *)v26 = 136446466;
      v36 = v25;
      sub_100012DE0();
      v38 = sub_1000131F4(v20, v27, v39);
      sub_10001308C((uint64_t)&v38, (uint64_t)v39, v28, v26 + 12);
      sub_100012DBC(v19);
      *(_WORD *)(v26 + 12) = 2082;
      swift_retain(v5);
      v29 = RapportStreamSession.description.getter();
      v31 = v30;
      sub_100013014();
      v38 = sub_1000133CC(v29, v32, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v26 + 14, v26 + 22);
      sub_100012DE8(v5);
      swift_bridgeObjectRelease(v31);
      sub_100012F94((void *)&_mh_execute_header, v23, (os_log_type_t)v36, "%{public}s: Connection Ready %{public}s", (uint8_t *)v26);
      v33 = v37;
      sub_100012EE8(v37, v34, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v33);
      sub_100006D04(v26);

    }
    else
    {

      sub_100012DE8(v5);
      sub_100012DD8(v19);
    }
    sub_10001318C((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  sub_100012D28();
}

uint64_t sub_100009AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  sub_100012DB0((uint64_t)v3, (uint64_t)v5);
  result = *v3;
  if (*v3)
    return SidecarMapTableGetHandle(result, a1);
  return result;
}

void sub_100009B44(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v5;
  id v6;
  id v7;
  id v8;

  v5 = *v2;
  if (*v2)
  {
    v8 = *v2;
  }
  else
  {
    v6 = (id)SidecarMapTableCreateStrong();
    *v2 = v6;
    v8 = v6;
    v5 = 0;
  }
  v7 = v5;
  SidecarMapTableReplaceObject(v8, a1, a2);

}

uint64_t sub_100009BB8(uint64_t a1)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v3 = (id *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  v4 = sub_100012DD0((uint64_t)v3, (uint64_t)v14, 0);
  if (!*v3)
    goto LABEL_9;
  v5 = *v3;
  v6 = (id)SidecarMapTableGetObject();
  if (v6)
  {
    v7 = v6;
    _bridgeAnyObjectToAny(_:)(v12, v6);

    swift_unknownObjectRelease(v7);
    sub_100012600(v12, v13);
  }
  else
  {

    memset(v13, 0, sizeof(v13));
  }
  a1 = sub_100010F40(&qword_100092E90);
  v8 = type metadata accessor for Relay.Session(0);
  if ((swift_dynamicCast(&v15, v13, a1, v8, 6) & 1) == 0)
  {
    v15 = 0;

LABEL_9:
    sub_100012E50(v4, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100012D40(v9, v10, -1020);
    sub_100012DC4();
    return a1;
  }
  a1 = v15;

  if (!a1)
    goto LABEL_9;
  return a1;
}

uint64_t sub_100009CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  sub_100012DD0(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap, (uint64_t)v6, 33);
  v1 = sub_100009DA8();
  v2 = swift_endAccess(v6);
  if (!v1)
  {
    v1 = sub_100012E50(v2, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100012D40(v3, v4, -1020);
    sub_100012DC4();
  }
  return v1;
}

uint64_t sub_100009DA8()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t Count;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*v0)
    return 0;
  v1 = *v0;
  v2 = (id)SidecarMapTableRemoveObject();
  if (v2)
  {
    v3 = v2;
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v3);
    sub_100012600(v9, v10);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  v5 = sub_100010F40(&qword_100092E90);
  v6 = type metadata accessor for Relay.Session(0);
  if ((swift_dynamicCast(v9, v10, v5, v6, 6) & 1) == 0)
    *(_QWORD *)&v9[0] = 0;
  v7 = *v0;
  if (!*v0)
    goto LABEL_11;
  Count = SidecarMapTableGetCount(*v0);

  if (!Count)
  {
    v1 = v7;
LABEL_11:

    *v0 = 0;
  }
  return *(_QWORD *)&v9[0];
}

void sub_100009E90()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.Client", 19, "init()", 6, 0);
  __break(1u);
}

id sub_100009EC8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Client();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self(_TtC12SidecarRelay6Client);
}

uint64_t sub_100009F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[4];

  _bridgeAnyObjectToAny(_:)(v4, objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_connection), "remoteObjectProxy"));
  sub_100013390();
  v1 = sub_100010F40(&qword_100091898);
  swift_dynamicCast(&v3, v4, (char *)&type metadata for Any + 8, v1, 7);
  return v3;
}

void sub_10000A018()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Class isa;
  NSString v4;

  sub_100013308();
  v2 = (void *)sub_100009F98();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100013000();
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "relaySession:openedByDevice:dataLink:service:", isa, v1, v0, v4);
  swift_unknownObjectRelease(v2);

  sub_100012E00(v4);
}

void sub_10000A17C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint8_t *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_100012D54();
  v5 = v4;
  v7 = v6;
  sub_100012DA8();
  sub_10001331C();
  __chkstk_darwin(v8);
  sub_1000130F4();
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - v10;
  v12 = sub_100008898();
  v14 = v13;
  if (v5)
  {
    v15 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xB0);
    v16 = swift_errorRetain(v5);
    v17 = v15(v16);
    __chkstk_darwin(v17);
    sub_10001321C();
    *(_QWORD *)(v18 - 16) = v12;
    *(_QWORD *)(v18 - 8) = v14;
    __chkstk_darwin(v19);
    sub_100012FCC();
    sub_1000183F4(sub_1000125D0, v20, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v0 + 8))(v11, v2);
    sub_100012FF8();
    sub_10001320C();
  }
  else
  {
    v36 = v7;
    (*(void (**)(void))((swift_isaMask & *v1) + 0xB0))();
    v21 = sub_100013070();
    Logger.logObject.getter(v21);
    v22 = sub_100012FF0();
    if (sub_1000131D4(v22))
    {
      v23 = sub_100006D24(12);
      v34 = v3;
      v24 = (uint8_t *)v23;
      v35 = sub_100006D24(32);
      v37 = v35;
      *(_DWORD *)v24 = 136446210;
      v33 = v24 + 4;
      sub_100013070();
      v25 = sub_100015FFC(v12, v14, &v37);
      v26 = sub_1000133AC(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27, v33, v24 + 12);
      sub_100012DBC(v14);
      v28 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v7, "%{public}s: Closing Session", v24, 0xCu);
      v29 = v35;
      sub_100013284(v30, v31, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v29);
      sub_100006D04((uint64_t)v24);

    }
    else
    {

      sub_100012DD8(v14);
    }
    sub_100012EF0();
    v7 = v36;
  }
  v32 = (void *)sub_100009F98();
  if (v5)
    v5 = (void *)_convertErrorToNSError(_:)(v5);
  objc_msgSend(v32, "relaySession:closedWithError:", v7, v5);
  sub_1000131CC();

  sub_100012D28();
}

void sub_10000A428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_100012D54();
  sub_100013308();
  sub_100012DA8();
  sub_100012E3C();
  __chkstk_darwin(v6);
  sub_100013234();
  v7 = sub_100008898();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v9 = v8;
  v25 = v7;
  v27 = v4;
  v28 = v0;
  v10 = RPDataLinkTypeCopyDescription(v2);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  (*(void (**)(void))((swift_isaMask & *v1) + 0xB0))();
  sub_1000132C8();
  sub_1000132C8();
  swift_bridgeObjectRetain(v9);
  v13 = sub_100013110();
  Logger.logObject.getter(v13);
  v14 = sub_100012FF0();
  if (sub_100013214(v5))
  {
    v15 = sub_100006D24(32);
    v24 = sub_100006D24(64);
    v30 = v24;
    *(_DWORD *)v15 = 136446722;
    swift_bridgeObjectRetain(v9);
    v29 = sub_100015FFC(v25, v9, &v30);
    sub_100013128((uint64_t)&v29, (uint64_t)&v30, v16, v15 + 12);
    sub_100012DBC(v9);
    *(_WORD *)(v15 + 12) = 2048;
    v17 = sub_1000132BC();
    v18 = Data.count.getter(v17);
    sub_100012EC8();
    v29 = v18;
    sub_100013128((uint64_t)&v29, (uint64_t)&v30, v19, v15 + 22);
    sub_100012EC8();
    *(_WORD *)(v15 + 22) = 2082;
    sub_100013110();
    v29 = sub_1000133CC(v26, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 24, v15 + 32);
    sub_100012DBC(v12);
    _os_log_impl((void *)&_mh_execute_header, v5, v14, "%{public}s: Received %ld bytes [%{public}s]", (uint8_t *)v15, 0x20u);
    sub_100012EE8(v24, v21, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v24);
    sub_100006D04(v15);

  }
  else
  {
    sub_100012EC8();
    sub_100012DD8(v9);
    sub_100012EC8();

    sub_100012DD8(v12);
  }
  (*(void (**)(NSObject *, uint64_t))(v27 + 8))(v5, v28);
  v22 = (void *)sub_100009F98();
  sub_1000132BC();
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100013348(v22, "relaySession:receivedOPACKData:dataLink:", v3);
  sub_100013390();

  sub_100012D28();
}

void sub_10000A73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;

  v6 = (void *)sub_100009F98();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "relaySession:stream:status:", a1, v7, a4);
  sub_1000131CC();

}

void sub_10000A824()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_100012D54();
  v3 = v2;
  v5 = v4;
  v6 = sub_100012DA8();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100012D7C();
  sub_100012D6C(v8);
  v9 = v0;
  sub_1000132A8();
  v10 = (char *)v9;
  v11 = sub_100012ED4();
  v12 = static os_log_type_t.error.getter();
  if (sub_100013214(v11))
  {
    v21 = v5;
    v13 = sub_100006D24(18);
    v14 = sub_100006D24(32);
    v24 = v14;
    *(_DWORD *)v13 = 67109378;
    v22 = v6;
    v15 = *(_DWORD *)&v10[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

    LODWORD(v23) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v13 + 4, v13 + 8);

    *(_WORD *)(v13 + 8) = 2082;
    sub_100013164();
    v23 = sub_100015FFC(v21, v3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 10, v13 + 18);
    sub_100012DBC(v3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PID %d: Starting Service Extension '%{public}s' - NOT A PRESENTER", (uint8_t *)v13, 0x12u);
    sub_100013284(v16, v17, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v14);
    sub_100006D04(v13);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v22);
  }
  else
  {

    sub_100012DD8(v3);
    v18 = sub_100013000();
    v20(v18, v19);
  }
  sub_100012D28();
}

uint64_t sub_10000AA68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  int v9;
  uint64_t v10;

  sub_100012DA8();
  sub_100012E3C();
  __chkstk_darwin(v3);
  sub_100012D7C();
  sub_100012D6C(v4);
  v5 = v0;
  sub_100012ED4();
  v6 = sub_100012FF0();
  if (os_log_type_enabled(v0, v6))
  {
    v7 = (uint8_t *)sub_100006D24(8);
    *(_DWORD *)v7 = 67109120;
    v9 = *(_DWORD *)((char *)&v5->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 8);

    _os_log_impl((void *)&_mh_execute_header, v0, v6, "PID %d: Terminate Service", v7, 8u);
    sub_100006D04((uint64_t)v7);
  }
  else
  {

    v0 = v5;
  }

  sub_10001318C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  objc_msgSend((id)sub_100009F98(), "relayTerminateService");
  return sub_100013390();
}

uint64_t sub_10000ABF0()
{
  void *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v0 = *(void **)(qword_10009A190 + 56);
  result = (uint64_t)objc_msgSend(v0, "respondsToSelector:", "fetchRemoteDisplaySendingDeviceStatesWithCompletion:");
  if ((result & 1) != 0)
  {
    v9 = sub_100013024(result, v2, v3, v4, v5, v6, v7, v8, (uint64_t)_NSConcreteStackBlock);
    swift_unknownObjectRetain(v0);
    sub_1000130A0();
    objc_msgSend(v0, "fetchRemoteDisplaySendingDeviceStatesWithCompletion:", v9);
    _Block_release(v9);
    sub_1000131CC();
    return sub_1000130A8();
  }
  return result;
}

void sub_10000ACD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_100006C74(0, (unint64_t *)&unk_100091910, SidecarDisplaySendingDeviceSessionState_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
  swift_retain(v5);
  v9 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8);

}

void sub_10000AE00()
{
  uint64_t v0;
  SEL *v1;
  SEL *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;

  sub_100012D54();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_10001322C();
  sub_10001314C();
  __chkstk_darwin(v14);
  sub_100012DF0();
  v17 = v16 - v15;
  v18 = _Block_copy(v8);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v19 = sub_100013034(v6);
  *(_QWORD *)(v19 + 16) = v18;
  v20 = v12;
  sub_10000AEC4(v17, v4, v19, v2);

  swift_release(v19);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v17, v13);
  sub_100012D28();
}

uint64_t sub_10000AEC4(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v6;
  uint64_t result;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v6 = *(void **)(qword_10009A190 + 56);
  result = (uint64_t)objc_msgSend(v6, "respondsToSelector:", *a4);
  if ((result & 1) != 0)
  {
    swift_unknownObjectRetain(v6);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v16 = sub_100013024((uint64_t)isa, v9, v10, v11, v12, v13, v14, v15, (uint64_t)_NSConcreteStackBlock);
    swift_retain(a3);
    objc_msgSend(v6, *a4, isa, v16);
    _Block_release(v16);

    swift_unknownObjectRelease(v6);
    return sub_1000130A8();
  }
  return result;
}

uint64_t sub_10000B0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  void *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v11 = *(void **)(qword_10009A190 + 56);
  result = (uint64_t)objc_msgSend(v11, "respondsToSelector:", *a5);
  if ((result & 1) != 0)
  {
    swift_unknownObjectRetain(v11);
    v13 = (void *)a6(a1, a2);
    v21 = sub_100013024((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, (uint64_t)_NSConcreteStackBlock);
    swift_retain(a4);
    objc_msgSend(v11, *a5, v13, v21);
    sub_10001315C();

    sub_1000131CC();
    return sub_1000130A8();
  }
  return result;
}

void sub_10000B290(_QWORD *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  _BYTE v13[16];
  id v14;
  char v15[16];
  _QWORD *v16;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v10 = sub_10001F230(v8, v9, -1000, 0, 0, 0);
  (*(void (**)(void))((swift_isaMask & *a1) + 0xB0))();
  v16 = a1;
  v14 = v10;
  sub_1000183F4(sub_1000125A8, (uint64_t)v15, sub_100012D04);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v11 = v10;
  v12 = (void *)_convertErrorToNSError(_:)(v11);
  ((void (**)(_QWORD, void *))a2)[2](a2, v12);

  _Block_release(a2);
}

void sub_10000B40C(_QWORD *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  _BYTE v13[16];
  id v14;
  char v15[16];
  _QWORD *v16;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v10 = sub_10001F230(v8, v9, -1000, 0, 0, 0);
  (*(void (**)(void))((swift_isaMask & *a1) + 0xB0))();
  v16 = a1;
  v14 = v10;
  sub_1000183F4(sub_100012D08, (uint64_t)v15, sub_100012D04);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v11 = v10;
  v12 = (void *)_convertErrorToNSError(_:)(v11);
  ((void (**)(_QWORD, void *))a2)[2](a2, v12);

  _Block_release(a2);
}

uint64_t sub_10000B57C()
{
  Swift::String v0;
  uint64_t v2;
  Swift::String v3;

  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v0._countAndFlagsBits = 541346128;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
  sub_100013290(v3);
  sub_100012E98();
  sub_1000133D4();
  return v2;
}

void sub_10000B610(uint64_t a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *a2) + 0xB0))(v8);
  v11 = a2;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(18, -1);
    *(_DWORD *)v14 = 67109376;
    HIDWORD(v20) = *(_DWORD *)((char *)&v11->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v20 + 4, &v21, v14 + 4, v14 + 8);

    *(_WORD *)(v14 + 8) = 2048;
    v19 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 10, v14 + 18);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PID %d: Service Presenter Ready (%lx) - NOT A PRESENTER", (uint8_t *)v14, 0x12u);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    v12 = v11;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v17 = sub_10001F230(v15, v16, -1001, 0, 0, 0);
  v18 = (void *)_convertErrorToNSError(_:)(v17);
  ((void (**)(_QWORD, void *))a3)[2](a3, v18);

  _Block_release(a3);
}

void sub_10000B83C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  const char *v30;
  int v31;
  int v32;
  uint64_t v33;

  sub_100012D54();
  v30 = v5;
  v7 = v6;
  sub_10001322C();
  sub_10001331C();
  __chkstk_darwin(v8);
  sub_100012DF0();
  v11 = v10 - v9;
  v12 = sub_100012DA8();
  sub_10001314C();
  __chkstk_darwin(v13);
  sub_100012D7C();
  sub_100012D6C(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v11, v7, v3);
  v15 = v1;
  v16 = sub_100012ED4();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = sub_100006D24(18);
    v19 = sub_100006D24(32);
    v33 = v19;
    *(_DWORD *)v18 = 67109378;
    v31 = *(_DWORD *)&v15[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 4, v18 + 8);

    *(_WORD *)(v18 + 8) = 2082;
    v21 = UUID.uuidString.getter(v20);
    v23 = sub_100015FFC(v21, v22, &v33);
    v24 = sub_1000133AC(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v18 + 10, v26);
    sub_1000132F4();
    sub_100012EF0();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v30, (uint8_t *)v18, 0x12u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    sub_100006D04(v19);
    sub_100006D04(v18);

    v27 = sub_1000132E0();
  }
  else
  {

    sub_100012EF0();
    v29 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v27 = v2;
    v28 = v12;
  }
  v29(v27, v28);
  sub_100012D28();
}

uint64_t sub_10000BA04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  id v7;

  sub_10001322C();
  sub_100012FE0();
  __chkstk_darwin(v6);
  sub_100012DF0();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = a1;
  sub_10000B83C();

  return sub_1000132D4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

void sub_10000BA8C(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_10000BAC8(uint64_t a1, unint64_t a2, _QWORD *a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  id v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v10);
  v13 = a3;
  swift_bridgeObjectRetain_n(a2, 2);
  v14 = v13;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(18, -1);
    v18 = swift_slowAlloc(32, -1);
    v39 = a4;
    v19 = v18;
    v41 = v18;
    *(_DWORD *)v17 = 67109378;
    v37 = v9;
    v38 = v8;
    v20 = *(_DWORD *)&v14[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

    LODWORD(v40) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v17 + 4, v17 + 8);

    *(_WORD *)(v17 + 8) = 2082;
    swift_bridgeObjectRetain(a2);
    v40 = sub_100015FFC(a1, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 10, v17 + 18);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "PID %d: '%{public}s'", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v21 = v19;
    a4 = v39;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v22 = a1 == 42 && a2 == 0xE100000000000000;
  if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 42, 0xE100000000000000, 0) & 1) != 0)
  {
    if (qword_1000912B8 != -1)
      goto LABEL_33;
  }
  else if (qword_1000912B8 != -1)
  {
    goto LABEL_33;
  }
  while (1)
  {
    sub_100021BF8();
    v24 = v23;
    v41 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v34 = v23;
      else
        v34 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v25 = _CocoaArrayWrapper.endIndex.getter(v34);
      if (!v25)
      {
LABEL_29:
        swift_bridgeObjectRelease(v24);
        v33 = _swiftEmptyArrayStorage;
        goto LABEL_30;
      }
    }
    else
    {
      v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v23);
      if (!v25)
        goto LABEL_29;
    }
    sub_100006C74(0, &qword_100091908, SidecarDevice_ptr);
    if (v25 >= 1)
      break;
    __break(1u);
LABEL_33:
    swift_once(&qword_1000912B8, sub_1000265C8);
  }
  for (i = 0; i != v25; ++i)
  {
    if ((v24 & 0xC000000000000001) != 0)
      v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
    else
      v27 = swift_retain(*(_QWORD *)(v24 + 8 * i + 32));
    v28 = sub_100056A20(v27);
    if (v28)
    {
      v29 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v31 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized Array._endMutation()(v32);
    }
  }
  swift_bridgeObjectRelease(v24);
  v33 = (_QWORD *)v41;
LABEL_30:
  swift_bridgeObjectRelease(v24);
  sub_100006C74(0, &qword_100091908, SidecarDevice_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class, _QWORD))a4)[2](a4, isa, 0);
  swift_bridgeObjectRelease(v33);

  _Block_release(a4);
}

void sub_10000BF9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6, _QWORD *a7, void (**a8)(_QWORD, _QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  Class isa;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  void (*v55)(void);
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  Class v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  void (**v93)(_QWORD, _QWORD);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  _QWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  void (*v139)(char *, uint64_t, uint64_t);
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void (**v145)(_QWORD, _QWORD);
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;

  v145 = a8;
  v144 = a6;
  v153 = a5;
  v160 = a4;
  v157 = a3;
  v155 = _s7SessionC8IdentityVMa(0);
  v11 = __chkstk_darwin(v155);
  v132[1] = (char *)v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v134 = (uint64_t)v132 - v13;
  v14 = sub_100010F40(&qword_100091900);
  v15 = __chkstk_darwin(v14);
  v136 = (char *)v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v142 = (uint64_t)v132 - v18;
  v19 = __chkstk_darwin(v17);
  v137 = (uint64_t)v132 - v20;
  __chkstk_darwin(v19);
  v159 = (char *)v132 - v21;
  v161 = type metadata accessor for Logger(0);
  v150 = *(_QWORD *)(v161 - 8);
  v22 = __chkstk_darwin(v161);
  v143 = (char *)v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v135 = (char *)v132 - v25;
  v26 = __chkstk_darwin(v24);
  v147 = (char *)v132 - v27;
  __chkstk_darwin(v26);
  v148 = (char *)v132 - v28;
  v29 = sub_100010F40(&qword_1000918F8);
  v30 = __chkstk_darwin(v29);
  v151 = (uint64_t)v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)v132 - v32;
  v34 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = __chkstk_darwin(v34);
  v140 = (char *)v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v152 = (char *)v132 - v39;
  __chkstk_darwin(v38);
  v146 = (char *)v132 - v40;
  v41 = type metadata accessor for SidecarIdentity(0);
  v42 = __chkstk_darwin(v41);
  v44 = (char *)v132 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v42);
  v47 = (char *)v132 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)v132 - v48;
  v141 = a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v51 = sub_100012100(isa);

  v133 = v51;
  v156 = sub_100008898();
  v53 = v52;
  v139 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v139(v49, v153, v34);
  v153 = a2;
  sub_1000124EC(a2, (uint64_t)v33, &qword_1000918F8);
  v54 = sub_1000124B8((uint64_t)v33, 1, v34);
  v158 = v49;
  v154 = v35;
  v149 = v53;
  if (v54 == 1)
  {
    v148 = (char *)v34;
    sub_1000126F4((uint64_t)v33, &qword_1000918F8);
    v55 = *(void (**)(void))((swift_isaMask & *a7) + 0xB0);
    v138 = a7;
    v55();
    sub_10001257C((uint64_t)v49, (uint64_t)v44, type metadata accessor for SidecarIdentity);
    swift_bridgeObjectRetain_n(v53, 2);
    v56 = (unint64_t)v160;
    v57 = swift_bridgeObjectRetain_n(v160, 2);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    v60 = v49;
    if (os_log_type_enabled(v58, v59))
    {
      v61 = swift_slowAlloc(32, -1);
      v146 = (char *)swift_slowAlloc(96, -1);
      v165 = v146;
      *(_DWORD *)v61 = 136446722;
      swift_bridgeObjectRetain(v53);
      v162 = sub_100015FFC(v156, v53, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease_n(v53, 3);
      *(_WORD *)(v61 + 12) = 2082;
      v62 = sub_100050048();
      v64 = v63;
      v162 = sub_100015FFC(v62, v63, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease(v64);
      sub_1000124C4((uint64_t)v44, type metadata accessor for SidecarIdentity);
      *(_WORD *)(v61 + 22) = 2082;
      swift_bridgeObjectRetain(v56);
      v162 = sub_100015FFC(v157, v56, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v61 + 24, v61 + 32);
      swift_bridgeObjectRelease_n(v56, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%{public}s: Connecting to %{public}s '%{public}s'", (uint8_t *)v61, 0x20u);
      v65 = v146;
      swift_arrayDestroy(v146, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v53, 2);
      sub_1000124C4((uint64_t)v44, type metadata accessor for SidecarIdentity);

      swift_bridgeObjectRelease_n(v56, 2);
    }
    v79 = *(void (**)(char *, uint64_t))(v150 + 8);
    v79(v147, v161);
    v80 = (uint64_t)v159;
    a7 = v138;
    v82 = v154;
    v81 = v155;
    v83 = (uint64_t)v148;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v146, v33, v34);
    v66 = UUID._bridgeToObjectiveC()().super.isa;
    v67 = sub_100012100(v66);

    (*(void (**)(void))((swift_isaMask & *a7) + 0xB0))();
    sub_10001257C((uint64_t)v49, (uint64_t)v47, type metadata accessor for SidecarIdentity);
    swift_bridgeObjectRetain_n(v53, 2);
    v68 = (unint64_t)v160;
    v69 = swift_bridgeObjectRetain_n(v160, 2);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc(42, -1);
      v138 = a7;
      v73 = v72;
      v74 = swift_slowAlloc(96, -1);
      v165 = (char *)v74;
      *(_DWORD *)v73 = 136446978;
      swift_bridgeObjectRetain(v53);
      v162 = sub_100015FFC(v156, v53, (uint64_t *)&v165);
      v147 = (char *)v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v53, 3);
      *(_WORD *)(v73 + 12) = 2082;
      v75 = sub_100050048();
      v77 = v76;
      v162 = sub_100015FFC(v75, v76, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v77);
      sub_1000124C4((uint64_t)v47, type metadata accessor for SidecarIdentity);
      *(_WORD *)(v73 + 22) = 2082;
      swift_bridgeObjectRetain(v68);
      v162 = sub_100015FFC(v157, v68, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v73 + 24, v73 + 32);
      swift_bridgeObjectRelease_n(v68, 3);
      *(_WORD *)(v73 + 32) = 2048;
      v162 = (uint64_t)v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v73 + 34, v73 + 42);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "%{public}s: Reconnecting to %{public}s '%{public}s' (%lx)", (uint8_t *)v73, 0x2Au);
      swift_arrayDestroy(v74, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      v78 = v73;
      a7 = v138;
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v68, 2);

      sub_1000124C4((uint64_t)v47, type metadata accessor for SidecarIdentity);
      swift_bridgeObjectRelease_n(v53, 2);
    }
    v79 = *(void (**)(char *, uint64_t))(v150 + 8);
    v79(v148, v161);
    v82 = v154;
    (*(void (**)(char *, uint64_t))(v154 + 8))(v146, v34);
    v60 = v158;
    v80 = (uint64_t)v159;
    v81 = v155;
    v83 = v34;
  }
  v84 = (uint64_t)v152;
  v85 = v151;
  sub_1000124EC(v153, v151, &qword_1000918F8);
  if (sub_1000124B8(v85, 1, v83) == 1)
  {
    sub_1000126F4(v85, &qword_1000918F8);
    sub_1000124AC(v80, 1, 1, v81);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v84, v85, v83);
    v86 = (_QWORD *)((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
    swift_beginAccess((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities, &v162, 0, 0);
    v87 = *v86;
    swift_bridgeObjectRetain(v87);
    sub_10002182C(v84, v87);
    swift_bridgeObjectRelease(v87);
    v88 = v137;
    sub_1000124EC(v80, v137, &qword_100091900);
    if (sub_1000124B8(v88, 1, v81) == 1)
    {
      swift_bridgeObjectRelease(v149);
      sub_1000126F4(v88, &qword_100091900);
      sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      v91 = sub_10001F230(v89, v90, -1020, 0, 0, 0);
      swift_willThrow(v91, v92);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v83);
      v93 = v145;
      v94 = v143;
      v95 = v161;
      sub_1000126F4(v80, &qword_100091900);
      v127 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a7) + 0xB0);
      v128 = swift_errorRetain(v91);
      v129 = v127(v128);
      __chkstk_darwin(v129);
      sub_1000183F4(sub_10000D180, 0, sub_100012D04);
      v79(v94, v95);
      swift_errorRetain(v91);
      v130 = (void *)_convertErrorToNSError(_:)(v91);
      ((void (**)(_QWORD, void *))v93)[2](v93, v130);

      swift_errorRelease(v91);
      swift_errorRelease(v91);
      swift_errorRelease(v91);
      v131 = (uint64_t)v158;
      goto LABEL_27;
    }
    sub_1000126F4(v88, &qword_100091900);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v83);
  }
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v96 = sub_1000228C8(a7, v157, v160, v60, v144, v80);
  v160 = v79;
  swift_beginAccess((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap, &v165, 33, 0);
  sub_100009B44(v133, v96);
  swift_endAccess(&v165);
  v157 = v96;
  v97 = v96 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  v139(v140, v141, v83);
  v98 = v149;
  v99 = v81;
  v100 = v142;
  sub_10001257C(v97, v142, _s7SessionC8IdentityVMa);
  sub_1000124AC(v100, 0, 1, v81);
  swift_beginAccess((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities, &v165, 33, 0);
  sub_10001F118(v100);
  v101 = swift_endAccess(&v165);
  v102 = v135;
  (*(void (**)(uint64_t))((swift_isaMask & *a7) + 0xB0))(v101);
  v103 = v134;
  sub_10001257C(v97, v134, _s7SessionC8IdentityVMa);
  v104 = swift_bridgeObjectRetain(v98);
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.default.getter();
  v107 = v106;
  if (os_log_type_enabled(v105, v106))
  {
    v108 = swift_slowAlloc(22, -1);
    LODWORD(v155) = v107;
    v109 = v108;
    v154 = swift_slowAlloc(64, -1);
    v164 = v154;
    *(_DWORD *)v109 = 136446466;
    swift_bridgeObjectRetain(v98);
    v165 = (char *)sub_100015FFC(v156, v98, &v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v109 + 4, v109 + 12);
    swift_bridgeObjectRelease_n(v98, 3);
    *(_WORD *)(v109 + 12) = 2082;
    v110 = sub_100050048();
    v112 = v111;
    v113 = *(int *)(v99 + 20);
    v114 = *(_BYTE *)(v103 + *(int *)(v99 + 24)) == 0;
    v115 = v103;
    if (v114)
      v116 = 0x6C61636F6CLL;
    else
      v116 = 0x65746F6D6572;
    if (v114)
      v117 = (void *)0xE500000000000000;
    else
      v117 = (void *)0xE600000000000000;
    v156 = v109 + 14;
    v165 = *(char **)(v103 + v113);
    sub_10001216C();
    v118 = String.init<A>(_:radix:uppercase:)(&v165, 16, 1);
    v120 = v119;
    v165 = (char *)v110;
    v166 = v112;
    v121._countAndFlagsBits = 58;
    v121._object = (void *)0xE100000000000000;
    String.append(_:)(v121);
    v122._countAndFlagsBits = v116;
    v131 = (uint64_t)v158;
    v122._object = v117;
    String.append(_:)(v122);
    swift_bridgeObjectRelease(v117);
    v123._countAndFlagsBits = 58;
    v123._object = (void *)0xE100000000000000;
    String.append(_:)(v123);
    v124._countAndFlagsBits = v118;
    v124._object = v120;
    String.append(_:)(v124);
    swift_bridgeObjectRelease(v120);
    v125 = v166;
    v165 = (char *)sub_100015FFC((uint64_t)v165, v166, &v164);
    v80 = (uint64_t)v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v156, v109 + 22);
    swift_bridgeObjectRelease(v125);
    sub_1000124C4(v115, _s7SessionC8IdentityVMa);
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v155, "%{public}s: Connected %{public}s", (uint8_t *)v109, 0x16u);
    v126 = v154;
    swift_arrayDestroy(v154, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v109, -1, -1);
    swift_release(v157);

    v160(v135, v161);
    v93 = v145;
  }
  else
  {
    swift_release(v157);

    sub_1000124C4(v103, _s7SessionC8IdentityVMa);
    swift_bridgeObjectRelease_n(v98, 2);
    v160(v102, v161);
    v93 = v145;
    v131 = (uint64_t)v158;
  }
  v93[2](v93, 0);
  sub_1000126F4(v80, &qword_100091900);
LABEL_27:
  sub_1000124C4(v131, type metadata accessor for SidecarIdentity);
  _Block_release(v93);
}

uint64_t sub_10000D180()
{
  return 0x6E65704F20435058;
}

void sub_10000D354(uint64_t a1, uint64_t a2, _QWORD *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint8_t *v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(_QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39[2];

  v37 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v36 = a1;
  v14 = sub_100008898();
  v15 = v14;
  v17 = v16;
  if (a2)
  {
    v18 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
    v19 = swift_errorRetain(a2);
    v20 = v18(v19);
    v21 = __chkstk_darwin(v20);
    *(&v31 - 2) = v15;
    *(&v31 - 1) = v17;
    __chkstk_darwin(v21);
    *(&v31 - 2) = a2;
    sub_1000183F4(sub_100012470, v22, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    swift_errorRelease(a2);
  }
  else
  {
    v35 = v14;
    (*(void (**)(void))((swift_isaMask & *a3) + 0xB0))();
    v23 = swift_bridgeObjectRetain_n(v17, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v39[0] = v34;
      v33 = v24;
      *(_DWORD *)v26 = 136446210;
      v32 = v26 + 4;
      swift_bridgeObjectRetain(v17);
      v38 = sub_100015FFC(v35, v17, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v32, v26 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      v27 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, v25, "%{public}s: Close Session", v26, 0xCu);
      v28 = v34;
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  v29 = sub_100009CF8();
  swift_bridgeObjectRelease(v17);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100022C8C();
  v30 = v37;
  v37[2](v37, 0);
  swift_release(v29);
  _Block_release(v30);
}

void sub_10000D80C(uint64_t a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  Class isa;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (**v55)(_QWORD, _QWORD);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(void);
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];

  v6 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  __chkstk_darwin(v9);
  v56 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = ((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v16 = (char *)&v53 - v15;
  v60 = a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100012100(isa);

  v18 = sub_100008898();
  v20 = v19;
  v61 = *(void (**)(void))((swift_isaMask & *a2) + 0xB0);
  v61();
  v21 = swift_bridgeObjectRetain_n(v20, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v62 = v14;
  v59 = v8;
  if (v24)
  {
    v25 = swift_slowAlloc(12, -1);
    v55 = a3;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v54 = v11;
    v28 = v27;
    v66[0] = v27;
    *(_DWORD *)v26 = 136446210;
    swift_bridgeObjectRetain(v20);
    v64 = sub_100015FFC(v18, (unint64_t)v20, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s: Deallocate Session", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v29 = v28;
    v11 = v54;
    swift_slowDealloc(v29, -1, -1);
    v30 = v26;
    a3 = v55;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
  }
  v31 = *(void (**)(char *, uint64_t))(v63 + 8);
  v31(v16, v11);
  v32 = v18;
  v33 = (_QWORD *)((char *)a2 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
  swift_beginAccess((char *)a2 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities, v66, 0, 0);
  v34 = *v33;
  if (!*(_QWORD *)(*v33 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain(*v33);
  v35 = sub_100039C88();
  if ((v36 & 1) == 0)
  {
    swift_bridgeObjectRelease(v34);
LABEL_8:
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v52 = 559;
    v44 = sub_10001F230(v42, v43, -1020, 0, 0, 0);
    v46 = swift_willThrow(v44, v45);
    v47 = v62;
    v48 = ((uint64_t (*)(uint64_t))v61)(v46);
    __chkstk_darwin(v48);
    v51 = v44;
    swift_bridgeObjectRetain(v20);
    sub_1000180D4(sub_100012D04, (uint64_t)(&v53 - 4), v47, v32, v20);
    swift_bridgeObjectRelease(v20);
    v31((char *)v47, v11);
    v49 = v44;
    v50 = (void *)_convertErrorToNSError(_:)(v49);
    ((void (**)(_QWORD, void *))a3)[2](a3, v50);

    goto LABEL_9;
  }
  v37 = v35;
  v38 = *(unsigned int *)(v34 + 36);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v34);
  swift_beginAccess(v33, &v64, 33, 0);
  v39 = sub_100010F40(&qword_1000918F0);
  v40 = v56;
  v41 = (uint64_t)v59;
  Dictionary._Variant.remove(at:)(v56, v59, v37, v38, 0, v39);
  sub_1000124C4(v41, _s7SessionC8IdentityVMa);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v58);
  swift_endAccess(&v64);
  a3[2](a3, 0);
LABEL_9:
  _Block_release(a3);
}

void sub_10000DD7C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, const void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  Class v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  void (*v38)(void);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];

  v10 = type metadata accessor for Logger(0);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  v44 = swift_allocObject(&unk_100085D08, 24, 7);
  *(_QWORD *)(v44 + 16) = a5;
  _Block_copy(a5);
  v16 = sub_100008898();
  v18 = v17;
  v19 = *(void (**)(void))((swift_isaMask & *a4) + 0xB0);
  v43 = a4;
  v38 = v19;
  v19();
  swift_bridgeObjectRetain(v18);
  sub_1000120BC(a2, a3);
  swift_bridgeObjectRetain(v18);
  v20 = sub_1000120BC(a2, a3);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v39 = v16;
  v40 = v13;
  if (v23)
  {
    v24 = swift_slowAlloc(22, -1);
    v36 = a1;
    v25 = v24;
    v35 = swift_slowAlloc(32, -1);
    v46[0] = v35;
    *(_DWORD *)v25 = 136446466;
    v37 = a5;
    swift_bridgeObjectRetain(v18);
    v45 = sub_100015FFC(v16, v18, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    *(_WORD *)(v25 + 12) = 2048;
    v26 = Data.count.getter(a2);
    sub_100006C30(a2, a3);
    v45 = v26;
    a5 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v25 + 14, v25 + 22);
    sub_100006C30(a2, a3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Send %ld Bytes", (uint8_t *)v25, 0x16u);
    v27 = v35;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v25;
    a1 = v36;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_100006C30(a2, a3);
    swift_bridgeObjectRelease_n(v18, 2);
    sub_100006C30(a2, a3);
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
  v29 = sub_100009BB8(a1);
  swift_bridgeObjectRelease(v18);
  v30 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:", 8);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v32 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v30, "setObject:forKeyedSubscript:", isa, v32);

  sub_1000120BC(a2, a3);
  v33 = v30;
  sub_10001241C(a2, a3);
  sub_100045108();

  swift_release(v29);
  sub_100012430(a2, a3);

  sub_100012430(a2, a3);
  swift_release(v44);
  _Block_release(a5);
}

void sub_10000E29C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7, const void *a8)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  _BYTE v53[4];
  int v54;
  os_log_t v55;
  uint64_t v56;
  const void *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];

  v60 = a6;
  v64 = a4;
  v69 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v69 - 8);
  v14 = __chkstk_darwin(v69);
  v16 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v18 = &v53[-v17];
  v68 = swift_allocObject(&unk_100085CB8, 24, 7);
  *(_QWORD *)(v68 + 16) = a8;
  _Block_copy(a8);
  v66 = a1;
  v19 = sub_100008898();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_11:
    swift_release(v68);
    _Block_release(a8);
    v51 = "Negative value is not representable";
    v52 = 35;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v51, v52, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return;
  }
  v63 = a2;
  if (HIDWORD(a3))
  {
    swift_release(v68);
    _Block_release(a8);
    v51 = "Not enough bits to represent the passed value";
    v52 = 45;
    goto LABEL_13;
  }
  v21 = v19;
  v22 = v20;
  v62 = v16;
  v61 = *(void (**)(void))((swift_isaMask & *a7) + 0xB0);
  v61();
  swift_bridgeObjectRetain_n(v22, 2);
  v23 = swift_bridgeObjectRetain_n(a5, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = v25;
  v27 = os_log_type_enabled(v24, v25);
  v58 = a3;
  v59 = a5;
  v67 = v21;
  if (v27)
  {
    v28 = swift_slowAlloc(42, -1);
    v56 = swift_slowAlloc(128, -1);
    v71[0] = v56;
    *(_DWORD *)v28 = 136446978;
    v55 = v24;
    swift_bridgeObjectRetain(v22);
    v70 = sub_100015FFC(v21, v22, v71);
    v57 = a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v22, 3);
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain(a5);
    v70 = sub_100015FFC(v64, a5, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v28 + 22) = 2082;
    v29 = RPStreamTypeCopyDescription(v63);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v54 = v26;
    v31 = v22;
    v32 = a7;
    v33 = a3;
    v35 = v34;

    v70 = sub_100015FFC(v30, v35, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v28 + 32) = 2082;
    v36 = v33;
    a7 = v32;
    v22 = v31;
    v37 = RPStreamFlagsCopyDescription(v36);
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v70 = sub_100015FFC(v38, v40, v71);
    a8 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v28 + 34, v28 + 42);
    swift_bridgeObjectRelease(v40);
    v41 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "%{public}s: Open Stream '%{public}s', %{public}s <%{public}s>", (uint8_t *)v28, 0x2Au);
    v42 = v56;
    swift_arrayDestroy(v56, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(v22, 2);
  }
  (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v18, v69);
  v43 = sub_100009BB8(v66);
  v66 = sub_100006C74(0, &qword_1000918E8, SidecarStream_ptr);
  v44 = (_QWORD *)swift_allocObject(&unk_100085CE0, 80, 7);
  v45 = v67;
  v46 = v68;
  v44[2] = a7;
  v44[3] = v45;
  v44[4] = v22;
  v44[5] = sub_100012CA0;
  v47 = v64;
  v44[6] = v46;
  v44[7] = v47;
  v48 = v59;
  v44[8] = v59;
  v44[9] = v43;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v48);
  v49 = a7;
  swift_retain(v46);
  v50 = swift_retain(v43);
  sub_100023508(v50, v63, v58, v60, v47, v48, (uint64_t)sub_10001237C, (uint64_t)v44);
  swift_release(v68);
  swift_release(v43);
  swift_release(v44);
  swift_bridgeObjectRelease(v22);
  _Block_release(a8);
}

uint64_t sub_10000E8E8(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, unint64_t a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(id, uint64_t);
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(id, uint64_t);
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v52 = a8;
  v53 = a6;
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v54 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)v46 - v20;
  v22 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
  v55 = a2;
  if ((a2 & 1) != 0)
  {
    v23 = swift_errorRetain(a1);
    v24 = v22(v23);
    v25 = __chkstk_darwin(v24);
    v46[-2] = a4;
    v46[-1] = a5;
    __chkstk_darwin(v25);
    v46[-2] = a1;
    sub_1000183F4(sub_100012CA8, v26, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    swift_errorRetain(a1);
    v53(0, a1);
    sub_1000123BC(a1, 1);
  }
  else
  {
    v47 = a4;
    v49 = v17;
    v50 = v16;
    v51 = a7;
    v27 = v53;
    v48 = a9;
    v28 = swift_retain(a1);
    v22(v28);
    sub_1000123B0(a1, 0);
    swift_bridgeObjectRetain(a5);
    sub_1000123B0(a1, 0);
    v29 = swift_bridgeObjectRetain(a5);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v46[2] = a10;
      v33 = v32;
      v34 = swift_slowAlloc(64, -1);
      v57 = v34;
      *(_DWORD *)v33 = 136446466;
      v46[1] = a3;
      v35 = v30;
      swift_bridgeObjectRetain(a5);
      v56 = sub_100015FFC(v47, a5, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v33 + 12) = 2082;
      swift_retain(a1);
      v36 = RapportStreamSession.description.getter();
      v38 = v37;
      sub_1000123BC(a1, 0);
      v56 = sub_100015FFC(v36, v38, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v38);
      sub_1000123BC(a1, 0);
      sub_1000123BC(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v35, v31, "%{public}s: Opened %{public}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      sub_1000123BC(a1, 0);
      sub_1000123BC(a1, 0);

    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v54, v50);
    v39 = *(void **)(a1 + 16);
    v40 = objc_allocWithZone((Class)SidecarStream);
    v41 = v48;
    swift_bridgeObjectRetain(v48);
    v42 = v39;
    v43 = sub_100011E0C(v52, v41, v42);
    sub_1000074F4(a1, v43);
    v44 = v43;
    v27(v43, 0);

  }
  return sub_1000123BC(a1, v55 & 1);
}

void sub_10000ED30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void sub_10000ED88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7, void (**a8)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (**v30)(_QWORD, _QWORD, _QWORD);
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  Swift::UInt v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE v76[24];
  char v77[32];
  _BYTE v78[40];
  uint64_t v79;
  _QWORD v80[4];
  uint64_t v81[5];

  v65 = a6;
  v75 = a3;
  v14 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v61 - v18;
  v72 = swift_allocObject(&unk_100085C90, 24, 7);
  *(_QWORD *)(v72 + 16) = a8;
  _Block_copy(a8);
  v71 = a1;
  v74 = sub_100008898();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((v75 & 0x8000000000000000) != 0)
  {
LABEL_14:
    swift_release(v72);
    _Block_release(a8);
    v59 = "Negative value is not representable";
    v60 = 35;
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v59, v60, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return;
  }
  v68 = a2;
  if (HIDWORD(v75))
  {
    swift_release(v72);
    _Block_release(a8);
    v59 = "Not enough bits to represent the passed value";
    v60 = 45;
    goto LABEL_16;
  }
  v21 = v20;
  v22 = *(void (**)(void))((swift_isaMask & *a7) + 0xB0);
  v22();
  swift_bridgeObjectRetain_n(v21, 2);
  v23 = swift_bridgeObjectRetain_n(a5, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v67 = v25;
  v26 = os_log_type_enabled(v24, v25);
  v73 = a7;
  v69 = v21;
  v66 = a4;
  if (v26)
  {
    v27 = swift_slowAlloc(42, -1);
    v63 = v17;
    v28 = v27;
    v61 = swift_slowAlloc(128, -1);
    v81[0] = v61;
    *(_DWORD *)v28 = 136446978;
    v62 = v22;
    swift_bridgeObjectRetain(v21);
    v79 = sub_100015FFC(v74, v21, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v21, 3);
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain(a5);
    v79 = sub_100015FFC(a4, a5, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v28 + 22) = 2082;
    v29 = a5;
    v30 = a8;
    v31 = RPStreamTypeCopyDescription(v68);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v64 = v14;
    v34 = v33;

    v79 = sub_100015FFC(v32, v34, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v28 + 32) = 2082;
    v35 = RPStreamFlagsCopyDescription(v75);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    a8 = v30;
    a5 = v29;
    v39 = v36;
    v22 = v62;
    v79 = sub_100015FFC(v39, v38, v81);
    a7 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v28 + 34, v28 + 42);
    v40 = v38;
    v14 = v64;
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v67, "%{public}s: Listen Stream '%{public}s', %{public}s <%{public}s>", (uint8_t *)v28, 0x2Au);
    v41 = v61;
    swift_arrayDestroy(v61, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v42 = v28;
    v17 = v63;
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }
  v43 = *(void (**)(char *, uint64_t))(v70 + 8);
  v43(v19, v14);
  v44 = sub_100009BB8(v71);
  v45 = (_QWORD *)((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners);
  swift_beginAccess((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners, v77, 0, 0);
  v46 = *v45;
  swift_retain_n(v44, 2);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v46);
  v47 = v66;
  sub_1000217A0(v44, v66, a5, v46, (uint64_t)v78);
  swift_release(v44);
  swift_bridgeObjectRelease(v46);
  sub_100012684((uint64_t)v78);
  sub_1000126C0((uint64_t)v78, (uint64_t)&v79, &qword_1000918E0);
  if (v80[2])
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v50 = sub_10001F230(v48, v49, -121, 0, 0, 0);
    swift_willThrow(v50, v51);
    swift_bridgeObjectRelease(a5);
    v52 = swift_release_n(v44, 2);
    v53 = ((uint64_t (*)(uint64_t))v22)(v52);
    v54 = __chkstk_darwin(v53);
    v55 = v69;
    __chkstk_darwin(v54);
    sub_1000183F4(sub_1000122C8, v56, sub_100012D04);
    swift_bridgeObjectRelease(v55);
    v43(v17, v14);
    swift_errorRetain(v50);
    v57 = (void *)_convertErrorToNSError(_:)(v50);
    ((void (**)(_QWORD, _QWORD, void *))a8)[2](a8, 0, v57);

    swift_errorRelease(v50);
    swift_errorRelease(v50);
    swift_release(v72);
  }
  else
  {
    swift_bridgeObjectRelease(v69);
    v81[0] = v68;
    v81[1] = v75;
    v81[2] = v65;
    v81[3] = (uint64_t)sub_10001224C;
    v58 = v72;
    v81[4] = v72;
    swift_beginAccess(v45, v76, 33, 0);
    swift_bridgeObjectRetain(a5);
    swift_retain(v44);
    swift_retain(v58);
    sub_10003CBF0(v81, v44, v47, a5);
    swift_endAccess(v76);
    swift_release(v58);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_release_n(v44, 3);
  }
  _Block_release(a8);
}

uint64_t sub_10000F57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  sub_100012D54();
  v10 = v9;
  v12 = v11;
  v14 = _Block_copy(v13);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v16 = v15;
  _Block_copy(v14);
  v17 = v12;
  v18 = sub_1000132BC();
  a9(v18);
  _Block_release(v14);

  return swift_bridgeObjectRelease(v16);
}

void sub_10000F624()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  sub_100012D54();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = sub_100012DA8();
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100012EA0();
  v10 = sub_100008898();
  sub_1000133C0();
  (*(void (**)(void))((swift_isaMask & v11) + 0xB0))();
  sub_1000132A8();
  v12 = sub_100012DE0();
  Logger.logObject.getter(v12);
  v13 = sub_100012FF0();
  if (sub_1000131D4(v13))
  {
    v22 = v9;
    v14 = sub_100006D24(22);
    v23 = v8;
    v15 = sub_100006D24(64);
    v26[0] = v15;
    *(_DWORD *)v14 = 136315394;
    sub_100012DE0();
    v25 = sub_1000131F4(v10, v16, v26);
    sub_100013128((uint64_t)&v25, (uint64_t)v26, v17, v14 + 12);
    sub_100012DBC(v1);
    *(_WORD *)(v14 + 12) = 2082;
    sub_100013164();
    v18 = v6;
    v25 = sub_100015FFC(v6, v4, v26);
    sub_100013128((uint64_t)&v25, (uint64_t)v26, v19, v14 + 22);
    sub_100012DBC(v4);
    sub_100012F94((void *)&_mh_execute_header, v0, v2, "%s: Close Stream '%{public}s'", (uint8_t *)v14);
    sub_100012EE8(v15, v20, (uint64_t)&type metadata for Any + 8);
    v21 = v15;
    v8 = v23;
    sub_100006D04(v21);
    sub_100006D04(v14);

    (*(void (**)(NSObject *, uint64_t))(v24 + 8))(v0, v22);
  }
  else
  {

    sub_100012DD8(v4);
    sub_100012DD8(v1);
    (*(void (**)(NSObject *, uint64_t))(v24 + 8))(v0, v9);
    v18 = v6;
  }
  sub_100009BB8(v8);
  sub_100007C5C(v18, v4);
  sub_100013014();
  sub_100012D28();
}

void sub_10000F894(uint64_t a1, _QWORD *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  void (*v36)(void);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v37 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - v10;
  v39 = swift_allocObject(&unk_100085C40, 24, 7);
  *(_QWORD *)(v39 + 16) = a3;
  _Block_copy(a3);
  v12 = sub_100008898();
  v14 = v13;
  v36 = *(void (**)(void))((swift_isaMask & *a2) + 0xB0);
  v36();
  v15 = swift_bridgeObjectRetain_n(v14, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v38 = v12;
  if (v18)
  {
    v32 = v7;
    v19 = swift_slowAlloc(12, -1);
    v33 = a1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v35 = a3;
    v22 = v21;
    v41[0] = v21;
    v34 = v6;
    *(_DWORD *)v20 = 136446210;
    swift_bridgeObjectRetain(v14);
    v40 = sub_100015FFC(v12, v14, v41);
    v23 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: TimeSync Requested", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v24 = v22;
    a3 = v35;
    swift_slowDealloc(v24, -1, -1);
    v25 = v20;
    a1 = v33;
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v23);
  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  v26 = sub_100009BB8(a1);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v27 = (_QWORD *)swift_allocObject(&unk_100085C68, 56, 7);
  v28 = v38;
  v29 = v39;
  v27[2] = a2;
  v27[3] = v28;
  v27[4] = v14;
  v27[5] = sub_10001224C;
  v27[6] = v29;
  v30 = a2;
  swift_retain(v29);
  sub_100023730();
  swift_release(v29);
  swift_release(v26);
  swift_release(v27);
  _Block_release(a3);
}

uint64_t sub_10000FC84(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a7;
  v36 = a6;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  v19 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
  v37 = a2;
  if ((a2 & 1) != 0)
  {
    v20 = swift_errorRetain(a1);
    v21 = v19(v20);
    v22 = __chkstk_darwin(v21);
    *(&v32 - 2) = a4;
    *(&v32 - 1) = a5;
    __chkstk_darwin(v22);
    *(&v32 - 2) = a1;
    sub_1000183F4(sub_100012CA4, v23, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    type metadata accessor for Clock();
    v24 = static Clock.nullClockIdentifier.getter();
    swift_errorRetain(a1);
    v36(v24, a1);
    sub_1000123BC(a1, 1);
  }
  else
  {
    v33 = v13;
    v34 = v12;
    v32 = a4;
    v25 = swift_retain(a1);
    v19(v25);
    v26 = swift_bridgeObjectRetain_n(a5, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v39 = v30;
      *(_DWORD *)v29 = 136446210;
      swift_bridgeObjectRetain(a5);
      v38 = sub_100015FFC(v32, a5, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: TimeSync Enabled", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
    v36(*(_QWORD *)(a1 + 24), 0);
  }
  return sub_1000123BC(a1, v37 & 1);
}

uint64_t sub_10000FF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v6 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a3, 1);
  sub_1000133D4();
  v3._countAndFlagsBits = sub_1000132BC();
  String.append(_:)(v3);
  v4._countAndFlagsBits = sub_100013000();
  String.append(_:)(v4);
  return v6;
}

void sub_10000FFF4(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a1;
  a5(a3, v9, v8);
  sub_10001315C();
  sub_100012EB8(v9);
}

void sub_10001004C(_QWORD *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class isa;
  uint64_t v24;
  _OWORD v25[2];
  _BYTE v26[152];
  _BYTE v27[152];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*(id *)((char *)a1 + OBJC_IVAR____TtC12SidecarRelay6Client_connection), "auditToken");
  v25[0] = *(_OWORD *)v27;
  v25[1] = *(_OWORD *)&v27[16];
  v8 = xpc_copy_entitlement_for_token("com.apple.private.sidecar.diagnose", v25);
  swift_unknownObjectRelease(v8);
  if (v8)
  {
    v24 = v4;
    if (qword_1000912B8 != -1)
      swift_once(&qword_1000912B8, sub_1000265C8);
    sub_1000238B8();
    v9 = type metadata accessor for PropertyListEncoder(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v11 = PropertyListEncoder.init()(v10);
    dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
    memcpy(v26, v27, sizeof(v26));
    v12 = sub_100011FC0();
    v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v26, &unk_1000874A8, v12);
    v22 = v21;
    sub_100011FFC((uint64_t *)v27);
    sub_1000120BC(v20, v22);
    isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class, _QWORD))a2)[2](a2, isa, 0);

    sub_100006C30(v20, v22);
    sub_100006C30(v20, v22);
    swift_release(v11);
  }
  else
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v15 = sub_10001F230(v13, v14, -1000, 0, 0, 0);
    v17 = swift_willThrow(v15, v16);
    v18 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB0))(v17);
    __chkstk_darwin(v18);
    sub_1000183F4(sub_100010384, 0, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRetain(v15);
    v19 = (void *)_convertErrorToNSError(_:)(v15);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v19);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }
  _Block_release(a2);
}

uint64_t sub_100010384()
{
  return 0x65736F6E67616944;
}

void sub_1000103B4(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  sub_100012EB8(v7);
}

uint64_t destroy for Client.StreamListener(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for Client.StreamListener(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = a2[4];
  v4 = a1[4];
  a1[3] = a2[3];
  a1[4] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

__n128 initializeWithTake for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.StreamListener(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.StreamListener(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.StreamListener()
{
  return &type metadata for Client.StreamListener;
}

uint64_t destroy for Client.StreamListenerKey(_QWORD *a1)
{
  swift_release(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

void _s12SidecarRelay6ClientC17StreamListenerKeyVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain(v3);
  sub_100013040();
  sub_100005E8C();
}

uint64_t *assignWithCopy for Client.StreamListenerKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for Client.StreamListenerKey(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for Client.StreamListenerKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.StreamListenerKey(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.StreamListenerKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.StreamListenerKey()
{
  return &type metadata for Client.StreamListenerKey;
}

unint64_t sub_100010734()
{
  unint64_t result;

  result = qword_100091818;
  if (!qword_100091818)
  {
    result = swift_getWitnessTable(&unk_100071684, &type metadata for Client.StreamListenerKey);
    atomic_store(result, (unint64_t *)&qword_100091818);
  }
  return result;
}

unint64_t sub_100010774()
{
  unint64_t result;

  result = qword_100091820;
  if (!qword_100091820)
  {
    result = swift_getWitnessTable(&unk_100071758, &type metadata for Client.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_100091820);
  }
  return result;
}

BOOL sub_1000107B0(char a1, char a2)
{
  return a1 == a2;
}

void sub_1000107C0(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_1000107E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 0x72656E657473696CLL && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E657473696CLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 6580592 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6580592, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6973736573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x736D6165727473 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D6165727473, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t static RapportControlFlags.infraWiFi.getter()
{
  return 4;
}

Swift::Int sub_100010994(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_1000109D8()
{
  return 0;
}

uint64_t sub_1000109E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100010A1C + 4 * byte_100071630[a1]))(0x72656E657473696CLL, 0xE900000000000073);
}

uint64_t sub_100010A1C()
{
  return 6580592;
}

uint64_t sub_100010A2C()
{
  return 0x736E6F6973736573;
}

uint64_t sub_100010A44()
{
  return 0x736D6165727473;
}

BOOL sub_100010A5C(char *a1, char *a2)
{
  return sub_1000107B0(*a1, *a2);
}

Swift::Int sub_100010A68()
{
  unsigned __int8 *v0;

  return sub_100010994(*v0);
}

void sub_100010A70(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000107C0(a1, *v1);
}

Swift::Int sub_100010A78(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100010AB8()
{
  unsigned __int8 *v0;

  return sub_1000109E4(*v0);
}

uint64_t sub_100010AC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000107E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100010AE4()
{
  return sub_1000109D8();
}

uint64_t sub_100010B00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static RapportControlFlags.infraWiFi.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100010B24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010FA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010B4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100010FA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100010B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;

  sub_1000131A4();
  a19 = v23;
  a20 = v24;
  v42 = v25;
  v27 = v26;
  v43 = v28;
  v30 = v29;
  v32 = v31;
  sub_100010F40(&qword_100091848);
  sub_100012E3C();
  __chkstk_darwin(v33);
  sub_100012DF0();
  v36 = v35 - v34;
  v38 = v32[3];
  v37 = v32[4];
  sub_100010F80(v32, v38);
  v39 = sub_100010FA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Client.DiagnosticState.CodingKeys, &type metadata for Client.DiagnosticState.CodingKeys, v39, v38, v37);
  a10 = v30;
  v44 = 0;
  sub_100010F40(&qword_100091858);
  sub_100012B88((uint64_t)&unk_100091860);
  sub_100012E58();
  if (!v21)
  {
    LOBYTE(a10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v43, &a10, v20);
    a10 = v27;
    sub_100012E58();
    a10 = v42;
    v44 = 3;
    v40 = sub_100010F40(&qword_100091868);
    v41 = sub_100011024();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&a10, &v44, v20, v40, v41);
  }
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v36, v20);
  sub_100012F9C();
}

uint64_t sub_100010CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000131A4();
  v16 = v1;
  v17 = v2;
  v4 = v3;
  v5 = sub_100010F40(&qword_100091948);
  __chkstk_darwin(v5);
  sub_100012EA0();
  v6 = v4[3];
  v7 = v4[4];
  sub_100010F80(v4, v6);
  v8 = sub_100010FA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Client.DiagnosticState.CodingKeys, &type metadata for Client.DiagnosticState.CodingKeys, v8, v6, v7);
  if (v0)
  {
    v10 = 0;
    sub_100012B68(v4);
    sub_100012F54();
    sub_10001300C();
  }
  else
  {
    sub_100010F40(&qword_100091858);
    sub_100012B88((uint64_t)&qword_100091950);
    sub_100012E18();
    v10 = v15;
    LOBYTE(v15) = 1;
    sub_10001301C();
    ((void (*)(uint64_t *, uint64_t))KeyedDecodingContainer.decode(_:forKey:))(&v15, v5);
    v14 = 2;
    sub_100012E18();
    v11 = sub_100010F40(&qword_100091868);
    v14 = 3;
    v12 = sub_100012BD4();
    sub_100012DE0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, &v14, v5, v11, v12);
    sub_100012F00();
    v13 = v15;
    sub_100013040();
    sub_100012B68(v4);
    swift_bridgeObjectRelease(v13);
    sub_100012F54();
    sub_10001300C();
  }
  return v10;
}

uint64_t sub_100010EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_100010CF4();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

#error "100010F34: call analysis failed (funcsize=8)"

uint64_t sub_100010F40(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_100010F80(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100010FA4()
{
  unint64_t result;

  result = qword_100091850;
  if (!qword_100091850)
  {
    result = swift_getWitnessTable(&unk_100071894, &type metadata for Client.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091850);
  }
  return result;
}

uint64_t sub_100010FE0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100011024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091870;
  if (!qword_100091870)
  {
    v1 = sub_100010FE0(&qword_100091868);
    sub_100012C54((uint64_t)&qword_100092F30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100091870);
  }
  return result;
}

const char *sub_1000110A4(unsigned int a1)
{
  if (a1 > 3)
    return "?";
  else
    return off_100086040[a1];
}

void sub_1000110C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  id v5;
  id v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Class v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  char v106[24];
  char v107[32];

  sub_100012DB0(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners, (uint64_t)v107);
  v1 = sub_1000133A4();
  v2 = sub_1000117A4(v1);
  sub_100012E98();
  sub_100024F90(v2);
  v88 = v3;
  v89 = v0;
  v4 = (id *)(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  sub_100012DB0(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap, (uint64_t)v106);
  v5 = *v4;
  v6 = *v4;
  sub_100055C14();
  v95 = v6;
  v93 = sub_100011BA0(v5);
  if (v8 == v9 >> 1)
  {
LABEL_2:

    swift_unknownObjectRelease(v93);
    sub_100024F90((uint64_t)_swiftEmptyArrayStorage);
    v11 = v10;
    v12 = (uint64_t *)(v89 + OBJC_IVAR____TtC12SidecarRelay6Client_streams);
    sub_100012DB0(v89 + OBJC_IVAR____TtC12SidecarRelay6Client_streams, (uint64_t)&v103);
    v13 = *v12;
    v14 = *(_QWORD *)(*v12 + 16);
    v15 = _swiftEmptyArrayStorage;
    if (!v14)
    {
LABEL_25:
      sub_100024FA4((uint64_t)v15);
      v56 = v55;
      if (!*(_QWORD *)(v88 + 16))
        swift_bridgeObjectRelease(v88);
      if (!*(_QWORD *)(v11 + 16))
        sub_1000132A0();
      if (!*(_QWORD *)(v56 + 16))
        sub_100012E98();
      return;
    }
    v87 = v11;
    v105 = _swiftEmptyArrayStorage;
    sub_100013070();
    sub_100055CB0();
    v15 = v105;
    v17 = sub_100045650(v13);
    v18 = 0;
    v20 = v19 & 1;
    v91 = v14;
    v92 = v13 + 64;
    v90 = v13;
    while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(_BYTE *)(v13 + 32))
    {
      if (((*(_QWORD *)(v92 + (((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_47;
      if (*(_DWORD *)(v13 + 36) != (_DWORD)v16)
        goto LABEL_48;
      v94 = v20;
      v96 = v16;
      v97 = v18;
      v99 = v15;
      v21 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v17);
      v23 = v21 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
      swift_retain(v21);
      swift_bridgeObjectRetain(v22);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_100012100(isa);

      sub_100011E6C();
      sub_100013130();
      v28._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v25, v26, v27);
      object = v28._object;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(object);
      v30 = sub_1000133E0();
      if (*(_BYTE *)(v23 + *(int *)(v30 + 24)))
        v31 = 0x65746F6D6572;
      else
        v31 = 0x6C61636F6CLL;
      if (*(_BYTE *)(v23 + *(int *)(v30 + 24)))
        v32 = (void *)0xE600000000000000;
      else
        v32 = (void *)0xE500000000000000;
      sub_10001216C();
      sub_100013130();
      v36 = String.init<A>(_:radix:uppercase:)(v33, v34, v35);
      v38 = v37;
      sub_100012EDC();
      v39._countAndFlagsBits = v31;
      v39._object = v32;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v32);
      sub_100012EDC();
      v40._countAndFlagsBits = v36;
      v40._object = v38;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v38);
      v41 = *(_QWORD *)(v22 + 16);
      if (v41)
      {
        sub_100055C48();
        v42 = (void **)(v22 + 40);
        do
        {
          v43 = (uint64_t)*(v42 - 1);
          v44 = *v42;
          swift_retain(v43);
          v45 = v44;
          v46 = RapportStreamSession.description.getter();
          v48 = v47;

          swift_release(v43);
          v49 = _swiftEmptyArrayStorage[2];
          if (v49 >= _swiftEmptyArrayStorage[3] >> 1)
            sub_100055C48();
          _swiftEmptyArrayStorage[2] = v49 + 1;
          v50 = &_swiftEmptyArrayStorage[2 * v49];
          v50[4] = v46;
          v50[5] = v48;
          v42 += 2;
          --v41;
        }
        while (v41);
        sub_10001327C();
        swift_release(v21);
        v13 = v90;
      }
      else
      {
        sub_10001327C();
        swift_release(v21);
      }
      v15 = v99;
      v105 = v99;
      v51 = v99[2];
      if (v51 >= v99[3] >> 1)
      {
        sub_100055CB0();
        v15 = v105;
      }
      v18 = v97 + 1;
      v15[2] = v51 + 1;
      v52 = &v15[3 * v51];
      v52[4] = 542327881;
      v52[5] = 0xE400000000000000;
      v52[6] = _swiftEmptyArrayStorage;
      v53 = sub_100045654(v17, v96, v94 & 1, v13);
      v17 = v53;
      v20 = v54 & 1;
      if (v97 + 1 == v91)
      {
        sub_1000121A8(v53, v16, v20);
        sub_10001320C();
        v11 = v87;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  else
  {
    v57 = v8;
    v58 = v9 >> 1;
    v98 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v100 = v9 >> 1;
    v59 = (uint64_t *)(v7 + 16 * v8 + 8);
    while (v57 < (uint64_t)(v9 >> 1))
    {
      if ((uint64_t)v58 <= v57)
        goto LABEL_50;
      if (v9 >> 1 < v58)
        goto LABEL_51;
      v60 = *v59;
      v103 = *(v59 - 1);
      sub_10001216C();
      swift_retain(v60);
      v61 = String.init<A>(_:radix:uppercase:)(&v103, 16, 0);
      v101 = v62;
      v102 = v61;
      v63 = v60 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
      v64 = UUID._bridgeToObjectiveC()().super.isa;
      v65 = sub_100012100(v64);

      v103 = 542327881;
      v104 = 0xE400000000000000;
      v105 = (_QWORD *)v65;
      sub_100011E6C();
      sub_100013130();
      v69._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v66, v67, v68);
      String.append(_:)(v69);
      sub_10001320C();
      v70 = v103;
      v71 = v104;
      v72 = sub_1000133E0();
      if (*(_BYTE *)(v63 + *(int *)(v72 + 24)))
        v73 = 0x65746F6D6572;
      else
        v73 = 0x6C61636F6CLL;
      if (*(_BYTE *)(v63 + *(int *)(v72 + 24)))
        v74 = (void *)0xE600000000000000;
      else
        v74 = (void *)0xE500000000000000;
      v103 = *(_QWORD *)(v63 + *(int *)(v72 + 20));
      sub_100013130();
      v78 = String.init<A>(_:radix:uppercase:)(v75, v76, v77);
      v80 = v79;
      v103 = v70;
      v104 = v71;
      sub_100012EDC();
      v81._countAndFlagsBits = v73;
      v81._object = v74;
      String.append(_:)(v81);
      swift_bridgeObjectRelease(v74);
      sub_100012EDC();
      v82._countAndFlagsBits = v78;
      v82._object = v80;
      String.append(_:)(v82);
      swift_release(v60);
      sub_1000132A0();
      v83 = v103;
      v84 = v104;
      v85 = _swiftEmptyArrayStorage[2];
      if (v85 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100055C14();
      ++v57;
      _swiftEmptyArrayStorage[2] = v85 + 1;
      v86 = &_swiftEmptyArrayStorage[4 * v85];
      v86[4] = v102;
      v86[5] = v101;
      v86[6] = v83;
      v86[7] = v84;
      v59 += 2;
      v9 = v98;
      v58 = v100;
      if (v100 == v57)
        goto LABEL_2;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t sub_1000117A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  void *object;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  v52 = &_swiftEmptyArrayStorage;
  sub_100055C14();
  v2 = &_swiftEmptyArrayStorage;
  v4 = sub_100045650(a1);
  if (v4 < 0 || (v6 = v4, v4 >= 1 << *(_BYTE *)(a1 + 32)))
  {
LABEL_24:
    __break(1u);
  }
  else
  {
    v7 = a1 + 64;
    v42 = a1 + 64;
    while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      if (v5 != *(_DWORD *)(a1 + 36))
        goto LABEL_26;
      v44 = v5;
      v48 = v2;
      v43 = v1;
      v8 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 24 * v6);
      v9 = *v8;
      v10 = v8[1];
      v11 = (void *)v8[2];
      v12 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 40 * v6);
      v14 = *v12;
      v13 = v12[1];
      v45 = (const char *)v12[2];
      v15 = v12[4];
      swift_retain(v9);
      swift_bridgeObjectRetain(v11);
      swift_retain(v15);
      v50 = sub_100028E50();
      v51 = v16;
      v17._countAndFlagsBits = 15392;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      swift_bridgeObjectRetain(v11);
      v18._countAndFlagsBits = v10;
      v18._object = v11;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v11);
      v19._countAndFlagsBits = 62;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20 = v50;
      v46 = v51;
      if ((unint64_t)(v14 - 1) < 3)
        v21 = v14;
      else
        v21 = 0;
      v22 = sub_1000110A4(v21);
      v47 = v20;
      if ((v13 & 2) != 0)
        v23 = *(_QWORD *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
      else
        v23 = 0;
      v50 = 0;
      v51 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      v24._countAndFlagsBits = 0x694C6D6165727453;
      v24._object = (void *)0xEF2072656E657473;
      String.append(_:)(v24);
      v49 = v22;
      v25 = sub_100010F40(&qword_100091888);
      _print_unlocked<A, B>(_:_:)(&v49, &v50, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v26._countAndFlagsBits = 541869600;
      v26._object = (void *)0xE400000000000000;
      String.append(_:)(v26);
      if (HIDWORD(v23))
        goto LABEL_30;
      v27 = RPStreamFlagsCopyDescription(v23);
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v30);
      v32._countAndFlagsBits = 0x2044495550202CLL;
      v32._object = (void *)0xE700000000000000;
      String.append(_:)(v32);
      v49 = v45;
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64);
      object = v33._object;
      String.append(_:)(v33);
      swift_release(v15);
      swift_bridgeObjectRelease(v11);
      swift_release(v9);
      swift_bridgeObjectRelease(object);
      v35 = v50;
      v36 = v51;
      v2 = v48;
      v52 = v48;
      v37 = v48[2];
      if (v37 >= v48[3] >> 1)
      {
        sub_100055C14();
        v2 = v52;
      }
      v2[2] = v37 + 1;
      v38 = &v2[4 * v37];
      v38[4] = v47;
      v38[5] = v46;
      v38[6] = v35;
      v38[7] = v36;
      v39 = -1 << *(_BYTE *)(a1 + 32);
      if ((uint64_t)v6 >= -v39)
        goto LABEL_27;
      v7 = a1 + 64;
      if ((*(_QWORD *)(v42 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
        goto LABEL_28;
      if (v44 != *(_DWORD *)(a1 + 36))
        goto LABEL_29;
      v40 = _HashTable.occupiedBucket(after:)(v6, v42, ~v39);
      v1 = v43 - 1;
      if (v43 == 1)
        return (uint64_t)v2;
      v6 = v40;
      if ((v40 & 0x8000000000000000) == 0)
      {
        v5 = *(_DWORD *)(a1 + 36);
        if (v40 < 1 << *(_BYTE *)(a1 + 32))
          continue;
      }
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_100011BA0(void *a1)
{
  void *v2;
  id v3;
  uint64_t Count;
  void *v5;
  int isUniquelyReferenced_nonNull_native;
  int64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void (*v15)(uint64_t, uint64_t);
  _QWORD aBlock[5];
  uint64_t v17;
  void *v18;

  v2 = &_swiftEmptyArrayStorage;
  v18 = &_swiftEmptyArrayStorage;
  if (!a1)
  {
    v15 = 0;
    v9 = 0;
    goto LABEL_11;
  }
  v3 = a1;
  Count = SidecarMapTableGetCount();
  v5 = &_swiftEmptyArrayStorage;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyArrayStorage);
  if (!isUniquelyReferenced_nonNull_native || Count > *((_QWORD *)&_swiftEmptyArrayStorage + 3) >> 1)
  {
    if (*((_QWORD *)&_swiftEmptyArrayStorage + 2) <= Count)
      v7 = Count;
    else
      v7 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
    sub_100038C70(isUniquelyReferenced_nonNull_native, v7, 0, (uint64_t)&_swiftEmptyArrayStorage);
    v5 = v8;
  }
  v18 = v5;
  v9 = swift_allocObject(&unk_100085BC8, 24, 7);
  *(_QWORD *)(v9 + 16) = &v18;
  v10 = swift_allocObject(&unk_100085BF0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1000121D0;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1000121E4;
  v17 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001CCE8;
  aBlock[3] = &unk_100085C08;
  v11 = _Block_copy(aBlock);
  v12 = v17;
  swift_retain(v10);
  swift_release(v12);
  SidecarMapTableIterateObjects(v3, v11);

  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 73, 90, 54, 1);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v15 = sub_1000121D0;
    v2 = v18;
LABEL_11:
    swift_bridgeObjectRetain(v2);

    swift_bridgeObjectRelease(v18);
    sub_1000121B4((uint64_t)v15, v9);
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

void sub_100011D74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];

  sub_1000121EC(a2, (uint64_t)v11);
  v5 = type metadata accessor for Relay.Session(0);
  swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v5, 7);
  v6 = v10;
  sub_100038898();
  v7 = *(_QWORD *)(*a3 + 16);
  sub_100038934(v7);
  v8 = *a3;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 16 * v7;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = v6;
  *a3 = v8;
}

id sub_100011E0C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(v3, "initWithIdentifier:rapportStream:", v6, a3);

  return v7;
}

unint64_t sub_100011E6C()
{
  unint64_t result;

  result = qword_100091890;
  if (!qword_100091890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100091890);
  }
  return result;
}

void sub_100011EA8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_10001333C(a1))
  {
    v3 = v2(255);
    atomic_store(sub_1000132EC(v3, v3), v1);
  }
  sub_100005E8C();
}

unint64_t sub_100011EDC()
{
  unint64_t result;

  result = qword_1000930B0;
  if (!qword_1000930B0)
  {
    result = swift_getWitnessTable(&unk_1000716D4, &type metadata for Client.StreamListenerKey);
    atomic_store(result, (unint64_t *)&qword_1000930B0);
  }
  return result;
}

uint64_t sub_100011F18()
{
  uint64_t v0;

  sub_1000133E8();
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100011F38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xC8))();
}

uint64_t sub_100011F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011F80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011F88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xD0))();
}

unint64_t sub_100011FC0()
{
  unint64_t result;

  result = qword_1000918D0;
  if (!qword_1000918D0)
  {
    result = swift_getWitnessTable(&unk_100072458, &unk_1000874A8);
    atomic_store(result, (unint64_t *)&qword_1000918D0);
  }
  return result;
}

uint64_t *sub_100011FFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[4];
  v12 = a1[3];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[18];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000120BC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100012100(void *a1)
{
  id v1;
  unsigned int v2;
  _QWORD v4[2];

  v1 = a1;
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, "getUUIDBytes:", v4);
  v2 = v4[0];

  return bswap32(v2);
}

unint64_t sub_10001216C()
{
  unint64_t result;

  result = qword_1000918D8;
  if (!qword_1000918D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1000918D8);
  }
  return result;
}

uint64_t sub_1000121A8(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000121B4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000121C4()
{
  uint64_t v0;

  return sub_10001302C(v0, 24);
}

void sub_1000121D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100011D74(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1000121D8()
{
  uint64_t v0;

  return sub_10001302C(v0, 32);
}

uint64_t sub_1000121E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001CCC8(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1000121EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100012228()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10001224C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000ED30(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100012254()
{
  uint64_t v0;

  return sub_100012F8C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 17);
}

uint64_t sub_100012284()
{
  uint64_t v0;

  sub_1000133E8();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000122B4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10000FC84(a1, a2 & 1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1000122C8()
{
  uint64_t v0;

  return sub_10000FF74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 15);
}

uint64_t sub_100012304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a4)
    return swift_release(a5);
  return result;
}

uint64_t sub_100012314()
{
  uint64_t v0;

  return sub_100012F5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 13);
}

uint64_t sub_10001233C()
{
  _QWORD *v0;

  sub_1000133E8();
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10001237C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10000E8E8(a1, a2 & 1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(id, uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1000123B0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain();
  else
    return swift_retain(a1);
}

uint64_t sub_1000123BC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease();
  else
    return swift_release(a1);
}

void sub_1000123C8(uint64_t a1)
{
  uint64_t v1;

  sub_100050A48(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000123D0()
{
  uint64_t v0;

  return sub_100012F5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 13);
}

void sub_1000123F8()
{
  uint64_t v0;

  swift_errorRetain(*(_QWORD *)(v0 + 16));
  sub_100005E8C();
}

uint64_t sub_10001241C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000120BC(result, a2);
  return result;
}

uint64_t sub_100012430(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100006C30(a1, a2);
  return a1;
}

uint64_t sub_100012444()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000132FC();
  return sub_100012F8C(v0, v1, 22);
}

uint64_t sub_100012470()
{
  uint64_t v0;

  return sub_10000FF74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 15);
}

uint64_t sub_1000124AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000124B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

void sub_1000124C4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_1000130B0(v2);
  sub_100005E8C();
}

void sub_1000124EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001317C(a1, a2, a3);
  sub_100012F74(v3);
  sub_100005E8C();
}

uint64_t sub_10001250C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000132FC();
  return sub_100012F8C(v0, v1, 21);
}

uint64_t sub_100012538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10001257C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_100012F74(v3);
  sub_100005E8C();
}

uint64_t sub_1000125A8()
{
  return sub_10000B57C();
}

void sub_1000125C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001D1D8(a1, a2, a3);
}

void sub_1000125C8(uint64_t a1, uint64_t a2)
{
  sub_10001D164(a1, a2);
}

uint64_t sub_1000125D0()
{
  uint64_t v0;

  return sub_100012F8C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 17);
}

_OWORD *sub_100012600(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100012610()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000132FC();
  return sub_100012F8C(v0, v1, 18);
}

uint64_t sub_10001263C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000132FC();
  return sub_100012F8C(v0, v1, 16);
}

uint64_t sub_100012668(uint64_t a1)
{
  uint64_t v1;

  return sub_100008F64(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_100012684(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v2 = sub_10001333C(a1);
  v3(v2, v1[1], v1[2], v1[3], v1[4]);
  sub_100005E8C();
}

uint64_t sub_1000126B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a4)
    return swift_retain(a5);
  return result;
}

void sub_1000126C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_10001317C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_100005E8C();
}

void sub_1000126F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100010F40(a2);
  sub_1000130B0(v2);
  sub_100005E8C();
}

_BYTE *initializeBufferWithCopyOfBuffer for Client.DiagnosticState.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Client.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000127FC + 4 * byte_100071639[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100012830 + 4 * byte_100071634[v4]))();
}

uint64_t sub_100012830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100012838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100012840);
  return result;
}

uint64_t sub_10001284C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100012854);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100012858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100012860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001286C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100012878(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Client.DiagnosticState.CodingKeys()
{
  return &type metadata for Client.DiagnosticState.CodingKeys;
}

uint64_t destroy for Client.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for Client.DiagnosticState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for Client.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for Client.DiagnosticState(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for Client.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.DiagnosticState(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.DiagnosticState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.DiagnosticState()
{
  return &type metadata for Client.DiagnosticState;
}

unint64_t sub_100012AAC()
{
  unint64_t result;

  result = qword_100091930;
  if (!qword_100091930)
  {
    result = swift_getWitnessTable(&unk_10007186C, &type metadata for Client.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091930);
  }
  return result;
}

unint64_t sub_100012AEC()
{
  unint64_t result;

  result = qword_100091938;
  if (!qword_100091938)
  {
    result = swift_getWitnessTable(&unk_1000717DC, &type metadata for Client.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091938);
  }
  return result;
}

unint64_t sub_100012B2C()
{
  unint64_t result;

  result = qword_100091940;
  if (!qword_100091940)
  {
    result = swift_getWitnessTable(&unk_100071804, &type metadata for Client.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091940);
  }
  return result;
}

uint64_t sub_100012B68(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100012B88(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_10001333C(a1))
  {
    v2 = sub_100010FE0(&qword_100091858);
    atomic_store(sub_1000132EC(v2, v2), v1);
  }
  sub_10001313C();
}

unint64_t sub_100012BD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091958;
  if (!qword_100091958)
  {
    v1 = sub_100010FE0(&qword_100091868);
    sub_100012C54((uint64_t)&unk_100091960);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100091958);
  }
  return result;
}

void sub_100012C54(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_10001333C(a1))
  {
    v2 = sub_100010FE0(&qword_100091880);
    atomic_store(sub_1000132EC(v2, v2), v1);
  }
  sub_10001313C();
}

id sub_100012D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001F230(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_100012D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))((v1 & a1) + 0xB0))();
}

uint64_t sub_100012DA8()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_100012DB0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_100012DBC(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_100012DC4()
{
  return swift_willThrow();
}

uint64_t sub_100012DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_100012DD8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_100012DE0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100012DE8(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

void sub_100012E00(id a1)
{

}

uint64_t sub_100012E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 81, v0, v1, v2);
}

uint64_t sub_100012E50(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_100006C74(0, a2, a3);
}

uint64_t sub_100012E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 72, v3 - 81, v0, v1, v2);
}

uint64_t sub_100012E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v3 - 88, v1, v2 + 12);
}

uint64_t sub_100012E98()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100012EB8(id a1)
{

}

uint64_t sub_100012EC8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100006C30(v1, v0);
}

uint64_t sub_100012ED4()
{
  return Logger.logObject.getter();
}

void sub_100012EDC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100012EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2, a3);
}

uint64_t sub_100012EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100012F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

BOOL sub_100012F10(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100012F20(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

uint64_t sub_100012F28()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100015FFC(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_100012F38()
{
  _BOOL8 v0;

  return sub_100008FFC(v0);
}

uint64_t sub_100012F54()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100012F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000FF74(a1, a2, a3);
}

uint64_t sub_100012F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_100012F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000FF74(a1, a2, a3);
}

void sub_100012F94(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100012FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 96, v3, v2, v1 + 22);
}

uint64_t sub_100012FF0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100012FF8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100013000()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001300C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013014()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001301C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void *sub_100013024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _Block_copy(&a9);
}

uint64_t sub_10001302C(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7);
}

uint64_t sub_100013034(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_100013040()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_100013048(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_10001305C()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2082;
  return swift_retain(v0);
}

uint64_t sub_100013070()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100013078@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3;

  *(_DWORD *)(v3 - 108) = a3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 108, v3 - 104, a1, a2);
}

uint64_t sub_10001308C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

id sub_100013094(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000130A0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000130A8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000130B0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000130C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v0;
  return swift_release(v1);
}

uint64_t sub_100013110()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100013128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

void sub_10001315C()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100013164()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001316C()
{
  return swift_slowAlloc(64, -1);
}

uint64_t sub_10001317C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100010F40(a3);
}

uint64_t sub_10001318C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100013194()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 240));
}

uint64_t sub_1000131BC()
{
  return swift_willThrow();
}

uint64_t sub_1000131CC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

BOOL sub_1000131D4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000131E4(void *a1@<X0>, NSObject *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, (os_log_type_t)*(_DWORD *)(a4 - 256), a3, v4, 0x16u);
}

uint64_t sub_1000131F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100015FFC(a1, v3, a3);
}

float *sub_1000131FC(float *result, float a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10001320C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

BOOL sub_100013214(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10001322C()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_10001324C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100013264()
{
  uint64_t v0;

  sub_100012684(v0 - 168);
}

void sub_100013270(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1000126C0(v3 - 168, v3 - 128, a3);
}

uint64_t sub_10001327C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 1, a3);
}

void sub_100013290(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100013298()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000132A0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000132A8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000132B4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000132BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000132C8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000120BC(v1, v0);
}

uint64_t sub_1000132D4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000132E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000132EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getWitnessTable(v2, a2);
}

uint64_t sub_1000132F4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_100013330()
{
  void *v0;

  return v0;
}

uint64_t sub_10001333C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

id sub_100013348(id a1, SEL a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(a1, a2, a3, v3, v4);
}

void sub_100013354(char a1, int64_t a2)
{
  uint64_t v2;

  sub_100038988(a1, a2, 1, v2);
}

uint64_t sub_100013360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000124AC(a1, a2, 1, v2);
}

uint64_t sub_10001336C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return swift_endAccess(va);
}

uint64_t sub_100013374()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_100013380()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_100013388(_BOOL8 a1)
{
  return sub_100007A20(a1);
}

uint64_t sub_100013390()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

id sub_100013398(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000133A4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000133AC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1000133CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100015FFC(a1, v3, a3);
}

void sub_1000133D4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000133E0()
{
  return _s7SessionC8IdentityVMa(0);
}

void sub_1000133E8()
{
  uint64_t v0;

}

uint64_t sub_1000133F0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_1000919D0);
  sub_100006CAC(v0, (uint64_t)qword_1000919D0);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000013, 0x80000001000718F0);
}

uint64_t *sub_10001346C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = v0;
  v2 = *v0;
  *((_BYTE *)v0 + 24) = 0;
  v3 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  v0[2] = (uint64_t)v3;
  v4 = v3;
  sub_100014380(0xD000000000000011, 0x800000010006E4B0, v4);
  v5 = sub_100014AC4((uint64_t)&unk_100086158, 24);
  *(_QWORD *)(v5 + 16) = v2;
  v44 = v5;
  v6 = sub_100014AE4((uint64_t)&unk_100086170, (uint64_t)_NSConcreteStackBlock, 1107296256, v36, v40);
  v14 = sub_100014AD8((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v32, v34, v37, v41, (uint64_t)sub_1000143D4, v44);
  sub_100014ACC(v14, "setInterruptionHandler:");
  _Block_release(v0);
  v15 = sub_100014AC4((uint64_t)&unk_1000861A8, 24);
  *(_QWORD *)(v15 + 16) = v2;
  v45 = v15;
  v16 = sub_100014AE4((uint64_t)&unk_1000861C0, (uint64_t)_NSConcreteStackBlock, 1107296256, v38, v42);
  v24 = sub_100014AD8((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23, v33, v35, v39, v43, (uint64_t)sub_100014400, v45);
  sub_100014ACC(v24, "setInvalidationHandler:");
  _Block_release(v0);
  v25 = type metadata accessor for RemoteDisplayReadinessRequestHandler();
  sub_100014AC4(v25, 32);
  v0[4] = sub_100019DC8();
  v26 = type metadata accessor for RemoteDisplayInitiationRequestHandler();
  sub_100014AC4(v26, 40);
  v27 = sub_100020FA4(v4);
  v28 = v4;
  sub_100014428((uint64_t)v27, v1);
  swift_release(v27);
  v29 = v1[4];
  v30 = swift_retain(v29);
  sub_1000146A8(v30, v1);
  swift_release(v29);

  return v1;
}

void sub_100013620(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (qword_100091268 != -1)
    swift_once(&qword_100091268, sub_1000133F0);
  v5 = sub_100012DA8();
  v6 = sub_100006CAC(v5, (uint64_t)qword_1000919D0);
  oslog = Logger.logObject.getter(v6);
  v7 = a2();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)sub_100006D24(2);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, a3, v8, 2u);
    sub_100006D04((uint64_t)v8);
  }

}

uint64_t sub_1000136E8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "invalidate");

  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_100013724()
{
  uint64_t v0;

  sub_1000136E8();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CompanionLinkServer()
{
  return objc_opt_self(_TtC12SidecarRelay19CompanionLinkServer);
}

void sub_100013764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *oslog;
  uint64_t v28;
  uint64_t aBlock;
  _QWORD v30[4];
  uint64_t v31;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    if (qword_100091268 != -1)
      swift_once(&qword_100091268, sub_1000133F0);
    v1 = sub_100012DA8();
    v2 = sub_100006CAC(v1, (uint64_t)qword_1000919D0);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)sub_100006D24(2);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Activation requested, but it's already activated.", v4, 2u);
      sub_100006D04((uint64_t)v4);
    }

  }
  else
  {
    v5 = v0;
    *(_BYTE *)(v0 + 24) = 1;
    if (qword_100091268 != -1)
      swift_once(&qword_100091268, sub_1000133F0);
    v6 = sub_100012DA8();
    sub_100006CAC(v6, (uint64_t)qword_1000919D0);
    v7 = swift_retain_n(v0, 4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = sub_100006D24(22);
      v11 = sub_100006D24(64);
      v28 = v11;
      *(_DWORD *)v10 = 136315394;
      v12 = _typeName(_:qualified:)(*(_QWORD *)v5, 0);
      v14 = v13;
      aBlock = sub_100015FFC(v12, v13, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v10 + 4, v10 + 12);
      sub_100014AF0();
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v10 + 12) = 2080;
      v15 = objc_msgSend(*(id *)(v5 + 16), "serviceType");
      if (v15)
      {
        v16 = v15;
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0;
      }
      aBlock = v17;
      v30[0] = v19;
      v20 = sub_100010F40(&qword_100091AC8);
      v21 = String.init<A>(describing:)(&aBlock, v20);
      v23 = v22;
      aBlock = sub_100015FFC(v21, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v10 + 14, v10 + 22);
      sub_100014AF0();
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activating a [%s] that handles requests to the [%s] service.", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      sub_100006D04(v11);
      sub_100006D04(v10);

    }
    else
    {

      swift_release_n(v5, 4);
    }
    v24 = *(void **)(v5 + 16);
    v30[3] = sub_100014360;
    v31 = v5;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v30[0] = 1107296256;
    v30[1] = sub_100021604;
    v30[2] = &unk_100086120;
    v25 = _Block_copy(&aBlock);
    v26 = v31;
    swift_retain(v5);
    swift_release(v26);
    objc_msgSend(v24, "activateWithCompletion:", v25);
    _Block_release(v25);
  }
}

void sub_100013AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    if (qword_100091268 != -1)
      swift_once(&qword_100091268, sub_1000133F0);
    v2 = type metadata accessor for Logger(0);
    sub_100006CAC(v2, (uint64_t)qword_1000919D0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v16 = a1;
      v17 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_errorRetain(a1);
      v7 = sub_100010F40(&qword_100091AD0);
      v8 = String.init<A>(describing:)(&v16, v7);
      v10 = v9;
      v16 = sub_100015FFC(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Activation failed. Error: [%s]", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_100091268 != -1)
      swift_once(&qword_100091268, sub_1000133F0);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100006CAC(v11, (uint64_t)qword_1000919D0);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Activation successful.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
  }

}

uint64_t sub_100013D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[40];

  v39 = a7;
  v40 = a3;
  v42 = a1;
  v43 = a5;
  v41 = a4;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100091268 != -1)
    swift_once(&qword_100091268, sub_1000133F0);
  v15 = type metadata accessor for Logger(0);
  sub_100006CAC(v15, (uint64_t)qword_1000919D0);
  v16 = swift_bridgeObjectRetain_n(a6, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v38 = a2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v37 = a8;
    v22 = v21;
    v45 = v21;
    *(_DWORD *)v20 = 136446210;
    swift_bridgeObjectRetain(a6);
    v44 = sub_100015FFC(v43, a6, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a6, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received a [%{public}s] request", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    a8 = v37;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    a2 = v38;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a6, 2);
  }
  v25 = type metadata accessor for OSActivity();
  swift_initStackObject(v25, v46);
  sub_100017B50((unint64_t)"com.apple.sidecar.handle_companion_link_request", 47, 2, v26);
  v28 = v27;
  sub_1000149C4();
  *v14 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v29 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v29 & 1) == 0)
    __break(1u);
  v30 = v39[3];
  v31 = v39[4];
  sub_100010F80(v39, v30);
  v32 = (_QWORD *)swift_allocObject(&unk_100086270, 64, 7);
  v32[2] = v43;
  v32[3] = a6;
  v33 = v41;
  v32[4] = v40;
  v32[5] = v33;
  v32[6] = v28;
  v32[7] = a8;
  v34 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v31 + 16);
  swift_bridgeObjectRetain(a6);
  swift_retain(v33);
  swift_retain(v28);
  v34(v42, a2, sub_100014A34, v32, v30, v31);
  swift_release(v28);
  return swift_release(v32);
}

void sub_100014068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;

  if (qword_100091268 != -1)
    swift_once(&qword_100091268, sub_1000133F0);
  v12 = type metadata accessor for Logger(0);
  sub_100006CAC(v12, (uint64_t)qword_1000919D0);
  v13 = swift_bridgeObjectRetain_n(a5, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v19 = a6;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v21 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain(a5);
    v20 = sub_100015FFC(a4, a5, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending a response to a [%{public}s] request", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v18 = v16;
    a6 = v19;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
  }
  a6(a1, a2, a3);
  OSActivity.close()();
}

uint64_t sub_100014274(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v7 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v9 = _Block_copy(a4);
  v10 = swift_allocObject(&unk_100086248, 24, 7);
  *(_QWORD *)(v10 + 16) = v9;
  swift_retain(v6);
  v7(v8, a3, sub_1000149BC, v10);
  swift_release(v6);
  swift_bridgeObjectRelease(v8);
  swift_release(v10);
  return swift_bridgeObjectRelease(a3);
}

void sub_100014360(uint64_t a1)
{
  sub_100013AB0(a1);
}

uint64_t sub_100014368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014378(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100014380(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setServiceType:", v5);

}

void sub_1000143D4()
{
  uint64_t v0;

  sub_100013620(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))&static os_log_type_t.error.getter, "Connection interrupted.");
}

void sub_100014400()
{
  uint64_t v0;

  sub_100013620(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))&static os_log_type_t.default.getter, "Connection invalidated.");
}

uint64_t sub_100014428(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  _QWORD *v14;
  void *v15;
  uint64_t v17[5];
  _QWORD *v18;
  __int128 v19[2];
  _QWORD v20[5];

  v4 = *a2;
  v20[3] = type metadata accessor for RemoteDisplayInitiationRequestHandler();
  v20[4] = &off_100086D58;
  v20[0] = a1;
  v5 = qword_100091268;
  swift_retain(a1);
  if (v5 != -1)
    swift_once(&qword_100091268, sub_1000133F0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006CAC(v6, (uint64_t)qword_1000919D0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v17[0] = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v19[0] = sub_100015FFC(0xD000000000000015, 0x800000010006E9C0, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering CompanionLink request handler for requests with identifier [%s]", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = (void *)a2[2];
  v13 = String._bridgeToObjectiveC()();
  sub_100014928((uint64_t)v20, (uint64_t)v19);
  v14 = (_QWORD *)swift_allocObject(&unk_100086298, 80, 7);
  v14[2] = 0xD000000000000015;
  v14[3] = 0x800000010006E9C0;
  sub_100014970(v19, (uint64_t)(v14 + 4));
  v14[9] = v4;
  v17[4] = (uint64_t)sub_100014AB0;
  v18 = v14;
  v17[0] = (uint64_t)_NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = (uint64_t)sub_100014274;
  v17[3] = (uint64_t)&unk_1000862B0;
  v15 = _Block_copy(v17);
  swift_release(v18);
  objc_msgSend(v12, "registerRequestID:options:handler:", v13, 0, v15);
  _Block_release(v15);

  return sub_100012B68(v20);
}

uint64_t sub_1000146A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  _QWORD *v14;
  void *v15;
  uint64_t v17[5];
  _QWORD *v18;
  __int128 v19[2];
  _QWORD v20[5];

  v4 = *a2;
  v20[3] = type metadata accessor for RemoteDisplayReadinessRequestHandler();
  v20[4] = &off_100086578;
  v20[0] = a1;
  v5 = qword_100091268;
  swift_retain(a1);
  if (v5 != -1)
    swift_once(&qword_100091268, sub_1000133F0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006CAC(v6, (uint64_t)qword_1000919D0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v17[0] = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v19[0] = sub_100015FFC(0xD000000000000016, 0x800000010006E910, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, (char *)v19 + 8, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering CompanionLink request handler for requests with identifier [%s]", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = (void *)a2[2];
  v13 = String._bridgeToObjectiveC()();
  sub_100014928((uint64_t)v20, (uint64_t)v19);
  v14 = (_QWORD *)swift_allocObject(&unk_1000861F8, 80, 7);
  v14[2] = 0xD000000000000016;
  v14[3] = 0x800000010006E910;
  sub_100014970(v19, (uint64_t)(v14 + 4));
  v14[9] = v4;
  v17[4] = (uint64_t)sub_100014988;
  v18 = v14;
  v17[0] = (uint64_t)_NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = (uint64_t)sub_100014274;
  v17[3] = (uint64_t)&unk_100086210;
  v15 = _Block_copy(v17);
  swift_release(v18);
  objc_msgSend(v12, "registerRequestID:options:handler:", v13, 0, v15);
  _Block_release(v15);

  return sub_100012B68(v20);
}

uint64_t sub_100014928(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100014970(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100014988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  return sub_100013D34(a1, a2, a3, a4, v4[2], v4[3], v4 + 4, v4[9]);
}

uint64_t sub_100014998()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000149BC(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;

  sub_100050A94(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

unint64_t sub_1000149C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000918C0;
  if (!qword_1000918C0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000918C0);
  }
  return result;
}

uint64_t sub_100014A00()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_100014A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100014068(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 32));
}

uint64_t sub_100014A64()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100012B68((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100014AB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100014AC4(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

id sub_100014ACC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100014AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

void *sub_100014AE4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = v5;
  a5 = a1;
  return _Block_copy(&a2);
}

uint64_t sub_100014AF0()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_100014AFC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091AD8);
  sub_100006CAC(v0, (uint64_t)qword_100091AD8);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000010, 0x800000010006ED70);
}

uint64_t sub_100014B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  type metadata accessor for CompanionLinkDevice(0);
  sub_100013118();
  __chkstk_darwin(v8);
  sub_100012DF0();
  v11 = v10 - v9;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 24) = 0;
  type metadata accessor for CompanionLinkClient();
  sub_1000167B4(a3, v11);
  v12 = CompanionLinkClient.__allocating_init(destination:serviceType:)(v11, 0xD000000000000011, 0x800000010006E4B0);
  *(_QWORD *)(v4 + 16) = v12;
  swift_retain(v12);
  v13 = *(_QWORD *)RapportControlFlags.AWDL.unsafeMutableAddressor();
  v14 = *(_QWORD *)RapportControlFlags.infraWiFi.unsafeMutableAddressor();
  v15 = *(_QWORD *)RapportControlFlags.BLE.unsafeMutableAddressor();
  if (!v13)
  {
    if (!v14)
    {
      v13 = 0;
      if (!v15)
        goto LABEL_8;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v14 & ~v13) != 0)
LABEL_5:
    v13 |= v14;
  if ((v15 & ~v13) != 0)
LABEL_7:
    v13 |= v15;
LABEL_8:
  CompanionLinkClient.controlFlags.setter(v13);
  swift_release(v12);
  sub_1000167F8(a3);
  return v4;
}

void sub_100014C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  CompanionLinkClient.cancel()();
  swift_release(v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  sub_100005E8C();
}

uint64_t sub_100014CD0()
{
  uint64_t v0;

  sub_100014C9C();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationRequest()
{
  return objc_opt_self(_TtC12SidecarRelay30RemoteDisplayInitiationRequest);
}

uint64_t sub_100014D10(void (*a1)(void), uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = *v2;
  v7 = sub_100010F40(&qword_100091BD8);
  sub_100013118();
  __chkstk_darwin(v8);
  sub_100012DF0();
  v11 = v10 - v9;
  if ((v2[3] & 1) != 0)
  {
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v12 = sub_100012DA8();
    v13 = sub_100006CAC(v12, (uint64_t)qword_100091AD8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)sub_100006D24(2);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Already attempted to send the request.  Will not try again.", v16, 2u);
      sub_100006D04((uint64_t)v16);
    }

    v17 = sub_10001686C();
    v18 = swift_allocError(&type metadata for RemoteDisplayInitiationRequest.RequestError, v17, 0, 0);
    *v19 = 0;
    a1();
    return swift_errorRelease(v18);
  }
  else
  {
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v21 = sub_100012DA8();
    sub_100006CAC(v21, (uint64_t)qword_100091AD8);
    v22 = swift_retain_n(v2, 8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v53 = a1;
      v25 = sub_100006D24(42);
      v52 = sub_100006D24(128);
      v57 = v52;
      *(_DWORD *)v25 = 136315906;
      v26 = type metadata accessor for CompanionLinkClient();
      v51 = v24;
      v55 = RapportMessageable.serviceType.getter(v26, (uint64_t)&protocol witness table for CompanionLinkClient);
      v56 = v27;
      v28 = sub_100010F40(&qword_100091AC8);
      v50 = v23;
      v29 = String.init<A>(describing:)(&v55, v28);
      v55 = sub_100016B74(v29, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v25 + 4, v25 + 12);
      sub_100016B3C();
      sub_1000132F4();
      *(_WORD *)(v25 + 12) = 2080;
      v31 = CompanionLinkClient.controlFlags.getter();
      v32 = RPControlFlagsCopyDescription((unint64_t)v31);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v54 = a2;
      v35 = v34;

      v55 = sub_100015FFC(v33, v35, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v25 + 14, v25 + 22);
      sub_100016B3C();
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v25 + 22) = 2080;
      CompanionLinkClient.destinationDevice.getter(v11);
      v36 = String.init<A>(describing:)(v11, v7);
      v38 = sub_100016B74(v36, v37);
      sub_100016B48(v38, v39, v40, v25 + 32);
      sub_100016B3C();
      sub_1000132F4();
      *(_WORD *)(v25 + 32) = 2080;
      v41 = v3[4];
      v42 = v3[5];
      swift_bridgeObjectRetain(v42);
      v43 = sub_100015FFC(v41, v42, &v57);
      sub_100016B48(v43, v44, v45, v25 + 42);
      sub_100016B3C();
      v46 = v42;
      a2 = v54;
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Activating client.  serviceType: [%s].  controlFlags: [%s].  destinationDevice: [%s]. idsDeviceIdentifierOfLocalDevice: [%s].", (uint8_t *)v25, 0x2Au);
      swift_arrayDestroy(v52, 4, (char *)&type metadata for Any + 8);
      sub_100006D04(v52);
      v47 = v25;
      a1 = v53;
      sub_100006D04(v47);

    }
    else
    {

      swift_release_n(v3, 8);
    }
    v48 = sub_100014AC4((uint64_t)&unk_100086328, 24);
    swift_weakInit(v48 + 16, v3);
    v49 = (_QWORD *)sub_100014AC4((uint64_t)&unk_100086350, 48);
    v49[2] = v48;
    v49[3] = a1;
    v49[4] = a2;
    v49[5] = v6;
    swift_retain(v48);
    swift_retain(a2);
    CompanionLinkClient.activate(completion:)((uint64_t)sub_100016860, (uint64_t)v49);
    swift_release(v48);
    return swift_release(v49);
  }
}

uint64_t sub_100015144(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t Strong;
  uint64_t v66;
  char v67[64];
  uint64_t v68;
  uint64_t v69;

  v6 = a2 + 16;
  if (a1)
  {
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v9 = type metadata accessor for Logger(0);
    sub_100006CAC(v9, (uint64_t)qword_100091AD8);
    swift_retain_n(a2, 2);
    v10 = swift_errorRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v62 = a3;
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      v15 = swift_slowAlloc(32, -1);
      v66 = v15;
      *(_DWORD *)v13 = 138412546;
      v16 = _convertErrorToNSError(_:)(a1);
      v68 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v13 + 4, v13 + 12);
      *v14 = v16;
      swift_errorRelease(a1);
      *(_WORD *)(v13 + 12) = 2080;
      swift_beginAccess(v6, &v68, 0, 0);
      Strong = swift_weakLoadStrong(v6);
      v17 = sub_100010F40(&qword_100091BF0);
      v18 = String.init<A>(describing:)(&Strong, v17);
      v20 = v19;
      Strong = sub_100015FFC(v18, v19, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v66, v13 + 14, v13 + 22);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client activation failed. Error: [%@].  Request: [%s]", (uint8_t *)v13, 0x16u);
      v21 = sub_100010F40((uint64_t *)&unk_100092180);
      swift_arrayDestroy(v14, 1, v21);
      v22 = v14;
      a3 = v62;
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {
      swift_errorRelease(a1);

      swift_release_n(a2, 2);
    }
    v43 = sub_10001686C();
    v44 = swift_allocError(&type metadata for RemoteDisplayInitiationRequest.RequestError, v43, 0, 0);
    *v45 = a1;
    swift_errorRetain(a1);
    ((void (*)(uint64_t))a3)(v44);
    v46 = v44;
    return swift_errorRelease(v46);
  }
  swift_beginAccess(v6, &v68, 0, 0);
  v23 = swift_weakLoadStrong(v6);
  if (!v23)
  {
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_100006CAC(v48, (uint64_t)qword_100091AD8);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "The request object has been deallocated.  Will not try to send the request.", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    v53 = sub_10001686C();
    v54 = swift_allocError(&type metadata for RemoteDisplayInitiationRequest.RequestError, v53, 0, 0);
    *v55 = 1;
    a3();
    v46 = v54;
    return swift_errorRelease(v46);
  }
  v24 = (_QWORD *)v23;
  v25 = sub_100010F40(&qword_100093E10);
  inited = swift_initStackObject(v25, v67);
  *(_OWORD *)(inited + 16) = xmmword_100071940;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x800000010006EDE0;
  v27 = v24[5];
  *(_QWORD *)(inited + 48) = v24[4];
  *(_QWORD *)(inited + 56) = v27;
  swift_bridgeObjectRetain(v27);
  v28 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (qword_100091270 != -1)
    swift_once(&qword_100091270, sub_100014AFC);
  v29 = type metadata accessor for Logger(0);
  sub_100006CAC(v29, (uint64_t)qword_100091AD8);
  swift_bridgeObjectRetain_n(v28, 2);
  v30 = swift_retain_n(v24, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(32, -1);
    v63 = swift_slowAlloc(96, -1);
    v66 = v63;
    *(_DWORD *)v33 = 136315650;
    Strong = sub_100015FFC(0xD000000000000015, 0x800000010006E9C0, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v66, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = swift_bridgeObjectRetain(v28);
    v35 = Dictionary.description.getter(v34, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v64 = a4;
    v37 = v36;
    swift_bridgeObjectRelease(v28);
    Strong = sub_100015FFC(v35, v37, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v66, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v33 + 22) = 2080;
    Strong = (uint64_t)v24;
    v38 = type metadata accessor for RemoteDisplayInitiationRequest();
    swift_retain(v24);
    v39 = String.init<A>(describing:)(&Strong, v38);
    v41 = v40;
    Strong = sub_100015FFC(v39, v40, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v66, v33 + 24, v33 + 32);
    swift_release_n(v24, 2);
    v42 = v41;
    a4 = v64;
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "The client has been activated.  Sending request with request ID: [%s].  requestBody: [%s].  Request: [%s]", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy(v63, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release_n(v24, 2);
    swift_bridgeObjectRelease_n(v28, 2);
  }
  v66 = v24[2];
  swift_retain(v66);
  sub_10002503C(v28);
  v57 = v56;
  swift_bridgeObjectRelease(v28);
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
  v60 = v59;
  v61 = (_QWORD *)swift_allocObject(&unk_100086378, 40, 7);
  v61[2] = v24;
  v61[3] = a3;
  v61[4] = a4;
  type metadata accessor for CompanionLinkClient();
  swift_retain(v24);
  swift_retain(a4);
  RapportMessageable.sendRequest(id:request:destinationID:options:response:)(0xD000000000000015, 0x800000010006E9C0, v57, v58, v60, 0, (uint64_t)sub_1000168E8, (uint64_t)v61);
  swift_release(v24);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v60);
  swift_release(v61);
  return swift_release(v66);
}

uint64_t sub_1000158C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;

  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v8 = type metadata accessor for Logger(0);
    sub_100006CAC(v8, (uint64_t)qword_100091AD8);
    swift_retain_n(a4, 2);
    v9 = swift_errorRetain(a3);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      v14 = swift_slowAlloc(32, -1);
      v35 = v14;
      *(_DWORD *)v12 = 138412546;
      v33 = a5;
      v15 = _convertErrorToNSError(_:)(a3);
      v34 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 4, v12 + 12);
      *v13 = v15;
      swift_errorRelease(a3);
      *(_WORD *)(v12 + 12) = 2080;
      v34 = a4;
      v16 = type metadata accessor for RemoteDisplayInitiationRequest();
      swift_retain(a4);
      v17 = String.init<A>(describing:)(&v34, v16);
      v19 = v18;
      v34 = sub_100015FFC(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 14, v12 + 22);
      swift_release_n(a4, 2);
      v20 = v19;
      a5 = v33;
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request failed with error: [%@].  Request: [%s]", (uint8_t *)v12, 0x16u);
      v21 = sub_100010F40((uint64_t *)&unk_100092180);
      swift_arrayDestroy(v13, 1, v21);
      swift_slowDealloc(v13, -1, -1);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {
      swift_errorRelease(a3);

      swift_release_n(a4, 2);
    }
    a5(a3);
    return swift_errorRelease(a3);
  }
  else
  {
    if (qword_100091270 != -1)
      swift_once(&qword_100091270, sub_100014AFC);
    v22 = type metadata accessor for Logger(0);
    sub_100006CAC(v22, (uint64_t)qword_100091AD8);
    v23 = swift_retain_n(a4, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v34 = a4;
      v35 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = type metadata accessor for RemoteDisplayInitiationRequest();
      swift_retain(a4);
      v29 = String.init<A>(describing:)(&v34, v28);
      v31 = v30;
      v34 = sub_100015FFC(v29, v30, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v26 + 4, v26 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Remote display initiation request completed successfully.  Request: [%s]", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_release_n(a4, 2);
    }
    return ((uint64_t (*)(_QWORD))a5)(0);
  }
}

void sub_100015CB8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v2;
  if (qword_100091270 != -1)
    swift_once(&qword_100091270, sub_100014AFC);
  v5 = sub_100012DA8();
  sub_100006CAC(v5, (uint64_t)qword_100091AD8);
  v6 = swift_retain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)sub_100006D24(12);
    v10 = sub_100006D24(32);
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = *(_QWORD *)(v4 + 32);
    v12 = *(_QWORD *)(v4 + 40);
    swift_bridgeObjectRetain(v12);
    v13 = sub_100015FFC(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4, v9 + 12);
    swift_release(v4);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    sub_100006D04(v10);
    sub_100006D04((uint64_t)v9);

  }
  else
  {

    swift_release(v4);
  }
}

void sub_100015E54(uint64_t a1)
{
  sub_100015CB8(a1, "The client has been interrupted for request to device with IDS identifier: [%s]");
}

void sub_100015E70(uint64_t a1)
{
  sub_100015CB8(a1, "The client has been invalidated for request to device with IDS identifier: [%s]");
}

uint64_t sub_100015E8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1 = sub_100010F40(&qword_100091BD8);
  sub_100013118();
  __chkstk_darwin(v2);
  sub_100012DF0();
  v5 = v4 - v3;
  v20 = 0;
  v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v6._countAndFlagsBits = 91;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v19 = *v0;
  v7 = sub_100010F40(&qword_100091BE0);
  v8._countAndFlagsBits = String.init<A>(describing:)(&v19, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0xD000000000000025;
  v10._object = (void *)0x800000010006ED90;
  String.append(_:)(v10);
  v11 = v0[4];
  v12 = (void *)v0[5];
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._object = (void *)0x800000010006EDC0;
  v14._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v14);
  CompanionLinkClient.destinationDevice.getter(v5);
  v15._countAndFlagsBits = String.init<A>(reflecting:)(v5, v1);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 93;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v20;
}

uint64_t sub_100015FDC()
{
  return sub_100015E8C();
}

uint64_t sub_100015FFC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_1000160CC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000121EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000121EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100012B68(v12);
  return v7;
}

_QWORD *sub_1000160CC(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100016220((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1000162E4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_100016220(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000162E4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100016378(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100016598(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_100016598((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100016378(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  sub_1000164E8(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    goto LABEL_15;
  }
  if (v7 == v4)
    return (void *)v6;
  result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 1122, 0);
LABEL_15:
  __break(1u);
  return result;
}

void sub_1000164E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    v4 = sub_100010F40(&qword_100091BD0);
    v5 = (_QWORD *)sub_100014AC4(v4, v2 + 32);
    v6 = j__malloc_size(v5);
    v5[2] = a1;
    v5[3] = 2 * v6 - 64;
  }
  sub_100005E8C();
}

void sub_100016544(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v7 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_100016B5C(v7);
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_100016B5C(v6);
  }
  sub_100005E8C();
}

char *sub_100016598(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100010F40(&qword_100091BD0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100016730(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001666C(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10001666C(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_100016730(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_1000167B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000167F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100016834()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100016858()
{
  return sub_1000168B0(48);
}

uint64_t sub_100016860(uint64_t a1)
{
  uint64_t v1;

  return sub_100015144(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_10001686C()
{
  unint64_t result;

  result = qword_100091BE8;
  if (!qword_100091BE8)
  {
    result = swift_getWitnessTable(&unk_1000719D8, &type metadata for RemoteDisplayInitiationRequest.RequestError);
    atomic_store(result, (unint64_t *)&qword_100091BE8);
  }
  return result;
}

uint64_t sub_1000168A8()
{
  return sub_1000168B0(40);
}

uint64_t sub_1000168B0(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000168E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000158C0(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(_QWORD))(v3 + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for RemoteDisplayInitiationRequest.RequestError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

_QWORD *initializeWithTake for RemoteDisplayInitiationRequest.RequestError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDisplayInitiationRequest.RequestError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RemoteDisplayInitiationRequest.RequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100016AF0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100016B08(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteDisplayInitiationRequest.RequestError()
{
  return &type metadata for RemoteDisplayInitiationRequest.RequestError;
}

uint64_t sub_100016B3C()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_100016B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 104, v5, v4, a4);
}

unint64_t sub_100016B5C(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_100016B74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100015FFC(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_100016B80()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091BF8);
  sub_100006CAC(v0, (uint64_t)qword_100091BF8);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD00000000000001BLL, 0x800000010006EE60);
}

uint64_t sub_100016C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0;
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_retain(*(_QWORD *)(v1 + 16));
    CompanionLinkClient.cancel()();
    swift_release(v2);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return v1;
}

uint64_t sub_100016C54()
{
  uint64_t v0;

  sub_100016C00();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CompanionLinkDeviceDetector()
{
  return objc_opt_self(_TtC12SidecarRelay27CompanionLinkDeviceDetector);
}

uint64_t sub_100016C94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100017994();
  CompanionLinkClient.localDevice.getter(a1);
  return swift_release(v1);
}

void sub_100016CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (*(_BYTE *)(v0 + 24) == 1)
  {
    sub_100017994();
    CompanionLinkClient.cancel()();
    swift_release(v0);
    type metadata accessor for CompanionLinkClient();
    CompanionLinkClient.__allocating_init()();
    v1 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v2;
    swift_release(v1);
    *(_BYTE *)(v0 + 24) = 0;
  }
  else
  {
    if (qword_100091278 != -1)
      swift_once(&qword_100091278, sub_100016B80);
    v3 = sub_100012DA8();
    v4 = sub_100006CAC(v3, (uint64_t)qword_100091BF8);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)sub_100006D24(2);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "The network device detector has not been started.  Will not stop.", v6, 2u);
      sub_100006D04((uint64_t)v6);
    }

  }
}

void sub_100016DD0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = sub_100017974();
  sub_100013118();
  __chkstk_darwin(v6);
  sub_100012DF0();
  v9 = v8 - v7;
  v10 = sub_100010F40(&qword_100091D28);
  sub_100013118();
  __chkstk_darwin(v11);
  sub_10001795C();
  RapportEndpoint.idsDeviceIdentifier.getter(v5, (uint64_t)&protocol witness table for CompanionLinkDevice);
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v14);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v17 = *(int *)(v10 + 48);
    sub_1000167B4(a1, v2);
    *(_BYTE *)(v2 + v17) = a2;
    PassthroughSubject.send(_:)(v2);
    sub_10001791C(v2);
  }
  else
  {
    if (qword_100091278 != -1)
      swift_once(&qword_100091278, sub_100016B80);
    v18 = sub_100012DA8();
    sub_100006CAC(v18, (uint64_t)qword_100091BF8);
    v19 = sub_1000167B4(a1, v9);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = sub_100006D24(22);
      v23 = sub_100006D24(64);
      v30 = v23;
      *(_DWORD *)v22 = 136446466;
      LOBYTE(v29) = a2;
      v24 = String.init<A>(describing:)(&v29, &type metadata for CompanionLinkDeviceDetector.DeviceObservationState);
      v26 = v25;
      v29 = sub_10001797C(v24, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v22 + 12) = 2082;
      v27 = CompanionLinkDevice.description.getter();
      v29 = sub_10001797C(v27, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 14, v22 + 22);
      sub_1000132F4();
      sub_1000167F8(v9);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "A device with a nil 'idsDeviceIdentifier' device was [%{public}s]: [%{public}s].  Ignoring.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      sub_100006D04(v23);
      sub_100006D04(v22);
    }
    else
    {
      sub_1000167F8(v9);
    }

  }
  sub_100012D28();
}

uint64_t getEnumTagSinglePayload for CompanionLinkDeviceDetector.DeviceObservationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDeviceDetector.DeviceObservationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000170FC + 4 * byte_100071A25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100017130 + 4 * byte_100071A20[v4]))();
}

uint64_t sub_100017130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100017140);
  return result;
}

uint64_t sub_10001714C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100017154);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100017158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompanionLinkDeviceDetector.DeviceObservationState()
{
  return &type metadata for CompanionLinkDeviceDetector.DeviceObservationState;
}

unint64_t sub_100017180()
{
  unint64_t result;

  result = qword_100091D20;
  if (!qword_100091D20)
  {
    result = swift_getWitnessTable(&unk_100071AC8, &type metadata for CompanionLinkDeviceDetector.DeviceObservationState);
    atomic_store(result, (unint64_t *)&qword_100091D20);
  }
  return result;
}

void sub_1000171BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100017974();
  sub_100013118();
  __chkstk_darwin(v4);
  sub_100012DF0();
  v7 = v6 - v5;
  v8 = sub_100012DA8();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001795C();
  if (qword_100091278 != -1)
    swift_once(&qword_100091278, sub_100016B80);
  v10 = sub_100006CAC(v8, (uint64_t)qword_100091BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v10, v8);
  v11 = sub_1000167B4(a1, v7);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {
    sub_1000167F8(v7);

    sub_1000132D4(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    goto LABEL_7;
  }
  v27 = v9;
  v14 = sub_100006D24(22);
  v26 = sub_100006D24(64);
  v31 = v26;
  *(_DWORD *)v14 = 136446466;
  v15 = CompanionLinkDevice.description.getter();
  v17 = v16;
  v29 = sub_10001797C(v15, v16);
  sub_100017984(v29, v18, v19, v14 + 12);
  swift_bridgeObjectRelease(v17);
  sub_1000167F8(v7);
  *(_WORD *)(v14 + 12) = 2082;
  if (!HIDWORD(a2))
  {
    v20 = RPDeviceChangeFlagsCopyDescription(a2);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v30 = sub_100015FFC(v21, v23, &v31);
    sub_100017984(v30, v24, v25, v14 + 22);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "CompanionLink device 'changed': [%{public}s].  Flags: [%{public}s]", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    sub_100006D04(v26);
    sub_100006D04(v14);

    sub_1000132D4(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
LABEL_7:
    sub_100016DD0(a1, 0);
    sub_100012D28();
    return;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

void sub_100017454(uint64_t a1, const char *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  sub_100017974();
  sub_100013118();
  __chkstk_darwin(v6);
  sub_100012DF0();
  v9 = v8 - v7;
  if (qword_100091278 != -1)
    swift_once(&qword_100091278, sub_100016B80);
  v10 = sub_100012DA8();
  sub_100006CAC(v10, (uint64_t)qword_100091BF8);
  v11 = sub_1000167B4(a1, v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v18 = a2;
    v14 = (uint8_t *)sub_100006D24(12);
    v15 = sub_100006D24(32);
    v20 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = CompanionLinkDevice.description.getter();
    v19 = sub_10001797C(v16, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
    sub_1000132F4();
    sub_1000167F8(v9);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    sub_100006D04(v15);
    sub_100006D04((uint64_t)v14);
  }
  else
  {
    sub_1000167F8(v9);
  }

  sub_100016DD0(a1, a3);
  sub_100012D28();
}

void sub_100017600(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (qword_100091278 != -1)
    swift_once(&qword_100091278, sub_100016B80);
  v5 = sub_100012DA8();
  v6 = sub_100006CAC(v5, (uint64_t)qword_100091BF8);
  oslog = Logger.logObject.getter(v6);
  v7 = a2();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)sub_100006D24(2);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, a3, v8, 2u);
    sub_100006D04((uint64_t)v8);
  }

}

void sub_1000176C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100017974();
  sub_100013118();
  __chkstk_darwin(v2);
  sub_100012DF0();
  v5 = v4 - v3;
  if (qword_100091278 != -1)
    swift_once(&qword_100091278, sub_100016B80);
  v6 = sub_100012DA8();
  sub_100006CAC(v6, (uint64_t)qword_100091BF8);
  v7 = sub_1000167B4(a1, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)sub_100006D24(12);
    v11 = sub_100006D24(32);
    v15 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = CompanionLinkDevice.description.getter();
    v14 = sub_100015FFC(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    sub_1000132F4();
    sub_1000167F8(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "CompanionLink local device changed: [%{public}s]", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    sub_100006D04(v11);
    sub_100006D04((uint64_t)v10);
  }
  else
  {
    sub_1000167F8(v5);
  }

}

void sub_10001785C(uint64_t a1)
{
  sub_100017454(a1, "CompanionLink device 'found': [%{public}s]", 1);
}

void sub_10001787C(uint64_t a1)
{
  sub_100017454(a1, "CompanionLink device 'lost': [%{public}s]", 2);
}

void sub_10001789C(uint64_t a1)
{
  sub_100017600(a1, (uint64_t (*)(void))&static os_log_type_t.debug.getter, "CompanionLink disconnected.");
}

void sub_1000178C0(uint64_t a1)
{
  sub_100017600(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "CompanionLinkClient's operation has been interrupted.");
}

void sub_1000178E4(uint64_t a1)
{
  sub_100017600(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "CompanionLinkClient's operation has been invalidated.");
}

void sub_100017908(uint64_t a1)
{
  sub_1000176C8(a1);
}

uint64_t sub_10001791C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100010F40(&qword_100091D28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100017974()
{
  return type metadata accessor for CompanionLinkDevice(0);
}

uint64_t sub_10001797C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100015FFC(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_100017984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v4, v5, a4);
}

uint64_t sub_100017994()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000179A0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091D30);
  sub_100006CAC(v0, (uint64_t)qword_100091D30);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000021, 0x800000010006EF20);
}

_QWORD *sub_100017A1C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return v0;
}

uint64_t sub_100017A48()
{
  uint64_t v0;

  sub_100017A1C();
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for CompanionLinkDeviceDiscoveryProxy()
{
  return objc_opt_self(_TtC12SidecarRelay33CompanionLinkDeviceDiscoveryProxy);
}

Swift::Void __swiftcall OSActivity.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  if (*(_QWORD *)(v0 + 16))
  {
    sub_100018088(v0 + 24, (uint64_t)v3);
    os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
    sub_10001336C(v1);
    v2 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = 0;
    swift_unknownObjectRelease(v2);
  }
}

uint64_t sub_100017AD8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091E60);
  sub_100006CAC(v0, (uint64_t)qword_100091E60);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0x697669746341534FLL, 0xEA00000000007974);
}

void sub_100017B50(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _BYTE v11[24];

  v5 = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  v6 = sub_100017BD0(a1, (void *)&_mh_execute_header, a2, a3, a4);
  v7 = v4[2];
  v4[2] = v6;
  swift_unknownObjectRelease(v7);
  v8 = v4[2];
  if (v8)
  {
    sub_100018088((uint64_t)(v5 + 3), (uint64_t)v11);
    v9 = swift_unknownObjectRetain(v8);
    os_activity_scope_enter(v9, (os_activity_scope_state_t)(v5 + 3));
    sub_10001336C(v10);
    swift_unknownObjectRelease(v8);
  }
  sub_100018094();
}

unint64_t sub_100017BD0@<X0>(unint64_t description@<X0>, void *dso@<X3>, uint64_t a3@<X1>, uint64_t a4@<X2>, unint64_t a5@<X8>)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  os_activity_t v11;
  char descriptiona[8];

  if ((a4 & 1) == 0)
  {
    if (description)
    {
      sub_100017E80((char *)description, dso, description, a3, a4, (os_activity_t *)descriptiona);
      return *(_QWORD *)descriptiona;
    }
    __break(1u);
    goto LABEL_13;
  }
  a5 = HIDWORD(description);
  if (HIDWORD(description))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (description >> 11 == 27)
  {
LABEL_22:
    __break(1u);
    return description;
  }
  LODWORD(a5) = WORD1(description);
  if (WORD1(description) > 0x10u)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((description & 0xFFFFFF80) != 0)
  {
LABEL_15:
    v6 = (description & 0x3F) << 8;
    v7 = (v6 | (description >> 6)) + 33217;
    v8 = (v6 | (description >> 6) & 0x3F) << 8;
    v9 = (((v8 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
    v10 = (v8 | (description >> 12)) + 8487393;
    if ((_DWORD)a5)
      v5 = v9;
    else
      v5 = v10;
    if (description < 0x800)
      v5 = v7;
    goto LABEL_10;
  }
  if (description > 0xFF)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (description + 1);
LABEL_10:
  *(_QWORD *)descriptiona = (v5 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v5) >> 3)) & 7)));
  sub_100017E80(descriptiona, dso, description, a3, a4, &v11);
  return (unint64_t)v11;
}

void OSActivity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = v0;
  if (*(_QWORD *)(v0 + 16))
  {
    if (qword_100091288 != -1)
      swift_once(&qword_100091288, sub_100017AD8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100006CAC(v2, (uint64_t)qword_100091E60);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      swift_slowDealloc(v6, -1, -1);
    }

    sub_100018088(v1 + 24, (uint64_t)v10);
    os_activity_scope_leave((os_activity_scope_state_t)(v1 + 24));
    sub_10001336C(v7);
    v8 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    swift_unknownObjectRelease(v8);
    v9 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v9 = 0;
  }
  swift_unknownObjectRelease(v9);
  sub_100018094();
}

uint64_t OSActivity.__deallocating_deinit()
{
  uint64_t v0;

  OSActivity.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100017E58()
{
  qword_100091E78 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

os_activity_t sub_100017E80@<X0>(char *description@<X0>, void *dso@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, os_activity_t *a6@<X8>)
{
  os_activity_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (dso && description)
  {
    if (qword_100091290 != -1)
      swift_once(&qword_100091290, sub_100017E58);
    result = _os_activity_create(dso, description, (os_activity_t)qword_100091E78, OS_ACTIVITY_FLAG_DEFAULT);
  }
  else
  {
    if (qword_100091288 != -1)
      swift_once(&qword_100091288, sub_100017AD8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100006CAC(v13, (uint64_t)qword_100091E60);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = StaticString.description.getter(a3, a4, a5);
      v21 = v20;
      v22 = sub_100015FFC(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to create OS Activity [%s].", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    result = 0;
  }
  *a6 = result;
  return result;
}

uint64_t type metadata accessor for OSActivity()
{
  return objc_opt_self(_TtC12SidecarRelay10OSActivity);
}

uint64_t sub_100018088(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_1000180A4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SidecarRelayDelegateLoader()
{
  return objc_opt_self(_TtC12SidecarRelay26SidecarRelayDelegateLoader);
}

void sub_1000180D4(uint64_t (*a1)(void), uint64_t a2, NSObject *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  id v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v8 = a1();
  v9 = (void *)_convertErrorToNSError(_:)(v8);
  swift_errorRelease(v8);
  v10 = objc_msgSend(v9, "localizedDescription");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v143 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(27, 1);
  v144 = v14;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = a4;
  v16._object = a5;
  String.append(_:)(v16);
  v17._object = (void *)0x800000010006EFE0;
  v17._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v17);
  v19 = v143;
  v18 = v144;
  v133 = v9;
  swift_bridgeObjectRetain(v144);
  v20 = swift_bridgeObjectRetain(v13);
  v21 = a3;
  Logger.logObject.getter(v20);
  v22 = sub_10001884C();
  if (os_log_type_enabled(a3, v22))
  {
    v23 = sub_100006D24(42);
    v125 = sub_100006D24(96);
    v143 = v125;
    *(_DWORD *)v23 = 136446979;
    swift_bridgeObjectRetain(v18);
    v142 = sub_100015FFC(v19, v18, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v23 + 4, v23 + 12);
    sub_100012DBC(v18);
    *(_WORD *)(v23 + 12) = 2082;
    v24 = objc_msgSend(v133, "domain");
    v25 = v11;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v116 = (uint64_t)a5;
    v28 = v27;

    v142 = sub_100018854(v26, v29, &v143);
    v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v23 + 14, v23 + 22);
    sub_10001880C(v30, v31, v32, v33, v34, v35, v36, v37, v116, v125, v133);
    sub_10001880C(v38, v39, v40, v41, v42, v43, v44, v45, v117, v126, v134);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v23 + 22) = 2048;
    v46 = objc_msgSend(v135, "code");
    sub_10001880C((int)v46, v47, v48, v49, v50, v51, v52, v53, v118, v127, v135);
    v142 = (uint64_t)v46;
    v60 = sub_100018824(v54, v55, v56, v23 + 32, v57, v58, v59);
    sub_10001880C(v60, v61, v62, v63, v64, v65, v66, v67, v119, v128, v136);
    *(_WORD *)(v23 + 32) = 2081;
    swift_bridgeObjectRetain(v13);
    v142 = sub_100015FFC(v25, v13, &v143);
    sub_100018824(v142, v68, v69, v23 + 42, v70, v71, v72);
    sub_100012DBC(v13);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v23, 0x2Au);
    sub_10001885C(v73, v74, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v129);
    sub_100006D04(v23);
    swift_bridgeObjectRelease(v120);

    sub_10001880C(v75, v76, v77, v78, v79, v80, v81, v82, v120, v129, v137);
  }
  else
  {
    swift_bridgeObjectRelease(a5);
    sub_100012DD8(v13);
    sub_100012DD8(v144);

    sub_10001880C(v83, v84, v85, v86, v87, v88, v89, v90, v115, v124, v133);
    sub_10001880C(v91, v92, v93, v94, v95, v96, v97, v98, v121, v130, v138);
    sub_10001880C(v99, v100, v101, v102, v103, v104, v105, v106, v122, v131, v139);
    sub_10001880C(v107, v108, v109, v110, v111, v112, v113, v114, v123, v132, v140);

  }
}

void sub_1000183F4(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  id v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  uint64_t v222;
  uint64_t v223;

  v4 = v3;
  v6 = a3();
  v7 = (void *)_convertErrorToNSError(_:)(v6);
  swift_errorRelease(v6);
  v8 = objc_msgSend(v7, "localizedDescription");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = a1();
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    v206 = v7;
    swift_bridgeObjectRetain(v15);
    v16 = sub_1000133A4();
    v17 = v4;
    Logger.logObject.getter(v16);
    v18 = sub_10001884C();
    if (sub_100006D2C(v18))
    {
      v19 = sub_100006D24(42);
      v191 = sub_100006D24(96);
      v223 = v191;
      *(_DWORD *)v19 = 136446979;
      swift_bridgeObjectRetain(v15);
      v222 = sub_100015FFC(v14, v15, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v19 + 4, v19 + 12);
      v20 = sub_100012DBC(v15);
      *(_WORD *)(v19 + 12) = 2082;
      v27 = sub_100018844(v20, "domain", v21, v22, v23, v24, v25, v26, v191, v206);
      v28 = v9;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      v222 = sub_100015FFC(v29, v31, &v223);
      v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v19 + 14, v19 + 22);
      sub_100018804(v32, v33, v34, v35, v36, v37, v38, v39, v192, v207);
      sub_100018804(v40, v41, v42, v43, v44, v45, v46, v47, v193, v208);
      v48 = swift_bridgeObjectRelease(v31);
      *(_WORD *)(v19 + 22) = 2048;
      v55 = sub_100018844(v48, "code", v49, v50, v51, v52, v53, v54, v194, v209);
      sub_100018804((int)v55, v56, v57, v58, v59, v60, v61, v62, v195, v210);
      v222 = (uint64_t)v55;
      v68 = sub_100018834(v63, v64, v65, v19 + 32, v66, v67);
      sub_100018804(v68, v69, v70, v71, v72, v73, v74, v75, v196, v211);
      *(_WORD *)(v19 + 32) = 2081;
      sub_1000133A4();
      v222 = sub_100018854(v28, v76, &v223);
      sub_100018834(v222, v77, v78, v19 + 42, v79, v80);
      sub_100012DBC(v11);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v7, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v19, 0x2Au);
      sub_10001885C(v81, v82, (uint64_t)&type metadata for Any + 8);
      v83 = v197;
LABEL_6:
      sub_100006D04(v83);
      sub_100006D04(v19);

      sub_100018804(v149, v150, v151, v152, v153, v154, v155, v156, v197, v212);
      return;
    }
    sub_100012DD8(v11);
    v157 = v15;
  }
  else
  {
    v206 = v7;
    v84 = sub_1000133A4();
    v17 = v4;
    Logger.logObject.getter(v84);
    v85 = sub_10001884C();
    if (sub_100006D2C(v85))
    {
      v19 = sub_100006D24(32);
      v86 = sub_100006D24(64);
      v223 = v86;
      *(_DWORD *)v19 = 136446723;
      v93 = sub_100018844(v86, "domain", v87, v88, v89, v90, v91, v92, v190, v206);
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      v96 = v95;

      v222 = sub_100015FFC(v94, v96, &v223);
      v101 = sub_100018814(v222, v97, v98, v19 + 12, v99, v100);
      sub_100018804(v101, v102, v103, v104, v105, v106, v107, v108, v198, v213);
      sub_100018804(v109, v110, v111, v112, v113, v114, v115, v116, v199, v214);
      v117 = swift_bridgeObjectRelease(v96);
      *(_WORD *)(v19 + 12) = 2048;
      LODWORD(v94) = sub_100018844(v117, "code", v118, v119, v120, v121, v122, v123, v200, v215);
      sub_100018804(v94, v124, v125, v126, v127, v128, v129, v130, v201, v216);
      v136 = sub_100018814(v131, v132, v133, v19 + 22, v134, v135);
      sub_100018804(v136, v137, v138, v139, v140, v141, v142, v143, v202, v217);
      *(_WORD *)(v19 + 22) = 2081;
      sub_1000133A4();
      v222 = sub_100018854(v9, v144, &v223);
      sub_100018814(v222, v145, v146, v19 + 32, v147, v148);
      sub_100012DBC(v11);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v7, "%{public}s (%ld) %{private}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      v83 = v86;
      goto LABEL_6;
    }
    v157 = v11;
  }
  sub_100012DD8(v157);

  sub_100018804(v158, v159, v160, v161, v162, v163, v164, v165, v190, v206);
  sub_100018804(v166, v167, v168, v169, v170, v171, v172, v173, v203, v218);
  sub_100018804(v174, v175, v176, v177, v178, v179, v180, v181, v204, v219);
  sub_100018804(v182, v183, v184, v185, v186, v187, v188, v189, v205, v220);

}

void sub_100018804(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

}

void sub_10001880C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

}

uint64_t sub_100018814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v6, a4);
}

uint64_t sub_100018824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v8, v7, a4);
}

uint64_t sub_100018834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v6, a4);
}

id sub_100018844(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2);
}

uint64_t sub_10001884C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100018854(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100015FFC(a1, v3, a3);
}

uint64_t sub_10001885C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 3, a3);
}

uint64_t sub_100018868(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v7 = 4;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
      }
      else
      {
        v8 = *(_QWORD *)(v5 + 8 * v7);
        swift_retain(v8);
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v10 = type metadata accessor for RapportRemoteDisplayDevice();
      RapportEndpoint.idsDeviceIdentifier.getter(v10, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
      if (v11 == a2 && v12 == a3)
      {
        swift_bridgeObjectRelease(v5);
        v5 = a3;
LABEL_16:
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(v5);
        return v8;
      }
      v14 = v12;
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0);
      swift_bridgeObjectRelease(v14);
      if ((v15 & 1) != 0)
        goto LABEL_16;
      swift_release(v8);
      ++v7;
      if (v9 == v6)
        goto LABEL_22;
    }
    __break(1u);
LABEL_18:
    if (v5 < 0)
      v16 = v5;
    else
      v16 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
  }
LABEL_22:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_1000189F4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100091FD0);
  sub_100006CAC(v0, (uint64_t)qword_100091FD0);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000024, 0x8000000100071BE0);
}

void sub_100018A78(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, id))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (qword_100091298 != -1)
    swift_once(&qword_100091298, sub_1000189F4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006CAC(v4, (uint64_t)qword_100091FD0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "This platform does not support readiness requests.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v11 = sub_10001F230(v9, v10, -999, 0, 0, 0);
  a3(0, 0, v11);

}

void sub_100018BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v12 = *v5;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = sub_10001A140(v13);
  __chkstk_darwin(v14);
  v22 = sub_10001A0F0();
  v15 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_10001A10C();
  v16 = (_QWORD *)sub_100014AC4((uint64_t)&unk_100086668, 56);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = v12;
  aBlock[4] = sub_10001A090;
  v25 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100086680;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  v18 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v18);
  v23 = _swiftEmptyArrayStorage;
  v19 = sub_100005CC0((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100010F40((uint64_t *)&unk_100092170);
  v21 = sub_10001A0A0((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v6, v17);
  _Block_release(v17);
  sub_10001A12C();
  sub_10001A158(*(uint64_t (**)(uint64_t, _QWORD))(v15 + 8));
  swift_release(v25);
  sub_100012D28();
}

void sub_100018D6C(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100021BF8();
  v7 = v6;
  swift_bridgeObjectRetain(a2);
  v8 = sub_100018868(v7, a1, a2);
  swift_bridgeObjectRelease(v7);
  if (v8)
  {
    sub_100006C74(0, &qword_100091908, SidecarDevice_ptr);
    v9 = swift_retain(v8);
    v10 = sub_100056A20(v9);
    if (v10)
    {
      v11 = v10;
      if (qword_100091298 != -1)
        swift_once(&qword_100091298, sub_1000189F4);
      v12 = type metadata accessor for Logger(0);
      sub_100006CAC(v12, (uint64_t)qword_100091FD0);
      v13 = v11;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = a3;
        v17 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v16 = 138477827;
        v44 = (uint64_t)v13;
        v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 4, v16 + 12);
        *v17 = v11;

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully received a readiness ping. We should be able to start Sidecar with: [%{private}@]", v16, 0xCu);
        v19 = sub_100010F40((uint64_t *)&unk_100092180);
        swift_arrayDestroy(v17, 1, v19);
        v20 = v17;
        a3 = v41;
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

      }
      v36 = 0;
    }
    else
    {
      if (qword_100091298 != -1)
        swift_once(&qword_100091298, sub_1000189F4);
      v28 = type metadata accessor for Logger(0);
      sub_100006CAC(v28, (uint64_t)qword_100091FD0);
      v29 = swift_bridgeObjectRetain_n(a2, 2);
      v30 = Logger.logObject.getter(v29);
      v32 = static os_log_type_t.error.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = v8;
        v34 = swift_slowAlloc(32, -1);
        v44 = v34;
        *(_DWORD *)v33 = 136380675;
        swift_bridgeObjectRetain(a2);
        v43 = sub_100015FFC(a1, a2, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v30, v32, "Could not convert device with an IDS identifier of [%{private}s]. Responding with Error.", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        v8 = v42;
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      v13 = sub_10001F230(v39, v40, -999, 0, 0, 0);
      v36 = v13;
    }
    a3(0, 0, v36);
    swift_release(v8);
  }
  else
  {
    if (qword_100091298 != -1)
      swift_once(&qword_100091298, sub_1000189F4);
    v21 = type metadata accessor for Logger(0);
    sub_100006CAC(v21, (uint64_t)qword_100091FD0);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v44 = v27;
      *(_DWORD *)v26 = 136380675;
      swift_bridgeObjectRetain(a2);
      v43 = sub_100015FFC(a1, a2, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Could not find a device with an IDS identifier of [%{private}s]. Responding with Error.", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v13 = sub_10001F230(v37, v38, -200, 0, 0, 0);
    a3(0, 0, v13);
  }

}

void sub_10001937C(uint64_t a1, uint64_t a2)
{
  sub_1000195B8(a1, a2, (uint64_t)&unk_100086618, (uint64_t)sub_10001A058, (uint64_t)&unk_100086630);
}

uint64_t sub_100019398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    swift_beginAccess(result + 24, v29, 0, 0);
    v8 = *(_QWORD *)(v7 + 24);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    swift_release(v7);
    sub_10002188C(a2, a3, v8);
    v10 = v9;
    swift_bridgeObjectRelease(a3);
    result = swift_bridgeObjectRelease(v8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = type metadata accessor for RemoteDisplayReadinessRequestHandler.ExpiringResponse(0);
        v13 = *(_QWORD *)(v12 - 8);
        v14 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
        v25 = v10;
        swift_bridgeObjectRetain(v10);
        swift_beginAccess(v5, v28, 0, 0);
        v15 = *(_QWORD *)(v13 + 72);
        do
        {
          v16 = *(int *)(v12 + 20);
          if (*(_QWORD *)(v14 + v16))
          {
            swift_getObjectType(*(_QWORD *)(v14 + v16));
            OS_dispatch_source.cancel()();
          }
          v17 = (uint64_t *)(v14 + *(int *)(v12 + 24));
          v18 = *v17;
          if (*v17)
          {
            v19 = v17[1];
            Strong = swift_weakLoadStrong(v5);
            if (Strong)
            {
              v21 = Strong;
              swift_retain(v19);
              sub_100018BD4(a2, a3, v18, v19);
              sub_1000121B4(v18, v19);
              swift_release(v21);
            }
          }
          v14 += v15;
          --v11;
        }
        while (v11);
        v10 = v25;
        swift_bridgeObjectRelease(v25);
      }
      swift_bridgeObjectRelease(v10);
      swift_beginAccess(v5, v27, 0, 0);
      result = swift_weakLoadStrong(v5);
      if (result)
      {
        v22 = result;
        swift_beginAccess(result + 24, v26, 33, 0);
        sub_10003C8D4();
        v24 = v23;
        swift_endAccess(v26);
        swift_release(v22);
        return swift_bridgeObjectRelease(v24);
      }
    }
  }
  return result;
}

void sub_10001959C(uint64_t a1, uint64_t a2)
{
  sub_1000195B8(a1, a2, (uint64_t)&unk_1000865C8, (uint64_t)sub_10001A004, (uint64_t)&unk_1000865E0);
}

void sub_1000195B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = sub_10001A140(v13);
  __chkstk_darwin(v14);
  v25 = sub_10001A0F0();
  v15 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_10001A10C();
  v16 = sub_100014AC4((uint64_t)&unk_1000865A0, 24);
  swift_weakInit(v16 + 16, v6);
  v17 = (_QWORD *)sub_100014AC4(a3, 40);
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = a4;
  v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = a5;
  v18 = _Block_copy(aBlock);
  swift_retain(v16);
  v19 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_100005CC0((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100010F40((uint64_t *)&unk_100092170);
  v22 = sub_10001A0A0((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v7, v18);
  _Block_release(v18);
  sub_10001A12C();
  sub_10001A158(*(uint64_t (**)(uint64_t, _QWORD))(v15 + 8));
  v23 = v28;
  swift_release(v16);
  swift_release(v23);
  sub_100012D28();
}

uint64_t sub_100019768(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    swift_beginAccess(result + 24, v6, 33, 0);
    sub_10003C8D4();
    v5 = v4;
    swift_endAccess(v6);
    swift_release(v3);
    return swift_bridgeObjectRelease(v5);
  }
  return result;
}

uint64_t sub_100019804()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_100019828()
{
  uint64_t v0;

  sub_100019804();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RemoteDisplayReadinessRequestHandler()
{
  return objc_opt_self(_TtC12SidecarRelay36RemoteDisplayReadinessRequestHandler);
}

uint64_t *sub_100019868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    swift_unknownObjectRetain();
    if (!v11)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
      return a1;
    }
    v12 = v10[1];
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_100019918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = swift_unknownObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  if (*v6)
    return swift_release(v6[1]);
  return result;
}

uint64_t sub_100019980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  swift_unknownObjectRetain();
  if (v10)
  {
    v11 = v9[1];
    *v8 = v10;
    v8[1] = v11;
    swift_retain(v11);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  return a1;
}

uint64_t sub_100019A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *(_QWORD *)(a2 + v9);
  if (!v12)
  {
    if (v13)
    {
      v16 = *(_QWORD *)(v11 + 8);
      *v10 = v13;
      v10[1] = v16;
      swift_retain(v16);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v10 = *(_OWORD *)v11;
    return a1;
  }
  if (!v13)
  {
    swift_release(v10[1]);
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(v11 + 8);
  v15 = v10[1];
  *v10 = v13;
  v10[1] = v14;
  swift_retain(v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_100019AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  if (*v9)
  {
    v11 = v9[1];
    *v8 = v10;
    v8[1] = v11;
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  return a1;
}

uint64_t sub_100019B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_unknownObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *v11;
  if (!v12)
  {
    if (v13)
    {
      v16 = v11[1];
      *v10 = v13;
      v10[1] = v16;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v10 = *(_OWORD *)v11;
    return a1;
  }
  if (!v13)
  {
    swift_release(v10[1]);
    goto LABEL_7;
  }
  v14 = v11[1];
  v15 = v10[1];
  *v10 = v13;
  v10[1] = v14;
  swift_release(v15);
  return a1;
}

uint64_t sub_100019C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100019C10);
}

uint64_t sub_100019C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = type metadata accessor for UUID(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_1000124B8(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t sub_100019C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019CA0);
}

uint64_t sub_100019CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for UUID(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_1000124AC(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for RemoteDisplayReadinessRequestHandler.ExpiringResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_100092128;
  if (!qword_100092128)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoteDisplayReadinessRequestHandler.ExpiringResponse);
  return result;
}

uint64_t sub_100019D4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_100071C60;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100019DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v16);
  v17 = &_swiftEmptyArrayStorage;
  v11 = sub_100005CC0(&qword_100092190, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100010F40(&qword_100092198);
  v13 = sub_10001A0A0((unint64_t *)&unk_1000921A0, &qword_100092198);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v6, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x800000010006F0A0, v10, v8, v5, 0);
  v14 = sub_100010F40(&qword_100093020);
  *(_QWORD *)(v1 + 24) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, v14, &protocol witness table for String);
  return v1;
}

void sub_100019FC8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, id))
{
  sub_100018A78(a1, a2, a3);
}

uint64_t sub_100019FDC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001A004()
{
  uint64_t v0;

  return sub_100019768(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10001A010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001A020(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001A02C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001A058()
{
  uint64_t *v0;

  return sub_100019398(v0[2], v0[3], v0[4]);
}

uint64_t sub_10001A064()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10001A090()
{
  uint64_t v0;

  sub_100018D6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 32));
}

uint64_t sub_10001A0A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100010FE0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A0F0()
{
  return type metadata accessor for DispatchQoS(0);
}

void sub_10001A10C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = *(_QWORD *)(v0 + 16);
}

uint64_t sub_10001A12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_10001A140(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_10001A158@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 152));
}

uint64_t sub_10001A164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  unint64_t v31;

  v28 = a2;
  v4 = type metadata accessor for CompanionLinkDevice(0);
  v27 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v31 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100045614(v30, a1);
  v10 = v30[0];
  v11 = v30[3];
  v12 = v30[4];
  v25 = v30[1];
  v26 = (unint64_t)(v30[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_15;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v26)
      goto LABEL_27;
    v17 = *(_QWORD *)(v25 + 8 * v16);
    if (!v17)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v26)
        goto LABEL_27;
      v17 = *(_QWORD *)(v25 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v11 + 3;
      if (v11 + 3 >= v26)
        goto LABEL_27;
      v17 = *(_QWORD *)(v25 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v11 + 4;
      if (v11 + 4 >= v26)
        goto LABEL_27;
      v17 = *(_QWORD *)(v25 + 8 * v18);
      if (v17)
      {
LABEL_13:
        v16 = v18;
      }
      else
      {
        v16 = v11 + 5;
        if (v11 + 5 >= v26)
          goto LABEL_27;
        v17 = *(_QWORD *)(v25 + 8 * v16);
        if (!v17)
        {
          v23 = v11 + 6;
          while (v23 < v26)
          {
            v17 = *(_QWORD *)(v25 + 8 * v23++);
            if (v17)
            {
              v16 = v23 - 1;
              goto LABEL_14;
            }
          }
LABEL_27:
          swift_release(v10);
          v24 = v31;
          swift_release(v28);
          return v24;
        }
      }
    }
LABEL_14:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
LABEL_15:
    sub_1000167B4(*(_QWORD *)(v10 + 56) + *(_QWORD *)(v27 + 72) * v15, (uint64_t)v9);
    sub_10001C548((uint64_t)v9, (uint64_t)v7);
    sub_10001A828((uint64_t)v7, v28, &v29);
    result = sub_1000167F8((uint64_t)v7);
    if (v2)
    {
      swift_release(v10);
      v24 = v31;
      swift_release(v28);
      swift_bridgeObjectRelease(v24);
      return v24;
    }
    v19 = v29;
    if (v29)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(result);
      v21 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v20 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v21 >= v20 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      result = specialized Array._endMutation()(v22);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A404()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_10009A178);
  sub_100006CAC(v0, (uint64_t)qword_10009A178);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000022, 0x800000010006F190);
}

_QWORD *sub_10001A480(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[5] = &_swiftEmptySetSingleton;
  v2[6] = a2;
  swift_retain(a1);
  swift_unknownObjectRetain(a2);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  v2[3] = &_swiftEmptyDictionarySingleton;
  v2[4] = &_swiftEmptyDictionarySingleton;
  v2[7] = &_swiftEmptySetSingleton;
  swift_release(a1);
  swift_unknownObjectRelease(a2);
  return v2;
}

uint64_t sub_10001A4F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain(v4);
  LOBYTE(a1) = sub_10001C158(a1, v4);
  result = swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
  {
    if (qword_1000912A0 != -1)
      swift_once(&qword_1000912A0, sub_10001A404);
    v6 = type metadata accessor for Logger(0);
    sub_100006CAC(v6, (uint64_t)qword_10009A178);
    v7 = swift_retain_n(v2, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v20 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = *(_QWORD *)(v2 + 56);
      v13 = type metadata accessor for UUID(0);
      v14 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = swift_bridgeObjectRetain(v12);
      v16 = Set.description.getter(v15, v13, v14);
      v18 = v17;
      swift_bridgeObjectRelease(v12);
      v19 = sub_100015FFC(v16, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "The set of connected remote display sessions has changed to [%s]", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    return sub_10001C090();
  }
  return result;
}

uint64_t sub_10001A714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  sub_10001A4F0(v2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10001A740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = sub_10001C928();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100012DF0();
  v6 = (uint64_t *)(v5 - v4);
  sub_100012E50(v7, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  *v6 = sub_10001C900();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v10 = *(_QWORD *)(v1 + 24);
    swift_retain(v1);
    v11 = swift_bridgeObjectRetain(v10);
    v12 = sub_10001A164(v11, v1);
    sub_1000132F4();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001A828(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CompanionLinkDevice(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v38[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v38[-1] - v14;
  v16 = sub_100006C74(0, &qword_100091908, SidecarDevice_ptr);
  sub_1000167B4(a1, (uint64_t)v15);
  v17 = sub_100057030((uint64_t)v15, v16);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v20 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(v20);
    sub_100026348();
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
    {
      v23 = 2;
    }
    else
    {
      swift_beginAccess(a2 + 32, v38, 0, 0);
      v33 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v33);
      sub_100021890((uint64_t)v9, v33);
      v35 = v34;
      swift_bridgeObjectRelease(v33);
      swift_release(v35);
      v23 = v35 != 0;
    }
    v36 = objc_msgSend(objc_allocWithZone((Class)SidecarDisplaySendingDeviceSessionState), "initWithDevice:sessionState:visualDetectability:", v18, v23, 0);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    if (qword_1000912A0 != -1)
      swift_once(&qword_1000912A0, sub_10001A404);
    v24 = type metadata accessor for Logger(0);
    sub_100006CAC(v24, (uint64_t)qword_10009A178);
    v25 = sub_1000167B4(a1, (uint64_t)v13);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v38[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = CompanionLinkDevice.description.getter();
      v32 = v31;
      v39 = sub_100015FFC(v30, v31, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v32);
      sub_1000167F8((uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Could not create SidecarDevice for device: [%s].", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000167F8((uint64_t)v13);
    }

    v36 = 0;
  }
  *a3 = v36;
}

void sub_10001AB78(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(void (*)(void), uint64_t, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  void (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  void (*v72)(void);
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(void);
  void (*v99)(void);
  os_log_type_t v100;
  void (*v101)(void);
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void (**v136)(uint64_t, uint64_t, char *);
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void (**v141)(void);
  void (*v142)(void);
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  void (*v146)(void);
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void (*v151)(void);
  void (*v152)(void);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(void);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(void);
  void (*v162)(void (*)(void), uint64_t, uint64_t);
  uint64_t v163;
  void (*v164)(void);
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[4];

  v6 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v6);
  sub_10001C898();
  v155 = v7;
  sub_10001C8E4();
  __chkstk_darwin(v8);
  sub_10001C8D8();
  v159 = v9;
  v160 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v160);
  sub_10001C898();
  v154 = v10;
  sub_10001C8E4();
  __chkstk_darwin(v11);
  v150 = (uint64_t)&v150 - v12;
  sub_10001C8E4();
  __chkstk_darwin(v13);
  v153 = (uint64_t)&v150 - v14;
  sub_10001C8E4();
  __chkstk_darwin(v15);
  sub_10001C8D8();
  v158 = v16;
  v17 = sub_10001322C();
  v167 = *(char **)(v17 - 8);
  v18 = (void (*)(void))*((_QWORD *)v167 + 8);
  __chkstk_darwin(v17);
  v161 = (void (*)(void))((char *)&v150 - (((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001C91C();
  __chkstk_darwin(v19);
  sub_10001C8D8();
  v156 = v20;
  sub_10001C91C();
  __chkstk_darwin(v21);
  sub_10001C8D8();
  v152 = v22;
  sub_10001C91C();
  __chkstk_darwin(v23);
  sub_10001C8D8();
  v151 = (void (*)(void))v24;
  sub_10001C91C();
  __chkstk_darwin(v25);
  v27 = (char *)&v150 - v26;
  v28 = sub_10001C928();
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_100012DF0();
  v32 = (uint64_t *)(v31 - v30);
  sub_100012E50(v33, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  *v32 = sub_10001C900();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v29 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v28);
  v34 = _dispatchPreconditionTest(_:)(v32);
  (*(void (**)(uint64_t *, uint64_t))(v29 + 8))(v32, v28);
  if ((v34 & 1) != 0)
  {
    v164 = a2;
    if (qword_1000912A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1000912A0, sub_10001A404);
LABEL_3:
  v35 = type metadata accessor for Logger(0);
  v36 = sub_100006CAC(v35, (uint64_t)qword_10009A178);
  v37 = v167;
  v38 = (void (*)(void (*)(void), uint64_t, uint64_t))*((_QWORD *)v167 + 2);
  v166 = a1;
  v162 = v38;
  v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v38)(v27, a1, v17);
  v163 = v36;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)sub_10001C7BC();
    v43 = sub_100006D24(32);
    v157 = a3;
    v44 = v43;
    v171[0] = v43;
    *(_DWORD *)v42 = 136315138;
    sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = sub_10001C914();
    v168 = sub_10001C908(v45, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v42 + 4, &v42[v36]);
    sub_1000132F4();
    v47 = (char *)*((_QWORD *)v167 + 1);
    v48 = v17;
    sub_10001C8C0((uint64_t)v27);
    sub_10001C890((void *)&_mh_execute_header, v40, v41, "Received a request to ask device with identifier [%s] to connect to this device and start a remote display session.", v42);
    sub_10001C888(v44, v49, (uint64_t)&type metadata for Any + 8);
    v50 = v44;
    a3 = v157;
    sub_100006D04(v50);
    sub_100006D04((uint64_t)v42);
  }
  else
  {
    v47 = (char *)*((_QWORD *)v37 + 1);
    v48 = v17;
    sub_10001C8C0((uint64_t)v27);
  }

  v51 = v165;
  v52 = (uint64_t)(v165 + 4);
  sub_100012DD0((uint64_t)(v165 + 4), (uint64_t)v171, 0);
  v53 = v51[4];
  swift_bridgeObjectRetain(v53);
  v54 = v166;
  sub_100021890(v166, v53);
  v56 = v55;
  sub_1000132F4();
  swift_release(v56);
  if (v56)
  {
    v18 = v161;
    v57 = v48;
    v162(v161, v54, v48);
    sub_10001C8F0();
    v58 = sub_10001C8F8();
    if (sub_10001C7E0(v58))
    {
      v59 = sub_10001C7BC();
      v167 = v47;
      v60 = v18;
      v18 = (void (*)(void))v59;
      v61 = sub_100006D24(32);
      v168 = v61;
      *(_DWORD *)v18 = 136315138;
      sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v62 = sub_10001C914();
      v64 = sub_10001C84C(v62, v63);
      sub_10001C830(v64);
      sub_1000132F4();
      ((void (*)(void (*)(void), uint64_t))v167)(v60, v57);
      sub_10001C7CC((void *)&_mh_execute_header, v65, v66, "A connection request to device with identifier [%s] is already in-flight.  Will not issue another connection request.");
      sub_10001C888(v61, v67, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v61);
      sub_100006D04((uint64_t)v18);
    }
    else
    {
      sub_10001C8C0((uint64_t)v18);
    }

    v82 = sub_10001C938();
    v83 = sub_10001C87C((uint64_t)&type metadata for RemoteDisplaySendingDevicesManager.ConnectionError, v82);
    *v84 = 0;
LABEL_23:
    ((void (*)(uint64_t))v18)(v83);
    sub_10001C940();
    goto LABEL_24;
  }
  v68 = v51[2];
  v69 = v159;
  sub_100016C94(v159);
  v70 = v160;
  v71 = sub_1000124B8(v69, 1, v160) == 1;
  v72 = (void (*)(void))v48;
  v73 = v69;
  if (v71)
  {
    sub_10001C508(v69);
    v74 = v156;
    v162((void (*)(void))v156, v166, v48);
    sub_10001C8F0();
    v75 = sub_10001C8F8();
    if (sub_10001C7E0(v75))
    {
      v18 = (void (*)(void))sub_10001C7BC();
      v76 = sub_100006D24(32);
      *(_DWORD *)v18 = 136315138;
      v167 = (char *)v18 + 4;
      v168 = v76;
      sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = sub_10001C914();
      v170 = sub_10001C84C(v77, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v167, (char *)v18 + v68);
      sub_1000132F4();
      sub_10001C8C0(v74);
      sub_10001C7CC((void *)&_mh_execute_header, v79, v80, "Could not find local CompanionLink device.  Will not issue a connection request to device with identifier [%s].");
      sub_10001C888(v76, v81, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v76);
      sub_100006D04((uint64_t)v18);
    }
    else
    {
      sub_10001C8C0(v74);
    }

    v110 = sub_10001C938();
    v83 = sub_10001C87C((uint64_t)&type metadata for RemoteDisplaySendingDevicesManager.ConnectionError, v110);
    *v111 = 1;
    goto LABEL_23;
  }
  v85 = v158;
  sub_10001C548(v73, v158);
  v86 = v85;
  RapportEndpoint.idsDeviceIdentifier.getter(v70, (uint64_t)&protocol witness table for CompanionLinkDevice);
  v89 = v88;
  v90 = HIBYTE(v88) & 0xF;
  if ((v88 & 0x2000000000000000) == 0)
    v90 = v87 & 0xFFFFFFFFFFFFLL;
  if (v90)
  {
    v159 = v87;
    v161 = v72;
    v157 = a3;
    v91 = v166;
    v92 = UUID.uuidString.getter(v87);
    v94 = v93;
    v95 = v51[3];
    swift_bridgeObjectRetain(v95);
    v96 = v92;
    v97 = v155;
    sub_1000218D8(v96, v94, v95);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v95);
    if (sub_1000124B8(v97, 1, v70) == 1)
    {
      swift_bridgeObjectRelease(v89);
      sub_10001C508(v97);
      v98 = v152;
      v99 = v161;
      v162(v152, v91, (uint64_t)v161);
      sub_10001C8F0();
      v100 = sub_10001C8F8();
      if (sub_10001C7E0(v100))
      {
        v101 = v98;
        v102 = (_DWORD *)sub_10001C7BC();
        v103 = sub_100006D24(32);
        v168 = v103;
        *v102 = 136315138;
        sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v104 = dispatch thunk of CustomStringConvertible.description.getter(v99);
        v106 = sub_10001C84C(v104, v105);
        sub_10001C830(v106);
        swift_bridgeObjectRelease(v101);
        ((void (*)(void (*)(void), void (*)(void)))v47)(v101, v99);
        sub_10001C7CC((void *)&_mh_execute_header, v107, v108, "Could not find the remote CompanionLink device with identifier [%s].  Will not issue a connection request.");
        sub_10001C888(v103, v109, (uint64_t)&type metadata for Any + 8);
        sub_100006D04(v103);
        sub_100006D04((uint64_t)v102);
      }
      else
      {
        ((void (*)(void (*)(void), void (*)(void)))v47)(v98, v99);
      }

      v146 = v164;
      v147 = v158;
      v148 = sub_10001C4CC();
      sub_10001C87C((uint64_t)&type metadata for RemoteDisplaySendingDevicesManager.ConnectionError, v148);
      *v149 = 3;
      v146();
      sub_10001C940();
      v143 = v147;
    }
    else
    {
      v121 = v153;
      sub_10001C548(v97, v153);
      v122 = v150;
      sub_1000167B4(v121, v150);
      v123 = type metadata accessor for RemoteDisplayInitiationRequest();
      swift_allocObject(v123, 48, 7);
      v124 = sub_100014B8C(v159, v89, v122);
      v125 = v51;
      v126 = v124;
      sub_100012DD0(v52, (uint64_t)&v168, 33);
      v127 = swift_retain(v126);
      sub_10003CCBC(v127, v91, v128, v129, v130, v131, v132, v133, v150, (uint64_t)v151);
      swift_endAccess(&v168);
      v134 = (uint64_t)v151;
      v135 = (char *)v161;
      v162(v151, v91, (uint64_t)v161);
      v136 = (void (**)(uint64_t, uint64_t, char *))v167;
      v137 = v167[80];
      v138 = (v137 + 24) & ~v137;
      v139 = ((unint64_t)v18 + v138 + 7) & 0xFFFFFFFFFFFFFFF8;
      v140 = swift_allocObject(&unk_1000866D0, v139 + 16, v137 | 7);
      *(_QWORD *)(v140 + 16) = v125;
      v136[4](v140 + v138, v134, v135);
      v141 = (void (**)(void))(v140 + v139);
      v142 = v157;
      *v141 = v164;
      v141[1] = v142;
      swift_retain(v125);
      swift_retain(v142);
      sub_100014D10((void (*)(void))sub_10001C5D8, v140);
      swift_release(v140);
      sub_10001C090();
      swift_release(v126);
      sub_1000167F8(v121);
      v143 = v158;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v88);
    v112 = v154;
    sub_1000167B4(v85, v154);
    sub_10001C8F0();
    v113 = sub_10001C8F8();
    if (sub_10001C7E0(v113))
    {
      v18 = (void (*)(void))sub_10001C7BC();
      v114 = sub_100006D24(32);
      v168 = v114;
      *(_DWORD *)v18 = 136315138;
      v115 = CompanionLinkDevice.description.getter();
      v170 = sub_10001C84C(v115, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, (char *)v18 + 4, (char *)v18 + v86);
      sub_1000132F4();
      sub_1000167F8(v112);
      sub_10001C7CC((void *)&_mh_execute_header, v117, v118, "Could not gather the local device's IDS identifier.  Will not issue a connection request.  Local device: [%s]");
      sub_10001C888(v114, v119, (uint64_t)&type metadata for Any + 8);
      v120 = v114;
      v85 = v158;
      sub_100006D04(v120);
      sub_100006D04((uint64_t)v18);
    }
    else
    {
      sub_1000167F8(v112);
    }

    v144 = sub_10001C938();
    sub_10001C87C((uint64_t)&type metadata for RemoteDisplaySendingDevicesManager.ConnectionError, v144);
    *v145 = 2;
    v18();
    sub_10001C940();
    v143 = v85;
  }
  sub_1000167F8(v143);
LABEL_24:
  sub_100012D28();
}

uint64_t sub_10001B608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v35 = a4;
  v36 = a5;
  v34 = a1;
  v38 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v37 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1000866F8, v19 + 16, v16 | 7);
  *(_QWORD *)(v20 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v20 + v17, v15, v12);
  v22 = v34;
  v21 = v35;
  *(_QWORD *)(v20 + v18) = v34;
  v23 = (_QWORD *)(v20 + v19);
  v24 = v36;
  *v23 = v21;
  v23[1] = v24;
  aBlock[4] = sub_10001C66C;
  v43 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100086710;
  v25 = _Block_copy(aBlock);
  v26 = v43;
  swift_retain(a2);
  swift_errorRetain(v22);
  swift_retain(v24);
  v27 = swift_release(v26);
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_100005CC0((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_100010F40((uint64_t *)&unk_100092170);
  v30 = sub_10001C6B8();
  v31 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v38, v28);
  v32 = (void *)v37;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v11, v40);
}

uint64_t sub_10001B8BC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD v37[3];
  void (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v39 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000912A0 != -1)
    swift_once(&qword_1000912A0, sub_10001A404);
  v13 = type metadata accessor for Logger(0);
  sub_100006CAC(v13, (uint64_t)qword_10009A178);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_errorRetain(a3);
  v14 = swift_errorRetain(a3);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v37[1] = a2;
    v37[2] = a5;
    v38 = a4;
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v42[0] = v18;
    *(_DWORD *)v17 = 136315394;
    sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v9);
    v21 = v20;
    v41 = sub_100015FFC(v19, v20, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v17 + 12) = 2080;
    if (a3)
    {
      v41 = a3;
      swift_errorRetain(a3);
      v22 = sub_100010F40((uint64_t *)&unk_100092F60);
      v23 = sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      v24 = swift_dynamicCast(&v40, &v41, v22, v23, 6);
      v25 = v40;
      if (!v24)
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    v26 = v39;
    v41 = v25;
    v27 = sub_100010F40(qword_100092330);
    v28 = String.init<A>(describing:)(&v41, v27);
    v30 = v29;
    v41 = sub_100015FFC(v28, v29, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v30);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Finished connection request to device with identifier: [%s]. Error: [%s].", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    a4 = v38;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_errorRelease(a3);
    swift_errorRelease(a3);

    v26 = v39;
  }
  swift_beginAccess(v26 + 32, v42, 33, 0);
  sub_10003C8E8();
  v32 = v31;
  swift_endAccess(v42);
  swift_release(v32);
  if (a3)
  {
    v33 = sub_10001C4CC();
    v34 = swift_allocError(&type metadata for RemoteDisplaySendingDevicesManager.ConnectionError, v33, 0, 0);
    *v35 = a3;
    swift_errorRetain(a3);
    a4(v34);
    swift_errorRelease(v34);
  }
  else
  {
    a4(0);
  }
  return sub_10001C090();
}

void sub_10001BC64(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  Class isa;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];

  v4 = v3;
  v55 = a3;
  v56 = a1;
  v6 = sub_10001322C();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001C898();
  v54 = v8;
  sub_10001C8E4();
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - v10;
  v12 = sub_10001C928();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100012DF0();
  v16 = (uint64_t *)(v15 - v14);
  sub_100012E50(v17, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  *v16 = sub_10001C900();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v16, v12);
  if ((v18 & 1) != 0)
  {
    if (qword_1000912A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1000912A0, sub_10001A404);
LABEL_3:
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100006CAC(v19, (uint64_t)qword_10009A178);
  v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v21 = v52(v11, v56, v6);
  v53 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = sub_10001C7BC();
    v51 = v4;
    v25 = (uint8_t *)v24;
    v26 = sub_100006D24(32);
    v59[0] = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = &v25[v20];
    v50 = a2;
    sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v6);
    v20 = v29;
    v58 = sub_100015FFC(v28, v29, v59);
    a2 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v25 + 4, v27);
    sub_1000132F4();
    sub_10001C8AC();
    sub_10001C890((void *)&_mh_execute_header, v22, v23, "Received a request to disconnect the remote display session with device with identifier: [%s].", v25);
    sub_10001C888(v26, v30, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v26);
    v31 = (uint64_t)v25;
    v4 = v51;
    sub_100006D04(v31);
  }
  else
  {
    sub_10001C8AC();
  }

  sub_100012DD0(v4 + 32, (uint64_t)v59, 0);
  v32 = *(_QWORD *)(v4 + 32);
  swift_bridgeObjectRetain(v32);
  sub_100021890(v56, v32);
  v34 = v33;
  swift_bridgeObjectRelease(v32);
  if (v34)
  {
    v49 = (void (*)(char *, uint64_t))v7;
    v35 = v54;
    v36 = v20;
    v37 = v52(v54, v56, v20);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = v35;
      v41 = (uint8_t *)sub_100006D24(12);
      v42 = sub_100006D24(32);
      v58 = v42;
      v50 = a2;
      v51 = v4;
      *(_DWORD *)v41 = 136315138;
      sub_100005CC0((unint64_t *)&unk_100092310, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v36);
      v57 = sub_10001C908(v43, v44);
      a2 = v50;
      v4 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v41 + 4, v41 + 12);
      sub_1000132F4();
      v49(v40, v36);
      sub_10001C890((void *)&_mh_execute_header, v38, v39, "Before disconnecting, will cancel in-flight connection request to device with identifier: [%s]", v41);
      sub_10001C888(v42, v45, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v42);
      sub_100006D04((uint64_t)v41);
    }
    else
    {
      v49(v35, v20);
    }

    CompanionLinkClient.cancel()();
    swift_release(v34);
  }
  v46 = *(void **)(v4 + 48);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "closeDisplayServiceSessionsWithPeerIdentifier:", isa);

  a2(0);
  sub_100012D28();
}

uint64_t sub_10001C090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarDisplayReceivingManagerSendingDeviceSessionStatesChangedNotification);
  v2 = v1;
  v3 = String.utf8CString.getter(v0);
  swift_bridgeObjectRelease(v2);
  notify_post((const char *)(v3 + 32));
  return swift_release(v3);
}

_QWORD *sub_10001C0D8()
{
  _QWORD *v0;

  sub_10001C930();
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return v0;
}

uint64_t sub_10001C118()
{
  uint64_t v0;

  sub_10001C0D8();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RemoteDisplaySendingDevicesManager()
{
  return objc_opt_self(_TtC12SidecarRelay34RemoteDisplaySendingDevicesManager);
}

uint64_t sub_10001C158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v4 = type metadata accessor for UUID(0);
  v43 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  result = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 56);
    v37 = a1;
    v38 = a1 + 56;
    v16 = 1 << *(_BYTE *)(a1 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & v15;
    v39 = (unint64_t)(v16 + 63) >> 6;
    v42 = a2 + 56;
    v36 = (char *)&v36 - v12;
    if (!v18)
      goto LABEL_8;
LABEL_7:
    v40 = (v18 - 1) & v18;
    v41 = v14;
    for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
    {
      v24 = v43;
      v25 = v43[9];
      v26 = (void (*)(char *, unint64_t, uint64_t))v43[2];
      v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
      ((void (*)(char *, char *, uint64_t))v24[4])(v10, v13, v4);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
      v30 = -1 << *(_BYTE *)(a2 + 32);
      v31 = v29 & ~v30;
      if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        break;
      v32 = ~v30;
      while (1)
      {
        v26(v7, *(_QWORD *)(a2 + 48) + v31 * v25, v4);
        v33 = sub_100005CC0(&qword_100092F90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v33);
        v35 = (void (*)(char *, uint64_t))v43[1];
        v35(v7, v4);
        if ((v34 & 1) != 0)
          break;
        v31 = (v31 + 1) & v32;
        if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_33;
      }
      result = ((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
      v13 = v36;
      a1 = v37;
      v18 = v40;
      v14 = v41;
      if (v40)
        goto LABEL_7;
LABEL_8:
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }
      if (v20 >= v39)
        return 1;
      v21 = *(_QWORD *)(v38 + 8 * v20);
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v20 + 1;
        if (v20 + 1 >= v39)
          return 1;
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 2;
          if (v20 + 2 >= v39)
            return 1;
          v21 = *(_QWORD *)(v38 + 8 * v22);
          if (!v21)
          {
            v22 = v20 + 3;
            if (v20 + 3 >= v39)
              return 1;
            v21 = *(_QWORD *)(v38 + 8 * v22);
            if (!v21)
            {
              v23 = v20 + 4;
              if (v23 >= v39)
                return 1;
              v21 = *(_QWORD *)(v38 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  v22 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_36;
                  if (v22 >= v39)
                    return 1;
                  v21 = *(_QWORD *)(v38 + 8 * v22);
                  ++v23;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v22 = v23;
            }
          }
        }
      }
LABEL_23:
      v40 = (v21 - 1) & v21;
      v41 = v22;
    }
    v35 = (void (*)(char *, uint64_t))v43[1];
LABEL_33:
    v35(v10, v4);
  }
  return 0;
}

unint64_t sub_10001C4CC()
{
  unint64_t result;

  result = qword_100092320;
  if (!qword_100092320)
  {
    result = swift_getWitnessTable(&unk_100071D30, &type metadata for RemoteDisplaySendingDevicesManager.ConnectionError);
    atomic_store(result, (unint64_t *)&qword_100092320);
  }
  return result;
}

uint64_t sub_10001C508(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100010F40(&qword_100091BD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001C548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001322C();
  sub_10001C7F0();
  sub_10001C930();
  sub_10001C8C8();
  swift_release(*(_QWORD *)(v0 + v2 + 8));
  return sub_10001C81C(v0, v2 + 16, v1);
}

uint64_t sub_10001C5D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_10001322C();
  sub_10001C858();
  return sub_10001B608(a1, *(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v4 + 8));
}

uint64_t sub_10001C610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_10001322C();
  sub_10001C7F0();
  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10001C930();
  sub_10001C8C8();
  swift_errorRelease(*(_QWORD *)(v0 + v2));
  swift_release(*(_QWORD *)(v0 + v3 + 8));
  return sub_10001C81C(v0, v3 + 16, v1);
}

uint64_t sub_10001C66C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001322C();
  sub_10001C858();
  return sub_10001B8BC(*(_QWORD *)(v0 + 16), v0 + v1, *(_QWORD *)(v0 + v2), *(void (**)(_QWORD))(v0 + ((v2 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10001C6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10001C6B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093000;
  if (!qword_100093000)
  {
    v1 = sub_100010FE0((uint64_t *)&unk_100092170);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100093000);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteDisplaySendingDevicesManager.ConnectionError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RemoteDisplaySendingDevicesManager.ConnectionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteDisplaySendingDevicesManager.ConnectionError()
{
  return &type metadata for RemoteDisplaySendingDevicesManager.ConnectionError;
}

uint64_t sub_10001C7BC()
{
  return swift_slowAlloc(12, -1);
}

void sub_10001C7CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

BOOL sub_10001C7E0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001C81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10001C830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v3 - 112, v2, v1);
}

uint64_t sub_10001C84C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100015FFC(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_10001C87C(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_10001C888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1, a3);
}

void sub_10001C890(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_10001C8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10001C8C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10001C8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10001C8F0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001C8F8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10001C900()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t sub_10001C908(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100015FFC(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_10001C914()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

uint64_t sub_10001C928()
{
  return type metadata accessor for DispatchPredicate(0);
}

uint64_t sub_10001C930()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10001C938()
{
  return sub_10001C4CC();
}

uint64_t sub_10001C940()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001C948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void **sub_10001C950(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void sub_10001C97C(id *a1)
{

}

void **sub_10001C984(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **sub_10001C9B8(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_10001C9E8(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001CA3C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for MapTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001CFA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapTable);
}

uint64_t sub_10001CA98(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100071E08, a1);
}

uint64_t sub_10001CAA8(void *a1, uint64_t a2)
{
  id v4;

  v4 = a1;
  return sub_10001CAD4(a1, a2);
}

uint64_t sub_10001CAD4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::Int Count;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  _QWORD aBlock[5];
  uint64_t v19;
  uint64_t v20;

  v4 = sub_10001D14C(0, (uint64_t)&type metadata for Int, a2);
  v5 = static Array._allocateUninitialized(_:)(0, v4);
  v20 = v5;
  if (!a1)
  {
    v14 = v5;
    v13 = 0;
    v8 = 0;
    goto LABEL_5;
  }
  v6 = a1;
  Count = SidecarMapTableGetCount(v6);
  sub_10001D158();
  Array.reserveCapacity(_:)(Count);
  v8 = sub_10001D140((uint64_t)&unk_100086858);
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = &v20;
  v9 = sub_10001D140((uint64_t)&unk_100086880);
  *(_QWORD *)(v9 + 16) = sub_10001CF5C;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_10001CF68;
  v19 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001CCE8;
  aBlock[3] = &unk_100086898;
  v10 = _Block_copy(aBlock);
  v11 = v19;
  swift_retain(v9);
  swift_release(v11);
  SidecarMapTableIterateObjects(v6, v10);

  _Block_release(v10);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v9, "", 73, 90, 54, 1);
  result = swift_release(v9);
  if ((v6 & 1) == 0)
  {
    v13 = sub_10001CF5C;
    v14 = v20;
LABEL_5:
    aBlock[0] = v14;
    v15 = sub_10001D158();
    swift_bridgeObjectRetain(v14);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
    v17 = ArraySlice.init<A>(_:)(aBlock, v4, v15, WitnessTable);

    swift_bridgeObjectRelease(v20);
    sub_1000121B4((uint64_t)v13, v8);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001CCC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10001CCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, _QWORD *);
  _QWORD v7[4];

  v5 = *(void (**)(uint64_t, _QWORD *))(a1 + 32);
  v7[3] = swift_getObjectType(a3);
  v7[0] = a3;
  swift_unknownObjectRetain(a3);
  v5(a2, v7);
  return sub_100012B68(v7);
}

uint64_t sub_10001CD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  _BYTE v17[32];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, a4, 0, 0);
  v8 = __chkstk_darwin(TupleTypeMetadata2);
  v10 = &v17[-v9];
  v11 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v8);
  v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000121EC(a2, (uint64_t)v17);
  swift_dynamicCast(v13, v17, (char *)&type metadata for Any + 8, a4, 7);
  v14 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
  *v10 = a1;
  (*(void (**)(char *, _BYTE *, uint64_t))(v11 + 32))(v14, v13, a4);
  v15 = type metadata accessor for Array(0, TupleTypeMetadata2);
  return Array.append(_:)(v10, v15);
}

uint64_t sub_10001CE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;

  v1 = sub_10001D14C(255, (uint64_t)&type metadata for Int, *(_QWORD *)(a1 + 16));
  v2 = type metadata accessor for ArraySlice(0, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v2);
  return Collection<>.popFirst()(v2, WitnessTable);
}

void sub_10001CECC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void **v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *v2;
  v5 = sub_10001CAA8(v4, *(_QWORD *)(a1 + 16));
  v7 = v6;
  v9 = v8;
  v11 = v10;

  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v11;
}

uint64_t static RapportDeviceChangeFlags.distance.getter()
{
  return 2;
}

uint64_t sub_10001CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_10001CF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001CD48(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t sub_10001CF68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001CF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001CF98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001CFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10001CFCC(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t sub_10001CFD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t *sub_10001D010(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t sub_10001D06C(uint64_t a1, _OWORD *a2)
{
  __int128 v4;

  swift_unknownObjectRelease(*(_QWORD *)a1);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t sub_10001D0A0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001D0E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MapTable.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001CFA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapTable.Iterator);
}

uint64_t sub_10001D130()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D140(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10001D14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getTupleTypeMetadata2(a1, a2, a3, 0, 0);
}

uint64_t sub_10001D158()
{
  uint64_t v0;

  return type metadata accessor for Array(0, v0);
}

void sub_10001D164(uint64_t a1, uint64_t a2)
{
  NSArray v3;
  void *v4;

  sub_100006C74(0, (unint64_t *)&unk_100091910, SidecarDisplaySendingDeviceSessionState_ptr);
  v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2)
    _convertErrorToNSError(_:)(a2);
  sub_10001EF54();

  sub_100012EB8(v4);
}

void sub_10001D1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSData v4;
  void *v5;

  v4.super.isa = Data._bridgeToObjectiveC()().super.isa;
  if (a3)
    _convertErrorToNSError(_:)(a3);
  sub_10001EF54();

  sub_100012EB8(v5);
}

uint64_t sub_10001D228(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, unint64_t, void *);
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;

  v6 = *(void (**)(uint64_t, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a2;
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;

  v11 = a3;
  v6(v8, v10, a3);

  sub_100006C30(v8, v10);
  return swift_release(v5);
}

uint64_t sub_10001D2B8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100092440);
  sub_100006CAC(v0, (uint64_t)qword_100092440);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000020, 0x8000000100071E60);
}

uint64_t sub_10001D334(uint64_t a1)
{
  return sub_10001EF0C(a1);
}

uint64_t sub_10001D340(uint64_t a1)
{
  return sub_10001EF0C(a1);
}

uint64_t sub_10001D34C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_relayProxy);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_relayProxy) = a1;
  return swift_unknownObjectRelease(v2);
}

id sub_10001D364()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (qword_1000912A8 != -1)
    swift_once(&qword_1000912A8, sub_10001D2B8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100006CAC(v0, (uint64_t)qword_100092440);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v10 = v5;
    *(_DWORD *)v4 = 136315138;
    v9 = sub_100015FFC(0xD000000000000033, 0x800000010006F240, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  return sub_10001F230(v6, v7, -999, 0xD000000000000033, 0x800000010006F240, 0);
}

id sub_10001D538()
{
  char *v0;
  void *v1;
  uint64_t v2;
  objc_super v4;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_companionLinkDeviceDetector];
  sub_10001EFE4();
  sub_100016CC0();
  swift_release(v2);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for SidecarRelayIntermediateDelegate();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_10001D61C()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.SidecarRelayIntermediateDelegate", 45, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for SidecarRelayIntermediateDelegate()
{
  return objc_opt_self(_TtC12SidecarRelay32SidecarRelayIntermediateDelegate);
}

void sub_10001D674(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = sub_10001EF9C();
  v5 = sub_10001EF4C();
  sub_10001D34C(v5);
  v6 = type metadata accessor for RemoteDisplaySendingDevicesManager();
  sub_100014AC4(v6, 64);
  sub_10001EF4C();
  v7 = sub_10001EFE4();
  v8 = sub_10001A480(v7, (uint64_t)a1);
  sub_10001D340((uint64_t)v8);
  v9 = sub_100014AC4((uint64_t)&unk_100086AA8, 24);
  swift_unknownObjectWeakInit(v9 + 16, v2);
  v10 = sub_100014AC4((uint64_t)&unk_100086AD0, 32);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v4;
  v14 = v10;
  v11 = sub_10001EFD8((uint64_t)sub_10001D944, (uint64_t)_NSConcreteStackBlock, 1107296256, v12, v13);
  swift_release(v14);
  objc_msgSend(a1, "setDisplayServiceSessionsChangedListener:", v11);
  _Block_release(v11);
}

void sub_10001D78C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _BOOL4 v15;
  _BYTE v16[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = *(_QWORD *)(a1 + 16);
    if (qword_1000912A8 != -1)
      swift_once(&qword_1000912A8, sub_10001D2B8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100006CAC(v7, (uint64_t)qword_100092440);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 67109120;
      v15 = v6 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v11 + 4, v11 + 8);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "The set of remote display sessions has changed.  Sessions exist: [%{BOOL}d]", v11, 8u);
      swift_slowDealloc(v11, -1, -1);
    }

    objc_msgSend(v5, "setRemoteDisplaySessionExists:", v6 != 0);
    v12 = *(_QWORD *)&v5[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager];
    if (v12)
    {
      swift_retain(*(_QWORD *)&v5[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager]);
      v13 = swift_bridgeObjectRetain(a1);
      sub_10001A714(v13);
      swift_release(v12);

    }
    else
    {
      v14 = sub_10001D364();

      swift_errorRelease(v14);
    }
  }
}

uint64_t sub_10001D944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_10001EE94((unint64_t *)&unk_1000918A0, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a2, v5, v6);
  swift_retain(v3);
  v4(v7);
  swift_release(v3);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10001DA10()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1000912A8 != -1)
    swift_once(&qword_1000912A8, sub_10001D2B8);
  v2 = sub_100012DA8();
  v3 = sub_100006CAC(v2, (uint64_t)qword_100092440);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)sub_100006D24(2);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Relay initialized", v6, 2u);
    sub_100006D04((uint64_t)v6);
  }

  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_companionLinkDeviceDetector];
  v8 = type metadata accessor for CompanionLinkDeviceDiscoveryProxy();
  v9 = sub_100014AC4(v8, 41);
  sub_10001EFE4();
  v10 = sub_10001ED1C(v7, (uint64_t)v1, v9);
  return sub_10001D334(v10);
}

void sub_10001DB48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v2 = sub_10001EF9C();
  v3 = sub_10001322C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v5 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_100086A58, v10 + 8, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v11 + v9, v6, v3);
  *(_QWORD *)(v11 + v10) = v2;
  aBlock[4] = sub_10001ECD0;
  v15 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021604;
  aBlock[3] = &unk_100086A70;
  v12 = _Block_copy(aBlock);
  v13 = swift_release(v15);
  sub_10001EF8C(v13, "ignoreDetectionOfAnchorWithIdentifier:completion:");
  _Block_release(v12);

  sub_100012D28();
}

void sub_10001DC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000912A8 != -1)
    swift_once(&qword_1000912A8, sub_10001D2B8);
  v8 = type metadata accessor for Logger(0);
  sub_100006CAC(v8, (uint64_t)qword_100092440);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v12 = 136315394;
    sub_10001EE94((unint64_t *)&unk_100092310, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v4);
    v15 = v14;
    v23 = sub_100015FFC(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v12 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain(a1);
      v16 = _swift_stdlib_bridgeErrorToNSError(a1);
      v23 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 14, v12 + 22);
    }
    else
    {
      v23 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 14, v12 + 22);
      v16 = 0;
    }
    v17 = v21;
    *v21 = v16;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error encountered while trying to ignore detection of anchor with identifier [%s].  Error: [%@]", (uint8_t *)v12, 0x16u);
    v18 = sub_100010F40((uint64_t *)&unk_100092180);
    swift_arrayDestroy(v17, 1, v18);
    swift_slowDealloc(v17, -1, -1);
    v19 = v22;
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

}

id sub_10001E028(char a1)
{
  uint64_t v1;

  return sub_10001EF2C(a1, "setDevicesAreNearby:", *(void **)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate));
}

id sub_10001E080(char a1)
{
  uint64_t v1;

  return sub_10001EF2C(a1, "setRemoteDisplaySessionExists:", *(void **)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate));
}

uint64_t sub_10001E0D8(void *a1)
{
  uint64_t v1;
  const char *v3;
  const char *string;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  v3 = (const char *)XPC_EVENT_KEY_NAME.getter();
  string = xpc_dictionary_get_string(a1, v3);
  if (!string)
  {
    if (qword_1000912A8 != -1)
      swift_once(&qword_1000912A8, sub_10001D2B8);
    v27 = sub_100012DA8();
    sub_100006CAC(v27, (uint64_t)qword_100092440);
    v28 = swift_unknownObjectRetain_n(a1, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v30))
    {

      sub_10001EFC0();
      return 0;
    }
    v31 = sub_100006D24(22);
    v32 = sub_100006D24(64);
    v75 = (uint64_t)v3;
    v76 = v32;
    *(_DWORD *)v31 = 136315394;
    v33 = sub_100010F40(&qword_100091888);
    v41 = sub_10001EFA4(v33, v34, v35, v36, v37, v38, v39, v40, v75);
    v43 = v42;
    v75 = sub_100015FFC(v41, v42, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v1 + 8, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v31 + 12) = 2080;
    v75 = (uint64_t)a1;
    sub_10001EF4C();
    v44 = sub_100010F40(&qword_100092510);
    v52 = sub_10001EFA4(v44, v45, v46, v47, v48, v49, v50, v51, v75);
    v54 = v53;
    v75 = sub_100015FFC(v52, v53, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v1 + 8, v31 + 14, v31 + 22);
    sub_10001EFC0();
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Could not find [%s] in event [%s]", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    sub_100006D04(v32);
    v55 = v31;
LABEL_19:
    sub_100006D04(v55);

    return 0;
  }
  v5 = String.init(cString:)(string);
  if ((v5 != 0xD000000000000036 || v6 != 0x800000010006F2C0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 0xD000000000000036, 0x800000010006F2C0, 0) & 1) == 0)
  {
    if (qword_1000912A8 != -1)
      swift_once(&qword_1000912A8, sub_10001D2B8);
    v56 = sub_100012DA8();
    sub_100006CAC(v56, (uint64_t)qword_100092440);
    v57 = sub_10001EFEC();
    v29 = Logger.logObject.getter(v57);
    v58 = static os_log_type_t.debug.getter();
    if (!sub_100006D2C(v58))
    {

      sub_10001EFB4();
      return 0;
    }
    v59 = sub_100006D24(12);
    v60 = sub_100006D24(32);
    v61 = sub_10001EF68(4.8149e-34);
    v62 = sub_10001EF7C(v61);
    sub_10001EEF0(v62, v63, v64, v65, v66, v67, v68, v69, v75, v60);
    sub_10001EFCC();
    sub_10001EF38((void *)&_mh_execute_header, v70, v71, "Unrecognized event name: [%s]");
    sub_10001EFF8(v72, v73, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v60);
    v55 = v59;
    goto LABEL_19;
  }
  if (qword_1000912A8 != -1)
    swift_once(&qword_1000912A8, sub_10001D2B8);
  v7 = sub_100012DA8();
  sub_100006CAC(v7, (uint64_t)qword_100092440);
  v8 = sub_10001EFEC();
  v9 = (void *)Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (sub_100006D2C(v10))
  {
    v11 = sub_100006D24(12);
    v12 = sub_100006D24(32);
    v13 = sub_10001EF68(4.8149e-34);
    v14 = sub_10001EF7C(v13);
    sub_10001EEF0(v14, v15, v16, v17, v18, v19, v20, v21, v75, v12);
    sub_10001EFCC();
    sub_10001EF38((void *)&_mh_execute_header, v22, v23, "Received event: [%s]");
    v24 = 1;
    sub_10001EFF8(v25, v26, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v12);
    sub_100006D04(v11);

  }
  else
  {

    sub_10001EFB4();
    return 1;
  }
  return v24;
}

uint64_t sub_10001E500(void (*a1)(uint64_t, id))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v3 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager);
  if (v3)
  {
    swift_retain(*(_QWORD *)(v1
                           + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager));
    v4 = sub_10001A740();
    a1(v4, 0);
    swift_release(v3);
    return swift_bridgeObjectRelease(v4);
  }
  else
  {
    sub_10001EF9C();
    v6 = sub_10001D364();
    a1((uint64_t)_swiftEmptyArrayStorage, v6);
    return sub_10001EF1C((uint64_t)v6);
  }
}

uint64_t sub_10001E624(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  id v11;

  v7 = *(_QWORD *)(v4
                 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager);
  if (v7)
  {
    swift_retain(*(_QWORD *)(v4
                           + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager));
    a4(a1, a2, a3);
    return swift_release(v7);
  }
  else
  {
    sub_10001EF9C();
    v11 = sub_10001D364();
    a2();
    return sub_10001EF1C((uint64_t)v11);
  }
}

void sub_10001E6CC(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, void (*a6)(void), void (*a7)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v13 = sub_10001322C();
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v18 = sub_100014AC4(a5, 24);
  *(_QWORD *)(v18 + 16) = v17;
  v19 = a1;
  sub_10001E624((uint64_t)v16, a6, v18, a7);

  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_100012D28();
}

void sub_10001E7A8(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  void *v4;
  Class isa;

  v4 = *(void **)(a2 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  if ((objc_msgSend(v4, "respondsToSelector:", "ignoreDetectionForAnchorIdentifier:") & 1) != 0)
  {
    swift_unknownObjectRetain(v4);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "ignoreDetectionForAnchorIdentifier:", isa);
    swift_unknownObjectRelease(v4);

  }
  a3[2](a3, 0);
  _Block_release(a3);
}

uint64_t sub_10001E8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v6;
  uint64_t result;
  Class isa;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(void **)(v4 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  result = (uint64_t)objc_msgSend(v6, "respondsToSelector:", "sendDataRequest:completion:");
  if ((result & 1) != 0)
  {
    sub_10001EF4C();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v9 = sub_10001EFD8((uint64_t)sub_10001D228, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    v10 = swift_retain(a4);
    sub_10001EF8C(v10, "sendDataRequest:completion:");
    _Block_release(v9);

    swift_unknownObjectRelease(v6);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_10001EA9C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  Class isa;
  id v5;
  uint64_t v6;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  if ((objc_msgSend(v3, "respondsToSelector:", "overridePresenterLaunchOptions:") & 1) == 0)
    return swift_bridgeObjectRetain(a1);
  sub_10001EF4C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "overridePresenterLaunchOptions:", isa);

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_unknownObjectRelease(v3);

  return v6;
}

uint64_t sub_10001EC2C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001EC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001EC68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001322C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10001ECD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001322C() - 8) + 80);
  sub_10001DC84(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10001ED1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v6 = type metadata accessor for CompanionLinkDevice(0);
  *(_QWORD *)(a3 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v6, &protocol witness table for String);
  *(_QWORD *)(a3 + 24) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a3 + 40) = 0;
  if (qword_100091280 != -1)
    swift_once(&qword_100091280, sub_1000179A0);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100006CAC(v7, (uint64_t)qword_100091D30);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Loading", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  *(_QWORD *)(a3 + 32) = a2;
  swift_release(a1);
  return a3;
}

uint64_t sub_10001EE44()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001EE68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10001EE8C(uint64_t a1)
{
  uint64_t v1;

  sub_10001D78C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10001EE94(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001EEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t sub_10001EF0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = a1;
  return swift_release(v3);
}

uint64_t sub_10001EF1C(uint64_t a1)
{
  return swift_errorRelease(a1);
}

id sub_10001EF2C@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return objc_msgSend(a3, a2, a1 & 1);
}

void sub_10001EF38(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10001EF4C()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10001EF54()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t sub_10001EF68(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10001EF7C(uint64_t a1, ...)
{
  unint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return sub_100015FFC(v2, v1, (uint64_t *)va);
}

id sub_10001EF8C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_10001EF9C()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_10001EFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return String.init<A>(describing:)(&a9, a1);
}

uint64_t sub_10001EFB4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10001EFC0()
{
  uint64_t v0;

  return swift_unknownObjectRelease_n(v0, 2);
}

uint64_t sub_10001EFCC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

void *sub_10001EFD8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_10001EFE4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001EFEC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001EFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 1, a3);
}

uint64_t sub_10001F004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100012600((_OWORD *)a1, v6);
    sub_10003CB30(v6, a2, a3);
    return swift_bridgeObjectRelease(a3);
  }
  else
  {
    sub_10001F4B4(a1, &qword_100092E90);
    sub_10003C308(v6, a2, a3);
    swift_bridgeObjectRelease(a3);
    return sub_10001F4B4((uint64_t)v6, &qword_100092E90);
  }
}

uint64_t sub_10001F094(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100012600((_OWORD *)a1, v4);
    sub_10003CB6C();
    return sub_10001F4E0(a2);
  }
  else
  {
    sub_10001F4B4(a1, &qword_100092E90);
    sub_10003C3B0(v4, a2);
    sub_10001F4E0(a2);
    return sub_10001F4B4((uint64_t)v4, &qword_100092E90);
  }
}

uint64_t sub_10001F118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_100010F40(&qword_100091900);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000124B8(a1, 1, v8) == 1)
  {
    sub_10001F4B4(a1, &qword_100091900);
    sub_10003C7A8();
    v9 = type metadata accessor for UUID(0);
    sub_1000130B0(v9);
    return sub_10001F4B4((uint64_t)v4, &qword_100091900);
  }
  else
  {
    sub_100012538(a1, (uint64_t)v7);
    sub_10003CBC4();
    v11 = type metadata accessor for UUID(0);
    return sub_1000130B0(v11);
  }
}

id sub_10001F230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  NSString v22;
  uint64_t v23;
  Class isa;
  id v25;
  uint64_t v27;
  _QWORD *v28;
  char v29[8];
  _QWORD v30[3];
  void *v31;
  uint64_t v32;

  v7 = v6;
  v32 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (a5)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v31 = &type metadata for String;
    v30[0] = a4;
    v30[1] = a5;
    sub_10001F004((uint64_t)v30, v13, v14);
  }
  if (a6)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v17 = v16;
    swift_getErrorValue(a6, v29, &v27);
    v18 = v27;
    v19 = v28;
    v31 = v28;
    v20 = sub_10001F478(v30);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v19 - 1) + 16))(v20, v18, v19);
    sub_10001F004((uint64_t)v30, v15, v17);
  }
  v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v23 = v32;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v25 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, a3, isa);

  swift_errorRelease(a6);
  return v25;
}

id sub_10001F3E0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10001F3F8(a1, a2, a3, a4, a5, a6, a7, &NSOSStatusErrorDomain);
}

id sub_10001F3EC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10001F3F8(a1, a2, a3, a4, a5, a6, a7, &RPErrorDomain);
}

id sub_10001F3F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a8);
  return sub_10001F230(v11, v12, a1, a2, a3, 0);
}

_QWORD *sub_10001F478(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10001F4B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100010F40(a2);
  sub_1000130B0(v3);
  return a1;
}

uint64_t sub_10001F4E0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t SidecarPacketType.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1801675054;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 1801547310;
      break;
    case 2:
      result = 0x7463656E6E6F632ELL;
      break;
    case 3:
      result = 0x6E6E6F637369642ELL;
      break;
    case 4:
      result = 0x65726975716E692ELL;
      break;
    case 5:
      result = 0x7375746174732ELL;
      break;
    case 6:
      result = 0x6567617373656D2ELL;
      break;
    default:
      result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
      break;
  }
  return result;
}

uint64_t sub_10001F60C()
{
  uint64_t *v0;

  return SidecarPacketType.description.getter(*v0);
}

id sub_10001F614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v23;
  _QWORD v24[2];
  _BYTE v25[40];
  uint64_t v26[3];
  uint64_t v27;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100020EB8();
  v23 = 0;
  v26[0] = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  sub_100012E50(v26[0], &qword_100092528, NSNumber_ptr);
  sub_100020A24();
  sub_100020ED8((uint64_t)v26);
  sub_100020EA8();
  sub_10001F4E0((uint64_t)v25);
  if (v27)
    sub_100020E1C((uint64_t)v24, (uint64_t)v26, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data);
  else
    sub_100020990((uint64_t)v26);
  v24[0] = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100020ED8((uint64_t)v24);
  sub_100020EA8();
  swift_bridgeObjectRelease(a1);
  sub_10001F4E0((uint64_t)v25);
  if (v27)
  {
    v4 = sub_100020E1C((uint64_t)v24, (uint64_t)v26, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data);
    if ((v4 & 1) != 0)
    {
      v5 = v24[0];
      v6 = v24[1];
      isa = Data._bridgeToObjectiveC()().super.isa;
      v8 = OPACKDecodeData(isa, 0, &v23);
      sub_100006C30(v5, v6);

      if (v8)
      {
        v9 = objc_opt_self(NSDictionary);
        v10 = swift_dynamicCastObjCClass(v8, v9);
        if (v10 && !v23)
          return (id)v10;
        v4 = swift_unknownObjectRelease(v8);
      }
    }
  }
  else
  {
    v4 = sub_100020990((uint64_t)v26);
  }
  sub_100012E50(v4, (unint64_t *)&qword_100091750, NSError_ptr);
  sub_100020F14();
  v17 = sub_10001F3E0(v11, v12, v13, v14, v15, v16, 75);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v18 = sub_100006CAC(v2, (uint64_t)qword_10009A198);
  v19 = sub_100020EE4(v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  __chkstk_darwin(v19);
  sub_100020F08((uint64_t (*)(void))sub_10001F8F0, v20, sub_100020DE4);
  sub_100020EF0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v21 = objc_msgSend(objc_allocWithZone((Class)NSDictionary), "init");

  return v21;
}

unint64_t sub_10001F8F0()
{
  return 0xD000000000000016;
}

uint64_t sub_10001F90C(uint64_t a1)
{
  NSNumber v2;
  id v3;
  uint64_t v5;
  uint64_t v6;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1
    && sub_100020DF8((uint64_t)&type metadata for Int, (uint64_t)&type metadata for Swift.AnyObject, v5, a1))
  {
    return v6;
  }
  else
  {
    return 0;
  }
}

id sub_10001F980(uint64_t a1)
{
  NSNumber v2;
  id v3;
  id v4;
  __int128 v6;
  __int128 v7;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    *((_QWORD *)&v7 + 1) = swift_getObjectType(a1);
    *(_QWORD *)&v6 = a1;
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  v4 = sub_10001FA00((uint64_t)&v6);
  sub_100020990((uint64_t)&v6);
  return v4;
}

id sub_10001FA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _BYTE v17[80];
  __int128 v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  _OWORD v22[2];

  sub_1000209D0(a1, (uint64_t)v20);
  if (!v21)
  {
    sub_100020990((uint64_t)v20);
    return 0;
  }
  v1 = sub_100010F40(&qword_100092518);
  if ((swift_dynamicCast(v22, v20, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = *(_QWORD *)&v22[0];
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = (id)RPDecodeNSError();

  if (v4 && (sub_100020A18() & 1) != 0)
  {
    *(_QWORD *)&v18 = 7169375;
    *((_QWORD *)&v18 + 1) = 0xE300000000000000;
    AnyHashable.init<A>(_:)(&v18, &type metadata for String, &protocol witness table for String);
    sub_100021758((uint64_t)v20, v2, &v18);
    swift_bridgeObjectRelease(v2);
    sub_10001F4E0((uint64_t)v20);
    if (v19)
    {
      sub_100012600(&v18, v22);
      v5 = objc_msgSend(v4, "domain");
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v9 = objc_msgSend(v4, "code");
      v10 = sub_100010F40(&qword_100092520);
      inited = swift_initStackObject(v10, v17);
      *(_OWORD *)(inited + 16) = xmmword_100071940;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v12;
      sub_1000121EC((uint64_t)v22, inited + 48);
      v13 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v14 = objc_allocWithZone((Class)NSError);
      v15 = sub_1000208E0(v6, v8, (uint64_t)v9, v13);

      sub_100012B68(v22);
      return v15;
    }
    else
    {
      sub_100020990((uint64_t)&v18);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v2);
  }
  return v4;
}

void sub_10001FC30(uint64_t a1)
{
  NSNumber v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    v5 = a1;
    sub_100020E1C((uint64_t)&v4, (uint64_t)&v5, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t)&type metadata for String);
  }
  sub_100020EFC();
}

void sub_10001FCB4(uint64_t a1)
{
  NSNumber v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    v5 = a1;
    sub_100020E1C((uint64_t)&v4, (uint64_t)&v5, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t)&type metadata for String);
  }
  sub_100020EFC();
}

void sub_10001FD38(uint64_t a1)
{
  NSNumber v2;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2.super.super.isa = sub_100020ED0().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    v4 = sub_100020DF8((uint64_t)&type metadata for UInt64, (uint64_t)&type metadata for Swift.AnyObject, v12, a1);
    sub_100020E30(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  }
  sub_100020E6C();
}

void sub_10001FDA0(uint64_t a1)
{
  NSNumber v2;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    v4 = sub_100020DF8((uint64_t)&type metadata for Double, (uint64_t)&type metadata for Swift.AnyObject, v12, a1);
    sub_100020E30(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  }
  sub_100020E6C();
}

uint64_t sub_10001FE0C(void *a1)
{
  uint64_t v2;
  Class isa;
  id v4;
  uint64_t v6;
  uint64_t v7;

  v2 = 2;
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v4 = objc_msgSend(a1, "objectForKey:", isa);

  if (v4)
  {
    if ((sub_100020DF8((uint64_t)&type metadata for Int, (uint64_t)&type metadata for Swift.AnyObject, v6, (char)v4) & 1) != 0)
      return v7;
    else
      return 2;
  }
  return v2;
}

void sub_10001FE9C(uint64_t a1)
{
  NSNumber v2;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v3 = sub_100013398((uint64_t)v2.super.super.isa, "objectForKey:");
  sub_100020E48();
  if (a1)
  {
    v4 = sub_100020DF8((uint64_t)&type metadata for Int, (uint64_t)&type metadata for Swift.AnyObject, v12, a1);
    sub_100020E30(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  }
  sub_100020E6C();
}

uint64_t sub_10001FF08(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  void *object;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  Swift::String v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  unint64_t v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;

  v102 = 2683;
  v103 = 0xE200000000000000;
  strcpy((char *)&v101, "  type: ");
  BYTE1(v101._object) = 0;
  WORD1(v101._object) = 0;
  HIDWORD(v101._object) = -402653184;
  v5 = sub_10001FE0C(a1);
  v104._countAndFlagsBits = SidecarPacketType.description.getter(v5);
  sub_100020E24(v104);
  sub_10001300C();
  sub_100020DE8();
  sub_100020E0C(v6, v7, v8, v9, v10, v11, v12, v13, v96, v100, v101._countAndFlagsBits, v101._object);
  sub_10001300C();
  strcpy((char *)&v101, "  flags: 0x");
  HIDWORD(v101._object) = -352321536;
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v15 = objc_msgSend(a1, "objectForKey:", isa);

  if (v15
    && sub_100020DF8((uint64_t)&type metadata for UInt, (uint64_t)&type metadata for Swift.AnyObject, v97, (char)v15))
  {
    v16 = v97;
  }
  else
  {
    v16 = 0;
  }
  v100 = v16;
  sub_10001216C();
  v105._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v100, 16, 0);
  sub_100020E24(v105);
  sub_10001300C();
  sub_100020DE8();
  sub_100020E0C(v17, v18, v19, v20, v21, v22, v23, v24, v97, v100, v101._countAndFlagsBits, v101._object);
  sub_10001300C();
  strcpy((char *)&v101, "  channel: ");
  HIDWORD(v101._object) = -352321536;
  v100 = sub_10001F90C((uint64_t)a1);
  sub_100011E6C();
  v106._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v100, 16, 1);
  sub_100020E24(v106);
  sub_10001300C();
  sub_100020DE8();
  sub_100020E0C(v25, v26, v27, v28, v29, v30, v31, v32, v98, v100, v101._countAndFlagsBits, v101._object);
  sub_10001300C();
  sub_10001FC30((uint64_t)a1);
  if (v33._object)
  {
    strcpy((char *)&v101, "  service: ");
    HIDWORD(v101._object) = -352321536;
    sub_100013290(v33);
    sub_10001300C();
    sub_100020DE8();
    sub_100020E0C(v34, v35, v36, v37, v38, v39, v40, v41, v99, v100, v101._countAndFlagsBits, v101._object);
    sub_10001300C();
  }
  sub_10001FD38((uint64_t)a1);
  if ((v43 & 1) == 0)
  {
    v44 = v42;
    v101._countAndFlagsBits = 0;
    v101._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v101._object);
    strcpy((char *)&v101, "  timestamp: ");
    HIWORD(v101._object) = -4864;
    v100 = v44;
    v107._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64);
    sub_100020E24(v107);
    sub_10001300C();
    sub_100020DE8();
    sub_100020E0C(v45, v46, v47, v48, v49, v50, v51, v52, v99, v100, v101._countAndFlagsBits, v101._object);
    sub_10001300C();
  }
  sub_10001FDA0((uint64_t)a1);
  if ((v54 & 1) == 0)
  {
    strcpy((char *)&v101, "  activity: ");
    BYTE5(v101._object) = 0;
    HIWORD(v101._object) = -5120;
    v108._countAndFlagsBits = Double.description.getter(v53);
    sub_100020E24(v108);
    sub_10001300C();
    sub_100020DE8();
    sub_100020E0C(v55, v56, v57, v58, v59, v60, v61, v62, v99, v100, v101._countAndFlagsBits, v101._object);
    sub_10001300C();
  }
  v63 = sub_10001F980((uint64_t)a1);
  if (v63)
  {
    v64 = v63;
    v65 = (void *)_convertErrorToNSError(_:)(v63);
    swift_errorRelease(v64);
    strcpy((char *)&v101, "  error: ");
    WORD1(v101._object) = 0;
    HIDWORD(v101._object) = -385875968;
    v66 = objc_msgSend(v65, "debugDescription");
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    v70._countAndFlagsBits = v67;
    v70._object = v69;
    String.append(_:)(v70);
    swift_bridgeObjectRelease(v69);
    sub_100020DE8();
    object = v101._object;
    String.append(_:)(v101);

    swift_bridgeObjectRelease(object);
  }
  sub_10001FCB4((uint64_t)a1);
  if (v72._object)
  {
    strcpy((char *)&v101, "  version: ");
    HIDWORD(v101._object) = -352321536;
    sub_100013290(v72);
    sub_1000132A0();
    sub_100020DE8();
    sub_100020E98(v73, v74, v75, v76, v77, v78, v79, v80, v99, v100, v101._countAndFlagsBits, v101._object);
    sub_1000132A0();
  }
  if (a3 >> 60 != 15)
  {
    strcpy((char *)&v101, "  body: ");
    BYTE1(v101._object) = 0;
    WORD1(v101._object) = 0;
    HIDWORD(v101._object) = -402653184;
    v81 = sub_100013000();
    sub_10001241C(v81, v82);
    v83 = sub_100013000();
    v109._countAndFlagsBits = Data.description.getter(v83);
    sub_100013290(v109);
    sub_1000132A0();
    sub_100020DE8();
    sub_100020E98(v84, v85, v86, v87, v88, v89, v90, v91, v99, v100, v101._countAndFlagsBits, v101._object);
    sub_1000132A0();
    v92 = sub_100013000();
    sub_100012430(v92, v93);
  }
  v94._countAndFlagsBits = 125;
  v94._object = (void *)0xE100000000000000;
  String.append(_:)(v94);
  return v102;
}

uint64_t sub_1000202E8()
{
  uint64_t v0;

  return sub_10001FF08(*(void **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

void sub_1000202F4()
{
  void **v0;
  Class isa;
  void *v2;
  Class v3;

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v2 = *v0;
  v3 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", isa, v3);

  sub_100020E60(v3);
}

uint64_t sub_100020344(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (a1)
  {
    v1 = (void *)_convertErrorToNSError(_:)(a1);
    v2 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
    v3 = v1;
    v4 = (void *)_convertErrorToNSError(_:)(v3);

    v5 = sub_100013000();
    RPEncodeNSError(v5);

    if (sub_100020A18())
    {
      v6 = objc_msgSend(v3, "userInfo");
      v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      v10 = v9;
      sub_100021714(v8, v9, v7, &v16);
      swift_bridgeObjectRelease(v10);
      sub_1000132A0();
      if (v17)
      {
        sub_100012600(&v16, &v18);
        v11 = v19;
        v12 = sub_100010F80(&v18, v19);
        v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v11);
        *(_QWORD *)&v16 = 7169375;
        *((_QWORD *)&v16 + 1) = 0xE300000000000000;
        v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v16, &type metadata for String);
        objc_msgSend(v2, "__swift_setObject:forKeyedSubscript:", v13, v14);
        swift_unknownObjectRelease(v13);
        swift_unknownObjectRelease(v14);

        sub_100012B68(&v18);
      }
      else
      {

        sub_100020990((uint64_t)&v16);
      }
    }
    else
    {

    }
    return (uint64_t)v2;
  }
  else
  {
    sub_100006C74(0, &qword_100092538, NSDictionary_ptr);
    return NSDictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  }
}

void sub_1000204F8(uint64_t a1, char a2)
{
  void **v2;
  Class isa;
  void *v4;
  void *v5;
  Class v6;
  NSNumber v7;

  if ((a2 & 1) != 0)
  {
    v5 = *v2;
    v7.super.super.isa = sub_100020ED0().super.super.isa;
    objc_msgSend(v5, "removeObjectForKey:");
    sub_100020E60(v7.super.super.isa);
  }
  else
  {
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    v4 = *v2;
    v6 = sub_100020ED0().super.super.isa;
    objc_msgSend(v4, "setObject:forKeyedSubscript:", isa);

    sub_100020E60(v6);
  }
}

uint64_t sub_10002056C(void *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  uint64_t v6;

  v5 = a1;
  sub_10001241C(a2, a3);
  v6 = sub_10001FF08(v5, a2, a3);

  sub_100012430(a2, a3);
  return v6;
}

uint64_t sub_1000205E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v24;
  uint64_t v25;
  uint64_t v26[3];
  _QWORD *v27;
  _BYTE v28[40];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100020EB8();
  v25 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100010F40(&qword_100092518);
  Dictionary.reserveCapacity(_:)(2);
  v24 = 0;
  v8 = (void *)OPACKEncoderCreateData(a1, 0, &v24);
  if (!v8)
    goto LABEL_4;
  v9 = (uint64_t)v8;
  if (v24)
  {

LABEL_4:
    v10 = sub_1000132A0();
    sub_100012E50(v10, (unint64_t *)&qword_100091750, NSError_ptr);
    sub_100020F14();
    v17 = sub_10001F3E0(v11, v12, v13, v14, v15, v16, 238);
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v18 = sub_100006CAC(v6, (uint64_t)qword_10009A198);
    v19 = sub_100020EE4(v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    __chkstk_darwin(v19);
    sub_100020F08((uint64_t (*)(void))sub_10002087C, v20, sub_100020A74);
    sub_100020EF0(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v21 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    return v21;
  }
  v26[0] = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  sub_100012E50(v26[0], &qword_100092528, NSNumber_ptr);
  sub_100020A24();
  sub_100020E84();
  type metadata accessor for CFData(0);
  v27 = v22;
  v26[0] = v9;
  sub_10001F094((uint64_t)v26, (uint64_t)v28);
  if (a3 >> 60 != 15)
  {
    sub_1000120BC(a2, a3);
    v26[0] = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
    sub_100020E84();
    v27 = &type metadata for Data;
    v26[0] = a2;
    v26[1] = a3;
    sub_10001F094((uint64_t)v26, (uint64_t)v28);
  }
  return v25;
}

unint64_t sub_10002087C()
{
  return 0xD00000000000001DLL;
}

void sub_10002089C(uint64_t a1, char a2)
{
  sub_1000204F8(a1, a2 & 1);
}

uint64_t sub_1000208A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_10001241C(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1000208D4()
{
  uint64_t v0;

  return sub_10002056C(*(void **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

id sub_1000208E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  NSDictionary v9;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v8, a3, v9.super.isa);

  return v10;
}

uint64_t sub_100020990(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100010F40(&qword_100092E90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000209D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100092E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020A18()
{
  return os_variant_has_internal_ui("com.apple.sidecar");
}

unint64_t sub_100020A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092530;
  if (!qword_100092530)
  {
    v1 = sub_100006C74(255, &qword_100092528, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100092530);
  }
  return result;
}

uint64_t sub_100020A74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_errorRetain(v1);
  return v1;
}

uint64_t sub_100020AA8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

ValueMetadata *type metadata accessor for MutablePacket()
{
  return &type metadata for MutablePacket;
}

void _s12SidecarRelay13MutablePacketVwxx_0(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 60 != 15)
    sub_100006C30(*(_QWORD *)(a1 + 8), v2);
}

void _s12SidecarRelay13MutablePacketVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  id v7;

  v3 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v4 = a1 + 1;
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v3;
  if (v6 >> 60 == 15)
  {
    *v4 = *v5;
  }
  else
  {
    sub_100020E50();
    a1[1] = v4;
    a1[2] = v6;
  }
  sub_100020E78();
}

void _s12SidecarRelay13MutablePacketVwca_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      sub_100020E50();
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v9;
      sub_100006C30(v10, v11);
      goto LABEL_8;
    }
    sub_100020AA8(a1 + 8);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *v7 = *v8;
    goto LABEL_8;
  }
  sub_100020E50();
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
LABEL_8:
  sub_100020E78();
}

void _s12SidecarRelay13MutablePacketVwta_0(uint64_t a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2 + 1;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    v7 = a2[2];
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v5;
      *(_QWORD *)(a1 + 16) = v7;
      sub_100006C30(v8, v6);
      goto LABEL_6;
    }
    sub_100020AA8(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
LABEL_6:
  sub_100020E78();
}

ValueMetadata *type metadata accessor for Packet()
{
  return &type metadata for Packet;
}

unint64_t sub_100020CC0(uint64_t a1)
{
  unint64_t result;

  result = sub_100020CE4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100020CE4()
{
  unint64_t result;

  result = qword_100092540;
  if (!qword_100092540)
  {
    result = swift_getWitnessTable(&unk_100071F74, &type metadata for MutablePacket);
    atomic_store(result, (unint64_t *)&qword_100092540);
  }
  return result;
}

unint64_t sub_100020D20(uint64_t a1)
{
  unint64_t result;

  result = sub_100020D44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100020D44()
{
  unint64_t result;

  result = qword_100092548;
  if (!qword_100092548)
  {
    result = swift_getWitnessTable(&unk_100071F9C, &type metadata for MutablePacket);
    atomic_store(result, (unint64_t *)&qword_100092548);
  }
  return result;
}

unint64_t sub_100020D80(uint64_t a1)
{
  unint64_t result;

  result = sub_100020DA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100020DA4()
{
  unint64_t result;

  result = qword_100092550;
  if (!qword_100092550)
  {
    result = swift_getWitnessTable(&unk_100071F4C, &type metadata for Packet);
    atomic_store(result, (unint64_t *)&qword_100092550);
  }
  return result;
}

void sub_100020DE8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 10;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100020DF8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, char a4)
{
  return swift_dynamicCast(&a3, &a4, a2 + 8, a1, 6);
}

void sub_100020E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t sub_100020E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

void sub_100020E24(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100020E30(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
    return a9;
  else
    return 0;
}

void sub_100020E48()
{
  void *v0;

}

uint64_t sub_100020E50()
{
  unint64_t v0;
  uint64_t *v1;

  return sub_1000120BC(*v1, v0);
}

void sub_100020E60(id a1)
{

}

uint64_t sub_100020E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(v2 - 144, v0, v1);
}

void sub_100020E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

void sub_100020EA8()
{
  uint64_t v0;
  uint64_t v1;

  sub_100021758(v1 - 160, v0, (_OWORD *)(v1 - 120));
}

NSNumber sub_100020ED0()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_100020ED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

uint64_t sub_100020EE4@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_100020EF0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_100020F08(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  sub_1000183F4(a1, 0, a3);
}

uint64_t sub_100020F28()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100092558);
  sub_100006CAC(v0, (uint64_t)qword_100092558);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000025, 0x8000000100072000);
}

_QWORD *sub_100020FA4(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1[2] = a1;
  v1[3] = 0;
  v3 = type metadata accessor for EnhancedDiscoveryController();
  v4 = swift_allocObject(v3, 33, 7);
  *(_BYTE *)(v4 + 32) = 1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = 0;
  v1[4] = v4;
  v5 = a1;
  return v1;
}

void sub_100020FF0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, id), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD, id);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v38 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char **)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000912B0 != -1)
    swift_once(&qword_1000912B0, sub_100020F28);
  v13 = type metadata accessor for Logger(0);
  sub_100006CAC(v13, (uint64_t)qword_100092558);
  swift_bridgeObjectRetain_n(a2, 2);
  v14 = swift_bridgeObjectRetain_n(a1, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v34 = v10;
    v18 = v17;
    v19 = swift_slowAlloc(64, -1);
    v40 = v19;
    *(_DWORD *)v18 = 136315394;
    v36 = a3;
    v20 = swift_bridgeObjectRetain(a1);
    v33 = (char *)&type metadata for Any + 8;
    v21 = Dictionary.description.getter(v20, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v37 = a4;
    v22 = v21;
    v35 = v9;
    v24 = v23;
    swift_bridgeObjectRelease(a1);
    v39 = sub_100015FFC(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4, v18 + 12);
    sub_100012DD8(a1);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v18 + 12) = 2080;
    v39 = a2;
    swift_bridgeObjectRetain(a2);
    v25 = sub_100010F40(&qword_100092648);
    v26 = String.init<A>(describing:)(&v39, v25);
    v28 = v27;
    v39 = sub_100015FFC(v26, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 14, v18 + 22);
    sub_100012DD8(a2);
    v29 = v28;
    a3 = v36;
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Handling remote initiation request. Request: [%s. Options: [%s]", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, v33);
    sub_100006D04(v19);
    v30 = v18;
    v10 = v34;
    sub_100006D04(v30);

  }
  else
  {

    sub_100012DD8(a2);
    sub_100012DD8(a1);
  }
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter();
  v31 = v38;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v38 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v10);
  v32 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v12, v10);
  if ((v32 & 1) != 0)
    sub_100021320(-999, 0xD000000000000042, 0x800000010006F430, a3);
  else
    __break(1u);
}

void sub_100021320(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, id))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;

  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v10 = v9;
  swift_bridgeObjectRetain(a3);
  v11 = sub_10001F230(v8, v10, a1, a2, a3, 0);
  if (qword_1000912B0 != -1)
    swift_once(&qword_1000912B0, sub_100020F28);
  v12 = type metadata accessor for Logger(0);
  sub_100006CAC(v12, (uint64_t)qword_100092558);
  v13 = v11;
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (_QWORD *)swift_slowAlloc(8, -1);
    v22 = v13;
    *(_DWORD *)v17 = 138412290;
    v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4, v17 + 12);
    *v21 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Error encountered: [%@].", v17, 0xCu);
    v19 = sub_100010F40((uint64_t *)&unk_100092180);
    swift_arrayDestroy(v21, 1, v19);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v20 = v13;
  a4(0, 0, v13);

}

uint64_t sub_100021578()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_1000215A4()
{
  uint64_t v0;

  sub_100021578();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationRequestHandler()
{
  return objc_opt_self(_TtC12SidecarRelay37RemoteDisplayInitiationRequestHandler);
}

void sub_1000215E4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, id), uint64_t a4)
{
  sub_100020FF0(a1, a2, a3, a4);
}

void sub_100021604(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  sub_10001EFE4();
  v4 = a2;
  v3(a2);
  sub_100048718();
  sub_100012EB8(v4);
}

void sub_100021644()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _BYTE v10[24];

  sub_100048E4C();
  sub_100012DD0(v0 + 144, (uint64_t)v10, 33);
  v2 = (void *)sub_10003A638(v1);
  swift_endAccess(v10);

  if (v2)
  {
    sub_100012E50(v3, (unint64_t *)&qword_100091750, NSError_ptr);
    v4 = sub_1000491C4();
    sub_10001C87C((uint64_t)&type metadata for Relay.RelayError, v4);
    *v5 = 0;
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_1000132FC();
    v9 = sub_10004887C(v6, v7, -101, 17, v8);
    sub_1000486E8();

  }
}

void sub_100021714(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_100049138(a1, a2), (v7 & 1) != 0))
  {
    sub_100048BB4(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100005E8C();
  }
}

void sub_100021758(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100039948(a1), (v6 & 1) != 0))
  {
    sub_100048BB4(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_100005E8C();
  }
}

void sub_1000217A0(Swift::UInt a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = 0uLL;
  if (*(_QWORD *)(a4 + 16))
  {
    v8 = sub_100039BA0(a1, a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a4 + 56) + 40 * v8;
      v14 = *(_OWORD *)v10;
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = swift_retain(*(_QWORD *)(v10 + 32));
      v6 = v14;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v6 = 0uLL;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  *(_OWORD *)a5 = v6;
  *(_QWORD *)(a5 + 16) = v11;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = v13;
  sub_10001313C();
}

uint64_t sub_10002182C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 16) && (sub_100039C88(), (v2 & 1) != 0))
  {
    v3 = sub_1000133E0();
    sub_100048B80(v3, v4, _s7SessionC8IdentityVMa);
    v5 = sub_100049208();
  }
  else
  {
    _s7SessionC8IdentityVMa(0);
    v5 = sub_1000489F8();
  }
  return sub_100048444(v5, v6, v7, v8);
}

void sub_100021890(uint64_t a1, uint64_t a2)
{
  sub_10002189C(a1, a2, (uint64_t (*)(void))sub_100039C88);
}

void sub_10002189C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = a3();
    if ((v5 & 1) != 0)
      swift_retain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v4));
  }
  sub_100005E8C();
}

uint64_t sub_1000218D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a3 + 16) && (sub_100049138(a1, a2), (v3 & 1) != 0))
  {
    v4 = type metadata accessor for CompanionLinkDevice(0);
    sub_100048B80(v4, v5, type metadata accessor for CompanionLinkDevice);
    v6 = sub_100049208();
  }
  else
  {
    type metadata accessor for CompanionLinkDevice(0);
    v6 = sub_1000489F8();
  }
  return sub_100048444(v6, v7, v8, v9);
}

uint64_t sub_100021938(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = sub_100039948(a1), (v4 & 1) != 0))
    return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  else
    return 0;
}

void sub_100021978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_100049138(a1, a2);
    if ((v5 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4));
  }
  sub_100005E8C();
}

id sub_1000219B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSString v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD v23[4];
  uint64_t v24;
  unint64_t v25;

  RapportStreamSession.streamID.getter();
  if (!v4)
    goto LABEL_4;
  v5 = v3;
  v6 = v4;
  v24 = 58;
  v25 = 0xE100000000000000;
  v7 = __chkstk_darwin(v3);
  v23[2] = &v24;
  sub_100048D94(v7, v8);
  v9 = sub_1000382D8(1, 0, sub_1000482EC, (uint64_t)v23, v5, v6);
  sub_1000484EC();
  sub_1000360E4(v9);
  v11 = v10;
  v3 = sub_10001324C();
  if (v11)
  {
    v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    v13 = sub_100048988();
    static String._fromSubstring(_:)(v13);
    sub_10001300C();
    sub_100048988();
    v14 = String._bridgeToObjectiveC()();
    sub_10001320C();
    v15 = *(id *)(a1 + 16);
    v16 = objc_msgSend(v12, "initWithIdentifier:rapportStream:", v14, v15, v24, v25);

    sub_1000130A8();
  }
  else
  {
LABEL_4:
    sub_100012E50(v3, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_1000132FC();
    v16 = sub_10001F230(v17, v18, -1001, 0xD000000000000022, v19, 0);
    v20 = v16;
    swift_willThrow(v20, v21);

    sub_1000130A8();
  }
  return v16;
}

void sub_100021B90(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
    _s7SessionC8IdentityVMa(0);
  sub_100005E8C();
}

void sub_100021BF8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[24];

  sub_100012DD0(v0 + 72, (uint64_t)v2, 0);
  v1 = sub_1000133A4();
  sub_100048FA8(v1);
  sub_100012E98();
  sub_100048DDC();
}

void sub_100021C3C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  void *v39;
  int64_t v40;
  _QWORD v41[5];
  unint64_t v42;

  v39 = a2;
  v3 = sub_100010F40(&qword_100092DE0);
  v4 = __chkstk_darwin(v3);
  v35 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v38 = (uint64_t)&v32 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - v8;
  v42 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100045618(a1, v41);
  v10 = v41[0];
  v40 = v41[3];
  v11 = v41[4];
  v36 = v41[1];
  v37 = (unint64_t)(v41[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v33 = v10;
  v34 = v9;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v40 << 6);
      goto LABEL_20;
    }
    v14 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    v15 = v39;
    if (v14 >= v37)
      goto LABEL_25;
    v16 = *(_QWORD *)(v36 + 8 * v14);
    v17 = v40 + 1;
    if (!v16)
    {
      v17 = v40 + 2;
      if (v40 + 2 >= v37)
        goto LABEL_25;
      v16 = *(_QWORD *)(v36 + 8 * v17);
      if (!v16)
      {
        v17 = v40 + 3;
        if (v40 + 3 >= v37)
          goto LABEL_25;
        v16 = *(_QWORD *)(v36 + 8 * v17);
        if (!v16)
        {
          v17 = v40 + 4;
          if (v40 + 4 >= v37)
            goto LABEL_25;
          v16 = *(_QWORD *)(v36 + 8 * v17);
          if (!v16)
          {
            v17 = v40 + 5;
            if (v40 + 5 >= v37)
              goto LABEL_25;
            v16 = *(_QWORD *)(v36 + 8 * v17);
            if (!v16)
            {
              v18 = v40 + 6;
              while (v18 < v37)
              {
                v16 = *(_QWORD *)(v36 + 8 * v18++);
                if (v16)
                {
                  v17 = v18 - 1;
                  goto LABEL_19;
                }
              }
LABEL_25:
              swift_release(v10);

              return;
            }
          }
        }
      }
    }
LABEL_19:
    v11 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v17 << 6);
    v40 = v17;
LABEL_20:
    v19 = *(_QWORD *)(v10 + 48);
    v20 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v13, (uint64_t)v9, _s7SessionC8IdentityVMa);
    v21 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v13);
    *(_QWORD *)&v9[*(int *)(v3 + 48)] = v21;
    v22 = v38;
    sub_100046F20((uint64_t)v9, v38, &qword_100092DE0);
    v23 = *(_QWORD *)(v22 + *(int *)(v3 + 48));
    swift_retain(v21);
    sub_1000291C4();
    if ((v24 & 1) != 0)
    {
      v25 = v3;
      v26 = *(int *)(v3 + 48);
      v27 = v35;
      sub_10003EB64(v22, v35, _s7SessionC8IdentityVMa);
      *(_QWORD *)(v27 + v26) = v23;
      swift_retain(v23);
      sub_10003EB40();
      sub_1000470BC(v22, &qword_100092DE0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v30 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v29 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v30 >= v29 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v23);
      specialized Array._endMutation()(v31);
      v3 = v25;
      v10 = v33;
      v9 = v34;
    }
    else
    {
      sub_1000470BC(v22, &qword_100092DE0);
    }
  }
  __break(1u);
}

void sub_100021F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD v46[5];
  unint64_t v47;

  v44 = a3;
  v42 = a2;
  v4 = sub_100010F40(&qword_100092DE0);
  v5 = __chkstk_darwin(v4);
  v41 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v38 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v38 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v47 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100045618(a1, v46);
  v43 = v46[0];
  v45 = v46[3];
  v15 = v46[4];
  v39 = v46[1];
  v40 = (unint64_t)(v46[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v45 << 6);
LABEL_20:
    v22 = v43;
    v23 = *(_QWORD *)(v43 + 48);
    v24 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v17, (uint64_t)v14, _s7SessionC8IdentityVMa);
    v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v17);
    *(_QWORD *)&v14[*(int *)(v4 + 48)] = v25;
    sub_100046F20((uint64_t)v14, (uint64_t)v12, &qword_100092DE0);
    v26 = *(int *)(v4 + 48);
    sub_10003EB64((uint64_t)v12, (uint64_t)v9, _s7SessionC8IdentityVMa);
    v27 = *(_QWORD *)&v12[v26];
    *(_QWORD *)&v9[v26] = v27;
    v28 = (_QWORD *)(v27 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    v29 = v28[1];
    if (*v28 == v42 && v29 == v44)
    {
      swift_retain(v25);
      sub_10003EB40();
LABEL_27:
      v32 = *(int *)(v4 + 48);
      v33 = v41;
      sub_10003EB64((uint64_t)v12, v41, _s7SessionC8IdentityVMa);
      v34 = *(_QWORD *)&v12[v26];
      *(_QWORD *)(v33 + v32) = v34;
      swift_retain(v34);
      sub_10003EB40();
      sub_1000470BC((uint64_t)v12, &qword_100092DE0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v36 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v35 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v36 >= v35 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
      specialized Array._endMutation()(v37);
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v42, v44, 0);
      swift_retain(v25);
      sub_10003EB40();
      if ((v31 & 1) != 0)
        goto LABEL_27;
      sub_1000470BC((uint64_t)v12, &qword_100092DE0);
    }
  }
  v18 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    if (v18 >= v40)
      goto LABEL_30;
    v19 = *(_QWORD *)(v39 + 8 * v18);
    v20 = v45 + 1;
    if (!v19)
    {
      v20 = v45 + 2;
      if (v45 + 2 >= v40)
        goto LABEL_30;
      v19 = *(_QWORD *)(v39 + 8 * v20);
      if (!v19)
      {
        v20 = v45 + 3;
        if (v45 + 3 >= v40)
          goto LABEL_30;
        v19 = *(_QWORD *)(v39 + 8 * v20);
        if (!v19)
        {
          v20 = v45 + 4;
          if (v45 + 4 >= v40)
            goto LABEL_30;
          v19 = *(_QWORD *)(v39 + 8 * v20);
          if (!v19)
          {
            v20 = v45 + 5;
            if (v45 + 5 >= v40)
              goto LABEL_30;
            v19 = *(_QWORD *)(v39 + 8 * v20);
            if (!v19)
            {
              v21 = v45 + 6;
              while (v21 < v40)
              {
                v19 = *(_QWORD *)(v39 + 8 * v21++);
                if (v19)
                {
                  v20 = v21 - 1;
                  goto LABEL_19;
                }
              }
LABEL_30:
              swift_release(v43);
              swift_bridgeObjectRelease(v44);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
    v45 = v20;
    goto LABEL_20;
  }
  __break(1u);
}

void sub_100022330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Strong;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[6];
  unint64_t v73;

  v57 = a3;
  v63 = a2;
  v64 = a4;
  v70 = sub_100010F40(&qword_100092DE0);
  v5 = __chkstk_darwin(v70);
  v59 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v56 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v56 - v11;
  v13 = __chkstk_darwin(v10);
  v68 = (uint64_t)&v56 - v14;
  v15 = __chkstk_darwin(v13);
  v66 = (uint64_t)&v56 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v56 - v18;
  __chkstk_darwin(v17);
  v65 = (uint64_t)&v56 - v20;
  v73 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100045618(a1, v72);
  v67 = v72[0];
  v69 = v72[3];
  v21 = v72[4];
  v61 = v72[1];
  v62 = (unint64_t)(v72[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v58 = v12;
  v60 = v9;
  while (1)
  {
    if (v21)
    {
      v71 = (v21 - 1) & v21;
      v22 = __clz(__rbit64(v21)) | (v69 << 6);
      goto LABEL_20;
    }
    v23 = v69 + 1;
    if (__OFADD__(v69, 1))
      break;
    if (v23 >= v62)
      goto LABEL_39;
    v24 = *(_QWORD *)(v61 + 8 * v23);
    v25 = v69 + 1;
    if (!v24)
    {
      v25 = v69 + 2;
      if (v69 + 2 >= v62)
        goto LABEL_39;
      v24 = *(_QWORD *)(v61 + 8 * v25);
      if (!v24)
      {
        v25 = v69 + 3;
        if (v69 + 3 >= v62)
          goto LABEL_39;
        v24 = *(_QWORD *)(v61 + 8 * v25);
        if (!v24)
        {
          v25 = v69 + 4;
          if (v69 + 4 >= v62)
            goto LABEL_39;
          v24 = *(_QWORD *)(v61 + 8 * v25);
          if (!v24)
          {
            v25 = v69 + 5;
            if (v69 + 5 >= v62)
              goto LABEL_39;
            v24 = *(_QWORD *)(v61 + 8 * v25);
            if (!v24)
            {
              v26 = v69 + 6;
              while (v26 < v62)
              {
                v24 = *(_QWORD *)(v61 + 8 * v26++);
                if (v24)
                {
                  v25 = v26 - 1;
                  goto LABEL_19;
                }
              }
LABEL_39:
              swift_release(v67);
              swift_release(v63);
              swift_bridgeObjectRelease(v64);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v71 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    v69 = v25;
LABEL_20:
    v27 = v67;
    v28 = *(_QWORD *)(v67 + 48);
    v29 = _s7SessionC8IdentityVMa(0);
    v30 = v65;
    sub_10003EB64(v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v22, v65, _s7SessionC8IdentityVMa);
    v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v22);
    v32 = v70;
    *(_QWORD *)(v30 + *(int *)(v70 + 48)) = v31;
    sub_100046F20(v30, (uint64_t)v19, &qword_100092DE0);
    v33 = *(int *)(v32 + 48);
    v34 = v66;
    sub_10003EB64((uint64_t)v19, v66, _s7SessionC8IdentityVMa);
    v35 = *(_QWORD *)&v19[v33];
    *(_QWORD *)(v34 + v33) = v35;
    Strong = swift_weakLoadStrong(v35 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
    swift_retain(v31);
    sub_10003EB40();
    if (Strong)
    {
      swift_release(Strong);
      v37 = Strong == v63;
    }
    else
    {
      v37 = 0;
    }
    v38 = *(int *)(v32 + 48);
    v39 = v68;
    sub_10003EB64((uint64_t)v19, v68, _s7SessionC8IdentityVMa);
    v40 = *(_QWORD *)&v19[v33];
    *(_QWORD *)(v39 + v38) = v40;
    if (!v37)
    {
      swift_retain(v40);
      sub_1000470BC(v39, &qword_100092DE0);
      v21 = v71;
      goto LABEL_32;
    }
    v41 = *(int *)(v32 + 48);
    sub_10003EB64(v39, (uint64_t)v12, _s7SessionC8IdentityVMa);
    *(_QWORD *)&v12[v41] = v40;
    v42 = (uint64_t)v60;
    if (!v64)
    {
      swift_retain_n(v40, 2);
      sub_1000470BC((uint64_t)v12, &qword_100092DE0);
      sub_1000470BC(v39, &qword_100092DE0);
LABEL_35:
      v21 = v71;
      goto LABEL_36;
    }
    v43 = *(int *)(v32 + 48);
    sub_10003EB64((uint64_t)v12, (uint64_t)v60, _s7SessionC8IdentityVMa);
    v44 = v64;
    *(_QWORD *)(v42 + v43) = v40;
    v45 = *(_QWORD *)(v40 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    v46 = *(_QWORD *)(v40 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
    if (v45 == v57 && v46 == v44)
    {
      swift_retain_n(v40, 2);
      swift_bridgeObjectRetain(v46);
      sub_1000470BC((uint64_t)v12, &qword_100092DE0);
      sub_1000470BC(v68, &qword_100092DE0);
      swift_bridgeObjectRelease(v46);
      sub_10003EB40();
      goto LABEL_35;
    }
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, *(_QWORD *)(v40 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8), v57, v44, 0);
    swift_retain_n(v40, 2);
    swift_bridgeObjectRetain(v46);
    sub_1000470BC((uint64_t)v12, &qword_100092DE0);
    sub_1000470BC(v68, &qword_100092DE0);
    swift_bridgeObjectRelease(v46);
    sub_10003EB40();
    v21 = v71;
    if ((v48 & 1) != 0)
    {
LABEL_36:
      v49 = *(int *)(v70 + 48);
      v50 = v59;
      sub_10003EB64((uint64_t)v19, v59, _s7SessionC8IdentityVMa);
      v51 = *(_QWORD *)&v19[v33];
      *(_QWORD *)(v50 + v49) = v51;
      swift_retain(v51);
      sub_10003EB40();
      sub_1000470BC((uint64_t)v19, &qword_100092DE0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
      v54 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v53 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v54 >= v53 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
      v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
      specialized Array._endMutation()(v55);
      v12 = v58;
    }
    else
    {
LABEL_32:
      sub_1000470BC((uint64_t)v19, &qword_100092DE0);
    }
  }
  __break(1u);
}

#error "100022968: call analysis failed (funcsize=230)"

void sub_100022C8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  int v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Strong;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  NSObject *v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  id v97;
  char *v98;
  char *v99;
  uint64_t v100;
  _QWORD v101[2];
  uint8_t *v102;
  uint64_t v103[3];

  sub_100012D54();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_1000484C0();
  sub_100013118();
  __chkstk_darwin(v8);
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1000133E0();
  sub_100013118();
  __chkstk_darwin(v11);
  sub_10001C898();
  v95 = v12;
  sub_10001C8E4();
  __chkstk_darwin(v13);
  sub_100048730();
  v97 = v14;
  sub_10001C8E4();
  __chkstk_darwin(v15);
  v17 = (char *)&v89 - v16;
  v18 = sub_100012DA8();
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100048514();
  v98 = v17;
  v96 = v3;
  if (v5)
  {
    swift_errorRetain(v5);
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v20 = sub_100006CAC(v18, (uint64_t)qword_10009A198);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v0, v20, v18);
    __chkstk_darwin(v21);
    sub_1000489C8();
    *(_QWORD *)(v22 - 16) = v5;
    sub_1000183F4(sub_100042DE8, v7, sub_100012D04);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v18);
    swift_errorRelease(v5);
    if ((v3 & 1) != 0)
LABEL_5:
      sub_10002A074(v5);
  }
  else
  {
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    sub_100006CAC(v18, (uint64_t)qword_10009A198);
    v60 = sub_100012F20(v7);
    Logger.logObject.getter(v60);
    v61 = sub_1000491E0();
    if (os_log_type_enabled((os_log_t)&off_100091000, v61))
    {
      v62 = sub_100006D24(12);
      v99 = v10;
      v63 = (uint8_t *)v62;
      v64 = sub_100006D24(32);
      v93 = v0;
      v65 = v64;
      v103[0] = v64;
      *(_DWORD *)v63 = 136446210;
      v92 = v63 + 4;
      sub_100048968();
      v66 = sub_100028E50();
      sub_100013014();
      v100 = sub_100018854(v66, v67, v103);
      LOBYTE(v3) = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v92, v63 + 12);
      sub_100012DE8(v7);
      sub_100012E98();
      sub_10001C890((void *)&_mh_execute_header, &off_100091000, v61, "%{public}s: Close Session", v63);
      sub_10001C888(v65, v68, (uint64_t)&type metadata for Any + 8);
      v69 = v65;
      v1 = v93;
      sub_100006D04(v69);
      v70 = (uint64_t)v63;
      v10 = v99;
      sub_100006D04(v70);

    }
    else
    {

      sub_100012DE8(v7);
    }
    v17 = v98;
    if ((v3 & 1) != 0)
      goto LABEL_5;
  }
  sub_10002A18C();
  sub_10002EF6C(v7);
  v23 = v7 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  sub_10002ED2C();
  v99 = (char *)v23;
  sub_10003EB64(v23, (uint64_t)v17, _s7SessionC8IdentityVMa);
  v24 = (uint64_t *)(v1 + 152);
  sub_100012DD0(v1 + 152, (uint64_t)v103, 0);
  v25 = *(_QWORD *)(v1 + 152);
  v26 = "Fatal error";
  if (*(_QWORD *)(v25 + 16))
  {
    sub_100013070();
    v27 = sub_100039A4C((uint64_t)v17);
    if ((v28 & 1) != 0)
    {
      v29 = v27;
      v93 = v1;
      v30 = *(unsigned int *)(v25 + 36);
      sub_10001320C();
      v31 = v97;
      v32 = sub_10002F04C(v97, v29, v30, 0, *v24);
      sub_100048B4C();
      if (*((_BYTE *)v32 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect) == 1)
      {
        if (qword_1000912D0 != -1)
          swift_once(&qword_1000912D0, sub_100026680);
        v33 = sub_100006CAC(v18, (uint64_t)qword_10009A198);
        v34 = v95;
        sub_10003EB64((uint64_t)v17, v95, _s7SessionC8IdentityVMa);
        v35 = (char *)v32;
        Logger.logObject.getter(v35);
        v36 = sub_100012FF0();
        if (sub_100048ED0(v33))
        {
          v37 = sub_100006D24(18);
          v92 = (uint8_t *)sub_100006D24(32);
          v102 = v92;
          *(_DWORD *)v37 = 136446466;
          v91 = v33;
          v38 = sub_100050048();
          v40 = v39;
          v41 = *(int *)(v94 + 20);
          v42 = *(_BYTE *)(v34 + *(int *)(v94 + 24)) == 0;
          v90 = v35;
          v43 = v10;
          if (v42)
            v44 = 0x6C61636F6CLL;
          else
            v44 = 0x65746F6D6572;
          LODWORD(v94) = v36;
          if (v42)
            v45 = (void *)0xE500000000000000;
          else
            v45 = (void *)0xE600000000000000;
          v89 = v37 + 4;
          v100 = *(_QWORD *)(v34 + v41);
          sub_10001216C();
          sub_100049280((uint64_t)&v100);
          v47 = v46;
          v100 = v38;
          v101[0] = v40;
          sub_100012EDC();
          v48._countAndFlagsBits = v44;
          v10 = v43;
          v48._object = v45;
          String.append(_:)(v48);
          sub_1000484EC();
          sub_100012EDC();
          v49._countAndFlagsBits = sub_100049074();
          String.append(_:)(v49);
          swift_bridgeObjectRelease(v47);
          v100 = sub_100018854(v100, v50, (uint64_t *)&v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v89, v37 + 12);
          sub_100012E98();
          sub_10003EB40();
          v51 = v37;
          *(_WORD *)(v37 + 12) = 1024;
          v52 = v37 + 14;
          v53 = v90;
          v54 = *(_DWORD *)&v90[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

          v55 = v53;
          LODWORD(v100) = v54;
          v56 = v52;
          v26 = "Fatal error";
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v56, v51 + 18);

          v57 = v91;
          sub_1000490CC((void *)&_mh_execute_header, v91, (os_log_type_t)v94, "%{public}s: Allow Session Reconnect to Service Provider PID %d");
          v58 = (uint64_t)v92;
          sub_10001C888((uint64_t)v92, v59, (uint64_t)&type metadata for Any + 8);
          sub_100006D04(v58);
          sub_100006D04(v51);

        }
        else
        {

          sub_100048B4C();
        }
      }
      else
      {
        sub_100012DD0((uint64_t)v24, (uint64_t)&v100, 33);
        v71 = sub_100010F40((uint64_t *)&unk_100092DC0);
        Dictionary._Variant.remove(at:)(v31, &v102, v29, v30, 0, v71);
        v72 = v102;
        sub_100048E94();

        v26 = "Fatal error";
        sub_100048B4C();
      }
    }
    else
    {
      sub_10001320C();
    }
  }
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  sub_100006CAC(v18, (uint64_t)qword_10009A198);
  v73 = sub_100012F20(v7);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter();
  if (sub_100048DD4(v74))
  {
    v76 = sub_100006D24(18);
    v77 = sub_100006D24(32);
    v100 = v77;
    *(_DWORD *)v76 = *((_QWORD *)v26 + 192);
    sub_100048968();
    sub_100028E50();
    v78 = v10;
    v80 = v79;
    v81 = sub_100013014();
    v102 = (uint8_t *)sub_10004923C(v81, v82, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v76 + 4, v76 + 12);
    sub_100012DE8(v7);
    v83 = v80;
    v10 = v78;
    swift_bridgeObjectRelease(v83);
    *(_WORD *)(v76 + 12) = 1024;
    LODWORD(v102) = v96 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 4, v76 + 14, v76 + 18);
    sub_1000490CC((void *)&_mh_execute_header, v74, v75, "%{public}s: Close Session (Send Disconnect: %{BOOL}d)");
    sub_10001C888(v77, v84, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v77);
    sub_100006D04(v76);

  }
  else
  {

    sub_100012DE8(v7);
  }
  sub_10002F194();
  v85 = v7 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession;
  Strong = swift_weakLoadStrong(v7 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
  if (Strong)
  {
    v87 = Strong;
    swift_weakAssign(v85, 0);
    sub_10002C6B4(v87);
    v88 = (uint64_t)v97;
    sub_10003EB64((uint64_t)v99, (uint64_t)v97, _s7SessionC8IdentityVMa);
    sub_1000456D4(v88, (uint64_t)v10, type metadata accessor for SidecarIdentity);
    sub_100048A24();
    sub_10002E9F4();
    sub_100048558();
    sub_10004903C();
    sub_10003EB40();
  }
  sub_10003EB40();
  sub_100012D28();
}

uint64_t sub_100023508(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _UNKNOWN **v42;
  uint64_t v43;

  v43 = a7;
  type metadata accessor for RapportStreamSession();
  RapportStreamSession.__allocating_init()();
  v13 = v12;
  RapportStreamSession.delegatedProcessUPID.setter(a4);
  Strong = swift_weakLoadStrong(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
  if (Strong)
  {
    v15 = Strong;
    v41 = type metadata accessor for RapportRemoteDisplaySession();
    v42 = &protocol witness table for RapportRemoteDisplaySession;
    v39 = v15;
    sub_100048B1C();
    RapportStreamSession.messenger.setter((uint64_t)&v39);
    swift_release(v15);
    v16 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    v39 = *(_QWORD *)(v16 + *(int *)(_s7SessionC8IdentityVMa(0) + 20));
    sub_100011E6C();
    sub_100013130();
    v39 = String.init<A>(_:radix:uppercase:)(v17, v18, v19);
    v40 = v20;
    sub_100048D94(v39, v20);
    v21._countAndFlagsBits = 58;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    sub_1000484EC();
    sub_100048544();
    v22._countAndFlagsBits = sub_100048F54();
    String.append(_:)(v22);
    sub_1000484EC();
    RapportStreamSession.streamID.setter(v39, v40);
    if ((unint64_t)(a2 - 1) < 3)
      v23 = a2;
    else
      v23 = 0;
    RapportStreamSession.streamType.setter(v23);
    v24 = RapportStreamSession.streamFlags.getter();
    v25 = 0;
    if ((a3 & 2) != 0)
      v25 = *(_QWORD *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
    RapportStreamSession.streamFlags.setter(v25 | v24);
    v26 = RapportStreamSession.trafficFlags.getter();
    RapportStreamSession.trafficFlags.setter(v26 & 0xFFFFBDFF);
    v27 = (_QWORD *)sub_100014AC4((uint64_t)&unk_100087058, 40);
    v27[2] = v43;
    v27[3] = a8;
    v27[4] = v13;
    sub_100048968();
    sub_1000130A0();
    RapportStreamSession.prepare(completion:)((uint64_t)sub_100046F68, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
    sub_1000130A8();
    v34 = v27;
  }
  else
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v35, v36, -1020);
    sub_10004854C();
    v34 = v13;
  }
  return swift_release(v34);
}

void sub_100023730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  sub_100012D54();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000133E0();
  sub_100013118();
  __chkstk_darwin(v9);
  sub_100013234();
  sub_1000484C0();
  sub_100013118();
  __chkstk_darwin(v10);
  sub_1000130F4();
  __chkstk_darwin(v11);
  v13 = &v18[-v12 - 8];
  sub_10003EB64(v8 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v2, _s7SessionC8IdentityVMa);
  sub_1000456D4(v2, (uint64_t)v13, type metadata accessor for SidecarIdentity);
  sub_100012DD0(v0 + 136, (uint64_t)v18, 32);
  sub_10002189C((uint64_t)v13, *(_QWORD *)(v0 + 136), (uint64_t (*)(void))sub_1000399C4);
  v15 = v14;
  sub_10004875C();
  sub_10003EB64((uint64_t)v13, v1, type metadata accessor for SidecarIdentity);
  if (!v15)
  {
    v16 = type metadata accessor for Domain();
    sub_100014AC4(v16, 176);
    v15 = Domain.init()();
    sub_100012DD0(v0 + 136, (uint64_t)v18, 33);
    swift_retain(v15);
    sub_10003CC30();
    sub_10004875C();
  }
  sub_100048970();
  Domain.allocate(completion:)(v6, v4);
  sub_10002A344();
  swift_release(v15);
  sub_100048970();
  sub_100012D28();
}

void sub_1000238B8()
{
  uint64_t v0;
  uint64_t v1;
  int64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  char v45;
  char v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  int64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  NSUUID v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  NSUUID v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  NSUUID v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  Swift::String v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  int64_t v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  void *v218;
  NSUUID v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  void *v231;
  Swift::String v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  _QWORD *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  int64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  _QWORD *v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  void *v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v286;
  int v287;
  char v288;
  int64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  void (*v298)(_QWORD **, _QWORD);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  pid_t v303;
  unsigned __int8 v304;
  uint64_t v305;
  id v306;
  id v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  BOOL v315;
  BOOL v316;
  int64_t *v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  int64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  int64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v356;
  uint64_t v357[4];
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  char *v368;
  Swift::String v369;
  Swift::String v370;

  sub_100012D54();
  v322 = v2;
  v338 = sub_100010F40(&qword_100092E68);
  sub_100013118();
  __chkstk_darwin(v3);
  sub_10001C898();
  v337 = v4;
  sub_10001C8E4();
  __chkstk_darwin(v5);
  sub_100048730();
  v336 = v6;
  sub_10001C8E4();
  __chkstk_darwin(v7);
  sub_100048730();
  v335 = v8;
  sub_10001C8E4();
  __chkstk_darwin(v9);
  sub_100048730();
  v334 = v10;
  sub_10001C8E4();
  __chkstk_darwin(v11);
  sub_10001C8D8();
  v333 = v12;
  v332 = sub_100010F40(&qword_100092DE0);
  sub_100013118();
  __chkstk_darwin(v13);
  sub_10001C898();
  v331 = v14;
  sub_10001C8E4();
  __chkstk_darwin(v15);
  sub_100048730();
  v330 = v16;
  sub_10001C8E4();
  __chkstk_darwin(v17);
  sub_100048730();
  v329 = v18;
  sub_10001C8E4();
  __chkstk_darwin(v19);
  sub_100048730();
  v328 = v20;
  sub_10001C8E4();
  __chkstk_darwin(v21);
  sub_10001C8D8();
  v327 = v22;
  v345 = sub_100010F40(&qword_100092DD8);
  sub_100013118();
  __chkstk_darwin(v23);
  sub_10001C898();
  v326 = v24;
  sub_10001C8E4();
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v320 - v27;
  __chkstk_darwin(v26);
  sub_100048730();
  v344 = v29;
  sub_10001C8E4();
  __chkstk_darwin(v30);
  sub_100048730();
  v325 = v31;
  sub_10001C8E4();
  __chkstk_darwin(v32);
  sub_10001C8D8();
  v324 = v33;
  v343 = sub_100010F40(&qword_100093028);
  v34 = *(_QWORD *)(v343 - 8);
  __chkstk_darwin(v343);
  sub_10001C898();
  v342 = v35;
  sub_10001C8E4();
  __chkstk_darwin(v36);
  sub_10001C8D8();
  v341 = v37;
  v38 = sub_100012DD0(v0 + 160, (uint64_t)&v360, 0);
  v323 = v0;
  v39 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v39 + 16);
  v339 = v28;
  if (v40)
  {
    v321 = v34;
    v361 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v39);
    sub_100055C7C();
    v41 = v361;
    v42 = sub_100045770(v39);
    if ((v42 & 0x8000000000000000) == 0 && (v43 = v42, sub_100048C90(), v45 ^ v46))
    {
      v47 = v44;
      v48 = v39 + 64;
      v340 = v39 + 64;
      while (1)
      {
        v1 = 1 << v43;
        if ((*(_QWORD *)(v48 + 8 * (v43 >> 6)) & (1 << v43)) == 0)
          break;
        if (*(_DWORD *)(v39 + 36) != v47)
          goto LABEL_116;
        v346 = v40;
        v49 = *(_QWORD *)(v39 + 56);
        v50 = (int64_t *)(*(_QWORD *)(v39 + 48) + 16 * v43);
        v51 = v50[1];
        v348 = *v50;
        v52 = *(_QWORD *)(v49 + 8 * v43);
        if ((unint64_t)v52 >> 62)
        {
          if (v52 < 0)
            v58 = *(_QWORD *)(v49 + 8 * v43);
          else
            v58 = v52 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v51, 2);
          swift_bridgeObjectRetain(v52);
          v347 = _CocoaArrayWrapper.endIndex.getter(v58);
          sub_100012F54();
          sub_10004857C();
        }
        else
        {
          v347 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v51);
        }
        v361 = v41;
        v54 = *(_QWORD *)(v41 + 16);
        v53 = *(_QWORD *)(v41 + 24);
        if (v54 >= v53 >> 1)
        {
          sub_100048C5C(v53);
          sub_100055C7C();
          v41 = v361;
        }
        *(_QWORD *)(v41 + 16) = v54 + 1;
        v55 = (_QWORD *)(v41 + 24 * v54);
        v55[4] = v348;
        v55[5] = v51;
        v55[6] = v347;
        v56 = -1 << *(_BYTE *)(v39 + 32);
        if ((uint64_t)v43 >= -v56)
          goto LABEL_117;
        v48 = v340;
        if ((*(_QWORD *)(v340 + 8 * (v43 >> 6)) & v1) == 0)
          goto LABEL_118;
        if (*(_DWORD *)(v39 + 36) != v47)
          goto LABEL_119;
        v57 = _HashTable.occupiedBucket(after:)(v43, v340, ~v56);
        v40 = v346 - 1;
        if (v346 == 1)
        {
          v38 = sub_10001327C();
          v28 = v339;
          v34 = v321;
          goto LABEL_24;
        }
        v43 = v57;
        if ((v57 & 0x8000000000000000) == 0)
        {
          v47 = *(_DWORD *)(v39 + 36);
          if (v57 < 1 << *(_BYTE *)(v39 + 32))
            continue;
        }
        goto LABEL_114;
      }
    }
    else
    {
LABEL_114:
      __break(1u);
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
    __break(1u);
    goto LABEL_120;
  }
LABEL_24:
  sub_100049224(v38, &qword_100093090, (void (*)(uint64_t, uint64_t, void **))sub_10003F8E8);
  v321 = v59;
  v60 = v323;
  sub_100012DD0(v323 + 72, (uint64_t)&v359, 0);
  v61 = *(_QWORD *)(v60 + 72);
  swift_bridgeObjectRetain_n(v61, 2);
  v62 = sub_10003EE9C(v61);
  sub_1000132F4();
  v361 = (uint64_t)v62;
  sub_100038094(&v361, &qword_100093028, (uint64_t (*)(uint64_t))sub_100045A6C, (uint64_t (*)(_QWORD *))sub_1000407F0);
  v340 = 0;
  sub_1000132F4();
  v63 = v361;
  v1 = *(_QWORD *)(v361 + 16);
  if (v1)
  {
    v361 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100055C48();
    v64 = v63 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    v65 = *(_QWORD *)(v34 + 72);
    v346 = v63;
    v347 = v65;
    v66 = v361;
    v67 = v341;
    do
    {
      sub_100046EF4(v64, v67, &qword_100093028);
      v68 = v342;
      v69 = *(int *)(v343 + 48);
      sub_10003EB64(v67, v342, type metadata accessor for SidecarIdentity);
      v70 = v66;
      v71 = *(_QWORD *)(v67 + v69);
      *(_QWORD *)(v68 + v69) = v71;
      sub_10001EFE4();
      RapportRemoteDisplayDiscovery.description.getter();
      v348 = (int64_t)v72;
      v74 = v73;
      v75 = v71;
      v66 = v70;
      swift_release(v75);
      sub_100049074();
      sub_10003EB40();
      v76 = sub_100048988();
      sub_1000470BC(v76, v77);
      if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
      {
        sub_100048C74();
        sub_100048CA0();
        sub_100055C48();
        v66 = v361;
      }
      v79 = *(_QWORD *)(v66 + 16);
      v78 = *(_QWORD *)(v66 + 24);
      if (v79 >= v78 >> 1)
      {
        sub_100048C5C(v78);
        sub_100055C48();
        v66 = v361;
      }
      *(_QWORD *)(v66 + 16) = v79 + 1;
      v80 = v66 + 16 * v79;
      *(_QWORD *)(v80 + 32) = v348;
      *(_QWORD *)(v80 + 40) = v74;
      v64 += v347;
      --v1;
    }
    while (v1);
    v320 = (_QWORD *)v66;
    swift_release(v346);
    v28 = v339;
  }
  else
  {
    sub_100048558();
    v320 = _swiftEmptyArrayStorage;
  }
  v81 = v323;
  sub_100012DD0(v323 + 96, (uint64_t)&v358, 0);
  v82 = *(_QWORD *)(v81 + 96);
  v39 = *(_QWORD *)(v82 + 16);
  v83 = _swiftEmptyArrayStorage;
  if (v39)
  {
    v349 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v82);
    sub_100055C14();
    v84 = sub_100045770(v82);
    if ((v84 & 0x8000000000000000) == 0)
    {
      v85 = v84;
      sub_100048C90();
      if (v45 != v46)
      {
        v1 = v82 + 64;
        v341 = v82 + 64;
        v342 = v82;
        while ((*(_QWORD *)(v1 + 8 * (v85 >> 6)) & (1 << v85)) != 0)
        {
          if (*(_DWORD *)(v82 + 36) != (_DWORD)v86)
            goto LABEL_122;
          v347 = 1 << v85;
          v348 = v85 >> 6;
          v346 = v86;
          v343 = v39;
          v87 = v345;
          v88 = *(int *)(v345 + 48);
          v89 = *(_QWORD *)(v82 + 48);
          v90 = type metadata accessor for Relay.RapportSessionKey(0);
          sub_100049100();
          v92 = v324;
          sub_100048D30(v89 + v91 * v85, v324);
          v93 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v85);
          *(_QWORD *)(v92 + v88) = v93;
          v94 = v325;
          sub_100048D30(v92, v325);
          *(_QWORD *)(v94 + *(int *)(v87 + 48)) = v93;
          v95 = v94;
          v96 = v344;
          sub_100046F20(v95, v344, &qword_100092DD8);
          sub_100012F20(v93);
          v97 = sub_100049074();
          sub_1000470BC(v97, v98);
          v99 = *(int *)(v87 + 48);
          sub_100048D30(v96, (uint64_t)v28);
          *(_QWORD *)&v28[v99] = *(_QWORD *)(v96 + v99);
          v100 = *(_QWORD *)&v28[*(int *)(v90 + 20)];
          if (v100)
          {
            v101.super.isa = UUID._bridgeToObjectiveC()().super.isa;
            v102 = sub_100048E2C(v101.super.isa);

            v103 = 0xE400000000000000;
            v361 = 542327881;
            v362 = 0xE400000000000000;
            v357[0] = v102;
            sub_100011E6C();
            sub_100013130();
            v107._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v104, v105, v106);
            String.append(_:)(v107);
            sub_10001300C();
            sub_100012EDC();
            switch(v100)
            {
              case 1:
                v108 = 1279547201;
                break;
              case 2:
                v103 = 0xE300000000000000;
                v108 = 4346709;
                break;
              case 3:
                v108 = 1229343063;
                break;
              default:
                v108 = 0;
                v103 = 0xE000000000000000;
                break;
            }
            v114 = v103;
          }
          else
          {
            v109.super.isa = UUID._bridgeToObjectiveC()().super.isa;
            v110 = sub_100048E2C(v109.super.isa);

            v361 = 542327881;
            v362 = 0xE400000000000000;
            v357[0] = v110;
            sub_100011E6C();
            sub_100013130();
            v108 = String.init<A>(_:radix:uppercase:)(v111, v112, v113);
          }
          String.append(_:)(*(Swift::String *)&v108);
          sub_10001327C();
          v115 = v361;
          v1 = v362;
          sub_10003EB40();
          v116 = v344;
          v117 = *(int *)(v345 + 48);
          v118 = v326;
          sub_100048D30(v344, v326);
          *(_QWORD *)(v118 + v117) = *(_QWORD *)(v116 + v99);
          sub_10001EFE4();
          v39 = RapportRemoteDisplaySession.description.getter();
          v120 = v119;
          sub_100048718();
          sub_10003EB40();
          sub_1000470BC(v116, &qword_100092DD8);
          v83 = v349;
          if ((sub_100048E64() & 1) == 0)
          {
            sub_100048C74();
            sub_100048CA0();
            sub_100055C14();
            v83 = v349;
          }
          v122 = v83[2];
          v121 = v83[3];
          if (v122 >= v121 >> 1)
          {
            sub_100048C50(v121);
            sub_100055C14();
            v83 = v349;
          }
          v83[2] = v122 + 1;
          v123 = &v83[4 * v122];
          v123[4] = v115;
          v123[5] = v1;
          v123[6] = v39;
          v123[7] = v120;
          v82 = v342;
          sub_100048F6C();
          if (v45 == v46)
            goto LABEL_123;
          v1 = v341;
          if ((*(_QWORD *)(v341 + 8 * v348) & v347) == 0)
            goto LABEL_124;
          if (*(_DWORD *)(v82 + 36) != (_DWORD)v346)
            goto LABEL_125;
          v124 = sub_100049094();
          v127 = _HashTable.occupiedBucket(after:)(v124, v125, v126);
          v39 = v343 - 1;
          if (v343 == 1)
          {
            sub_10004857C();
            goto LABEL_63;
          }
          v85 = v127;
          v28 = v339;
          if ((v127 & 0x8000000000000000) == 0)
          {
            v86 = *(unsigned int *)(v82 + 36);
            if (v127 < 1 << *(_BYTE *)(v82 + 32))
              continue;
          }
          goto LABEL_120;
        }
        goto LABEL_121;
      }
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    swift_once(&qword_100091308, sub_1000504F8);
LABEL_111:
    sub_10001EFE4();
    v304 = sub_100050798();
    sub_100048718();
    v305 = v323;
    v306 = sub_100028888();
    v307 = RPErrorFlagsCopyDescription((unint64_t)v306);
    v308 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
    v310 = v309;

    v311 = *(_QWORD *)(v305 + 88);
    v312 = String.init(cString:)("341");
    v314 = v313;
    if (qword_100091310 != -1)
      swift_once(&qword_100091310, sub_100053BA0);
    v315 = v1 == 0;
    v316 = sub_100053AD4();
    LOBYTE(v349) = v315;
    v317 = v322;
    *v322 = v348;
    *((_DWORD *)v317 + 2) = v347;
    v317[2] = v345;
    v317[3] = v344;
    v317[4] = v321;
    *((_DWORD *)v317 + 10) = v346;
    *((_DWORD *)v317 + 11) = v39;
    *((_BYTE *)v317 + 48) = v315;
    *((_BYTE *)v317 + 49) = v304 & 1;
    v317[7] = (int64_t)v320;
    v317[8] = v308;
    v318 = v325;
    v317[9] = v310;
    v317[10] = v318;
    v317[11] = v324;
    v317[12] = v342;
    v317[13] = v343;
    *((_BYTE *)v317 + 112) = v311 != 0;
    v317[15] = v312;
    v317[16] = v314;
    *((_BYTE *)v317 + 136) = v316;
    v317[18] = v319;
    sub_100012D28();
    return;
  }
LABEL_63:
  sub_100049148((uint64_t)v83);
  v325 = v128;
  v129 = v323;
  v130 = sub_100013040();
  sub_100024D9C(v130);
  v132 = v131;
  sub_1000132F4();
  sub_100049148(v132);
  v324 = v133;
  v134 = sub_100012DD0(v129 + 120, (uint64_t)v357, 0);
  v135 = *(_QWORD *)(v129 + 120);
  v136 = *(_QWORD *)(v135 + 16);
  if (v136)
  {
    v356 = _swiftEmptyArrayStorage;
    sub_100048544();
    sub_100055BF8(0, v136, 0);
    v137 = sub_100045770(v135);
    v140 = v137;
    v141 = v138;
    v142 = v139 & 1;
    v326 = v135;
    v143 = v329;
    do
    {
      v347 = v140;
      v348 = v136;
      v144 = v332;
      v145 = *(int *)(v332 + 48);
      v146 = v327;
      v147 = sub_100048B24(v137, v138, v139, v142 & 1, v141);
      v152 = sub_10002F0F0(v147, v148, v149, v150, v151);
      *(_QWORD *)(v146 + v145) = v152;
      v153 = v328;
      sub_100048A80(v146, v328);
      *(_QWORD *)(v153 + *(int *)(v144 + 48)) = v152;
      sub_100046F20(v153, v143, &qword_100092DE0);
      sub_10001EFE4();
      sub_100049010();
      v154 = (void *)*(int *)(v144 + 48);
      sub_100048A80(v143, v330);
      v155.super.isa = sub_100048BFC().super.isa;
      v156 = sub_100048E2C(v155.super.isa);

      sub_100048C18();
      v355 = (_QWORD *)v156;
      sub_100011E6C();
      sub_100013130();
      v369._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v157, v158, v159);
      sub_100049068(v369);
      sub_10001320C();
      v160 = v349;
      v161 = v350;
      sub_100049198();
      sub_1000491FC();
      sub_100013130();
      v165 = String.init<A>(_:radix:uppercase:)(v162, v163, v164);
      v167 = v166;
      v349 = v160;
      v350 = v161;
      sub_100012EDC();
      sub_100048C38();
      sub_100012F54();
      sub_100012EDC();
      v168._countAndFlagsBits = v165;
      v168._object = v167;
      String.append(_:)(v168);
      sub_1000484EC();
      v342 = v350;
      v343 = (uint64_t)v349;
      sub_100048970();
      v169 = *(int *)(v144 + 48);
      v170 = v331;
      sub_10003EB64(v143, v331, _s7SessionC8IdentityVMa);
      *(_QWORD *)(v170 + v169) = *(_QWORD *)(v143 + v344);
      sub_10001EFE4();
      sub_100036848();
      sub_100048718();
      v171 = v361;
      v172 = v362;
      v173 = BYTE4(v362);
      v174 = v364;
      v344 = v363;
      v175 = v366;
      v340 = v367;
      v341 = v365;
      v339 = v368;
      sub_100048970();
      sub_1000470BC(v143, &qword_100092DE0);
      v176 = v356;
      if ((sub_100048E64() & 1) == 0)
      {
        sub_100048C74();
        v177 = (char *)sub_100048CA0();
        sub_100055BF8(v177, v178, v179);
        v176 = v356;
      }
      v181 = v176[2];
      v180 = v176[3];
      if (v181 >= v180 >> 1)
      {
        v194 = sub_100048C50(v180);
        sub_100055BF8((char *)v194, v181 + 1, 1);
        v176 = v356;
      }
      v176[2] = v181 + 1;
      v182 = &v176[10 * v181];
      v183 = v342;
      v182[4] = v343;
      v182[5] = v183;
      v182[6] = v171;
      *((_DWORD *)v182 + 14) = v172;
      *((_BYTE *)v182 + 60) = v173 & 1;
      v182[8] = v344;
      v182[9] = v174;
      v182[10] = v341;
      v182[11] = v175;
      v184 = v339;
      v182[12] = v340;
      v182[13] = v184;
      v185 = sub_100048A24();
      v186 = v345;
      v188 = sub_100045658(v185, v187, v345, v326);
      v190 = v189;
      v142 = v191 & 1;
      v192 = sub_100048A24();
      v137 = sub_1000121A8(v192, v193, v186);
      v140 = v188;
      v141 = v190;
      v136 = v348 - 1;
    }
    while (v348 != 1);
    sub_1000121A8(v188, v190, v142);
    v134 = sub_1000484EC();
  }
  sub_100049224(v134, &qword_100093068, (void (*)(uint64_t, uint64_t, void **))sub_10003F298);
  v342 = v195;
  v196 = v323;
  v197 = sub_100012DD0(v323 + 152, (uint64_t)&v356, 0);
  v198 = *(_QWORD *)(v196 + 152);
  v199 = *(_QWORD **)(v198 + 16);
  if (v199)
  {
    v355 = _swiftEmptyArrayStorage;
    sub_100048544();
    sub_100055BC4();
    v200 = sub_100045770(v198);
    v203 = v200;
    v204 = v201;
    v205 = v202 & 1;
    v343 = v198;
    do
    {
      v347 = v203;
      v348 = (int64_t)v199;
      v206 = v338;
      v207 = *(int *)(v338 + 48);
      v208 = v333;
      v209 = (void *)sub_100048B24(v200, v201, v202, v205 & 1, v204);
      v214 = sub_10002F04C(v209, v210, v211, v212, v213);
      *(_QWORD *)(v208 + v207) = v214;
      v215 = v334;
      sub_100048A80(v208, v334);
      *(_QWORD *)(v215 + *(int *)(v206 + 48)) = v214;
      v216 = v335;
      sub_100046F20(v215, v335, &qword_100092E68);
      v217 = v214;
      sub_100049010();
      v218 = (void *)*(int *)(v206 + 48);
      sub_100048A80(v216, v336);
      v219.super.isa = sub_100048BFC().super.isa;
      v220 = sub_100048E2C(v219.super.isa);

      sub_100048C18();
      v351 = v220;
      sub_100011E6C();
      sub_100013130();
      v370._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v221, v222, v223);
      sub_100049068(v370);
      sub_10001320C();
      v224 = v349;
      v225 = v350;
      sub_100049198();
      sub_1000491FC();
      sub_100013130();
      v229 = String.init<A>(_:radix:uppercase:)(v226, v227, v228);
      v231 = v230;
      v349 = v224;
      v350 = v225;
      sub_100012EDC();
      sub_100048C38();
      sub_100012F54();
      sub_100012EDC();
      v232._countAndFlagsBits = v229;
      v232._object = v231;
      String.append(_:)(v232);
      sub_10001327C();
      v233 = v349;
      v234 = v350;
      sub_10003EB40();
      v235 = *(int *)(v206 + 48);
      v236 = v337;
      sub_100048A80(v216, v337);
      v237 = *(_QWORD *)(v216 + v344);
      *(_QWORD *)(v236 + v235) = v237;
      v238 = *(_DWORD *)(v237 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
      sub_100049048();
      sub_10003EB40();
      sub_1000470BC(v216, &qword_100092E68);
      v239 = v355;
      if ((sub_100048E64() & 1) == 0)
      {
        sub_100048C74();
        sub_100048CA0();
        sub_100055BC4();
        v239 = v355;
      }
      v241 = v239[2];
      v240 = v239[3];
      v242 = v343;
      v243 = v348;
      if (v241 >= v240 >> 1)
      {
        sub_100048C50(v240);
        sub_100055BC4();
        v239 = v355;
      }
      v239[2] = v241 + 1;
      v244 = &v239[3 * v241];
      v244[4] = v233;
      v244[5] = v234;
      *((_DWORD *)v244 + 12) = v238;
      v246 = v346;
      v245 = v347;
      v247 = v345;
      v248 = sub_100045658(v347, v346, v345, v242);
      v250 = v249;
      v205 = v251 & 1;
      v200 = sub_1000121A8(v245, v246, v247);
      v203 = v248;
      v204 = v250;
      v199 = (_QWORD *)(v243 - 1);
    }
    while (v199);
    sub_1000121A8(v248, v250, v205);
    v197 = sub_1000484EC();
  }
  sub_100049224(v197, &qword_100093058, (void (*)(uint64_t, uint64_t, void **))sub_10003EFD4);
  v343 = v252;
  v253 = v323;
  sub_100012DD0(v323 + 144, (uint64_t)&v355, 0);
  v254 = *(_QWORD *)(v253 + 144);
  v255 = sub_100048544();
  v256 = sub_100045C6C(v255);
  if (!v256)
  {
    sub_1000484EC();
    v262 = _swiftEmptyArrayStorage;
    goto LABEL_104;
  }
  v257 = v256;
  v354 = _swiftEmptyArrayStorage;
  sub_100055B90();
  v346 = v254 & 0xC000000000000001;
  if ((v254 & 0xC000000000000001) != 0)
  {
    if (v254 < 0)
      v258 = v254;
    else
      v258 = v254 & 0xFFFFFFFFFFFFFF8;
    v259 = __CocoaSet.startIndex.getter(v258);
    v261 = 1;
  }
  else
  {
    v259 = sub_100045FB8(v254);
    v261 = v263 & 1;
  }
  v351 = v259;
  v352 = v260;
  v353 = v261;
  if ((v257 & 0x8000000000000000) == 0)
  {
    v264 = v254 & 0xFFFFFFFFFFFFFF8;
    if (v254 < 0)
      v264 = v254;
    v344 = v264;
    v345 = v254;
    do
    {
      v266 = v351;
      v265 = v352;
      v267 = v353;
      v268 = sub_100048D74();
      sub_100045D70(v268, v269, v270, v254);
      v272 = v271;
      sub_1000110C8();
      v274 = v273;
      LODWORD(v348) = v275;
      v277 = v276;
      v347 = v278;

      v279 = v354;
      if ((sub_100048E64() & 1) == 0)
      {
        sub_100048C74();
        sub_100048CA0();
        sub_100055B90();
        v279 = v354;
      }
      v281 = v279[2];
      v280 = v279[3];
      if (v281 >= v280 >> 1)
      {
        sub_100048C50(v280);
        sub_100055B90();
        v279 = v354;
      }
      v279[2] = v281 + 1;
      v282 = &v279[4 * v281];
      v282[4] = v274;
      *((_DWORD *)v282 + 10) = v348;
      v283 = v347;
      v282[6] = v277;
      v282[7] = v283;
      if (v346)
      {
        v254 = v345;
        if ((v267 & 1) == 0)
          goto LABEL_128;
        v284 = __CocoaSet.Index.handleBitPattern.getter(v266, v265);
        if (v284)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v284);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v297 = sub_100010F40(&qword_100093030);
        v298 = (void (*)(_QWORD **, _QWORD))Set.Index._asCocoa.modify(&v349, v297);
        __CocoaSet.formIndex(after:isUnique:)(v299, isUniquelyReferenced_nonNull_native, v344);
        v298(&v349, 0);
      }
      else
      {
        v286 = sub_100048D74();
        v254 = v345;
        v289 = sub_100045C8C(v286, v287, v288, v345);
        v291 = v290;
        v293 = v292;
        v294 = sub_100048D74();
        sub_1000121A8(v294, v295, v296);
        v351 = v289;
        v352 = v291;
        v353 = v293 & 1;
      }
      --v257;
    }
    while (v257);
    sub_1000121A8(v351, v352, v353);
    sub_1000484EC();
    v262 = v354;
LABEL_104:
    v300 = *(_QWORD *)(v323 + 24);
    v348 = (int64_t)v262;
    LODWORD(v347) = dword_100092670;
    if (v300)
    {
      sub_10001EFE4();
      RapportRemoteDisplayDiscovery.description.getter();
      v344 = v302;
      v345 = v301;
      sub_100048718();
    }
    else
    {
      v344 = 0;
      v345 = 0;
    }
    v303 = getpid();
    v1 = *(_QWORD *)(v323 + 176);
    LODWORD(v346) = v303;
    if (v1)
      LODWORD(v39) = *(_DWORD *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    else
      LODWORD(v39) = 0;
    if (qword_100091308 == -1)
      goto LABEL_111;
    goto LABEL_126;
  }
  __break(1u);
LABEL_128:
  __break(1u);
  swift_release(v361);
  __break(1u);
}

void sub_100024C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v3 = sub_100045770(v1);
    if ((v3 & 0x8000000000000000) == 0 && (v4 = v3, sub_100048C90(), v6 ^ v7))
    {
      v8 = v5;
      v9 = v1 + 64;
      v17 = v1;
      while ((*(_QWORD *)(v9 + 8 * (v4 >> 6)) & (1 << v4)) != 0)
      {
        if (v8 != *(_DWORD *)(v1 + 36))
          goto LABEL_18;
        v10 = sub_100048980();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(_swiftEmptyArrayStorage[2]);
        v11 = sub_100048F54();
        v1 = v17;
        v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11);
        specialized ContiguousArray._endMutation()(v12);
        sub_100048F6C();
        if (v6 == v7)
          goto LABEL_19;
        if ((*(_QWORD *)(v9 + 8 * (v4 >> 6)) & (1 << v4)) == 0)
          goto LABEL_20;
        if (v8 != *(_DWORD *)(v17 + 36))
          goto LABEL_21;
        v13 = sub_100049094();
        v16 = _HashTable.occupiedBucket(after:)(v13, v14, v15);
        if (!--v2)
          return;
        v4 = v16;
        if ((v16 & 0x8000000000000000) == 0)
        {
          v8 = *(_DWORD *)(v17 + 36);
          if (v16 < 1 << *(_BYTE *)(v17 + 32))
            continue;
        }
        goto LABEL_15;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    else
    {
LABEL_15:
      __break(1u);
    }
  }
}

void sub_100024D9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v26 = _swiftEmptyArrayStorage;
    sub_100055C14();
    v3 = _swiftEmptyArrayStorage;
    v4 = sub_100045770(a1);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v4;
      if (v4 < 1 << *(_BYTE *)(a1 + 32))
      {
        v7 = a1 + 64;
        v20 = a1 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v21 = v1;
          v22 = v5;
          v8 = v3;
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
          swift_retain(v9);
          v10 = String.init<A>(describing:)(&v25, &type metadata for ObjectIdentifier);
          v23 = v11;
          v24 = v10;
          v12 = RapportStreamServer.description.getter();
          v14 = v13;
          v15 = v9;
          v3 = v8;
          swift_release(v15);
          v26 = v8;
          v16 = v8[2];
          if (v16 >= v8[3] >> 1)
          {
            sub_100055C14();
            v3 = v26;
          }
          v3[2] = v16 + 1;
          v17 = &v3[4 * v16];
          v17[4] = v24;
          v17[5] = v23;
          v17[6] = v12;
          v17[7] = v14;
          v18 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v6 >= -v18)
            goto LABEL_19;
          v7 = a1 + 64;
          if ((*(_QWORD *)(v20 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_20;
          if (v22 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v19 = _HashTable.occupiedBucket(after:)(v6, v20, ~v18);
          v1 = v21 - 1;
          if (v21 == 1)
            return;
          v6 = v19;
          if ((v19 & 0x8000000000000000) == 0)
          {
            v5 = *(_DWORD *)(a1 + 36);
            if (v19 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_100024F90(uint64_t a1)
{
  sub_100024FB8(a1, &qword_100093078, (void (*)(uint64_t, uint64_t, void **))sub_10003F608);
}

void sub_100024FA4(uint64_t a1)
{
  sub_100024FB8(a1, &qword_100093038, (void (*)(uint64_t, uint64_t, void **))sub_10003FBAC);
}

void sub_100024FB8(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  void *v4;
  uint64_t v5;
  void *v6;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100048D8C(a1, a2);
    v4 = (void *)sub_100048E0C();
  }
  else
  {
    v4 = &_swiftEmptyDictionarySingleton;
  }
  v6 = v4;
  v5 = sub_1000133A4();
  a3(v5, 1, &v6);
  sub_100012E98();
  sub_10001313C();
}

void sub_10002503C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100010F40(&qword_100092E98);
    v2 = (_QWORD *)sub_100048E0C();
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v34 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(63 - v3) >> 6;
  v6 = (char *)(v2 + 8);
  sub_1000133A4();
  sub_1000485CC();
  v7 = 0;
  if (!v5)
    goto LABEL_9;
LABEL_8:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (1)
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v20 = *v18;
    v19 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v9);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v44[0] = v20;
    *((_QWORD *)&v44[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    sub_100013040();
    sub_100048C48((uint64_t)&v36, (uint64_t)v44, (uint64_t)&type metadata for String, (uint64_t)&type metadata for AnyHashable);
    v35[0] = v23;
    v35[1] = v22;
    sub_100048C48((uint64_t)v39, (uint64_t)v35, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
    v40 = v36;
    v41 = v37;
    v42 = v38;
    sub_100012600(v39, v43);
    v36 = v40;
    v37 = v41;
    v38 = v42;
    sub_100012600(v43, v44);
    sub_100012600(v44, &v40);
    v24 = AnyHashable._rawHashValue(seed:)(v2[5]) & ~(-1 << *((_BYTE *)v2 + 32));
    if (((-1 << v24) & ~*(_QWORD *)&v6[8 * (v24 >> 6)]) == 0)
    {
      sub_100048944();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        v28 = v26 == v27;
        if (v26 == v27)
          v26 = 0;
        v25 |= v28;
        if (*(_QWORD *)&v6[8 * v26] != -1)
        {
          sub_100048908();
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    sub_10004891C();
LABEL_38:
    sub_100048F00();
    *(_QWORD *)&v6[v29] |= v30;
    v32 = v2[6] + 40 * v31;
    *(_OWORD *)v32 = v36;
    *(_OWORD *)(v32 + 16) = v37;
    *(_QWORD *)(v32 + 32) = v38;
    sub_100012600(&v40, (_OWORD *)(v2[7] + 32 * v31));
    ++v2[2];
    if (v5)
      goto LABEL_8;
LABEL_9:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_42;
    if (v10 >= v33)
      goto LABEL_40;
    v11 = *(_QWORD *)(v34 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      sub_100048F28();
      if (v13 == v14)
        goto LABEL_40;
      sub_100048F1C();
      if (!v11)
      {
        sub_100048F28();
        if (v13 == v14)
          goto LABEL_40;
        sub_100048F1C();
        if (!v11)
        {
          sub_100048F28();
          if (v13 == v14)
            goto LABEL_40;
          sub_100048F1C();
          if (!v11)
            break;
        }
      }
    }
LABEL_28:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v7 = v12;
  }
  v16 = v15 + 4;
  if (v16 >= v33)
  {
LABEL_40:
    sub_100048558();
    sub_1000465AC(a1);
    return;
  }
  v11 = *(_QWORD *)(v34 + 8 * v16);
  if (v11)
  {
    v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_100048F28();
    if (v13 == v14)
      goto LABEL_40;
    sub_100048F1C();
    v16 = v17 + 1;
    if (v11)
      goto LABEL_28;
  }
LABEL_43:
  __break(1u);
}

Swift::Int sub_10002537C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  Swift::Int result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _QWORD __dst[9];
  _OWORD __src[5];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100010F40(&qword_100092EB8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    sub_100046570(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)__src);
    sub_1000121EC(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&__src[2] + 8);
    memcpy(__dst, __src, sizeof(__dst));
    v28 = __src[0];
    v29 = __src[1];
    v30 = *(_QWORD *)&__src[2];
    sub_100012600(&__dst[5], v32);
    swift_dynamicCast(&v31, v32, (char *)&type metadata for Any + 8, (char *)&type metadata for Swift.AnyObject + 8, 7);
    v16 = v31;
    v33 = v30;
    v32[0] = v28;
    v32[1] = v29;
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v17 = -1 << *((_BYTE *)v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)&v7[8 * (v18 >> 6)]) == 0)
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        v23 = v19 == v22;
        if (v19 == v22)
          v19 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)&v7[8 * v19];
        if (v24 != -1)
        {
          v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)&v7[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)&v7[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    v25 = v3[6] + 40 * v20;
    *(_OWORD *)v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(_QWORD *)(v25 + 32) = v30;
    *(_QWORD *)(v3[7] + 8 * v20) = v16;
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v26)
      goto LABEL_36;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v26)
        goto LABEL_36;
      v13 = *(_QWORD *)(v27 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v26)
          goto LABEL_36;
        v13 = *(_QWORD *)(v27 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v26)
            goto LABEL_36;
          v13 = *(_QWORD *)(v27 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v26)
  {
LABEL_36:
    swift_release(v3);
    sub_1000465AC(a1);
    return (Swift::Int)v3;
  }
  v13 = *(_QWORD *)(v27 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v26)
      goto LABEL_36;
    v13 = *(_QWORD *)(v27 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100025718(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100010F40(&qword_100092E98);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    sub_100046570(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v39);
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v27 = v39[0];
    v29 = v39[1];
    v31 = v40;
    *(_QWORD *)&v38[0] = v41;
    swift_unknownObjectRetain(v41);
    swift_dynamicCast(v33, v38, (char *)&type metadata for Swift.AnyObject + 8, (char *)&type metadata for Any + 8, 7);
    v34 = v27;
    v35 = v29;
    v36 = v31;
    sub_100012600(v33, v37);
    v28 = v34;
    v30 = v35;
    v32 = v36;
    sub_100012600(v37, v38);
    sub_100012600(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v16 = -1 << *((_BYTE *)v3 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)&v7[8 * (v17 >> 6)]) == 0)
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v16) >> 6;
      while (++v18 != v21 || (v20 & 1) == 0)
      {
        v22 = v18 == v21;
        if (v18 == v21)
          v18 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)&v7[8 * v18];
        if (v23 != -1)
        {
          v19 = __clz(__rbit64(~v23)) + (v18 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)&v7[8 * (v17 >> 6)])) | v17 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)&v7[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v19;
    v24 = v3[6] + 40 * v19;
    *(_OWORD *)v24 = v28;
    *(_OWORD *)(v24 + 16) = v30;
    *(_QWORD *)(v24 + 32) = v32;
    result = (uint64_t)sub_100012600(&v34, (_OWORD *)(v3[7] + 32 * v19));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v25)
      goto LABEL_36;
    v13 = *(_QWORD *)(v26 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v25)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v25)
          goto LABEL_36;
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v25)
            goto LABEL_36;
          v13 = *(_QWORD *)(v26 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v25)
  {
LABEL_36:
    swift_release(v3);
    sub_1000465AC(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v26 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v25)
      goto LABEL_36;
    v13 = *(_QWORD *)(v26 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100025AC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  id v11;
  id v12;
  _BYTE v13[24];

  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((a7 | a4) & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a5)
  {
    v10 = swift_allocObject(&unk_100087170, 24, 7);
    swift_weakInit(v10 + 16, a1);
    v11 = objc_allocWithZone((Class)_DiagnosticsHandler);
    v12 = sub_100038128(a2, a5, (uint64_t)sub_100047064, v10);
    swift_beginAccess(&unk_100091E58, v13, 32, 0);
    objc_setAssociatedObject(v12, &unk_100091E58, v12, (void *)0x301);
    swift_endAccess(v13);

    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100025BA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD __dst[19];
  _BYTE v10[24];
  uint64_t __src[19];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_1000238B8();
  memcpy(__dst, __src, sizeof(__dst));
  v6 = sub_100011FC0();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(__dst, &unk_1000874A8, v6);
  sub_100011FFC(__src);
  swift_release(v3);
  swift_release(v5);
  return v7;
}

void sub_100025D58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  int64_t v32;

  v29 = a2;
  v3 = sub_100010F40(&qword_100092DE0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v26 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  sub_100045618(a1, v31);
  v30 = v31[0];
  v32 = v31[3];
  v12 = v31[4];
  v27 = v31[1];
  v28 = (unint64_t)(v31[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v32 << 6);
      goto LABEL_20;
    }
    v15 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v15 >= v28)
      goto LABEL_24;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    v17 = v32 + 1;
    if (!v16)
    {
      v17 = v32 + 2;
      if (v32 + 2 >= v28)
        goto LABEL_24;
      v16 = *(_QWORD *)(v27 + 8 * v17);
      if (!v16)
      {
        v17 = v32 + 3;
        if (v32 + 3 >= v28)
          goto LABEL_24;
        v16 = *(_QWORD *)(v27 + 8 * v17);
        if (!v16)
        {
          v17 = v32 + 4;
          if (v32 + 4 >= v28)
            goto LABEL_24;
          v16 = *(_QWORD *)(v27 + 8 * v17);
          if (!v16)
          {
            v17 = v32 + 5;
            if (v32 + 5 >= v28)
              goto LABEL_24;
            v16 = *(_QWORD *)(v27 + 8 * v17);
            if (!v16)
            {
              v18 = v32 + 6;
              while (v18 < v28)
              {
                v16 = *(_QWORD *)(v27 + 8 * v18++);
                if (v16)
                {
                  v17 = v18 - 1;
                  goto LABEL_19;
                }
              }
LABEL_24:
              swift_release(v29);
              swift_release(v30);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
    v32 = v17;
LABEL_20:
    v19 = v30;
    v20 = *(_QWORD *)(v30 + 48);
    v21 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v14, (uint64_t)v11, _s7SessionC8IdentityVMa);
    v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v14);
    *(_QWORD *)&v11[*(int *)(v3 + 48)] = v22;
    sub_100046F20((uint64_t)v11, (uint64_t)v9, &qword_100092DE0);
    v23 = *(int *)(v3 + 48);
    sub_10003EB64((uint64_t)v9, (uint64_t)v6, _s7SessionC8IdentityVMa);
    v24 = *(_QWORD *)&v9[v23];
    *(_QWORD *)&v6[v23] = v24;
    Strong = swift_weakLoadStrong(v24 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
    swift_retain(v22);
    sub_10003EB40();
    if (Strong)
    {
      swift_release(Strong);
      sub_1000470BC((uint64_t)v9, &qword_100092DE0);
      if (Strong == v29)
      {
        swift_release(v29);
        swift_release(v30);
        return;
      }
    }
    else
    {
      sub_1000470BC((uint64_t)v9, &qword_100092DE0);
    }
  }
  __break(1u);
}

void sub_100026050(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v38 = a2;
  v37 = sub_100010F40(&qword_100092DD8);
  v3 = __chkstk_darwin(v37);
  v36 = (uint64_t)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v35 = (uint64_t)v31 - v6;
  v7 = __chkstk_darwin(v5);
  v34 = (uint64_t)v31 - v8;
  __chkstk_darwin(v7);
  v33 = (uint64_t)v31 - v9;
  v10 = sub_100045770(a1);
  if ((v12 & 1) == 0)
  {
    v13 = *(_DWORD *)(a1 + 36);
    if (v13 == (_DWORD)v11)
    {
      v14 = v10;
      v15 = 1 << *(_BYTE *)(a1 + 32);
      if (v10 == v15)
      {
LABEL_14:
        swift_release(v38);
        return;
      }
      v16 = a1 + 64;
      v32 = a1 + 64;
      while ((v14 & 0x8000000000000000) == 0 && v14 < v15)
      {
        if (v13 != (_DWORD)v11 || (*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
          goto LABEL_16;
        v39 = v13;
        v31[2] = v11;
        v17 = v37;
        v18 = *(int *)(v37 + 48);
        v19 = *(_QWORD *)(a1 + 48);
        v20 = type metadata accessor for Relay.RapportSessionKey(0);
        v21 = v33;
        sub_10003EB64(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v14, v33, type metadata accessor for Relay.RapportSessionKey);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
        *(_QWORD *)(v21 + v18) = v22;
        v23 = v34;
        sub_10003EB64(v21, v34, type metadata accessor for Relay.RapportSessionKey);
        *(_QWORD *)(v23 + *(int *)(v17 + 48)) = v22;
        v24 = v23;
        v25 = a1;
        v26 = v35;
        sub_100046F20(v24, v35, &qword_100092DD8);
        swift_retain_n(v22, 2);
        sub_1000470BC(v21, &qword_100092DD8);
        v27 = *(int *)(v17 + 48);
        v28 = v36;
        sub_10003EB64(v26, v36, type metadata accessor for Relay.RapportSessionKey);
        v29 = *(_QWORD *)(v26 + v27);
        *(_QWORD *)(v28 + v27) = v29;
        sub_10003EB40();
        sub_1000470BC(v26, &qword_100092DD8);
        if (v29 == v38)
          goto LABEL_14;
        v30 = -1 << *(_BYTE *)(v25 + 32);
        if (v14 >= -v30)
          goto LABEL_17;
        a1 = v25;
        v16 = v32;
        if ((*(_QWORD *)(v32 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
          goto LABEL_18;
        if (*(_DWORD *)(a1 + 36) != v39)
          goto LABEL_19;
        v14 = _HashTable.occupiedBucket(after:)(v14, v32, ~v30);
        v11 = *(unsigned int *)(a1 + 36);
        v15 = 1 << *(_BYTE *)(a1 + 32);
        v13 = *(_DWORD *)(a1 + 36);
        if (v14 == v15)
          goto LABEL_14;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
}

void sub_100026348()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;

  sub_100012D54();
  v2 = v1;
  v4 = v3;
  v5 = sub_10001322C();
  v18 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001795C();
  if (v2[2])
  {
    v6 = v2[5];
    sub_100035338((uint64_t)&unk_1000918A0);
    dispatch thunk of Hashable._rawHashValue(seed:)(v6, v5, v7);
    sub_100048F60();
    v10 = v9 & ~v8;
    if (((*(_QWORD *)((char *)v2 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v10) & 1) != 0)
    {
      v11 = ~v8;
      v12 = *(_QWORD *)(v18 + 72);
      v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
      do
      {
        v13(v0, v2[6] + v12 * v10, v5);
        sub_100035338((uint64_t)&qword_100092F90);
        v15 = dispatch thunk of static Equatable.== infix(_:_:)(v0, v4, v5, v14);
        v16 = sub_1000132BC();
        v17(v16);
        if ((v15 & 1) != 0)
          break;
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)((char *)v2 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v10) & 1) != 0);
    }
  }
  sub_100012D28();
}

uint64_t sub_100026494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_1000265C8()
{
  uint64_t v0;

  v0 = type metadata accessor for Relay();
  sub_100014AC4(v0, 184);
  qword_10009A190 = sub_1000266B8();
  sub_100005E8C();
}

void sub_1000265F8(uint64_t a1)
{
  sub_10002AC70(a1, qword_100092650, 0x74726F70706172, 0xE700000000000000);
}

uint64_t sub_100026618()
{
  uint64_t result;

  sub_100006C74(0, &qword_100092EC0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0x79616C6572, 0xE500000000000000);
  qword_100092668 = result;
  return result;
}

void sub_100026680(uint64_t a1)
{
  sub_10002AC70(a1, qword_10009A198, 0x79616C6572, 0xE500000000000000);
}

void sub_10002669C()
{
  unsigned __int8 *v0;

  sub_100036FEC(*v0);
}

uint64_t sub_1000266B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  NSObject *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  _QWORD v36[5];
  _QWORD *v37;

  v1 = (uint64_t)v0;
  v0[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Relay.MachService()), "init");
  v0[6] = 0;
  v2 = type metadata accessor for SidecarIdentity(0);
  v3 = type metadata accessor for RapportRemoteDisplayDevice();
  sub_100035338((uint64_t)&unk_100092D98);
  v5 = v4;
  v0[3] = 0;
  v0[4] = 0;
  v0[9] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v3, v4);
  v0[10] = &_swiftEmptyDictionarySingleton;
  v0[11] = 0;
  v6 = type metadata accessor for Relay.RapportSessionKey(0);
  v7 = type metadata accessor for RapportRemoteDisplaySession();
  sub_100035338((uint64_t)&unk_1000930D8);
  v0[12] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v6, v7, v8);
  v9 = type metadata accessor for RapportStreamServer();
  v0[13] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v9, &protocol witness table for ObjectIdentifier);
  v10 = type metadata accessor for Relay.ConnectedSessionKey(0);
  v11 = type metadata accessor for Relay.Session(0);
  sub_100035338((uint64_t)&unk_1000930E0);
  v0[14] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v10, v11, v12);
  v13 = _s7SessionC8IdentityVMa(0);
  sub_100035338((uint64_t)&unk_100092E10);
  v15 = v14;
  v0[15] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v13, v11, v14);
  v16 = type metadata accessor for Domain();
  v0[17] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v16, v5);
  v0[18] = &_swiftEmptySetSingleton;
  v17 = type metadata accessor for ServiceProvider();
  v0[19] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v13, v17, v15);
  v18 = sub_100010F40(&qword_100092E58);
  v19 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v18, &protocol witness table for String);
  v0[21] = 0;
  v0[22] = 0;
  v0[20] = v19;
  v20 = sub_100010F40(&qword_100092DF8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[16] = PassthroughSubject.init()();
  v21 = type metadata accessor for CompanionLinkServer();
  swift_allocObject(v21, 40, 7);
  v0[5] = sub_10001346C();
  v22 = objc_allocWithZone((Class)type metadata accessor for SidecarRelayNullDelegate());
  v0[7] = sub_100005F64(0);
  v23 = sub_100010F40(&qword_1000930E8);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v0[8] = PassthroughSubject.init()();
  v24 = objc_allocWithZone((Class)type metadata accessor for Relay.RelayProxy());
  v25 = swift_retain(v0);
  v26 = sub_10002ACF4(v25);
  v27 = v0[6];
  *(_QWORD *)(v1 + 48) = v26;
  v28 = v26;
  swift_unknownObjectRelease(v27);
  v29 = *(void **)(v1 + 56);
  if ((objc_msgSend(v29, "respondsToSelector:", "setRelayProxy:") & 1) != 0)
    objc_msgSend(v29, "setRelayProxy:", v28);
  sub_100025AC4(v1, (uint64_t)"com.apple.sidecar", 17, 2, (uint64_t)"relay", 5, 2);
  sub_100026B20();
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v30 = static OS_dispatch_queue.main.getter();
  v31 = (_QWORD *)swift_allocObject(&unk_1000870D0, 40, 7);
  v31[2] = v1;
  v31[3] = 0xD00000000000001ALL;
  v31[4] = 0x800000010006FC40;
  v36[4] = sub_100046FB4;
  v37 = v31;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256;
  v36[2] = sub_100027390;
  v36[3] = &unk_1000870E8;
  v32 = _Block_copy(v36);
  v33 = v37;
  swift_retain(v1);
  swift_release(v33);
  xpc_set_event_stream_handler("com.apple.rapport.matching", v30, v32);
  _Block_release(v32);

  v34 = *(void **)(v1 + 56);
  if ((objc_msgSend(v34, "respondsToSelector:", "relayInitialized") & 1) != 0)
  {
    objc_msgSend((id)swift_unknownObjectRetain(v34), "relayInitialized");
    swift_unknownObjectRelease(v34);
  }

  return v1;
}

void sub_100026B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (!*(_QWORD *)(v0 + 24))
  {
    v1 = v0;
    type metadata accessor for RapportRemoteDisplayDiscovery();
    v2 = RapportRemoteDisplayDiscovery.__allocating_init()();
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v2;
    swift_retain(v2);
    swift_release(v3);
    swift_beginAccess(v2 + 24, v11, 1, 0);
    *(_QWORD *)(v2 + 32) = &off_100086EA8;
    swift_unknownObjectWeakAssign(v2 + 24, v1);
    v4 = swift_allocObject(&unk_100087148, 32, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(_QWORD *)(v4 + 24) = v2;
    swift_retain(v2);
    swift_retain(v1);
    RapportRemoteDisplayDiscovery.activate(completion:)((uint64_t)sub_100046FC4, v4, v5, v6, v7, v8, v9, v10);
    swift_release(v2);
    swift_release(v4);
  }
}

void sub_100026BF8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  const char *v8;
  const char *string;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = (const char *)XPC_EVENT_KEY_NAME.getter();
  string = xpc_dictionary_get_string(a1, v8);
  if (string)
  {
    v10 = String.init(cString:)(string);
    v12 = v11;
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v13 = type metadata accessor for Logger(0);
    sub_100006CAC(v13, (uint64_t)qword_10009A198);
    v14 = swift_bridgeObjectRetain_n(v12, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    v36 = a3;
    if (os_log_type_enabled(v15, v16))
    {
      v35 = a4;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v38 = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain(v12);
      v37 = sub_100015FFC(v10, v12, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "=== %{public}s ===", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v19 = v17;
      a4 = v35;
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v12, 2);
    }
    if (v10 == 0xD000000000000021 && v12 == 0x800000010006FC80)
    {
      v20 = 0x800000010006FC80;
LABEL_12:
      swift_bridgeObjectRelease(v20);
      sub_100026B20();
      return;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x800000010006FC80, v10, v12, 0) & 1) != 0)
    {
      v20 = v12;
      goto LABEL_12;
    }
    if (v10 == 0xD00000000000001ELL)
    {
      v21 = 0x800000010006FCB0;
      if (v12 == 0x800000010006FCB0)
      {
LABEL_18:
        swift_bridgeObjectRelease(v21);
        sub_100027128();
        return;
      }
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010006FCB0, v10, v12, 0) & 1) != 0)
    {
      v21 = v12;
      goto LABEL_18;
    }
    if (v10 == 0xD00000000000002DLL && v12 == 0x800000010006FCD0)
    {
      v22 = 0x800000010006FCD0;
LABEL_24:
      swift_bridgeObjectRelease(v22);
      v23 = *(_QWORD *)(a2 + 40);
      swift_retain(v23);
      sub_100013764();
      swift_release(v23);
      sub_100027200(a1);
      return;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x800000010006FCD0, v10, v12, 0) & 1) != 0)
    {
      v22 = v12;
      goto LABEL_24;
    }
    v24 = *(void **)(a2 + 56);
    if ((objc_msgSend(v24, "respondsToSelector:", "handleRapportEvent:") & 1) != 0)
      v25 = objc_msgSend(v24, "handleRapportEvent:", a1);
    else
      v25 = 2;
    swift_bridgeObjectRetain_n(a4, 2);
    v26 = swift_bridgeObjectRetain(v12);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(32, -1);
      v30 = swift_slowAlloc(96, -1);
      v38 = v30;
      *(_DWORD *)v29 = 136315650;
      swift_bridgeObjectRetain(v12);
      v37 = sub_100015FFC(v10, v12, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(v12, 3);
      *(_WORD *)(v29 + 12) = 2080;
      swift_bridgeObjectRetain(a4);
      v37 = sub_100015FFC(v36, a4, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v29 + 22) = 2080;
      LOBYTE(v37) = v25;
      v31 = sub_100010F40(&qword_1000930F0);
      v32 = String.init<A>(describing:)(&v37, v31);
      v34 = v33;
      v37 = sub_100015FFC(v32, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Encountered XPC event with name [%s] from stream with name [%s].  Handled by the relay delegate: [%s]", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy(v30, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease_n(v12, 2);
    }
  }
}

void sub_100027128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (!*(_QWORD *)(v0 + 32))
  {
    v1 = v0;
    type metadata accessor for RapportRemoteDisplayServer();
    v2 = RapportRemoteDisplayServer.__allocating_init()();
    v3 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v2;
    swift_retain(v2);
    swift_release(v3);
    swift_beginAccess(v2 + 24, v11, 1, 0);
    *(_QWORD *)(v2 + 32) = &off_100086E80;
    swift_unknownObjectWeakAssign(v2 + 24, v1);
    v4 = swift_allocObject(&unk_100087120, 32, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(_QWORD *)(v4 + 24) = v2;
    swift_retain(v2);
    swift_retain(v1);
    RapportRemoteDisplayServer.activate(completion:)((uint64_t)sub_100046FC4, v4, v5, v6, v7, v8, v9, v10);
    swift_release(v2);
    swift_release(v4);
  }
}

void sub_100027200(void *a1)
{
  xpc_object_t reply;
  xpc_object_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;

  if (!xpc_dictionary_get_BOOL(a1, "replyRequired"))
  {
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100006CAC(v4, (uint64_t)qword_10009A198);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6))
      goto LABEL_13;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "No Reply Requested for Rapport XPC Event (Unexpected)";
    goto LABEL_12;
  }
  reply = xpc_dictionary_create_reply(a1);
  if (reply)
  {
    v3 = reply;
    xpc_dictionary_send_reply();
    swift_unknownObjectRelease(v3);
    return;
  }
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100006CAC(v9, (uint64_t)qword_10009A198);
  oslog = Logger.logObject.getter(v10);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Failed to Create Reply to Rapport XPC Event";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_13:

}

uint64_t sub_100027390(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_1000273D8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100012D54();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = sub_100012DA8();
  sub_100013254();
  __chkstk_darwin(v13);
  sub_100012EA0();
  if (v11)
  {
    swift_errorRetain(v11);
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v14 = sub_100006CAC((uint64_t)v12, (uint64_t)qword_10009A198);
    v15 = sub_100048E8C(v0, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    __chkstk_darwin(v15);
    sub_1000489D8();
    sub_1000183F4(v7, v9, v5);
    (*(void (**)(uint64_t, NSObject *))(v1 + 8))(v0, v12);
    sub_100049008();
  }
  else
  {
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    sub_100006CAC((uint64_t)v12, (uint64_t)qword_10009A198);
    v16 = sub_100012F20(v9);
    Logger.logObject.getter(v16);
    v17 = sub_1000491E0();
    if (sub_100048ED0(v12))
    {
      v18 = (uint8_t *)sub_100006D24(12);
      v19 = sub_100006D24(32);
      v27 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = sub_1000130A0();
      v3(v20);
      v21 = sub_1000130A8();
      v23 = sub_10004923C(v21, v22, &v27);
      v24 = sub_1000133AC(v23);
      sub_100048FF0(v24, v25);
      sub_100012DE8(v9);
      sub_1000132A0();
      sub_10001C890((void *)&_mh_execute_header, v12, v17, "%{public}s: Activated", v18);
      sub_10001C888(v19, v26, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v19);
      sub_100006D04((uint64_t)v18);

    }
    else
    {

      sub_100012DE8(v9);
    }
  }
  sub_100012D28();
}

void *sub_1000275E4()
{
  uint64_t v0;
  uint64_t v1;
  uid_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;

  v0 = sub_100010F40(&qword_100092D90);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100071940;
  v2 = getuid();
  *(_QWORD *)(v1 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = v2;
  v3 = String.init(format:_:)(0xD000000000000035, 0x800000010006F830, v1);
  v5 = v4;
  v6 = type metadata accessor for DarwinNotification();
  swift_allocObject(v6, 64, 7);
  result = (void *)DarwinNotification.init(check:)(v3, v5);
  off_100092678 = result;
  return result;
}

uint64_t sub_100027698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = sub_100027828(v0);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100006CAC(v2, (uint64_t)qword_10009A198);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v11 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Device Generation: %llx", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  if (qword_1000912D8 != -1)
    swift_once(&qword_1000912D8, sub_1000275E4);
  v7 = off_100092678;
  swift_beginAccess((char *)off_100092678 + 32, &v11, 0, 0);
  notify_set_state(v7[8], v1);
  v10 = v1;
  PassthroughSubject.send(_:)(&v10);
  v8 = String.utf8CString.getter(*((_QWORD *)v7 + 2));
  notify_post((const char *)(v8 + 32));
  return swift_release(v8);
}

uint64_t sub_100027828(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  _BYTE v5[24];

  swift_beginAccess(a1 + 72, v5, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 72) + 16))
    return 0;
  ++dword_100092670;
  v2 = getpid();
  if ((v2 & 0x80000000) == 0)
    return dword_100092670 | (unint64_t)(v2 << 32);
  v4 = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v4, 3451, 0);
  __break(1u);
  return result;
}

void sub_1000278DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];

  sub_100012D54();
  v1 = v0;
  v3 = v2;
  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v4);
  v5 = sub_1000483E0();
  sub_100013118();
  __chkstk_darwin(v6);
  sub_1000130F4();
  __chkstk_darwin(v7);
  v8 = sub_1000485CC();
  sub_1000491F4(v8);
  v9 = sub_1000124B8(v0, 1, (uint64_t)v5);
  if ((_DWORD)v9 == 1)
  {
    sub_100049234(v9, &qword_100092D78);
  }
  else
  {
    sub_100049248(v9, v10, type metadata accessor for SidecarIdentity);
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v11 = sub_100012DA8();
    v12 = sub_100006CAC(v11, (uint64_t)qword_100092650);
    sub_100049054(v12, v13, type metadata accessor for SidecarIdentity);
    v14 = sub_100012F20(v3);
    Logger.logObject.getter(v14);
    sub_100048CFC();
    if (sub_100048DD4(v5))
    {
      v15 = sub_100006D24(22);
      v16 = sub_100006D24(64);
      v28[0] = v16;
      v17 = sub_1000487A8(4.8752e-34);
      v19 = sub_100048B94(v17, v18);
      sub_100048788(v19);
      sub_1000132F4();
      sub_100048994();
      sub_100048C80();
      sub_1000485CC();
      RapportRemoteDisplayDiscovery.description.getter();
      sub_100048E34();
      v20 = sub_100048558();
      v22 = sub_100048560(v20, v21, v28);
      sub_100048A0C(v22);
      sub_100012DE8(v3);
      sub_10004857C();
      sub_10004886C((void *)&_mh_execute_header, v5, v23, "%{public}s: Device Found %{public}s");
      sub_1000487B8((uint64_t)&type metadata for Any);
      sub_100006D04(v16);
      v24 = v15;
      v1 = v0;
      sub_100006D04(v24);

    }
    else
    {
      sub_100048994();

      sub_100012DE8(v3);
    }
    sub_100012DD0(v1 + 80, (uint64_t)v28, 33);
    sub_10004903C();
    sub_10003C5BC();
    sub_10004875C();
    sub_100048718();
    sub_100012DD0(v1 + 72, (uint64_t)v28, 33);
    sub_1000485CC();
    sub_10003CC30();
    sub_10004875C();
    v28[0] = v3;
    v25 = sub_100048E1C();
    sub_1000130A0();
    RapportEndpoint.idsDeviceIdentifier.getter(v25, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
    sub_10001937C(v26, v27);
    sub_1000130A8();
    sub_10001327C();
    sub_100048F14();
    sub_100048F80();
  }
  sub_100012D28();
}

void sub_100027B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  sub_100012D54();
  v2 = v0;
  v4 = v3;
  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v5);
  v6 = sub_1000483E0();
  sub_100013118();
  __chkstk_darwin(v7);
  sub_1000130F4();
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - v9;
  v11 = sub_10004876C();
  sub_1000491F4(v11);
  v12 = sub_1000124B8(v0, 1, (uint64_t)v6);
  if ((_DWORD)v12 == 1)
  {
    sub_100049234(v12, &qword_100092D78);
  }
  else
  {
    sub_1000456D4(v0, (uint64_t)v10, type metadata accessor for SidecarIdentity);
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v13 = sub_100012DA8();
    sub_100006CAC(v13, (uint64_t)qword_100092650);
    sub_10003EB64((uint64_t)v10, v1, type metadata accessor for SidecarIdentity);
    v14 = sub_100012F20(v4);
    Logger.logObject.getter(v14);
    sub_100048CFC();
    if (sub_100048DD4(v6))
    {
      v15 = sub_100006D24(22);
      v31 = v0;
      v16 = v15;
      v17 = sub_100006D24(64);
      v32[0] = v17;
      v18 = sub_1000487A8(4.8752e-34);
      v20 = sub_100048B94(v18, v19);
      sub_100048788(v20);
      sub_1000132F4();
      sub_100048994();
      sub_100048C80();
      sub_10004876C();
      RapportRemoteDisplayDiscovery.description.getter();
      sub_100048E34();
      v21 = sub_1000132B4();
      v23 = sub_100048560(v21, v22, v32);
      sub_100048A0C(v23);
      sub_100012DE8(v4);
      sub_10004857C();
      sub_10004886C((void *)&_mh_execute_header, v6, v24, "%{public}s: Device Lost %{public}s");
      sub_1000487B8((uint64_t)&type metadata for Any);
      sub_100006D04(v17);
      v25 = v16;
      v2 = v31;
      sub_100006D04(v25);

    }
    else
    {
      sub_100048994();

      sub_100012DE8(v4);
    }
    v26 = sub_100027E74((uint64_t)v10, 0);
    swift_release(v26);
    if (v26)
    {
      sub_100012DD0(v2 + 80, (uint64_t)v32, 33);
      sub_10004876C();
      sub_10003CC30();
      sub_10004875C();
      sub_100013000();
    }
    else
    {
      sub_100012DD0(v2 + 72, (uint64_t)v32, 33);
      sub_10003C5BC();
      sub_10004875C();
      sub_1000130A8();
      v32[0] = v4;
      v27 = sub_100048E1C();
      sub_1000130A0();
      RapportEndpoint.idsDeviceIdentifier.getter(v27, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
      sub_10001959C(v28, v29);
      sub_1000130A8();
      sub_1000132A0();
      sub_100048F14();
    }
    sub_10003EB40();
  }
  sub_100012D28();
}

uint64_t sub_100027E74(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE v20[24];

  v5 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a2)
  {
    v8 = sub_100010F40((uint64_t *)&unk_100092DA0);
    v9 = (_UNKNOWN **)swift_allocObject(v8, 40, 7);
    *((_OWORD *)v9 + 1) = xmmword_100071940;
    v9[4] = a2;
    v10 = 1;
  }
  else
  {
    v9 = &off_1000854B0;
    v10 = 4;
  }
  v11 = 0;
  v12 = (uint64_t *)(v2 + 96);
  while (1)
  {
    v13 = v9[v11 + 4];
    sub_10003EB64(a1, (uint64_t)v7, type metadata accessor for SidecarIdentity);
    *(_QWORD *)&v7[*(int *)(v5 + 20)] = v13;
    swift_beginAccess(v12, v20, 32, 0);
    v14 = *v12;
    if (*(_QWORD *)(*v12 + 16))
    {
      v15 = sub_100039B00((uint64_t)v7);
      if ((v16 & 1) != 0)
        break;
    }
    ++v11;
    swift_endAccess(v20);
    sub_10003EB40();
    if (v10 == v11)
    {
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_endAccess(v20);
  swift_retain(v17);
  sub_10003EB40();
  swift_bridgeObjectRelease(v9);
  return v17;
}

void sub_100028010()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  sub_100012D54();
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v8 = sub_100012DA8();
  sub_100048DEC();
  __chkstk_darwin(v9);
  sub_10004852C();
  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v10);
  v11 = sub_1000483E0();
  sub_100013118();
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - v14;
  v16 = sub_1000485CC();
  sub_1000491F4(v16);
  v17 = sub_1000124B8(v0, 1, v11);
  if ((_DWORD)v17 == 1)
  {
    sub_100049234(v17, &qword_100092D78);
LABEL_13:
    sub_100012D28();
    return;
  }
  sub_100049248(v17, v18, type metadata accessor for SidecarIdentity);
  if (qword_1000912C0 != -1)
    swift_once(&qword_1000912C0, sub_1000265F8);
  v19 = sub_100006CAC(v8, (uint64_t)qword_100092650);
  sub_100048B14((uint64_t)v1, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v20 = sub_10004903C();
  sub_10003EB64(v20, v21, v22);
  v23 = sub_100012F20(v7);
  Logger.logObject.getter(v23);
  v24 = sub_100012FF0();
  if (!sub_100048F3C((os_log_type_t)v24))
  {
    sub_10004921C();

    sub_100012DE8(v7);
    sub_100048720((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    goto LABEL_9;
  }
  v44 = v24;
  v45 = v1;
  v46 = v2;
  v47 = v0;
  v25 = sub_100006D24(32);
  v43 = sub_100006D24(96);
  v49[0] = v43;
  *(_DWORD *)v25 = 136446722;
  v26 = sub_100050048();
  v48 = sub_100048B94(v26, v27);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v25 + 4, v25 + 12);
  sub_1000132F4();
  sub_10004921C();
  *(_WORD *)(v25 + 12) = 2082;
  v48 = v7;
  v28 = sub_100048E1C();
  RapportEndpoint.statusFlags.getter(v28, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v30 = RPStatusFlagsCopyDescription(v29);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v30);

  v48 = sub_100048560(v31, v32, v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v25 + 14, v25 + 22);
  sub_100012DE8(v7);
  sub_10004857C();
  *(_WORD *)(v25 + 22) = 2082;
  if (!HIDWORD(v5))
  {
    v33 = RPDeviceChangeFlagsCopyDescription(v5);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    v48 = sub_100015FFC(v34, v36, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v25 + 24, v25 + 32);
    sub_100012F54();
    v37 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "%{public}s: Device Changed <%{public}s [%{public}s]>", (uint8_t *)v25, 0x20u);
    v38 = v43;
    swift_arrayDestroy(v43, 3, (char *)&type metadata for Any + 8);
    sub_100006D04(v38);
    sub_100006D04(v25);

    sub_100048720((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
    v3 = v47;
LABEL_9:
    sub_100012DD0(v3 + 72, (uint64_t)v49, 32);
    sub_10002189C((uint64_t)v15, *(_QWORD *)(v3 + 72), (uint64_t (*)(void))sub_1000399C4);
    v40 = v39;
    sub_10004875C();
    sub_100012DD0(v3 + 72, (uint64_t)v49, 33);
    sub_1000485CC();
    sub_10003CC30();
    sub_10004875C();
    if (v40 && (sub_1000130A0(), v41 = sub_100028464(v7), sub_1000130A8(), (v41 & 1) != 0))
    {
      sub_10003EB40();
      sub_1000130A8();
    }
    else
    {
      sub_100048F14();
      sub_1000130A8();
      sub_10003EB40();
    }
    goto LABEL_13;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

uint64_t sub_100028464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSDictionary v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSDictionary v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int rawValue;

  v2 = *(_QWORD *)v1;
  if ((objc_msgSend(*(id *)(v1 + 16), "isEqual:", *(_QWORD *)(a1 + 16)) & 1) != 0)
    return 1;
  RapportEndpoint.cameraState.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v5 = v4;
  RapportEndpoint.cameraState.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v5 != v6)
  {
    v10 = 0;
    goto LABEL_18;
  }
  RapportRemoteDisplayDevice.cameraCapabilities.getter();
  if (v7)
  {
    v8 = v7;
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9.super.isa = 0;
  }
  RapportRemoteDisplayDevice.cameraCapabilities.getter();
  if (v11)
  {
    v12 = v11;
    v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    if (v9.super.isa)
    {
      if (v13.super.isa)
      {
        sub_100006C74(0, &qword_100092538, NSDictionary_ptr);
        v14 = v9.super.isa;
        v10 = static NSObject.== infix(_:_:)(v14, v13.super.isa);

LABEL_16:
        goto LABEL_18;
      }
LABEL_13:
      v10 = 0;
      v13.super.isa = v9.super.isa;
      goto LABEL_16;
    }
    if (v13.super.isa)
    {
      v10 = 0;
      goto LABEL_16;
    }
  }
  else if (v9.super.isa)
  {
    goto LABEL_13;
  }
  v10 = 1;
LABEL_18:
  RapportEndpoint.identifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v16 = v15;
  v18 = v17;
  RapportEndpoint.identifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v22 = v20;
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    result = 0;
    if ((v23 & 1) == 0)
      return result;
  }
  RapportEndpoint.idsDeviceIdentifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v25 = v24;
  v27 = v26;
  RapportEndpoint.idsDeviceIdentifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v25 == v28 && v27 == v29)
  {
    swift_bridgeObjectRelease_n(v27, 2);
  }
  else
  {
    v31 = v29;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v31);
    result = 0;
    if ((v32 & 1) == 0)
      return result;
  }
  RapportEndpoint.model.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v34 = v33;
  v36 = v35;
  RapportEndpoint.model.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v34 == v37 && v36 == v38)
  {
    swift_bridgeObjectRelease_n(v36, 2);
  }
  else
  {
    v40 = v38;
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 0);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v40);
    result = 0;
    if ((v41 & 1) == 0)
      return result;
  }
  RapportEndpoint.name.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v43 = v42;
  v45 = v44;
  RapportEndpoint.name.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v43 == v46 && v45 == v47)
  {
    swift_bridgeObjectRelease_n(v45, 2);
  }
  else
  {
    v49 = v47;
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v46, v47, 0);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v49);
    result = 0;
    if ((v50 & 1) == 0)
      return result;
  }
  RapportEndpoint.statusFlags.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v52 = v51;
  RapportEndpoint.statusFlags.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  if (v52 != v53)
    return 0;
  rawValue = RapportEndpoint.sourceVersion.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice).rawValue;
  return (rawValue == RapportEndpoint.sourceVersion.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice).rawValue) & v10;
}

id sub_100028888()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    return 0;
  swift_retain(v1);
  v2 = RapportRemoteDisplayDiscovery.errorFlags.getter();
  swift_release(v1);
  return v2;
}

#error "10002898C: call analysis failed (funcsize=77)"

uint64_t sub_100028A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v5 = sub_100012DD0(v2 + 72, (uint64_t)v27, 32);
  v8 = *(_QWORD *)(v2 + 72);
  if (!*(_QWORD *)(v8 + 16) || (v5 = sub_1000399C4(a1), (v6 & 1) == 0))
  {
    v15 = sub_100048E24(v5, v6, v7);
    sub_100012E50(v15, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v16, v17, -200);
    sub_10004854C();
    return a1;
  }
  a1 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100048E24(v5, v6, v7);
  if (a2 == 3)
  {
    sub_100048B74();
    v19 = sub_1000130A0();
    sub_100048B68(v19, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
    v21 = v20;
    v13 = (uint64_t *)RapportStatusFlags.WiFi.unsafeMutableAddressor();
    if (*v13 && (*v13 & v21) != *v13)
      goto LABEL_21;
    return a1;
  }
  if (a2 == 2)
  {
    sub_100048B74();
    v22 = sub_1000130A0();
    sub_100048B68(v22, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
    v24 = v23;
    v13 = (uint64_t *)RapportStatusFlags.USB.unsafeMutableAddressor();
    if (*v13 && (*v13 & v24) != *v13)
      goto LABEL_21;
    return a1;
  }
  if (a2 != 1)
  {
    sub_1000130A0();
    return a1;
  }
  sub_100048B74();
  v9 = sub_1000130A0();
  sub_100048B68(v9, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v11 = v10;
  v12 = *(_QWORD *)RapportStatusFlags.BLE.unsafeMutableAddressor();
  v13 = (uint64_t *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
  v14 = *v13;
  if (!v12)
  {
    if (!v14)
      return a1;
    goto LABEL_19;
  }
  if ((v14 & ~v12) != 0)
LABEL_19:
    v12 |= v14;
  if ((v12 & ~v11) != 0)
  {
LABEL_21:
    sub_100012E50((uint64_t)v13, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v25, v26, -200);
    sub_10004854C();
    sub_1000130A8();
  }
  return a1;
}

uint64_t sub_100028C4C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 33, 0);
  sub_100010F40((uint64_t *)&unk_100092DB0);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess(v2);
  swift_beginAccess(v0 + 80, v2, 33, 0);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  return swift_endAccess(v2);
}

uint64_t sub_100028CE0(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1000912C0 != -1)
    swift_once(&qword_1000912C0, sub_1000265F8);
  v5 = sub_100012DA8();
  v6 = sub_100006CAC(v5, (uint64_t)qword_100092650);
  v7 = Logger.logObject.getter(v6);
  v8 = a2();
  if (sub_100048D9C(v8))
  {
    v9 = (uint8_t *)sub_100006D24(2);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)a2, a3, v9, 2u);
    sub_100006D04((uint64_t)v9);
  }

  return sub_100028C4C();
}

uint64_t sub_100028DA0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65746F6D6572;
  else
    return 0x6C61636F6CLL;
}

BOOL sub_100028DD0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100028DE0(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
  sub_100005E8C();
}

void sub_100028E00(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_100048850(a1);
  sub_100048D84(v1 & 1);
  sub_100048848();
  sub_1000487F0();
}

BOOL sub_100028E2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100028DD0(*a1, *a2);
}

void sub_100028E38()
{
  unsigned __int8 *v0;

  sub_100028E00(*v0);
}

void sub_100028E40(uint64_t a1)
{
  char *v1;

  sub_100028DE0(a1, *v1);
}

uint64_t sub_100028E48()
{
  char *v0;

  return sub_100028DA0(*v0);
}

uint64_t sub_100028E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  sub_100048398();
  v13 = v1;
  v14 = v2;
  v3 = sub_100050048();
  v5 = v4;
  v6 = _s7SessionC8IdentityVMa(0);
  if (*(_BYTE *)(v0 + *(int *)(v6 + 24)))
    v7 = 0x65746F6D6572;
  else
    v7 = 0x6C61636F6CLL;
  if (*(_BYTE *)(v0 + *(int *)(v6 + 24)))
    v8 = (void *)0xE600000000000000;
  else
    v8 = (void *)0xE500000000000000;
  v12[0] = *(_QWORD *)(v0 + *(int *)(v6 + 20));
  sub_10001216C();
  sub_100049280((uint64_t)v12);
  v12[0] = v3;
  v12[1] = v5;
  sub_100012EDC();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  sub_10001300C();
  sub_100012EDC();
  v10._countAndFlagsBits = sub_100048988();
  String.append(_:)(v10);
  sub_10001320C();
  return v12[0];
}

void sub_100028F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100048E4C();
  sub_10001322C();
  sub_100035338((uint64_t)&unk_1000918A0);
  v2 = sub_100048A24();
  dispatch thunk of Hashable.hash(into:)(v2, v3, v4);
  v5 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(v5 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v5 + 24)));
  sub_100020E78();
}

Swift::Int sub_100028FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  sub_100048850(a1);
  v2 = sub_10001322C();
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v6, v2, v3);
  v4 = sub_1000133E0();
  sub_100048D84(*(_QWORD *)(v1 + *(int *)(v4 + 20)));
  sub_100048D84(*(unsigned __int8 *)(v1 + *(int *)(v4 + 24)));
  return sub_100048848();
}

Swift::Int sub_100029034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, a1);
  v4 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_1000290D4()
{
  return sub_100028E50();
}

void sub_1000290FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  _QWORD *v10;

  sub_100048D54();
  *(_DWORD *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink) = 0;
  swift_weakInit(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession, 0);
  *(_BYTE *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue) = 0;
  sub_1000456D4(v6, v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, _s7SessionC8IdentityVMa);
  sub_100012DA8();
  v8 = sub_1000132BC();
  v9(v8);
  v10 = (_QWORD *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  *v10 = v5;
  v10[1] = a4;
  sub_10004889C();
}

void sub_1000291C4()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (v2)
  {
    sub_100048B5C();
    type metadata accessor for Client();
    v3 = v0;
    v4 = v2;
    v5 = sub_100048E58();
    static NSObject.== infix(_:_:)(v5, v6);

  }
  sub_100020E78();
}

uint64_t sub_100029228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Swift::String v6;
  id v8;
  uint64_t v9;

  v1 = 0x6C616974696E692ELL;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = 0x696E657473696C2ELL;
      break;
    case 2:
    case 3:
      sub_100048FC8();
      break;
    case 4:
      v1 = 0x676E69736F6C632ELL;
      break;
    case 5:
      v1 = 0x6465736F6C632ELL;
      break;
    default:
      v9 = a1;
      swift_errorRetain(a1);
      v2 = sub_100010F40((uint64_t *)&unk_100092F60);
      v3 = sub_100012E50(v2, (unint64_t *)&qword_100091750, NSError_ptr);
      if ((swift_dynamicCast(&v8, &v9, v2, v3, 0) & 1) == 0)
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(&unk_100086DF8, &unk_100086DF8);
        __break(1u);
        JUMPOUT(0x1000293C0);
      }
      v4 = v8;
      v5 = objc_msgSend(v8, "debugDescription");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

      v6._countAndFlagsBits = sub_100048A24();
      String.append(_:)(v6);

      sub_1000132A0();
      v1 = 0x28726F7272652ELL;
      swift_errorRelease(v9);
      break;
  }
  return v1;
}

uint64_t sub_1000293D8()
{
  uint64_t *v0;

  return sub_100029228(*v0);
}

uint64_t sub_1000293E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  unint64_t v7;
  Swift::String v8;
  void *v9;

  v2 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state;
  switch(*(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state))
  {
    case 0:
      goto LABEL_9;
    case 1:
    case 2:
      if (!result)
        return result;
      goto LABEL_9;
    case 3:
      if ((unint64_t)(result - 1) >= 2)
        goto LABEL_9;
      return result;
    case 4:
      if ((unint64_t)(result - 1) >= 3)
        goto LABEL_9;
      return result;
    case 5:
      if ((unint64_t)(result - 1) >= 4)
      {
LABEL_9:
        v3 = result;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease(0xE000000000000000);
        v4._countAndFlagsBits = sub_100029228(v3);
        object = v4._object;
        String.append(_:)(v4);
        swift_bridgeObjectRelease(object);
        v6._countAndFlagsBits = 15917;
        v6._object = (void *)0xE200000000000000;
        String.append(_:)(v6);
        v7 = *(_QWORD *)(v1 + v2);
        sub_100046EC8(v7);
        v8._countAndFlagsBits = sub_100029228(v7);
        v9 = v8._object;
        String.append(_:)(v8);
        swift_bridgeObjectRelease(v9);
        sub_100046EE4(v7);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x800000010006FB50, "SidecarRelay/Relay.swift", 24, 2, 424, 0);
        __break(1u);
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10002953C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) = a1;
  sub_100046EC8(v3);
  sub_100046EC8(a1);
  sub_100046EE4(v3);
  sub_1000293E0(v3);
  sub_100046EE4(a1);
  return sub_100046EE4(v3);
}

uint64_t sub_10002959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54[8];
  uint64_t aBlock[5];
  _QWORD *v56;

  v48 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_getErrorValue(a1, v54, v53);
    v17 = sub_100029AC4((uint64_t)"SidecarRelay/Relay.swift", 24, 2u, 460, v53[1], v53[2]);
    Strong = swift_weakLoadStrong(a2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
    swift_errorRetain(v17);
    swift_release(Strong);
    if (Strong)
    {
      v47 = a4;
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v19 = sub_100006CAC(v13, (uint64_t)qword_10009A198);
      v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v19, v13);
      __chkstk_darwin(v20);
      *(&v44 - 2) = (uint8_t *)v17;
      sub_1000183F4(sub_100046DC0, a2, sub_100012D04);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_errorRelease(v17);
      a4 = v47;
    }
    else
    {
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      sub_100006CAC(v13, (uint64_t)qword_10009A198);
      v21 = swift_retain_n(a2, 2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.info.getter();
      v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        LODWORD(v47) = v24;
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v46 = v26;
        *(_DWORD *)v25 = 136446210;
        v27 = v25 + 12;
        aBlock[0] = v26;
        v44 = v25 + 4;
        v45 = v25;
        swift_retain(a2);
        v28 = sub_100028E50();
        v30 = v29;
        swift_release(a2);
        v52 = sub_100015FFC(v28, v30, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v44, v27);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v30);
        v31 = v45;
        _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v47, "%{public}s: Send Discarded", v45, 0xCu);
        v32 = v46;
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
        swift_errorRelease(v17);

      }
      else
      {
        swift_errorRelease(v17);

        swift_release_n(a2, 2);
      }
    }
  }
  else
  {
    v17 = 0;
  }
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v33 = (void *)static OS_dispatch_queue.main.getter();
  v34 = (_QWORD *)swift_allocObject(&unk_100087008, 40, 7);
  v35 = v48;
  v34[2] = v48;
  v34[3] = a4;
  v34[4] = v17;
  aBlock[4] = (uint64_t)sub_100046EA4;
  v56 = v34;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100050438;
  aBlock[3] = (uint64_t)&unk_100087020;
  v36 = _Block_copy(aBlock);
  v37 = v56;
  sub_100046E6C(v35, a4);
  swift_errorRetain(v17);
  v38 = swift_release(v37);
  static DispatchQoS.unspecified.getter(v38);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100035338((uint64_t)&unk_100092FF0);
  v40 = v39;
  v41 = sub_100010F40((uint64_t *)&unk_100092170);
  sub_100047140((uint64_t)&qword_100093000);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v41, v42, v7, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v36);
  _Block_release(v36);

  swift_errorRelease(v17);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v12, v50);
}

uint64_t sub_100029AC4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a3;
  v41 = a1;
  v42 = a2;
  v9 = *(_QWORD *)(a5 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v40 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v40 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v45 = v19;
  v18((char *)&v40 - v16, v19, v20);
  v21 = _getErrorEmbeddedNSError<A>(_:)(v17, a5, a6);
  v44 = a4;
  if (v21)
  {
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, a5);
  }
  else
  {
    v22 = swift_allocError(a5, a6, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23, v17, a5);
  }
  v24 = (void *)_convertErrorToNSError(_:)(v22);
  swift_errorRelease(v22);
  v25 = objc_msgSend(v24, "domain");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  if (v29 == v26 && v30 == v28)
  {
    swift_bridgeObjectRelease_n(v28, 2);
  }
  else
  {
    v32 = v30;
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v26, v28, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) == 0)
    {
      v18(v12, v45, a5);
      v34 = _getErrorEmbeddedNSError<A>(_:)(v12, a5, a6);
      if (v34)
      {
        v35 = v34;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a5);
      }
      else
      {
        v35 = swift_allocError(a5, a6, 0, 0);
        (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v38, v12, a5);
      }
      goto LABEL_19;
    }
  }
  if (objc_msgSend(v24, "code") == (id)4099)
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v35 = (uint64_t)sub_10001F3EC(-71148, 0, 0, v41, v42, v43, v44);
  }
  else
  {
    v18(v15, v45, a5);
    v36 = _getErrorEmbeddedNSError<A>(_:)(v15, a5, a6);
    if (v36)
    {
      v35 = v36;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, a5);
    }
    else
    {
      v35 = swift_allocError(a5, a6, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37, v15, a5);
    }
  }
LABEL_19:

  return v35;
}

void sub_100029DB4(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  Class v11;
  NSString v12;
  Class v13;
  Class v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  Class v18;
  Class v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  int v27;

  sub_100010F40(&qword_100091900);
  sub_100013118();
  __chkstk_darwin(v6);
  sub_100020EB8();
  v7 = *(void **)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  *(_QWORD *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = a1;
  v8 = a1;

  sub_10002953C(2uLL);
  v9 = sub_100048A90(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:");
  isa = sub_100048A88().super.super.isa;
  v11 = sub_100048B54().super.super.isa;
  sub_10004865C();

  sub_100013070();
  sub_100048988();
  v12 = String._bridgeToObjectiveC()();
  sub_10001320C();
  v13 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_10004865C();

  v14 = UInt._bridgeToObjectiveC()().super.super.isa;
  v15 = sub_100048A88().super.super.isa;
  sub_10004865C();

  sub_100046EF4(a2, v3, &qword_100091900);
  v16 = _s7SessionC8IdentityVMa(0);
  if (sub_1000124B8(v3, 1, v16) == 1)
  {
    sub_1000470BC(v3, &qword_100091900);
  }
  else
  {
    v17 = *(_QWORD *)(v3 + *(int *)(v16 + 20));
    sub_10003EB40();
    v18 = Int._bridgeToObjectiveC()().super.super.isa;
    v19 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v18, v19);

    v27 = 0;
    v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v17);
    v21 = (void *)OPACKEncoderCreateData(v20, 0, &v27);

    if (v21)
    {
      if (v27)
      {

      }
      else
      {
        v26 = v21;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);

        sub_100049184();
      }
    }
  }
  v22 = v9;
  v23 = sub_100048A24();
  sub_10001241C(v23, v24);
  sub_10001EFE4();
  sub_100048E58();
  sub_100048F48();

  sub_100048718();
  sub_1000491D4();
  v25 = sub_10002A814();
  sub_10002A5A4(v25);

  sub_1000491D4();
  sub_1000484D8();
}

uint64_t sub_10002A03C(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    swift_errorRetain(result);
    sub_10002A18C();
    return swift_errorRelease(v1);
  }
  return result;
}

void sub_10002A074(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  Class isa;
  Class v6;
  void *v7;
  Class v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) > 3uLL)
  {
    sub_1000484D8();
  }
  else
  {
    v4 = sub_100048A90(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:");
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v6 = sub_100048B54().super.super.isa;
    sub_100048A6C();

    swift_errorRetain(a1);
    v7 = (void *)sub_100020344((uint64_t)a1);
    v8 = Int._bridgeToObjectiveC()().super.super.isa;
    sub_100048A6C();

    swift_errorRelease(a1);
    sub_10001EFE4();
    v9 = v4;
    v10 = sub_100048B5C();
    sub_10001241C(v10, 0xF000000000000000);
    sub_100048F48();

    sub_100048718();
    sub_100049184();
    if (*(_QWORD *)(v1 + v2) <= 5uLL)
      sub_10002953C(4uLL);

    v11 = sub_100049178();
    sub_100012430(v11, v12);
  }
}

void sub_10002A18C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  sub_100048E4C();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  if (v3 - 2 < 3)
  {
    v4 = *(void **)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
    if (v4)
    {
      sub_100046EC8(v3);
      v5 = v4;
      v6 = sub_100048E58();
      sub_100007F3C(v6, v7);

      if (!v2)
        goto LABEL_9;
LABEL_7:
      swift_errorRetain(v2);
LABEL_10:
      sub_10002953C(v2);
      return;
    }
    sub_100046EC8(v3);
    if (v2)
      goto LABEL_7;
LABEL_9:
    v2 = 5;
    goto LABEL_10;
  }
  if (v3 < 2)
  {
    if (v2)
      goto LABEL_7;
    goto LABEL_9;
  }
  sub_100020E78();
}

uint64_t sub_10002A228(uint64_t a1)
{
  id v2;
  Class isa;
  Class v4;
  NSNumber v5;
  Class v6;
  Class v7;
  id v8;
  uint64_t v9;
  unint64_t v10;

  v2 = sub_100048A90(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v4 = sub_100048B54().super.super.isa;
  sub_100048A58();

  sub_100049190();
  sub_1000491BC();
  v5.super.super.isa = UInt._bridgeToObjectiveC()().super.super.isa;
  v6 = sub_100048A88().super.super.isa;
  sub_100048A58();

  if (a1 == 3)
  {
    if (qword_1000912E8 != -1)
      swift_once(&qword_1000912E8, sub_100037FE4);
    sub_100013164();
    v5.super.super.isa = (Class)sub_100049254();
    sub_1000132A0();
    v7 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5.super.super.isa, v7);

  }
  v8 = v2;
  sub_1000483FC();

  sub_100048BE4();
  v9 = sub_100049178();
  return sub_100048504(v9, v10);
}

BOOL == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10002A344()
{
  id v0;
  Class isa;
  Class v2;
  Class v3;
  Class v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v0 = sub_100048A90(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v2 = sub_100048B54().super.super.isa;
  sub_100048430();

  sub_100049190();
  sub_1000491BC();
  v3 = UInt._bridgeToObjectiveC()().super.super.isa;
  v4 = sub_100048A88().super.super.isa;
  sub_100048430();

  v5 = v0;
  sub_1000483FC();

  sub_100048BE4();
  v6 = sub_100049178();
  return sub_100048504(v6, v7);
}

uint64_t sub_10002A3DC()
{
  id v0;
  Class isa;
  Class v2;
  Class v3;
  Class v4;
  NSString v5;
  Class v6;
  id v7;
  uint64_t v8;
  unint64_t v9;

  v0 = sub_100048A90(objc_allocWithZone((Class)NSMutableDictionary), "initWithCapacity:");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v2 = sub_100048B54().super.super.isa;
  sub_100048430();

  sub_100049190();
  sub_1000491BC();
  v3 = UInt._bridgeToObjectiveC()().super.super.isa;
  v4 = sub_100048A88().super.super.isa;
  sub_100048430();

  if (qword_1000912E8 != -1)
    swift_once(&qword_1000912E8, sub_100037FE4);
  sub_100013164();
  v5 = sub_100049254();
  sub_1000132A0();
  v6 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100048430();

  v7 = v0;
  sub_1000483FC();

  sub_100048BE4();
  v8 = sub_100049178();
  return sub_100048504(v8, v9);
}

unint64_t sub_10002A4D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD *);
  uint64_t v9;
  _QWORD v10[5];

  sub_100048E4C();
  sub_10002A650();
  v3 = *(void **)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = v2;
  v4 = v2;

  result = sub_10002953C(3uLL);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue);
  if (v6)
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue) = 0;
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *(void (**)(uint64_t, _QWORD *))((swift_isaMask & *v4) + 0xD8);
      v9 = v6 + 32;
      do
      {
        sub_100046DD4(v9, (uint64_t)v10);
        v8(v0, v10);
        sub_100012B68(v10);
        v9 += 40;
        --v7;
      }
      while (v7);
    }
    return sub_1000132A0();
  }
  return result;
}

uint64_t sub_10002A5A4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v4 = type metadata accessor for Date(0);
  __chkstk_darwin(v4);
  sub_100020EB8();
  Date.init(timeIntervalSinceNow:)(a1);
  if (qword_100091310 != -1)
    swift_once(&qword_100091310, sub_100053BA0);
  sub_100045A80(v1, v2, qword_10009A220);
  v5 = sub_100013000();
  return v6(v5);
}

void sub_10002A650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  _BYTE v9[24];

  if (qword_100091310 != -1)
    swift_once(&qword_100091310, sub_100053BA0);
  v1 = qword_10009A220;
  sub_100035338((uint64_t)&unk_100092FC8);
  v3 = v2;
  v4 = sub_100012DD0(v1 + 16, (uint64_t)v9, 1);
  v5 = *(_QWORD *)(v1 + 16);
  __chkstk_darwin(v4);
  v8[2] = v0;
  v8[3] = v3;
  sub_100013164();
  sub_100053730((uint64_t (*)(char *))sub_100046D68, (uint64_t)v8, v5);
  v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v7;
  swift_bridgeObjectRelease(v6);
  sub_100053D60();
  sub_10004889C();
}

void sub_10002A734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  sub_100012E50(a1, (unint64_t *)&qword_100091750, NSError_ptr);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  sub_100012D98();
  v3 = sub_100048384(v1, v2, -201);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v4 = v3;
  sub_100048E58();
  sub_100022C8C();

  sub_100048AB4(v4);
}

double sub_10002A7F0()
{
  return sub_10002A838();
}

double sub_10002A814()
{
  return sub_10002A838();
}

double sub_10002A838()
{
  id v0;
  NSString v1;
  id v2;
  double v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100046F20((uint64_t)v5, (uint64_t)v6, &qword_100092E90);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
      return v4;
  }
  else
  {
    sub_1000470BC((uint64_t)v6, &qword_100092E90);
  }
  return 10.0;
}

uint64_t sub_10002A948(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (v3)
  {
    sub_100048EEC(v3);
    sub_100048CE4();
    v4 = sub_100008430();

  }
  else
  {
    v4 = sub_100012E50(a1, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v5, v6, -1020);
    sub_1000486FC();
  }
  return v4 & 1;
}

#error "10002AA1C: call analysis failed (funcsize=36)"

void sub_10002AA8C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10003EB40();
  v1 = sub_100012DA8();
  sub_1000130B0(v1);
  sub_100048C10(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  swift_weakDestroy(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);

  sub_100046EE4(*(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue));
  sub_100005E8C();
}

uint64_t sub_10002AB20()
{
  uint64_t v0;

  sub_10002AA8C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_10002AB44(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100048850(a1);
  sub_1000490B8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100048848();
  sub_1000487F0();
}

uint64_t sub_10002AB6C()
{
  return sub_1000290D4();
}

void sub_10002AB8C(uint64_t a1)
{
  sub_10002AB44(a1);
}

void sub_10002ABAC(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable(&unk_10007254C, a2);
  ClassHashable.hash(into:)();
}

Swift::Int sub_10002ABF4(uint64_t a1, uint64_t a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  swift_getWitnessTable(&unk_10007254C, a2);
  ClassHashable.hash(into:)();
  return Hasher._finalize()();
}

void sub_10002AC4C(uint64_t a1)
{
  sub_10002AC70(a1, qword_100092680, 0x6F725079616C6552, 0xEA00000000007978);
}

void sub_10002AC70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_100012DA8();
  sub_100006CC4(v7, a2);
  sub_100006CAC(v7, (uint64_t)a2);
  Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, a3, a4);
  sub_100020E78();
}

uint64_t sub_10002ACD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2
                + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener);
  v4 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener
                 + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_release(v4);
}

char *sub_10002ACF4(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  objc_class *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD v28[3];
  id v29;
  objc_super v30;

  v3 = sub_100010F40(&qword_1000930F8);
  __chkstk_darwin(v3);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100010F40(&qword_100093100);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_weakInit(&v1[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_relay], 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_cancellables] = &_swiftEmptySetSingleton;
  v11 = &v1[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener];
  *(_QWORD *)v11 = RapportDeviceChangeFlags.rawValue.getter;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v1[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  swift_weakAssign(v10, a1);
  v13 = (objc_class *)type metadata accessor for Relay.RelayProxy();
  v30.receiver = v1;
  v30.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v30, "init");
  sub_10002AFD4();
  v28[0] = v15;
  v16 = sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v29 = (id)static OS_dispatch_queue.main.getter();
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  sub_1000124AC((uint64_t)v5, 1, 1, v17);
  v18 = sub_100010F40(&qword_100093108);
  sub_100047140((uint64_t)&unk_100093110);
  v20 = v19;
  v21 = sub_10004706C();
  Publisher.receive<A>(on:options:)(&v29, v5, v18, v16, v20, v21);
  sub_1000470BC((uint64_t)v5, &qword_1000930F8);

  swift_release(v28[0]);
  v22 = swift_allocObject(&unk_1000871C0, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v14);
  v23 = swift_allocObject(&unk_1000871E8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1000470FC;
  *(_QWORD *)(v23 + 24) = v22;
  sub_100047140((uint64_t)&unk_100093120);
  v25 = Publisher<>.sink(receiveValue:)(sub_100047124, v23, v6, v24);
  swift_release(v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v26 = &v14[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_cancellables];
  swift_beginAccess(&v14[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_cancellables], v28, 33, 0);
  AnyCancellable.store(in:)(v26);
  swift_endAccess(v28);
  swift_release(v25);

  swift_release(a1);
  return v14;
}

void sub_10002AFD4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100010F40(&qword_100092DF8);
  sub_100047140((uint64_t)&unk_100093128);
  Publisher.eraseToAnyPublisher()(v0, v1);
  sub_10001313C();
}

void sub_10002B034(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_10002BC1C();

  }
}

uint64_t sub_10002B084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_1000912E0 != -1)
    swift_once(&qword_1000912E0, sub_10002AC4C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006CAC(v4, (uint64_t)qword_100092680);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting display service sessions changed listener", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_retain(a2);
  return sub_10002ACD8(a1, a2);
}

void sub_10002B1E0(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_10002B260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t Strong;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;

  v2 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5);
  v66 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v62 = (char *)&v62 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - v14;
  if (qword_1000912E0 != -1)
    swift_once(&qword_1000912E0, sub_10002AC4C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100006CAC(v16, (uint64_t)qword_100092680);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18 = v69(v15, a1, v7);
  v70 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v65 = a1;
  v72 = v7;
  if (v21)
  {
    v22 = swift_slowAlloc(12, -1);
    v71 = v11;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v76 = v24;
    *(_DWORD *)v23 = 136315138;
    v74 = (void (*)(char *, uint64_t))(v23 + 4);
    sub_100035338((uint64_t)&unk_100092310);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v7);
    v27 = v26;
    v75 = sub_100015FFC(v25, v26, &v76);
    a1 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v74, v23 + 12);
    swift_bridgeObjectRelease(v27);
    v74 = *(void (**)(char *, uint64_t))(v8 + 8);
    v74(v15, v7);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "A request was made to close the display service session with identifier: [%s]", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v28 = v23;
    v11 = v71;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v74 = *(void (**)(char *, uint64_t))(v8 + 8);
    v74(v15, v7);
  }

  Strong = swift_weakLoadStrong(v73 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_relay);
  v30 = (uint64_t)v66;
  v31 = v62;
  v71 = (char *)Strong;
  if (Strong)
  {
    v32 = (uint64_t)sub_10002B9D0();
    v34 = v32;
    if ((unint64_t)v32 >> 62)
    {
      if (v32 >= 0)
        v32 &= 0xFFFFFFFFFFFFFF8uLL;
      v35 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (!v35)
        goto LABEL_20;
    }
    else
    {
      v35 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v35)
      {
LABEL_20:
        swift_release(v71);
        swift_bridgeObjectRelease(v34);
        return;
      }
    }
    if (v35 >= 1)
    {
      v36 = 0;
      v73 = v34 & 0xC000000000000001;
      *(_QWORD *)&v33 = 136315138;
      v64 = v33;
      v63 = (char *)&type metadata for Any + 8;
      v37 = v72;
      v67 = v35;
      v68 = v4;
      do
      {
        if (v73)
        {
          v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v34);
        }
        else
        {
          v38 = *(_QWORD *)(v34 + 8 * v36 + 32);
          swift_retain(v38);
        }
        sub_10003EB64(v38 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v30, _s7SessionC8IdentityVMa);
        sub_1000456D4(v30, (uint64_t)v4, type metadata accessor for SidecarIdentity);
        v39 = static UUID.== infix(_:_:)(v4, a1);
        v74(v4, v37);
        if ((v39 & 1) != 0)
        {
          v40 = v34;
          v41 = v69(v31, a1, v37);
          v42 = Logger.logObject.getter(v41);
          v43 = v31;
          v44 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v44))
          {
            v45 = swift_slowAlloc(12, -1);
            v46 = swift_slowAlloc(32, -1);
            v76 = v46;
            *(_DWORD *)v45 = v64;
            sub_100035338((uint64_t)&unk_100092310);
            v47 = dispatch thunk of CustomStringConvertible.description.getter(v37);
            v49 = v48;
            *(_QWORD *)(v45 + 4) = sub_100015FFC(v47, v48, &v76);
            swift_bridgeObjectRelease(v49);
            v74(v43, v37);
            _os_log_impl((void *)&_mh_execute_header, v42, v44, "Closing remote display session with device with identifier: [%s].", (uint8_t *)v45, 0xCu);
            swift_arrayDestroy(v46, 1, v63);
            v50 = v46;
            v30 = (uint64_t)v66;
            swift_slowDealloc(v50, -1, -1);
            v51 = v45;
            a1 = v65;
            swift_slowDealloc(v51, -1, -1);
          }
          else
          {
            v74(v43, v37);
          }

          v31 = v43;
          sub_100022C8C();
          v34 = v40;
          v37 = v72;
          v35 = v67;
          v4 = v68;
        }
        ++v36;
        swift_release(v38);
      }
      while (v35 != v36);
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    v52 = v72;
    v53 = v69(v11, a1, v72);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = v11;
      v58 = swift_slowAlloc(32, -1);
      v76 = v58;
      *(_DWORD *)v56 = 136315138;
      sub_100035338((uint64_t)&unk_100092310);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v52);
      v61 = v60;
      v75 = sub_100015FFC(v59, v60, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease(v61);
      v74(v57, v52);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Could not find 'relay'.  Will not close the display service session with identifier: [%s]", v56, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      v74(v11, v52);
    }

  }
}

_QWORD *sub_10002B9D0()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  Strong = swift_weakLoadStrong(v0 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_relay);
  if (Strong)
  {
    v2 = Strong;
    v3 = sub_10002BB50();
    v5 = v4;
    v6 = sub_10002BAE8(v3, v4);
    swift_release(v2);
    swift_bridgeObjectRelease(v5);
    return (_QWORD *)v6;
  }
  else
  {
    if (qword_1000912E0 != -1)
      swift_once(&qword_1000912E0, sub_10002AC4C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100006CAC(v8, (uint64_t)qword_100092680);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not find 'relay'.  Will return an empty collection of remote display sessions", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_10002BAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  sub_100012DD0(v2 + 120, (uint64_t)v9, 0);
  sub_1000133A4();
  v5 = sub_100013040();
  sub_100021F78(v5, a1, a2);
  v7 = v6;
  sub_1000132F4();
  return v7;
}

uint64_t sub_10002BB50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier
                 + 8);
  if (v2)
  {
    v3 = *v1;
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(SidecarService), "serviceWithName:", SidecarServiceNameDisplay);
    v5 = objc_msgSend(v4, "serviceIdentifier");

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = v1[1];
    *v1 = v3;
    v1[1] = v7;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease(v8);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

size_t sub_10002BC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v1 = v0;
  v2 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v2);
  v30 = (uint64_t)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)sub_10002B9D0();
  v12 = v11;
  if (!((unint64_t)v11 >> 62))
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(v12);
    v16 = _swiftEmptyArrayStorage;
LABEL_16:
    sub_10004A190((uint64_t)v16);
    v23 = v22;
    v25 = *(void (**)(uint64_t))(v1
                                         + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener);
    v24 = *(_QWORD *)(v1
                    + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener
                    + 8);
    swift_retain(v24);
    v25(v23);
    swift_bridgeObjectRelease(v23);
    return swift_release(v24);
  }
  if (v11 >= 0)
    v11 &= 0xFFFFFFFFFFFFFF8uLL;
  v13 = _CocoaArrayWrapper.endIndex.getter(v11);
  if (!v13)
    goto LABEL_15;
LABEL_3:
  v31 = _swiftEmptyArrayStorage;
  result = sub_100055CE4(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v15 = 0;
    v16 = v31;
    v27 = v1;
    v28 = v12 & 0xC000000000000001;
    v29 = v12;
    do
    {
      if (v28)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
      }
      else
      {
        v17 = *(_QWORD *)(v12 + 8 * v15 + 32);
        swift_retain(v17);
      }
      sub_10003EB64(v17 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v6, _s7SessionC8IdentityVMa);
      v18 = v30;
      sub_1000456D4((uint64_t)v6, v30, type metadata accessor for SidecarIdentity);
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      v19(v10, v18, v7);
      swift_release(v17);
      v31 = v16;
      v21 = v16[2];
      v20 = v16[3];
      if (v21 >= v20 >> 1)
      {
        sub_100055CE4(v20 > 1, v21 + 1, 1);
        v16 = v31;
      }
      ++v15;
      v16[2] = v21 + 1;
      v19((char *)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21, (uint64_t)v10, v7);
      v12 = v29;
    }
    while (v13 != v15);
    swift_bridgeObjectRelease(v29);
    v1 = v27;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void sub_10002BEBC()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.RelayProxy", 23, "init()", 6, 0);
  __break(1u);
}

id sub_10002BF08()
{
  return sub_100034554(0, type metadata accessor for Relay.RelayProxy);
}

uint64_t sub_10002BF78()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  swift_beginAccess(v0 + 96, v4, 0, 0);
  result = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 96) + 16))
  {
    if (result)
      return result;
    v2 = os_transaction_create("com.apple.sidecar-relay");
    v3 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v2;
    result = v3;
  }
  else
  {
    if (!result)
      return result;
    *(_QWORD *)(v0 + 88) = 0;
  }
  return swift_unknownObjectRelease(result);
}

uint64_t sub_10002BFDC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Relay.RapportSessionKey(0) + 20));
  if (!v1)
    return sub_100050048();
  v7 = sub_100050048();
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  switch(v1)
  {
    case 1:
      v3 = 0xE400000000000000;
      v4 = 1279547201;
      break;
    case 3:
      v3 = 0xE400000000000000;
      v4 = 1229343063;
      break;
    case 2:
      v3 = 0xE300000000000000;
      v4 = 4346709;
      break;
    default:
      v4 = 0;
      v3 = 0xE000000000000000;
      break;
  }
  v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v3);
  return v7;
}

void sub_10002C098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(v5 + 20)));
}

BOOL sub_10002C10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for Relay.RapportSessionKey(0);
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

Swift::Int sub_10002C158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v1 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v5, v1, v2);
  v3 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v3 + 20)));
  return Hasher._finalize()();
}

Swift::Int sub_10002C1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, a1);
  v4 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

void sub_10002C270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];

  v7 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003EB64(a2, (uint64_t)v9, type metadata accessor for SidecarIdentity);
  *(_QWORD *)&v9[*(int *)(v7 + 20)] = a3;
  v10 = v3 + 96;
  swift_beginAccess(v3 + 96, v25, 32, 0);
  sub_10002189C((uint64_t)v9, *(_QWORD *)(v3 + 96), (uint64_t (*)(void))sub_100039B00);
  if (v11)
  {
    v12 = v11;
    swift_endAccess(v25);
    type metadata accessor for RapportRemoteDisplaySession();
    if (!static RapportRemoteDisplaySession.== infix(_:_:)(v12, a1))
    {
      if (qword_1000912C0 != -1)
        swift_once(&qword_1000912C0, sub_1000265F8);
      v13 = type metadata accessor for Logger(0);
      sub_100006CAC(v13, (uint64_t)qword_100092650);
      v14 = swift_retain_n(v12, 2);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v25[0] = v23;
        *(_DWORD *)v17 = 136446210;
        v22 = v17 + 4;
        swift_retain(v12);
        v18 = RapportRemoteDisplaySession.description.getter();
        v20 = v19;
        swift_release(v12);
        v24 = sub_100015FFC(v18, v20, v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v22, v17 + 12);
        swift_release_n(v12, 2);
        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Canceling %{public}s", v17, 0xCu);
        v21 = v23;
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

        swift_release_n(v12, 2);
      }
      RapportRemoteDisplaySession.cancel()();
    }
    swift_release(v12);
  }
  else
  {
    swift_endAccess(v25);
  }
  swift_beginAccess(v10, v25, 33, 0);
  swift_retain(a1);
  sub_10003CC30();
  swift_endAccess(v25);
  sub_10003EB40();
}

uint64_t sub_10002C560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[32];
  _BYTE v22[24];

  v2 = v1;
  v4 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = v1 + 96;
  swift_beginAccess(v7, v22, 0, 0);
  v8 = *(_QWORD *)(v2 + 96);
  swift_retain(a1);
  v9 = swift_bridgeObjectRetain(v8);
  sub_100026050(v9, a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = ~v14;
  swift_bridgeObjectRelease(v8);
  if (v16)
  {
    swift_beginAccess(v7, v21, 33, 0);
    v17 = sub_100010F40(&qword_100092DD0);
    Dictionary._Variant.remove(at:)(v6, &v20, v11, v13, v15 & 1, v17);
    v18 = v20;
    swift_endAccess(v21);
    sub_100042E24(v11, v13, v15);
    swift_release(v18);
    sub_10003EB40();
  }
  return sub_10002C6B4(a1);
}

uint64_t sub_10002C6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v2 = *(_QWORD *)(a1 + 32);
  swift_beginAccess(v1 + 112, v8, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = sub_100043890(v4, v2);
  swift_bridgeObjectRelease(v3);
  v6 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = v5;
  return swift_bridgeObjectRelease(v6);
}

void sub_10002C724(uint64_t a1)
{
  Swift::UInt *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Hasher._combine(_:)(*v1);
  v3 = (char *)v1 + *(int *)(type metadata accessor for Relay.ConnectedSessionKey(0) + 20);
  v4 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(_QWORD *)&v3[*(int *)(v6 + 20)]);
  Hasher._combine(_:)(v3[*(int *)(v6 + 24)]);
}

BOOL sub_10002C7CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2)
  {
    v4 = *(int *)(type metadata accessor for Relay.ConnectedSessionKey(0) + 20);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    if ((static UUID.== infix(_:_:)(v5, v6) & 1) != 0)
    {
      v7 = _s7SessionC8IdentityVMa(0);
      if (*(_QWORD *)&v5[*(int *)(v7 + 20)] == *(_QWORD *)&v6[*(int *)(v7 + 20)]
        && v5[*(int *)(v7 + 24)] == v6[*(int *)(v7 + 24)])
      {
        return 1;
      }
    }
  }
  return result;
}

Swift::Int sub_10002C85C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10002C724((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10002C8A0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10002C724((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_10002C8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];

  v5 = type metadata accessor for Relay.ConnectedSessionKey(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(_QWORD *)(a2 + 32);
  sub_10003EB64(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v8 + *(int *)(v6 + 20), _s7SessionC8IdentityVMa);
  *v8 = v9;
  swift_beginAccess(v2 + 112, v11, 33, 0);
  swift_retain(a1);
  sub_10003CC30();
  swift_endAccess(v11);
  sub_10003EB40();
}

uint64_t sub_10002C9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v15[24];

  v5 = type metadata accessor for Relay.ConnectedSessionKey(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10003EB64(a1, (uint64_t)v8 + *(int *)(v6 + 20), _s7SessionC8IdentityVMa);
  *v8 = a2;
  swift_beginAccess(v2 + 112, v15, 32, 0);
  v9 = *(_QWORD *)(v2 + 112);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_100039C30(v8), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_retain(v12);
  }
  else
  {
    v12 = 0;
  }
  swift_endAccess(v15);
  sub_10003EB40();
  return v12;
}

void sub_10002CAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _BOOL4 v66;
  Swift::String v67;
  Swift::Bool v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[4];
  _QWORD v96[4];

  sub_1000131A4();
  a19 = v23;
  a20 = v24;
  v25 = v20;
  v27 = v26;
  v29 = v28;
  type metadata accessor for SidecarIdentity(0);
  sub_100013118();
  __chkstk_darwin(v30);
  sub_10001795C();
  v31 = (unint64_t)sub_100028888();
  v32 = RapportErrorFlags.noManatee.unsafeMutableAddressor();
  if ((*v32 & ~v31) == 0)
  {
    sub_100012E50((uint64_t)v32, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v33, v34, -301);
    sub_10004854C();
    goto LABEL_12;
  }
  v35 = sub_100028A14(v29, v27);
  if (v21)
    goto LABEL_12;
  v90 = v29;
  v92 = (char *)v27;
  v94 = v35;
  v96[0] = v35;
  v36 = type metadata accessor for RapportRemoteDisplayDevice();
  RapportEndpoint.statusFlags.getter(v36, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v38 = v37;
  v39 = *(_QWORD *)RapportStatusFlags.WiFi.unsafeMutableAddressor();
  v40 = *(_QWORD *)RapportStatusFlags.BLE.unsafeMutableAddressor();
  v41 = *(_QWORD *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
  if ((*(_QWORD *)RapportStatusFlags.USB.unsafeMutableAddressor() & ~v38) != 0)
  {
    v45 = (unint64_t)sub_100028888();
    v46 = RapportErrorFlags.WiFiHostAP.unsafeMutableAddressor();
    if ((*v46 & ~v45) != 0)
    {
      v50 = (unint64_t)sub_100028888();
      v51 = RapportErrorFlags.WiFiOff.unsafeMutableAddressor();
      if ((*v51 & ~v50) != 0)
      {
        v66 = (v40 & v38) != v40 || (v41 & v38) != v41;
        if ((v39 & v38) == v39 || !v66)
          goto LABEL_5;
        v96[0] = v94;
        RapportEndpoint.model.getter(v36, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
        v67._countAndFlagsBits = 0x447974696C616552;
        v67._object = (void *)0xED00006563697665;
        v68 = String.hasPrefix(_:)(v67);
        v69 = sub_1000132F4();
        sub_100012E50(v69, (unint64_t *)&qword_100091750, NSError_ptr);
        static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
        sub_100012D98();
        if (v68)
          v49 = -457;
        else
          v49 = -203;
      }
      else
      {
        sub_100012E50((uint64_t)v51, (unint64_t *)&qword_100091750, NSError_ptr);
        static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
        sub_100012D98();
        v49 = -303;
      }
    }
    else
    {
      sub_100012E50((uint64_t)v46, (unint64_t *)&qword_100091750, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100012D98();
      v49 = -302;
    }
    sub_100048384(v47, v48, v49);
    sub_10004854C();
    swift_release(v94);
    goto LABEL_12;
  }
LABEL_5:
  v42 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v42, "objectForKey:", v43);

  if (v44)
  {
    _bridgeAnyObjectToAny(_:)(v95, v44);
    swift_unknownObjectRelease(v44);
  }
  else
  {
    memset(v95, 0, sizeof(v95));
  }
  v52 = v90;
  sub_100046F20((uint64_t)v95, (uint64_t)v96, &qword_100092E90);
  if (v96[3])
  {
    if (swift_dynamicCast(&a10, v96, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
      && (a10 & 1) != 0)
    {
      v53 = v92 - 1;
      if ((unint64_t)(v92 - 1) >= 3)
      {
        v55 = 0;
        goto LABEL_24;
      }
      v54 = &unk_100072998;
      goto LABEL_22;
    }
  }
  else
  {
    sub_1000470BC((uint64_t)v96, &qword_100092E90);
  }
  v53 = v92 - 1;
  if ((unint64_t)(v92 - 1) >= 3)
  {
    v55 = 0x200000;
    goto LABEL_24;
  }
  v54 = &unk_1000729B0;
LABEL_22:
  v55 = v54[(_QWORD)v53];
LABEL_24:
  v56 = sub_100027E74(v90, v92);
  if (v56)
  {
    v57 = v56;
  }
  else
  {
    v91 = type metadata accessor for RapportRemoteDisplaySession();
    RapportRemoteDisplaySession.__allocating_init()();
    v57 = v58;
    swift_retain(v58);
    RapportRemoteDisplaySession.controlFlags.setter(v55);
    v59 = swift_retain(v94);
    RapportRemoteDisplaySession.destinationDevice.setter(v59);
    sub_100012DD0(v57 + 16, (uint64_t)v96, 1);
    *(_QWORD *)(v57 + 24) = &off_100086E28;
    swift_unknownObjectWeakAssign(v57 + 16, v25);
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v60 = sub_100012DA8();
    sub_100006CAC(v60, (uint64_t)qword_100092650);
    v61 = sub_100012F20(v57);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v89 = v63;
      v64 = (uint8_t *)sub_100006D24(12);
      v88 = sub_100006D24(32);
      v95[0] = v88;
      *(_DWORD *)v64 = 136446210;
      sub_100048980();
      RapportRemoteDisplaySession.description.getter();
      sub_100048E34();
      sub_100048978();
      a10 = sub_100015FFC(v57, v55, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v64 + 4, v64 + 12);
      sub_100012DE8(v57);
      sub_10004857C();
      _os_log_impl((void *)&_mh_execute_header, v62, v89, "%{public}s Started", v64, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      sub_100006D04(v88);
      sub_100006D04((uint64_t)v64);

    }
    else
    {

      sub_100012DE8(v57);
    }
    v95[0] = v57;
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPEventIDAny);
    v72 = v71;
    v73 = sub_100014AC4((uint64_t)&unk_100087080, 32);
    *(_QWORD *)(v73 + 16) = v25;
    *(_QWORD *)(v73 + 24) = v57;
    sub_100012F20(v57);
    sub_100048B1C();
    RapportMessageable.registerEvent(id:options:handler:)(v70, v72, 0, sub_100046F78, v73, v91, &protocol witness table for RapportRemoteDisplaySession);
    sub_10004857C();
    sub_1000130A8();
    swift_release(v95[0]);
    sub_10002C270(v57, v52, (uint64_t)v92);
    v74 = sub_100014AC4((uint64_t)&unk_1000870A8, 32);
    *(_QWORD *)(v74 + 16) = v25;
    *(_QWORD *)(v74 + 24) = v57;
    sub_100048980();
    sub_100048B1C();
    RapportRemoteDisplaySession.activate(completion:)((uint64_t)sub_100046F84, v74);
    sub_100048978();
    sub_1000130A8();
  }
  sub_10002BF78();
  if (qword_1000912C0 != -1)
    swift_once(&qword_1000912C0, sub_1000265F8);
  v75 = sub_100012DA8();
  sub_100006CAC(v75, (uint64_t)qword_100092650);
  sub_10003EB64(v52, v22, type metadata accessor for SidecarIdentity);
  v76 = sub_100012F20(v57);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = sub_100006D24(22);
    v93 = sub_100006D24(64);
    v95[0] = v93;
    *(_DWORD *)v79 = 136446466;
    v80 = sub_100050048();
    a10 = sub_100015FFC(v80, v81, v95);
    sub_100048E7C(a10, v82, v83, v79 + 12);
    sub_1000132F4();
    sub_10003EB40();
    *(_WORD *)(v79 + 12) = 2082;
    sub_100048980();
    RapportRemoteDisplaySession.description.getter();
    v84 = sub_100048978();
    a10 = sub_10004926C(v84, v85, v95);
    sub_100048E7C(a10, v86, v87, v79 + 22);
    sub_100012DE8(v57);
    sub_10001300C();
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "%{public}s: Opened %{public}s", (uint8_t *)v79, 0x16u);
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    sub_100006D04(v93);
    sub_100006D04(v79);
    swift_release(v94);

  }
  else
  {
    swift_release(v94);
    sub_10003EB40();

    sub_100012DE8(v57);
  }
LABEL_12:
  sub_100012F9C();
}

void sub_10002D31C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  sub_10002D34C(a4, a1, a2, 0);
}

void sub_10002D34C(NSObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  NSDictionary v24;
  id v25;
  objc_class *v26;
  id v27;
  objc_class *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  objc_class *v37;
  unint64_t v38;
  char *v39;
  objc_class **v40;
  os_log_t v41;
  uint64_t v42;
  objc_class **v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t Strong;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  Class isa;
  id v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  objc_class **v122;
  os_log_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v5 = v4;
  LODWORD(v133) = a4;
  v131 = a1;
  v8 = type metadata accessor for Logger(0);
  v128 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v127 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v132);
  v129 = (uint64_t)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100010F40(&qword_100092D78);
  __chkstk_darwin(v11);
  v135 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v134);
  v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_bridgeObjectRetain(a2);
  v136 = sub_10001F614(v15);
  v17 = v16;
  v19 = v18;
  if (qword_1000912C8 != -1)
    swift_once(&qword_1000912C8, sub_100026618);
  v20 = qword_100092668;
  v21 = static os_log_type_t.debug.getter();
  v22 = &off_100091000;
  if (!os_log_type_enabled(v20, v21))
  {
LABEL_11:
    if (!a3)
      goto LABEL_25;
LABEL_12:
    v45 = sub_10002537C(a3);
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionEventID);
    v139 = v46;
    AnyHashable.init<A>(_:)(&v138, &type metadata for String, &protocol witness table for String);
    v47 = sub_100021938((uint64_t)&v140, v45);
    sub_10001F4E0((uint64_t)&v140);
    if (v47)
    {
      v126 = v5;
      v137 = v47;
      if ((swift_dynamicCast(&v138, &v137, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
      {
        v48 = v139;
        if (v138 == 0xD000000000000011 && v139 == 0x800000010006E4B0)
        {
          swift_bridgeObjectRelease(0x800000010006E4B0);
LABEL_20:
          v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderID);
          v139 = v50;
          AnyHashable.init<A>(_:)(&v138, &type metadata for String, &protocol witness table for String);
          v51 = sub_100021938((uint64_t)&v140, v45);
          sub_10001F4E0((uint64_t)&v140);
          if (v51)
          {
            v137 = v51;
            if ((swift_dynamicCast(&v138, &v137, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
            {
              v52 = v135;
              sub_10004FE7C(v138, v139, v135);
              if (sub_1000124B8(v52, 1, v134) == 1)
              {
                swift_bridgeObjectRelease(v45);
                sub_1000470BC(v52, &qword_100092D78);
                goto LABEL_25;
              }
              sub_1000456D4(v52, (uint64_t)v14, type metadata accessor for SidecarIdentity);
              v57 = v126;
              sub_10002BF78();
              v58 = v136;
              sub_10001241C(v17, v19);
              v136 = v58;
              if ((v133 & 1) != 0)
              {
                v62 = sub_10004626C((uint64_t)v14, v58, v17, v19, v57);
              }
              else
              {
                v59 = sub_10001F90C((uint64_t)v58);
                v60 = v129;
                sub_10003EB64((uint64_t)v14, v129, type metadata accessor for SidecarIdentity);
                v61 = v132;
                *(_QWORD *)(v60 + *(int *)(v132 + 20)) = v59;
                v58 = v136;
                *(_BYTE *)(v60 + *(int *)(v61 + 24)) = 0;
                v62 = sub_10002C9CC(v60, (uint64_t)v131[4].isa);
                sub_10003EB40();
              }

              sub_100012430(v17, v19);
              if (!v62)
              {
                swift_bridgeObjectRelease(v45);
                if (v22[90] != (_UNKNOWN *)-1)
                  swift_once(&qword_1000912D0, sub_100026680);
                sub_100006CAC(v8, (uint64_t)qword_10009A198);
                v71 = v58;
                v72 = sub_10001241C(v17, v19);
                v73 = Logger.logObject.getter(v72);
                v74 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v73, v74))
                {
                  v75 = (uint8_t *)swift_slowAlloc(12, -1);
                  *(_DWORD *)v75 = 134217984;
                  v140 = sub_10001F90C((uint64_t)v71);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v75 + 4, v75 + 12);

                  sub_100012430(v17, v19);
                  _os_log_impl((void *)&_mh_execute_header, v73, v74, "%lx: Ignoring Unexpected Message", v75, 0xCu);
                  swift_slowDealloc(v75, -1, -1);

                }
                else
                {

                  sub_100012430(v17, v19);
                  v73 = v71;
                }

                goto LABEL_82;
              }
              *(_DWORD *)(v62 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink) = sub_10003282C(v45);
              v63 = v62 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession;
              v64 = v62;
              Strong = swift_weakLoadStrong(v62 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession);
              swift_release(Strong);
              if (!Strong)
                swift_weakAssign(v63, v131);
              v66 = v64;
              if ((*(_BYTE *)(v64 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) & 1) == 0)
              {
                v135 = 0x296C6C756E28;
                *(_BYTE *)(v64 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) = 1;
                v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionPeerAddressString);
                v139 = v67;
                AnyHashable.init<A>(_:)(&v138, &type metadata for String, &protocol witness table for String);
                v68 = sub_100021938((uint64_t)&v140, v45);
                sub_10001F4E0((uint64_t)&v140);
                v121 = v19;
                if (v68
                  && (v137 = v68,
                      swift_dynamicCast(&v138, &v137, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
                {
                  v69 = v138;
                  v70 = v139;
                }
                else
                {
                  v70 = 0xE600000000000000;
                  v69 = 0x296C6C756E28;
                }
                v134 = v69;
                v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSelfAddressString);
                v139 = v76;
                AnyHashable.init<A>(_:)(&v138, &type metadata for String, &protocol witness table for String);
                v77 = sub_100021938((uint64_t)&v140, v45);
                sub_10001F4E0((uint64_t)&v140);
                v120 = v17;
                v125 = v14;
                if (v77
                  && (v137 = v77,
                      swift_dynamicCast(&v138, &v137, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
                {
                  v78 = v139;
                  v135 = v138;
                }
                else
                {
                  v78 = 0xE600000000000000;
                }
                v79 = *(_BYTE *)(v64 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity + *(int *)(v132 + 24));
                v80 = v22[90];
                v130 = v8;
                if ((v79 & 1) != 0)
                {
                  if (v80 != (void *)-1)
                    swift_once(&qword_1000912D0, sub_100026680);
                  sub_100006CAC(v8, (uint64_t)qword_10009A198);
                  swift_retain_n(v64, 2);
                  swift_bridgeObjectRetain(v78);
                  v81 = swift_bridgeObjectRetain(v70);
                  v82 = Logger.logObject.getter(v81);
                  v83 = static os_log_type_t.default.getter();
                  v84 = v83;
                  if (os_log_type_enabled(v82, v83))
                  {
                    v85 = swift_slowAlloc(32, -1);
                    LODWORD(v133) = v84;
                    v86 = v85;
                    v132 = swift_slowAlloc(96, -1);
                    v140 = v132;
                    *(_DWORD *)v86 = 136446722;
                    v131 = v82;
                    swift_retain(v64);
                    v87 = sub_100028E50();
                    v89 = v88;
                    v129 = v64;
                    swift_release(v64);
                    v138 = sub_100015FFC(v87, v89, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v86 + 4, v86 + 12);
                    swift_release_n(v64, 2);
                    swift_bridgeObjectRelease(v89);
                    *(_WORD *)(v86 + 12) = 2082;
                    swift_bridgeObjectRetain(v70);
                    v138 = sub_100015FFC(v134, v70, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v86 + 14, v86 + 22);
                    swift_bridgeObjectRelease_n(v70, 3);
                    *(_WORD *)(v86 + 22) = 2082;
                    swift_bridgeObjectRetain(v78);
                    v138 = sub_100015FFC(v135, v78, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v86 + 24, v86 + 32);
                    swift_bridgeObjectRelease_n(v78, 3);
                    v90 = v131;
                    _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v133, "=== %{public}s %{public}s -> %{public}s ===", (uint8_t *)v86, 0x20u);
                    v91 = v132;
                    swift_arrayDestroy(v132, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v91, -1, -1);
                    swift_slowDealloc(v86, -1, -1);

                    v19 = v121;
                    v17 = v120;
                    v66 = v129;
                    v8 = v130;
                    goto LABEL_65;
                  }

                  swift_bridgeObjectRelease_n(v78, 2);
                  v101 = v70;
                }
                else
                {
                  if (v80 != (void *)-1)
                    swift_once(&qword_1000912D0, sub_100026680);
                  sub_100006CAC(v8, (uint64_t)qword_10009A198);
                  swift_retain_n(v64, 2);
                  swift_bridgeObjectRetain(v78);
                  v92 = swift_bridgeObjectRetain(v70);
                  v93 = Logger.logObject.getter(v92);
                  v94 = static os_log_type_t.default.getter();
                  v95 = v94;
                  if (os_log_type_enabled(v93, v94))
                  {
                    v96 = swift_slowAlloc(32, -1);
                    v133 = swift_slowAlloc(96, -1);
                    v140 = v133;
                    *(_DWORD *)v96 = 136446722;
                    swift_retain(v64);
                    LODWORD(v132) = v95;
                    v97 = sub_100028E50();
                    v99 = v98;
                    swift_release(v64);
                    v138 = sub_100015FFC(v97, v99, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v96 + 4, v96 + 12);
                    swift_release_n(v64, 2);
                    swift_bridgeObjectRelease(v99);
                    *(_WORD *)(v96 + 12) = 2082;
                    swift_bridgeObjectRetain(v78);
                    v138 = sub_100015FFC(v135, v78, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v96 + 14, v96 + 22);
                    swift_bridgeObjectRelease_n(v78, 3);
                    *(_WORD *)(v96 + 22) = 2082;
                    swift_bridgeObjectRetain(v70);
                    v138 = sub_100015FFC(v134, v70, &v140);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v96 + 24, v96 + 32);
                    swift_bridgeObjectRelease_n(v70, 3);
                    _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v132, "=== %{public}s %{public}s -> %{public}s ===", (uint8_t *)v96, 0x20u);
                    v100 = v133;
                    swift_arrayDestroy(v133, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v100, -1, -1);
                    swift_slowDealloc(v96, -1, -1);

                    v19 = v121;
                    v17 = v120;
                    v8 = v130;
                    v66 = v64;
                    goto LABEL_65;
                  }

                  swift_bridgeObjectRelease_n(v70, 2);
                  v101 = v78;
                }
                swift_bridgeObjectRelease_n(v101, 2);
                swift_release_n(v64, 2);
                v19 = v121;
                v17 = v120;
                v8 = v130;
                v66 = v64;
              }
LABEL_65:
              v102 = v66;
              v103 = v136;
              v104 = sub_10001FE0C(v136);
              isa = Int._bridgeToObjectiveC()().super.super.isa;
              v106 = objc_msgSend(v103, "objectForKey:", isa);

              if (v106)
              {
                v140 = (uint64_t)v106;
                if ((swift_dynamicCast(&v138, &v140, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for UInt, 6) & 1) != 0&& (v138 & 1) != 0)
                {
                  sub_10002A228(v104);
                }
              }
              switch(v104)
              {
                case 1:
                case 7:
                  swift_bridgeObjectRelease(v45);
                  v54 = v136;
                  sub_10001241C(v17, v19);
                  sub_100046038(v54, v17, v19, v102);

                  swift_release(v102);
                  sub_100012430(v17, v19);
                  sub_10003EB40();
                  goto LABEL_29;
                case 2:
                  sub_10003EB40();

                  sub_100012430(v17, v19);
                  swift_release(v102);
                  swift_bridgeObjectRelease(v45);
                  return;
                case 3:
                  swift_bridgeObjectRelease(v45);
                  sub_10002FF10(v102, (uint64_t)v136, v17, v19);
                  sub_10003EB40();

                  sub_100012430(v17, v19);
                  swift_release(v102);
                  return;
                case 4:
                  swift_bridgeObjectRelease(v45);
                  v115 = v136;
                  v116 = sub_10001F980((uint64_t)v136);
                  sub_100022C8C();
                  swift_errorRelease(v116);

                  goto LABEL_80;
                case 5:
                  swift_bridgeObjectRelease(v45);
                  sub_10002A3DC();
                  goto LABEL_79;
                case 6:
                  v117 = sub_100025718(v45);
                  swift_bridgeObjectRelease(v45);
                  v118 = v136;
                  sub_1000324CC(v102, (uint64_t)v136, v17, v19, v117);

                  swift_release(v102);
                  swift_bridgeObjectRelease(v117);
                  break;
                default:
                  swift_bridgeObjectRelease(v45);
                  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
                  v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
                  v109 = sub_10001F230(v107, v108, -1010, 0, 0, 0);
                  swift_willThrow(v109, v110);
                  if (qword_1000912D0 != -1)
                    swift_once(&qword_1000912D0, sub_100026680);
                  v111 = sub_100006CAC(v8, (uint64_t)qword_10009A198);
                  v112 = v127;
                  v113 = v128;
                  v114 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 16))(v127, v111, v8);
                  __chkstk_darwin(v114);
                  sub_1000183F4(sub_1000328F0, 0, sub_100012D04);
                  (*(void (**)(char *, uint64_t))(v113 + 8))(v112, v8);
                  swift_errorRetain(v109);
                  sub_100022C8C();
                  swift_errorRelease(v109);
                  swift_errorRelease(v109);
LABEL_79:

LABEL_80:
                  swift_release(v102);
                  break;
              }
LABEL_82:
              sub_100012430(v17, v19);
              sub_10003EB40();
              return;
            }
          }
          goto LABEL_24;
        }
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v139, 0xD000000000000011, 0x800000010006E4B0, 0);
        swift_bridgeObjectRelease(v48);
        if ((v49 & 1) != 0)
          goto LABEL_20;
      }
    }
LABEL_24:
    swift_bridgeObjectRelease(v45);
    goto LABEL_25;
  }
  if (a3)
    v23 = a3;
  else
    v23 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_bridgeObjectRetain(a3);
  v24.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v130 = v8;
  sub_100006CAC(v8, (uint64_t)qword_10009A198);
  v25 = v136;
  sub_10001241C(v17, v19);
  v26 = v24.super.isa;
  v27 = v25;
  sub_10001241C(v17, v19);
  v28 = v26;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v123 = v29;
    v32 = v31;
    v122 = (objc_class **)swift_slowAlloc(8, -1);
    v124 = swift_slowAlloc(32, -1);
    v140 = v124;
    *(_DWORD *)v32 = 136446466;
    v126 = v5;
    v33 = sub_10001FF08(v27, v17, v19);
    v125 = v14;
    v34 = v19;
    v36 = v35;
    v138 = sub_100015FFC(v33, v35, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v32 + 4, v32 + 12);

    swift_bridgeObjectRelease(v36);
    sub_100012430(v17, v34);

    sub_100012430(v17, v34);
    *(_WORD *)(v32 + 12) = 2114;
    v138 = (uint64_t)v28;
    v37 = v28;
    v38 = v34;
    v39 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v32 + 14, v32 + 22);
    v40 = v122;
    *v122 = v28;

    v41 = v123;
    _os_log_impl((void *)&_mh_execute_header, v123, v30, "Received %{public}s, %{public}@", (uint8_t *)v32, 0x16u);
    v42 = sub_100010F40((uint64_t *)&unk_100092180);
    swift_arrayDestroy(v40, 1, v42);
    v43 = v40;
    v14 = v39;
    v19 = v38;
    v5 = v126;
    swift_slowDealloc(v43, -1, -1);
    v44 = v124;
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    v8 = v130;
    v22 = &off_100091000;
    goto LABEL_11;
  }

  sub_100012430(v17, v19);
  sub_100012430(v17, v19);

  v8 = v130;
  v22 = &off_100091000;
  if (a3)
    goto LABEL_12;
LABEL_25:
  if (v22[90] != (_UNKNOWN *)-1)
    swift_once(&qword_1000912D0, sub_100026680);
  v53 = sub_100006CAC(v8, (uint64_t)qword_10009A198);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Received Malformed Message", v56, 2u);
    swift_slowDealloc(v56, -1, -1);

LABEL_29:
    sub_100012430(v17, v19);
  }
  else
  {

    sub_100012430(v17, v19);
  }
}

void sub_10002E6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v9 = sub_100006CAC(v5, (uint64_t)qword_100092650);
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    __chkstk_darwin(v10);
    *(&v19 - 2) = a1;
    sub_1000183F4(sub_100046F8C, a3, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    sub_100006CAC(v5, (uint64_t)qword_100092650);
    v11 = swift_retain_n(a3, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20 = v15;
      *(_DWORD *)v14 = 136446210;
      swift_retain(a3);
      v16 = RapportRemoteDisplaySession.description.getter();
      v18 = v17;
      swift_release(a3);
      v19 = sub_100015FFC(v16, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Activated %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
  }
}

uint64_t sub_10002E970()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v5;

  v5 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(19, 1);
  v0._object = (void *)0x800000010006FBD0;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  v1._countAndFlagsBits = RapportRemoteDisplaySession.description.getter();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return v5;
}

void sub_10002E9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  uint64_t v25;

  sub_100012D54();
  v3 = v2;
  v5 = v4;
  sub_1000484C0();
  sub_100013118();
  __chkstk_darwin(v6);
  sub_10004852C();
  sub_100012DD0(v0 + 120, (uint64_t)&v25, 0);
  sub_100048968();
  v7 = sub_100013040();
  sub_100025D58(v7, v5);
  v9 = v8;
  sub_1000132F4();
  if ((v9 & 1) == 0)
  {
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v10 = sub_100012DA8();
    v11 = sub_100006CAC(v10, (uint64_t)qword_100092650);
    sub_100049054(v11, v12, type metadata accessor for SidecarIdentity);
    v13 = sub_100012F20(v5);
    Logger.logObject.getter(v13);
    sub_1000491E0();
    if (sub_100048DD4(v9))
    {
      v14 = sub_100006D24(22);
      v15 = sub_100006D24(64);
      v24[0] = v15;
      v16 = sub_1000487A8(4.8752e-34);
      v23 = sub_100015FFC(v16, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v1, v14 + 12);
      sub_1000132F4();
      sub_100048994();
      sub_100048C80();
      sub_100048968();
      RapportRemoteDisplaySession.description.getter();
      sub_100048E34();
      v18 = sub_100013014();
      v23 = sub_100048560(v18, v19, v24);
      sub_100013128((uint64_t)&v23, (uint64_t)v24, v20, v14 + 22);
      sub_100012DE8(v5);
      sub_10004857C();
      sub_10004886C((void *)&_mh_execute_header, v9, v21, "%{public}s: Canceling %{public}s");
      sub_1000487B8((uint64_t)&type metadata for Any);
      sub_100006D04(v15);
      sub_100006D04(v14);

    }
    else
    {
      sub_100048994();

      sub_100012DE8(v5);
    }
    RapportRemoteDisplaySession.cancel()();
    sub_10002C560(v5);
    sub_100012DD0(v0 + 80, (uint64_t)v24, 32);
    sub_10002189C(v3, *(_QWORD *)(v0 + 80), (uint64_t (*)(void))sub_1000399C4);
    if (v22)
    {
      sub_100048E94();
      sub_100012DD0(v0 + 80, (uint64_t)v24, 33);
      sub_10003C5BC();
      sub_100048E94();
      sub_100048718();
      sub_100027B88();
      sub_100048558();
    }
    else
    {
      sub_100048E94();
    }
  }
  sub_10002BF78();
  sub_100012D28();
}

uint64_t sub_10002EC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v1 + 120, v6, 33, 0);
  swift_retain(a1);
  sub_10003CC30();
  swift_endAccess(v6);
  v3 = sub_100010F40(&qword_100092DF8);
  sub_100047140((uint64_t)&unk_100092E00);
  return Subject<>.send()(v3, v4);
}

uint64_t sub_10002ED2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v0 + 120, v6, 33, 0);
  sub_10003C500();
  v2 = v1;
  swift_endAccess(v6);
  swift_release(v2);
  v3 = sub_100010F40(&qword_100092DF8);
  sub_100047140((uint64_t)&unk_100092E00);
  return Subject<>.send()(v3, v4);
}

void sub_10002EDE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v15[24];

  v5 = _s7SessionC8IdentityVMa(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = 0;
  v10 = *(int *)(v6 + 20);
  v11 = v2 + 120;
  while (1)
  {
    v12 = arc4random() & 0x7FFFFFFF;
    sub_10003EB64(a1, (uint64_t)v8, type metadata accessor for SidecarIdentity);
    *(_QWORD *)&v8[*(int *)(v5 + 20)] = v12;
    v8[*(int *)(v5 + 24)] = 0;
    if ((v9 & 1) != 0)
      sub_10003EB40();
    sub_1000456D4((uint64_t)v8, a2, _s7SessionC8IdentityVMa);
    if (!*(_QWORD *)(a2 + v10))
      break;
    swift_beginAccess(v11, v15, 32, 0);
    if (!*(_QWORD *)(*(_QWORD *)v11 + 16) || (sub_100039A4C(a2), (v13 & 1) == 0))
    {
      swift_endAccess(v15);
      return;
    }
    swift_endAccess(v15);
    v9 = 1;
  }
}

uint64_t sub_10002EF10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  Swift::String v4;

  sub_1000490D8(a1, a2);
  sub_100048BA0();
  v4._countAndFlagsBits = sub_100028E50();
  sub_100049120(v4);
  sub_1000132A0();
  sub_100048D64();
  return v3;
}

void sub_10002EF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  sub_1000133E0();
  sub_100013118();
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000484C0();
  sub_100013118();
  __chkstk_darwin(v6);
  sub_10004852C();
  sub_10003EB64(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v5, _s7SessionC8IdentityVMa);
  v7 = sub_100049048();
  sub_1000456D4(v7, v8, type metadata accessor for SidecarIdentity);
  sub_100012DD0(v1 + 136, (uint64_t)v10, 33);
  sub_10003C5BC();
  swift_endAccess(v10);
  sub_1000130A8();
  sub_100048F80();
  sub_10004889C();
}

id sub_10002F04C(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v7 = (uint64_t)result;
    v8 = *(_QWORD *)(a5 + 48);
    v9 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v7, _s7SessionC8IdentityVMa);
    return *(id *)(*(_QWORD *)(a5 + 56) + 8 * a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10002F0F0(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v7 = result;
    v8 = *(_QWORD *)(a5 + 48);
    v9 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v7, _s7SessionC8IdentityVMa);
    return swift_retain(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2));
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_10002F194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  char v39[24];
  char v40[24];
  _QWORD v41[5];

  v1 = sub_100010F40(&qword_100092DE0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v32 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  swift_beginAccess(v0 + 15, v40, 0, 0);
  if (!*(_QWORD *)(v0[15] + 16))
  {
    swift_beginAccess(v0 + 19, v39, 0, 0);
    if (!*(_QWORD *)(v0[19] + 16))
    {
      v10 = (void *)v0[22];
      if (v10)
        objc_msgSend(v10, "relayTerminateService");
    }
  }
  v11 = (void *)v0[21];
  if (!v11)
    return;
  v32 = v0;
  v12 = v0[15];
  sub_100045618(v12, v41);
  v13 = v41[0];
  v14 = v41[3];
  v15 = v41[4];
  v36 = v41[1];
  v37 = (unint64_t)(v41[2] + 64) >> 6;
  v33 = v12;
  swift_bridgeObjectRetain_n(v12, 2);
  v34 = v11;
  swift_unknownObjectRetain(v11);
  v38 = (unint64_t)"com.apple.sidecar.markupdisplay";
  v35 = 0x800000010006E0C0;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v14 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v13 + 48);
    v23 = _s7SessionC8IdentityVMa(0);
    sub_10003EB64(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v17, (uint64_t)v9, _s7SessionC8IdentityVMa);
    v24 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v17);
    *(_QWORD *)&v9[*(int *)(v1 + 48)] = v24;
    sub_100046F20((uint64_t)v9, (uint64_t)v7, &qword_100092DE0);
    v25 = *(int *)(v1 + 48);
    sub_10003EB64((uint64_t)v7, (uint64_t)v4, _s7SessionC8IdentityVMa);
    v26 = *(_QWORD *)&v7[v25];
    *(_QWORD *)&v4[v25] = v26;
    v27 = (_QWORD *)(v26 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    v28 = v27[1];
    if (*v27 == 0xD000000000000019 && v28 == v35)
    {
      swift_retain(v24);
      sub_10003EB40();
      sub_1000470BC((uint64_t)v7, &qword_100092DE0);
LABEL_32:
      swift_unknownObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_release(v13);
      return;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, 0xD000000000000019, v38 | 0x8000000000000000, 0);
    swift_retain(v24);
    sub_10003EB40();
    sub_1000470BC((uint64_t)v7, &qword_100092DE0);
    if ((v29 & 1) != 0)
      goto LABEL_32;
  }
  v18 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    return;
  }
  if (v18 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = v14 + 1;
  if (v19)
    goto LABEL_26;
  v20 = v14 + 2;
  if (v14 + 2 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_26;
  v20 = v14 + 3;
  if (v14 + 3 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_26;
  v20 = v14 + 4;
  if (v14 + 4 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_26;
  v20 = v14 + 5;
  if (v14 + 5 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_26;
  v20 = v14 + 6;
  if (v14 + 6 >= v37)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
  {
LABEL_26:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
    v14 = v20;
    goto LABEL_27;
  }
  v21 = v14 + 7;
  while (v21 < v37)
  {
    v19 = *(_QWORD *)(v36 + 8 * v21++);
    if (v19)
    {
      v20 = v21 - 1;
      goto LABEL_26;
    }
  }
LABEL_33:
  swift_bridgeObjectRelease(v33);
  swift_release(v13);
  v30 = v34;
  objc_msgSend(v34, "invalidate");
  swift_unknownObjectRelease(v30);
  v31 = v32[21];
  v32[21] = 0;
  swift_unknownObjectRelease(v31);
}

uint64_t sub_10002F574(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease(a1);
  }
  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v6);
  v2 = result;
  if (!result)
    return swift_bridgeObjectRelease(a1);
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain(v5);
      }
      sub_100022C8C();
      swift_release(v5);
    }
    return swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002F65C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(v1 + 120, v9, 0, 0);
  v3 = *(_QWORD *)(v1 + 120);
  v4 = a1;
  v5 = swift_bridgeObjectRetain(v3);
  sub_100021C3C(v5, v4);
  v7 = v6;
  swift_bridgeObjectRelease(v3);
  sub_10002F574(v7);
  return swift_bridgeObjectRelease(v7);
}

BOOL sub_10002F6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];

  swift_beginAccess(v3 + 120, v13, 0, 0);
  v7 = *(_QWORD *)(v3 + 120);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v7);
  swift_retain(a1);
  sub_100022330(v7, a1, a2, a3);
  v9 = v8;
  swift_bridgeObjectRelease(v7);
  sub_10002F574(v9);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v12 = v9;
    else
      v12 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v9);
  return v10 != 0;
}

void sub_10002F7EC(void *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  id v4;

  swift_beginAccess(v1 + 144, v3, 33, 0);
  sub_1000431A8(&v4, a1, type metadata accessor for Client, &unk_100092FA0);
  swift_endAccess(v3);

}

void sub_10002F858(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (qword_1000912C0 != -1)
    swift_once(&qword_1000912C0, sub_1000265F8);
  v3 = sub_100012DA8();
  v4 = sub_100006CAC(v3, (uint64_t)qword_100092650);
  oslog = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(oslog, v5);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)sub_100006D24(2);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a2, v7, 2u);
    sub_100006D04((uint64_t)v7);
  }
  sub_100012EB8(oslog);
}

void sub_10002F910()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  void (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  sub_100012D54();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000484C0();
  sub_100013118();
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  sub_10001C8D8();
  v88 = v13;
  v14 = sub_100012DA8();
  v91 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100048930();
  v90 = v15;
  sub_100010F40(&qword_1000918F8);
  sub_100013118();
  __chkstk_darwin(v16);
  sub_100048930();
  v89 = v17;
  v18 = sub_10001322C();
  v87 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100048930();
  v86 = v19;
  if (qword_1000912C0 != -1)
    swift_once(&qword_1000912C0, sub_1000265F8);
  v92 = v14;
  v93 = v18;
  v20 = sub_100006CAC(v14, (uint64_t)qword_100092650);
  v21 = sub_100012F20(v8);
  v94 = v20;
  Logger.logObject.getter(v21);
  v22 = sub_100048CFC();
  v23 = os_log_type_enabled(v1, v22);
  v83 = v12;
  if (v23)
  {
    v24 = (uint8_t *)sub_100006D24(12);
    v25 = sub_100006D24(32);
    v85 = v4;
    v26 = v25;
    v96 = v25;
    *(_DWORD *)v24 = 136446210;
    sub_10004876C();
    RapportRemoteDisplaySession.description.getter();
    v84 = v2;
    v27 = v6;
    v29 = v28;
    v30 = sub_1000132B4();
    v32 = sub_100048560(v30, v31, &v96);
    v33 = sub_1000133AC(v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34, v24 + 4, v24 + 12);
    sub_100012DE8(v8);
    v35 = v29;
    v6 = v27;
    v2 = v84;
    swift_bridgeObjectRelease(v35);
    sub_10001C890((void *)&_mh_execute_header, v1, v22, "%{public}s Started", v24);
    sub_10001C888(v26, v36, (uint64_t)&type metadata for Any + 8);
    v37 = v26;
    v4 = v85;
    sub_100006D04(v37);
    sub_100006D04((uint64_t)v24);

  }
  else
  {

    sub_100012DE8(v8);
  }
  v96 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(RPEventIDAny);
  v38 = sub_100014AC4((uint64_t)&unk_100086EF0, 32);
  *(_QWORD *)(v38 + 16) = v2;
  *(_QWORD *)(v38 + 24) = v8;
  v39 = type metadata accessor for RapportRemoteDisplaySession();
  sub_10004876C();
  swift_retain(v2);
  v40 = sub_100048E58();
  RapportMessageable.registerEvent(id:options:handler:)(v40, v41, 0, v42, v38, v39, v43);
  sub_10001327C();
  sub_100013014();
  RapportRemoteDisplaySession.destinationDevice.getter();
  if (!v44)
    goto LABEL_9;
  v96 = v44;
  v45 = sub_100048E1C();
  RapportEndpoint.identifier.getter(v45, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  v47 = v46;
  sub_100013014();
  v48 = v89;
  UUID.init(uuidString:)(v47);
  sub_1000132F4();
  v49 = v93;
  if (sub_1000124B8(v48, 1, v93) == 1)
  {
    sub_1000470BC(v48, &qword_1000918F8);
LABEL_9:
    sub_100012E50(v44, (unint64_t *)&qword_100091750, NSError_ptr);
    sub_1000486D4();
    v56 = sub_10001F3EC(v50, v51, v52, v53, v54, v55, 1226);
    v57 = v90;
    v58 = v91;
    v59 = sub_100048B14(v90, v94, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 16));
    __chkstk_darwin(v59);
    sub_1000489C8();
    *(_QWORD *)(v60 - 16) = v56;
    sub_100049154((uint64_t (*)(void))sub_10004570C, v61, sub_100012D04);
    sub_100048720(v57, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
    v62 = v56;
    v6(v56);

    goto LABEL_14;
  }
  v64 = v86;
  v63 = v87;
  v65 = sub_100049260();
  sub_100048E8C(v65, v66, v67);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  v69 = v88;
  sub_100048E8C(v88, v64, v68);
  sub_10003EB64(v69, (uint64_t)v83, type metadata accessor for SidecarIdentity);
  v70 = sub_100012F20(v8);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter();
  if (sub_10004885C(v72))
  {
    v73 = sub_100006D24(22);
    v74 = sub_100006D24(64);
    v84 = v2;
    v75 = v74;
    v96 = v74;
    *(_DWORD *)v73 = 136446466;
    v76 = sub_100050048();
    v95 = sub_100015FFC(v76, v77, &v96);
    v85 = v4;
    sub_100013128((uint64_t)&v95, (uint64_t)&v96, v78, v73 + 12);
    sub_1000132F4();
    sub_100048B4C();
    *(_WORD *)(v73 + 12) = 2082;
    sub_10004876C();
    v79 = RapportRemoteDisplaySession.description.getter();
    sub_1000132B4();
    v95 = sub_1000133CC(v79, v80, &v96);
    sub_100013128((uint64_t)&v95, (uint64_t)&v96, v81, v73 + 22);
    sub_100012DE8(v8);
    sub_10001324C();
    _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v48, "%{public}s: Opened %{public}s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    sub_100006D04(v75);
    v82 = v73;
    v49 = v93;
    sub_100006D04(v82);

  }
  else
  {
    sub_100048B4C();

    sub_100012DE8(v8);
  }
  sub_10002C270(v8, v88, 0);
  sub_10004921C();
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v49);
  v6(0);
LABEL_14:
  sub_100012D28();
}

void sub_10002FEE0(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  sub_10002D34C(a4, a1, a2, 1);
}

void sub_10002FF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char v76;
  char v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  char v83;
  _BYTE *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE v156[16];
  uint64_t v157;
  uint64_t v158[4];
  unint64_t v159;
  uint64_t v160;

  v153 = a2;
  v5 = v4;
  v151 = a3;
  v152 = a4;
  v142 = _s7SessionC8IdentityVMa(0);
  v150 = *(_QWORD *)(v142 - 8);
  v7 = __chkstk_darwin(v142);
  v141 = (uint64_t *)((char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v144 = ((char *)&v139 - v9);
  v149 = sub_100010F40(&qword_100092DE0);
  v10 = __chkstk_darwin(v149);
  v148 = (uint64_t)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v147 = (uint64_t)&v139 - v13;
  v14 = __chkstk_darwin(v12);
  v146 = (uint64_t)&v139 - v15;
  __chkstk_darwin(v14);
  v145 = (uint64_t)&v139 - v16;
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  v19 = qword_1000912D0;
  swift_bridgeObjectRetain(v17);
  if (v19 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100006CAC(v20, (uint64_t)qword_10009A198);
  swift_bridgeObjectRetain_n(v17, 2);
  v22 = swift_retain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v143 = v21;
  if (v25)
  {
    v26 = swift_slowAlloc(22, -1);
    v139 = (uint64_t *)v18;
    v27 = v26;
    v28 = swift_slowAlloc(64, -1);
    v140 = v4;
    v29 = v28;
    v158[0] = v28;
    *(_DWORD *)v27 = 136446466;
    swift_retain(a1);
    v30 = sub_100028E50();
    v31 = v17;
    v33 = v32;
    swift_release(a1);
    v155 = sub_100015FFC(v30, v33, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v27 + 4, v27 + 12);
    swift_release_n(a1, 2);
    v34 = v33;
    v17 = v31;
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v27 + 12) = 2082;
    swift_bridgeObjectRetain(v31);
    v18 = (uint64_t)v139;
    v155 = sub_100015FFC((uint64_t)v139, v17, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s: Connecting '%{public}s'", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    v35 = v29;
    v5 = v140;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    swift_release_n(a1, 2);
  }
  v36 = v151;
  v37 = v152;
  v38 = v153;
  if (qword_1000912F8 != -1)
    swift_once(&qword_1000912F8, sub_10004AAF4);
  v39 = (uint64_t *)v18;
  if ((sub_100026494(v18, v17, qword_10009A200) & 1) == 0)
  {
    swift_bridgeObjectRelease(v17);
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v138 = 1242;
    LOBYTE(v137) = 2;
    v42 = -103;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client))
  {
    swift_bridgeObjectRelease(v17);
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v138 = 1247;
    LOBYTE(v137) = 2;
    v42 = -100;
LABEL_12:
    v154 = (unint64_t)sub_10001F230(v40, v41, v42, 0, 0, 0);
    swift_willThrow(v154, v43);
    return;
  }
  if ((v18 != 0xD000000000000019 || v17 != 0x800000010006E0C0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, 0xD000000000000019, 0x800000010006E0C0, 0) & 1) == 0)
  {
    v49 = (uint64_t)v144;
    goto LABEL_33;
  }
  v44 = swift_beginAccess(v5 + 15, &v155, 0, 0);
  v45 = v5[15];
  __chkstk_darwin(v44);
  *(&v139 - 4) = (uint64_t *)a1;
  *(&v139 - 3) = (uint64_t *)v18;
  v137 = v17;
  v46 = swift_bridgeObjectRetain(v45);
  v47 = v154;
  v48 = sub_1000439F8(v46, (uint64_t (*)(char *, uint64_t))sub_100046504, (uint64_t)(&v139 - 6));
  v154 = v47;
  swift_bridgeObjectRelease(v45);
  v49 = (uint64_t)v144;
  if (*(_QWORD *)(v48 + 16))
  {
    swift_retain_n(a1, 2);
    swift_bridgeObjectRetain(v17);
    v50 = swift_retain(v48);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v52))
    {
      v144 = v51;
      LODWORD(v143) = v52;
      v37 = swift_slowAlloc(32, -1);
      v142 = swift_slowAlloc(96, -1);
      v158[0] = v142;
      *(_DWORD *)v37 = 136446722;
      swift_retain(a1);
      v53 = sub_100028E50();
      v5 = (_QWORD *)v17;
      v17 = v54;
      swift_release(a1);
      v159 = sub_100015FFC(v53, v17, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v37 + 4, v37 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v17);
      v49 = 2082;
      *(_WORD *)(v37 + 12) = 2082;
      swift_bridgeObjectRetain(v5);
      v159 = sub_100015FFC((uint64_t)v39, (unint64_t)v5, v158);
      v141 = &v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease_n(v5, 3);
      *(_WORD *)(v37 + 22) = 2082;
      v36 = *(_QWORD *)(v48 + 16);
      v55 = _swiftEmptyArrayStorage;
      if (v36)
      {
        v140 = (_QWORD *)v37;
        v159 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v36);
        v56 = sub_100045770(v48);
        if ((v56 & 0x8000000000000000) == 0)
        {
          v17 = v56;
          if (v56 < 1 << *(_BYTE *)(v48 + 32))
          {
            v58 = v48 + 64;
            v151 = v48 + 64;
            while (1)
            {
              v37 = 1 << v17;
              if ((*(_QWORD *)(v58 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
                break;
              if ((_DWORD)v57 != *(_DWORD *)(v48 + 36))
                goto LABEL_68;
              v153 = v57;
              v154 = v17 >> 6;
              v152 = v36;
              v59 = v149;
              v60 = *(int *)(v149 + 48);
              v61 = *(_QWORD *)(v48 + 48) + *(_QWORD *)(v150 + 72) * v17;
              v62 = v48;
              v63 = v145;
              sub_10003EB64(v61, v145, _s7SessionC8IdentityVMa);
              v64 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v17);
              *(_QWORD *)(v63 + v60) = v64;
              v65 = v146;
              sub_10003EB64(v63, v146, _s7SessionC8IdentityVMa);
              *(_QWORD *)(v65 + *(int *)(v59 + 48)) = v64;
              v66 = v65;
              v67 = v147;
              v39 = &qword_100092DE0;
              sub_100046F20(v66, v147, &qword_100092DE0);
              swift_retain_n(v64, 2);
              v68 = v63;
              v48 = v62;
              sub_1000470BC(v68, &qword_100092DE0);
              v69 = *(int *)(v59 + 48);
              v70 = v148;
              v49 = (uint64_t)_s7SessionC8IdentityVMa;
              sub_10003EB64(v67, v148, _s7SessionC8IdentityVMa);
              a1 = *(_QWORD *)(v67 + v69);
              *(_QWORD *)(v70 + v69) = a1;
              swift_retain(a1);
              sub_10003EB40();
              sub_1000470BC(v67, &qword_100092DE0);
              v58 = (uint64_t)&v159;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
              v5 = *(_QWORD **)(v159 + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
              v72 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5);
              specialized ContiguousArray._endMutation()(v72);
              v73 = -1 << *(_BYTE *)(v48 + 32);
              if ((uint64_t)v17 >= -v73)
                goto LABEL_69;
              v58 = v151;
              if ((*(_QWORD *)(v151 + 8 * v154) & v37) == 0)
                goto LABEL_70;
              if ((_DWORD)v153 != *(_DWORD *)(v48 + 36))
                goto LABEL_71;
              v74 = _HashTable.occupiedBucket(after:)(v17, v151, ~v73);
              v36 = v152 - 1;
              if (v152 == 1)
              {
                v55 = (_QWORD *)v159;
                v108 = v144;
                v37 = (unint64_t)v140;
                goto LABEL_56;
              }
              v17 = v74;
              if ((v74 & 0x8000000000000000) == 0)
              {
                v57 = *(unsigned int *)(v48 + 36);
                if (v74 < 1 << *(_BYTE *)(v48 + 32))
                  continue;
              }
              goto LABEL_30;
            }
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v108 = v144;
LABEL_56:
      v118 = type metadata accessor for Relay.Session(0);
      v119 = Array.description.getter(v55, v118);
      v121 = v120;
      swift_bridgeObjectRelease(v55);
      v159 = sub_100015FFC(v119, v121, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v141, v37 + 24, v37 + 32);
      swift_release_n(v48, 2);
      swift_bridgeObjectRelease(v121);
      _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v143, "%{public}s: Existing Sessions for %{public}s: %{public}s", (uint8_t *)v37, 0x20u);
      v122 = v142;
      swift_arrayDestroy(v142, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_release_n(v48, 2);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_release_n(a1, 2);
    }
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v138 = 1260;
    LOBYTE(v137) = 2;
    v42 = -105;
    goto LABEL_12;
  }
LABEL_31:
  swift_release(v48);
  v38 = v153;
LABEL_33:
  sub_10001FE9C(v38);
  if ((v76 & 1) != 0)
  {
    v75 = sub_100031264(v38, v36, v37);
    if ((v77 & 1) != 0)
    {
LABEL_41:
      v48 = (uint64_t)(v5 + 20);
      swift_beginAccess(v5 + 20, v158, 32, 0);
      v93 = v5[20];
      swift_bridgeObjectRetain(v17);
      sub_100021978((uint64_t)v39, v17, v93);
      v58 = v94;
      swift_bridgeObjectRelease(v17);
      if (!v58)
      {
        swift_endAccess(v158);
LABEL_80:
        v130 = v154;
        sub_100031428((uint64_t)v39, v17);
        swift_bridgeObjectRelease(v17);
        v154 = v130;
        return;
      }
      v153 = v17;
      v159 = v58;
      swift_endAccess(v158);
      v17 = (unint64_t)v58 >> 62;
      if (!((unint64_t)v58 >> 62))
      {
        if (!*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_79:
          swift_bridgeObjectRelease(v58);
          v17 = v153;
          goto LABEL_80;
        }
        goto LABEL_44;
      }
LABEL_72:
      if (v58 < 0)
        v126 = v58;
      else
        v126 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      v127 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v58);
      if (!v127)
        goto LABEL_79;
      v152 = v48;
      swift_bridgeObjectRetain(v58);
      v128 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v58);
      if (!v128)
      {
LABEL_95:
        __break(1u);
        return;
      }
      swift_bridgeObjectRetain(v58);
      v129 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v58);
      v48 = v152;
      if (!v129)
      {
        __break(1u);
        goto LABEL_79;
      }
LABEL_44:
      if ((v58 & 0xC000000000000001) != 0)
      {
        v131 = v58;
        v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
        if (v17)
        {
          if (v58 < 0)
            v136 = v58;
          else
            v136 = v58 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v58);
          v97 = _CocoaArrayWrapper.endIndex.getter(v136);
          swift_bridgeObjectRelease(v131);
          goto LABEL_48;
        }
        v95 = v58 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        v95 = v58 & 0xFFFFFFFFFFFFFF8;
        if (!*(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_84;
        }
        v96 = *(id *)(v58 + 32);
      }
      v97 = *(_QWORD *)(v95 + 16);
LABEL_48:
      v140 = v5;
      if (v97)
      {
        sub_1000457F0(0, 1);
        swift_retain_n(a1, 2);
        v5 = v96;
        v98 = Logger.logObject.getter(v5);
        v99 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v98, v99))
        {
          v100 = swift_slowAlloc(18, -1);
          v139 = v39;
          v101 = v100;
          v152 = swift_slowAlloc(32, -1);
          v158[0] = v152;
          *(_DWORD *)v101 = 136446466;
          swift_retain(a1);
          v102 = sub_100028E50();
          v104 = v103;
          swift_release(a1);
          v157 = sub_100015FFC(v102, v104, v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v101 + 4, v101 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v104);
          *(_WORD *)(v101 + 12) = 1024;
          v105 = *(_DWORD *)((char *)v5 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);

          LODWORD(v157) = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, (char *)&v157 + 4, v101 + 14, v101 + 18);

          _os_log_impl((void *)&_mh_execute_header, v98, v99, "%{public}s: Connecting to Pending Service Provider PID %d", (uint8_t *)v101, 0x12u);
          v106 = v152;
          swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v106, -1, -1);
          v107 = v101;
          v39 = v139;
          swift_slowDealloc(v107, -1, -1);

        }
        else
        {

          swift_release_n(a1, 2);
        }
        v17 = v153;
        sub_10003138C(a1, v5);
        v58 = v159;
        if (!(v159 >> 62))
        {
          if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_66:
            swift_beginAccess(v48, v158, 33, 0);
            sub_10003CD10(v58, (uint64_t)v39, v17);
            swift_endAccess(v158);

LABEL_89:
            swift_bridgeObjectRelease(v17);
            return;
          }
LABEL_88:
          swift_bridgeObjectRelease(v58);
          swift_beginAccess(v48, v158, 33, 0);
          sub_10003C9B0();
          v135 = v134;
          swift_endAccess(v158);
          swift_bridgeObjectRelease(v17);

          v17 = v135;
          goto LABEL_89;
        }
LABEL_84:
        if (v58 < 0)
          v132 = v58;
        else
          v132 = v58 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v58);
        v133 = _CocoaArrayWrapper.endIndex.getter(v132);
        swift_bridgeObjectRelease(v58);
        if (v133)
          goto LABEL_66;
        goto LABEL_88;
      }
      __break(1u);
      goto LABEL_95;
    }
  }
  v78 = v75;
  v79 = (uint64_t)v141;
  sub_10003EB64(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v141, _s7SessionC8IdentityVMa);
  sub_1000456D4(v79, v49, type metadata accessor for SidecarIdentity);
  v80 = v142;
  *(_QWORD *)(v49 + *(int *)(v142 + 20)) = v78;
  *(_BYTE *)(v49 + *(int *)(v80 + 24)) = 1;
  swift_beginAccess(v5 + 19, v158, 33, 0);
  sub_10003C500();
  v82 = v81;
  swift_endAccess(v158);
  if (!v82)
  {
    sub_10003EB40();
    goto LABEL_41;
  }
  swift_bridgeObjectRelease(v17);
  v83 = v82[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect];
  swift_retain(a1);
  if ((v83 & 1) != 0)
  {
    v84 = v82;
    swift_retain(a1);
    v82 = v84;
    v85 = Logger.logObject.getter(v82);
    v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = swift_slowAlloc(18, -1);
      v140 = v5;
      v88 = v87;
      v153 = swift_slowAlloc(32, -1);
      v158[0] = v153;
      *(_DWORD *)v88 = 136446466;
      swift_retain(a1);
      v89 = sub_100028E50();
      v91 = v90;
      swift_release(a1);
      v159 = sub_100015FFC(v89, v91, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v88 + 4, v88 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v91);
      *(_WORD *)(v88 + 12) = 1024;
      LODWORD(v91) = *(_DWORD *)&v82[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

      LODWORD(v159) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, (char *)&v159 + 4, v88 + 14, v88 + 18);

      _os_log_impl((void *)&_mh_execute_header, v85, v86, "%{public}s: Reconnecting to Service Provider PID %d", (uint8_t *)v88, 0x12u);
      v92 = v153;
      swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v88, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    sub_10003138C(a1, v82);
  }
  else
  {
    v109 = swift_retain(a1);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v110, v111))
    {
      v112 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = swift_slowAlloc(32, -1);
      v158[0] = v113;
      *(_DWORD *)v112 = 136446210;
      v154 = (unint64_t)(v112 + 4);
      swift_retain(a1);
      v114 = sub_100028E50();
      v115 = a1;
      v117 = v116;
      swift_release(v115);
      v159 = sub_100015FFC(v114, v117, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v154, v112 + 12);
      swift_release_n(v115, 2);
      swift_bridgeObjectRelease(v117);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "%{public}s: Canceling Reconnect to Closed Service Provider", v112, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      swift_slowDealloc(v112, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v138 = 1291;
    LOBYTE(v137) = 2;
    v154 = (unint64_t)sub_10001F230(v123, v124, 3072, 0, 0, 0);
    swift_willThrow(v154, v125);
  }

  sub_10003EB40();
}

uint64_t sub_100031220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a2 == a3)
    return 0;
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  if (v5 == a4 && v6 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, a4, a5, 0);
}

id sub_100031264(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Class isa;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  int v11;

  v11 = 0;
  if (a3 >> 60 == 15)
    return 0;
  sub_1000120BC(a2, a3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = OPACKDecodeData(isa, 0, &v11);

  if (v6)
  {
    v7 = objc_opt_self(NSNumber);
    v8 = (void *)swift_dynamicCastObjCClass(v6, v7);
    if (!v8)
    {
      sub_100012430(a2, a3);
      swift_unknownObjectRelease(v6);
      return 0;
    }
    if (!v11)
    {
      v9 = objc_msgSend(v8, "integerValue");
      swift_unknownObjectRelease(v6);
      sub_100012430(a2, a3);
      return v9;
    }
    swift_unknownObjectRelease(v6);
  }
  sub_100012430(a2, a3);
  return 0;
}

uint64_t sub_10003138C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[3];

  v3 = v2;
  v5 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  swift_beginAccess(v3 + 152, v14, 33, 0);
  v6 = a2;
  sub_10003CCC8((uint64_t)v6, v5, (uint64_t)sub_10003E59C, v7, v8, v9, v10, v11, v13, v14[0]);
  swift_endAccess(v14);
  sub_10002A4D0();
  return sub_1000318A8(v6);
}

void sub_100031428(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v5;
  NSString v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  char *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[5];
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v5 = (void *)objc_opt_self(SidecarService);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "extensionForIdentifier:", v6);

  if (v7)
  {
    v8 = *(void **)(v2 + 176);
    if (v8)
    {
      v33 = v2;
      v9 = qword_1000912D0;
      v10 = v8;
      if (v9 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v11 = type metadata accessor for Logger(0);
      sub_100006CAC(v11, (uint64_t)qword_10009A198);
      v12 = v10;
      swift_bridgeObjectRetain_n(a2, 2);
      v13 = (char *)v12;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = swift_slowAlloc(18, -1);
        v32 = swift_slowAlloc(32, -1);
        aBlock[0] = v32;
        *(_DWORD *)v16 = 136446466;
        swift_bridgeObjectRetain(a2);
        v36 = sub_100015FFC(a1, a2, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 4, v16 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v16 + 12) = 1024;
        v17 = *(_DWORD *)&v13[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

        LODWORD(v36) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v16 + 14, v16 + 18);

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Requesting Service Provider '%{public}s' from Service Presenter PID %d", (uint8_t *)v16, 0x12u);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      if (!*(_QWORD *)(v33 + 168)
        && (a1 == 0xD000000000000019 && a2 == 0x800000010006E0C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000019, 0x800000010006E0C0, 0) & 1) != 0))
      {
        v22 = objc_msgSend(objc_allocWithZone((Class)SBSLockScreenService), "init");
        v23 = String._bridgeToObjectiveC()();
        v24 = v7;
        v25 = v13;
        v26 = objc_msgSend(v22, "preventSpuriousScreenUndimWithReason:", v23);

        v27 = *(_QWORD *)(v33 + 168);
        *(_QWORD *)(v33 + 168) = v26;
        v13 = v25;
        v7 = v24;
        swift_unknownObjectRelease(v27);
        objc_msgSend(v22, "invalidate");

      }
      v28 = (_QWORD *)swift_allocObject(&unk_100086F18, 48, 7);
      v28[2] = v33;
      v28[3] = v13;
      v28[4] = a1;
      v28[5] = a2;
      aBlock[4] = (uint64_t)sub_100046540;
      v35 = v28;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100021604;
      aBlock[3] = (uint64_t)&unk_100086F30;
      v29 = _Block_copy(aBlock);
      v30 = v35;
      v31 = v13;
      swift_bridgeObjectRetain(a2);
      swift_retain(v33);
      swift_release(v30);
      objc_msgSend(v31, "relayPresenterStartServiceExtension:completion:", v7, v29);
      _Block_release(v29);

    }
    else
    {

      type metadata accessor for ServicePresenter();
      sub_10004A3E4();
    }
  }
  else
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v20 = sub_10001F230(v18, v19, -103, 0, 0, 0);
    swift_willThrow(v20, v21);
  }
}

uint64_t sub_1000318A8(char *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  objc_class *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  NSObject **v37;
  char v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  Class v45;
  uint64_t v46;
  Swift::String v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  void *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  NSObject **v65;
  unint64_t v66;
  char v67;
  char v68;
  void *v69;
  uint64_t *v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  int64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  int v110;
  uint64_t v111;
  int64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  NSObject *v125;
  char v126[24];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;

  v120 = a1;
  v114 = _s7SessionC8IdentityVMa(0);
  v119 = *(_QWORD *)(v114 - 8);
  v2 = __chkstk_darwin(v114);
  v4 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (uint64_t)&v103 - v5;
  v7 = sub_100010F40(&qword_100092E60);
  v8 = __chkstk_darwin(v7);
  *(_QWORD *)&v123 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (unint64_t)&v103 - v10;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    goto LABEL_95;
LABEL_2:
  v12 = &_swiftEmptySetSingleton;
LABEL_3:
  v127 = (uint64_t)v12;
  v117 = v1 + 19;
  swift_beginAccess(&v1[19], v126, 0, 0);
  isa = v1[19].isa;
  v14 = *((_QWORD *)isa + 8);
  v105 = (char *)isa + 64;
  v15 = 1 << *((_BYTE *)isa + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = &v120[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier];
  v116 = v1 + 15;
  v112 = (unint64_t)(v15 + 63) >> 6;
  v103 = v112 - 1;
  v19 = swift_bridgeObjectRetain(isa);
  v20 = 0;
  v118 = v19;
  v104 = v19 + 104;
  *(_QWORD *)&v21 = 136446466;
  v107 = v21;
  v106 = (char *)&type metadata for Any + 8;
  v115 = v11;
  v113 = v18;
  v109 = v4;
  v108 = v6;
  if (v17)
  {
LABEL_6:
    v121 = v20;
    v122 = (v17 - 1) & v17;
    v22 = __clz(__rbit64(v17)) | (v20 << 6);
LABEL_7:
    v23 = v118;
    v24 = v123;
    sub_10003EB64(*(_QWORD *)(v118 + 48) + *(_QWORD *)(v119 + 72) * v22, v123, _s7SessionC8IdentityVMa);
    v1 = *(NSObject **)(v23 + 56);
    v25 = sub_100010F40(&qword_100092E68);
    v26 = v1[v22].isa;
    *(_QWORD *)(v24 + *(int *)(v25 + 48)) = v26;
    sub_1000124AC(v24, 0, 1, v25);
    v27 = v26;
    goto LABEL_14;
  }
  while (1)
  {
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        goto LABEL_2;
      sub_100044694((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_3;
    }
    if (v28 >= v112)
    {
      v30 = v20;
    }
    else
    {
      v29 = *(_QWORD *)&v105[8 * v28];
      if (v29)
        goto LABEL_11;
      v30 = v20 + 1;
      if (v20 + 2 < v112)
      {
        v29 = *(_QWORD *)&v105[8 * v20 + 16];
        if (v29)
        {
          v28 = v20 + 2;
LABEL_11:
          v121 = v28;
          v122 = (v29 - 1) & v29;
          v22 = __clz(__rbit64(v29)) + (v28 << 6);
          goto LABEL_7;
        }
        v30 = v20 + 2;
        if (v20 + 3 < v112)
        {
          v29 = *(_QWORD *)&v105[8 * v20 + 24];
          if (v29)
          {
            v28 = v20 + 3;
            goto LABEL_11;
          }
          v28 = v20 + 4;
          v30 = v20 + 3;
          if (v20 + 4 < v112)
          {
            v29 = *(_QWORD *)&v105[8 * v28];
            if (v29)
              goto LABEL_11;
            while (v20 + 5 < v112)
            {
              v29 = *(_QWORD *)(v104 + 8 * v20++);
              if (v29)
              {
                v28 = v20 + 4;
                goto LABEL_11;
              }
            }
            v30 = v103;
          }
        }
      }
    }
    v31 = sub_100010F40(&qword_100092E68);
    sub_1000124AC(v123, 1, 1, v31);
    v121 = v30;
    v122 = 0;
LABEL_14:
    sub_100046F20(v123, v11, &qword_100092E60);
    v32 = sub_100010F40(&qword_100092E68);
    if (sub_1000124B8(v11, 1, v32) == 1)
      break;
    v33 = *(char **)(v11 + *(int *)(v32 + 48));
    sub_1000456D4(v11, v6, _s7SessionC8IdentityVMa);
    v34 = *(_QWORD *)&v33[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8];
    v35 = *((_QWORD *)v18 + 1);
    v36 = *(_QWORD *)&v33[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier] == *(_QWORD *)v18
       && v34 == v35;
    if (v36
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v33[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier], v34, *(_QWORD *)v18, v35, 0) & 1) != 0)
    {
      v37 = (NSObject **)v116;
      swift_beginAccess(v116, &v128, 32, 0);
      v1 = *v37;
      if ((*v37)[2].isa && (sub_100039A4C(v6), (v38 & 1) != 0))
      {
        swift_endAccess(&v128);
      }
      else
      {
        swift_endAccess(&v128);
        if (qword_1000912D0 != -1)
          swift_once(&qword_1000912D0, sub_100026680);
        v39 = type metadata accessor for Logger(0);
        sub_100006CAC(v39, (uint64_t)qword_10009A198);
        sub_10003EB64(v6, (uint64_t)v4, _s7SessionC8IdentityVMa);
        v40 = v33;
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter();
        v43 = v42;
        if (os_log_type_enabled(v41, v42))
        {
          v44 = swift_slowAlloc(18, -1);
          v111 = swift_slowAlloc(32, -1);
          v125 = v111;
          *(_DWORD *)v44 = v107;
          v110 = v43;
          v45 = UUID._bridgeToObjectiveC()().super.isa;
          v46 = sub_100012100(v45);

          v128 = 542327881;
          v129 = 0xE400000000000000;
          v124 = v46;
          sub_100011E6C();
          v47._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v124, 16, 1);
          object = v47._object;
          String.append(_:)(v47);
          swift_bridgeObjectRelease(object);
          v50 = v128;
          v49 = v129;
          if (v4[*(int *)(v114 + 24)])
            v51 = 0x65746F6D6572;
          else
            v51 = 0x6C61636F6CLL;
          if (v4[*(int *)(v114 + 24)])
            v52 = (void *)0xE600000000000000;
          else
            v52 = (void *)0xE500000000000000;
          v128 = *(_QWORD *)&v4[*(int *)(v114 + 20)];
          sub_10001216C();
          v53 = String.init<A>(_:radix:uppercase:)(&v128, 16, 1);
          v55 = v54;
          v128 = v50;
          v129 = v49;
          v56._countAndFlagsBits = 58;
          v56._object = (void *)0xE100000000000000;
          String.append(_:)(v56);
          v57._countAndFlagsBits = v51;
          v57._object = v52;
          String.append(_:)(v57);
          swift_bridgeObjectRelease(v52);
          v58._countAndFlagsBits = 58;
          v58._object = (void *)0xE100000000000000;
          String.append(_:)(v58);
          v59._countAndFlagsBits = v53;
          v59._object = v55;
          String.append(_:)(v59);
          v60 = v55;
          v4 = v109;
          swift_bridgeObjectRelease(v60);
          v61 = v129;
          *(_QWORD *)(v44 + 4) = sub_100015FFC(v128, v129, (uint64_t *)&v125);
          swift_bridgeObjectRelease(v61);
          sub_10003EB40();
          *(_WORD *)(v44 + 12) = 1024;
          v62 = *(_DWORD *)&v40[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

          *(_DWORD *)(v44 + 14) = v62;
          _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v110, "%{public}s: Removing Service Provider PID %d", (uint8_t *)v44, 0x12u);
          v63 = v111;
          swift_arrayDestroy(v111, 1, v106);
          swift_slowDealloc(v63, -1, -1);
          v64 = v44;
          v6 = v108;
          swift_slowDealloc(v64, -1, -1);

        }
        else
        {

          sub_10003EB40();
        }
        v65 = (NSObject **)v117;
        swift_beginAccess(v117, &v128, 33, 0);
        v1 = *v65;
        swift_bridgeObjectRetain(*v65);
        v66 = sub_100039A4C(v6);
        v68 = v67;
        swift_bridgeObjectRelease(v1);
        v69 = 0;
        if ((v68 & 1) != 0)
        {
          v70 = (uint64_t *)v117;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v117->isa);
          v125 = *v70;
          v72 = (uint64_t)v125;
          *v70 = 0x8000000000000000;
          v73 = *(_QWORD *)(v72 + 24);
          sub_100010F40(&qword_100092E48);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v73);
          v1 = v125;
          sub_10003EB40();
          v69 = (void *)*((_QWORD *)v1[7].isa + v66);
          v74 = type metadata accessor for ServiceProvider();
          sub_100035338((uint64_t)&unk_100092E10);
          _NativeDictionary._delete(at:)(v66, v1, v114, v74, v75);
          v76 = *v70;
          *v70 = (uint64_t)v1;
          swift_bridgeObjectRelease(v76);
        }
        swift_endAccess(&v128);

        v11 = v115;
        v18 = v113;
      }
      if (v33 == v120)
      {
        sub_10003EB40();

      }
      else
      {
        v1 = &v127;
        sub_1000431A8(&v128, v33, type metadata accessor for ServiceProvider, &qword_100092E80);

        sub_10003EB40();
      }
    }
    else
    {
      sub_10003EB40();

    }
    v20 = v121;
    v17 = v122;
    if (v122)
      goto LABEL_6;
  }
  v77 = (_QWORD *)swift_release(v118);
  v79 = v127;
  if ((v127 & 0xC000000000000001) != 0)
  {
    if (v127 < 0)
      v80 = v127;
    else
      v80 = v127 & 0xFFFFFFFFFFFFFF8;
    v81 = __CocoaSet.makeIterator()(v80);
    v1 = type metadata accessor for ServiceProvider();
    sub_100035338((uint64_t)&unk_100092E70);
    v77 = Set.Iterator.init(_cocoa:)(&v128, v81, v1, v82);
    v79 = v128;
    v122 = v129;
    v83 = v130;
    v84 = v131;
    v11 = v132;
  }
  else
  {
    v84 = 0;
    v85 = -1 << *(_BYTE *)(v127 + 32);
    v86 = *(_QWORD *)(v127 + 56);
    v122 = v127 + 56;
    v83 = ~v85;
    v87 = -v85;
    if (v87 < 64)
      v88 = ~(-1 << v87);
    else
      v88 = -1;
    v11 = v88 & v86;
  }
  v121 = v79 & 0x7FFFFFFFFFFFFFFFLL;
  v119 = v83;
  v4 = (char *)((unint64_t)(v83 + 64) >> 6);
  *(_QWORD *)&v78 = 67109120;
  v123 = v78;
  v120 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v79 < 0)
  {
    while (1)
    {
      v91 = __CocoaSet.Iterator.next()(v77);
      if (!v91)
        break;
      v92 = v91;
      v124 = v91;
      v93 = type metadata accessor for ServiceProvider();
      swift_unknownObjectRetain(v92);
      swift_dynamicCast(&v125, &v124, v120, v93, 7);
      v94 = v125;
      swift_unknownObjectRelease(v92);
      v6 = v84;
      v89 = v11;
      if (!v94)
        break;
LABEL_85:
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v98 = type metadata accessor for Logger(0);
      sub_100006CAC(v98, (uint64_t)qword_10009A198);
      v99 = v94;
      v1 = Logger.logObject.getter(v99);
      v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v1, v100))
      {
        v101 = swift_slowAlloc(8, -1);
        *(_DWORD *)v101 = v123;
        *(_DWORD *)(v101 + 4) = *(_DWORD *)((char *)&v99->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);

        _os_log_impl((void *)&_mh_execute_header, v1, v100, "Terminating Service Provider PID %d", (uint8_t *)v101, 8u);
        swift_slowDealloc(v101, -1, -1);
      }
      else
      {

        v1 = v99;
      }

      -[NSObject relayTerminateService](v99, "relayTerminateService");
      v84 = v6;
      v11 = v89;
      if ((v79 & 0x8000000000000000) == 0)
        goto LABEL_65;
    }
    return sub_1000465AC(v79);
  }
LABEL_65:
  if (v11)
  {
    v89 = (v11 - 1) & v11;
    v90 = __clz(__rbit64(v11)) | (v84 << 6);
    v6 = v84;
LABEL_84:
    v94 = *(id *)(*(_QWORD *)(v79 + 48) + 8 * v90);
    if (v94)
      goto LABEL_85;
    return sub_1000465AC(v79);
  }
  v95 = v84 + 1;
  if (__OFADD__(v84, 1))
    goto LABEL_94;
  if (v95 < (uint64_t)v4)
  {
    v96 = *(_QWORD *)(v122 + 8 * v95);
    v6 = v84 + 1;
    if (v96)
      goto LABEL_83;
    v6 = v84 + 2;
    if (v84 + 2 >= (uint64_t)v4)
      return sub_1000465AC(v79);
    v96 = *(_QWORD *)(v122 + 8 * v6);
    if (v96)
      goto LABEL_83;
    v6 = v84 + 3;
    if (v84 + 3 >= (uint64_t)v4)
      return sub_1000465AC(v79);
    v96 = *(_QWORD *)(v122 + 8 * v6);
    if (v96)
      goto LABEL_83;
    v6 = v84 + 4;
    if (v84 + 4 >= (uint64_t)v4)
      return sub_1000465AC(v79);
    v96 = *(_QWORD *)(v122 + 8 * v6);
    if (v96)
    {
LABEL_83:
      v89 = (v96 - 1) & v96;
      v90 = __clz(__rbit64(v96)) + (v6 << 6);
      goto LABEL_84;
    }
    v97 = v84 + 5;
    while (v97 < (uint64_t)v4)
    {
      v96 = *(_QWORD *)(v122 + 8 * v97++);
      if (v96)
      {
        v6 = v97 - 1;
        goto LABEL_83;
      }
    }
  }
  return sub_1000465AC(v79);
}

void sub_1000324CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *object;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  Swift::String v27[2];
  __int128 v28;
  __int128 v29;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v26[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003EB64(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v14, _s7SessionC8IdentityVMa);
  sub_1000456D4((uint64_t)v14, (uint64_t)v17, type metadata accessor for SidecarIdentity);
  swift_beginAccess(v5 + 136, v27, 32, 0);
  sub_10002189C((uint64_t)v17, *(_QWORD *)(v5 + 136), (uint64_t (*)(void))sub_1000399C4);
  if (!v18)
  {
    swift_endAccess(v27);
LABEL_16:
    sub_10003EB40();
    return;
  }
  v19 = v18;
  swift_endAccess(v27);
  if (Domain.isBound.getter())
  {
    sub_10003EB40();
LABEL_4:
    swift_release(v19);
    return;
  }
  if (!a5)
  {
    v28 = 0u;
    v29 = 0u;
    goto LABEL_14;
  }
  v26[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionPeerAddressString);
  v26[1] = v20;
  AnyHashable.init<A>(_:)(v26, &type metadata for String, &protocol witness table for String);
  sub_100021758((uint64_t)v27, a5, &v28);
  sub_10001F4E0((uint64_t)v27);
  if (!*((_QWORD *)&v29 + 1))
  {
LABEL_14:
    swift_release(v19);
    sub_1000470BC((uint64_t)&v28, &qword_100092E90);
    goto LABEL_16;
  }
  if (!swift_dynamicCast(v27, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    swift_release(v19);
    goto LABEL_16;
  }
  object = v27[0]._object;
  Domain.bind(peer:)(v27[0]);
  if (!v22)
  {
    sub_10003EB40();
    swift_bridgeObjectRelease(object);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(object);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v23 = sub_100006CAC(v8, (uint64_t)qword_10009A198);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, v8);
  __chkstk_darwin(v24);
  *(&v25 - 2) = v22;
  sub_1000183F4((uint64_t (*)(void))sub_100032810, 0, sub_100012D04);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10003EB40();
  swift_errorRelease(v22);
}

unint64_t sub_100032810()
{
  return 0xD000000000000017;
}

uint64_t sub_10003282C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  _QWORD v6[2];
  _BYTE v7[40];

  v6[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionDataLinkType);
  v6[1] = v2;
  AnyHashable.init<A>(_:)(v6, &type metadata for String, &protocol witness table for String);
  v3 = sub_100021938((uint64_t)v7, a1);
  sub_10001F4E0((uint64_t)v7);
  if (v3
    && (v6[0] = v3,
        (swift_dynamicCast(&v5, v6, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int32, 6) & 1) != 0))
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000328F0()
{
  return 0x2065766965636552;
}

void sub_100032914()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100012D54();
  v2 = v1;
  v4 = v3;
  v5 = sub_100012DA8();
  isa = v5[-1].isa;
  __chkstk_darwin(v5);
  sub_100048514();
  if (v2)
  {
    swift_errorRetain(v2);
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    v7 = sub_100006CAC((uint64_t)v5, (uint64_t)qword_100092650);
    v8 = sub_100048B14(v0, v7, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))isa + 2));
    __chkstk_darwin(v8);
    sub_1000489C8();
    *(_QWORD *)(v9 - 16) = v2;
    sub_1000183F4((uint64_t (*)(void))sub_100042DB4, v4, sub_100012D04);
    sub_100048720(v0, *((uint64_t (**)(uint64_t, uint64_t))isa + 1));
    swift_errorRelease(v2);
    v10 = v2;
  }
  else
  {
    if (qword_1000912C0 != -1)
      swift_once(&qword_1000912C0, sub_1000265F8);
    sub_100006CAC((uint64_t)v5, (uint64_t)qword_100092650);
    v11 = sub_100012F20(v4);
    Logger.logObject.getter(v11);
    v12 = sub_100048CFC();
    if (os_log_type_enabled(v5, v12))
    {
      v13 = (uint8_t *)sub_100006D24(12);
      v14 = sub_100006D24(32);
      v28 = v14;
      *(_DWORD *)v13 = 136446210;
      sub_1000485CC();
      v15 = RapportRemoteDisplaySession.description.getter();
      sub_100048558();
      v17 = sub_100018854(v15, v16, &v28);
      v18 = sub_1000133AC(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v13 + 4, v13 + 12);
      sub_100012DE8(v4);
      sub_100012E98();
      sub_10001C890((void *)&_mh_execute_header, v5, v12, "%{public}s Ended", v13);
      sub_10001C888(v14, v20, (uint64_t)&type metadata for Any + 8);
      sub_100006D04(v14);
      sub_100006D04((uint64_t)v13);

    }
    else
    {

      v21 = sub_100012DE8(v4);
    }
    sub_100012E50(v21, (unint64_t *)&qword_100091750, NSError_ptr);
    sub_1000486D4();
    v10 = sub_10001F3EC(v22, v23, v24, v25, v26, v27, 1463);
  }
  swift_errorRetain(v2);
  swift_errorRetain(v10);
  sub_10002F6F0(v4, 0, 0);
  sub_100049008();
  sub_100049008();
  sub_100012D28();
}

uint64_t sub_100032BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v14 = sub_100006CAC(v9, (uint64_t)qword_10009A198);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
    v16 = __chkstk_darwin(v15);
    *(&v19 - 4) = a3;
    *(&v19 - 3) = a4;
    *(&v19 - 2) = a5;
    __chkstk_darwin(v16);
    *(&v19 - 2) = a1;
    sub_1000183F4(sub_100046564, v17, sub_100012D04);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v18 = sub_10002BAE8(a4, a5);
    sub_10002F574(v18);
    swift_bridgeObjectRelease(v18);
    return swift_errorRelease(a1);
  }
  return result;
}

uint64_t sub_100032D2C(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(32, 2);
  v5._countAndFlagsBits = 541346128;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._object = (void *)0x800000010006F8F0;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x64656C6961462027;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  return v12;
}

uint64_t sub_100032E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v3 = a1;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8);
  v6 = qword_1000912D0;
  sub_100013164();
  if (v6 != -1)
    goto LABEL_29;
  while (1)
  {
    v7 = sub_100012DA8();
    sub_100006CAC(v7, (uint64_t)qword_10009A198);
    swift_bridgeObjectRetain_n(v4, 2);
    v8 = (char *)(id)v3;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = sub_100006D24(18);
      v12 = sub_100006D24(32);
      v44[0] = v12;
      *(_DWORD *)v11 = 67109378;
      LODWORD(v45) = *(_DWORD *)&v8[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v11 + 4, v11 + 8);

      *(_WORD *)(v11 + 8) = 2082;
      sub_100013164();
      v13 = sub_100049094();
      v45 = sub_100015FFC(v13, v14, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v11 + 10, v11 + 18);
      swift_bridgeObjectRelease_n(v4, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "PID %d: Register Service Provider '%{public}s'", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      sub_100006D04(v12);
      sub_100006D04(v11);

    }
    else
    {

      sub_100012DD8(v4);
    }
    v16 = sub_100049094();
    v18 = sub_10002BAE8(v16, v17);
    v3 = v18;
    v42 = v5;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v39 = v18;
      else
        v39 = v18 & 0xFFFFFFFFFFFFFF8;
      sub_100013040();
      v19 = _CocoaArrayWrapper.endIndex.getter(v39);
      if (!v19)
        break;
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_100013040();
      if (!v19)
        break;
    }
    if ((v3 & 0xC000000000000001) != 0)
    {
      v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    }
    else
    {
      v20 = *(_QWORD *)(v3 + 32);
      sub_100048980();
    }
    if (*(_QWORD *)(v20 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1)
    {
LABEL_10:
      sub_100012DD8(v3);
      sub_1000132A0();
      sub_10003138C(v20, v8);
      return sub_100048978();
    }
    sub_100048978();
    if (v19 == 1)
      break;
    v5 = 5;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
      }
      else
      {
        v20 = *(_QWORD *)(v3 + 8 * v5);
        sub_100048980();
      }
      v22 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if (*(_QWORD *)(v20 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1)
        goto LABEL_10;
      sub_100048978();
      ++v5;
      if (v22 == v19)
        goto LABEL_19;
    }
    __break(1u);
LABEL_29:
    swift_once(&qword_1000912D0, sub_100026680);
  }
LABEL_19:
  sub_100012DD8(v3);
  v23 = v2 + 160;
  sub_100012DD0(v2 + 160, (uint64_t)v44, 32);
  v24 = *(_QWORD *)(v2 + 160);
  if (*(_QWORD *)(v24 + 16))
  {
    sub_100013164();
    v25 = sub_1000398E4(v42, v4);
    v28 = v8;
    if ((v26 & 1) == 0)
    {
      v30 = _swiftEmptyArrayStorage;
      goto LABEL_25;
    }
    v29 = *(_QWORD **)(*(_QWORD *)(v24 + 56) + 8 * v25);
    v30 = v29;
  }
  else
  {
    v30 = _swiftEmptyArrayStorage;
    v29 = (_QWORD *)v4;
    v28 = v8;
  }
  v25 = swift_bridgeObjectRetain(v29);
LABEL_25:
  v45 = (uint64_t)v30;
  sub_100048E24(v25, v26, v27, v42);
  sub_1000132A0();
  v31 = v28;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v33 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v32 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v33 >= v32 >> 1)
  {
    v40 = sub_100048C50(v32);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v41, 1);
  }
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
  specialized Array._endMutation()(v34);
  v35 = v45;
  sub_100012DD0(v23, (uint64_t)v44, 33);
  v36 = sub_10003CD10(v35, v43, v4);
  sub_100048E24(v36, v37, v38);
  return sub_1000132A0();
}

uint64_t sub_100033200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v1 = sub_100010F40(&qword_100092E58);
  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v1, &protocol witness table for String);
  sub_100012DD0(v0 + 160, (uint64_t)v5, 1);
  v3 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 160) = v2;
  return swift_bridgeObjectRelease(v3);
}

void sub_10003326C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  char *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  sub_100048D38();
  a23 = v27;
  a24 = v28;
  sub_100048E40();
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v29 = sub_100012DA8();
  sub_100006CAC(v29, (uint64_t)qword_10009A198);
  sub_10004915C();
  sub_1000491E8();
  v30 = sub_100012FF0();
  if (sub_100006D2C(v30))
  {
    v31 = sub_100006D24(18);
    v32 = sub_100006D24(32);
    a12 = v32;
    *(_DWORD *)v31 = 67109378;
    LODWORD(a11) = *(_DWORD *)&v25[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, (char *)&a11 + 4, v31 + 4, v31 + 8);
    *(_WORD *)(v31 + 8) = 2082;
    v33 = *(_QWORD *)&v25[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier];
    swift_bridgeObjectRetain(*(_QWORD *)&v25[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8]);
    a11 = sub_1000133CC(v33, v34, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v31 + 10, v31 + 18);

    sub_10001324C();
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "PID %d: Unregister Service Provider '%{public}s'", (uint8_t *)v31, 0x12u);
    sub_10001C888(v32, v35, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v32);
    sub_100006D04(v31);

  }
  else
  {

  }
  sub_100012E50(v36, (unint64_t *)&qword_100091750, NSError_ptr);
  v37 = sub_1000491C4();
  sub_10001C87C((uint64_t)&type metadata for Relay.RelayError, v37);
  *v38 = 2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  sub_1000132FC();
  v42 = sub_10004887C(v39, v40, -101, 27, v41);
  sub_1000486E8();
  sub_1000318A8(v25);

  sub_100048D04();
}

void sub_100033468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  sub_1000131A4();
  v60 = v1;
  v6 = sub_100048B5C();
  v7 = (uint64_t *)type metadata accessor for Logger(v6);
  sub_100013254();
  __chkstk_darwin(v8);
  sub_10004873C();
  sub_100010F40(&qword_100092F98);
  sub_100013118();
  __chkstk_darwin(v9);
  sub_100048A98();
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - v11;
  if (qword_1000912D0 == -1)
    goto LABEL_2;
LABEL_42:
  swift_once(&qword_1000912D0, sub_100026680);
LABEL_2:
  v13 = sub_100006CAC((uint64_t)v7, (uint64_t)qword_10009A198);
  v14 = (char *)(id)v0;
  v53 = v13;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v55 = v14;
  if (v17)
  {
    v18 = v3;
    v19 = (uint8_t *)sub_100006D24(8);
    *(_DWORD *)v19 = 67109120;
    v58 = *(_DWORD *)&v55[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v19 + 4, v19 + 8);

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "PID %d: Register Service Presenter", v19, 8u);
    v20 = (uint64_t)v19;
    v3 = v18;
    v14 = v55;
    sub_100006D04(v20);

  }
  else
  {

  }
  if (*(_QWORD *)(v60 + 176))
  {
    sub_100012E50(v21, (unint64_t *)&qword_100091750, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100012D98();
    sub_100048384(v22, v23, -100);
    sub_1000486FC();
LABEL_39:
    v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v53, v7);
    v45 = __chkstk_darwin(v44);
    __chkstk_darwin(v45);
    sub_1000489D8();
    sub_1000183F4(sub_100046D3C, v46, sub_100012D04);
    v47 = (*(uint64_t (**)(unint64_t, uint64_t *))(v4 + 8))(v3, v7);
    swift_willThrow(v47, v48);
LABEL_40:
    sub_100012F9C();
    return;
  }
  v50 = v3;
  v51 = v4;
  v52 = v7;
  *(_QWORD *)(v60 + 176) = v14;
  swift_beginAccess(v60 + 120, &v58, 0, 0);
  v0 = *(_QWORD *)(v60 + 120);
  v24 = *(_QWORD *)(v0 + 64);
  v54 = v0 + 64;
  v25 = 1 << *(_BYTE *)(v0 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v3 = v26 & v24;
  v56 = (unint64_t)(v25 + 63) >> 6;
  v49 = v56 - 1;
  v27 = v14;
  v57 = v0;
  sub_1000133A4();
  v4 = 0;
  if (v3)
  {
LABEL_10:
    v28 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    v29 = v28 | (v4 << 6);
    goto LABEL_11;
  }
  while (1)
  {
    v35 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v35 < v56)
    {
      v36 = *(_QWORD *)(v54 + 8 * v35);
      if (v36)
        goto LABEL_15;
      v4 += 2;
      if (v35 + 1 >= v56)
      {
        v4 = v35;
        goto LABEL_20;
      }
      v36 = *(_QWORD *)(v54 + 8 * v4);
      if (v36)
      {
        ++v35;
        goto LABEL_15;
      }
      if (v35 + 2 < v56)
        break;
    }
LABEL_20:
    v37 = sub_10004908C();
    sub_1000124AC(v5, 1, 1, v37);
    v3 = 0;
LABEL_21:
    v38 = sub_100048F54();
    sub_100046F20(v38, v39, &qword_100092F98);
    v40 = sub_10004908C();
    if (sub_1000124B8((uint64_t)v12, 1, v40) == 1)
    {
      swift_release(v57);
      goto LABEL_40;
    }
    v7 = &qword_100092DE0;
    v0 = *(_QWORD *)(*(_QWORD *)&v12[*(int *)(v40 + 48)] + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
    sub_1000133A4();
    v41 = sub_100013000();
    sub_100031428(v41, v42);
    if (v2)
    {
      swift_release(v57);
      sub_100013298();
      swift_bridgeObjectRelease(v0);
      sub_10003EB40();
      v4 = v51;
      v7 = v52;
      v3 = v50;
      goto LABEL_39;
    }
    swift_bridgeObjectRelease(v0);
    sub_100013298();
    sub_10003EB40();
    if (v3)
      goto LABEL_10;
  }
  v36 = *(_QWORD *)(v54 + 8 * (v35 + 2));
  if (v36)
  {
    v35 += 2;
    goto LABEL_15;
  }
  v43 = v35 + 3;
  if (v35 + 3 >= v56)
  {
    v4 = v35 + 2;
    goto LABEL_20;
  }
  v36 = *(_QWORD *)(v54 + 8 * v43);
  if (v36)
  {
    v35 += 3;
LABEL_15:
    v3 = (v36 - 1) & v36;
    v29 = __clz(__rbit64(v36)) + (v35 << 6);
    v4 = v35;
LABEL_11:
    v30 = v57;
    v31 = *(_QWORD *)(v57 + 48);
    _s7SessionC8IdentityVMa(0);
    sub_100049100();
    sub_10003EB64(v31 + v32 * v29, v5, _s7SessionC8IdentityVMa);
    v33 = *(_QWORD *)(v30 + 56);
    v34 = sub_10004908C();
    *(_QWORD *)(v5 + *(int *)(v34 + 48)) = *(_QWORD *)(v33 + 8 * v29);
    sub_1000124AC(v5, 0, 1, v34);
    sub_1000130A0();
    goto LABEL_21;
  }
  while (1)
  {
    v35 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v35 >= v56)
    {
      v4 = v49;
      goto LABEL_20;
    }
    v36 = *(_QWORD *)(v54 + 8 * v35);
    ++v43;
    if (v36)
      goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_10003399C()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v5;

  v5 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(43, 1);
  v0._countAndFlagsBits = 541346128;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0x800000010006FA50;
  v3._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v3);
  return v5;
}

void sub_100033A48()
{
  uint64_t v0;
  NSObject *v1;
  char *v2;
  os_log_type_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  char v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;

  sub_100048E40();
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v4 = sub_100012DA8();
  sub_100006CAC(v4, (uint64_t)qword_10009A198);
  sub_10004915C();
  sub_1000491E8();
  v5 = sub_100012FF0();
  if (sub_100048D9C(v5))
  {
    v6 = (uint8_t *)sub_100006D24(8);
    *(_DWORD *)v6 = 67109120;
    v20 = *(_DWORD *)&v2[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 8);

    _os_log_impl((void *)&_mh_execute_header, v1, v3, "PID %d: Unregister Service Presenter", v6, 8u);
    sub_100006D04((uint64_t)v6);

  }
  else
  {

  }
  sub_100012E50(v7, (unint64_t *)&qword_100091750, NSError_ptr);
  v8 = sub_1000491C4();
  sub_10001C87C((uint64_t)&type metadata for Relay.RelayError, v8);
  *v9 = 3;
  static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  sub_100012D98();
  sub_1000132FC();
  v13 = sub_10004887C(v10, v11, -101, 28, v12);
  v14 = *(void **)(v0 + 176);
  if (v14)
  {
    type metadata accessor for ServicePresenter();
    v15 = v2;
    v16 = v14;
    v17 = static NSObject.== infix(_:_:)(v16, v15);

    if ((v17 & 1) != 0)
    {
      sub_10004AAA4();
      v18 = *(void **)(v0 + 176);
      *(_QWORD *)(v0 + 176) = 0;

    }
  }
  v19 = v13;
  sub_1000486E8();

}

uint64_t sub_100033C24()
{
  uint64_t v0;

  sub_100048A50();
  sub_100048EF8();
  swift_release(*(_QWORD *)(v0 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 168));

  return v0;
}

uint64_t sub_100033CD8()
{
  uint64_t v0;

  sub_100033C24();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t sub_100033CF8(uint64_t a1)
{
  return sub_100028CE0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Discovery Interrupted");
}

uint64_t sub_100033D1C(uint64_t a1)
{
  return sub_100028CE0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Discovery Invalidated");
}

void sub_100033D50(uint64_t a1)
{
  sub_10002F858(a1, "RapportRemoteDisplayServer Interrupted");
}

void sub_100033D6C(uint64_t a1)
{
  sub_10002F858(a1, "RapportRemoteDisplayServer Invalidated");
}

void sub_100033D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_100012DA8();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100048514();
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v3 = sub_100006CAC(v1, (uint64_t)qword_10009A198);
  v4 = sub_100048B14(v0, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  __chkstk_darwin(v4);
  sub_100012FCC();
  sub_100049154((uint64_t (*)(void))sub_1000465F0, v5, sub_100012D04);
  sub_100048720(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (*(_QWORD *)(v0 + 32))
  {
    sub_100048968();
    sub_100032914();
    sub_100013014();
  }
  sub_1000484D8();
}

void sub_100033E88()
{
  uint64_t (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  sub_100048774();
  v1 = v0;
  sub_1000490D8(v2, v3);
  sub_100048BA0();
  v4._countAndFlagsBits = v1();
  sub_100049120(v4);
  sub_1000132A0();
  sub_100048D64();
  sub_100048AEC();
}

void sub_100033ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  sub_100048774();
  v1 = v0;
  sub_100012E50(v2, (unint64_t *)&qword_100091750, NSError_ptr);
  sub_1000486D4();
  v9 = sub_10001F3E0(v3, v4, v5, v6, v7, v8, v1);
  sub_100033D90();
  sub_100048AB4(v9);
}

void sub_100033F58()
{
  sub_100033ED4();
}

void sub_100033F78()
{
  sub_100033ED4();
}

id sub_100033F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithMachServiceName:", v5);

  return v6;
}

void sub_100034008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  objc_class *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  id v27;
  void *v28;
  id v29;

  sub_100048774();
  a16 = v18;
  a17 = v19;
  v20 = OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener;
  sub_100012E50(v19, (unint64_t *)&unk_100092FA8, NSXPCListener_ptr);
  v21 = v17;
  *(_QWORD *)&v17[v20] = sub_100033F98(0xD000000000000017, 0x800000010006F890);

  v22 = (objc_class *)type metadata accessor for Relay.MachService();
  a9.receiver = v21;
  a9.super_class = v22;
  v23 = (char *)objc_msgSendSuper2(&a9, "init");
  v24 = OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener;
  v25 = *(void **)&v23[OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener];
  v26 = v23;
  sub_100012E50((uint64_t)objc_msgSend(v25, "setDelegate:", v26), (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v27 = sub_10004915C();
  v28 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(v27, "_setQueue:", v28);

  v29 = *(id *)&v23[v24];
  objc_msgSend(v29, "resume");

  sub_100048AEC();
}

#error "10003412C: call analysis failed (funcsize=8)"

uint64_t sub_10003413C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  const char *string_ptr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  _BYTE *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  id v33;
  id v34;
  void *v35;

  v4 = sub_100012DA8();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10004873C();
  objc_msgSend(a2, "auditToken");
  if (sub_100020A18())
  {
    v6 = sub_100049140((uint64_t)"com.apple.private.sidecar.diagnose");
    swift_unknownObjectRelease(v6);
    if (v6)
    {
      v7 = objc_allocWithZone((Class)type metadata accessor for TestClient());
      v8 = sub_1000490E4();
      v9 = sub_100052714(v8);
LABEL_24:
      v35 = v9;
      if (qword_1000912B8 != -1)
        swift_once(&qword_1000912B8, sub_1000265C8);
      sub_10002F7EC(v35);

      return 1;
    }
  }
  v10 = (void *)sub_100049140((uint64_t)"com.apple.sidecar-relay");
  if (!v10)
  {
LABEL_13:
    v20 = (void *)sub_100049140((uint64_t)"com.apple.sidecar-relay.presenter");
    if (v20)
    {
      v21 = v20;
      if (xpc_BOOL_get_value(v20))
      {
        v22 = objc_allocWithZone((Class)type metadata accessor for ServicePresenter());
        v23 = sub_100006DB8(a2);
        if (qword_1000912B8 != -1)
          swift_once(&qword_1000912B8, sub_1000265C8);
        sub_10002F7EC(v23);

        v19 = v21;
        goto LABEL_18;
      }
      swift_unknownObjectRelease(v21);
    }
    v33 = objc_allocWithZone((Class)type metadata accessor for Client());
    v34 = sub_1000490E4();
    v9 = sub_100006DB8(v34);
    goto LABEL_24;
  }
  v11 = v10;
  string_ptr = xpc_string_get_string_ptr(v10);
  if (!string_ptr)
  {
    sub_1000491CC();
    goto LABEL_13;
  }
  v13 = String.init(cString:)(string_ptr);
  v15 = v14;
  if (qword_1000912F8 != -1)
    swift_once(&qword_1000912F8, sub_10004AAF4);
  if ((sub_100026494(v13, v15, qword_10009A200) & 1) != 0)
  {
    v16 = objc_allocWithZone((Class)type metadata accessor for ServiceProvider());
    v17 = sub_1000490E4();
    v18 = sub_10004E3CC(v13, v15, v17);
    if (qword_1000912B8 != -1)
      swift_once(&qword_1000912B8, sub_1000265C8);
    sub_10002F7EC(v18);

    v19 = v11;
LABEL_18:
    swift_unknownObjectRelease(v19);
    return 1;
  }
  v24 = sub_10001300C();
  sub_100012E50(v24, (unint64_t *)&qword_100091750, NSError_ptr);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  sub_100012D98();
  v27 = sub_100048384(v25, v26, -103);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v28 = sub_100006CAC(v4, (uint64_t)qword_10009A198);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v28, v4);
  __chkstk_darwin(v29);
  sub_1000489D8();
  sub_1000183F4((uint64_t (*)(void))sub_1000344D0, 0, (uint64_t (*)(void))sub_1000123F8);
  sub_1000491CC();
  v30 = sub_10004903C();
  v31(v30);

  return 0;
}

unint64_t sub_1000344D0()
{
  return 0xD000000000000013;
}

id sub_100034548(uint64_t a1)
{
  return sub_100034554(a1, type metadata accessor for Relay.MachService);
}

id sub_100034554(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t SidecarTransport.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 1229343063;
  v2 = 4346709;
  if (a1 != 2)
    v2 = 0;
  if (a1 != 3)
    v1 = v2;
  if (a1 == 1)
    return 1279547201;
  else
    return v1;
}

uint64_t sub_1000345E4()
{
  uint64_t *v0;

  return SidecarTransport.description.getter(*v0);
}

void *sub_1000345EC()
{
  return &protocol witness table for String;
}

uint64_t type metadata accessor for Relay()
{
  return objc_opt_self(_TtC12SidecarRelay5Relay);
}

uint64_t sub_100034618()
{
  return type metadata accessor for Relay.Session(0);
}

uint64_t type metadata accessor for Relay.Session(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100092840, (uint64_t)&nominal type descriptor for Relay.Session);
}

uint64_t sub_100034634(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = _s7SessionC8IdentityVMa(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1000721B0;
      v5[3] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[4] = &unk_1000721C8;
      v5[5] = &unk_1000721E0;
      v5[6] = &unk_1000721F8;
      v5[7] = &unk_100072210;
      v5[8] = &unk_1000721F8;
      return swift_updateClassMetadata2(a1, 256, 9, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t _s7SessionC8IdentityVMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100092CB8, (uint64_t)&_s7SessionC8IdentityVMn);
}

uint64_t type metadata accessor for Relay.RelayProxy()
{
  return objc_opt_self(_TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy);
}

uint64_t type metadata accessor for Relay.MachService()
{
  return objc_opt_self(_TtCC12SidecarRelay5Relay11MachService);
}

uint64_t sub_10003474C(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t sub_1000347A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 5;
  }
  return result;
}

void type metadata accessor for Relay.Session.State()
{
  sub_100048DAC();
}

uint64_t *sub_100034800(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v10);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    v9 = _s7SessionC8IdentityVMa(0);
    *(_QWORD *)&v6[*(int *)(v9 + 20)] = *(_QWORD *)&v7[*(int *)(v9 + 20)];
    v6[*(int *)(v9 + 24)] = v7[*(int *)(v9 + 24)];
  }
  return v3;
}

uint64_t sub_1000348A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_1000348E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  v8 = _s7SessionC8IdentityVMa(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

_QWORD *sub_10003495C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  v8 = _s7SessionC8IdentityVMa(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

_QWORD *sub_1000349D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = _s7SessionC8IdentityVMa(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

_QWORD *sub_100034A54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  v8 = _s7SessionC8IdentityVMa(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

uint64_t sub_100034AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034ADC);
}

void sub_100034ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 1)
  {
    sub_100020E78();
  }
  else
  {
    v6 = sub_1000133E0();
    sub_1000489EC(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_100034B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034B3C);
}

void sub_100034B3C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 1)
  {
    *a1 = 0;
    sub_100020E78();
  }
  else
  {
    v7 = _s7SessionC8IdentityVMa(0);
    sub_100048444((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t type metadata accessor for Relay.ConnectedSessionKey(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100092B98, (uint64_t)&nominal type descriptor for Relay.ConnectedSessionKey);
}

uint64_t sub_100034BA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.RawPointer + 64;
  result = _s7SessionC8IdentityVMa(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100034C1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100034CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100034D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100034DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100034E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034E24);
}

uint64_t sub_100034E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000484C0();
  return sub_1000124B8(a1, a2, v4);
}

uint64_t sub_100034E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034E60);
}

uint64_t sub_100034E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000484C0();
  v0 = sub_1000490EC();
  return sub_1000124AC(v0, v1, v2, v3);
}

uint64_t type metadata accessor for Relay.RapportSessionKey(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100092C28, (uint64_t)&nominal type descriptor for Relay.RapportSessionKey);
}

uint64_t sub_100034E9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100034ECC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100034F40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t sub_100034FD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001322C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100035000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100035064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000350CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100035130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100035194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000351A0);
}

void sub_1000351A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000484C0();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_1000489EC(a1, a2, v4);
  else
    sub_100020E78();
}

uint64_t sub_100035200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003520C);
}

void sub_10003520C(uint64_t a1, char a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)(sub_1000484C0() - 8) + 84) == a3)
  {
    v7 = sub_1000490EC();
    sub_100048444(v7, v8, v9, v10);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
    sub_100020E78();
  }
}

uint64_t sub_100035260(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1000721E0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000352E0()
{
  sub_100035338((uint64_t)&unk_100092CF8);
}

void sub_10003530C()
{
  sub_100035338((uint64_t)&unk_100092D00);
}

void sub_100035338(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_10001333C(a1))
  {
    v3 = v2(255);
    atomic_store(sub_100049164(v3), v1);
  }
  sub_100005E8C();
}

void sub_100035368()
{
  sub_100035338((uint64_t)&unk_100092D08);
}

uint64_t *sub_100035398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  __int16 v46;
  char v47;
  unsigned __int8 *v48;
  uint64_t *v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  id v69;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v69 = *(id *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v64);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100010F40(&qword_100092D78);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1;
  RapportStreamSession.messenger.getter((uint64_t)v66);
  v15 = v67;
  if (!v67)
  {
    v27 = &qword_100092EC8;
    v28 = v66;
    goto LABEL_8;
  }
  v61 = v8;
  v62 = v2;
  v63 = v14;
  v16 = v68;
  v17 = sub_100010F80(v66, v67);
  v18 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v20);
  sub_1000470BC((uint64_t)v66, &qword_100092EC8);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
  v22 = objc_opt_self(RPRemoteDisplaySession);
  v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
  if (v23)
  {
    v24 = (uint64_t)v23;
    v25 = objc_msgSend(v23, "destinationDevice");
    if (v25)
    {
      v26 = v25;
      sub_10004FF94(v26, (uint64_t)v11);
      if (sub_1000124B8((uint64_t)v11, 1, (uint64_t)v12) == 1)
      {

        swift_unknownObjectRelease(v21);
        v27 = &qword_100092D78;
        v28 = v11;
LABEL_8:
        sub_1000470BC((uint64_t)v28, v27);
        goto LABEL_9;
      }
      v69 = v26;
      v36 = (uint64_t)v63;
      sub_1000456D4((uint64_t)v11, (uint64_t)v63, type metadata accessor for SidecarIdentity);
      RapportStreamSession.streamID.getter();
      if (!v38)
        goto LABEL_24;
      v39 = v37;
      v12 = v38;
      v66[0] = 58;
      v66[1] = 0xE100000000000000;
      __chkstk_darwin(v37);
      v58 = v66;
      swift_bridgeObjectRetain(v40);
      v41 = (uint64_t *)sub_1000382D8(1, 0, sub_10004661C, (uint64_t)(&v60 - 4), v39, (unint64_t)v12);
      swift_bridgeObjectRelease(v12);
      if (v41[2])
      {
        v42 = v41[4];
        v43 = v41[5];
        v44 = v41[6];
        v12 = (uint64_t *)v41[7];
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRelease(v41);
        if ((v43 ^ v42) >> 14)
        {
          sub_100046638(v42, v43, v44, (unint64_t)v12, 16);
          if ((v46 & 0x100) != 0)
          {
            v48 = sub_1000448DC(v42, v43, v44, (uint64_t)v12, 16);
            v51 = v50;
            swift_bridgeObjectRelease(v12);
            if ((v51 & 1) != 0)
              goto LABEL_24;
          }
          else
          {
            v47 = v46;
            v48 = v45;
            swift_bridgeObjectRelease(v12);
            if ((v47 & 1) != 0)
              goto LABEL_24;
          }
          v52 = (uint64_t)v61;
          sub_10003EB64(v36, (uint64_t)v61, type metadata accessor for SidecarIdentity);
          v53 = v64;
          *(_QWORD *)(v52 + *(int *)(v64 + 20)) = v48;
          *(_BYTE *)(v52 + *(int *)(v53 + 24)) = 0;
          v12 = (uint64_t *)sub_10002C9CC(v52, v24);
          sub_10003EB40();
          if (v12)
          {
            sub_10003EB40();

            swift_unknownObjectRelease(v21);
            return v12;
          }
LABEL_24:
          sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
          v59 = 1747;
          LOBYTE(v58) = 2;
          v56 = sub_10001F230(v54, v55, -1020, 0, 0, 0);
          swift_willThrow(v56, v57);

          swift_unknownObjectRelease(v21);
          sub_10003EB40();
          return v12;
        }
        v49 = v12;
      }
      else
      {
        v49 = v41;
      }
      swift_bridgeObjectRelease(v49);
      goto LABEL_24;
    }
  }
  swift_unknownObjectRelease(v21);
LABEL_9:
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v29 = sub_10001F3E0(-6714, 0xD000000000000024, 0x800000010006F930, (uint64_t)"SidecarRelay/Relay.swift", 24, 2, 1733);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v30 = sub_100006CAC(v4, (uint64_t)qword_10009A198);
  v31 = (uint64_t (**)(char *, uint64_t))v69;
  v32 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v69 + 2))(v6, v30, v4);
  v12 = &v60;
  __chkstk_darwin(v32);
  v58 = v29;
  sub_1000183F4((uint64_t (*)(void))sub_100035968, 0, sub_100012D04);
  v33 = v31[1](v6, v4);
  swift_willThrow(v33, v34);
  return v12;
}

unint64_t sub_100035968()
{
  return 0xD00000000000001ELL;
}

#error "100035A34: call analysis failed (funcsize=73)"

uint64_t sub_100035ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[11];
  uint64_t v17;
  uint64_t v18;

  sub_100048594();
  v17 = v0;
  v18 = v1;
  v3 = v2;
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v4 = sub_100012DA8();
  sub_100006CAC(v4, (uint64_t)qword_10009A198);
  v5 = sub_100012F20(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (sub_100048ED0(v6))
  {
    v8 = (uint8_t *)sub_100006D24(12);
    v9 = sub_100006D24(32);
    v16[0] = v9;
    *(_DWORD *)v8 = 136446210;
    sub_1000130A0();
    RapportStreamSession.description.getter();
    sub_100048E34();
    v10 = sub_1000130A8();
    v15 = sub_100048560(v10, v11, v16);
    sub_100048FF0((uint64_t)&v15, (uint64_t)v16);
    sub_100012DE8(v3);
    sub_10004857C();
    sub_10001C890((void *)&_mh_execute_header, v6, v7, "Prepare %{public}s", v8);
    sub_10001C888(v9, v12, (uint64_t)&type metadata for Any + 8);
    sub_100006D04(v9);
    sub_100006D04((uint64_t)v8);

  }
  else
  {

    sub_100012DE8(v3);
  }
  sub_1000130A0();
  v13 = sub_1000485CC();
  return sub_100035C58(v13, v3);
}

uint64_t sub_100035C34()
{
  return 0x2065726170657250;
}

uint64_t sub_100035C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  char v7;

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  v5 = sub_100035398(a2);
  v7 = sub_10002A948(a2);
  swift_release(a1);
  swift_release(v5);
  swift_release(a2);
  return v7 & 1;
}

void sub_100035E00()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD);
  void (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  void (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_100012D54();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = sub_100012DA8();
  sub_100013254();
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v10 = sub_100006CAC(v6, (uint64_t)qword_10009A198);
  v11 = sub_100012F20(v5);
  v27 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = sub_100006D24(12);
    v25[1] = v1;
    v15 = (uint8_t *)v14;
    v16 = sub_100006D24(32);
    v26 = v3;
    v17 = v16;
    v29 = v16;
    v25[2] = v9;
    *(_DWORD *)v15 = 136446210;
    sub_100048B1C();
    RapportStreamSession.description.getter();
    v25[4] = v6;
    v19 = v18;
    swift_release(v5);
    v20 = sub_100049260();
    v28 = sub_100015FFC(v20, v21, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 4, v15 + 12);
    sub_100012DE8(v5);
    swift_bridgeObjectRelease(v19);
    sub_10001C890((void *)&_mh_execute_header, v12, v13, "Accept %{public}s", v15);
    sub_10001C888(v17, v23, (uint64_t)&type metadata for Any + 8);
    v24 = v17;
    v3 = v26;
    sub_100006D04(v24);
    sub_100006D04((uint64_t)v15);

  }
  else
  {

    sub_100012DE8(v5);
  }
  sub_100035398(v5);
  sub_10002A9F0(v5);
  v3(0);
  sub_1000130A8();
  sub_100012D28();
}

uint64_t sub_100036090()
{
  return 0x4620747065636341;
}

uint64_t sub_1000360B4()
{
  return sub_100035984();
}

uint64_t sub_1000360CC()
{
  return sub_100035ABC();
}

uint64_t sub_1000360E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = (uint64_t *)(a1 + 32 * v1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

uint64_t sub_100036144(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (!a1)
    return a2(a4, 0);
  swift_errorRetain(a1);
  a2(a1, 1);
  return swift_errorRelease(a1);
}

uint64_t sub_1000361A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656E6E616863, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E65696C63 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65696C63, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1919247728 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1919247728, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x65636976726573 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636976726573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100036390()
{
  return 5;
}

uint64_t sub_100036398(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000363CC + 4 * byte_100072066[a1]))(0x6C656E6E616863, 0xE700000000000000);
}

uint64_t sub_1000363CC()
{
  return 0x746E65696C63;
}

uint64_t sub_1000363E0()
{
  return 1919247728;
}

uint64_t sub_1000363F0()
{
  return 0x65636976726573;
}

uint64_t sub_100036404()
{
  return 0x6574617473;
}

void sub_100036418(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _BYTE v20[3];
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100010F40(&qword_100092EE0);
  sub_100048DEC();
  __chkstk_darwin(v6);
  sub_100010F80(a1, a1[3]);
  v7 = sub_100046BB8();
  sub_100048BBC((uint64_t)&type metadata for Relay.Session.DiagnosticState.CodingKeys, v8, v7);
  v9 = *v3;
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v22, v5);
  if (!v2)
  {
    v10 = *((unsigned int *)v3 + 2);
    v11 = *((_BYTE *)v3 + 12);
    v21 = 1;
    v20[1] = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10 | ((unint64_t)v11 << 32), &v21, v5);
    v12 = v3[2];
    v13 = v3[3];
    v20[0] = 2;
    sub_1000484C8(v12, v13, (uint64_t)v20);
    v14 = v3[4];
    v15 = v3[5];
    v19 = 3;
    sub_1000484C8(v14, v15, (uint64_t)&v19);
    v16 = v3[6];
    v17 = v3[7];
    v18 = 4;
    sub_1000484C8(v16, v17, (uint64_t)&v18);
  }
  sub_100048DB4();
  sub_100048B00();
}

void sub_10003655C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_1000131A4();
  a25 = v27;
  a26 = v28;
  v30 = v29;
  v31 = sub_100010F40(&qword_100093170);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100013234();
  v33 = (_QWORD *)sub_100049048();
  sub_100010F80(v33, v34);
  v35 = sub_100046BB8();
  sub_100048FE4((uint64_t)&type metadata for Relay.Session.DiagnosticState.CodingKeys, (uint64_t)&type metadata for Relay.Session.DiagnosticState.CodingKeys, v35);
  if (v26)
  {
    sub_100049060();
  }
  else
  {
    a16 = 0;
    v36 = KeyedDecodingContainer.decode(_:forKey:)(&a16, v31);
    a15 = 1;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a15, v31);
    a14 = 2;
    v37 = sub_100048838((uint64_t)&a14);
    v39 = v38;
    v48 = v37;
    a13 = 3;
    sub_100048D94(v37, v38);
    v46 = sub_100048838((uint64_t)&a13);
    v47 = v40;
    a12 = 4;
    sub_100048D94(v46, v40);
    v41 = sub_100048838((uint64_t)&a12);
    v43 = v42;
    v44 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
    v45 = v41;
    sub_1000487E4(v44);
    sub_100048544();
    sub_100013040();
    sub_1000484EC();
    sub_100049060();
    sub_1000132F4();
    sub_1000132A0();
    sub_1000484EC();
    *(_QWORD *)v30 = v36;
    *(_DWORD *)(v30 + 8) = v49;
    *(_BYTE *)(v30 + 12) = BYTE4(v49) & 1;
    *(_QWORD *)(v30 + 16) = v48;
    *(_QWORD *)(v30 + 24) = v39;
    *(_QWORD *)(v30 + 32) = v46;
    *(_QWORD *)(v30 + 40) = v47;
    *(_QWORD *)(v30 + 48) = v45;
    *(_QWORD *)(v30 + 56) = v43;
  }
  sub_100012F9C();
}

uint64_t sub_100036754()
{
  unsigned __int8 *v0;

  return sub_100036398(*v0);
}

uint64_t sub_10003675C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000361A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100036780@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100036390();
  *a1 = result;
  return result;
}

uint64_t sub_1000367A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046BB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000367CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046BB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000367F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  double result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t vars0;
  uint64_t vars8;

  sub_10003655C(a1, a2, a3, a4, a5, a6, a7, a8, v12, v14, SBYTE2(v14), SBYTE3(v14), SBYTE4(v14), SBYTE5(v14), SBYTE6(v14), SHIBYTE(v14), v15, v17, v18,
    v20,
    v21,
    v23,
    v24,
    v25,
    vars0,
    vars8);
  if (!v9)
  {
    *a9 = v13;
    a9[1] = v16;
    result = *(double *)&v19;
    a9[2] = v19;
    a9[3] = v22;
  }
  return result;
}

void sub_100036834(_QWORD *a1)
{
  sub_100036418(a1);
}

void sub_100036848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100012D54();
  v2 = v0;
  v4 = v3;
  v5 = sub_1000133E0();
  sub_100013118();
  __chkstk_darwin();
  sub_1000483E0();
  sub_100013118();
  __chkstk_darwin();
  sub_10004873C();
  v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity + *(int *)(v5 + 20));
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (v6)
    v7 = *(_DWORD *)(v6 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
  else
    v7 = 0;
  v8 = v6 == 0;
  sub_10003EB64(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v0, _s7SessionC8IdentityVMa);
  sub_1000456D4(v0, v1, type metadata accessor for SidecarIdentity);
  v9 = sub_100050048();
  v11 = v10;
  sub_100048F80();
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  sub_100013164();
  sub_100046EC8(v14);
  v15 = sub_100029228(v14);
  v17 = v16;
  sub_100046EE4(v14);
  *(_QWORD *)v4 = v18;
  *(_DWORD *)(v4 + 8) = v7;
  *(_BYTE *)(v4 + 12) = v8;
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 24) = v11;
  *(_QWORD *)(v4 + 32) = v13;
  *(_QWORD *)(v4 + 40) = v12;
  *(_QWORD *)(v4 + 48) = v15;
  *(_QWORD *)(v4 + 56) = v17;
  sub_100012D28();
}

uint64_t sub_100036988(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v28;
  char v30;

  if (a1 == 0x73746E65696C63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746E65696C63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000010006FD30)
  {
    v7 = 0x800000010006FD30;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010006FD30, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7265766F63736964 && a2 == 0xE900000000000079)
  {
    v9 = 0xE900000000000079;
    goto LABEL_22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766F63736964, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0xD000000000000017)
  {
    v10 = 0x800000010006F640;
    if (a2 == 0x800000010006F640)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010006F640, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if (a1 == 6580592 && a2 == 0xE300000000000000)
  {
    v12 = 0xE300000000000000;
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6580592, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v12);
    return 4;
  }
  if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000072)
  {
    v14 = 0xE900000000000072;
    goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6573657270, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v14);
    return 5;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x800000010006FD50)
  {
    v15 = 0x800000010006FD50;
LABEL_49:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x800000010006FD50, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x4474726F70706172 && a2 == 0xEE00736563697665)
  {
    v17 = 0xEE00736563697665;
    goto LABEL_57;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4474726F70706172, 0xEE00736563697665, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v17);
    return 7;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010006FD80)
  {
    v18 = 0x800000010006FD80;
LABEL_63:
    swift_bridgeObjectRelease(v18);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010006FD80, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_63;
  }
  if (a1 == 0x5374726F70706172 && a2 == 0xEF736E6F69737365)
  {
    v20 = 0xEF736E6F69737365;
    goto LABEL_71;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5374726F70706172, 0xEF736E6F69737365, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_71:
    swift_bridgeObjectRelease(v20);
    return 9;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010006F5A0)
  {
    v21 = 0x800000010006F5A0;
LABEL_77:
    swift_bridgeObjectRelease(v21);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010006F5A0, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_77;
  }
  if (a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000)
  {
    v23 = 0xE800000000000000;
    goto LABEL_85;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6973736573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_85:
    swift_bridgeObjectRelease(v23);
    return 11;
  }
  if (a1 == 0xD000000000000017)
  {
    v24 = 0x800000010006F620;
    if (a2 == 0x800000010006F620)
      goto LABEL_90;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010006F620, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v24);
    return 12;
  }
  if (a1 == 0x746361736E617274 && a2 == 0xEB000000006E6F69)
  {
    v26 = 0xEB000000006E6F69;
    goto LABEL_98;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746361736E617274, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_98:
    swift_bridgeObjectRelease(v26);
    return 13;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v28 = 0xE700000000000000;
    goto LABEL_106;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_106:
    swift_bridgeObjectRelease(v28);
    return 14;
  }
  if (a1 == 0x676F646863746177 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 15;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676F646863746177, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v30 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t static RapportDeviceChangeFlags.name.getter()
{
  return 16;
}

void sub_100036FEC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100048850(a1);
  sub_100048D84(v1);
  sub_100048848();
  sub_1000487F0();
}

uint64_t sub_100037018(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003704C + 4 * byte_10007206B[a1]))(0x73746E65696C63, 0xE700000000000000);
}

unint64_t sub_10003704C()
{
  return 0xD000000000000010;
}

uint64_t sub_100037154()
{
  return 0x736E6F6973736573;
}

uint64_t sub_100037188()
{
  return 0x746361736E617274;
}

uint64_t sub_1000371A8()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1000371BC()
{
  return 0x676F646863746177;
}

void sub_1000371D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  _BYTE v33[4];

  v3 = v1;
  v5 = sub_100010F40(&qword_100092EF0);
  sub_100048DEC();
  __chkstk_darwin(v6);
  sub_100010F80(a1, a1[3]);
  v7 = sub_100046BF4();
  sub_100048BBC((uint64_t)&type metadata for Relay.DiagnosticState.CodingKeys, v8, v7);
  *(_QWORD *)&v32 = *(_QWORD *)v3;
  v33[0] = 0;
  sub_100010F40(&qword_100092F00);
  sub_100047F4C((uint64_t)&unk_100092F08);
  sub_100048450(v9);
  if (!v2)
  {
    LOBYTE(v32) = 1;
    sub_10004899C();
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = *(_QWORD *)(v3 + 16);
    v11 = *(_QWORD *)(v3 + 24);
    LOBYTE(v32) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, &v32, v5);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 32);
    v33[0] = 3;
    v12 = sub_10004922C();
    v13 = sub_100048F34((uint64_t)&unk_100092F20);
    sub_100048470((uint64_t)&v32, (uint64_t)v33, v5, v12, v13);
    LOBYTE(v32) = 4;
    sub_10004899C();
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v16);
    v17 = *(_BYTE *)(v3 + 48);
    LOBYTE(v32) = 5;
    v33[0] = v17;
    sub_10004899C();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v20);
    sub_1000489B0(*(unsigned __int8 *)(v3 + 49), 6);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 56);
    v33[0] = 7;
    sub_100010F40(&qword_100091880);
    sub_100048044((uint64_t)&qword_100092F30);
    sub_100048450(v21);
    v22 = *(_QWORD *)(v3 + 64);
    v23 = *(_QWORD *)(v3 + 72);
    LOBYTE(v32) = 8;
    sub_1000484C8(v22, v23, (uint64_t)&v32);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 80);
    v33[0] = 9;
    v24 = sub_10004922C();
    v25 = sub_100048F34((uint64_t)&unk_100091860);
    sub_100048470((uint64_t)&v32, (uint64_t)v33, v5, v24, v25);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 88);
    v33[0] = 10;
    sub_100048470((uint64_t)&v32, (uint64_t)v33, v5, v24, v25);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 96);
    v33[0] = 11;
    sub_100010F40(&qword_100092F38);
    sub_1000480F0();
    sub_100048450(v26);
    *(_QWORD *)&v32 = *(_QWORD *)(v3 + 104);
    v33[0] = 12;
    v27 = sub_10004922C();
    v28 = sub_100048F34((uint64_t)&unk_100092F50);
    sub_100048470((uint64_t)&v32, (uint64_t)v33, v5, v27, v28);
    sub_1000489B0(*(unsigned __int8 *)(v3 + 112), 13);
    v29 = *(_QWORD *)(v3 + 120);
    v30 = *(_QWORD *)(v3 + 128);
    LOBYTE(v32) = 14;
    sub_1000484C8(v29, v30, (uint64_t)&v32);
    v32 = *(_OWORD *)(v3 + 136);
    v33[0] = 15;
    v31 = sub_100046C80();
    sub_100048470((uint64_t)&v32, (uint64_t)v33, v5, (uint64_t)&type metadata for Watchdog.DiagnosticState, v31);
  }
  sub_100048DB4();
  sub_100048B00();
}

void sub_100037598()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78[19];
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  char v87;
  int v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  _BYTE v107[7];
  _BYTE v108[11];
  __int16 v109;
  char v110;

  sub_1000131A4();
  v2 = v1;
  v4 = v3;
  v5 = sub_100010F40(&qword_100093178);
  __chkstk_darwin(v5);
  sub_100012EA0();
  v110 = 1;
  sub_100010F80(v2, v2[3]);
  v6 = sub_100046BF4();
  sub_100048FE4((uint64_t)&type metadata for Relay.DiagnosticState.CodingKeys, (uint64_t)&type metadata for Relay.DiagnosticState.CodingKeys, v6);
  if (v0)
  {
    v75 = 0;
    v8 = 4;
    goto LABEL_4;
  }
  v74 = v4;
  sub_100010F40(&qword_100092F00);
  LOBYTE(v78[0]) = 0;
  sub_100047F4C((uint64_t)&unk_100093180);
  sub_1000485FC(v7);
  swift_bridgeObjectRetain(v79);
  v18 = sub_100048584();
  v70 = v79;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(v18);
  LOBYTE(v79) = 2;
  v20 = sub_100048584();
  v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v20);
  v22 = v21;
  v23 = sub_100010F40(&qword_100092F18);
  LOBYTE(v78[0]) = 3;
  v24 = sub_100047FE0();
  sub_100048544();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v78, v5, v23, v24);
  v77 = v22;
  v25 = v79;
  LOBYTE(v79) = 4;
  sub_100013164();
  v26 = sub_100048584();
  v69 = v25;
  v64 = KeyedDecodingContainer.decode(_:forKey:)(v26);
  LOBYTE(v79) = 5;
  v27 = sub_100048584();
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v27, v28);
  v30 = HIDWORD(v29) & 1;
  v110 = BYTE4(v29) & 1;
  LOBYTE(v79) = 6;
  v63 = v29;
  v31 = sub_100048584();
  v60 = KeyedDecodingContainer.decode(_:forKey:)(v31);
  v62 = v30;
  sub_100010F40(&qword_100091880);
  LOBYTE(v78[0]) = 7;
  sub_100048044((uint64_t)&unk_100091960);
  sub_1000485FC(v32);
  v33 = v79;
  LOBYTE(v79) = 8;
  sub_100013164();
  v34 = sub_100048584();
  v59 = KeyedDecodingContainer.decode(_:forKey:)(v34, v35);
  v73 = v33;
  v37 = v36;
  v38 = sub_100010F40(&qword_100091858);
  LOBYTE(v78[0]) = 9;
  v39 = sub_100048094();
  sub_100013040();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v78, v5, v38, v39);
  LOBYTE(v78[0]) = 10;
  v72 = v79;
  swift_bridgeObjectRetain(v79);
  sub_1000487C8(v38, (uint64_t)v78, v5, v38, v39);
  v40 = v79;
  sub_100010F40(&qword_100092F38);
  LOBYTE(v78[0]) = 11;
  sub_1000480F0();
  v42 = v41;
  v71 = v40;
  sub_100013164();
  sub_10004869C();
  if (v42)
  {
    sub_100048360();
    sub_100048960();
    sub_100048804();
    sub_100048754();
    sub_100048958();
    sub_1000487FC();
    sub_100048AD8();
    sub_100048CB4();
    v8 = 1933;
    v75 = 1;
LABEL_4:
    sub_100048FDC();
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v76 = (v8 >> 3) & 1;
    v15 = (v8 >> 7) & 1;
    v16 = (v8 >> 8) & 1;
    v17 = (v8 >> 9) & 1;
    if ((v8 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v43 = v79;
  sub_100010F40(&qword_100092F48);
  LOBYTE(v78[0]) = 12;
  v44 = sub_100048184();
  v68 = v43;
  sub_100013164();
  sub_10004869C();
  v45 = v44 == 0;
  if (v44)
  {
    sub_100048360();
    sub_100048960();
    sub_100048804();
    sub_100048754();
    sub_100048958();
    sub_1000487FC();
    sub_100048AD8();
    sub_100048CB4();
    sub_100048CAC();
    v46 = 0;
  }
  else
  {
    v47 = v79;
    LOBYTE(v79) = 13;
    v67 = v47;
    swift_bridgeObjectRetain(v47);
    v48 = sub_100048F94();
    v49 = KeyedDecodingContainer.decode(_:forKey:)(v48);
    LOBYTE(v79) = 14;
    v50 = sub_100048F94();
    v52 = KeyedDecodingContainer.decode(_:forKey:)(v50, v51);
    v66 = v53;
    v54 = v52;
    v104 = 15;
    v55 = sub_1000481E8();
    swift_bridgeObjectRetain(v66);
    sub_1000487C8((uint64_t)&type metadata for Watchdog.DiagnosticState, (uint64_t)&v104, v5, (uint64_t)&type metadata for Watchdog.DiagnosticState, v55);
    if (!v55)
    {
      v56 = v60 & 1;
      v57 = v60 & 1;
      sub_100048360();
      v58 = v105;
      v61 = v106;
      v78[0] = v70;
      LODWORD(v78[1]) = v19;
      v78[2] = v65;
      v78[3] = v77;
      v78[4] = v69;
      v78[5] = __PAIR64__(v63, v64);
      LOBYTE(v78[6]) = v62;
      BYTE1(v78[6]) = v56;
      v78[7] = v73;
      v78[8] = v59;
      v78[9] = v37;
      v78[10] = v72;
      v78[11] = v71;
      v78[12] = v68;
      v78[13] = v67;
      LOBYTE(v78[14]) = v49 & 1;
      v78[15] = v54;
      v78[16] = v66;
      LOBYTE(v78[17]) = v105;
      v78[18] = v106;
      sub_100048224(v78);
      sub_10004857C();
      swift_bridgeObjectRelease(v77);
      sub_1000132A0();
      sub_10001300C();
      sub_10001320C();
      sub_10001324C();
      sub_1000132F4();
      sub_10001324C();
      sub_10001300C();
      sub_10001320C();
      sub_100048FDC();
      v79 = v70;
      v80 = v19;
      v81 = v65;
      v82 = v77;
      v83 = v69;
      v84 = v64;
      v85 = v63;
      v86 = v110;
      v87 = v57;
      v88 = *(_DWORD *)&v108[7];
      v89 = v109;
      v90 = v73;
      v91 = v59;
      v92 = v37;
      v93 = v72;
      v94 = v71;
      v95 = v68;
      v96 = v67;
      v97 = v49 & 1;
      *(_DWORD *)&v98[3] = *(_DWORD *)&v108[3];
      *(_DWORD *)v98 = *(_DWORD *)v108;
      v99 = v54;
      v100 = v66;
      v101 = v58;
      *(_DWORD *)v102 = *(_DWORD *)v107;
      *(_DWORD *)&v102[3] = *(_DWORD *)&v107[3];
      v103 = v61;
      sub_100011FFC(&v79);
      memcpy(v74, v78, 0x98uLL);
      goto LABEL_23;
    }
    sub_100048360();
    sub_100048960();
    sub_100048804();
    sub_100048754();
    sub_100048958();
    sub_1000487FC();
    sub_100048AD8();
    sub_100048CB4();
    sub_100048CAC();
    sub_100048FB4();
    swift_bridgeObjectRelease(v66);
    v46 = 1;
  }
  sub_100048FDC();
  v76 = 1;
  v15 = 1;
  v16 = 1;
  v17 = 1;
  v75 = 1;
  v9 = 1;
  v10 = v45;
  v11 = v46;
LABEL_5:
  v13 = v10;
  v14 = v11;
  swift_bridgeObjectRelease(v70);
  v12 = v9;
LABEL_6:
  sub_100048804();
  if (v76)
    sub_100048754();
  if (v15)
    swift_bridgeObjectRelease(v73);
  if (v16)
    sub_1000487FC();
  if (v17)
    swift_bridgeObjectRelease(v72);
  if (v75)
    swift_bridgeObjectRelease(v71);
  if (v12)
  {
    sub_100048CAC();
    if (!v13)
      goto LABEL_18;
  }
  else if (!v13)
  {
LABEL_18:
    if (!v14)
      goto LABEL_23;
    goto LABEL_22;
  }
  sub_100048FB4();
  if (v14)
LABEL_22:
    swift_bridgeObjectRelease(v66);
LABEL_23:
  sub_100012F9C();
}

void sub_100037DDC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  v2 = sub_1000490C4(a1, a2);
  sub_1000490B8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_100048848();
  sub_1000487F0();
}

uint64_t sub_100037E04()
{
  unsigned __int8 *v0;

  return sub_100037018(*v0);
}

uint64_t sub_100037E0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100036988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100037E30@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static RapportDeviceChangeFlags.name.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100037E54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046BF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037E7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046BF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100037EA4(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE __src[152];

  sub_100037598();
  if (!v1)
    memcpy(a1, __src, 0x98uLL);
}

void sub_100037EEC(_QWORD *a1)
{
  sub_1000371D4(a1);
}

unint64_t sub_100037F04()
{
  unint64_t result;

  result = qword_100092D38;
  if (!qword_100092D38)
  {
    result = swift_getWitnessTable(&unk_10007249C, &unk_100087418);
    atomic_store(result, (unint64_t *)&qword_100092D38);
  }
  return result;
}

void sub_100037F40()
{
  sub_100035338((uint64_t)&unk_100092D60);
}

void sub_100037F6C(uint64_t a1)
{
  uint64_t v2;

  sub_100035338((uint64_t)&unk_1000918B0);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100037FA8(uint64_t a1)
{
  uint64_t v2;

  sub_100035338((uint64_t)&unk_100092D70);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100037FE4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100038004();
  qword_100092698 = result;
  unk_1000926A0 = v1;
  return result;
}

uint64_t sub_100038004()
{
  __CFBundle *v0;
  CFTypeRef v1;
  uint64_t v3;
  CFTypeRef v4;

  v0 = CFBundleGetMainBundle();
  v1 = (id)CFBundleGetValueForInfoDictionaryKey(v0, kCFBundleVersionKey);

  if (v1
    && (v4 = v1,
        swift_dynamicCast(&v3, &v4, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
  {
    return v3;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100038094(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(sub_100010F40(a2) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

id sub_100038128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  id v8;
  _QWORD v10[5];
  uint64_t v11;

  v10[4] = a3;
  v11 = a4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000381C8;
  v10[3] = &unk_100087188;
  v7 = _Block_copy(v10);
  v8 = objc_msgSend(v4, "initWithSubsystem:category:provider:", a1, a2, v7);
  _Block_release(v7);
  swift_release(v11);
  return v8;
}

Class sub_1000381C8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Class isa;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  v6 = v5;
  swift_release(v2);
  if (v6 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100012430(v4, v6);
  }
  return isa;
}

uint64_t sub_100038244(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_10003824C(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_10003825C(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

BOOL sub_10003826C(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

void RapportControlFlags.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
  sub_100005E8C();
}

uint64_t sub_100038298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1;
}

uint64_t sub_1000382D8(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t result;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD v59[4];

  v59[3] = a4;
  if (a1 < 0)
  {
    v44 = "Must take zero or more splits";
    v45 = "Swift/Collection.swift";
    v46 = 29;
    v47 = 22;
    goto LABEL_42;
  }
  v10 = swift_allocObject(&unk_100086F68, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v51 = (char **)(v10 + 16);
  v56 = swift_allocObject(&unk_100086F90, 24, 7);
  *(_QWORD *)(v56 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v32 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v32 = 11;
    sub_100038730(v32 | (v11 << 16), v56, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    v14 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v33 = v56;
LABEL_38:
    swift_release(v33);
    return (uint64_t)v14;
  }
  v49 = v10;
  v50 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v57 = 4 * v12;
  v14 = (char *)_swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v59[0] = v18;
    v59[1] = v19;
    v21 = a3(v59);
    if (v6)
    {
      swift_release(v49);
      swift_release(v56);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      v15 = String.index(after:)(v15, a5, a6);
      goto LABEL_23;
    }
    v23 = (v16 >> 14 == v15 >> 14) & a2;
    if (v23 != 1)
    {
      if (v15 >> 14 < v16 >> 14)
        goto LABEL_40;
      v24 = String.subscript.getter(v16, v15);
      v52 = v26;
      v53 = v25;
      v54 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = sub_1000389A4(0, *((_QWORD *)v14 + 2) + 1, 1, (uint64_t)v14);
      v29 = *((_QWORD *)v14 + 2);
      v28 = *((_QWORD *)v14 + 3);
      if (v29 >= v28 >> 1)
        v14 = sub_1000389A4((char *)(v28 > 1), v29 + 1, 1, (uint64_t)v14);
      *((_QWORD *)v14 + 2) = v29 + 1;
      v30 = &v14[32 * v29];
      *((_QWORD *)v30 + 4) = v24;
      *((_QWORD *)v30 + 5) = v54;
      *((_QWORD *)v30 + 6) = v53;
      *((_QWORD *)v30 + 7) = v52;
      *v51 = v14;
    }
    v31 = String.index(after:)(v15, a5, a6);
    v15 = v31;
    *(_QWORD *)(v56 + 16) = v31;
    if ((v23 & 1) == 0 && *((_QWORD *)v14 + 2) == v50)
      break;
    v16 = v31;
    v17 = v31;
LABEL_23:
    if (v57 == v15 >> 14)
      goto LABEL_32;
  }
  v17 = v31;
  v16 = v31;
LABEL_32:
  if (v57 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v49);
    v33 = v56;
    goto LABEL_38;
  }
  if (v57 >= v17 >> 14)
  {
    v34 = String.subscript.getter(v17, v48);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease(a6);
    sub_10003884C((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000389A4);
    v41 = *((_QWORD *)*v51 + 2);
    sub_1000388F4(v41, (uint64_t (*)(BOOL))sub_1000389A4);
    v14 = *v51;
    *((_QWORD *)v14 + 2) = v41 + 1;
    v42 = &v14[32 * v41];
    *((_QWORD *)v42 + 4) = v34;
    *((_QWORD *)v42 + 5) = v36;
    *((_QWORD *)v42 + 6) = v38;
    *((_QWORD *)v42 + 7) = v40;
    *v51 = v14;
    goto LABEL_37;
  }
LABEL_40:
  v44 = "Range requires lowerBound <= upperBound";
  v45 = "Swift/Range.swift";
  v46 = 39;
  v47 = 17;
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v46, 2, v45, v47);
  __break(1u);
  return result;
}

uint64_t sub_100038730(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (v5 >> 14 == a1 >> 14) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (a1 >> 14 >= v5 >> 14)
  {
    v8 = String.subscript.getter(v5, a1);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    sub_10003884C((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000389A4);
    v15 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_1000388F4(v15, (uint64_t (*)(BOOL))sub_1000389A4);
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = (_QWORD *)(v16 + 32 * v15);
    v17[4] = v8;
    v17[5] = v10;
    v17[6] = v12;
    v17[7] = v14;
    return v6 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17);
  __break(1u);
  return result;
}

void sub_10003884C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  sub_100020E78();
}

void sub_100038898()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100038C8C(0, *(_QWORD *)(v1 + 16) + 1, 1, v1, &qword_100093048, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100039190, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1000396CC);
    *v0 = v3;
  }
  sub_100005E8C();
}

uint64_t sub_1000388F4(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

void sub_100038934(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_100038C8C(v2 > 1, a1 + 1, 1, *v1, &qword_100093048, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100039190, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1000396CC);
    *v1 = v3;
  }
}

void sub_100038988(char a1, int64_t a2, char a3, uint64_t a4)
{
  sub_100038C8C(a1, a2, a3, a4, &qword_1000930C8, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100038E64, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1000393C0);
}

char *sub_1000389A4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100010F40(&qword_100092ED8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10003941C((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_100038F78(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

uint64_t sub_100038A90(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  const char *v22;
  uint64_t v23;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_24:
        v22 = "Division by zero";
        v23 = 16;
LABEL_26:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100010F40(&qword_100092FD8);
  v11 = *(_QWORD *)(sub_100010F40(&qword_100093D90) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_24;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    v22 = "Division results in an overflow";
    v23 = 31;
    goto LABEL_26;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(unsigned __int8 *)(*(_QWORD *)(sub_100010F40(&qword_100093D90) - 8) + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = (unint64_t)v15 + v19;
  if ((a1 & 1) != 0)
  {
    sub_10003963C(a4 + v19, v8, v20, &qword_100093D90);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10003906C(0, v8, v20, a4);
  }
  return (uint64_t)v15;
}

void sub_100038C70(char a1, int64_t a2, char a3, uint64_t a4)
{
  sub_100038C8C(a1, a2, a3, a4, &qword_100093048, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100039190, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1000396CC);
}

void sub_100038C8C(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;

  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v12 <= v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    v15 = sub_100010F40(a5);
    v16 = (_QWORD *)sub_100014AC4(v15, 16 * v14 + 32);
    v17 = j__malloc_size(v16);
    v16[2] = v13;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }
  else
  {
    v16 = &_swiftEmptyArrayStorage;
  }
  v18 = v16 + 4;
  if ((a1 & 1) != 0)
  {
    a7(a4 + 32, v13, v18);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100012E98();
  }
  else
  {
    a6(0, v13, v18, a4);
  }
  sub_10004889C();
}

char *sub_100038D70(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100010F40(&qword_100092EA8);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_100039750((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_1000392A4(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

uint64_t sub_100038E64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100010F40(&qword_1000930D0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100038F78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003906C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100010F40(&qword_100093D90) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100039190(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100010F40(&qword_100093050);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000392A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_100010F40(&qword_100092EB0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000393C0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a2 < 0)
  {
    sub_100012D98();
    result = (char *)sub_100048338((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, 0);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100048350(a3, result);
  }
  return result;
}

char *sub_10003941C(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void sub_1000394A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10003963C(a1, a2, a3, &qword_100093D90);
}

char *sub_1000394AC(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a2 < 0)
  {
    sub_100012D98();
    result = (char *)sub_100048338((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, 0);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100048350(a3, result);
  }
  return result;
}

char *sub_100039510(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a2 < 0)
  {
    sub_100012D98();
    result = (char *)sub_100048338((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, 0);
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100048350(a3, result);
  }
  return result;
}

char *sub_10003956C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a2 < 0)
  {
    sub_100012D98();
    result = (char *)sub_100048338((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, 0);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100048350(a3, result);
  }
  return result;
}

char *sub_1000395CC(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a2 < 0)
  {
    sub_100012D98();
    result = (char *)sub_100048338((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, 0);
    __break(1u);
  }
  else if (a3 != result || &result[80 * a2] <= a3)
  {
    return (char *)sub_100048350(a3, result);
  }
  return result;
}

void sub_100039630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10003963C(a1, a2, a3, &qword_100093028);
}

void sub_10003963C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (a2 < 0)
  {
    sub_100012D98();
    sub_100048338((uint64_t)"Fatal error", v9, v10, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v11, v12, (uint64_t)"Swift/UnsafePointer.swift", v13, v14, v15, 0);
    __break(1u);
  }
  else
  {
    sub_100049028();
    if (v7 && (sub_100010F40(a4), sub_10004910C(), !v8 & v7))
    {
      if (v5 == v4)
      {
        sub_100018094();
      }
      else
      {
        sub_1000486C0();
        sub_10004881C();
      }
    }
    else
    {
      sub_100010F40(a4);
      sub_1000486C0();
      sub_10004880C();
    }
  }
}

char *sub_1000396CC(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100039750(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

void sub_1000397DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a2 < 0)
  {
    sub_100012D98();
    sub_100048338((uint64_t)"Fatal error", v6, v7, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v8, v9, (uint64_t)"Swift/UnsafePointer.swift", v10, v11, v12, 0);
    __break(1u);
  }
  else
  {
    sub_100049028();
    if (v4 && (sub_10001322C(), sub_10004910C(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_100018094();
      }
      else
      {
        sub_1000486C0();
        sub_10004881C();
      }
    }
    else
    {
      sub_10001322C();
      sub_1000486C0();
      sub_10004880C();
    }
  }
}

char *sub_100039860(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

unint64_t sub_1000398E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100039CE8(a1, a2, v5);
}

unint64_t sub_100039948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100039DC8(a1, v4);
}

unint64_t sub_100039978()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  Swift::Int v3;

  sub_100048E4C();
  sub_1000490C4(*(_QWORD *)(v0 + 40), v2);
  Hasher._combine(_:)(v1);
  v3 = sub_100048848();
  return sub_100039E8C(v1, v3);
}

unint64_t sub_1000399C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_100039F28(a1, v5);
}

unint64_t sub_100039A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  v5 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + *(int *)(v5 + 24)));
  v6 = Hasher._finalize()();
  return sub_10003A038(a1, v6);
}

unint64_t sub_100039B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  v5 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = Hasher._finalize()();
  return sub_10003A180(a1, v6);
}

unint64_t sub_100039BA0(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v9, a2, a3);
  swift_bridgeObjectRelease(a3);
  v7 = Hasher._finalize()();
  return sub_10003A2B4(a1, a2, a3, v7);
}

unint64_t sub_100039C30(_QWORD *a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  sub_10002C724((uint64_t)v5);
  v3 = Hasher._finalize()();
  return sub_10003A384(a1, v3);
}

unint64_t sub_100039C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100048E40();
  sub_10001322C();
  sub_100035338((uint64_t)&unk_1000918A0);
  v1 = sub_100048A24();
  v4 = dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, v3);
  return sub_10003A4F8(v0, v4);
}

unint64_t sub_100039CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100039DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100046570(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10001F4E0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100039E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100039F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v5 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_10003EB64(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for SidecarIdentity);
      v13 = static UUID.== infix(_:_:)(v8, a1);
      sub_10003EB40();
      if ((v13 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10003A038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_10003EB64(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, _s7SessionC8IdentityVMa);
      if ((static UUID.== infix(_:_:)(v8, a1) & 1) != 0
        && *(_QWORD *)&v8[*(int *)(v5 + 20)] == *(_QWORD *)(a1 + *(int *)(v5 + 20))
        && v8[*(int *)(v5 + 24)] == *(_BYTE *)(a1 + *(int *)(v5 + 24)))
      {
        break;
      }
      sub_10003EB40();
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_10003EB40();
  }
  return v10;
}

unint64_t sub_10003A180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_10003EB64(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for Relay.RapportSessionKey);
      if ((static UUID.== infix(_:_:)(v8, a1) & 1) != 0
        && *(_QWORD *)&v8[*(int *)(v5 + 20)] == *(_QWORD *)(a1 + *(int *)(v5 + 20)))
      {
        break;
      }
      sub_10003EB40();
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_10003EB40();
  }
  return v10;
}

unint64_t sub_10003A2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (_QWORD *)(v12 + 24 * v7);
      if (*v13 == a1)
      {
        v14 = v13[1];
        v15 = v13[2];
        v16 = v14 == a2 && v15 == a3;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0) & 1) != 0)
          break;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_10003A384(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for Relay.ConnectedSessionKey(0);
  __chkstk_darwin(v18);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = -1 << *(_BYTE *)(v2 + 32);
  v9 = a2 & ~v8;
  if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v5 + 72);
    while (1)
    {
      sub_10003EB64(*(_QWORD *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for Relay.ConnectedSessionKey);
      if (*v7 == *a1)
      {
        v12 = *(int *)(v18 + 20);
        v13 = (char *)v7 + v12;
        v14 = (char *)a1 + v12;
        if ((static UUID.== infix(_:_:)((char *)v7 + v12, (char *)a1 + v12) & 1) != 0)
        {
          v15 = _s7SessionC8IdentityVMa(0);
          if (*(_QWORD *)&v13[*(int *)(v15 + 20)] == *(_QWORD *)&v14[*(int *)(v15 + 20)]
            && v13[*(int *)(v15 + 24)] == v14[*(int *)(v15 + 24)])
          {
            break;
          }
        }
      }
      sub_10003EB40();
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        return v9;
    }
    sub_10003EB40();
  }
  return v9;
}

unint64_t sub_10003A4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_100035338((uint64_t)&unk_100092F90);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_10003A638(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    v10 = *(_QWORD *)(v4 + 40);
    swift_bridgeObjectRetain(v4);
    v11 = NSObject._rawHashValue(seed:)(v10);
    v12 = -1 << *(_BYTE *)(v4 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      type metadata accessor for Client();
      v14 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
      v15 = static NSObject.== infix(_:_:)(v14, a1);

      if ((v15 & 1) != 0)
      {
LABEL_12:
        swift_bridgeObjectRelease(v4);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
        v20 = *v2;
        v22 = *v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_10003A998(&qword_100092FA0);
          v20 = v22;
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v13);
        sub_10003BF24(v13);
        v9 = *v2;
        *v2 = v22;
        goto LABEL_15;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
        v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (v4 < 0)
    v5 = *v1;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = a1;
  v7 = __CocoaSet.contains(_:)();

  if ((v7 & 1) == 0)
    goto LABEL_16;
  v8 = sub_10003A800(v5, v6);
  v9 = v4;
LABEL_15:
  swift_bridgeObjectRelease(v9);
  return v8;
}

#error "10003A85C: call analysis failed (funcsize=100)"

void sub_10003A998(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;

  v2 = v1;
  sub_100010F40(a1);
  v3 = (_QWORD *)*v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  if (!v3[2])
  {
LABEL_28:
    sub_100048558();
    *v2 = v4;
    sub_1000484D8();
    return;
  }
  sub_100048F88();
  v6 = v3 + 7;
  v8 = (unint64_t)(v7 + 63) >> 6;
  if ((_QWORD *)v4 != v3 || v5 >= &v3[v8 + 7])
    memmove(v5, v3 + 7, 8 * v8);
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v3[2];
  sub_100048F88();
  v12 = v3[7];
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0)
    goto LABEL_12;
LABEL_11:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v16 | (v10 << 6); ; i = v22 + (v10 << 6))
  {
    v23 = *(void **)(v3[6] + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v23;
    v24 = v23;
    if (v14)
      goto LABEL_11;
LABEL_12:
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15)
      goto LABEL_28;
    ++v10;
    if (!v6[v18])
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_28;
      if (!v6[v10])
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_28;
        if (!v6[v10])
          break;
      }
    }
LABEL_25:
    sub_100048DFC();
    v14 = v21 & v20;
  }
  v19 = v18 + 3;
  if (v19 >= v15)
    goto LABEL_28;
  if (v6[v19])
  {
    v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v15)
      goto LABEL_28;
    ++v19;
    if (v6[v10])
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10003AB14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010F40((uint64_t *)&unk_100092FB8);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & v15;
  v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v24, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v24, v5, v2);
    if (v17)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v26;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10003AD3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_100010F40(&qword_100092E88);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10003AEEC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  sub_100048594();
  v3 = v0;
  v4 = (_QWORD *)*v0;
  if (*(_QWORD *)(*v0 + 24) <= v1)
    v5 = v1;
  else
    v5 = *(_QWORD *)(*v0 + 24);
  sub_100048D8C(v1, v2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  if (!v4[2])
  {
    sub_1000132B4();
LABEL_37:
    *v3 = v6;
    sub_1000483C4();
    return;
  }
  v31 = v3;
  sub_100048F88();
  v8 = v4 + 7;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & v4[7];
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v6 + 56;
  sub_10004876C();
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = v20 + (v13 << 6))
  {
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(v4[6] + 8 * i);
    v23 = NSObject._rawHashValue(seed:)(v21) & ~(-1 << *(_BYTE *)(v6 + 32));
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      sub_100048944();
      while (++v25 != v26 || (v24 & 1) == 0)
      {
        v27 = v25 == v26;
        if (v25 == v26)
          v25 = 0;
        v24 |= v27;
        if (*(_QWORD *)(v12 + 8 * v25) != -1)
        {
          sub_100048908();
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    sub_10004891C();
LABEL_33:
    sub_100048F00();
    *(_QWORD *)(v12 + v28) |= v29;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v30) = v22;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v11)
      goto LABEL_35;
    ++v13;
    if (!v8[v16])
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v11)
        goto LABEL_35;
      if (!v8[v13])
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v11)
          goto LABEL_35;
        if (!v8[v13])
          break;
      }
    }
LABEL_23:
    sub_100048DFC();
    v10 = v19 & v18;
  }
  v17 = v16 + 3;
  if (v17 >= v11)
  {
LABEL_35:
    sub_100012DE8((uint64_t)v4);
    v3 = v31;
    goto LABEL_37;
  }
  if (v8[v17])
  {
    v13 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v13 >= v11)
      goto LABEL_35;
    ++v17;
    if (v8[v13])
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_10003B0EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100010F40((uint64_t *)&unk_100092FB8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_36:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v23 * i, v4);
    v24 = *(_QWORD *)(v10 + 40);
    sub_100035338((uint64_t)&unk_1000918A0);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
    v26 = -1 << *(_BYTE *)(v10 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v29 * v23, v7, v4);
    ++*(_QWORD *)(v10 + 16);
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_38;
    if (v20 >= v37)
      goto LABEL_34;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v21 = *(_QWORD *)(v36 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_34;
        v21 = *(_QWORD *)(v36 + 8 * v17);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_34:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_36;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v37)
      goto LABEL_34;
    v21 = *(_QWORD *)(v36 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_10003B410(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100010F40(&qword_100092E88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_10003B6B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  sub_100048594();
  v3 = v0;
  v4 = *v0;
  if (*(_QWORD *)(*v0 + 24) <= v1)
    v5 = v1;
  else
    v5 = *(_QWORD *)(*v0 + 24);
  sub_100048D8C(v1, v2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    sub_1000485CC();
    v14 = 0;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = v21 + (v14 << 6))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i);
      v23 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40)) & ~(-1 << *(_BYTE *)(v7 + 32));
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) == 0)
      {
        sub_100048944();
        while (++v26 != v27 || (v25 & 1) == 0)
        {
          v28 = v26 == v27;
          if (v26 == v27)
            v26 = 0;
          v25 |= v28;
          if (*(_QWORD *)(v13 + 8 * v26) != -1)
          {
            sub_100048908();
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_10004891C();
LABEL_33:
      *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v24) = v22;
      ++*(_QWORD *)(v7 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_41;
      if (v17 >= v12)
        goto LABEL_35;
      ++v14;
      if (!v9[v17])
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v12)
          goto LABEL_35;
        if (!v9[v14])
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v12)
            goto LABEL_35;
          if (!v9[v14])
          {
            v18 = v17 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              sub_100048558();
              v3 = v31;
              sub_100048F88();
              if (v29 > 63)
              {
                sub_10003C2EC(0, (unint64_t)(v29 + 63) >> 6, (_QWORD *)(v4 + 56));
              }
              else
              {
                sub_100048F60();
                *v9 = v30;
              }
              *(_QWORD *)(v4 + 16) = 0;
              break;
            }
            if (!v9[v18])
            {
              while (1)
              {
                v14 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v14 >= v12)
                  goto LABEL_35;
                ++v18;
                if (v9[v14])
                  goto LABEL_23;
              }
            }
            v14 = v18;
          }
        }
      }
LABEL_23:
      sub_100048DFC();
      v11 = v20 & v19;
    }
  }
  sub_100048558();
  *v3 = v7;
  sub_1000483C4();
}

uint64_t sub_10003B8E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100010F40((uint64_t *)&unk_100092FB8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_38;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  if (!v13)
    goto LABEL_9;
LABEL_8:
  v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    v22 = v7;
    v23 = *(_QWORD *)(v7 + 48);
    v24 = *(_QWORD *)(v40 + 72);
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v25(v6, v23 + v24 * i, v4);
    v26 = *(_QWORD *)(v9 + 40);
    sub_100035338((uint64_t)&unk_1000918A0);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) == 0)
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v30);
        if (v35 != -1)
        {
          v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v14 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(_QWORD *)(v9 + 48) + v31 * v24, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v22;
    if (v13)
      goto LABEL_8;
LABEL_9:
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_40;
    if (v19 >= v38)
      goto LABEL_34;
    v20 = v39[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v38)
        goto LABEL_34;
      v20 = v39[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v38)
          goto LABEL_34;
        v20 = v39[v16];
        if (!v20)
          break;
      }
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
  }
  v21 = v19 + 3;
  if (v21 < v38)
  {
    v20 = v39[v21];
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_34;
        v20 = v39[v16];
        ++v21;
        if (v20)
          goto LABEL_22;
      }
    }
    v16 = v21;
    goto LABEL_22;
  }
LABEL_34:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    sub_10003C2EC(0, (unint64_t)(v36 + 63) >> 6, v39);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_38:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_10003BC4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100010F40(&qword_100092E88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_10003C2EC(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_10003BF24(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_15:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            v19 = v2 != v6 || v17 >= v18 + 1;
            v2 = v6;
            if (v19)
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_10003C0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;

  sub_100048D38();
  a23 = v24;
  a24 = v28;
  v30 = v29;
  if (!v25)
  {
    sub_1000491CC();
    goto LABEL_18;
  }
  v31 = v27;
  v32 = v25;
  sub_100010F40(v26);
  a12 = static _SetStorage.convert(_:capacity:)(v30, v32);
  __CocoaSet.makeIterator()(v30);
  v33 = __CocoaSet.Iterator.next()();
  if (!v33)
  {
LABEL_16:
    sub_100048558();
LABEL_18:
    sub_100048D04();
    return;
  }
  v34 = v33;
  v35 = v31(0);
  while (1)
  {
    a10 = v34;
    sub_100048C48((uint64_t)&a11, (uint64_t)&a10, (uint64_t)&type metadata for Swift.AnyObject + 8, v35);
    v36 = a12;
    if (*(_QWORD *)(a12 + 24) <= *(_QWORD *)(a12 + 16))
    {
      sub_10003B6B8();
      v36 = a12;
    }
    v37 = a11;
    v38 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v36 + 40));
    v39 = v36 + 56;
    v40 = -1 << *(_BYTE *)(v36 + 32);
    v41 = v38 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v36 + 56 + 8 * (v41 >> 6))) == 0)
      break;
    v43 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v36 + 56 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v39 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
    *(_QWORD *)(*(_QWORD *)(v36 + 48) + 8 * v43) = v37;
    ++*(_QWORD *)(v36 + 16);
    v34 = __CocoaSet.Iterator.next()();
    if (!v34)
      goto LABEL_16;
  }
  v44 = 0;
  v45 = (unint64_t)(63 - v40) >> 6;
  while (++v42 != v45 || (v44 & 1) == 0)
  {
    v46 = v42 == v45;
    if (v42 == v45)
      v42 = 0;
    v44 |= v46;
    v47 = *(_QWORD *)(v39 + 8 * v42);
    if (v47 != -1)
    {
      v43 = __clz(__rbit64(~v47)) + (v42 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_10003C278(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  NSObject._rawHashValue(seed:)(a2[5]);
  sub_100048F60();
  v6 = _HashTable.nextHole(atOrAfter:)(v4 & ~v5, a2 + 7, ~v5);
  *(_QWORD *)((char *)a2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << v6;
  *(_QWORD *)(a2[6] + 8 * v6) = a1;
  ++a2[2];
  sub_100020E78();
}

uint64_t sub_10003C2EC(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

#error "10003C358: call analysis failed (funcsize=41)"

#error "10003C3F4: call analysis failed (funcsize=39)"

void sub_10003C450()
{
  unint64_t v0;
  char v1;
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_100048398();
  v0 = sub_100039978();
  if ((v1 & 1) != 0)
  {
    v2 = v0;
    sub_100048764();
    sub_1000485B0();
    v3 = sub_100010F40(&qword_1000930B8);
    sub_100048634(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
    swift_release(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v2));
    type metadata accessor for Relay.Session(0);
    sub_100010F40(&qword_1000930C0);
    sub_100049278((uint64_t)&unk_1000918B0);
    sub_1000488B8(v11);
    sub_10004901C();
  }
  sub_1000483AC();
}

void sub_10003C500()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_100048398();
  v1 = v0;
  sub_100048544();
  sub_100039A4C(v1);
  LOBYTE(v1) = v2;
  sub_1000484EC();
  if ((v1 & 1) != 0)
  {
    sub_100048764();
    v3 = sub_10004847C();
    sub_100048648(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
    sub_1000133E0();
    sub_100048970();
    sub_100048CC4();
    sub_100035338((uint64_t)&unk_100092E10);
    sub_1000488D0(v11);
    sub_10004882C();
  }
  sub_1000483AC();
}

void sub_10003C5BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_100048398();
  v1 = v0;
  sub_100048544();
  sub_1000399C4(v1);
  LOBYTE(v1) = v2;
  sub_1000484EC();
  if ((v1 & 1) != 0)
  {
    sub_100048764();
    v3 = sub_10004847C();
    sub_100048648(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
    sub_1000484C0();
    sub_100048970();
    sub_100048CC4();
    sub_100035338((uint64_t)&unk_100092D98);
    sub_1000488D0(v11);
    sub_10004882C();
  }
  sub_1000483AC();
}

uint64_t sub_10003C678@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  Swift::UInt v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = v2;
  sub_100048544();
  v6 = sub_1000132BC();
  v8 = sub_100039BA0(v6, v7, a1);
  LOBYTE(a1) = v9;
  result = sub_1000484EC();
  if ((a1 & 1) != 0)
  {
    v11 = sub_100048CBC();
    v22 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    v13 = *(_QWORD *)(v12 + 24);
    sub_100010F40(&qword_1000930A0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v11, v13);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v22 + 48) + 24 * v8 + 16));
    sub_100013014();
    v14 = *(_QWORD *)(v22 + 56) + 40 * v8;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v21 = *(_OWORD *)(v14 + 24);
    v18 = sub_100011EDC();
    sub_100048B40(v18, v19, (uint64_t)&type metadata for Client.StreamListenerKey, (uint64_t)&type metadata for Client.StreamListener, v18);
    result = sub_100048AE0();
    v20 = v21;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v20 = 0uLL;
  }
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v17;
  *(_OWORD *)(a2 + 24) = v20;
  return result;
}

uint64_t sub_10003C7A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26[8];
  char v27[8];

  sub_100048398();
  v3 = v2;
  v4 = *v0;
  swift_bridgeObjectRetain(*v0);
  sub_100039C88();
  sub_10004888C();
  if ((v4 & 1) != 0)
  {
    sub_100048CBC();
    *(_QWORD *)v26 = *v0;
    *v0 = 0x8000000000000000;
    v5 = sub_100010F40(&qword_100092F88);
    sub_100048620(v5, v6, v7, v8, v9, v10, v11, v12, v25, v26[0]);
    v13 = *(_QWORD *)(*(_QWORD *)v27 + 48);
    v14 = sub_10001322C();
    sub_100048720(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8));
    v15 = *(_QWORD *)(*(_QWORD *)v27 + 56);
    v16 = sub_1000133E0();
    sub_100049100();
    sub_1000456D4(v15 + v17 * v1, v3, v18);
    sub_100049278((uint64_t)&unk_1000918A0);
    _NativeDictionary._delete(at:)(v1, *(_QWORD *)v27, v14, v16, v19);
    sub_100048AE0();
    v20 = v3;
    v21 = 0;
    v22 = 1;
    v23 = v16;
  }
  else
  {
    _s7SessionC8IdentityVMa(0);
    v20 = sub_1000489F8();
  }
  return sub_1000124AC(v20, v21, v22, v23);
}

void sub_10003C8D4()
{
  sub_10003C9B0();
}

void sub_10003C8E8()
{
  unint64_t v0;
  char v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_100048398();
  sub_100048E40();
  sub_100013164();
  v0 = sub_100039C88();
  v2 = v1;
  sub_1000132A0();
  if ((v2 & 1) != 0)
  {
    sub_100048764();
    sub_1000485B0();
    v3 = sub_100010F40(&qword_100093010);
    sub_100048634(v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
    v11 = *(_QWORD *)(v16 + 48);
    v12 = sub_10001322C();
    sub_100048720(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8));
    type metadata accessor for RemoteDisplayInitiationRequest();
    sub_100049278((uint64_t)&unk_1000918A0);
    sub_1000488B8(v13);
    sub_10004901C();
  }
  sub_1000483AC();
}

void sub_10003C9B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  sub_100048398();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  sub_100048544();
  v6 = sub_1000398E4(v5, v3);
  LOBYTE(v3) = v7;
  sub_1000484EC();
  if ((v3 & 1) != 0)
  {
    sub_100048764();
    v8 = sub_10004847C();
    sub_100048648(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    sub_100048C10(*(_QWORD *)(v19 + 48) + 16 * v6);
    v16 = sub_100010F40(v1);
    _NativeDictionary._delete(at:)(v6, v19, &type metadata for String, v16, &protocol witness table for String);
    sub_10004882C();
  }
  sub_1000483AC();
}

#error "10003CAC4: call analysis failed (funcsize=48)"

#error "10003CB60: call analysis failed (funcsize=15)"

uint64_t sub_10003CB6C()
{
  _OWORD *v0;
  uint64_t v1;
  char v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100048704();
  v0 = (_OWORD *)sub_10004849C();
  v3 = sub_10003DE48(v0, v1, v2);
  v11 = sub_10004856C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_1000484F4(v11);
}

uint64_t sub_10003CB98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100048704();
  v0 = sub_10004849C();
  v3 = sub_10003DF6C(v0, v1, v2);
  v11 = sub_10004856C(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_1000484F4(v11);
}

uint64_t sub_10003CBC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100048704();
  v0 = sub_10004849C();
  sub_10003E1A0(v0, v1, v2);
  v11 = sub_10004856C(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_1000484F4(v11);
}

#error "10003CC24: call analysis failed (funcsize=16)"

uint64_t sub_10003CC30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_100048398();
  sub_100048728();
  v3 = *v0;
  *v0 = 0x8000000000000000;
  sub_10003E070();
  v1 = *v0;
  *v0 = v3;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10003CCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10003CCC8(a1, a2, (uint64_t)sub_10003E458, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10003CCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  void (*v11)(uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;

  sub_100048774();
  v12 = v11;
  sub_100048728();
  v13 = sub_1000488E8();
  v12(v13);
  v14 = *v10;
  *v10 = a10;
  return sub_100048370(v14);
}

uint64_t sub_10003CD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  *v3 = 0x8000000000000000;
  sub_10003E6E8(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v10;
  return swift_bridgeObjectRelease(v8);
}

#error "10003CDC0: call analysis failed (funcsize=16)"

Swift::Int sub_10003CDCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010F40(&qword_100093058);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * i);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v21[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v23, v22);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v23;
    v33[1] = v22;
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v28) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v36)
    {
      swift_release(v5);
      v3 = v35;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_35;
      v19 = *(_QWORD *)(v37 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v36)
  {
    v19 = *(_QWORD *)(v37 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v36)
          goto LABEL_35;
        v19 = *(_QWORD *)(v37 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v35;
LABEL_37:
  if ((v38 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_10003C2EC(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10003D0C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  _QWORD v48[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010F40(&qword_100093068);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    v40 = v5;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v21 = *v20;
      v22 = v20[1];
      v23 = *(_QWORD *)(v5 + 56) + (i << 6);
      v46 = *(_BYTE *)(v23 + 12);
      v47 = *(_DWORD *)(v23 + 8);
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(_QWORD *)(v23 + 40);
      v44 = *(_QWORD *)(v23 + 32);
      v45 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 56);
      v42 = *(_QWORD *)v23;
      v43 = *(_QWORD *)(v23 + 48);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
      }
      Hasher.init(_seed:)(v48, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v48, v21, v22);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          v33 = v29 == v32;
          if (v29 == v32)
            v29 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      v35 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v30);
      *v35 = v21;
      v35[1] = v22;
      v36 = *(_QWORD *)(v8 + 56) + (v30 << 6);
      *(_QWORD *)v36 = v42;
      *(_DWORD *)(v36 + 8) = v47;
      *(_BYTE *)(v36 + 12) = v46;
      *(_QWORD *)(v36 + 16) = v45;
      *(_QWORD *)(v36 + 24) = v24;
      *(_QWORD *)(v36 + 32) = v44;
      *(_QWORD *)(v36 + 40) = v25;
      *(_QWORD *)(v36 + 48) = v43;
      *(_QWORD *)(v36 + 56) = v26;
      ++*(_QWORD *)(v8 + 16);
      v5 = v40;
      if (v11)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_42;
      if (v17 >= v38)
        goto LABEL_35;
      v18 = v39[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v38)
          goto LABEL_35;
        v18 = v39[v14];
        if (!v18)
        {
          v19 = v17 + 2;
          if (v19 >= v38)
          {
LABEL_35:
            swift_release(v5);
            v3 = v2;
            if ((v41 & 1) != 0)
            {
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                sub_10003C2EC(0, (unint64_t)(v37 + 63) >> 6, v39);
              else
                *v39 = -1 << v37;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v18 = v39[v19];
          if (!v18)
          {
            while (1)
            {
              v14 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_43;
              if (v14 >= v38)
                goto LABEL_35;
              v18 = v39[v14];
              ++v19;
              if (v18)
                goto LABEL_21;
            }
          }
          v14 = v19;
        }
      }
LABEL_21:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10003D424(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010F40(&qword_100093078);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * i);
    v25 = *v24;
    v26 = v24[1];
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21[1]);
      swift_bridgeObjectRetain(v26);
    }
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v42, v23, v22);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) == 0)
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v30);
    *v35 = v23;
    v35[1] = v22;
    v36 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v30);
    *v36 = v25;
    v36[1] = v26;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v39)
    {
      swift_release(v5);
      v3 = v38;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v40 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v39)
        goto LABEL_35;
      v19 = *(_QWORD *)(v40 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v39)
  {
    v19 = *(_QWORD *)(v40 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v39)
          goto LABEL_35;
        v19 = *(_QWORD *)(v40 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v38;
LABEL_37:
  if ((v41 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    if (v37 >= 64)
      sub_10003C2EC(0, (unint64_t)(v37 + 63) >> 6, v18);
    else
      *v18 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10003D730(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010F40(&qword_100093090);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v21[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v23, v22);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v23;
    v33[1] = v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v28) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v36)
    {
      swift_release(v5);
      v3 = v35;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_35;
      v19 = *(_QWORD *)(v37 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v36)
  {
    v19 = *(_QWORD *)(v37 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v36)
          goto LABEL_35;
        v19 = *(_QWORD *)(v37 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v35;
LABEL_37:
  if ((v38 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_10003C2EC(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10003DA28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010F40(&qword_100093038);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21[1]);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v23, v22);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v23;
    v33[1] = v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v28) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v35)
    {
      swift_release(v5);
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v36 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_35;
      v19 = *(_QWORD *)(v36 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v35)
  {
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v35)
          goto LABEL_35;
        v19 = *(_QWORD *)(v36 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
LABEL_37:
  if ((v37 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_10003C2EC(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_10003DD2C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000398E4(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100010F40((uint64_t *)&unk_100092E20);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000398E4(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_QWORD *)(v20[7] + 32 * v16);
    sub_100012B68(v21);
    return sub_100012600(a1, v21);
  }
  else
  {
    sub_10003EA60(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain(a3);
  }
}

_OWORD *sub_10003DE48(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100039948(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100010F40(&qword_100092FE8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100039948(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (_QWORD *)(v18[7] + 32 * v14);
    sub_100012B68(v19);
    return sub_100012600(a1, v19);
  }
  else
  {
    sub_100046570(a2, (uint64_t)v21);
    return sub_10003EAC8(v14, (uint64_t)v21, a1, v18);
  }
}

uint64_t sub_10003DF6C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100039978();
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100010F40(&qword_1000930B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100039978();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    v21 = type metadata accessor for Relay.Session(0);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];
    result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v14));
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10003EB90(v14, a2, a1, v18);
    return swift_retain(a2);
  }
  return result;
}

void sub_10003E070()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(_QWORD);
  uint64_t (*v6)(_QWORD);
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  Swift::Int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_100012D54();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v9 = v8;
  v11 = v10;
  v30 = v12;
  v29 = v5(0);
  __chkstk_darwin(v29);
  v14 = (char *)&v29 - v13;
  v15 = *v0;
  v16 = v4(v11);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v17 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_10;
  }
  v21 = v16;
  v22 = v17;
  sub_100010F40(v2);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v9 & 1, v20))
  {
    v23 = v4(v11);
    if ((v22 & 1) == (v24 & 1))
    {
      v21 = v23;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v29);
    __break(1u);
    return;
  }
LABEL_5:
  v25 = *v7;
  if ((v22 & 1) != 0)
  {
    v26 = *(_QWORD *)(v25 + 56);
    swift_release(*(_QWORD *)(v26 + 8 * v21));
    *(_QWORD *)(v26 + 8 * v21) = v30;
  }
  else
  {
    v27 = sub_100049048();
    sub_10003EB64(v27, v28, v6);
    sub_10003ED88(v21, (uint64_t)v14, v30, v25, v6);
  }
  sub_100012D28();
}

void sub_10003E1A0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_100039C88();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100010F40(&qword_100092F88);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_100039C88();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = _s7SessionC8IdentityVMa(0);
    sub_100046CF8(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_10003EBD4(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t sub_10003E30C(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_100039BA0(a2, a3, a4);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100010F40(&qword_1000930A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17))
    goto LABEL_5;
  v20 = sub_100039BA0(a2, a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Client.StreamListenerKey);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v6;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7] + 40 * v18;
    result = swift_release(*(_QWORD *)(v23 + 32));
    v25 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v23 = *(_OWORD *)a1;
    *(_OWORD *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
  }
  else
  {
    sub_10003EC8C(v18, a2, a3, a4, a1, v22);
    swift_retain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10003E458(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_100039C88();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13;
  v19 = v14;
  sub_100010F40(&qword_100093010);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_100039C88();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    result = swift_release(*(_QWORD *)(v23 + 8 * v18));
    *(_QWORD *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10003ECF0(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

void sub_10003E59C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v8 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v12 = sub_100039A4C(a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = v12;
  v18 = v13;
  sub_100010F40(&qword_100092E48);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16))
    goto LABEL_5;
  v19 = sub_100039A4C(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v17 = v19;
LABEL_5:
  v21 = *v4;
  if ((v18 & 1) != 0)
  {
    v22 = *(_QWORD *)(v21 + 56);

    *(_QWORD *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_10003EB64(a2, (uint64_t)v10, _s7SessionC8IdentityVMa);
    sub_10003ED88(v17, (uint64_t)v10, a1, v21, _s7SessionC8IdentityVMa);
  }
}

uint64_t sub_10003E6E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000398E4(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100010F40(&qword_100092E50);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000398E4(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10003EE08(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_10003E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_1000398E4(a3, a4);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100010F40(&qword_100092F78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17))
    goto LABEL_5;
  v20 = sub_1000398E4(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v6;
  if ((v19 & 1) != 0)
  {
    v23 = (uint64_t *)(v22[7] + 16 * v18);
    result = swift_release(v23[1]);
    *v23 = a1;
    v23[1] = a2;
  }
  else
  {
    sub_10003EE50(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

void sub_10003E928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(a3 + 40));
  v6 = type metadata accessor for UUID(0);
  sub_100035338((uint64_t)&unk_1000918A0);
  dispatch thunk of Hashable.hash(into:)(v11, v6, v7);
  v8 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(_QWORD *)(a1 + *(int *)(v8 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + *(int *)(v8 + 24)));
  v9 = Hasher._finalize()();
  v10 = _HashTable.nextHole(atOrAfter:)(v9 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
  sub_1000456D4(a1, *(_QWORD *)(a3 + 48) + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v10, _s7SessionC8IdentityVMa);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v10) = a2;
  ++*(_QWORD *)(a3 + 16);
}

_OWORD *sub_10003EA60(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100012600(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_10003EAC8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100012600(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void sub_10003EB40()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_100048B5C();
  v2 = v1(v0);
  sub_1000130B0(v2);
  sub_100005E8C();
}

void sub_10003EB64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100048E6C(a1, a2, a3);
  sub_1000488AC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100005E8C();
}

unint64_t sub_10003EB90(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

void sub_10003EBD4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = _s7SessionC8IdentityVMa(0);
  sub_1000456D4(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, _s7SessionC8IdentityVMa);
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
}

unint64_t sub_10003EC8C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 24 * result);
  *v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  v7 = a6[7] + 40 * result;
  v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a5 + 32);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

uint64_t sub_10003ECF0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void sub_10003ED88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  sub_100048D54();
  *(_QWORD *)(v11 + 8 * (v10 >> 6) + 64) |= 1 << v10;
  v12 = *(_QWORD *)(v11 + 48);
  v13(0);
  sub_100049100();
  sub_1000456D4(v6, v12 + v14 * v7, a5);
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v7) = v5;
  v15 = *(_QWORD *)(a4 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v17;
    sub_10004889C();
  }
}

unint64_t sub_10003EE08(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_10003EE50(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

_QWORD *sub_10003EE9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100010F40(&qword_100093E30);
  v4 = *(_QWORD *)(sub_100010F40(&qword_100093028) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100010F40(&qword_100093028) - 8) + 80);
      v12 = sub_100042AB0(&v14, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v14;
      swift_bridgeObjectRetain(a1);
      sub_1000465AC(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003EFD4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v28 = swift_bridgeObjectRetain(a1);
  v5 = (_DWORD *)(v28 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    v32[0] = *((_QWORD *)v5 - 2);
    v7 = v32[0];
    v32[1] = v6;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v6);
    v11 = sub_1000398E4(v32[0], v6);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    if (v9[3] < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_100010F40(&qword_100093060);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v7;
    v19[1] = v6;
    *(_DWORD *)(v18[7] + 4 * v11) = v8;
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v5 += 6;
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v28, 2);
  }
  sub_10003CDCC(v14, a2 & 1);
  v16 = sub_1000398E4(v32[0], v6);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v11 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v33 = v23;
  swift_errorRetain(v23);
  v24 = sub_100010F40((uint64_t *)&unk_100092F60);
  if ((swift_dynamicCast(v24, &v33, v24, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease_n(v28, 2);
    return swift_errorRelease(v33);
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x800000010006FBB0;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F298(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;

  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v35 = v5;
  if (!v5)
    return swift_bridgeObjectRelease_n(v4, 2);
  v6 = 0;
  v7 = 0;
  v34 = v4;
  while (1)
  {
    if (v7 >= *(_QWORD *)(v4 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(_QWORD *)(v4 + v6 + 32);
    v9 = *(_QWORD *)(v4 + v6 + 40);
    v10 = *(_QWORD *)(v4 + v6 + 48);
    v42 = *(_BYTE *)(v4 + v6 + 60);
    v43 = *(_DWORD *)(v4 + v6 + 56);
    v11 = *(_QWORD *)(v4 + v6 + 72);
    v12 = *(_QWORD *)(v4 + v6 + 88);
    v40 = *(_QWORD *)(v4 + v6 + 80);
    v41 = *(_QWORD *)(v4 + v6 + 64);
    v13 = *(_QWORD *)(v4 + v6 + 104);
    v39 = *(_QWORD *)(v4 + v6 + 96);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (!v9)
      return swift_bridgeObjectRelease_n(v4, 2);
    v36 = v13;
    v37 = v12;
    v38 = v11;
    v47[0] = v8;
    v47[1] = v9;
    v14 = (_QWORD *)*a3;
    v16 = sub_1000398E4(v8, v9);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_100010F40(&qword_100093070);
      _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v8;
    v24[1] = v9;
    v25 = v23[7] + (v16 << 6);
    *(_QWORD *)v25 = v10;
    *(_DWORD *)(v25 + 8) = v43;
    *(_BYTE *)(v25 + 12) = v42;
    *(_QWORD *)(v25 + 16) = v41;
    *(_QWORD *)(v25 + 24) = v38;
    *(_QWORD *)(v25 + 32) = v40;
    *(_QWORD *)(v25 + 40) = v37;
    *(_QWORD *)(v25 + 48) = v39;
    *(_QWORD *)(v25 + 56) = v36;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_22;
    ++v7;
    v23[2] = v28;
    v6 += 80;
    a2 = 1;
    v4 = v34;
    if (v35 == v7)
      return swift_bridgeObjectRelease_n(v4, 2);
  }
  sub_10003D0C4(v19, a2 & 1);
  v21 = sub_1000398E4(v8, v9);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v48 = v29;
  swift_errorRetain(v29);
  v30 = sub_100010F40((uint64_t *)&unk_100092F60);
  if ((swift_dynamicCast(v30, &v48, v30, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(v34, 2);
    return swift_errorRelease(v48);
  }
LABEL_24:
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v32._object = (void *)0x800000010006FBB0;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)(v47, &v45, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v33._countAndFlagsBits = 39;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v46, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F608(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34[2];
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v30 = swift_bridgeObjectRetain(a1);
  v5 = (uint64_t *)(v30 + 56);
  while (1)
  {
    v6 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    v34[0] = *(v5 - 3);
    v7 = v34[0];
    v34[1] = v6;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    v12 = sub_1000398E4(v34[0], v6);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v16 = v11;
    if (v10[3] < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_100010F40((uint64_t *)&unk_100093080);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v7;
    v20[1] = v6;
    v21 = (_QWORD *)(v19[7] + 16 * v12);
    *v21 = v9;
    v21[1] = v8;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_18;
    v5 += 4;
    v19[2] = v24;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v30, 2);
  }
  sub_10003D424(v15, a2 & 1);
  v17 = sub_1000398E4(v34[0], v6);
  if ((v16 & 1) != (v18 & 1))
    goto LABEL_19;
  v12 = v17;
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v35 = v25;
  swift_errorRetain(v25);
  v26 = sub_100010F40((uint64_t *)&unk_100092F60);
  if ((swift_dynamicCast(v26, &v35, v26, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v30, 2);
    return swift_errorRelease(v35);
  }
LABEL_20:
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v28._object = (void *)0x800000010006FBB0;
  v28._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)(v34, &v32, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v29._countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v32, v33, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F8E8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v28 = swift_bridgeObjectRetain(a1);
  v5 = (uint64_t *)(v28 + 48);
  while (1)
  {
    v6 = *(v5 - 1);
    v8 = *v5;
    v32[0] = *(v5 - 2);
    v7 = v32[0];
    v32[1] = v6;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v6);
    v11 = sub_1000398E4(v32[0], v6);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    if (v9[3] < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_100010F40(&qword_100093098);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v18[7] + 8 * v11) = v8;
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v5 += 3;
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v28, 2);
  }
  sub_10003D730(v14, a2 & 1);
  v16 = sub_1000398E4(v32[0], v6);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v11 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v33 = v23;
  swift_errorRetain(v23);
  v24 = sub_100010F40((uint64_t *)&unk_100092F60);
  if ((swift_dynamicCast(v24, &v33, v24, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease_n(v28, 2);
    return swift_errorRelease(v33);
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x800000010006FBB0;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003FBAC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v28 = swift_bridgeObjectRetain(a1);
  for (i = (uint64_t *)(v28 + 48); ; i += 3)
  {
    v6 = *(i - 1);
    v8 = *i;
    v32[0] = *(i - 2);
    v7 = v32[0];
    v32[1] = v6;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    v11 = sub_1000398E4(v32[0], v6);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    if (v9[3] < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_100010F40(&qword_100093040);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v18[7] + 8 * v11) = v8;
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v28, 2);
  }
  sub_10003DA28(v14, a2 & 1);
  v16 = sub_1000398E4(v32[0], v6);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v11 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v33 = v23;
  swift_errorRetain(v23);
  v24 = sub_100010F40((uint64_t *)&unk_100092F60);
  if ((swift_dynamicCast(v24, &v33, v24, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v28, 2);
    return swift_errorRelease(v33);
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x800000010006FBB0;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_10003FE80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  int64_t *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  Swift::Int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;

  v2 = v1;
  v133 = sub_100010F40(&qword_100093D90);
  v4 = *(_QWORD *)(v133 - 8);
  v5 = __chkstk_darwin(v133);
  v129 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v139 = (uint64_t)&v122 - v8;
  v9 = __chkstk_darwin(v7);
  v136 = (uint64_t)&v122 - v10;
  __chkstk_darwin(v9);
  v135 = (uint64_t)&v122 - v11;
  v12 = (int64_t)a1;
  v13 = a1[1];
  v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13)
        sub_100041780(0, v13, 1, (_QWORD *)v12);
      return;
    }
    goto LABEL_141;
  }
  v15 = v14;
  v125 = sub_100054FD0(v13 / 2);
  v126 = v13;
  v131 = v16;
  v132 = v4;
  if (v13 <= 0)
  {
LABEL_105:
    v18 = (char *)_swiftEmptyArrayStorage;
    v66 = _swiftEmptyArrayStorage[2];
    v20 = (uint64_t *)v12;
LABEL_106:
    if (v66 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease(v18);
      if (v126 >= -1)
        goto LABEL_118;
      goto LABEL_145;
    }
    v116 = *v20;
    while (1)
    {
      v12 = v66 - 2;
      if (v66 < 2)
        break;
      if (!v116)
        goto LABEL_149;
      v111 = v18;
      v117 = *(_QWORD *)&v18[16 * v12 + 32];
      v118 = *(_QWORD *)&v18[16 * v66 + 24];
      sub_100041DAC(v116 + *(_QWORD *)(v132 + 72) * v117, v116 + *(_QWORD *)(v132 + 72) * *(_QWORD *)&v18[16 * v66 + 16], v116 + *(_QWORD *)(v132 + 72) * v118, v131);
      if (v2)
        goto LABEL_103;
      if (v118 < v117)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        v111 = sub_100042A88((uint64_t)v18);
      if ((unint64_t)v12 >= *((_QWORD *)v111 + 2))
        goto LABEL_137;
      v119 = &v111[16 * v12 + 32];
      *(_QWORD *)v119 = v117;
      *((_QWORD *)v119 + 1) = v118;
      v120 = *((_QWORD *)v111 + 2);
      if (v66 > v120)
        goto LABEL_138;
      memmove(&v111[16 * v66 + 16], &v111[16 * v66 + 32], 16 * (v120 - v66));
      *((_QWORD *)v111 + 2) = v120 - 1;
      v66 = v120 - 1;
      v18 = v111;
      if (v120 <= 2)
        goto LABEL_117;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return;
  }
  v124 = v15;
  v17 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v19 = v13;
  v20 = (uint64_t *)v12;
  v138 = (uint64_t *)v12;
  while (1)
  {
    v21 = v17;
    v22 = v17 + 1;
    v130 = v17;
    if (v17 + 1 >= v19)
    {
      v39 = v17 + 1;
    }
    else
    {
      v23 = *v20;
      v24 = *(_QWORD *)(v4 + 72);
      v25 = *v20 + v24 * v22;
      v134 = v19;
      v26 = v135;
      sub_100046EF4(v25, v135, &qword_100093D90);
      v27 = v23 + v24 * v21;
      v28 = v136;
      sub_100046EF4(v27, v136, &qword_100093D90);
      LODWORD(v137) = static Date.< infix(_:_:)(v26, v28);
      v29 = v28;
      v21 = v130;
      sub_1000470BC(v29, &qword_100093D90);
      v30 = v26;
      v19 = v134;
      sub_1000470BC(v30, &qword_100093D90);
      v31 = v21 + 2;
      v128 = v23;
      v140 = v24;
      if (v21 + 2 >= v19)
      {
        v34 = v21 + 2;
        v20 = v138;
      }
      else
      {
        v127 = v2;
        v32 = v24 * v22;
        v33 = v23;
        v34 = v31;
        v35 = v24 * v31;
        while (1)
        {
          v36 = v135;
          sub_100046EF4(v33 + v35, v135, &qword_100093D90);
          v37 = v136;
          sub_100046EF4(v33 + v32, v136, &qword_100093D90);
          v38 = static Date.< infix(_:_:)(v36, v37);
          sub_1000470BC(v37, &qword_100093D90);
          sub_1000470BC(v36, &qword_100093D90);
          if (((v137 ^ v38) & 1) != 0)
            break;
          v33 += v140;
          if (++v34 >= v134)
          {
            v19 = v134;
            v34 = v134;
            v20 = v138;
            v4 = v132;
            v2 = v127;
            v21 = v130;
            goto LABEL_13;
          }
        }
        v20 = v138;
        v4 = v132;
        v2 = v127;
        v21 = v130;
        v19 = v134;
      }
LABEL_13:
      if ((v137 & 1) != 0)
      {
        if (v34 < v21)
          goto LABEL_142;
        v39 = v34;
        if (v21 < v34)
        {
          v127 = v2;
          v40 = 0;
          v41 = v140;
          v42 = v140 * (v34 - 1);
          v43 = v34 * v140;
          v44 = v21 * v140;
          do
          {
            if (v21 != v39 + v40 - 1)
            {
              v45 = v128;
              if (!v128)
                goto LABEL_148;
              v46 = v128 + v44;
              v137 = v128 + v42;
              sub_100046F20(v128 + v44, v129, &qword_100093D90);
              if (v44 < v42 || v46 >= v45 + v43)
              {
                swift_arrayInitWithTakeFrontToBack(v45 + v44, v137, 1, v133);
                v41 = v140;
              }
              else
              {
                v41 = v140;
                if (v44 != v42)
                  swift_arrayInitWithTakeBackToFront(v46, v137, 1, v133);
              }
              sub_100046F20(v129, v137, &qword_100093D90);
              v20 = v138;
              v39 = v34;
            }
            ++v21;
            --v40;
            v42 -= v41;
            v43 -= v41;
            v44 += v41;
          }
          while (v21 < v39 + v40);
          v4 = v132;
          v2 = v127;
          v21 = v130;
          v19 = v134;
        }
      }
      else
      {
        v39 = v34;
      }
    }
    if (v39 < v19)
    {
      if (__OFSUB__(v39, v21))
        goto LABEL_140;
      if (v39 - v21 < v124)
      {
        if (__OFADD__(v21, v124))
          goto LABEL_143;
        if (v21 + v124 >= v19)
          v48 = v19;
        else
          v48 = v21 + v124;
        if (v48 < v21)
          goto LABEL_144;
        if (v39 != v48)
        {
          v123 = v18;
          v127 = v2;
          v128 = v48;
          v49 = *(_QWORD *)(v4 + 72);
          v140 = v49 * (v39 - 1);
          v134 = v49;
          v50 = v39 * v49;
          do
          {
            v51 = 0;
            v137 = v39;
            while (1)
            {
              v52 = *v20;
              v53 = v50;
              v54 = v50 + v51;
              v55 = v20;
              v56 = v135;
              sub_100046EF4(v54 + *v20, v135, &qword_100093D90);
              v57 = v136;
              sub_100046EF4(v140 + v51 + v52, v136, &qword_100093D90);
              LOBYTE(v52) = static Date.< infix(_:_:)(v56, v57);
              sub_1000470BC(v57, &qword_100093D90);
              sub_1000470BC(v56, &qword_100093D90);
              if ((v52 & 1) == 0)
                break;
              v58 = *v55;
              if (!*v55)
                goto LABEL_146;
              v50 = v53;
              v59 = v58 + v53 + v51;
              v60 = v58 + v140 + v51;
              sub_100046F20(v59, v139, &qword_100093D90);
              swift_arrayInitWithTakeFrontToBack(v59, v60, 1, v133);
              sub_100046F20(v139, v60, &qword_100093D90);
              v51 -= v134;
              ++v21;
              v61 = v137;
              v20 = v138;
              if (v137 == v21)
                goto LABEL_47;
            }
            v61 = v137;
            v20 = v55;
            v50 = v53;
LABEL_47:
            v39 = v61 + 1;
            v140 += v134;
            v50 += v134;
            v21 = v130;
          }
          while (v39 != v128);
          v39 = v128;
          v2 = v127;
          v18 = v123;
        }
      }
    }
    if (v39 < v21)
      goto LABEL_139;
    v62 = v20;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v137 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_100042994(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v65 = *((_QWORD *)v18 + 2);
    v64 = *((_QWORD *)v18 + 3);
    v66 = v65 + 1;
    if (v65 >= v64 >> 1)
      v18 = sub_100042994((char *)(v64 > 1), v65 + 1, 1, v18);
    v20 = v62;
    v67 = v2;
    *((_QWORD *)v18 + 2) = v66;
    v68 = v18 + 32;
    v69 = &v18[16 * v65 + 32];
    v70 = v137;
    *(_QWORD *)v69 = v130;
    *((_QWORD *)v69 + 1) = v70;
    if (v65)
      break;
    v66 = 1;
LABEL_97:
    v19 = v20[1];
    v17 = v137;
    v2 = v67;
    v4 = v132;
    if (v137 >= v19)
      goto LABEL_106;
  }
  while (1)
  {
    v71 = v66 - 1;
    if (v66 >= 4)
    {
      v76 = &v68[16 * v66];
      v77 = *((_QWORD *)v76 - 8);
      v78 = *((_QWORD *)v76 - 7);
      v82 = __OFSUB__(v78, v77);
      v79 = v78 - v77;
      if (v82)
        goto LABEL_124;
      v81 = *((_QWORD *)v76 - 6);
      v80 = *((_QWORD *)v76 - 5);
      v82 = __OFSUB__(v80, v81);
      v74 = v80 - v81;
      v75 = v82;
      if (v82)
        goto LABEL_125;
      v83 = v66 - 2;
      v84 = &v68[16 * v66 - 32];
      v86 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      v82 = __OFSUB__(v85, v86);
      v87 = v85 - v86;
      if (v82)
        goto LABEL_126;
      v82 = __OFADD__(v74, v87);
      v88 = v74 + v87;
      if (v82)
        goto LABEL_128;
      if (v88 >= v79)
      {
        v106 = &v68[16 * v71];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v82 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v82)
          goto LABEL_134;
        v99 = v74 < v109;
        goto LABEL_86;
      }
    }
    else
    {
      if (v66 != 3)
      {
        v100 = *((_QWORD *)v18 + 4);
        v101 = *((_QWORD *)v18 + 5);
        v82 = __OFSUB__(v101, v100);
        v93 = v101 - v100;
        v94 = v82;
        goto LABEL_80;
      }
      v73 = *((_QWORD *)v18 + 4);
      v72 = *((_QWORD *)v18 + 5);
      v82 = __OFSUB__(v72, v73);
      v74 = v72 - v73;
      v75 = v82;
    }
    if ((v75 & 1) != 0)
      goto LABEL_127;
    v83 = v66 - 2;
    v89 = &v68[16 * v66 - 32];
    v91 = *(_QWORD *)v89;
    v90 = *((_QWORD *)v89 + 1);
    v92 = __OFSUB__(v90, v91);
    v93 = v90 - v91;
    v94 = v92;
    if (v92)
      goto LABEL_129;
    v95 = &v68[16 * v71];
    v97 = *(_QWORD *)v95;
    v96 = *((_QWORD *)v95 + 1);
    v82 = __OFSUB__(v96, v97);
    v98 = v96 - v97;
    if (v82)
      goto LABEL_131;
    if (__OFADD__(v93, v98))
      goto LABEL_133;
    if (v93 + v98 >= v74)
    {
      v99 = v74 < v98;
LABEL_86:
      if (v99)
        v71 = v83;
      goto LABEL_88;
    }
LABEL_80:
    if ((v94 & 1) != 0)
      goto LABEL_130;
    v102 = &v68[16 * v71];
    v104 = *(_QWORD *)v102;
    v103 = *((_QWORD *)v102 + 1);
    v82 = __OFSUB__(v103, v104);
    v105 = v103 - v104;
    if (v82)
      goto LABEL_132;
    if (v105 < v93)
      goto LABEL_97;
LABEL_88:
    v110 = v71 - 1;
    if (v71 - 1 >= v66)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!*v20)
      goto LABEL_147;
    v111 = v18;
    v112 = (int64_t *)&v68[16 * v110];
    v12 = *v112;
    v113 = &v68[16 * v71];
    v114 = *((_QWORD *)v113 + 1);
    sub_100041DAC(*v20 + *(_QWORD *)(v132 + 72) * *v112, *v20 + *(_QWORD *)(v132 + 72) * *(_QWORD *)v113, *v20 + *(_QWORD *)(v132 + 72) * v114, v131);
    if (v67)
      break;
    if (v114 < v12)
      goto LABEL_121;
    if (v71 > *((_QWORD *)v111 + 2))
      goto LABEL_122;
    *v112 = v12;
    *(_QWORD *)&v68[16 * v110 + 8] = v114;
    v115 = *((_QWORD *)v111 + 2);
    if (v71 >= v115)
      goto LABEL_123;
    v18 = v111;
    v66 = v115 - 1;
    memmove(&v68[16 * v71], v113 + 16, 16 * (v115 - 1 - v71));
    *((_QWORD *)v111 + 2) = v115 - 1;
    v20 = v138;
    if (v115 <= 2)
      goto LABEL_97;
  }
  v2 = v67;
LABEL_103:
  swift_bridgeObjectRelease(v111);
  if (v126 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  v121 = v125;
  *(_QWORD *)(v125 + 16) = 0;
  swift_bridgeObjectRelease(v121);
}

void sub_1000407F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  Swift::Int v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Class isa;
  uint64_t v50;
  unint64_t v51;
  Swift::String v52;
  void *object;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  Swift::String v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  Swift::String v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Class v80;
  uint64_t v81;
  Swift::String v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  Class v106;
  uint64_t v107;
  Swift::String v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Class v114;
  uint64_t v115;
  Swift::String v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  char v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  Swift::Int v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;

  v215 = sub_100010F40(&qword_100093028);
  v206 = *(_QWORD *)(v215 - 8);
  v3 = __chkstk_darwin(v215);
  v199 = (uint64_t)&v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v216 = (uint64_t)&v188 - v6;
  v7 = __chkstk_darwin(v5);
  v209 = (uint64_t)&v188 - v8;
  v9 = __chkstk_darwin(v7);
  v208 = (uint64_t)&v188 - v10;
  v11 = __chkstk_darwin(v9);
  v195 = (char *)&v188 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v188 - v14;
  v16 = __chkstk_darwin(v13);
  v201 = (uint64_t)&v188 - v17;
  v18 = __chkstk_darwin(v16);
  v200 = (uint64_t)&v188 - v19;
  v20 = __chkstk_darwin(v18);
  v204 = (uint64_t)&v188 - v21;
  v22 = __chkstk_darwin(v20);
  v203 = (uint64_t)&v188 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v188 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v188 - v28;
  v30 = __chkstk_darwin(v27);
  v197 = (uint64_t)&v188 - v31;
  __chkstk_darwin(v30);
  v196 = (uint64_t)&v188 - v32;
  v220 = a1;
  v33 = a1[1];
  v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if ((v33 & 0x8000000000000000) == 0)
    {
      if (v33)
        sub_1000419A8(0, v33, 1, v220);
      return;
    }
    goto LABEL_158;
  }
  v35 = v34;
  v207 = v1;
  v192 = sub_1000550C0(v33 / 2);
  v205 = v36;
  v193 = v33;
  if (v33 <= 0)
  {
LABEL_122:
    v38 = (char *)_swiftEmptyArrayStorage;
    v129 = _swiftEmptyArrayStorage[2];
LABEL_123:
    if (v129 < 2)
    {
LABEL_134:
      swift_bridgeObjectRelease(v38);
      if (v193 >= -1)
        goto LABEL_135;
      goto LABEL_162;
    }
    v180 = *v220;
    v181 = v207;
    while (1)
    {
      v182 = v129 - 2;
      if (v129 < 2)
        break;
      if (!v180)
        goto LABEL_166;
      v183 = *(_QWORD *)&v38[16 * v182 + 32];
      v184 = *(_QWORD *)&v38[16 * v129 + 24];
      sub_100042184(v180 + *(_QWORD *)(v206 + 72) * v183, v180 + *(_QWORD *)(v206 + 72) * *(_QWORD *)&v38[16 * v129 + 16], v180 + *(_QWORD *)(v206 + 72) * v184, v205);
      if (v181)
        goto LABEL_120;
      if (v184 < v183)
        goto LABEL_153;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = sub_100042A88((uint64_t)v38);
      if (v182 >= *((_QWORD *)v38 + 2))
        goto LABEL_154;
      v185 = &v38[16 * v182 + 32];
      *(_QWORD *)v185 = v183;
      *((_QWORD *)v185 + 1) = v184;
      v186 = *((_QWORD *)v38 + 2);
      if (v129 > v186)
        goto LABEL_155;
      memmove(&v38[16 * v129 + 16], &v38[16 * v129 + 32], 16 * (v186 - v129));
      *((_QWORD *)v38 + 2) = v186 - 1;
      v129 = v186 - 1;
      if (v186 <= 2)
        goto LABEL_134;
    }
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    return;
  }
  v189 = v35;
  v190 = v29;
  v191 = v26;
  v37 = 0;
  v38 = (char *)_swiftEmptyArrayStorage;
  v39 = v33;
  v213 = v15;
  while (1)
  {
    v40 = v37;
    v41 = v37 + 1;
    v202 = v37;
    if (v37 + 1 >= v39)
    {
      v65 = v37 + 1;
    }
    else
    {
      v218 = v39;
      v42 = *v220;
      v43 = *(_QWORD *)(v206 + 72);
      v44 = v196;
      sub_100046EF4(*v220 + v43 * v41, v196, &qword_100093028);
      v198 = v42;
      v219 = v43;
      v45 = v197;
      sub_100046EF4(v42 + v43 * v40, v197, &qword_100093028);
      v46 = v215;
      v47 = *(int *)(v215 + 48);
      v48 = (uint64_t)v190;
      sub_10003EB64(v44, (uint64_t)v190, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v48 + v47) = *(_QWORD *)(v44 + v47);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v50 = sub_100012100(isa);

      v221 = 542327881;
      v222 = 0xE400000000000000;
      v223 = v50;
      v51 = sub_100011E6C();
      v52._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
      object = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(object);
      v54 = v221;
      v55 = v222;
      sub_10003EB40();
      v56 = *(int *)(v46 + 48);
      v57 = (uint64_t)v191;
      sub_10003EB64(v45, (uint64_t)v191, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v57 + v56) = *(_QWORD *)(v45 + v56);
      v58 = UUID._bridgeToObjectiveC()().super.isa;
      v59 = sub_100012100(v58);

      v221 = 542327881;
      v222 = 0xE400000000000000;
      v223 = v59;
      v212 = v51;
      v60._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
      v61 = v60._object;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v61);
      v63 = v221;
      v62 = v222;
      sub_10003EB40();
      if (v54 == v63 && v55 == v62)
      {
        LODWORD(v217) = 0;
        v62 = v55;
      }
      else
      {
        LODWORD(v217) = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, v63, v62, 1);
      }
      v39 = v218;
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v55);
      sub_1000470BC(v197, &qword_100093028);
      sub_1000470BC(v196, &qword_100093028);
      v40 = v202;
      v65 = v202 + 2;
      if (v202 + 2 >= v39)
      {
        v15 = v213;
      }
      else
      {
        v194 = v38;
        v211 = v219 * v41;
        v66 = v198;
        v210 = v219 * v65;
        while (1)
        {
          v214 = v65;
          v67 = v203;
          sub_100046EF4(v66 + v210, v203, &qword_100093028);
          v68 = v204;
          sub_100046EF4(v66 + v211, v204, &qword_100093028);
          v69 = v215;
          v70 = *(int *)(v215 + 48);
          v71 = v200;
          sub_10003EB64(v67, v200, type metadata accessor for SidecarIdentity);
          *(_QWORD *)(v71 + v70) = *(_QWORD *)(v67 + v70);
          v72 = UUID._bridgeToObjectiveC()().super.isa;
          v73 = sub_100012100(v72);

          v221 = 542327881;
          v222 = 0xE400000000000000;
          v223 = v73;
          v74._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
          v75 = v74._object;
          String.append(_:)(v74);
          swift_bridgeObjectRelease(v75);
          v77 = v221;
          v76 = v222;
          sub_10003EB40();
          v78 = *(int *)(v69 + 48);
          v79 = v201;
          sub_10003EB64(v68, v201, type metadata accessor for SidecarIdentity);
          *(_QWORD *)(v79 + v78) = *(_QWORD *)(v68 + v78);
          v80 = UUID._bridgeToObjectiveC()().super.isa;
          v81 = sub_100012100(v80);

          v221 = 542327881;
          v222 = 0xE400000000000000;
          v223 = v81;
          v82._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
          v83 = v82._object;
          String.append(_:)(v82);
          swift_bridgeObjectRelease(v83);
          v85 = v221;
          v84 = v222;
          sub_10003EB40();
          if (v77 == v85 && v76 == v84)
          {
            v87 = 0;
            v84 = v76;
          }
          else
          {
            v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v76, v85, v84, 1);
          }
          swift_bridgeObjectRelease(v84);
          swift_bridgeObjectRelease(v76);
          sub_1000470BC(v204, &qword_100093028);
          sub_1000470BC(v203, &qword_100093028);
          v39 = v218;
          if (((v217 ^ v87) & 1) != 0)
            break;
          v65 = v214 + 1;
          v66 += v219;
          if (v214 + 1 >= v218)
          {
            v65 = v218;
            v38 = v194;
            v15 = v213;
            goto LABEL_25;
          }
        }
        v38 = v194;
        v15 = v213;
        v65 = v214;
LABEL_25:
        v40 = v202;
      }
      if ((v217 & 1) != 0)
      {
        if (v65 < v40)
          goto LABEL_159;
        if (v40 < v65)
        {
          v194 = v38;
          v88 = 0;
          v89 = v219 * (v65 - 1);
          v90 = v65 * v219;
          v91 = v40;
          v92 = v40 * v219;
          do
          {
            if (v91 != v65 + v88 - 1)
            {
              v93 = v198;
              if (!v198)
                goto LABEL_165;
              v94 = v198 + v92;
              sub_100046F20(v198 + v92, v199, &qword_100093028);
              if (v92 < v89 || v94 >= v93 + v90)
              {
                swift_arrayInitWithTakeFrontToBack(v93 + v92, v93 + v89, 1, v215);
              }
              else if (v92 != v89)
              {
                swift_arrayInitWithTakeBackToFront(v93 + v92, v93 + v89, 1, v215);
              }
              sub_100046F20(v199, v93 + v89, &qword_100093028);
              v40 = v202;
            }
            ++v91;
            --v88;
            v89 -= v219;
            v90 -= v219;
            v92 += v219;
          }
          while (v91 < v65 + v88);
          v38 = v194;
          v15 = v213;
          v39 = v218;
        }
      }
    }
    if (v65 < v39)
    {
      if (__OFSUB__(v65, v40))
        goto LABEL_157;
      if (v65 - v40 < v189)
      {
        if (__OFADD__(v40, v189))
          goto LABEL_160;
        if (v40 + v189 >= v39)
          v96 = v39;
        else
          v96 = v40 + v189;
        if (v96 < v40)
          goto LABEL_161;
        if (v65 != v96)
        {
          v194 = v38;
          v97 = *(_QWORD *)(v206 + 72);
          v98 = v97 * (v65 - 1);
          v210 = v97;
          v99 = v65 * v97;
          v100 = (uint64_t)v195;
          v198 = v96;
          do
          {
            v101 = 0;
            v214 = v65;
            v211 = v99;
            v212 = v98;
            while (1)
            {
              v102 = *v220;
              v218 = v99 + v101;
              v219 = v40;
              sub_100046EF4(v99 + v101 + v102, (uint64_t)v15, &qword_100093028);
              v217 = v98 + v101;
              sub_100046EF4(v98 + v101 + v102, v100, &qword_100093028);
              v103 = v215;
              v104 = *(int *)(v215 + 48);
              v105 = v208;
              sub_10003EB64((uint64_t)v15, v208, type metadata accessor for SidecarIdentity);
              *(_QWORD *)(v105 + v104) = *(_QWORD *)&v15[v104];
              v106 = UUID._bridgeToObjectiveC()().super.isa;
              v107 = sub_100012100(v106);

              v221 = 542327881;
              v222 = 0xE400000000000000;
              v223 = v107;
              sub_100011E6C();
              v108._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
              v109 = v108._object;
              String.append(_:)(v108);
              swift_bridgeObjectRelease(v109);
              v111 = v221;
              v110 = v222;
              sub_10003EB40();
              v112 = *(int *)(v103 + 48);
              v113 = v209;
              sub_10003EB64(v100, v209, type metadata accessor for SidecarIdentity);
              *(_QWORD *)(v113 + v112) = *(_QWORD *)(v100 + v112);
              v114 = UUID._bridgeToObjectiveC()().super.isa;
              v115 = sub_100012100(v114);

              v221 = 542327881;
              v222 = 0xE400000000000000;
              v223 = v115;
              v116._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v223, 16, 1);
              v117 = v116._object;
              String.append(_:)(v116);
              swift_bridgeObjectRelease(v117);
              v119 = v221;
              v118 = v222;
              sub_10003EB40();
              if (v111 == v119 && v110 == v118)
                break;
              v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v110, v119, v118, 1);
              swift_bridgeObjectRelease(v118);
              swift_bridgeObjectRelease(v110);
              sub_1000470BC(v100, &qword_100093028);
              v15 = v213;
              sub_1000470BC((uint64_t)v213, &qword_100093028);
              if ((v121 & 1) == 0)
                goto LABEL_63;
              v122 = *v220;
              v99 = v211;
              v98 = v212;
              if (!*v220)
                goto LABEL_163;
              v123 = v122 + v211 + v101;
              v124 = v122 + v212 + v101;
              sub_100046F20(v123, v216, &qword_100093028);
              swift_arrayInitWithTakeFrontToBack(v123, v124, 1, v215);
              sub_100046F20(v216, v124, &qword_100093028);
              v101 -= v210;
              v40 = v219 + 1;
              v125 = v214;
              if (v214 == v219 + 1)
                goto LABEL_64;
            }
            swift_bridgeObjectRelease_n(v110, 2);
            sub_1000470BC(v100, &qword_100093028);
            v15 = v213;
            sub_1000470BC((uint64_t)v213, &qword_100093028);
LABEL_63:
            v125 = v214;
            v99 = v211;
            v98 = v212;
LABEL_64:
            v65 = v125 + 1;
            v98 += v210;
            v99 += v210;
            v40 = v202;
          }
          while (v65 != v198);
          v65 = v198;
          v38 = v194;
        }
      }
    }
    if (v65 < v40)
      goto LABEL_156;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
    v214 = v65;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v38 = sub_100042994(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
    v128 = *((_QWORD *)v38 + 2);
    v127 = *((_QWORD *)v38 + 3);
    v129 = v128 + 1;
    if (v128 >= v127 >> 1)
      v38 = sub_100042994((char *)(v127 > 1), v128 + 1, 1, v38);
    *((_QWORD *)v38 + 2) = v129;
    v130 = v38 + 32;
    v131 = &v38[16 * v128 + 32];
    v132 = v214;
    *(_QWORD *)v131 = v40;
    *((_QWORD *)v131 + 1) = v132;
    if (v128)
      break;
    v129 = 1;
LABEL_114:
    v39 = v220[1];
    v37 = v214;
    if (v214 >= v39)
      goto LABEL_123;
  }
  while (1)
  {
    v133 = v129 - 1;
    if (v129 >= 4)
    {
      v138 = &v130[16 * v129];
      v139 = *((_QWORD *)v138 - 8);
      v140 = *((_QWORD *)v138 - 7);
      v144 = __OFSUB__(v140, v139);
      v141 = v140 - v139;
      if (v144)
        goto LABEL_141;
      v143 = *((_QWORD *)v138 - 6);
      v142 = *((_QWORD *)v138 - 5);
      v144 = __OFSUB__(v142, v143);
      v136 = v142 - v143;
      v137 = v144;
      if (v144)
        goto LABEL_142;
      v145 = v129 - 2;
      v146 = &v130[16 * v129 - 32];
      v148 = *(_QWORD *)v146;
      v147 = *((_QWORD *)v146 + 1);
      v144 = __OFSUB__(v147, v148);
      v149 = v147 - v148;
      if (v144)
        goto LABEL_143;
      v144 = __OFADD__(v136, v149);
      v150 = v136 + v149;
      if (v144)
        goto LABEL_145;
      if (v150 >= v141)
      {
        v168 = &v130[16 * v133];
        v170 = *(_QWORD *)v168;
        v169 = *((_QWORD *)v168 + 1);
        v144 = __OFSUB__(v169, v170);
        v171 = v169 - v170;
        if (v144)
          goto LABEL_151;
        v161 = v136 < v171;
        goto LABEL_103;
      }
    }
    else
    {
      if (v129 != 3)
      {
        v162 = *((_QWORD *)v38 + 4);
        v163 = *((_QWORD *)v38 + 5);
        v144 = __OFSUB__(v163, v162);
        v155 = v163 - v162;
        v156 = v144;
        goto LABEL_97;
      }
      v135 = *((_QWORD *)v38 + 4);
      v134 = *((_QWORD *)v38 + 5);
      v144 = __OFSUB__(v134, v135);
      v136 = v134 - v135;
      v137 = v144;
    }
    if ((v137 & 1) != 0)
      goto LABEL_144;
    v145 = v129 - 2;
    v151 = &v130[16 * v129 - 32];
    v153 = *(_QWORD *)v151;
    v152 = *((_QWORD *)v151 + 1);
    v154 = __OFSUB__(v152, v153);
    v155 = v152 - v153;
    v156 = v154;
    if (v154)
      goto LABEL_146;
    v157 = &v130[16 * v133];
    v159 = *(_QWORD *)v157;
    v158 = *((_QWORD *)v157 + 1);
    v144 = __OFSUB__(v158, v159);
    v160 = v158 - v159;
    if (v144)
      goto LABEL_148;
    if (__OFADD__(v155, v160))
      goto LABEL_150;
    if (v155 + v160 >= v136)
    {
      v161 = v136 < v160;
LABEL_103:
      if (v161)
        v133 = v145;
      goto LABEL_105;
    }
LABEL_97:
    if ((v156 & 1) != 0)
      goto LABEL_147;
    v164 = &v130[16 * v133];
    v166 = *(_QWORD *)v164;
    v165 = *((_QWORD *)v164 + 1);
    v144 = __OFSUB__(v165, v166);
    v167 = v165 - v166;
    if (v144)
      goto LABEL_149;
    if (v167 < v155)
      goto LABEL_114;
LABEL_105:
    v172 = v133 - 1;
    if (v133 - 1 >= v129)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (!*v220)
      goto LABEL_164;
    v173 = v38;
    v174 = &v130[16 * v172];
    v175 = *(_QWORD *)v174;
    v176 = &v130[16 * v133];
    v177 = *((_QWORD *)v176 + 1);
    v178 = v207;
    sub_100042184(*v220 + *(_QWORD *)(v206 + 72) * *(_QWORD *)v174, *v220 + *(_QWORD *)(v206 + 72) * *(_QWORD *)v176, *v220 + *(_QWORD *)(v206 + 72) * v177, v205);
    v207 = v178;
    if (v178)
      break;
    if (v177 < v175)
      goto LABEL_138;
    if (v133 > *((_QWORD *)v173 + 2))
      goto LABEL_139;
    *(_QWORD *)v174 = v175;
    *(_QWORD *)&v130[16 * v172 + 8] = v177;
    v179 = *((_QWORD *)v173 + 2);
    if (v133 >= v179)
      goto LABEL_140;
    v38 = v173;
    v129 = v179 - 1;
    memmove(&v130[16 * v133], v176 + 16, 16 * (v179 - 1 - v133));
    *((_QWORD *)v173 + 2) = v179 - 1;
    v15 = v213;
    if (v179 <= 2)
      goto LABEL_114;
  }
  v38 = v173;
LABEL_120:
  swift_bridgeObjectRelease(v38);
  if (v193 < -1)
  {
    __break(1u);
    goto LABEL_122;
  }
LABEL_135:
  v187 = v192;
  *(_QWORD *)(v192 + 16) = 0;
  swift_bridgeObjectRelease(v187);
}

void sub_100041780(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v26 = sub_100010F40(&qword_100093D90);
  v7 = __chkstk_darwin(v26);
  v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v23 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  v29 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v29 - 1);
    v28 = v14;
    v31 = v14 * v29;
    while (2)
    {
      v15 = 0;
      v16 = v25;
      do
      {
        v17 = *a4;
        sub_100046EF4(v31 + v15 + *a4, (uint64_t)v13, &qword_100093D90);
        v18 = v27;
        sub_100046EF4(v32 + v15 + v17, v27, &qword_100093D90);
        LOBYTE(v17) = static Date.< infix(_:_:)(v13, v18);
        sub_1000470BC(v18, &qword_100093D90);
        sub_1000470BC((uint64_t)v13, &qword_100093D90);
        if ((v17 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = a4;
        v21 = v19 + v31 + v15;
        v22 = v19 + v32 + v15;
        sub_100046F20(v21, v30, &qword_100093D90);
        swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v26);
        sub_100046F20(v30, v22, &qword_100093D90);
        v15 -= v28;
        ++v16;
        a4 = v20;
      }
      while (v29 != v16);
      v32 += v28;
      v31 += v28;
      if (++v29 != v24)
        continue;
      break;
    }
  }
}

void sub_1000419A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  Swift::String v28;
  void *object;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v59 = a4;
  v47 = a1;
  v55 = sub_100010F40(&qword_100093028);
  v6 = __chkstk_darwin(v55);
  v56 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v50 = (uint64_t)&v45 - v9;
  v10 = __chkstk_darwin(v8);
  v49 = (uint64_t)&v45 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  v17 = (char *)&v45 - v16;
  v54 = a3;
  v46 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v15 + 72);
    v19 = v18 * (v54 - 1);
    v51 = v18;
    v20 = v18 * v54;
    v48 = (char *)&v45 - v16;
    while (2)
    {
      v21 = 0;
      v60 = v47;
      v52 = v20;
      v53 = v19;
      while (1)
      {
        v22 = *v59;
        v58 = v20 + v21;
        sub_100046EF4(v20 + v21 + v22, (uint64_t)v17, &qword_100093028);
        v57 = v19 + v21;
        sub_100046EF4(v19 + v21 + v22, (uint64_t)v14, &qword_100093028);
        v23 = v55;
        v24 = *(int *)(v55 + 48);
        v25 = v49;
        sub_10003EB64((uint64_t)v17, v49, type metadata accessor for SidecarIdentity);
        *(_QWORD *)(v25 + v24) = *(_QWORD *)&v17[v24];
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v27 = sub_100012100(isa);

        v61 = 542327881;
        v62 = 0xE400000000000000;
        v63 = v27;
        sub_100011E6C();
        v28._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v63, 16, 1);
        object = v28._object;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(object);
        v30 = v61;
        v31 = v62;
        sub_10003EB40();
        v32 = *(int *)(v23 + 48);
        v33 = v50;
        sub_10003EB64((uint64_t)v14, v50, type metadata accessor for SidecarIdentity);
        *(_QWORD *)(v33 + v32) = *(_QWORD *)&v14[v32];
        v34 = UUID._bridgeToObjectiveC()().super.isa;
        v35 = sub_100012100(v34);

        v61 = 542327881;
        v62 = 0xE400000000000000;
        v63 = v35;
        v36._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v63, 16, 1);
        v37 = v36._object;
        String.append(_:)(v36);
        swift_bridgeObjectRelease(v37);
        v39 = v61;
        v38 = v62;
        sub_10003EB40();
        if (v30 == v39 && v31 == v38)
          break;
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v39, v38, 1);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v31);
        sub_1000470BC((uint64_t)v14, &qword_100093028);
        v17 = v48;
        sub_1000470BC((uint64_t)v48, &qword_100093028);
        v20 = v52;
        v19 = v53;
        if ((v41 & 1) != 0)
        {
          v42 = *v59;
          if (!*v59)
          {
            __break(1u);
            return;
          }
          v43 = v42 + v52 + v21;
          v44 = v42 + v53 + v21;
          sub_100046F20(v43, v56, &qword_100093028);
          swift_arrayInitWithTakeFrontToBack(v43, v44, 1, v55);
          sub_100046F20(v56, v44, &qword_100093028);
          v21 -= v51;
          if (v54 != ++v60)
            continue;
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n(v31, 2);
      sub_1000470BC((uint64_t)v14, &qword_100093028);
      v17 = v48;
      sub_1000470BC((uint64_t)v48, &qword_100093028);
      v20 = v52;
      v19 = v53;
LABEL_13:
      v19 += v51;
      v20 += v51;
      if (++v54 != v46)
        continue;
      break;
    }
  }
}

void sub_100041DAC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v26;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v41;
  int64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = sub_100010F40(&qword_100093D90);
  v8 = __chkstk_darwin(v51);
  v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v13 = *(_QWORD *)(v10 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_75;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_76;
  v18 = v14 / v13;
  v19 = v16 / v13;
  v46 = *(_QWORD *)(v10 + 72);
  if (v14 / v13 >= v16 / v13)
  {
    sub_10003963C(a2, v16 / v13, a4, &qword_100093D90);
    v20 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_69;
    v48 = a1;
    v49 = -v13;
    v47 = a4;
    while (1)
    {
      v30 = a3;
      v31 = v49;
      a3 += v49;
      v50 = v20 + v49;
      v32 = v20;
      sub_100046EF4(v20 + v49, (uint64_t)v12, &qword_100093D90);
      v33 = a2 + v31;
      v34 = a2 + v31;
      v35 = (uint64_t)v12;
      v36 = v52;
      sub_100046EF4(v34, v52, &qword_100093D90);
      v37 = static Date.< infix(_:_:)(v35, v36);
      v38 = v36;
      v12 = (char *)v35;
      sub_1000470BC(v38, &qword_100093D90);
      sub_1000470BC(v35, &qword_100093D90);
      if ((v37 & 1) != 0)
      {
        v20 = v32;
        if (v30 >= a2 && a3 < a2)
        {
          v41 = v48;
          if (v30 != a2)
            swift_arrayInitWithTakeBackToFront(a3, v33, 1, v51);
          a2 = v33;
          a4 = v47;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack(a3, v33, 1, v51);
        a2 = v33;
      }
      else if (v30 < v32 || a3 >= v32)
      {
        v20 = v50;
        swift_arrayInitWithTakeFrontToBack(a3, v50, 1, v51);
      }
      else
      {
        v20 = v50;
        if (v30 != v32)
          swift_arrayInitWithTakeBackToFront(a3, v50, 1, v51);
      }
      a4 = v47;
      v41 = v48;
LABEL_64:
      if (v20 <= a4 || a2 <= v41)
      {
        v13 = v46;
        goto LABEL_69;
      }
    }
  }
  sub_10003963C(a1, v14 / v13, a4, &qword_100093D90);
  v20 = a4 + v18 * v13;
  v50 = a3;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    v22 = v52;
    do
    {
      sub_100046EF4(a2, (uint64_t)v12, &qword_100093D90);
      sub_100046EF4(a4, v22, &qword_100093D90);
      v23 = static Date.< infix(_:_:)(v12, v22);
      sub_1000470BC(v22, &qword_100093D90);
      sub_1000470BC((uint64_t)v12, &qword_100093D90);
      if ((v23 & 1) != 0)
      {
        v24 = a2 + v13;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v51);
        }
      }
      else
      {
        v26 = a4 + v13;
        if (a1 < a4 || a1 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1, v51);
        }
        v24 = a2;
        a4 = v26;
        v13 = v46;
      }
      a1 += v13;
      v28 = a4 >= v20 || v24 >= v50;
      a2 = v24;
    }
    while (!v28);
  }
  a2 = a1;
LABEL_69:
  v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_10003963C(a4, v43 / v13, a2, &qword_100093D90);
    return;
  }
LABEL_77:
  __break(1u);
}

void sub_100042184(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  BOOL v28;
  int64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  Class v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Class v49;
  uint64_t v50;
  Swift::String v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  char v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v61;
  BOOL v62;
  int64_t v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Class isa;
  uint64_t v75;
  Swift::String v76;
  void *object;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Class v82;
  uint64_t v83;
  Swift::String v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  char v89;
  unint64_t v90;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;

  v109 = sub_100010F40(&qword_100093028);
  v8 = __chkstk_darwin(v109);
  v99 = (uint64_t)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v98 = (uint64_t)&v96 - v11;
  v12 = __chkstk_darwin(v10);
  v106 = (unint64_t)&v96 - v13;
  v14 = __chkstk_darwin(v12);
  v105 = (uint64_t)&v96 - v15;
  v16 = __chkstk_darwin(v14);
  v102 = (unint64_t)&v96 - v17;
  v18 = __chkstk_darwin(v16);
  v101 = (unint64_t)&v96 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v96 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v96 - v23;
  v26 = *(_QWORD *)(v25 + 72);
  if (!v26)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v27 = a2 - a1;
  v28 = a2 - a1 == 0x8000000000000000 && v26 == -1;
  if (v28)
    goto LABEL_89;
  v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v26 == -1)
    goto LABEL_90;
  v103 = a3;
  v104 = v26;
  v31 = v27 / v26;
  v32 = v29 / v26;
  if (v27 / v26 >= v29 / v26)
  {
    sub_10003963C(a2, v29 / v26, a4, &qword_100093028);
    v33 = a4 + v32 * v26;
    if (v32 * v26 < 1 || a1 >= a2)
      goto LABEL_52;
    v66 = -v26;
    v67 = v103;
    v108 = a4;
    v97 = -v26;
    while (1)
    {
      v107 = v33;
      v101 = v33 + v66;
      v102 = v67;
      v68 = v105;
      sub_100046EF4(v33 + v66, v105, &qword_100093028);
      v103 = a2;
      v69 = a2 + v66;
      v100 = (char *)(a2 + v66);
      v70 = v106;
      sub_100046EF4(v69, v106, &qword_100093028);
      v71 = v109;
      v72 = *(int *)(v109 + 48);
      v73 = v98;
      sub_10003EB64(v68, v98, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v73 + v72) = *(_QWORD *)(v68 + v72);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v75 = sub_100012100(isa);

      v110 = 542327881;
      v111 = 0xE400000000000000;
      v112 = v75;
      sub_100011E6C();
      v76._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v112, 16, 1);
      object = v76._object;
      String.append(_:)(v76);
      swift_bridgeObjectRelease(object);
      v79 = v110;
      v78 = v111;
      sub_10003EB40();
      v80 = *(int *)(v71 + 48);
      v81 = v99;
      sub_10003EB64(v70, v99, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v81 + v80) = *(_QWORD *)(v70 + v80);
      v82 = UUID._bridgeToObjectiveC()().super.isa;
      v83 = sub_100012100(v82);

      v110 = 542327881;
      v111 = 0xE400000000000000;
      v112 = v83;
      v84._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v112, 16, 1);
      v85 = v84._object;
      String.append(_:)(v84);
      swift_bridgeObjectRelease(v85);
      v86 = v110;
      v87 = v111;
      sub_10003EB40();
      if (v79 == v86 && v78 == v87)
      {
        v89 = 0;
        v87 = v78;
      }
      else
      {
        v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v78, v86, v87, 1);
      }
      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v78);
      v66 = v97;
      v90 = v102;
      v67 = v102 + v97;
      sub_1000470BC(v106, &qword_100093028);
      sub_1000470BC(v105, &qword_100093028);
      a2 = v103;
      if ((v89 & 1) != 0)
        break;
      if (v90 < v107 || v67 >= v107)
      {
        v93 = v101;
        swift_arrayInitWithTakeFrontToBack(v90 + v66, v101, 1, v109);
        v33 = v93;
        a4 = v108;
LABEL_81:
        v26 = v104;
        goto LABEL_82;
      }
      v28 = v90 == v107;
      a4 = v108;
      v26 = v104;
      if (v28)
      {
        v33 = v101;
      }
      else
      {
        v94 = v101;
        swift_arrayInitWithTakeBackToFront(v67, v101, 1, v109);
        v33 = v94;
      }
LABEL_82:
      if (v33 <= a4 || a2 <= a1)
        goto LABEL_52;
    }
    if (v90 < v103 || v67 >= v103)
    {
      a2 = (unint64_t)v100;
      swift_arrayInitWithTakeFrontToBack(v90 + v66, v100, 1, v109);
    }
    else
    {
      a2 = (unint64_t)v100;
      if (v90 != v103)
        swift_arrayInitWithTakeBackToFront(v90 + v66, v100, 1, v109);
    }
    v33 = v107;
    a4 = v108;
    goto LABEL_81;
  }
  sub_10003963C(a1, v27 / v26, a4, &qword_100093028);
  v33 = a4 + v31 * v26;
  if (v31 * v26 >= 1 && a2 < v103)
  {
    v107 = a4 + v31 * v26;
    v100 = v24;
    while (1)
    {
      v106 = a1;
      sub_100046EF4(a2, (uint64_t)v24, &qword_100093028);
      v108 = a4;
      sub_100046EF4(a4, (uint64_t)v22, &qword_100093028);
      v35 = v109;
      v36 = *(int *)(v109 + 48);
      v37 = (uint64_t)v24;
      v38 = v24;
      v39 = v101;
      sub_10003EB64(v37, v101, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v39 + v36) = *(_QWORD *)&v38[v36];
      v40 = UUID._bridgeToObjectiveC()().super.isa;
      v41 = sub_100012100(v40);

      v110 = 542327881;
      v111 = 0xE400000000000000;
      v112 = v41;
      sub_100011E6C();
      v42 = (uint64_t)v22;
      v43._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v112, 16, 1);
      v44 = v43._object;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v44);
      v46 = v110;
      v45 = v111;
      sub_10003EB40();
      v47 = *(int *)(v35 + 48);
      v48 = v102;
      sub_10003EB64((uint64_t)v22, v102, type metadata accessor for SidecarIdentity);
      *(_QWORD *)(v48 + v47) = *(_QWORD *)&v22[v47];
      v49 = UUID._bridgeToObjectiveC()().super.isa;
      v50 = sub_100012100(v49);

      v110 = 542327881;
      v111 = 0xE400000000000000;
      v112 = v50;
      v51._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v112, 16, 1);
      v52 = v51._object;
      String.append(_:)(v51);
      swift_bridgeObjectRelease(v52);
      v54 = v110;
      v53 = v111;
      sub_10003EB40();
      if (v46 == v54 && v45 == v53)
        break;
      v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v45, v54, v53, 1);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v45);
      sub_1000470BC(v42, &qword_100093028);
      v24 = v100;
      sub_1000470BC((uint64_t)v100, &qword_100093028);
      v22 = (char *)v42;
      if ((v56 & 1) == 0)
        goto LABEL_28;
      v26 = v104;
      v57 = a2 + v104;
      v58 = v106;
      v59 = v106 < a2 || v106 >= v57;
      a4 = v108;
      if (!v59)
      {
        v61 = v103;
        if (v106 != a2)
          swift_arrayInitWithTakeBackToFront(v106, a2, 1, v109);
        v33 = v107;
        goto LABEL_41;
      }
      swift_arrayInitWithTakeFrontToBack(v106, a2, 1, v109);
LABEL_34:
      v33 = v107;
      v61 = v103;
LABEL_41:
      a1 = v58 + v26;
      v62 = a4 >= v33 || v57 >= v61;
      a2 = v57;
      if (v62)
        goto LABEL_46;
    }
    swift_bridgeObjectRelease_n(v45, 2);
    sub_1000470BC(v42, &qword_100093028);
    v24 = v100;
    sub_1000470BC((uint64_t)v100, &qword_100093028);
    v22 = (char *)v42;
LABEL_28:
    v26 = v104;
    a4 = v108 + v104;
    v58 = v106;
    if (v106 >= v108 && v106 < a4)
    {
      if (v106 != v108)
        swift_arrayInitWithTakeBackToFront(v106, v108, 1, v109);
      v57 = a2;
      v33 = v107;
      v61 = v103;
      goto LABEL_41;
    }
    swift_arrayInitWithTakeFrontToBack(v106, v108, 1, v109);
    v57 = a2;
    goto LABEL_34;
  }
LABEL_46:
  a2 = a1;
LABEL_52:
  v64 = v33 - a4;
  if (v26 != -1 || v64 != 0x8000000000000000)
  {
    sub_10003963C(a4, v64 / v26, a2, &qword_100093028);
    return;
  }
LABEL_91:
  __break(1u);
}

char *sub_100042994(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100010F40(&qword_100092FD0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100042A88(uint64_t a1)
{
  return sub_100042994(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100042A9C(uint64_t a1)
{
  return sub_100038A90(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100042AB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = sub_100010F40(&qword_100093028);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  v15 = *(_QWORD *)(a4 + 64);
  v36 = a4 + 64;
  v16 = -1 << *(_BYTE *)(a4 + 32);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  if (!a2)
  {
    v19 = 0;
    a3 = 0;
LABEL_39:
    v30 = v36;
    *a1 = a4;
    a1[1] = v30;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v33 = -1 << *(_BYTE *)(a4 + 32);
  v34 = a1;
  v19 = 0;
  v20 = 0;
  v35 = (unint64_t)(63 - v16) >> 6;
  v32 = v35 - 1;
  v21 = a3;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = type metadata accessor for SidecarIdentity(0);
    sub_10003EB64(v27 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v23, (uint64_t)v11, type metadata accessor for SidecarIdentity);
    v29 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v23);
    *(_QWORD *)&v11[*(int *)(v38 + 48)] = v29;
    sub_100046F20((uint64_t)v11, (uint64_t)v14, &qword_100093028);
    sub_100046F20((uint64_t)v14, a2, &qword_100093028);
    if (v20 == v21)
    {
      a3 = v21;
      swift_retain(v29);
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v37 + 72);
    result = swift_retain(v29);
    if (v18)
      goto LABEL_8;
LABEL_9:
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v24 >= v35)
      goto LABEL_33;
    v25 = *(_QWORD *)(v36 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v35)
      {
        v18 = 0;
        v19 = v24;
      }
      else
      {
        v25 = *(_QWORD *)(v36 + 8 * v19);
        if (v25)
          goto LABEL_14;
        v26 = v24 + 2;
        if (v24 + 2 >= v35)
          goto LABEL_33;
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (v25)
        {
LABEL_17:
          v24 = v26;
          goto LABEL_18;
        }
        v19 = v24 + 3;
        if (v24 + 3 < v35)
        {
          v25 = *(_QWORD *)(v36 + 8 * v19);
          if (v25)
          {
LABEL_14:
            v24 = v19;
            goto LABEL_18;
          }
          v26 = v24 + 4;
          if (v24 + 4 >= v35)
          {
LABEL_33:
            v18 = 0;
            goto LABEL_37;
          }
          v25 = *(_QWORD *)(v36 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              v24 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_42;
              if (v24 >= v35)
              {
                v18 = 0;
                v19 = v32;
                goto LABEL_37;
              }
              v25 = *(_QWORD *)(v36 + 8 * v24);
              ++v26;
              if (v25)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v18 = 0;
        v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      v16 = v33;
      a1 = v34;
      goto LABEL_39;
    }
LABEL_18:
    v18 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_100042DB4()
{
  sub_100033E88();
}

uint64_t sub_100042DE8()
{
  uint64_t v0;

  return sub_10002EF10(v0, 15);
}

uint64_t sub_100042E24(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000121A8(result, a2, a3 & 1);
  return result;
}

void sub_100042E3C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_100012D54();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = sub_10001322C();
  v8 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10004852C();
  v9 = *v2;
  v10 = *(_QWORD *)(*v2 + 40);
  sub_100035338((uint64_t)&unk_1000918A0);
  v12 = v11;
  swift_bridgeObjectRetain(v9);
  v33 = v4;
  dispatch thunk of Hashable._rawHashValue(seed:)(v10, v7, v12);
  sub_100048F60();
  v15 = v14 & ~v13;
  v16 = v9;
  v17 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v30 = v2;
    v31 = v6;
    v32 = ~v13;
    v18 = v8[9];
    v19 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v1, *(_QWORD *)(v16 + 48) + v18 * v15, v7);
      sub_100035338((uint64_t)&unk_100092F90);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v33, v7, v22);
      v24 = (void (*)(uint64_t, uint64_t))v8[1];
      v24(v1, v7);
      if ((v23 & 1) != 0)
        break;
      v15 = (v15 + 1) & v32;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease(v20);
        v2 = v30;
        v6 = v31;
        v25 = v8;
        goto LABEL_7;
      }
    }
    sub_10004857C();
    v24(v33, v7);
    v21(v31, *(_QWORD *)(*v30 + 48) + v18 * v15, v7);
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    v19 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
    v25 = v8;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v19(v1, v33, v7);
    v34 = *v2;
    *v2 = 0x8000000000000000;
    v27 = sub_100048988();
    sub_1000433C8(v27, v28, isUniquelyReferenced_nonNull_native);
    v29 = *v2;
    *v2 = v34;
    swift_bridgeObjectRelease(v29);
    sub_100048E8C(v6, v33, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25[4]);
  }
  sub_100012D28();
}

uint64_t sub_100043058(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[9];

  v7 = *v3;
  sub_1000490C4(*(_QWORD *)(*v3 + 40), a2);
  sub_100013070();
  String.hash(into:)(v27, a2, a3);
  v8 = sub_100048848();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_100048E9C();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100048CD4(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_1000132A0();
      sub_10001320C();
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_100048E9C();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100048CD4(*v21, v22) & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_10001320C();
  v24 = sub_100048CBC();
  v27[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100013164();
  v25 = sub_1000132BC();
  sub_1000435CC(v25, v26, v10, v24);
  sub_100048FBC(v27[0]);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

#error "100043310: call analysis failed (funcsize=136)"

uint64_t sub_1000433C8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10003B8E4(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10003AB14();
      goto LABEL_12;
    }
    sub_10003B0EC(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  sub_100035338((uint64_t)&unk_1000918A0);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      sub_100035338((uint64_t)&unk_100092F90);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000435CC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10003BC4C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10003AD3C();
      goto LABEL_22;
    }
    sub_10003B410(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_100043764()
{
  uint64_t *v0;
  char v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  char v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  sub_100012D54();
  v4 = v3;
  v5 = v0;
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(*v0 + 16);
  v11 = *(_QWORD *)(*v0 + 24);
  if (v11 > v10 && (v1 & 1) != 0)
    goto LABEL_14;
  if ((v1 & 1) != 0)
  {
    sub_10003B6B8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10003A998(v2);
      goto LABEL_14;
    }
    sub_10003AEEC();
  }
  v12 = *v0;
  v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v0 + 40));
  v14 = -1 << *(_BYTE *)(v12 + 32);
  v7 = v13 & ~v14;
  sub_100048EBC();
  if ((v15 & 1) != 0)
  {
    v16 = sub_100049170();
    v17 = sub_100048EB0();
    v18 = sub_100048FFC((uint64_t)v17);

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v19 = ~v14;
      while (1)
      {
        v7 = (v7 + 1) & v19;
        sub_100048EBC();
        if ((v20 & 1) == 0)
          break;
        v21 = sub_100048EB0();
        v22 = sub_100048FFC((uint64_t)v21);

        if ((v22 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (v7 >> 6) + 56) |= 1 << v7;
  *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * v7) = v9;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v23 + 16) = v26;
    sub_100012D28();
  }
}

uint64_t sub_100043890(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v10 = (unint64_t *)((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10003C2EC(0, v8, v10);
    sub_100043B74(v10, v8, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v11;
  }
  else
  {
    v12 = (unint64_t *)swift_slowAlloc(v9, -1);
    sub_10003C2EC(0, v8, v12);
    sub_100043B74(v12, v8, v4, a2);
    a2 = v13;
    swift_slowDealloc(v12, -1, -1);
  }
  return a2;
}

uint64_t sub_1000439F8(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (unint64_t *)((char *)&v18 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10003C2EC(0, v10, v12);
    sub_100043E60(v12, v10, v6, a2);
    if (v3)
      swift_willThrow(v13, v14);
    else
      return v13;
  }
  else
  {
    v15 = (unint64_t *)swift_slowAlloc(v11, -1);
    sub_10003C2EC(0, v10, v15);
    sub_100043E60(v15, v10, v6, a2);
    a3 = v16;
    swift_slowDealloc(v15, -1, -1);
  }
  return a3;
}

void sub_100043B74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v29 = a2;
  v36 = a4;
  v30 = a1;
  v35 = sub_100010F40(&qword_100092DE8);
  v5 = __chkstk_darwin(v35);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for Relay.ConnectedSessionKey(0);
  v34 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v37 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v31 = 0;
  v32 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v33 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_20;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v33)
      goto LABEL_24;
    v21 = *(_QWORD *)(v32 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v33)
        goto LABEL_24;
      v21 = *(_QWORD *)(v32 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v33)
          goto LABEL_24;
        v21 = *(_QWORD *)(v32 + 8 * v13);
        if (!v21)
          break;
      }
    }
LABEL_19:
    v17 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_20:
    v23 = v37;
    sub_10003EB64(v37[6] + *(_QWORD *)(v34 + 72) * v19, (uint64_t)v12, type metadata accessor for Relay.ConnectedSessionKey);
    v24 = *(_QWORD *)(v23[7] + 8 * v19);
    sub_10003EB64((uint64_t)v12, (uint64_t)v9, type metadata accessor for Relay.ConnectedSessionKey);
    v25 = *(int *)(v35 + 48);
    *(_QWORD *)&v9[v25] = v24;
    sub_10003EB64((uint64_t)v9, (uint64_t)v7, type metadata accessor for Relay.ConnectedSessionKey);
    swift_retain_n(v24, 2);
    sub_1000470BC((uint64_t)v9, &qword_100092DE8);
    *(uint64_t *)((char *)v7 + v25) = v24;
    v26 = *v7;
    sub_10003EB40();
    swift_release(v24);
    sub_10003EB40();
    if (v26 != v36)
    {
      *(unint64_t *)((char *)v30 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v31++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1000440AC(v30, v29, v31, v37);
        return;
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v33)
    goto LABEL_24;
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v33)
      goto LABEL_24;
    v21 = *(_QWORD *)(v32 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_100043E60(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);

  v22 = a2;
  v28 = a4;
  v23 = a1;
  v5 = _s7SessionC8IdentityVMa(0);
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  v9 = *(_QWORD *)(a3 + 64);
  v24 = 0;
  v25 = a3 + 64;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_20;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v26)
      goto LABEL_24;
    v16 = *(_QWORD *)(v25 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v26)
        goto LABEL_24;
      v16 = *(_QWORD *)(v25 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v26)
          goto LABEL_24;
        v16 = *(_QWORD *)(v25 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_19:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_20:
    sub_10003EB64(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v27 + 72) * v14, (uint64_t)v7, _s7SessionC8IdentityVMa);
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v14);
    swift_retain(v18);
    v19 = v28(v7, v18);
    swift_release(v18);
    sub_10003EB40();
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        sub_10004445C(v23, v22, v24, (_QWORD *)a3);
        return;
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v26)
    goto LABEL_24;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v26)
      goto LABEL_24;
    v16 = *(_QWORD *)(v25 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_1000440AC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[9];

  v8 = type metadata accessor for Relay.ConnectedSessionKey(0);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (Swift::UInt *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v46 = (uint64_t)&v42 - v12;
  if (!a3)
    return;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return;
  }
  sub_100010F40(&qword_100092DF0);
  v13 = static _DictionaryStorage.allocate(capacity:)(a3);
  v14 = v13;
  v43 = a1;
  v44 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = v13 + 64;
  v45 = a4;
  while (1)
  {
    if (v15)
    {
      v49 = (v15 - 1) & v15;
      v50 = v16;
      v18 = __clz(__rbit64(v15)) | (v16 << 6);
      goto LABEL_25;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_39;
    if (v19 >= v44)
      return;
    v20 = v43[v19];
    v21 = v16 + 1;
    if (!v20)
    {
      v21 = v16 + 2;
      if (v16 + 2 >= v44)
        return;
      v20 = v43[v21];
      if (!v20)
      {
        v21 = v16 + 3;
        if (v16 + 3 >= v44)
          return;
        v20 = v43[v21];
        if (!v20)
          break;
      }
    }
LABEL_24:
    v49 = (v20 - 1) & v20;
    v50 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_25:
    v23 = v46;
    v24 = *(_QWORD *)(v47 + 72);
    sub_10003EB64(a4[6] + v24 * v18, v46, type metadata accessor for Relay.ConnectedSessionKey);
    v25 = *(_QWORD *)(a4[7] + 8 * v18);
    sub_1000456D4(v23, (uint64_t)v11, type metadata accessor for Relay.ConnectedSessionKey);
    Hasher.init(_seed:)(v51, *(_QWORD *)(v14 + 40));
    Hasher._combine(_:)(*v11);
    v26 = v11;
    v27 = (char *)v11 + *(int *)(v48 + 20);
    v28 = type metadata accessor for UUID(0);
    sub_100035338((uint64_t)&unk_1000918A0);
    v30 = v29;
    swift_retain(v25);
    dispatch thunk of Hashable.hash(into:)(v51, v28, v30);
    v31 = _s7SessionC8IdentityVMa(0);
    Hasher._combine(_:)(*(_QWORD *)&v27[*(int *)(v31 + 20)]);
    Hasher._combine(_:)(v27[*(int *)(v31 + 24)]);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) == 0)
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v33) >> 6;
      v11 = v26;
      while (++v35 != v38 || (v37 & 1) == 0)
      {
        v39 = v35 == v38;
        if (v35 == v38)
          v35 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v17 + 8 * v35);
        if (v40 != -1)
        {
          v36 = __clz(__rbit64(~v40)) + (v35 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v36 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    v11 = v26;
LABEL_34:
    *(_QWORD *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    sub_1000456D4((uint64_t)v11, *(_QWORD *)(v14 + 48) + v36 * v24, type metadata accessor for Relay.ConnectedSessionKey);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v36) = v25;
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_38;
    a4 = v45;
    v15 = v49;
    v16 = v50;
    if (!a3)
      return;
  }
  v22 = v16 + 4;
  if (v16 + 4 >= v44)
    return;
  v20 = v43[v22];
  if (v20)
  {
    v21 = v16 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v44)
      return;
    v20 = v43[v21];
    ++v22;
    if (v20)
      goto LABEL_24;
  }
LABEL_40:
  __break(1u);
}

void sub_10004445C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t *v25;

  v25 = a1;
  v7 = _s7SessionC8IdentityVMa(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  if (!a3)
    return;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return;
  }
  sub_100010F40(&qword_100092E40);
  v14 = static _DictionaryStorage.allocate(capacity:)(a3);
  v24 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *v25;
  v16 = 0;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_25;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_29;
    if (v19 >= v24)
      return;
    v20 = v25[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v24)
        return;
      v20 = v25[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v24)
          return;
        v20 = v25[v16];
        if (!v20)
          break;
      }
    }
LABEL_24:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_25:
    sub_10003EB64(a4[6] + *(_QWORD *)(v8 + 72) * v18, (uint64_t)v13, _s7SessionC8IdentityVMa);
    v22 = *(_QWORD *)(a4[7] + 8 * v18);
    sub_1000456D4((uint64_t)v13, (uint64_t)v11, _s7SessionC8IdentityVMa);
    swift_retain(v22);
    sub_10003E928((uint64_t)v11, v22, v14);
    if (__OFSUB__(a3--, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (!a3)
      return;
  }
  v21 = v19 + 3;
  if (v21 >= v24)
    return;
  v20 = v25[v21];
  if (v20)
  {
    v16 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v24)
      return;
    v20 = v25[v16];
    ++v21;
    if (v20)
      goto LABEL_24;
  }
LABEL_30:
  __break(1u);
}

void sub_100044694(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  id v10;
  void *v11;
  BOOL v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100010F40(&qword_100092E80);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
    {
LABEL_31:
      swift_bridgeObjectRelease(v1);
      return;
    }
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease(v1);
  if (!v5)
    goto LABEL_31;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v29 = v1;
  v30 = v1 & 0xC000000000000001;
  v26 = v1 + 32;
  v27 = v1 & 0xFFFFFFFFFFFFFF8;
  v28 = v5;
  while (1)
  {
    if (v30)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v1);
    }
    else
    {
      if (v8 >= *(_QWORD *)(v27 + 16))
        goto LABEL_34;
      v10 = *(id *)(v26 + 8 * v8);
    }
    v11 = v10;
    v12 = __OFADD__(v8++, 1);
    if (v12)
      break;
    v13 = NSObject._rawHashValue(seed:)(v4[5]);
    v14 = -1 << *((_BYTE *)v4 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
    v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      type metadata accessor for ServiceProvider();
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)(v19, v11);

      if ((v20 & 1) != 0)
      {
LABEL_26:

        v5 = v28;
        v1 = v29;
        goto LABEL_30;
      }
      v21 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v21;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if ((v17 & (1 << v15)) == 0)
          break;
        v22 = *(id *)(v4[6] + 8 * v15);
        v23 = static NSObject.== infix(_:_:)(v22, v11);

        if ((v23 & 1) != 0)
          goto LABEL_26;
      }
      v5 = v28;
      v1 = v29;
    }
    *(_QWORD *)&v9[8 * v16] = v18 | v17;
    *(_QWORD *)(v4[6] + 8 * v15) = v11;
    v24 = v4[2];
    v12 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v12)
      goto LABEL_33;
    v4[2] = v25;
LABEL_30:
    if (v8 == v5)
      goto LABEL_31;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

unsigned __int8 *sub_1000448DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100046710();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_100044C48(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_1000449CC(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_1000449CC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100044C48(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = sub_100044CA4((uint64_t)sub_100044CA0, 0, a1, a2);
  v4 = v3;
  v7 = sub_100044CD8(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_100044CA4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3;
  v5 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  return String.subscript.getter(15, v5 | (v4 << 16));
}

uint64_t sub_100044CD8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    sub_100044E1C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      sub_1000164E8(v12, 0);
      v8 = (unint64_t)v13;
      sub_100044F08(v17, (uint64_t)(v13 + 4), v9, a1, a2, v5, a4);
      v5 = v14;
      v15 = v17[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v15);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v16 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v16;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v17[0] = a3;
    v17[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v17 + v8, v9 - v8);
  }
}

void sub_100044E1C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    sub_100016544(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    sub_100016544(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
    return;
  }
  __break(1u);
}

void sub_100044F08(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      sub_100016544(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = _StringObject.sharedUTF8.getter(a6, a7);
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      sub_100016544(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(after:)(v11, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_100045108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(id);
  void (*v5)(id);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[6];

  sub_100012D54();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v73[3] = &type metadata for MutablePacket;
  Strong = sub_100046D84();
  v73[0] = v11;
  v73[1] = v9;
  v73[4] = Strong;
  v73[2] = v7;
  if ((unint64_t)(*(_QWORD *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) - 1) <= 2
    && (Strong = swift_weakLoadStrong(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_rapportSession)) != 0)
  {
    v64 = Strong;
    v65 = v3;
    sub_100046DD4((uint64_t)v73, (uint64_t)v70);
    v63 = v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    v13 = *(_QWORD *)(v63 + *(int *)(_s7SessionC8IdentityVMa(0) + 20));
    v15 = v71;
    v14 = v72;
    sub_100046E14((uint64_t)v70, v71);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v17 = v11;
    sub_100049080();
    v16(v13, v15, v14);
    v18 = mach_continuous_approximate_time();
    v19 = v71;
    v20 = v72;
    sub_100046E14((uint64_t)v70, v71);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 96))(v18, 0, v19, v20);
    if (qword_1000912C8 != -1)
      swift_once(&qword_1000912C8, sub_100026618);
    v21 = static os_log_type_t.debug.getter();
    v22 = v3;
    if (sub_100048F3C(v21))
    {
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v23 = sub_100012DA8();
      sub_100006CAC(v23, (uint64_t)qword_10009A198);
      v24 = sub_100012F20(v1);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (sub_100006D2C(v26))
      {
        v27 = sub_100006D24(22);
        v62 = sub_100006D24(64);
        v68[0] = v62;
        *(_DWORD *)v27 = 136446466;
        v61 = v19;
        v60 = v25;
        v28 = sub_100028E50();
        v30 = v29;
        v66 = sub_100015FFC(v28, v29, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v27 + 4, v27 + 12);
        sub_100012DE8(v1);
        sub_1000132F4();
        *(_WORD *)(v27 + 12) = 2082;
        sub_100012DD0((uint64_t)v70, (uint64_t)&v66, 0);
        v31 = v71;
        v32 = sub_100010F80(v70, v71);
        v33 = *(_QWORD *)(v31 - 8);
        __chkstk_darwin(v32);
        sub_100048514();
        sub_100048B14(v30, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
        v35 = dispatch thunk of CustomStringConvertible.description.getter(v31);
        v37 = v36;
        sub_100048720(v30, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
        v22 = v65;
        v69 = sub_100015FFC(v35, v37, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v27 + 14, v27 + 22);
        sub_10004857C();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "%{public}s: Send %{public}s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
        sub_100006D04(v62);
        sub_100006D04(v27);

      }
      else
      {

        sub_100012DE8(v1);
      }
    }
    v50 = (_QWORD *)sub_100014AC4((uint64_t)&unk_100086FE0, 40);
    v50[2] = v1;
    v50[3] = v5;
    v50[4] = v22;
    v69 = v64;
    sub_100012DD0((uint64_t)v70, (uint64_t)v68, 0);
    v51 = sub_100010F80(v70, v71)[2];
    sub_10004876C();
    v52 = sub_100013000();
    sub_100046E6C(v52, v53);
    v54 = sub_100049260();
    v56 = sub_1000205E0(v54, v55, v51);
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
    v59 = v58;
    type metadata accessor for RapportRemoteDisplaySession();
    swift_retain(v50);
    RapportMessageable.sendEvent(id:event:destinationID:options:completion:)(0xD000000000000011, 0x800000010006E4B0, v56, v57, v59, 0, sub_100046E60, (uint64_t)v50);
    swift_release(v64);
    sub_100012E98();
    sub_1000132A0();
    sub_100012DE8((uint64_t)v50);
    sub_100012B68(v70);
  }
  else
  {
    sub_100012E50(Strong, (unint64_t *)&qword_100091750, NSError_ptr);
    v38 = v11;
    sub_100049080();
    sub_1000486D4();
    v45 = sub_10001F3EC(v39, v40, v41, v42, v43, v44, 444);
    __chkstk_darwin(v45);
    sub_1000489C8();
    *(_QWORD *)(v47 - 16) = v46;
    sub_100049154(sub_100046DC0, v48, sub_100012D04);
    if (v5)
    {
      v49 = v45;
      v5(v45);

    }
    else
    {

    }
  }
  sub_100012B68(v73);
  sub_100012D28();
}

uint64_t sub_100045618@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_100045658(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return _HashTable.occupiedBucket(after:)();
LABEL_8:
  __break(1u);
  return result;
}

void sub_1000456D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100048E6C(a1, a2, a3);
  sub_1000488AC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100005E8C();
}

void sub_100045704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10002FEE0(a1, a2, *(_QWORD *)(v2 + 16), *(NSObject **)(v2 + 24));
}

void sub_10004570C()
{
  sub_100033E88();
}

uint64_t sub_100045748(uint64_t *a1, uint64_t *a2)
{
  return sub_100038298(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_100045770(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

char *sub_1000457F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
LABEL_4:
  if (v7 < v2)
  {
    __break(1u);
    goto LABEL_35;
  }
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_37:
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
LABEL_9:
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v24 = v7;
    else
      v24 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_17;
  }
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = type metadata accessor for ServiceProvider();
  result = (char *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return (char *)specialized Array._endMutation()(result);
  v19 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v19 < 0)
      v25 = *v3;
    else
      v25 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v3);
    v20 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFSUB__(v20, v2))
  {
    __break(1u);
  }
  else
  {
    result = sub_100039860((char *)(v15 + 8 * v2), v20 - v2, v16);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_26;
    }
  }
  if (v2 < 0)
    v26 = v2;
  else
    v26 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v21 = _CocoaArrayWrapper.endIndex.getter(v26);
  result = (char *)swift_bridgeObjectRelease(v2);
LABEL_26:
  if (!__OFADD__(v21, v6))
  {
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v21 + v6;
    return (char *)specialized Array._endMutation()(result);
  }
  __break(1u);
  return result;
}

void sub_100045A6C()
{
  sub_100055F64();
}

void sub_100045A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE v23[24];

  v6 = sub_100010F40(&qword_100093D90);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100035338((uint64_t)&unk_100092FC8);
  v11 = v10;
  v12 = (uint64_t *)(a3 + 16);
  swift_beginAccess(a3 + 16, v23, 0, 0);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = *(int *)(v6 + 48);
    v16 = (_QWORD *)(v13
                   + v15
                   + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    while (*v16 != a1)
    {
      v16 = (_QWORD *)((char *)v16 + *(_QWORD *)(v7 + 72));
      if (!--v14)
        goto LABEL_7;
    }
  }
  else
  {
    v15 = *(int *)(v6 + 48);
LABEL_7:
    v17 = &v9[v15];
    v18 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, a2, v18);
    *v17 = a1;
    v17[1] = v11;
    swift_beginAccess(a3 + 16, v22, 33, 0);
    swift_unknownObjectRetain(a1);
    sub_10003884C((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100038A90);
    v19 = *(_QWORD *)(*v12 + 16);
    sub_1000388F4(v19, (uint64_t (*)(BOOL))sub_100038A90);
    v20 = *v12;
    *(_QWORD *)(v20 + 16) = v19 + 1;
    sub_100046F20((uint64_t)v9, v20+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v19, &qword_100093D90);
    swift_endAccess(v22);
  }
  swift_beginAccess(a3 + 16, v22, 33, 0);
  sub_100038094((uint64_t *)(a3 + 16), &qword_100093D90, sub_100042A9C, (uint64_t (*)(_QWORD *))sub_10003FE80);
  swift_endAccess(v22);
  sub_100053D60();
}

uint64_t sub_100045C6C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.count.getter(a1);
}

int64_t sub_100045C8C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_100045D70(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = type metadata accessor for Client();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = type metadata accessor for Client();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_100045FB8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100046038(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  void (*v9)(uint64_t, id *);
  _QWORD *v10;
  id v12;
  uint64_t v13;
  unint64_t v14;
  ValueMetadata *v15;
  unint64_t v16;

  v15 = &type metadata for Packet;
  v12 = a1;
  v13 = a2;
  v16 = sub_1000465B4();
  v14 = a3;
  v7 = v12;
  sub_10001241C(v13, a3);
  if (sub_10001FE0C(v7) == 1)
  {
    if (*(_QWORD *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 2)
    {
      sub_10002A650();
      sub_10002953C(3uLL);
    }
  }
  else
  {
    v8 = *(_QWORD **)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, id *))((swift_isaMask & *v8) + 0xD8);
      v10 = v8;
      v9(a4, &v12);

    }
    else if (*(_QWORD *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1)
    {
      sub_100046154(v7, a2, a3, a4);
    }
  }
  return sub_100012B68(&v12);
}

uint64_t sub_100046154(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  unint64_t v16;
  ValueMetadata *v17;
  unint64_t v18;

  v7 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue;
  v8 = *(_QWORD *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue);
  if (v8)
    v9 = *(char **)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue);
  else
    v9 = (char *)_swiftEmptyArrayStorage;
  v10 = a1;
  sub_10001241C(a2, a3);
  swift_bridgeObjectRetain(v8);
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    v9 = sub_100038D70(0, *((_QWORD *)v9 + 2) + 1, 1, (uint64_t)v9);
  v12 = *((_QWORD *)v9 + 2);
  v11 = *((_QWORD *)v9 + 3);
  if (v12 >= v11 >> 1)
    v9 = sub_100038D70((char *)(v11 > 1), v12 + 1, 1, (uint64_t)v9);
  v17 = &type metadata for Packet;
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = a2;
  v18 = sub_1000465B4();
  v16 = a3;
  *((_QWORD *)v9 + 2) = v12 + 1;
  sub_100014970(&v15, (uint64_t)&v9[40 * v12 + 32]);
  v13 = *(_QWORD *)(a4 + v7);
  *(_QWORD *)(a4 + v7) = v9;
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10004626C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE v34[24];

  v10 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s7SessionC8IdentityVMa(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  v18 = a2;
  sub_10001241C(a3, a4);
  v19 = sub_10001F90C((uint64_t)v18);
  if (!v19)
    goto LABEL_9;
  v20 = v19;
  sub_10003EB64(a1, (uint64_t)v17, type metadata accessor for SidecarIdentity);
  *(_QWORD *)&v17[*(int *)(v12 + 20)] = v20;
  v17[*(int *)(v12 + 24)] = 1;
  swift_beginAccess(a5 + 120, v34, 32, 0);
  sub_10002189C((uint64_t)v17, *(_QWORD *)(a5 + 120), (uint64_t (*)(void))sub_100039A4C);
  v22 = v21;
  swift_endAccess(v34);
  if (!v22)
  {
    sub_10001FC30((uint64_t)v18);
    if (v24)
    {
      v25 = v24;
      v31 = v23;
      sub_10003EB64((uint64_t)v17, (uint64_t)v15, _s7SessionC8IdentityVMa);
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v26 = sub_100006CAC(v10, (uint64_t)qword_10009A198);
      v27 = (uint64_t)v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v26, v10);
      v28 = type metadata accessor for Relay.Session(0);
      v22 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
      sub_1000290FC((uint64_t)v15, v27, v31, v25);
      sub_10002EC70(v22);
      sub_10002953C(1uLL);
      v29 = sub_10002A7F0();
      sub_10002A5A4(v29);
      goto LABEL_7;
    }
    sub_10003EB40();
LABEL_9:

    sub_100012430(a3, a4);
    return 0;
  }
LABEL_7:
  sub_10003EB40();

  sub_100012430(a3, a4);
  return v22;
}

uint64_t sub_100046504(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100031220(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100046510()
{
  uint64_t v0;

  sub_10001C930();

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100046540(uint64_t a1)
{
  uint64_t *v1;

  return sub_100032BAC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10004654C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004655C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100046564()
{
  uint64_t v0;

  return sub_100032D2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100046570(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000465AC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000465B4()
{
  unint64_t result;

  result = qword_100092EA0;
  if (!qword_100092EA0)
  {
    result = swift_getWitnessTable(&unk_100071FD4, &type metadata for Packet);
    atomic_store(result, (unint64_t *)&qword_100092EA0);
  }
  return result;
}

void sub_1000465F0()
{
  sub_100033E88();
}

uint64_t sub_10004661C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100045748(a1, *(uint64_t **)(v1 + 16)) & 1;
}

void sub_100046638(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_8;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12 = HIBYTE(a4) & 0xF;
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  sub_10004674C((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
}

unint64_t sub_100046710()
{
  unint64_t result;

  result = qword_100092ED0;
  if (!qword_100092ED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100092ED0);
  }
  return result;
}

void sub_10004674C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;

  v11 = a3;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    sub_100016544(a3, a5, a6);
    v16 = v20;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v21 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v21 = HIBYTE(a6) & 0xF;
    if (v21 < v16 >> 16)
      goto LABEL_95;
    v18 = String.UTF8View._foreignDistance(from:to:)(15, v16, a5, a6);
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v22 = v17;
    sub_100016544(v11, a5, a6);
    v17 = v22;
    v11 = v23;
  }
  if ((a4 & 0xC) == v14)
  {
    v24 = a4;
    v25 = v17;
    sub_100016544(v24, a5, a6);
    v17 = v25;
    a4 = v26;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    v19 = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v27 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v27 = v17;
  if (v27 < v11 >> 16)
    goto LABEL_91;
  if (v27 < a4 >> 16)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v19 = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  v28 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v28 < v18)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v29 = (unsigned __int8 *)(a1 + v18);
  if (!a1)
    v29 = 0;
  v30 = *v29;
  if (v30 == 43)
  {
    if (v19 < 1)
    {
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      return;
    }
    if (v19 != 1)
    {
      v40 = a7 + 48;
      v41 = a7 + 55;
      v42 = a7 + 87;
      if (a7 > 10)
      {
        v40 = 58;
      }
      else
      {
        v42 = 97;
        v41 = 65;
      }
      if (v29)
      {
        v43 = 0;
        v44 = v29 + 1;
        v45 = v19 - 1;
        while (1)
        {
          v46 = *v44;
          if (v46 < 0x30 || v46 >= v40)
          {
            if (v46 < 0x41 || v46 >= v41)
            {
              if (v46 < 0x61 || v46 >= v42)
                return;
              v47 = -87;
            }
            else
            {
              v47 = -55;
            }
          }
          else
          {
            v47 = -48;
          }
          v48 = v43 * a7;
          if ((unsigned __int128)(v43 * (__int128)a7) >> 64 == (v43 * a7) >> 63)
          {
            v43 = v48 + (v46 + v47);
            if (!__OFADD__(v48, (v46 + v47)))
            {
              ++v44;
              if (--v45)
                continue;
            }
          }
          return;
        }
      }
    }
  }
  else
  {
    if (v30 == 45)
    {
      if (v19 >= 1)
      {
        if (v19 != 1)
        {
          v31 = a7 + 48;
          v32 = a7 + 55;
          v33 = a7 + 87;
          if (a7 > 10)
          {
            v31 = 58;
          }
          else
          {
            v33 = 97;
            v32 = 65;
          }
          if (v29)
          {
            v34 = 0;
            v35 = v29 + 1;
            v36 = v19 - 1;
            while (1)
            {
              v37 = *v35;
              if (v37 < 0x30 || v37 >= v31)
              {
                if (v37 < 0x41 || v37 >= v32)
                {
                  if (v37 < 0x61 || v37 >= v33)
                    return;
                  v38 = -87;
                }
                else
                {
                  v38 = -55;
                }
              }
              else
              {
                v38 = -48;
              }
              v39 = v34 * a7;
              if ((unsigned __int128)(v34 * (__int128)a7) >> 64 == (v34 * a7) >> 63)
              {
                v34 = v39 - (v37 + v38);
                if (!__OFSUB__(v39, (v37 + v38)))
                {
                  ++v35;
                  if (--v36)
                    continue;
                }
              }
              return;
            }
          }
        }
        return;
      }
      goto LABEL_93;
    }
    if (v28 != v18)
    {
      v49 = a7 + 48;
      v50 = a7 + 55;
      v51 = a7 + 87;
      if (a7 > 10)
      {
        v49 = 58;
      }
      else
      {
        v51 = 97;
        v50 = 65;
      }
      if (v29)
      {
        v52 = 0;
        while (1)
        {
          v53 = *v29;
          if (v53 < 0x30 || v53 >= v49)
          {
            if (v53 < 0x41 || v53 >= v50)
            {
              if (v53 < 0x61 || v53 >= v51)
                return;
              v54 = -87;
            }
            else
            {
              v54 = -55;
            }
          }
          else
          {
            v54 = -48;
          }
          v55 = v52 * a7;
          if ((unsigned __int128)(v52 * (__int128)a7) >> 64 == (v52 * a7) >> 63)
          {
            v52 = v55 + (v53 + v54);
            if (!__OFADD__(v55, (v53 + v54)))
            {
              ++v29;
              if (--v19)
                continue;
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t sub_100046B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100046BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100048A30();
  return swift_deallocObject(v0, v1, v2);
}

unint64_t sub_100046BB8()
{
  unint64_t result;

  result = qword_100092EE8;
  if (!qword_100092EE8)
  {
    result = swift_getWitnessTable(&unk_100072944, &type metadata for Relay.Session.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092EE8);
  }
  return result;
}

unint64_t sub_100046BF4()
{
  unint64_t result;

  result = qword_100092EF8;
  if (!qword_100092EF8)
  {
    result = swift_getWitnessTable(&unk_1000728F4, &type metadata for Relay.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092EF8);
  }
  return result;
}

unint64_t sub_100046C30(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t *v3;
  uint64_t v4;

  result = sub_10001333C(a1);
  if (!result)
  {
    v4 = sub_10004912C(0, v3);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v4);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100046C80()
{
  unint64_t result;

  result = qword_100093D30;
  if (!qword_100093D30)
  {
    result = swift_getWitnessTable(&unk_100072EE4, &type metadata for Watchdog.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_100093D30);
  }
  return result;
}

unint64_t sub_100046CBC()
{
  unint64_t result;

  result = qword_100092F70;
  if (!qword_100092F70)
  {
    result = swift_getWitnessTable(&unk_1000728B4, &type metadata for Relay.RelayError);
    atomic_store(result, (unint64_t *)&qword_100092F70);
  }
  return result;
}

uint64_t sub_100046CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046D3C()
{
  return sub_10003399C();
}

uint64_t sub_100046D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100046D60(uint64_t a1)
{
  uint64_t v1;

  sub_10002B1E0(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_100046D68(uint64_t a1)
{
  uint64_t v1;

  return sub_100053BD0(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100046D84()
{
  unint64_t result;

  result = qword_100092FE0;
  if (!qword_100092FE0)
  {
    result = swift_getWitnessTable(&unk_100071FB8, &type metadata for MutablePacket);
    atomic_store(result, (unint64_t *)&qword_100092FE0);
  }
  return result;
}

uint64_t sub_100046DC0()
{
  return sub_1000485D4();
}

void sub_100046DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100005E8C();
}

uint64_t sub_100046E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100046E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001C930();
  if (*(_QWORD *)(v0 + 24))
    sub_100048EF8();
  v1 = sub_100048A40();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100046E60(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002959C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100046E6C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100046E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 16))
    sub_100048A50();
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  v1 = sub_100048A40();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100046EA4()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 16);
  if (v1)
    v1(*(_QWORD *)(v0 + 32));
  sub_100005E8C();
}

unint64_t sub_100046EC8(unint64_t result)
{
  if (result >= 6)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_100046EDC(uint64_t result)
{
  return sub_10002A03C(result);
}

unint64_t sub_100046EE4(unint64_t result)
{
  if (result >= 6)
    return swift_errorRelease(result);
  return result;
}

void sub_100046EF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001317C(a1, a2, a3);
  sub_1000488AC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100005E8C();
}

void sub_100046F20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001317C(a1, a2, a3);
  sub_1000488AC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100005E8C();
}

uint64_t sub_100046F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100048A50();
  sub_100048EF8();
  v0 = sub_100048A40();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100046F68(uint64_t a1)
{
  uint64_t v1;

  return sub_100036144(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100046F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10002D31C(a1, a2, *(_QWORD *)(v2 + 16), *(NSObject **)(v2 + 24));
}

void sub_100046F84(uint64_t a1)
{
  uint64_t v1;

  sub_10002E6C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100046F8C()
{
  return sub_10002E970();
}

uint64_t sub_100046F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001C930();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = sub_100048A40();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100046FB4(void *a1)
{
  uint64_t v1;

  sub_100026BF8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100046FC4()
{
  sub_1000273D8();
}

void sub_100046FF4()
{
  sub_100048BD0();
}

uint64_t sub_100047024()
{
  uint64_t v0;

  sub_10001C930();
  sub_100048A50();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100047048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100047064()
{
  uint64_t v0;

  return sub_100025BA4(v0);
}

unint64_t sub_10004706C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093118;
  if (!qword_100093118)
  {
    v1 = sub_100006C74(255, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_100093118);
  }
  return result;
}

void sub_1000470BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100048D8C(a1, a2);
  sub_1000130B0(v2);
  sub_100005E8C();
}

uint64_t sub_1000470E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000470FC()
{
  uint64_t v0;

  sub_10002B034(v0);
}

uint64_t sub_100047104()
{
  uint64_t v0;

  sub_100048A50();
  return swift_deallocObject(v0, 32, 7);
}

void sub_100047124()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_100005E8C();
}

void sub_100047140(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10001333C(a1))
  {
    v3 = sub_10004912C(0, v2);
    atomic_store(sub_100049164(v3), v1);
  }
  sub_100005E8C();
}

uint64_t storeEnumTagSinglePayload for Relay.RelayError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000471B4 + 4 * byte_100072080[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000471E8 + 4 * byte_10007207B[v4]))();
}

uint64_t sub_1000471E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000471F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000471F8);
  return result;
}

uint64_t sub_100047204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004720CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100047210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Relay.RelayError()
{
  return &type metadata for Relay.RelayError;
}

uint64_t getEnumTagSinglePayload for Relay.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 15) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v5 = v6 - 16;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Relay.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_100047308 + 4 * byte_10007208A[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10004733C + 4 * byte_100072085[v4]))();
}

uint64_t sub_10004733C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004734CLL);
  return result;
}

uint64_t sub_100047358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047360);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_100047364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004736C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Relay.DiagnosticState.CodingKeys()
{
  return &type metadata for Relay.DiagnosticState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Relay.Session.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Relay.Session.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10004745C + 4 * byte_100072094[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100047490 + 4 * byte_10007208F[v4]))();
}

uint64_t sub_100047490(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047498(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000474A0);
  return result;
}

uint64_t sub_1000474AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000474B4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000474B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000474C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Relay.Session.DiagnosticState.CodingKeys()
{
  return &type metadata for Relay.Session.DiagnosticState.CodingKeys;
}

uint64_t sub_1000474DC(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t sub_10004750C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100047578(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 sub_10004761C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100047630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10004769C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000476DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Relay.Session.DiagnosticState()
{
  sub_100048DAC();
}

uint64_t sub_100047738(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t sub_1000477A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *((_DWORD *)a2 + 11);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 44) = v6;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  v8 = a2[7];
  v7 = a2[8];
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = a2[11];
  v12 = a2[12];
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  v16 = a2[13];
  *(_QWORD *)(a1 + 104) = v16;
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v13 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v13;
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  v14 = a2[18];
  *(_QWORD *)(a1 + 144) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *sub_1000478B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  v10 = *((_DWORD *)a2 + 11);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_DWORD *)a1 + 11) = v10;
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  v11 = a2[7];
  v12 = a1[7];
  a1[7] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  a1[8] = a2[8];
  v13 = a2[9];
  v14 = a1[9];
  a1[9] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[10] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a2[11];
  v18 = a1[11];
  a1[11] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a2[12];
  v20 = a1[12];
  a1[12] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a2[13];
  v22 = a1[13];
  a1[13] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  a1[15] = a2[15];
  v23 = a2[16];
  v24 = a1[16];
  a1[16] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  v25 = a1[18];
  v26 = a2[18];
  a1[18] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v25);
  return a1;
}

void *sub_100047A3C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t *sub_100047A44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease(v5);
  v6 = *((_DWORD *)a2 + 11);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 11) = v6;
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  v7 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v7);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v8 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a1[11]);
  v9 = a1[12];
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  v11 = a2[16];
  v12 = a1[16];
  a1[15] = a2[15];
  a1[16] = v11;
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  v13 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100047B40(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 152))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100047B80(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Relay.DiagnosticState()
{
  sub_100048DAC();
}

uint64_t getEnumTagSinglePayload for TestServer.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100047C78(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100047CC4 + 4 * byte_10007209E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100047CF8 + 4 * byte_100072099[v4]))();
}

uint64_t sub_100047CF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047D08);
  return result;
}

uint64_t sub_100047D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047D1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100047D20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047D28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100047D34(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void _s7SessionC8IdentityV6DomainOMa()
{
  sub_100048DAC();
}

unint64_t sub_100047D50()
{
  unint64_t result;

  result = qword_100093130;
  if (!qword_100093130)
  {
    result = swift_getWitnessTable(&unk_100072664, &unk_100087578);
    atomic_store(result, (unint64_t *)&qword_100093130);
  }
  return result;
}

unint64_t sub_100047D90()
{
  unint64_t result;

  result = qword_100093138;
  if (!qword_100093138)
  {
    result = swift_getWitnessTable(&unk_10007276C, &type metadata for Relay.Session.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093138);
  }
  return result;
}

unint64_t sub_100047DD0()
{
  unint64_t result;

  result = qword_100093140;
  if (!qword_100093140)
  {
    result = swift_getWitnessTable(&unk_100072824, &type metadata for Relay.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093140);
  }
  return result;
}

unint64_t sub_100047E10()
{
  unint64_t result;

  result = qword_100093148;
  if (!qword_100093148)
  {
    result = swift_getWitnessTable(&unk_10007288C, &type metadata for Relay.RelayError);
    atomic_store(result, (unint64_t *)&qword_100093148);
  }
  return result;
}

unint64_t sub_100047E50()
{
  unint64_t result;

  result = qword_100093150;
  if (!qword_100093150)
  {
    result = swift_getWitnessTable(&unk_100072794, &type metadata for Relay.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093150);
  }
  return result;
}

unint64_t sub_100047E90()
{
  unint64_t result;

  result = qword_100093158;
  if (!qword_100093158)
  {
    result = swift_getWitnessTable(&unk_1000727BC, &type metadata for Relay.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093158);
  }
  return result;
}

unint64_t sub_100047ED0()
{
  unint64_t result;

  result = qword_100093160;
  if (!qword_100093160)
  {
    result = swift_getWitnessTable(&unk_1000726DC, &type metadata for Relay.Session.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093160);
  }
  return result;
}

unint64_t sub_100047F10()
{
  unint64_t result;

  result = qword_100093168;
  if (!qword_100093168)
  {
    result = swift_getWitnessTable(&unk_100072704, &type metadata for Relay.Session.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093168);
  }
  return result;
}

void sub_100047F4C(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;

  if (!sub_10001333C(a1))
  {
    v4 = v3;
    v5 = v2;
    v6 = sub_100010FE0(&qword_100092F00);
    v5();
    atomic_store(swift_getWitnessTable(v4, v6), v1);
  }
  sub_10001313C();
}

unint64_t sub_100047FA4()
{
  unint64_t result;

  result = qword_100093188;
  if (!qword_100093188)
  {
    result = swift_getWitnessTable(&unk_1000717B4, &type metadata for Client.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_100093188);
  }
  return result;
}

unint64_t sub_100047FE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093190;
  if (!qword_100093190)
  {
    v1 = sub_100010FE0(&qword_100092F18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100093190);
  }
  return result;
}

void sub_100048044(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!sub_10001333C(a1))
  {
    v3 = v2;
    v4 = sub_100010FE0(&qword_100091880);
    atomic_store(swift_getWitnessTable(v3, v4), v1);
  }
  sub_10001313C();
}

unint64_t sub_100048094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091950;
  if (!qword_100091950)
  {
    v1 = sub_100010FE0(&qword_100091858);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100091950);
  }
  return result;
}

void sub_1000480F0()
{
  unint64_t *v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;

  sub_100048774();
  if (!sub_10001333C(v1))
  {
    v3 = v2;
    sub_100010FE0(&qword_100092F38);
    v3();
    v4 = sub_100049260();
    atomic_store(swift_getWitnessTable(v4, v5), v0);
  }
  sub_100048AEC();
}

unint64_t sub_100048148()
{
  unint64_t result;

  result = qword_1000931A0;
  if (!qword_1000931A0)
  {
    result = swift_getWitnessTable(&unk_1000726B4, &unk_100087418);
    atomic_store(result, (unint64_t *)&qword_1000931A0);
  }
  return result;
}

unint64_t sub_100048184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000931A8;
  if (!qword_1000931A8)
  {
    v1 = sub_100010FE0(&qword_100092F48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000931A8);
  }
  return result;
}

unint64_t sub_1000481E8()
{
  unint64_t result;

  result = qword_1000931B0;
  if (!qword_1000931B0)
  {
    result = swift_getWitnessTable(&unk_100072F2C, &type metadata for Watchdog.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1000931B0);
  }
  return result;
}

uint64_t *sub_100048224(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v12 = a1[16];
  swift_bridgeObjectRetain(a1[18]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_1000482EC(uint64_t *a1)
{
  return sub_10004661C(a1) & 1;
}

uint64_t sub_100048338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

void *sub_100048350@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_100048360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100048370(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

id sub_100048384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001F230(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_1000483E0()
{
  return type metadata accessor for SidecarIdentity(0);
}

void sub_1000483FC()
{
  sub_10001241C(0, 0xF000000000000000);
  sub_100045108();
}

id sub_100048430()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, *(SEL *)(v3 + 1400), v0, v2);
}

uint64_t sub_100048444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000124AC(a1, a2, a3, a4);
}

uint64_t sub_100048450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 96, v3 - 68, v1, v2, a1);
}

uint64_t sub_100048470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10004847C()
{
  _QWORD *v0;
  uint64_t *v1;

  *v0 = 0x8000000000000000;
  return sub_100010F40(v1);
}

uint64_t sub_10004849C()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000484C0()
{
  return type metadata accessor for SidecarIdentity(0);
}

uint64_t sub_1000484C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000484EC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000484F4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100048504(uint64_t a1, unint64_t a2)
{
  return sub_100012430(a1, a2);
}

uint64_t sub_100048544()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004854C()
{
  return swift_willThrow();
}

uint64_t sub_100048558()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100048560(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100015FFC(v3, v4, a3);
}

uint64_t sub_10004856C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_10004857C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100048584()
{
  uint64_t v0;

  return v0 + 312;
}

void sub_1000485B0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000485CC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000485D4()
{
  uint64_t v0;

  return sub_10002EF10(v0, 12);
}

uint64_t sub_1000485FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, v1 + 160, v3, v2, a1);
}

BOOL sub_100048620(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100048634(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100048648(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

id sub_10004865C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, *(SEL *)(v3 + 1400), v1, v2);
}

uint64_t sub_100048670()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_10004869C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v0 + 160, v3, v1, v2);
}

uint64_t sub_1000486C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000486E8()
{
  void *v0;

  return sub_10002F65C(v0);
}

uint64_t sub_1000486FC()
{
  return swift_willThrow();
}

uint64_t sub_100048704()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100048718()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100048720@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100048728()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100048754()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10004875C()
{
  uint64_t v0;

  return swift_endAccess(v0 - 104);
}

uint64_t sub_100048764()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10004876C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100048788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v3 - 104, v2, v1 + 12);
}

uint64_t sub_1000487A8(float a1)
{
  float *v1;

  *v1 = a1;
  return sub_100050048();
}

uint64_t sub_1000487B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 2, a1 + 8);
}

uint64_t sub_1000487C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000487D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 88, v4, v5, a4);
}

uint64_t sub_1000487E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000487FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
}

uint64_t sub_100048804()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
}

uint64_t sub_10004880C()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

uint64_t sub_10004881C()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_10004882C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100048838(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

Swift::Int sub_100048848()
{
  return Hasher._finalize()();
}

_QWORD *sub_100048850(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

BOOL sub_10004885C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10004886C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

id sub_10004887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_10001F230(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a5, v5);
}

uint64_t sub_10004888C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000488AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000488B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _NativeDictionary._delete(at:)(v1, v2, v3, v4, a1);
}

uint64_t sub_1000488D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _NativeDictionary._delete(at:)(v2, v3, v4, v1, a1);
}

uint64_t sub_1000488E8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100048958()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100048960()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
}

uint64_t sub_100048968()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_100048970()
{
  sub_10003EB40();
}

uint64_t sub_100048978()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100048980()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100048988()
{
  uint64_t v0;

  return v0;
}

void sub_100048994()
{
  sub_10003EB40();
}

uint64_t sub_1000489B0@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 96) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 96, v2);
}

uint64_t sub_1000489EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000124B8(a1, a2, a3);
}

uint64_t sub_1000489F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 112, v1, v2, v3 + 22);
}

uint64_t sub_100048A24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048A30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048A40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048A50()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

id sub_100048A58()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, *(SEL *)(v3 + 1400), v0, v2);
}

id sub_100048A6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, *(SEL *)(v3 + 1400), v1, v2);
}

void sub_100048A80(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10003EB64(a1, a2, v2);
}

NSNumber sub_100048A88()
{
  return Int._bridgeToObjectiveC()();
}

id sub_100048A90(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 8);
}

void sub_100048AB4(id a1)
{

}

void sub_100048ABC()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_100048AD8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100048AE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100048B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100048B1C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100048B24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = v6;
  *(_QWORD *)(v5 + 208) = a5;
  *(_DWORD *)(v5 + 200) = a4;
  return result;
}

uint64_t sub_100048B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _NativeDictionary._delete(at:)(v6, v5, a3, a4, a5);
}

void sub_100048B4C()
{
  sub_10003EB40();
}

NSNumber sub_100048B54()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_100048B5C()
{
  return 0;
}

void sub_100048B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  RapportEndpoint.statusFlags.getter(v2, a2);
}

uint64_t sub_100048B74()
{
  return type metadata accessor for RapportRemoteDisplayDevice();
}

void sub_100048B80(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10003EB64(v5 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v4, v3, a3);
}

uint64_t sub_100048B94(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100015FFC(a1, a2, (uint64_t *)(v2 - 104));
}

void sub_100048BA0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100048BB4(uint64_t a1, uint64_t a2)
{
  return sub_1000121EC(a1, a2);
}

uint64_t sub_100048BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_100048BD0()
{
  sub_100033E88();
}

void sub_100048BE4()
{
  void *v0;

  sub_100012430(0, 0xF000000000000000);

}

NSUUID sub_100048BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 192) = v1;
  *(_QWORD *)(v2 + v1) = *(_QWORD *)(v3 + v1);
  return UUID._bridgeToObjectiveC()();
}

uint64_t sub_100048C10@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

void sub_100048C18()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = 542327881;
  *(_QWORD *)(v0 + 240) = 0xE400000000000000;
}

uint64_t sub_100048C30(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void sub_100048C38()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100048C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7);
}

BOOL sub_100048C50@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_100048C5C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100048C80()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_100048CA0()
{
  return 0;
}

uint64_t sub_100048CAC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
}

uint64_t sub_100048CB4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100048CBC()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100048CC4()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_100048CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100048CE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048CFC()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100048D20()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_100048D30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10003EB64(a1, a2, v2);
}

void sub_100048D64()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100048D74()
{
  uint64_t v0;

  return v0;
}

void sub_100048D84(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_100048D8C(uint64_t a1, uint64_t *a2)
{
  return sub_100010F40(a2);
}

uint64_t sub_100048D94(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

BOOL sub_100048D9C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100048DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

_OWORD *sub_100048DC4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;

  return sub_100012600((_OWORD *)(*(_QWORD *)(v0 + 56) + 32 * v2), v1);
}

BOOL sub_100048DD4(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100048E0C()
{
  uint64_t v0;

  return static _DictionaryStorage.allocate(capacity:)(v0);
}

uint64_t sub_100048E1C()
{
  return type metadata accessor for RapportRemoteDisplayDevice();
}

uint64_t sub_100048E24(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return swift_endAccess(va);
}

uint64_t sub_100048E2C(void *a1)
{
  return sub_100012100(a1);
}

uint64_t sub_100048E58()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048E64()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100048E6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_100048E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 72, v5, v4, a4);
}

uint64_t sub_100048E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100048E94()
{
  uint64_t v0;

  return swift_endAccess(v0 - 136);
}

id sub_100048EB0()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 48) + 8 * v0);
}

BOOL sub_100048ED0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

id sub_100048EEC@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_100048EF8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100048F14()
{
  return sub_100027698();
}

unint64_t sub_100048F34(uint64_t a1)
{
  return sub_100046C30(a1);
}

BOOL sub_100048F3C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100048F48()
{
  sub_100045108();
}

uint64_t sub_100048F54()
{
  uint64_t v0;

  return v0;
}

void sub_100048F80()
{
  sub_10003EB40();
}

uint64_t sub_100048F94()
{
  uint64_t v0;

  return v0 + 312;
}

void sub_100048FA8(uint64_t a1)
{
  sub_100024C28(a1);
}

uint64_t sub_100048FB4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100048FBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100048FDC()
{
  uint64_t v0;

  return sub_100012B68(*(_QWORD **)(v0 + 144));
}

uint64_t sub_100048FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100048FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_100048FFC(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_100049008()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_100049010()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1000470BC(v1, v0);
}

uint64_t sub_10004901C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004903C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100049048()
{
  uint64_t v0;

  return v0;
}

void sub_100049054(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_10003EB64(v3, v4, a3);
}

uint64_t sub_100049060()
{
  _QWORD *v0;

  return sub_100012B68(v0);
}

void sub_100049068(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100049074()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100049080()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001241C(v1, v0);
}

uint64_t sub_10004908C()
{
  uint64_t *v0;

  return sub_100010F40(v0);
}

uint64_t sub_100049094()
{
  uint64_t v0;

  return v0;
}

id sub_1000490A0()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_1000490AC(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

void sub_1000490B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

_QWORD *sub_1000490C4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_1000490CC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x12u);
}

uint64_t sub_1000490D8(uint64_t a1, uint64_t a2)
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
}

id sub_1000490E4()
{
  void *v0;

  return v0;
}

uint64_t sub_1000490EC()
{
  uint64_t v0;

  return v0;
}

void sub_100049120(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10004912C(uint64_t a1, uint64_t *a2)
{
  return sub_100010FE0(a2);
}

unint64_t sub_100049138(uint64_t a1, uint64_t a2)
{
  return sub_1000398E4(a1, a2);
}

uint64_t sub_100049140(uint64_t a1)
{
  uint64_t v1;

  return xpc_copy_entitlement_for_token(a1, v1 - 112);
}

void sub_100049148(uint64_t a1)
{
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t, void **);

  sub_100024FB8(a1, v1, v2);
}

void sub_100049154(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;

  sub_1000183F4(a1, v3, a3);
}

id sub_10004915C()
{
  void *v0;

  return v0;
}

uint64_t sub_100049164(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100049170()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_100049178()
{
  return 0;
}

uint64_t sub_100049184()
{
  return sub_100012430(0, 0xF000000000000000);
}

uint64_t sub_100049190()
{
  return type metadata accessor for System();
}

uint64_t sub_100049198()
{
  return _s7SessionC8IdentityVMa(0);
}

uint64_t sub_1000491BC()
{
  return sub_100050464();
}

unint64_t sub_1000491C4()
{
  return sub_100046CBC();
}

uint64_t sub_1000491CC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000491D4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100012430(v0, v1);
}

uint64_t sub_1000491E0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000491E8()
{
  return Logger.logObject.getter();
}

void sub_1000491F4(uint64_t a1)
{
  uint64_t v1;

  sub_10004FDE8(a1, v1);
}

unint64_t sub_1000491FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 232) = *(_QWORD *)(v2 + v0);
  return sub_10001216C();
}

uint64_t sub_100049208()
{
  uint64_t v0;

  return v0;
}

void sub_10004921C()
{
  sub_10003EB40();
}

void sub_100049224(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  uint64_t v3;

  sub_100024FB8(v3, a2, a3);
}

uint64_t sub_10004922C()
{
  uint64_t *v0;

  return sub_100010F40(v0);
}

void sub_100049234(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000470BC(v2, a2);
}

uint64_t sub_10004923C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100015FFC(v3, v4, a3);
}

void sub_100049248(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_1000456D4(v3, v4, a3);
}

NSString sub_100049254()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100049260()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004926C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100015FFC(v3, v4, a3);
}

void sub_100049278(uint64_t a1)
{
  sub_100035338(a1);
}

uint64_t sub_100049280(uint64_t a1)
{
  return String.init<A>(_:radix:uppercase:)(a1, 16, 1);
}

uint64_t sub_10004928C()
{
  uint64_t v0;

  v0 = sub_100012DA8();
  sub_100006CC4(v0, qword_10009A1E8);
  sub_100006CAC(v0, (uint64_t)qword_10009A1E8);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0x65746E6573657270, 0xE900000000000072);
}

uint64_t sub_100049300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v2 = sub_100012DA8();
  v3 = sub_100006CAC(v2, (uint64_t)qword_10009A1E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_10004936C()
{
  sub_100049384((void (*)(void))sub_100007310);
}

void sub_100049378()
{
  sub_100049384((void (*)(void))sub_10000731C);
}

void sub_100049384(void (*a1)(void))
{
  a1();
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100033A48();
}

void sub_1000493DC(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v3;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100033468();
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_100049610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(_QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004A098();
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v15 = sub_10001F230(v13, v14, -103, 0, 0, 0);
  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v16 = sub_100006CAC(v9, (uint64_t)qword_10009A1E8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16, v9);
  v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  sub_1000183F4(sub_10004A0D4, v19, sub_100020DE4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v20 = v15;
  v21 = (void *)_convertErrorToNSError(_:)(v20);
  ((void (**)(_QWORD, void *))a8)[2](a8, v21);

  _Block_release(a8);
}

uint64_t sub_1000497CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  uint64_t v11;

  v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
  v6._countAndFlagsBits = 541346128;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  String.append(_:)(v9);
  return v11;
}

void sub_100049A2C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[5];
  uint64_t v28;

  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v9 = sub_100012DA8();
  v10 = sub_100006CAC(v9, (uint64_t)qword_10009A1E8);
  v11 = v4;
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = (char *)v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    sub_10004A184();
    v15 = sub_10004A16C();
    aBlock[0] = v15;
    *(_DWORD *)v10 = 67109378;
    v25 = a4;
    v16 = a3;
    v17 = *(_DWORD *)&v12[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

    LODWORD(v26) = v17;
    sub_10004A17C((uint64_t)&v26, (uint64_t)&v26 + 4, v18, v10 + 8);

    *(_WORD *)(v10 + 8) = 2082;
    swift_bridgeObjectRetain(a2);
    v26 = sub_100015FFC(a1, a2, aBlock);
    a3 = v16;
    a4 = v25;
    sub_10004A17C((uint64_t)&v26, (uint64_t)aBlock, v19, v10 + 18);
    swift_bridgeObjectRelease_n(a2, 3);
    sub_10004A15C((void *)&_mh_execute_header, v13, v20, "PID %d: Service Presenter Starting Service Extension '%{public}s'");
    sub_10004A13C((uint64_t)&type metadata for Any);
    sub_100006D04(v15);
    sub_100006D04(v10);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v21 = (void *)sub_100009F98();
  v22 = String._bridgeToObjectiveC()();
  aBlock[4] = a3;
  v28 = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100021604;
  aBlock[3] = (uint64_t)&unk_1000876C0;
  v23 = _Block_copy(aBlock);
  v24 = v28;
  swift_retain(a4);
  swift_release(v24);
  objc_msgSend(v21, "relayPresenterStartServiceExtension:completion:", v22, v23);
  _Block_release(v23);
  swift_unknownObjectRelease(v21);

}

void sub_100049D20(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v7 = sub_100012DA8();
  sub_100006CAC(v7, (uint64_t)qword_10009A1E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = v1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    sub_10004A184();
    v20[1] = a1;
    v11 = sub_10004A16C();
    v22 = v11;
    *(_DWORD *)a1 = 67109378;
    LODWORD(v21) = *(_DWORD *)&v8[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, a1 + 4, a1 + 8);

    *(_WORD *)(a1 + 8) = 2082;
    v13 = UUID.uuidString.getter(v12);
    v15 = v14;
    v21 = sub_100015FFC(v13, v14, &v22);
    sub_10004A17C((uint64_t)&v21, (uint64_t)&v22, v16, a1 + 18);
    swift_bridgeObjectRelease(v15);
    sub_10004A14C();
    sub_10004A15C((void *)&_mh_execute_header, v9, v17, "PID %d: Service Presenter Service Extension Ready '%{public}s'");
    sub_10004A13C((uint64_t)&type metadata for Any);
    sub_100006D04(v11);
    sub_100006D04(a1);
  }
  else
  {

    sub_10004A14C();
  }

  v18 = (void *)sub_100009F98();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "relayPresenterServiceExtensionReady:", isa);
  swift_unknownObjectRelease(v18);

}

id sub_100049FC8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServicePresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServicePresenter()
{
  return objc_opt_self(_TtC12SidecarRelay16ServicePresenter);
}

uint64_t sub_10004A01C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004A040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004A050(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004A058(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100010F40(&qword_1000918F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10004A098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091750;
  if (!qword_100091750)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100091750);
  }
  return result;
}

uint64_t sub_10004A0D4()
{
  uint64_t v0;

  return sub_1000497CC(*(_QWORD *)(v0 + 16), 25, 0xD000000000000015, (void *)0x800000010006FE00);
}

uint64_t sub_10004A108()
{
  uint64_t v0;

  return sub_1000497CC(*(_QWORD *)(v0 + 16), 39, 0xD000000000000023, (void *)0x800000010006FE20);
}

uint64_t sub_10004A13C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_10004A14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_10004A15C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0x12u);
}

uint64_t sub_10004A16C()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_10004A17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10004A184()
{
  return swift_slowAlloc(18, -1);
}

void sub_10004A190(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  _QWORD v19[2];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v19 - v7;
  v9 = sub_100010F40(&qword_1000918F8);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = Set.init(minimumCapacity:)(v12, v2, v13);
  v19[0] = a1;
  v19[1] = v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = v19[0] + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v11, v16, v2);
      sub_10004DF68((uint64_t)v11, 0);
      if (sub_1000124B8((uint64_t)v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100042E3C();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v16 += v17;
      if (!--v15)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_10004DF68((uint64_t)v11, 1);
  }
  swift_bridgeObjectRelease(v19[0]);
  sub_100012D28();
}

uint64_t sub_10004A334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;

  v2 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100043058(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }
  else
  {
    v7 = v2;
    swift_bridgeObjectRelease(a1);
  }
  return v7;
}

void sub_10004A3E4()
{
  void *v0;
  os_log_type_t v1;
  id v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  id v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  char v65[24];
  void **aBlock;
  unint64_t v67;
  void (*v68)(uint64_t, void *, void *);
  void *v69;
  void (*v70)(void *, uint64_t);
  uint64_t v71;
  char v72[176];
  uint64_t v73;

  if ((byte_1000931F0 & 1) == 0)
  {
    v2 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
    if (v2)
    {
      v61 = v2;
      if (qword_100091308 != -1)
        swift_once(&qword_100091308, sub_1000504F8);
      v62 = v0;
      v3 = qword_10009A210;
      swift_retain(qword_10009A210);
      v4 = sub_100050964();
      swift_release(v3);
      if (qword_1000912F0 != -1)
        swift_once(&qword_1000912F0, sub_10004928C);
      v5 = sub_100012DA8();
      v6 = sub_100006CAC(v5, (uint64_t)qword_10009A1E8);
      Logger.logObject.getter(v6);
      v7 = sub_100012FF0();
      if (sub_10004DF1C(v7))
      {
        v8 = (uint8_t *)sub_100006D24(12);
        v10 = sub_100006D24(32);
        *(_DWORD *)v8 = 136446210;
        aBlock = (void **)v10;
        if ((v4 & 1) != 0)
          v11 = 0x64656B636F4CLL;
        else
          v11 = 0x64656B636F6C6E55;
        sub_10004DF60(v11, v9, (uint64_t *)&aBlock);
        sub_10004DF4C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, v13, v8 + 4, v8 + 12);
        sub_10001300C();
        _os_log_impl((void *)&_mh_execute_header, v6, v1, "=== Launching Service Presenter (Screen %{public}s) ===", v8, 0xCu);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        sub_100006D04(v10);
        sub_100006D04((uint64_t)v8);
      }

      v14 = sub_100010F40(&qword_1000936A0);
      inited = swift_initStackObject(v14, v72);
      *(_OWORD *)(inited + 16) = xmmword_1000729F0;
      aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyActivateSuspended);
      v67 = v16;
      sub_100020ED8((uint64_t)&aBlock);
      *(_QWORD *)(inited + 96) = &type metadata for Bool;
      *(_BYTE *)(inited + 72) = 1;
      aBlock = (void **)0xD000000000000031;
      v67 = 0x80000001000701A0;
      sub_100020ED8((uint64_t)&aBlock);
      *(_QWORD *)(inited + 168) = &type metadata for Bool;
      *(_BYTE *)(inited + 144) = 1;
      v17 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v73 = v17;
      if (qword_1000912B8 != -1)
        swift_once(&qword_1000912B8, sub_1000265C8);
      v18 = *(NSObject **)(qword_10009A190 + 56);
      if ((-[NSObject respondsToSelector:](v18, "respondsToSelector:", "overridePresenterLaunchOptions:") & 1) != 0)
      {
        swift_unknownObjectRetain(v18);
        sub_10001301C();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v20 = -[NSObject overridePresenterLaunchOptions:](v18, "overridePresenterLaunchOptions:", isa);

        v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
        swift_unknownObjectRelease(v18);
        sub_10001300C();

        sub_10004DF44(v22);
        v23 = sub_100012FF0();
        if (sub_10004DF1C(v23))
        {
          v24 = (uint8_t *)sub_100006D24(2);
          *(_WORD *)v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)&type metadata for AnyHashable, "Overriding launch options", v24, 2u);
          sub_100006D04((uint64_t)v24);
        }

        sub_10001300C();
        v73 = v21;
      }
      else
      {
        v21 = v17;
      }
      v27 = sub_100006C74(0, (unint64_t *)&unk_1000936A8, FBSOpenApplicationOptions_ptr);
      v28 = swift_bridgeObjectRetain(v21);
      v29 = sub_10004B560(v28);
      sub_10004DF44((uint64_t)v29);
      v30 = sub_100012FF0();
      if (os_log_type_enabled(v27, v30))
      {
        v31 = sub_100006D24(32);
        v60 = sub_100006D24(64);
        aBlock = (void **)v60;
        *(_DWORD *)v31 = 136446723;
        sub_100015FFC(0xD000000000000011, 0x800000010006E4B0, (uint64_t *)&aBlock);
        sub_10004DF4C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33, v31 + 4, v34);
        *(_WORD *)(v31 + 12) = 2048;
        v35 = swift_beginAccess(&v73, v65, 0, 0);
        v36 = v73;
        sub_10004DEFC(v35, v37, v38, v31 + 22, v39, v40, v41, v42, v56, v58);
        *(_WORD *)(v31 + 22) = 2081;
        v43 = swift_bridgeObjectRetain(v36);
        v44 = Dictionary.description.getter(v43, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
        swift_bridgeObjectRelease(v36);
        v64 = sub_10004DF60(v44, v45, (uint64_t *)&aBlock);
        sub_10004DEFC(v64, v46, v47, v31 + 32, v48, v49, v50, v51, v57, v59);
        sub_10001300C();
        _os_log_impl((void *)&_mh_execute_header, v27, v30, "Opening application with bundle identifier [%{public}s] using [%ld] options [%{private}s]", (uint8_t *)v31, 0x20u);
        swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
        sub_100006D04(v60);
        sub_100006D04(v31);
      }

      v52 = String._bridgeToObjectiveC()();
      v53 = swift_allocObject(&unk_100087720, 24, 7);
      *(_QWORD *)(v53 + 16) = v62;
      v70 = sub_10004DB6C;
      v71 = v53;
      aBlock = _NSConcreteStackBlock;
      v67 = 1107296256;
      v68 = sub_10004B5E8;
      v69 = &unk_100087738;
      v54 = _Block_copy(&aBlock);
      swift_release(v71);
      objc_msgSend(v61, "openApplication:withOptions:completion:", v52, v29, v54);
      _Block_release(v54);

      byte_1000931F0 = 1;
      v55 = v73;

      swift_bridgeObjectRelease(v55);
    }
    else
    {
      sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      v63 = sub_10001F230(v25, v26, -999, 0, 0, 0);
      sub_10004ABC0(0, (uint64_t)v63);

    }
  }
}

uint64_t sub_10004AAA4()
{
  void *v0;
  _BYTE v2[24];

  sub_10004DEF0((uint64_t)&unk_10009A208, (uint64_t)v2);
  objc_setAssociatedObject(v0, &unk_10009A208, 0, (void *)0x301);
  return swift_endAccess(v2);
}

uint64_t sub_10004AAF4()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10004A334((uint64_t)&off_1000854F0);
  result = sub_10004AB28((uint64_t)&off_100085580, v0);
  qword_10009A200 = result;
  return result;
}

uint64_t sub_10004AB28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100043058(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }
  else
  {
    v7 = a2;
    swift_bridgeObjectRelease(a1);
  }
  return v7;
}

void sub_10004ABC0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[12];
  unsigned int v19;
  uint64_t v20;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_getErrorValue(a2, v18, v17);
    v8 = sub_10004B16C(v17[1], v17[2]);
    if (qword_1000912F0 != -1)
      swift_once(&qword_1000912F0, sub_10004928C);
    v9 = sub_100006CAC(v4, (uint64_t)qword_10009A1E8);
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    __chkstk_darwin(v10);
    *(&v16 - 2) = v8;
    sub_1000183F4((uint64_t (*)(void))sub_10004B544, 0, sub_100020A74);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (qword_1000912B8 != -1)
      swift_once(&qword_1000912B8, sub_1000265C8);
    sub_100033200();
    swift_errorRelease(v8);
  }
  else
  {
    if (qword_1000912F0 != -1)
      swift_once(&qword_1000912F0, sub_10004928C);
    sub_100006CAC(v4, (uint64_t)qword_10009A1E8);
    v11 = a1;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 67109120;
      if (a1)
        v15 = objc_msgSend(v11, "pid");
      else
        v15 = 0;
      v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 8);

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Service Presenter PID %d Launched", v14, 8u);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
  byte_1000931F0 = 0;
}

uint64_t sub_10004AE40()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  id v35;
  __int128 v36;
  uint64_t v37;

  v1 = sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v2 = sub_10004DBA4();
  v3 = v0;
  v4 = _getErrorEmbeddedNSError<A>(_:)(&v36, v1, v2);
  if (v4)
  {
    v5 = v4;

  }
  else
  {
    v5 = swift_allocError(v1, v2, 0, 0);
    *v6 = v36;
  }
  v7 = (void *)_convertErrorToNSError(_:)(v5);
  swift_errorRelease(v5);
  v8 = objc_msgSend(v7, "domain");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationServiceErrorDomain);
  if (v12 == v9 && v13 == v11)
  {
    swift_bridgeObjectRelease(v11);
    goto LABEL_16;
  }
  v15 = v13;
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v9, v11, 0);
  swift_bridgeObjectRelease(v15);
  if ((v16 & 1) != 0)
  {
LABEL_16:
    swift_bridgeObjectRelease(v11);
    if (objc_msgSend(v7, "code") != (id)1)
      goto LABEL_24;
    v22 = objc_msgSend(v7, "userInfo");
    v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v22, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v26 = v25;
    sub_100021714(v24, v25, v23, &v36);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v26);
    if (!v37)
    {
      sub_100020990((uint64_t)&v36);
      goto LABEL_24;
    }
    if ((swift_dynamicCast(&v35, &v36, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
      goto LABEL_24;
    v27 = v35;
    v28 = sub_10004AE40();

    goto LABEL_27;
  }
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationErrorDomain);
  if (v17 == v9 && v18 == v11)
  {
    swift_bridgeObjectRelease_n(v11, 2);
    goto LABEL_22;
  }
  v20 = v18;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v9, v11, 0);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v20);
  if ((v21 & 1) != 0)
  {
LABEL_22:
    if (objc_msgSend(v7, "code") != (id)7)
      goto LABEL_24;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v28 = (uint64_t)sub_10001F230(v29, v30, -202, 0, 0, 0);
LABEL_27:

    return v28;
  }
LABEL_24:
  *(_QWORD *)&v36 = v3;
  v31 = v3;
  v32 = _getErrorEmbeddedNSError<A>(_:)(&v36, v1, v2);
  if (!v32)
  {
    v28 = swift_allocError(v1, v2, 0, 0);
    *v33 = v36;
    goto LABEL_27;
  }
  v28 = v32;

  return v28;
}

uint64_t sub_10004B16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  id v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v44 - v10, v3, a1);
  v13 = _getErrorEmbeddedNSError<A>(_:)(v11, a1, a2);
  v44 = v3;
  if (v13)
  {
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a1);
  }
  else
  {
    v14 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v11, a1);
  }
  v16 = (void *)_convertErrorToNSError(_:)(v14);
  swift_errorRelease(v14);
  v17 = objc_msgSend(v16, "domain");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationServiceErrorDomain);
  if (v21 == v18 && v22 == v20)
  {
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v24 = v22;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v18, v20, 0);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) == 0)
    {
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationErrorDomain);
      if (v26 == v18 && v27 == v20)
      {
        swift_bridgeObjectRelease_n(v20, 2);
      }
      else
      {
        v29 = v27;
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v18, v20, 0);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v29);
        if ((v30 & 1) == 0)
          goto LABEL_24;
      }
      if (objc_msgSend(v16, "code", v44) == (id)7)
      {
        sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
        v38 = (uint64_t)sub_10001F230(v39, v40, -202, 0, 0, 0);
        goto LABEL_27;
      }
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease(v20);
  if (objc_msgSend(v16, "code") == (id)1)
  {
    v31 = objc_msgSend(v16, "userInfo");
    v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v35 = v34;
    sub_100021714(v33, v34, v32, &v46);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v32);
    if (v47)
    {
      v36 = sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      if ((swift_dynamicCast(&v45, &v46, (char *)&type metadata for Any + 8, v36, 6) & 1) != 0)
      {
        v37 = v45;
        v38 = sub_10004AE40();

        goto LABEL_27;
      }
    }
    else
    {
      sub_100020990((uint64_t)&v46);
    }
  }
LABEL_24:
  v12(v9, v44, a1);
  v41 = _getErrorEmbeddedNSError<A>(_:)(v9, a1, a2);
  if (v41)
  {
    v38 = v41;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  else
  {
    v38 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v42, v9, a1);
  }
LABEL_27:

  return v38;
}

unint64_t sub_10004B544()
{
  return 0xD00000000000002ALL;
}

id sub_10004B560(uint64_t a1)
{
  uint64_t v1;
  NSDictionary v3;
  id v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "optionsWithDictionary:", v3.super.isa);

  return v4;
}

void sub_10004B5E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10004B65C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  char *v10;
  void *v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion;
  if (*(_QWORD *)(*(_QWORD *)(v2
                             + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion)
                 + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations) != a1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger);
    v9 = objc_allocWithZone((Class)_s15AppPresentationC18SecureAppAssertionCMa(0));
    v10 = sub_10004CBBC((uint64_t)v7, a1);
    v11 = *(void **)(v2 + v8);
    *(_QWORD *)(v2 + v8) = v10;

  }
}

uint64_t sub_10004B724(char *a1, uint64_t a2, unint64_t a3, int a4, void (*a5)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v6 = v5;
  v44 = a5;
  v11 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = ((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  *(_QWORD *)(v6
            + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion) = 0;
  v17 = swift_bridgeObjectRetain_n(a3, 2);
  v47 = a1;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(18, -1);
    v41 = swift_slowAlloc(32, -1);
    v42 = v14;
    v49 = v41;
    *(_DWORD *)v20 = 67109378;
    LODWORD(v48) = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v20 + 4, v20 + 8);
    *(_WORD *)(v20 + 8) = 2082;
    swift_bridgeObjectRetain(a3);
    v48 = sub_100015FFC(a2, a3, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v20 + 10, v20 + 18);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Showing Service Presenter PID %d %{public}s", (uint8_t *)v20, 0x12u);
    v21 = v41;
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    v14 = v42;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
  }

  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a4;
  v22 = v6
      + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger;
  v23 = a2;
  v43 = a2;
  v24 = v46;
  v25 = v47;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v26(v6 + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger, (uint64_t)v47, v11);
  v26((uint64_t)v16, v22, v11);
  v27 = objc_allocWithZone((Class)_s15AppPresentationC18SecureAppAssertionCMa(0));
  swift_bridgeObjectRetain(a3);
  *(_QWORD *)(v6
            + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion) = sub_10004CBBC((uint64_t)v16, (uint64_t)v44);
  v26((uint64_t)v16, (uint64_t)v25, v11);
  v28 = _s15AppPresentationC20AppSwitcherAssertionCMa(0);
  v29 = (char *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v26((uint64_t)v14, (uint64_t)v16, v11);
  swift_bridgeObjectRetain(a3);
  sub_10004BEC0(v23, a3, v14, v29, (uint64_t)&unk_100087888, (uint64_t)sub_10004DD0C, (uint64_t)&unk_1000878A0, (void (*)(NSString, void *))&SBSRequestAppSwitcherAppearanceForHiddenApplication);
  v31 = v30;
  v44 = *(void (**)(char *, uint64_t))(v24 + 8);
  v44(v16, v11);
  *(_QWORD *)(v6 + 40) = v31;
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v32 = (void *)static OS_dispatch_queue.main.getter();
  v33 = swift_allocObject(&unk_100087798, 24, 7);
  swift_weakInit(v33 + 16, v6);
  v34 = v47;
  v26((uint64_t)v16, (uint64_t)v47, v11);
  v35 = *(unsigned __int8 *)(v24 + 80);
  v36 = (v35 + 40) & ~v35;
  v37 = (char *)swift_allocObject(&unk_1000877C0, v36 + v45, v35 | 7);
  v38 = v43;
  *((_QWORD *)v37 + 2) = v33;
  *((_QWORD *)v37 + 3) = v38;
  *((_QWORD *)v37 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v37[v36], v16, v11);
  swift_retain(v33);
  OS_dispatch_queue.after(_:closure:)();

  swift_release(v37);
  v44(v34, v11);
  swift_release(v33);
  return v6;
}

uint64_t sub_10004BB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v24[-v13 - 8];
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v16 = result;
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v17(v14, a4, v8);
    v18 = _s15AppPresentationC21SuggestedAppAssertionCMa(0);
    v19 = (char *)swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v17((char *)v12, (uint64_t)v14, v8);
    swift_bridgeObjectRetain(a3);
    sub_10004BEC0(a2, a3, v12, v19, (uint64_t)&unk_1000877E8, (uint64_t)sub_10004DD0C, (uint64_t)&unk_100087800, (void (*)(NSString, void *))&SBSRequestSuggestedApplication);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v22 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion);
    *(_QWORD *)(v16
              + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion) = v21;
    swift_release(v16);
    return swift_release(v22);
  }
  return result;
}

uint64_t sub_10004BC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  v1 = v0;
  v2 = v0
     + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger;
  v3 = swift_retain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v9 = *(_DWORD *)(v1 + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 8);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Dismissing Service Presenter PID %d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 40));
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
  objc_release(*(id *)(v1
                     + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion));
  swift_release(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion));
  return v1;
}

uint64_t sub_10004BDD8()
{
  return sub_10004C9E0(sub_10004BC90);
}

uint64_t sub_10004BDE4()
{
  return _s15AppPresentationCMa(0);
}

uint64_t _s15AppPresentationCMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100093238, (uint64_t)&_s15AppPresentationCMn);
}

uint64_t sub_10004BE00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100072A28;
  v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_100072A40;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004BEAC()
{
  return 0x296C6C756E28;
}

void sub_10004BEC0(uint64_t a1, uint64_t a2, NSObject *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(NSString, void *))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, NSObject *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  NSString v43;
  void *v44;
  uint64_t v45;
  uint64_t (*v46)(char *, NSObject *);
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(NSString, void *);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t aBlock[5];
  uint64_t v60;

  v54 = a7;
  v55 = a8;
  v52 = a5;
  v53 = a6;
  v12 = sub_100012DA8();
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  __chkstk_darwin(v12);
  v50 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v14;
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = a1;
  v56 = a1;
  *((_QWORD *)a4 + 4) = a2;
  v15 = *(uint64_t (**)(char *, NSObject *))(v14 + 16);
  v49 = v16;
  v17 = v15(&a4[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation12AppAssertion_logger], a3);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 128))(v17);
  v20 = v19;
  swift_bridgeObjectRetain_n(a2, 3);
  v57 = v20;
  v21 = swift_bridgeObjectRetain_n(v20, 2);
  v22 = a3;
  Logger.logObject.getter(v21);
  v23 = sub_100012FF0();
  v24 = os_log_type_enabled(a3, v23);
  v48 = v18;
  if (v24)
  {
    v25 = sub_100006D24(22);
    v47 = a3;
    v26 = v25;
    v27 = sub_100006D24(64);
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136446466;
    v46 = v15;
    v28 = v57;
    swift_bridgeObjectRetain(v57);
    v58 = sub_100015FFC(v18, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v28, 3);
    *(_WORD *)(v26 + 12) = 2082;
    sub_10001301C();
    v58 = sub_10004DF60(v56, v29, aBlock);
    v15 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Acquiring '%{public}s' for '%{public}s'", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    sub_100006D04(v27);
    v30 = v26;
    a3 = v47;
    sub_100006D04(v30);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(v57, 2);
  }

  v32 = v49;
  v31 = v50;
  ((void (*)(char *, NSObject *, uint64_t))v15)(v50, a3, v49);
  v33 = v51;
  v34 = *(unsigned __int8 *)(v51 + 80);
  v35 = (v34 + 24) & ~v34;
  v36 = (v13 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(v52, v37 + 16, v34 | 7);
  *(_QWORD *)(v38 + 16) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + v35, v31, v32);
  v39 = (uint64_t *)(v38 + v36);
  v41 = v56;
  v40 = v57;
  *v39 = v48;
  v39[1] = v40;
  v42 = (uint64_t *)(v38 + v37);
  *v42 = v41;
  v42[1] = a2;
  sub_10001301C();
  swift_retain(a4);
  v43 = String._bridgeToObjectiveC()();
  aBlock[4] = v53;
  v60 = v38;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10004CAB8;
  aBlock[3] = v54;
  v44 = _Block_copy(aBlock);
  v45 = v60;
  swift_retain(v38);
  swift_release(v45);
  v55(v43, v44);
  _Block_release(v44);
  sub_10001300C();
  swift_release(v38);

  (*(void (**)(NSObject *, uint64_t))(v33 + 8))(a3, v32);
  sub_100012D28();
}

uint64_t sub_10004C214(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v40 = a6;
  v41 = a7;
  v38 = a4;
  v39 = a5;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v42 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  v18 = *(unsigned __int8 *)(v15 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_100087838, v21 + 16, v18 | 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v19, v17, v14);
  v23 = (_QWORD *)(v22 + v20);
  v24 = v39;
  *v23 = v38;
  v23[1] = v24;
  v25 = (_QWORD *)(v22 + v21);
  v26 = v41;
  *v25 = v40;
  v25[1] = v26;
  aBlock[4] = sub_10004DD68;
  v49 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100087850;
  v27 = _Block_copy(aBlock);
  v28 = v49;
  v29 = a1;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  swift_retain(a2);
  v30 = swift_release(v28);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100005CC0((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100010F40((uint64_t *)&unk_100092170);
  v33 = sub_10001C6B8();
  v35 = v43;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v44, v31);
  v36 = (void *)v42;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v35, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v46);
}

void sub_10004C4D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  NSObject *oslog;
  uint64_t v22;
  uint64_t v23;

  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  v13 = a2;

  swift_bridgeObjectRetain_n(a5, 2);
  v14 = swift_bridgeObjectRetain_n(a7, 2);
  v15 = Logger.logObject.getter(v14);
  oslog = v15;
  if (a2)
  {
    LOBYTE(v17) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, (os_log_type_t)v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v23 = v19;
      *(_DWORD *)v18 = 136446466;
      swift_bridgeObjectRetain(a5);
      v22 = sub_100015FFC(a4, a5, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain(a7);
      v22 = sub_100015FFC(a6, a7, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease_n(a7, 3);
      v20 = "Acquired '%{public}s' for '%{public}s'";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v17, v20, (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      return;
    }
  }
  else
  {
    v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(oslog, (os_log_type_t)v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v23 = v19;
      *(_DWORD *)v18 = 136446466;
      swift_bridgeObjectRetain(a5);
      v22 = sub_100015FFC(a4, a5, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain(a7);
      v22 = sub_100015FFC(a6, a7, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease_n(a7, 3);
      v20 = "Failed to Acquire '%{public}s' for '%{public}s'";
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n(a7, 2);
  swift_bridgeObjectRelease_n(a5, 2);

}

_QWORD *sub_10004C7BC()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = (char *)v0
     + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation12AppAssertion_logger;
  v3 = swift_retain_n(v0, 4);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = (*(uint64_t (**)(void))(*v0 + 128))();
    v10 = v9;
    v17 = sub_100015FFC(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v6 + 12) = 2082;
    v11 = v1[3];
    v12 = v1[4];
    swift_bridgeObjectRetain(v12);
    v17 = sub_100015FFC(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 14, v6 + 22);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalidating '%s' for '%{public}s'", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v0, 4);
  }
  v13 = (void *)v1[2];
  if (v13)
  {
    objc_msgSend(v13, "invalidate");
    v14 = (void *)v1[2];
  }
  else
  {
    v14 = 0;
  }

  swift_bridgeObjectRelease(v1[4]);
  v15 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v2, v15);
  return v1;
}

uint64_t sub_10004C9D4()
{
  return sub_10004C9E0((uint64_t (*)(void))sub_10004C7BC);
}

uint64_t sub_10004C9E0(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_10004CA00()
{
  return _s15AppPresentationC12AppAssertionCMa(0);
}

uint64_t _s15AppPresentationC12AppAssertionCMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100093360, (uint64_t)&_s15AppPresentationC12AppAssertionCMn);
}

uint64_t sub_10004CA1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100072A40;
  v4[1] = &unk_100072A28;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10004CA9C()
{
  return 0xD000000000000014;
}

void sub_10004CAB8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_10004CB10()
{
  return _s15AppPresentationC20AppSwitcherAssertionCMa(0);
}

uint64_t _s15AppPresentationC20AppSwitcherAssertionCMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100093440, (uint64_t)&_s15AppPresentationC20AppSwitcherAssertionCMn);
}

unint64_t sub_10004CB30()
{
  return 0xD000000000000015;
}

uint64_t sub_10004CB4C()
{
  _QWORD *v0;

  v0 = sub_10004C7BC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10004CB6C()
{
  return _s15AppPresentationC21SuggestedAppAssertionCMa(0);
}

uint64_t _s15AppPresentationC21SuggestedAppAssertionCMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100093528, (uint64_t)&_s15AppPresentationC21SuggestedAppAssertionCMn);
}

uint64_t sub_10004CB88(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 144);
}

char *sub_10004CBBC(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  *(_QWORD *)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion] = 0;
  v6 = &v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_logger];
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(_QWORD *)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations] = a2;
  v14.receiver = v2;
  v14.super_class = ObjectType;
  v9 = (char *)objc_msgSendSuper2(&v14, "init");
  sub_10004CCD0();
  v10 = *(void **)&v9[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion];
  *(_QWORD *)&v9[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion] = v11;

  v12 = objc_msgSend((id)objc_opt_self(BLSBacklight), "sharedBacklight");
  objc_msgSend(v12, "addObserver:", v9);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

void sub_10004CCD0()
{
  void *v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void **v10;
  _QWORD v11[4];
  uint64_t v12;

  v1 = v0;
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v4 = 134217984;
    v10 = *(void ***)&v1[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v4 + 4, v4 + 12);

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Acquiring Secure App Assertion (%lx)", v4, 0xCu);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {

  }
  v5 = (void *)objc_opt_self(SBSSecureAppAssertion);
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations];
  v7 = swift_allocObject(&unk_1000878D8, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16, v1);
  v11[3] = sub_10004DE40;
  v12 = v7;
  v10 = _NSConcreteStackBlock;
  v11[0] = 1107296256;
  v11[1] = sub_100021604;
  v11[2] = &unk_1000878F0;
  v8 = _Block_copy(&v10);
  swift_release(v12);
  v9 = objc_msgSend(v5, "acquireSecureAppAssertionWithType:supportedOrientations:errorHandler:", 6, v6, v8);
  _Block_release(v8);
  if (!v9)
    __break(1u);
}

id sub_10004CE88()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  void *v7;
  uint64_t v9;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v9 = *(_QWORD *)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating Secure App Assertion (%lx)", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v6 = objc_msgSend((id)objc_opt_self(BLSBacklight), "sharedBacklight");
  objc_msgSend(v6, "removeObserver:", v2);

  v7 = *(void **)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion];
  if (v7)
    objc_msgSend(v7, "invalidate");
  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "dealloc");
}

uint64_t sub_10004D068()
{
  return _s15AppPresentationC18SecureAppAssertionCMa(0);
}

uint64_t _s15AppPresentationC18SecureAppAssertionCMa(uint64_t a1)
{
  return sub_100034E9C(a1, qword_100093688, (uint64_t)&_s15AppPresentationC18SecureAppAssertionCMn);
}

uint64_t sub_10004D084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = swift_allocObject(&unk_100087928, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10004DE74;
  v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100087940;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain(a2);
  swift_errorRetain(a1);
  v14 = swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100005CC0((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100010F40((uint64_t *)&unk_100092170);
  v17 = sub_10001C6B8();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v19);
}

void sub_10004D290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10004D2E8(a2);

  }
}

void sub_10004D2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = v1;
  if (a1)
  {
    swift_errorRetain(a1);
    sub_1000183F4((uint64_t (*)(void))sub_10004D428, 0, sub_100020DE4);
    swift_errorRelease(a1);
  }
  else
  {
    v4 = Logger.logObject.getter(0);
    v6 = static os_log_type_t.error.getter(v4, v5);
    if (os_log_type_enabled(v4, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v6, "Secure App Assertion Failed", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  v8 = OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion;
  v9 = *(void **)(v2
                + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion);
  if (v9)
  {
    objc_msgSend(v9, "invalidate");
    v10 = *(void **)(v2 + v8);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v2 + v8) = 0;

}

unint64_t sub_10004D428()
{
  return 0xD00000000000001BLL;
}

void sub_10004D444(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v7 = a3;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v24 = a2;
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v26 = v23;
    *(_DWORD *)v10 = 136315394;
    v11 = (id)NSStringFromBLSBacklightState(a2);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v25 = sub_100015FFC(v12, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    v25 = (uint64_t)a3;
    v15 = v7;
    v16 = sub_100010F40((uint64_t *)&unk_1000936C0);
    v17 = String.init<A>(describing:)(&v25, v16);
    v19 = v18;
    v25 = sub_100015FFC(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 14, v10 + 22);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Backlight Changed: %s, for reason %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {

  }
  v20 = OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion;
  if (!*(_QWORD *)(v4
                  + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion)
    && (BLSBacklightStateIsActive(v24) & 1) == 0)
  {
    sub_10004CCD0();
    v21 = *(void **)(v4 + v20);
    *(_QWORD *)(v4 + v20) = v22;

  }
}

void sub_10004D6E0()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.SecureAppAssertion", 31, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10004D72C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100072A40;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004D7B0(void (*a1)(char *, uint64_t))
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v2 = v1;
  v4 = sub_100012DA8();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004DEF0((uint64_t)&unk_10009A208, (uint64_t)v17);
  v8 = objc_getAssociatedObject(v2, &unk_10009A208);
  swift_endAccess(v17);
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v17, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10004DC10((uint64_t)v17, (uint64_t)v18);
  if (v19)
  {
    v9 = _s15AppPresentationCMa(0);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v16;
      sub_10004B65C((uint64_t)a1);
      return swift_release(v10);
    }
  }
  else
  {
    sub_100020990((uint64_t)v18);
  }
  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v11 = sub_100006CAC(v4, (uint64_t)qword_10009A1E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
  v12 = *(_DWORD *)&v2[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
  v13 = _s15AppPresentationCMa(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v10 = (void *)sub_10004B724(v7, 0xD000000000000011, 0x800000010006E4B0, v12, a1);
  sub_10004DEF0((uint64_t)&unk_10009A208, (uint64_t)v18);
  objc_setAssociatedObject(v2, &unk_10009A208, v10, (void *)0x301);
  swift_endAccess(v18);
  return swift_release(v10);
}

uint64_t sub_10004D9AC(void (*a1)(char *, uint64_t))
{
  NSObject *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  if (qword_1000912F0 != -1)
    swift_once(&qword_1000912F0, sub_10004928C);
  v3 = sub_100012DA8();
  sub_100006CAC(v3, (uint64_t)qword_10009A1E8);
  v4 = v1;
  sub_10004DF44((uint64_t)v4);
  v5 = sub_100012FF0();
  if (os_log_type_enabled(v1, v5))
  {
    v6 = sub_100006D24(18);
    *(_DWORD *)v6 = 67109376;
    HIDWORD(v9) = *(_DWORD *)((char *)&v4->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v9 + 4, &v10, v6 + 4, v6 + 8);

    *(_WORD *)(v6 + 8) = 2048;
    v8 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 10, v6 + 18);
    _os_log_impl((void *)&_mh_execute_header, v1, v5, "=== Service Presenter PID %d Ready %lu ===", (uint8_t *)v6, 0x12u);
    sub_100006D04(v6);

  }
  else
  {

  }
  return sub_10004D7B0(a1);
}

uint64_t sub_10004DB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100048A30();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10004DB6C(void *a1, uint64_t a2)
{
  sub_10004ABC0(a1, a2);
}

uint64_t sub_10004DB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004DB9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10004DBA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000936B8;
  if (!qword_1000936B8)
  {
    v1 = sub_100006C74(255, (unint64_t *)&qword_100091750, NSError_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSError, v1);
    atomic_store(result, (unint64_t *)&qword_1000936B8);
  }
  return result;
}

uint64_t sub_10004DBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004DC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100092E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004DC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012DA8();
  sub_10004DF0C();
  v3 = ((v2 + 40) & ~v2) + *(_QWORD *)(v1 + 64);
  v4 = v2 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_10001C8C8();
  return swift_deallocObject(v0, v3, v4);
}

uint64_t sub_10004DCD8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012DA8() - 8) + 80);
  return sub_10004BB18(v0[2], v0[3], v0[4], (uint64_t)v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_10004DD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012DA8();
  sub_10004DF0C();
  sub_10004DEA4();

  sub_10001C8C8();
  sub_100048C10(v0 + v3);
  sub_100048C10(v0 + v4);
  return sub_10001C81C(v0, v2, v1);
}

void sub_10004DD68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_100012DA8();
  sub_10004DED0();
  sub_10004DF2C();
  sub_10004C4D8(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10004DD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012DA8();
  sub_10004DF0C();
  sub_10004DEA4();
  sub_10001C8C8();
  sub_100048C10(v0 + v3);
  sub_100048C10(v0 + v4);
  return sub_10001C81C(v0, v2, v1);
}

uint64_t sub_10004DDE8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100012DA8();
  sub_10004DED0();
  sub_10004DF2C();
  return sub_10004C214(a1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10004DE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_100048A30();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004DE40(uint64_t a1)
{
  uint64_t v1;

  return sub_10004D084(a1, v1);
}

uint64_t sub_10004DE48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10004DE74()
{
  uint64_t v0;

  sub_10004D290(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004DEA4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004DEF0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32, 0);
}

uint64_t sub_10004DEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v11, v10, a4);
}

BOOL sub_10004DF1C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004DF44(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_10004DF60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100015FFC(a1, v3, a3);
}

uint64_t sub_10004DF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000124AC(a1, a2, 1, v2);
}

uint64_t sub_10004DF74()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_1000936D0);
  sub_100006CAC(v0, (uint64_t)qword_1000936D0);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0xD000000000000020, 0x8000000100072B00);
}

uint64_t sub_10004DFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(id, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  if (v2)
  {
    v3 = qword_100091300;
    swift_unknownObjectRetain(v2);
    if (v3 != -1)
      swift_once(&qword_100091300, sub_10004DF74);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100006CAC(v4, (uint64_t)qword_1000936D0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)sub_10004E35C();
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cancelling timer that is still alive during deinitialization.", v8, 2u);
      sub_100006D04((uint64_t)v8);
    }

    swift_getObjectType(v2);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v2);
  }
  v9 = *(void (**)(id, uint64_t))(v1 + 40);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + 48);
    v11 = qword_100091300;
    swift_retain(v10);
    if (v11 != -1)
      swift_once(&qword_100091300, sub_10004DF74);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100006CAC(v12, (uint64_t)qword_1000936D0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)sub_10004E35C();
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Calling completion block that was left unexecuted during deinitialization.", v16, 2u);
      sub_100006D04((uint64_t)v16);
    }

    sub_10004A098();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v19 = sub_10001F230(v17, v18, -999, 0xD000000000000043, 0x8000000100070350, 0);
    v9(v19, v20);

    sub_1000121B4((uint64_t)v9, v10);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  sub_1000121B4(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));

  return v1;
}

uint64_t sub_10004E240()
{
  uint64_t v0;

  sub_10004DFF0();
  return swift_deallocClassInstance(v0, 82, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationOperation()
{
  return objc_opt_self(_TtC12SidecarRelay32RemoteDisplayInitiationOperation);
}

uint64_t sub_10004E280()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  _StringGuts.grow(_:)(39);
  v1 = _typeName(_:qualified:)(*v0, 0);
  swift_bridgeObjectRelease(0xE000000000000000);
  v8 = v1;
  v2._object = (void *)0x8000000100070320;
  v2._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v2);
  v4 = v0[2];
  v3 = (void *)v0[3];
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._countAndFlagsBits = 93;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t sub_10004E33C()
{
  return sub_10004E280();
}

uint64_t sub_10004E35C()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_10004E368(uint64_t a1)
{
  void **v1;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = *v1;
  }
  else
  {
    v5 = (id)SidecarMapTableCreateStrong();
    *v1 = v5;
    v4 = v5;
    v3 = 0;
  }
  v6 = v3;
  v7 = SidecarMapTableAddObject(v4, a1);

  return v7;
}

_BYTE *sub_10004E3CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v7;
  id v8;
  _BYTE *v9;
  char v10;

  *(_BYTE *)(v3 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect) = 0;
  v7 = (_QWORD *)(v3 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
  *v7 = a1;
  v7[1] = a2;
  swift_bridgeObjectRetain(a2);
  v8 = a3;
  v9 = sub_100006DB8(v8);
  if (a1 == 0xD000000000000019 && a2 == 0x800000010006E020
    || (sub_10004FB08((uint64_t)"com.apple.sidecar.display") & 1) != 0)
  {
    v9[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect] = 1;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000010006E0C0)
  {
    swift_bridgeObjectRelease(0x800000010006E0C0);

LABEL_9:
    v9[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect] = 1;
    return v9;
  }
  v10 = sub_10004FB08((uint64_t)"com.apple.sidecar.capture");
  swift_bridgeObjectRelease(a2);

  if ((v10 & 1) != 0)
    goto LABEL_9;
  return v9;
}

uint64_t sub_10004E4C4()
{
  return sub_10004E4DC(sub_100007310);
}

uint64_t sub_10004E4D0()
{
  return sub_10004E4DC(sub_10000731C);
}

#error "10004E50C: call analysis failed (funcsize=20)"

uint64_t sub_10004E534(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  Class isa;
  uint64_t v51;
  NSString v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];

  v2 = v1;
  v4 = _s7SessionC8IdentityVMa(0);
  sub_100013118();
  __chkstk_darwin(v5);
  sub_100012DF0();
  v61 = v7 - v6;
  type metadata accessor for SidecarIdentity(0);
  sub_100013118();
  v9 = __chkstk_darwin(v8);
  v60 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - v11;
  sub_100010F40(&qword_100091900);
  sub_100013118();
  __chkstk_darwin(v13);
  sub_100012DF0();
  v16 = v15 - v14;
  v17 = sub_10001322C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v53 - v22;
  result = sub_100009AE8(a1);
  if ((v25 & 1) != 0)
  {
    sub_10004FB28(OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
    v26 = sub_10004E368(a1);
    swift_endAccess(v64);
    v59 = v26;
    v27 = sub_10004F894(v26);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v58 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
    v28 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    sub_10004F914(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v16);
    sub_1000124AC(v16, 0, 1, v4);
    sub_10004FB28(OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
    sub_10001F118(v16);
    swift_endAccess(v64);
    if (qword_1000912B8 != -1)
      swift_once(&qword_1000912B8, sub_1000265C8);
    v57 = v28;
    v29 = v28;
    v30 = v61;
    sub_10004F914(v29, v61);
    sub_10004F958(v30, (uint64_t)v12);
    v31 = sub_100028A14((uint64_t)v12, 0);
    sub_10004F99C((uint64_t)v12);
    sub_100006C74(0, &qword_100091908, SidecarDevice_ptr);
    v32 = sub_100056A20(v31);
    if (v32)
    {
      v33 = v32;
      v34 = v58;
    }
    else
    {
      v35 = sub_100008898();
      v37 = v36;
      if (qword_1000912D0 != -1)
        swift_once(&qword_1000912D0, sub_100026680);
      v38 = type metadata accessor for Logger(0);
      sub_100006CAC(v38, (uint64_t)qword_10009A198);
      v39 = swift_bridgeObjectRetain(v37);
      v40 = Logger.logObject.getter(v39);
      v42 = static os_log_type_t.error.getter(v40, v41);
      if (os_log_type_enabled(v40, v42))
      {
        v43 = sub_100006D24(12);
        v56 = v2;
        v44 = (uint8_t *)v43;
        v54 = sub_100006D24(32);
        v55 = v17;
        v64[0] = v54;
        *(_DWORD *)v44 = 136446210;
        v53 = v44 + 4;
        swift_bridgeObjectRetain(v37);
        v62 = sub_100015FFC(v35, v37, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v53, v44 + 12);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v42, "%{public}s: Device Not Found", v44, 0xCu);
        v45 = v54;
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        v46 = v45;
        v17 = v55;
        sub_100006D04(v46);
        v47 = (uint64_t)v44;
        v2 = v56;
        sub_100006D04(v47);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      sub_10004F914(v57, v30);
      v48 = v60;
      sub_10004F958(v30, v60);
      v34 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v21, v48, v17);
      v49 = objc_allocWithZone((Class)SidecarDevice);
      v33 = sub_10004F9D8((uint64_t)v21, 0, 0xE000000000000000, 0, 0xE000000000000000, 0, 0xE000000000000000);
    }
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v51 = *(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink);
    v52 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "relaySession:openedByDevice:dataLink:service:", isa, v33, v51, v52);

    sub_10004FB40(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    return v59;
  }
  return result;
}

void sub_10004EA64(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Class isa;

  v3 = v2;
  v5 = a2[3];
  v6 = a2[4];
  sub_100010F80(a2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  if (v8 >> 60 != 15)
  {
    v9 = v7;
    v10 = v8;
    v11 = sub_10004E534(a1);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "relaySession:receivedOPACKData:dataLink:", v11, isa, *(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink));
    sub_100012430(v9, v10);

  }
}

void sub_10004EB44(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  sub_100032E14(a1);
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_10004ED34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(_QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v15 = sub_10001F230(v13, v14, -103, 0, 0, 0);
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v16 = sub_100006CAC(v9, (uint64_t)qword_10009A198);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16, v9);
  v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  sub_1000183F4(sub_10004A0D4, v19, sub_100020DE4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v20 = v15;
  v21 = (void *)_convertErrorToNSError(_:)(v20);
  ((void (**)(_QWORD, void *))a8)[2](a8, v21);

  _Block_release(a8);
}

void sub_10004F0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSUUID v15;
  uint64_t v16;
  Class isa;
  NSString v18;
  Class v19;
  void *v20;
  uint64_t v21;
  void *v22;
  objc_super v24;
  _QWORD aBlock[5];
  uint64_t v26;

  sub_100010F40(&qword_1000918F8);
  sub_100013118();
  __chkstk_darwin(v11);
  sub_100012DF0();
  v14 = v13 - v12;
  v15.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10004F834(a2, v14);
  v16 = sub_10001322C();
  isa = 0;
  if (sub_1000124B8(v14, 1, v16) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  v18 = String._bridgeToObjectiveC()();
  v19 = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a7;
  v26 = a8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021604;
  aBlock[3] = &unk_100087980;
  v20 = _Block_copy(aBlock);
  v21 = v26;
  swift_retain(a8);
  swift_release(v21);
  v24.receiver = v22;
  v24.super_class = (Class)type metadata accessor for ServiceProvider();
  objc_msgSendSuper2(&v24, "relaySessionOpen:reconnect:serviceIdentifier:destination:transport:completion:", v15.super.isa, isa, v18, v19, a6, v20);
  _Block_release(v20);

  sub_100012D28();
}

void sub_10004F234(void *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v4 = type metadata accessor for Logger(0);
  sub_100006CAC(v4, (uint64_t)qword_10009A198);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(14, -1);
    *(_DWORD *)v8 = 67109376;
    v10 = *(_DWORD *)&v5[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);

    *(_WORD *)(v8 + 8) = 1024;
    v9 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 10, v8 + 14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "PID %d: Allow Reconnect = %{BOOL}d", (uint8_t *)v8, 0xEu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v5[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect] = 0;
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_10004F3BC(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);

}

void sub_10004F418(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  NSUUID v19;
  char *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = sub_10001322C();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100012DF0();
  v7 = v6 - v5;
  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v8 = type metadata accessor for Logger(0);
  sub_100006CAC(v8, (uint64_t)qword_10009A198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  v9 = v1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = sub_100006D24(18);
    v24 = sub_100006D24(32);
    v26 = v24;
    *(_DWORD *)v12 = 67109378;
    LODWORD(v25) = *(_DWORD *)&v9[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4, v12 + 4, v12 + 8);

    *(_WORD *)(v12 + 8) = 2082;
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    v25 = sub_100015FFC(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 10, v12 + 18);
    swift_bridgeObjectRelease(v16);
    sub_10004FB40(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "PID %d: Service Extension Ready '%{public}s'", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    sub_100006D04(v24);
    sub_100006D04(v12);
  }
  else
  {

    sub_10004FB40(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
  v17 = *(void **)(qword_10009A190 + 176);
  if (v17)
  {
    v18 = v17;
    v19.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "relayPresenterServiceExtensionReady:", v19.super.isa);

  }
  else
  {
    v20 = v9;
    v19.super.isa = (Class)Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v19.super.isa, v21);
    if (os_log_type_enabled((os_log_t)v19.super.isa, v22))
    {
      v23 = (uint8_t *)sub_100006D24(8);
      *(_DWORD *)v23 = 67109120;
      LODWORD(v26) = *(_DWORD *)&v20[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4, v23 + 4, v23 + 8);

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v19.super.isa, v22, "PID %d: No Service Presenter", v23, 8u);
      sub_100006D04((uint64_t)v23);
    }
    else
    {

      v19.super.isa = (Class)v20;
    }
  }

  sub_100012D28();
}

uint64_t sub_10004F7C4()
{
  uint64_t v0;

  return sub_100048C10(v0 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
}

id sub_10004F7D4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServiceProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServiceProvider()
{
  return objc_opt_self(_TtC12SidecarRelay15ServiceProvider);
}

uint64_t sub_10004F834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_1000918F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004F88C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10004F894(int a1)
{
  _BYTE v2[4];
  uint64_t v3;
  int v4;

  v2[0] = HIBYTE(a1);
  v2[1] = BYTE2(a1);
  v2[2] = BYTE1(a1);
  v2[3] = a1;
  v3 = -1;
  v4 = -1;
  return objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v2);
}

uint64_t sub_10004F914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SidecarIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F99C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SidecarIdentity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10004F9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  Class isa;
  NSString v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;

  v8 = v7;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  v17 = objc_msgSend(v8, "initWithIdentifier:model:name:version:", isa, v14, v15, v16);

  v18 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  return v17;
}

uint64_t sub_10004FAD4()
{
  uint64_t v0;

  return sub_1000497CC(*(_QWORD *)(v0 + 16), 38, 0xD000000000000022, (void *)0x8000000100070470);
}

uint64_t sub_10004FB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v1, 0xD000000000000019, (a1 - 32) | 0x8000000000000000, 0);
}

uint64_t sub_10004FB28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(v1 + a1, v2 - 104, 33, 0);
}

uint64_t sub_10004FB40@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10004FB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10004FB88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10004FBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004FC00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004FC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004FCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004FCD8);
}

uint64_t sub_10004FCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001322C();
  return sub_1000124B8(a1, a2, v4);
}

uint64_t sub_10004FD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004FD14);
}

uint64_t sub_10004FD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001322C();
  return sub_1000124AC(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SidecarIdentity(uint64_t a1)
{
  uint64_t result;

  result = qword_100093970;
  if (!qword_100093970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SidecarIdentity);
  return result;
}

uint64_t sub_10004FD80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10004FDE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v5);
  sub_100048514();
  sub_10004FF94(*(id *)(a1 + 16), v2);
  swift_release(a1);
  v6 = sub_1000484C0();
  v7 = sub_1000502A0(v6);
  if ((_DWORD)v7)
  {
    sub_1000502C4(v7, &qword_100092D78);
    v8 = 1;
  }
  else
  {
    sub_1000502CC();
    v8 = 0;
  }
  sub_1000124AC(a2, v8, 1, a1);
  sub_100020E78();
}

uint64_t sub_10004FE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  sub_100010F40(&qword_1000918F8);
  sub_100013118();
  __chkstk_darwin(v7);
  sub_100048514();
  v8 = sub_10001322C();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(a1);
  swift_bridgeObjectRelease(a2);
  v12 = sub_1000124B8(v3, 1, v8);
  if ((_DWORD)v12 == 1)
  {
    sub_1000502C4(v12, &qword_1000918F8);
    v13 = 1;
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v14(v11, v3, v8);
    v14((char *)a3, (uint64_t)v11, v8);
    v13 = 0;
  }
  v15 = sub_1000484C0();
  return sub_1000124AC(a3, v13, 1, v15);
}

void sub_10004FF94(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v5);
  sub_100048514();
  v6 = a1;
  v7 = sub_1000501F8(v6);
  if (v8)
  {
    sub_10004FE7C(v7, v8, v2);

    v9 = sub_1000484C0();
    v10 = sub_1000502A0(v9);
    if ((_DWORD)v10 != 1)
    {
      sub_1000502CC();
      v12 = a2;
      v13 = 0;
      v11 = (uint64_t)v6;
      goto LABEL_7;
    }
    sub_1000502C4(v10, &qword_100092D78);
  }
  else
  {

  }
  v11 = sub_1000484C0();
  v12 = a2;
  v13 = 1;
LABEL_7:
  sub_1000124AC(v12, v13, 1, v11);
  sub_100020E78();
}

uint64_t sub_100050048()
{
  Class isa;
  uint64_t v1;
  Swift::String v2;
  void *object;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v1 = sub_100012100(isa);

  v6 = 542327881;
  v7 = 0xE400000000000000;
  v5 = v1;
  sub_100011E6C();
  v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v5, 16, 1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t sub_1000500C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001322C();
  v3 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

void sub_10005011C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  sub_10001322C();
  v0 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000502B4(v0, v1);
  Hasher._finalize()();
  sub_1000487F0();
}

void sub_100050178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_10001322C();
  v1 = sub_100005CC0((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000502B4(v1, v2);
  Hasher._finalize()();
  sub_1000487F0();
}

uint64_t sub_1000501CC()
{
  return sub_100005CC0(&qword_1000939A8, type metadata accessor for SidecarIdentity, (uint64_t)&unk_100072BA0);
}

uint64_t sub_1000501F8(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "idsDeviceIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100050264(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100010F40(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000502A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000124B8(v1, 1, a1);
}

uint64_t sub_1000502B4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1000502C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100050264(v2, a2);
}

uint64_t sub_1000502CC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004F958(v1, v0);
}

const char *sub_1000502D8()
{
  __uint8_t *v0;
  socklen_t sa_len;
  char *v2;
  char *v3;
  int v4;
  const char *result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  sockaddr v12[8];

  v12[0].sa_len = *v0;
  memcpy(&v12[0].sa_family, v0 + 1, 0x7FuLL);
  if (v12[0].sa_len)
    sa_len = v12[0].sa_len;
  else
    sa_len = 128;
  v2 = (char *)swift_slowAlloc(1025, -1);
  v3 = (char *)swift_slowAlloc(32, -1);
  v4 = getnameinfo(v12, sa_len, v2, 0x401u, v3, 0x20u, 26);
  if (!v4)
  {
    v6 = String.init(cString:)(v2);
    v7 = String.init(cString:)(v3);
    v9 = v8;
    v10._countAndFlagsBits = 58;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = v7;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v9);
    goto LABEL_8;
  }
  result = gai_strerror(v4);
  if (result)
  {
    v6 = String.init(cString:)(result);
LABEL_8:
    sub_100006D04((uint64_t)v3);
    sub_100006D04((uint64_t)v2);
    return (const char *)v6;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Sockaddr()
{
  return &type metadata for Sockaddr;
}

{
  return &type metadata for Sockaddr;
}

uint64_t sub_100050438(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100050464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int IsActive;

  if (qword_100091308 != -1)
    swift_once(&qword_100091308, sub_1000504F8);
  v0 = qword_10009A210;
  swift_retain(qword_10009A210);
  if ((sub_100050970() & 1) != 0)
    v1 = 2;
  else
    v1 = 0;
  if ((sub_100050964() & 1) != 0)
    v2 = v1 | 8;
  else
    v2 = v1;
  IsActive = IOPMUserIsActive();
  swift_release(v0);
  if (IsActive)
    return v2 | 4;
  else
    return v2;
}

uint64_t sub_1000504F8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for System();
  swift_allocObject(v0, 32, 7);
  result = sub_100050530();
  qword_10009A210 = result;
  return result;
}

uint64_t sub_100050530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void **aBlock;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)CUSystemMonitor), "init");
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = sub_10006BD44();
  sub_1000149C4();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v7 = v6;
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v7, "setDispatchQueue:", v8);

  v19 = RapportDeviceChangeFlags.rawValue.getter;
  v20 = 0;
  aBlock = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100050438;
  v18 = &unk_100087AA8;
  v9 = _Block_copy(&aBlock);
  objc_msgSend(v7, "setPrimaryAppleIDChangedHandler:", v9);
  _Block_release(v9);
  v19 = RapportDeviceChangeFlags.rawValue.getter;
  v20 = 0;
  aBlock = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100050438;
  v18 = &unk_100087AD0;
  v10 = _Block_copy(&aBlock);
  objc_msgSend(v7, "setScreenLockedChangedHandler:", v10);
  _Block_release(v10);
  v19 = RapportDeviceChangeFlags.rawValue.getter;
  v20 = 0;
  aBlock = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100050438;
  v18 = &unk_100087AF8;
  v11 = _Block_copy(&aBlock);
  objc_msgSend(v7, "setScreenOnChangedHandler:", v11);
  _Block_release(v11);
  v19 = sub_100050A08;
  v20 = v1;
  aBlock = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100050438;
  v18 = &unk_100087B20;
  v12 = _Block_copy(&aBlock);
  v13 = v20;
  swift_retain(v1);
  swift_release(v13);
  objc_msgSend(v7, "activateWithCompletion:", v12);
  _Block_release(v12);

  return v1;
}

uint64_t sub_100050790(uint64_t a1)
{
  return sub_10006BD98(*(_QWORD *)(a1 + 24));
}

id sub_100050798()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  char v32[24];
  uint64_t v33;

  sub_10006BDD0(*(pthread_mutex_t **)(v0 + 24));
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(&v30, v4);
    v5 = swift_unknownObjectRelease(v4);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  v7 = sub_100050A3C(v5, v6);
  if (v33)
  {
    if (sub_100050A28(v7, v8, v9, (uint64_t)&type metadata for Bool, v10, v11, v12, v13, v27, v28, SWORD2(v28), SBYTE6(v28), SHIBYTE(v28), v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32[0])&& (v28 & 0x100000000000000) != 0)
    {
      return 0;
    }
  }
  else
  {
    sub_100020990((uint64_t)v32);
  }
  v14 = objc_msgSend(v1, "standardUserDefaults");
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "objectForKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v30, v16);
    v17 = swift_unknownObjectRelease(v16);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  v19 = sub_100050A3C(v17, v18);
  if (v33)
  {
    if (sub_100050A28(v19, v20, v21, (uint64_t)&type metadata for Bool, v22, v23, v24, v25, v27, v28, SWORD2(v28), SBYTE6(v28), SHIBYTE(v28), v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32[0])&& (v29 & 1) != 0)
    {
      return 0;
    }
  }
  else
  {
    sub_100020990((uint64_t)v32);
  }
  return objc_msgSend(*(id *)(v0 + 16), "manateeAvailable");
}

id sub_100050964()
{
  return sub_10005097C((SEL *)&selRef_screenLocked);
}

id sub_100050970()
{
  return sub_10005097C((SEL *)&selRef_screenOn);
}

id sub_10005097C(SEL *a1)
{
  uint64_t v1;

  sub_10006BDD0(*(pthread_mutex_t **)(v1 + 24));
  return objc_msgSend(*(id *)(v1 + 16), *a1);
}

uint64_t sub_1000509AC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for System()
{
  return objc_opt_self(_TtC12SidecarRelay6System);
}

uint64_t sub_1000509F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100050A00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100050A08()
{
  uint64_t v0;

  return sub_100050790(v0);
}

uint64_t sub_100050A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  return swift_dynamicCast(&a13, &a18, v18 + 8, a4, 6);
}

uint64_t sub_100050A3C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  return sub_10004DC10((uint64_t)va, (uint64_t)va1);
}

void sub_100050A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void sub_100050A94(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  NSDictionary v7;
  uint64_t v8;
  id v9;

  isa = a2;
  if (a1)
  {
    v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (!isa)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7.super.isa = 0;
  if (a2)
LABEL_3:
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a3)
    v8 = _convertErrorToNSError(_:)(a3);
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v7.super.isa, isa);

}

BOOL sub_100050B64(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

id sub_100050B90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  objc_class *v6;
  objc_super v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0;
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))((uint64_t)v5 + OBJC_IVAR____TtC12SidecarRelay10TestDevice_uuid, v4, v1);

  v6 = (objc_class *)type metadata accessor for TestDevice(0);
  v8.receiver = v5;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, "init");
}

void sub_100050C5C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001000707D0, "SidecarRelay/TestRelay.swift", 28, 2, 40, 0);
  __break(1u);
}

void sub_100050CCC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v2);
  v3 = sub_100053678();
  sub_100013118();
  __chkstk_darwin(v4);
  sub_1000536C4();
  sub_10004FF94(v0, v1);
  if (sub_1000124B8(v1, 1, v3) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000536F8();
    v5._countAndFlagsBits = sub_10005371C(0x6976654474736554);
    sub_100053710(v5);
    sub_10001327C();
    sub_100053704();
    sub_100020E78();
  }
}

void sub_100050DE8(uint64_t a1)
{
  UUID.uuidString.getter(a1);
  sub_100005E8C();
}

uint64_t sub_100050E5C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

void sub_100050ED0()
{
  id v0;

  v0 = sub_100053250();
  static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  sub_100020E78();
}

void sub_100050F60()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.TestDevice", 23, "init(identifier:name:model:accountID:)", 38, 0);
  __break(1u);
}

id sub_100050FE4()
{
  return sub_100034554(0, (uint64_t (*)(void))type metadata accessor for TestDevice);
}

uint64_t sub_100051030()
{
  return type metadata accessor for TestDevice(0);
}

uint64_t type metadata accessor for TestDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_100093AB0;
  if (!qword_100093AB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TestDevice);
  return result;
}

uint64_t sub_100051070(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000510E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  sub_100010F40(&qword_100092D78);
  sub_100013118();
  __chkstk_darwin(v2);
  v3 = sub_100053678();
  sub_100013118();
  __chkstk_darwin(v4);
  sub_1000536C4();
  sub_10004FF94(*(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice), v1);
  if (sub_1000124B8(v1, 1, v3) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000536F8();
    v5._countAndFlagsBits = sub_10005371C(0x7373655374736554);
    sub_100053710(v5);
    sub_10001327C();
    sub_100053704();
    sub_100020E78();
  }
}

void sub_1000511CC()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice);
  sub_100005E8C();
}

uint64_t sub_100051238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];

  v9 = sub_100014AC4((uint64_t)&unk_100087D88, 32);
  *(_QWORD *)(v9 + 16) = a4;
  *(_QWORD *)(v9 + 24) = a5;
  sub_100053694(OBJC_IVAR____TtC12SidecarRelay11TestSession_handlers, v11);
  swift_bridgeObjectRetain(a2);
  swift_retain(a5);
  sub_10003CD8C(sub_10005322C, v9, a1, a2);
  swift_endAccess(v12);
  return swift_bridgeObjectRelease(a2);
}

void sub_1000513A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary v5;
  NSDictionary v6;
  Class isa;

  v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v6.super.isa = 0;
  isa = v6.super.isa;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

uint64_t sub_100051444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  sub_100053694(OBJC_IVAR____TtC12SidecarRelay11TestSession_handlers, v8);
  v4 = sub_10003CA68(a1, a2);
  v6 = v5;
  result = swift_endAccess(v9);
  if (v4)
    return sub_1000121B4(v4, v6);
  return result;
}

void sub_100051500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  id v8;
  id v9;

  sub_1000530DC(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v8 = sub_10001F3E0(-6772, 0, 0, (uint64_t)"SidecarRelay/TestRelay.swift", 28, 2, 105);
  if (a7)
  {
    v9 = v8;
    a7();
    v8 = v9;
  }

}

void sub_10005175C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = sub_10001A0F0();
  sub_10001314C();
  __chkstk_darwin(v7);
  sub_10001795C();
  v8 = objc_msgSend(v0, "dispatchQueue");
  v9 = sub_100014AC4((uint64_t)&unk_100087C70, 24);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_100053188;
  v15 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100087C88;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  sub_1000536EC((unint64_t *)&unk_100092FF0, v11, v12, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_100010F40((uint64_t *)&unk_100092170);
  v13 = sub_10001C6B8();
  sub_100053638(v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v10);
  _Block_release(v10);

  sub_100020EF0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v6);
  swift_release(v15);
  sub_100012D28();
}

void sub_1000519C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;

  sub_1000530DC(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  v11 = sub_10001F230(v9, v10, 3328, 0, 0, 0);
  v12 = (void *)_convertErrorToNSError(_:)(v11);
  ((void (**)(_QWORD, _QWORD, _QWORD, void *))a8)[2](a8, 0, 0, v12);

  _Block_release(a8);
}

void sub_100051B9C()
{
  _swift_stdlib_reportUnimplementedInitializer("SidecarRelay.TestSession", 24, "init()", 6, 0);
  __break(1u);
}

id sub_100051BD4(uint64_t a1)
{
  return sub_100034554(a1, type metadata accessor for TestSession);
}

uint64_t type metadata accessor for TestSession()
{
  return objc_opt_self(_TtC12SidecarRelay11TestSession);
}

id sub_100051C88(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  NSString v5;

  v4 = a1;
  a3();

  v5 = String._bridgeToObjectiveC()();
  sub_10001327C();
  return v5;
}

uint64_t sub_100051CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  Swift::String v8;
  void *object;
  uint64_t v10;
  _QWORD v11[2];

  v1 = sub_100010F40(&qword_100092D78);
  __chkstk_darwin(v1);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SidecarIdentity(0);
  __chkstk_darwin(v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004FF94(*(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice), (uint64_t)v3);
  result = sub_1000124B8((uint64_t)v3, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10004F958((uint64_t)v3, (uint64_t)v6);
    strcpy((char *)v11, "ProxySession ");
    HIWORD(v11[1]) = -4864;
    v8._countAndFlagsBits = sub_100050048();
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10 = v11[0];
    sub_10004F99C((uint64_t)v6);
    return v10;
  }
  return result;
}

id sub_100051E08()
{
  return sub_100034554(0, type metadata accessor for TestServer.ProxySession);
}

void sub_100051E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v22 = sub_10001A0F0();
  v13 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_10001795C();
  v14 = objc_msgSend(v5, "dispatchQueue");
  v15 = sub_100014AC4(a3, 32);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  aBlock[4] = a4;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = a5;
  v16 = _Block_copy(aBlock);
  v17 = sub_100046E6C(a1, a2);
  static DispatchQoS.unspecified.getter(v17);
  sub_1000536EC((unint64_t *)&unk_100092FF0, v18, v19, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_100010F40((uint64_t *)&unk_100092170);
  v20 = sub_10001C6B8();
  sub_100053638(v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v6, v16);
  _Block_release(v16);

  sub_100020EF0(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v7, v22);
  swift_release(v25);
  sub_100012D28();
}

id sub_100052060()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  v1 = OBJC_IVAR____TtC12SidecarRelay10TestServer_sessions;
  v2 = type metadata accessor for TestSession();
  v3 = type metadata accessor for TestServer.ProxySession();
  sub_100053128(&qword_100093C00, v4, (uint64_t (*)(uint64_t))type metadata accessor for TestSession, (uint64_t)&protocol conformance descriptor for NSObject);
  v6 = v5;
  v7 = v0;
  *(_QWORD *)&v0[v1] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v3, v6);
  v8 = OBJC_IVAR____TtC12SidecarRelay10TestServer_proxies;
  sub_100053128(&qword_100093C08, 255, (uint64_t (*)(uint64_t))type metadata accessor for TestServer.ProxySession, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)&v7[v8] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v3, v2, v9);

  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for TestServer();
  return objc_msgSendSuper2(&v11, "init");
}

id sub_100052188(uint64_t a1)
{
  return sub_100034554(a1, type metadata accessor for TestServer);
}

uint64_t type metadata accessor for TestServer()
{
  return objc_opt_self(_TtC12SidecarRelay10TestServer);
}

uint64_t type metadata accessor for TestServer.ProxySession()
{
  return objc_opt_self(_TtCC12SidecarRelay10TestServerP33_F22F8C621CEEE666034342976B0C4BEF12ProxySession);
}

void sub_100052208(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_10005222C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x736569786F7270 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736569786F7270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6973736573, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int sub_100052318(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_10005235C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736E6F6973736573;
  else
    return 0x736569786F7270;
}

uint64_t sub_100052394(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v8 = sub_100010F40(&qword_100093BE8);
  sub_10001314C();
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100010F80(a1, v12);
  v14 = sub_100053064();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TestServer.DiagnosticState.CodingKeys, &type metadata for TestServer.DiagnosticState.CodingKeys, v14, v12, v13);
  v18 = a2;
  v17 = 0;
  sub_100010F40(&qword_100091858);
  sub_10005357C(&qword_100091860, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  sub_100053658();
  if (!v3)
  {
    v18 = a3;
    v17 = 1;
    sub_100053658();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v8);
}

uint64_t sub_1000524BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  sub_100010F40(&qword_100093C28);
  sub_10001314C();
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_100010F80(a1, v4);
  v6 = sub_100053064();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TestServer.DiagnosticState.CodingKeys, &type metadata for TestServer.DiagnosticState.CodingKeys, v6, v4, v5);
  if (v1)
  {
    sub_100053728();
  }
  else
  {
    sub_100010F40(&qword_100091858);
    sub_10005357C((unint64_t *)&qword_100091950, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    sub_100053614();
    v4 = v8;
    swift_bridgeObjectRetain();
    sub_100053614();
    sub_1000536DC();
    swift_bridgeObjectRetain();
    sub_100053728();
    swift_bridgeObjectRelease();
    sub_10001320C();
  }
  return v4;
}

Swift::Int sub_100052624()
{
  char *v0;

  return sub_100052318(*v0);
}

void sub_10005262C(uint64_t a1)
{
  char *v1;

  sub_100052208(a1, *v1);
}

uint64_t sub_100052634()
{
  char *v0;

  return sub_10005235C(*v0);
}

uint64_t sub_10005263C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005222C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100052660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static RapportDeviceChangeFlags.distance.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100052684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053064();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000526AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053064();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000526D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000524BC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000526FC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100052394(a1, *v1, v1[1]);
}

id sub_100052714(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;

  v3 = OBJC_IVAR____TtC12SidecarRelay10TestClient_testDevice;
  v4 = objc_allocWithZone((Class)type metadata accessor for TestDevice(0));
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");

  v6 = a1;
  v7 = sub_100006DB8(v6);
  v8 = qword_1000912B8;
  v9 = v7;
  if (v8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);

  return v9;
}

uint64_t sub_1000527C4()
{
  return sub_1000527DC((uint64_t (*)(void))sub_100007310);
}

uint64_t sub_1000527D0()
{
  return sub_1000527DC((uint64_t (*)(void))sub_10000731C);
}

uint64_t sub_1000527DC(uint64_t (*a1)(void))
{
  uint64_t result;

  result = a1();
  if (qword_1000912B8 != -1)
    return swift_once(&qword_1000912B8, sub_1000265C8);
  return result;
}

void sub_100052818(uint64_t a1, unint64_t a2, void *a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSArray v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;

  if (qword_1000912D0 != -1)
    swift_once(&qword_1000912D0, sub_100026680);
  v8 = type metadata accessor for Logger(0);
  sub_100006CAC(v8, (uint64_t)qword_10009A198);
  v9 = a3;
  swift_bridgeObjectRetain_n(a2, 2);
  v10 = (char *)v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(18, -1);
    v14 = swift_slowAlloc(32, -1);
    v33 = v14;
    *(_DWORD *)v13 = 67109378;
    v15 = *(_DWORD *)&v10[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

    LODWORD(v32) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v13 + 4, v13 + 8);

    *(_WORD *)(v13 + 8) = 2082;
    swift_bridgeObjectRetain();
    v32 = sub_100015FFC(a1, a2, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 10, v13 + 18);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PID %d: Devices '%{public}s'", (uint8_t *)v13, 0x12u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v16 = *(void **)&v10[OBJC_IVAR____TtC12SidecarRelay10TestClient_testDevice];
  v17 = type metadata accessor for RapportRemoteDisplayDevice();
  swift_allocObject(v17, 40, 7);
  RapportRemoteDisplayDevice.init(device:)((uint64_t)v16);
  v19 = v18;
  sub_1000530DC(0, &qword_100091908, SidecarDevice_ptr);
  v20 = v16;
  v21 = swift_retain(v19);
  v22 = sub_100056A20(v21);
  if (v22)
  {
    v23 = v22;
    v24 = sub_100010F40(&qword_100093BF8);
    v25 = swift_allocObject(v24, 40, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100072C90;
    *(_QWORD *)(v25 + 32) = v23;
    v33 = v25;
    specialized Array._endMutation()(v25);
    v26 = v23;
    v27.super.isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class, _QWORD))a4)[2](a4, v27.super.isa, 0);
    swift_release(v19);

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release(v19);
    sub_1000530DC(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v30 = sub_10001F230(v28, v29, -200, 0, 0, 0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v27.super.isa = (Class)_convertErrorToNSError(_:)(v30);
    ((void (**)(_QWORD, Class, Class))a4)[2](a4, isa, v27.super.isa);

  }
  _Block_release(a4);
}

void sub_100052C20()
{
  sub_1000536B4(OBJC_IVAR____TtC12SidecarRelay10TestClient_testDevice);
}

id sub_100052C2C(uint64_t a1)
{
  return sub_100034554(a1, type metadata accessor for TestClient);
}

uint64_t type metadata accessor for TestClient()
{
  return objc_opt_self(_TtC12SidecarRelay10TestClient);
}

uint64_t sub_100052C64()
{
  return sub_100052C7C(sub_100007310);
}

uint64_t sub_100052C70()
{
  return sub_100052C7C(sub_10000731C);
}

#error "100052CAC: call analysis failed (funcsize=19)"

void sub_100052CD0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  uint64_t v5;
  objc_super v6;
  _QWORD aBlock[5];
  uint64_t v8;

  aBlock[4] = a1;
  v8 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021604;
  aBlock[3] = &unk_100087B98;
  v4 = _Block_copy(aBlock);
  v5 = v8;
  swift_retain(a2);
  swift_release(v5);
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for TestProvider();
  objc_msgSendSuper2(&v6, "relayRegisterServiceProvider:", v4);
  _Block_release(v4);
  if (qword_1000912B8 != -1)
    swift_once(&qword_1000912B8, sub_1000265C8);
}

void sub_100052FE0()
{
  sub_1000536B4(OBJC_IVAR____TtC12SidecarRelay12TestProvider_testDevice);
}

id sub_100052FEC(uint64_t a1)
{
  return sub_100034554(a1, type metadata accessor for TestProvider);
}

uint64_t type metadata accessor for TestProvider()
{
  return objc_opt_self(_TtC12SidecarRelay12TestProvider);
}

unint64_t sub_100053028()
{
  unint64_t result;

  result = qword_100093BC0;
  if (!qword_100093BC0)
  {
    result = swift_getWitnessTable(&unk_100072D10, &type metadata for TestServer.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_100093BC0);
  }
  return result;
}

unint64_t sub_100053064()
{
  unint64_t result;

  result = qword_100093BF0;
  if (!qword_100093BF0)
  {
    result = swift_getWitnessTable(&unk_100072E34, &type metadata for TestServer.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093BF0);
  }
  return result;
}

uint64_t sub_1000530A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000530C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000530D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000530DC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a2)
  {
    v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }
  sub_100005E8C();
}

uint64_t sub_100053110(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

void sub_100053128(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_100005E8C();
}

uint64_t sub_100053164()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100053188()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12SidecarRelay11TestSession_valid) == 1)
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12SidecarRelay11TestSession_valid) = 0;
}

uint64_t sub_1000531AC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000531D8()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 16);
  if (v1)
    v1(0);
  sub_100005E8C();
}

void sub_100053200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000513A4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100053208()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10005322C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
  sub_100005E8C();
}

id sub_100053250()
{
  uint64_t v0;

  v0 = MGGetStringAnswer(CFSTR("ProductType"));
  return (id)objc_claimAutoreleasedReturnValue(v0);
}

uint64_t storeEnumTagSinglePayload for TestServer.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000532BC + 4 * byte_100072CA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000532F0 + 4 * byte_100072CA0[v4]))();
}

uint64_t sub_1000532F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000532F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053300);
  return result;
}

uint64_t sub_10005330C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053314);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100053318(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053320(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TestServer.DiagnosticState.CodingKeys()
{
  return &type metadata for TestServer.DiagnosticState.CodingKeys;
}

uint64_t destroy for TestServer.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

void _s12SidecarRelay10TestServerC15DiagnosticStateVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005E8C();
}

uint64_t *assignWithCopy for TestServer.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for TestServer.DiagnosticState(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestServer.DiagnosticState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TestServer.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TestServer.DiagnosticState()
{
  return &type metadata for TestServer.DiagnosticState;
}

unint64_t sub_1000534C0()
{
  unint64_t result;

  result = qword_100093C10;
  if (!qword_100093C10)
  {
    result = swift_getWitnessTable(&unk_100072E0C, &type metadata for TestServer.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093C10);
  }
  return result;
}

unint64_t sub_100053500()
{
  unint64_t result;

  result = qword_100093C18;
  if (!qword_100093C18)
  {
    result = swift_getWitnessTable(&unk_100072D7C, &type metadata for TestServer.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093C18);
  }
  return result;
}

unint64_t sub_100053540()
{
  unint64_t result;

  result = qword_100093C20;
  if (!qword_100093C20)
  {
    result = swift_getWitnessTable(&unk_100072DA4, &type metadata for TestServer.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093C20);
  }
  return result;
}

uint64_t sub_10005357C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100010FE0(&qword_100091858);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100053614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v3 - 81, v0, v1, v2);
}

uint64_t sub_100053638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v2, a1, v1, v3);
}

uint64_t sub_100053658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v0, v1, v2);
}

uint64_t sub_100053678()
{
  return type metadata accessor for SidecarIdentity(0);
}

uint64_t sub_100053694@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return swift_beginAccess(v2 + a1, va, 33, 0);
}

uint64_t sub_1000536AC(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1000536B4(uint64_t a1@<X8>)
{
  uint64_t v1;

}

void sub_1000536BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{

}

uint64_t sub_1000536DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000536EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t);

  sub_100053128(a1, 255, v4, a4);
}

uint64_t sub_1000536F8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004F958(v1, v0);
}

uint64_t sub_100053704()
{
  uint64_t v0;

  return sub_10004F99C(v0);
}

void sub_100053710(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10005371C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 48) = a1;
  *(_QWORD *)(v2 - 40) = v1;
  return sub_100050048();
}

uint64_t sub_100053728()
{
  _QWORD *v0;

  return sub_100012B68(v0);
}

void sub_100053730(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v22 = *(_QWORD *)(sub_100010F40(&qword_100093D90) - 8);
  sub_1000569E8();
  __chkstk_darwin(v7);
  sub_10001C898();
  v21 = v8;
  __chkstk_darwin(v9);
  v11 = (char *)v18 - v10;
  v23 = _swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    v12 = 0;
    v13 = _swiftEmptyArrayStorage;
    v18[1] = a2;
    v19 = a3;
    v18[0] = a1;
    while (v12 < *(_QWORD *)(a3 + 16))
    {
      v14 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      v15 = *(_QWORD *)(v22 + 72);
      sub_100054FDC(a3 + v14 + v15 * v12, (uint64_t)v11);
      v16 = a1(v11);
      if (v3)
      {
        sub_100055040((uint64_t)v11, &qword_100093D90);
        swift_release(v13);
        swift_bridgeObjectRelease(a3);
        return;
      }
      if ((v16 & 1) != 0)
      {
        sub_100055078((uint64_t)v11, v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          sub_100055B28();
        v13 = v23;
        v17 = v23[2];
        if (v17 >= v23[3] >> 1)
        {
          sub_100055B28();
          v13 = v23;
        }
        v13[2] = v17 + 1;
        sub_100055078(v21, (uint64_t)v13 + v14 + v17 * v15);
        a3 = v19;
        a1 = (uint64_t (*)(char *))v18[0];
      }
      else
      {
        sub_100055040((uint64_t)v11, &qword_100093D90);
      }
      if (v20 == ++v12)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
  }
}

_QWORD *sub_100053924(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD v18[3];
  _QWORD *v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_100055B5C();
    v6 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(sub_100010F40(&qword_100093D90) - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v16 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(v18, v9);
      if (v4)
        break;
      v4 = 0;
      v10 = v18[0];
      v11 = v18[1];
      v12 = v18[2];
      v19 = v6;
      v13 = v6[2];
      if (v13 >= v6[3] >> 1)
      {
        sub_100055B5C();
        v6 = v19;
      }
      v6[2] = v13 + 1;
      v14 = &v6[3 * v13];
      v14[4] = v10;
      v14[5] = v11;
      v14[6] = v12;
      v9 += v16;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

uint64_t sub_100053A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_100010F40(&qword_100093D90);
  v6 = v5;
  if (v4)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
    sub_100054FDC(a1 + ((v7 + 32) & ~v7), a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return sub_1000124AC(a2, v8, 1, v6);
}

BOOL sub_100053AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _BYTE v10[24];

  v2 = sub_1000569A8();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000568F4();
  sub_100012DD0(v0 + 16, (uint64_t)v10, 0);
  v4 = *(_QWORD *)(v0 + 16);
  v9 = v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_100053924((void (*)(_QWORD *__return_ptr, uint64_t))sub_10005628C, (uint64_t)v8, v4);
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(v0 + 24);
  if (!v5[2])
    swift_bridgeObjectRelease(v5);
  sub_1000569DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return v6 != 0;
}

uint64_t sub_100053BA0()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for Watchdog();
  result = sub_100014AC4(v0, 32);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 24) = 0;
  qword_10009A220 = result;
  return result;
}

BOOL sub_100053BD0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + *(int *)(sub_100010F40(&qword_100093D90) + 48)) != a2;
}

uint64_t sub_100053C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE v11[24];

  v2 = sub_1000569A8();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000568F4();
  sub_100012DD0(v0 + 16, (uint64_t)v11, 1);
  v4 = *(_QWORD *)(v0 + 16);
  v10 = v1;
  swift_bridgeObjectRetain(v4);
  sub_100053730((uint64_t (*)(char *))sub_100055024, (uint64_t)v9, v4);
  v5 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = v6;
  v7 = swift_bridgeObjectRelease(v5);
  sub_100053D60(v7);
  return sub_1000569DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

uint64_t sub_100053CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = type metadata accessor for Date(0);
  sub_100055D00(&qword_100093DC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v6 = dispatch thunk of static Comparable.< infix(_:_:)(a2, a1, v4, v5);
  if ((v6 & 1) == 0)
  {
    sub_100010F40(&qword_100093D90);
    sub_10002A734(a2);
  }
  return v6 & 1;
}

void sub_100053D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(_QWORD *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v1 = v0;
  v42 = type metadata accessor for DispatchTimeInterval(0);
  v45 = *(_QWORD *)(v42 - 8);
  sub_1000569E8();
  __chkstk_darwin(v2);
  sub_10001C898();
  v44 = v3;
  __chkstk_darwin(v4);
  v43 = (uint64_t)&v40 - v5;
  v46 = type metadata accessor for DispatchWallTime(0);
  v6 = *(_QWORD *)(v46 - 8);
  v7 = __chkstk_darwin(v46);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - v10;
  sub_100010F40(&qword_100093D80);
  sub_1000569E8();
  __chkstk_darwin(v12);
  sub_100012DF0();
  v15 = v14 - v13;
  sub_100010F40(&qword_100093D88);
  sub_1000569E8();
  __chkstk_darwin(v16);
  sub_100012DF0();
  v19 = v18 - v17;
  v20 = sub_1000569A8();
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_100012DF0();
  v24 = v23 - v22;
  sub_100012DD0(v1 + 16, (uint64_t)v47, 0);
  sub_100053A60(*(_QWORD *)(v1 + 16), v15);
  v25 = sub_100010F40(&qword_100093D90);
  if (sub_1000124B8(v15, 1, v25) == 1)
  {
    sub_100055040(v15, &qword_100093D80);
    sub_100056A14(v19, 1);
    goto LABEL_4;
  }
  swift_unknownObjectRelease(*(_QWORD *)(v15 + *(int *)(v25 + 48)));
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v26(v19, v15, v20);
  sub_100056A14(v19, 0);
  if (sub_1000124B8(v19, 1, v20) == 1)
  {
LABEL_4:
    sub_100055040(v19, &qword_100093D88);
    v27 = *(_QWORD *)(v1 + 24);
    if (v27)
    {
      swift_getObjectType(*(_QWORD *)(v1 + 24));
      swift_unknownObjectRetain(v27);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v27);
      v28 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      swift_unknownObjectRelease(v28);
    }
    return;
  }
  v29 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(v24, v19, v20);
  v30 = Date.timeIntervalSinceNow.getter(v29);
  if (v30 <= 0.0)
  {
    sub_100053C1C();
  }
  else
  {
    v31 = v30;
    static DispatchWallTime.now()();
    + infix(_:_:)(v9, v31);
    v32 = *(void (**)(char *, uint64_t))(v6 + 8);
    v32(v9, v46);
    v33 = *(_QWORD *)(v1 + 24);
    v41 = v32;
    if (v33)
      v34 = v33;
    else
      v34 = sub_1000540D8(v1);
    v35 = v42;
    ObjectType = swift_getObjectType(v34);
    v37 = v43;
    sub_100054458(v43);
    v38 = v44;
    sub_10005449C(v44);
    swift_unknownObjectRetain(v33);
    OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v11, v37, v38, ObjectType);
    v39 = *(void (**)(_QWORD *, uint64_t))(v45 + 8);
    v39(v38, v35);
    v39((_QWORD *)v37, v35);
    OS_dispatch_source.activate()();
    swift_unknownObjectRelease(v34);
    v41(v11, v46);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
}

uint64_t sub_1000540D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjectType;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v24 = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v1 - 8);
  v23 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, &qword_100093D98, OS_dispatch_source_ptr);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100055D00(&qword_100093DA0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v12 = v11;
  v13 = sub_100010F40(&qword_100093DA8);
  sub_100054F18((unint64_t *)&unk_100093DB0, &qword_100093DA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v13, v14, v7, v12);
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  v16 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v10, v15);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  ObjectType = swift_getObjectType(v16);
  aBlock[4] = sub_100054360;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_100087F98;
  v18 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v18);
  sub_1000543AC();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v6, v3, v18, ObjectType);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v23);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
  v19 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v24 + 24) = v16;
  swift_unknownObjectRetain(v16);
  swift_unknownObjectRelease(v19);
  return v16;
}

uint64_t sub_100054360()
{
  if (qword_100091310 != -1)
    swift_once(&qword_100091310, sub_100053BA0);
  return sub_100053C1C();
}

uint64_t sub_1000543AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = _swiftEmptyArrayStorage;
  sub_100055D00((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = v1;
  v3 = sub_100010F40((uint64_t *)&unk_100092170);
  sub_100054F18((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

uint64_t sub_100054458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DispatchTimeInterval.never(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_10005449C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000544E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_100054508()
{
  uint64_t v0;

  sub_1000544E4();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Watchdog()
{
  return objc_opt_self(_TtC12SidecarRelay8Watchdog);
}

uint64_t sub_10005454C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    v5 = 0xEA00000000006E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7463656A626FLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10005463C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7463656A626FLL;
  else
    return 0x6974617269707865;
}

uint64_t sub_100054674(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;

  sub_100010F40(&qword_100093E60);
  sub_100056988();
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010F80(a1, a1[3]);
  v14 = sub_100056634();
  sub_100056978((uint64_t)&type metadata for Watchdog.DiagnosticState.Item.CodingKeys, v15, v14);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v19, v4, a4);
  if (!v5)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v18, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v4);
}

_QWORD *sub_10005478C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v7;
  char v8;

  v3 = sub_100010F40(&qword_100093E70);
  __chkstk_darwin(v3);
  v4 = sub_100010F80(a1, a1[3]);
  v5 = sub_100056634();
  sub_10005699C((uint64_t)&type metadata for Watchdog.DiagnosticState.Item.CodingKeys, (uint64_t)&type metadata for Watchdog.DiagnosticState.Item.CodingKeys, v5);
  if (!v1)
  {
    v8 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v8, v3);
    v7 = 1;
    v4 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(&v7, v3);
    sub_100056940();
  }
  sub_100053728();
  return v4;
}

uint64_t sub_1000548C0()
{
  char *v0;

  return sub_10005463C(*v0);
}

uint64_t sub_1000548C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005454C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000548EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100054914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056634();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10005493C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10005478C(a1);
  if (!v2)
  {
    *a2 = v6;
    a2[1] = result;
    a2[2] = v5;
  }
  return result;
}

uint64_t sub_100054968(_QWORD *a1)
{
  uint64_t v1;

  return sub_100054674(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(double *)v1);
}

uint64_t sub_100054984(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x72656D6974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656D6974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_100054A68(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1 & 1);
  Hasher._finalize()();
  sub_1000487F0();
}

uint64_t sub_100054AA4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736D657469;
  else
    return 0x72656D6974;
}

uint64_t sub_100054ACC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  sub_100010F40(&qword_100093D58);
  sub_100056988();
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010F80(a1, a1[3]);
  v12 = sub_100054E88();
  sub_100056978((uint64_t)&type metadata for Watchdog.DiagnosticState.CodingKeys, v13, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v3);
  if (!v4)
  {
    v18 = a3;
    v19 = 1;
    v14 = sub_100010F40(&qword_100093D68);
    v15 = sub_100056670(&qword_100093D70, (void (*)(void))sub_100054EC4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v19, v3, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v3);
}

uint64_t sub_100054C0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  v3 = sub_100010F40(&qword_100093E78);
  __chkstk_darwin(v3);
  v4 = a1[3];
  sub_100010F80(a1, v4);
  v5 = sub_100054E88();
  sub_10005699C((uint64_t)&type metadata for Watchdog.DiagnosticState.CodingKeys, (uint64_t)&type metadata for Watchdog.DiagnosticState.CodingKeys, v5);
  if (v1)
  {
    sub_100053728();
  }
  else
  {
    v10 = 0;
    LOBYTE(v4) = KeyedDecodingContainer.decode(_:forKey:)(&v10);
    v6 = sub_100010F40(&qword_100093D68);
    v9 = 1;
    v7 = sub_100056670(&qword_100093E80, (void (*)(void))sub_1000566D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, &v9, v3, v6, v7);
    sub_100056930();
    sub_100053728();
  }
  return v4 & 1;
}

void sub_100054D70()
{
  char *v0;

  sub_100054A68(*v0);
}

void sub_100054D88(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_1000487F0();
}

uint64_t sub_100054DC0()
{
  char *v0;

  return sub_100054AA4(*v0);
}

uint64_t sub_100054DC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100054984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100054DEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054E88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100054E14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054E88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100054E3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100054C0C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100054E6C(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_100054ACC(a1, *v1, *((_QWORD *)v1 + 1));
}

unint64_t sub_100054E88()
{
  unint64_t result;

  result = qword_100093D60;
  if (!qword_100093D60)
  {
    result = swift_getWitnessTable(&unk_10007305C, &type metadata for Watchdog.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093D60);
  }
  return result;
}

unint64_t sub_100054EC4()
{
  unint64_t result;

  result = qword_100093D78;
  if (!qword_100093D78)
  {
    result = swift_getWitnessTable(&unk_100073034, &type metadata for Watchdog.DiagnosticState.Item);
    atomic_store(result, (unint64_t *)&qword_100093D78);
  }
  return result;
}

uint64_t sub_100054F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100054F10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100054F18(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100010FE0(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_100005E8C();
}

uint64_t sub_100054F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v9;

  v5 = Date.timeIntervalSince(_:)(a2);
  v6 = *(_QWORD *)(a1 + *(int *)(sub_100010F40(&qword_100093D90) + 48));
  ObjectType = swift_getObjectType(v6);
  result = dispatch thunk of CustomStringConvertible.description.getter(ObjectType);
  *a3 = v5;
  *((_QWORD *)a3 + 1) = result;
  *((_QWORD *)a3 + 2) = v9;
  return result;
}

uint64_t sub_100054FD0(uint64_t a1)
{
  return sub_1000550CC(a1, &qword_100093D90);
}

uint64_t sub_100054FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100093D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055024(uint64_t a1)
{
  uint64_t v1;

  return sub_100053CC4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_100055040(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100010F40(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100005E8C();
}

uint64_t sub_100055078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100093D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000550C0(uint64_t a1)
{
  return sub_1000550CC(a1, &qword_100093028);
}

uint64_t sub_1000550CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  if (a1 < 0)
  {
    sub_1000568BC();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v4 = sub_100010F40(a2);
      v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v4);
      v5[2] = a1;
    }
    else
    {
      v5 = _swiftEmptyArrayStorage;
    }
    sub_100010F40(a2);
    sub_1000569F4();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10005517C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  if (a2 < 0)
  {
    sub_1000568BC();
    v8 = "UnsafeMutablePointer.initialize with negative count";
    v9 = 51;
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
    {
      sub_100010F40(&qword_1000930D0);
      v4 = sub_1000569B0();
      return sub_1000568E4(v4);
    }
    sub_1000568BC();
    v8 = "UnsafeMutablePointer.initialize overlapping range";
    v9 = 49;
  }
  result = sub_1000569C4((uint64_t)"Fatal error", 11, 2, (uint64_t)v8, v9, v6, (uint64_t)"Swift/UnsafePointer.swift", v7, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_100055230(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055300(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000553CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_100010F40(&qword_100093DF8);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000554BC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 80 * a2 <= a1 || a1 + 80 * a2 <= a3)
    {
      sub_100010F40(&qword_100093E08);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000555AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_100010F40(&qword_100093E18);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055698(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055764(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_1000568BC();
    v14 = "UnsafeMutablePointer.initialize with negative count";
    v15 = 51;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(sub_100010F40(a4) - 8) + 72) * a2;
    v7 = a3 + v6;
    v8 = a1 + v6;
    if (v7 <= a1 || v8 <= a3)
    {
      v10 = sub_1000569B0();
      return sub_1000568E4(v10);
    }
    sub_1000568BC();
    v14 = "UnsafeMutablePointer.initialize overlapping range";
    v15 = 49;
  }
  result = sub_1000569C4((uint64_t)"Fatal error", 11, 2, (uint64_t)v14, v15, v12, (uint64_t)"Swift/UnsafePointer.swift", v13, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100055820(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_100010F40(&qword_100093E40);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055910(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_100010F40(&qword_100093DE0);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055A00(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void sub_100055AF4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100055EC4();
  *v0 = v1;
}

void sub_100055B28()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100055F80();
  *v0 = v1;
}

void sub_100055B5C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100056098();
  *v0 = v1;
}

void sub_100055B90()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100055E24();
  *v0 = v1;
}

void sub_100055BC4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100056098();
  *v0 = v1;
}

char *sub_100055BF8(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100055D3C(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_100055C14()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100055E24();
  *v0 = v1;
}

void sub_100055C48()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100055EC4();
  *v0 = v1;
}

void sub_100055C7C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100056098();
  *v0 = v1;
}

void sub_100055CB0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100056098();
  *v0 = v1;
}

size_t sub_100055CE4(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_10005614C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_100055D00(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100005E8C();
}

char *sub_100055D3C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100010F40(&qword_100093E00);
    v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000395CC(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000554BC((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

void sub_100055E24()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000568D0();
  if ((v5 & 1) != 0)
  {
    sub_100056920();
    if (v6 != v7)
    {
      sub_100056A08();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100056910();
    }
  }
  sub_100056968();
  if (v4)
  {
    v13 = sub_100056960(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100014AC4(v13, 32 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000569D0((uint64_t)(v15 - 32) / 32);
  }
  v16 = sub_100056950();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_1000130A8();
  sub_10004889C();
}

void sub_100055EC4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000568D0();
  if ((v5 & 1) != 0)
  {
    sub_100056920();
    if (v6 != v7)
    {
      sub_100056A08();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100056910();
    }
  }
  sub_100056968();
  if (v4)
  {
    v13 = sub_100056960(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100014AC4(v13, 16 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000569D0((uint64_t)(v15 - 32) / 16);
  }
  v16 = sub_100056950();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_1000130A8();
  sub_10004889C();
}

void sub_100055F64()
{
  sub_100055F80();
}

void sub_100055F80()
{
  uint64_t v0;
  void (*v1)(unint64_t, uint64_t, unint64_t);
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  sub_1000568D0();
  if ((v6 & 1) != 0)
  {
    sub_100056920();
    if (v10 != v11)
    {
      sub_100056A08();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_100056910();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_100056960(v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(sub_100010F40(v2) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
    goto LABEL_23;
  sub_1000569D0((uint64_t)(v20 - v18) / v16);
LABEL_18:
  sub_100010F40(v2);
  sub_1000569F4();
  v23 = (unint64_t)v19 + v22;
  v24 = v0 + v22;
  if ((v3 & 1) != 0)
  {
    v1(v24, v12, v23);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_100055764(v24, v12, v23, v2);
  }
  sub_1000130A8();
}

void sub_100056098()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000568D0();
  if ((v5 & 1) != 0)
  {
    sub_100056920();
    if (v6 != v7)
    {
      sub_100056A08();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100056910();
    }
  }
  sub_100056968();
  if (v4)
  {
    v13 = sub_100056960(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100014AC4(v13, 24 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000569D0((uint64_t)(v15 - 32) / 24);
  }
  v16 = sub_100056950();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_1000130A8();
}

size_t sub_10005614C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100010F40(&qword_100093DC8);
  v11 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_24;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_1000397DC(v19, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100055A00(v19, v8, (unint64_t)v15 + v18);
  }
  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_10005628C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_100054F54(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for Watchdog.DiagnosticState.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for Watchdog.DiagnosticState.Item(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for Watchdog.DiagnosticState.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for Watchdog.DiagnosticState.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Watchdog.DiagnosticState.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Watchdog.DiagnosticState.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.Item()
{
  return &type metadata for Watchdog.DiagnosticState.Item;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.CodingKeys()
{
  return &type metadata for Watchdog.DiagnosticState.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for Watchdog.DiagnosticState(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t assignWithTake for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Watchdog.DiagnosticState(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Watchdog.DiagnosticState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState()
{
  return &type metadata for Watchdog.DiagnosticState;
}

unint64_t sub_100056578()
{
  unint64_t result;

  result = qword_100093E48;
  if (!qword_100093E48)
  {
    result = swift_getWitnessTable(&unk_100072FE4, &type metadata for Watchdog.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E48);
  }
  return result;
}

unint64_t sub_1000565B8()
{
  unint64_t result;

  result = qword_100093E50;
  if (!qword_100093E50)
  {
    result = swift_getWitnessTable(&unk_100072F54, &type metadata for Watchdog.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E50);
  }
  return result;
}

unint64_t sub_1000565F8()
{
  unint64_t result;

  result = qword_100093E58;
  if (!qword_100093E58)
  {
    result = swift_getWitnessTable(&unk_100072F7C, &type metadata for Watchdog.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E58);
  }
  return result;
}

unint64_t sub_100056634()
{
  unint64_t result;

  result = qword_100093E68;
  if (!qword_100093E68)
  {
    result = swift_getWitnessTable(&unk_100073164, &type metadata for Watchdog.DiagnosticState.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E68);
  }
  return result;
}

uint64_t sub_100056670(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100010FE0(&qword_100093D68);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000566D8()
{
  unint64_t result;

  result = qword_100093E88;
  if (!qword_100093E88)
  {
    result = swift_getWitnessTable(&unk_10007300C, &type metadata for Watchdog.DiagnosticState.Item);
    atomic_store(result, (unint64_t *)&qword_100093E88);
  }
  return result;
}

uint64_t _s12SidecarRelay8WatchdogC15DiagnosticStateV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100056760 + 4 * byte_100072E8D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100056794 + 4 * byte_100072E88[v4]))();
}

uint64_t sub_100056794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005679C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000567A4);
  return result;
}

uint64_t sub_1000567B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000567B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000567BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000567C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.Item.CodingKeys()
{
  return &type metadata for Watchdog.DiagnosticState.Item.CodingKeys;
}

unint64_t sub_1000567E4()
{
  unint64_t result;

  result = qword_100093E90;
  if (!qword_100093E90)
  {
    result = swift_getWitnessTable(&unk_10007313C, &type metadata for Watchdog.DiagnosticState.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E90);
  }
  return result;
}

unint64_t sub_100056824()
{
  unint64_t result;

  result = qword_100093E98;
  if (!qword_100093E98)
  {
    result = swift_getWitnessTable(&unk_1000730AC, &type metadata for Watchdog.DiagnosticState.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093E98);
  }
  return result;
}

unint64_t sub_100056864()
{
  unint64_t result;

  result = qword_100093EA0;
  if (!qword_100093EA0)
  {
    result = swift_getWitnessTable(&unk_1000730D4, &type metadata for Watchdog.DiagnosticState.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093EA0);
  }
  return result;
}

uint64_t sub_1000568E4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000568F4()
{
  return Date.init()();
}

uint64_t sub_100056930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100056940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100056950()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_100056960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100010F40(a5);
}

uint64_t sub_100056978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10005699C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1000569A8()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000569B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000569C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

void sub_1000569D0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t sub_1000569DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100056A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000124AC(a1, a2, 1, v2);
}

id sub_100056A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;

  v2 = v1;
  v4 = swift_retain(a1);
  v5 = sub_100056D58(v4, v2);
  v6 = v5;
  if (v5)
  {
    v7 = (Class)v5;
    RapportRemoteDisplayDevice.cameraCapabilities.getter();
    if (v8)
    {
      v9 = v8;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v9);
      -[objc_class setCameraCapabilities:](v7, "setCameraCapabilities:", isa);

      v7 = isa;
    }

  }
  swift_release(a1);
  return v6;
}

uint64_t sub_100056AD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v4 = sub_100010F40(&qword_1000918F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100010F80(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v7, v8);
  v11 = v10;
  UUID.init(uuidString:)(v9);
  swift_bridgeObjectRelease(v11);
  v12 = type metadata accessor for UUID(0);
  if (sub_1000124B8((uint64_t)v6, 1, v12) == 1)
  {
    sub_10004A058((uint64_t)v6);
    if (qword_1000912D0 != -1)
      swift_once(&qword_1000912D0, sub_100026680);
    v13 = type metadata accessor for Logger(0);
    sub_100006CAC(v13, (uint64_t)qword_10009A198);
    v14 = sub_100014928((uint64_t)a1, (uint64_t)v29);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v28 = v18;
      *(_DWORD *)v17 = 136446210;
      sub_100014928((uint64_t)v29, (uint64_t)&v26);
      v19 = sub_100010F40(&qword_100093EB0);
      v20 = String.init<A>(describing:)(&v26, v19);
      v22 = v21;
      v26 = sub_100015FFC(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v22);
      sub_100012B68(v29);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No Persistent ID for Rapport Device '%{public}s'", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      sub_100012B68(v29);
    }

    v23 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a2, v6, v12);
    v23 = 0;
  }
  return sub_1000124AC(a2, v23, 1, v12);
}

id sub_100056D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  Class v25;
  id v26;
  void (__cdecl *v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v34;
  Class isa;
  uint64_t v36;
  _QWORD v37[5];

  v4 = sub_100010F40(&qword_1000918F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[3] = type metadata accessor for RapportRemoteDisplayDevice();
  v37[4] = &protocol witness table for RapportRemoteDisplayDevice;
  v37[0] = a1;
  sub_100056AD0(v37, (uint64_t)v6);
  if (sub_1000124B8((uint64_t)v6, 1, v7) == 1)
  {
    sub_10004A058((uint64_t)v6);
    v11 = 0;
  }
  else
  {
    v36 = v8;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    off_100094470();
    v13 = v12;
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    off_100094478();
    v16 = v15;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    off_1000944A0();
    v18 = (id)RPVersionToSourceVersionString();
    if (v18)
    {
      v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

    }
    else
    {
      v21 = 0xE000000000000000;
    }
    v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a2));
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v24 = v22;
    v25 = isa;
    v26 = objc_msgSend(v24, "initWithIdentifier:model:name:version:", isa, v14, v17, v23);

    v27 = (void (__cdecl *)())off_100094498;
    v11 = v26;
    v27();
    objc_msgSend(v11, "setStatus:", v28);
    off_100094448();
    objc_msgSend(v11, "setCameraState:", v29);
    off_100094468();
    v31 = v30;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v11, "setMediaRouteIdentifier:", v32);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v7);
  }
  sub_100012B68(v37);
  return v11;
}

id sub_100057030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  id v12;
  NSString v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  NSString v18;
  void *v19;
  Class v20;
  void *v21;
  id v22;
  NSString v23;
  NSString v25;
  Class isa;
  uint64_t v27;
  _QWORD v28[5];

  v4 = sub_100010F40(&qword_1000918F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = type metadata accessor for CompanionLinkDevice(0);
  v28[4] = &protocol witness table for CompanionLinkDevice;
  v11 = sub_10001F478(v28);
  sub_10001C548(a1, (uint64_t)v11);
  sub_100056AD0(v28, (uint64_t)v6);
  if (sub_1000124B8((uint64_t)v6, 1, v7) == 1)
  {
    sub_10004A058((uint64_t)v6);
    v12 = 0;
  }
  else
  {
    v27 = v8;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    sub_1000132D4((uint64_t (*)(uint64_t, uint64_t))off_100093F88[0]);
    v25 = sub_1000572CC();
    sub_1000132F4();
    sub_1000132D4((uint64_t (*)(uint64_t, uint64_t))off_100093F90[0]);
    v13 = sub_1000572CC();
    sub_1000132F4();
    v14 = sub_1000132D4((uint64_t (*)(uint64_t, uint64_t))off_100093FB8);
    v15 = (id)RPVersionToSourceVersionString(v14);
    if (v15)
    {
      v16 = v15;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

    }
    v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a2));
    v18 = String._bridgeToObjectiveC()();
    sub_1000132F4();
    v19 = v17;
    v21 = v25;
    v20 = isa;
    v22 = objc_msgSend(v19, "initWithIdentifier:model:name:version:", isa, v25, v13, v18);

    v12 = v22;
    objc_msgSend(v12, "setStatus:", CompanionLinkDevice.statusFlags.getter());
    objc_msgSend(v12, "setCameraState:", sub_1000132D4((uint64_t (*)(uint64_t, uint64_t))off_100093F60[0]));
    sub_1000132D4((uint64_t (*)(uint64_t, uint64_t))off_100093F80[0]);
    v23 = sub_1000572CC();
    sub_1000132F4();
    objc_msgSend(v12, "setMediaRouteIdentifier:", v23);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
  }
  sub_100012B68(v28);
  return v12;
}

NSString sub_1000572CC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t CompanionLinkDevice.id.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  sub_10001322C();
  v0 = sub_100059DA0();
  return v1(v0);
}

id CompanionLinkDevice._endpoint.getter()
{
  uint64_t v0;

  v0 = sub_100017974();
  return (id)sub_100059D94(v0);
}

uint64_t type metadata accessor for CompanionLinkDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_100094080;
  if (!qword_100094080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompanionLinkDevice);
  return result;
}

id CompanionLinkDevice.statusFlags.getter()
{
  uint64_t v0;

  v0 = sub_100017974();
  return objc_msgSend((id)sub_100059D94(v0), "statusFlags");
}

uint64_t CompanionLinkDevice.init(id:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v2 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkDevice), "init");
  v3 = UUID.uuidString.getter(v2);
  sub_1000592EC(v3, v4, v2);

  *(_QWORD *)(a1 + *(int *)(sub_100017974() + 20)) = v2;
  sub_10001322C();
  v5 = sub_100059DA0();
  return v6(v5);
}

void sub_1000573EC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;

  sub_100010F40(&qword_1000918F8);
  sub_100013118();
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001322C();
  sub_100059DE4();
  __chkstk_darwin(v10);
  sub_10001795C();
  v11 = sub_100017974();
  sub_100013118();
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1;
  sub_100059420(v15, (SEL *)&selRef_idsDeviceIdentifier);
  if (v17)
  {
    v18 = v17;
    UUID.init(uuidString:)(v16);
    swift_bridgeObjectRelease(v18);
    if (sub_1000124B8((uint64_t)v9, 1, v2) != 1)
    {
      v20 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v20(v3, v9, v2);
      *(_QWORD *)&v14[*(int *)(v11 + 20)] = v15;
      v20(v14, v3, v2);
      sub_10001C548((uint64_t)v14, a2);
      v19 = 0;
      goto LABEL_7;
    }

    sub_100055040((uint64_t)v9, &qword_1000918F8);
  }
  else
  {

  }
  v19 = 1;
LABEL_7:
  sub_1000124AC(a2, v19, 1, v11);
  sub_100012D28();
}

void sub_10005754C()
{
  uint64_t v0;
  id v1;

  v0 = sub_100017974();
  v1 = objc_msgSend((id)sub_100059D94(v0), "accountID");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  sub_100059DA0();
  sub_100020E78();
}

void sub_10005759C()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "accountID");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  sub_100059DA0();
  sub_100020E78();
}

uint64_t sub_1000575E8()
{
  uint64_t v0;

  v0 = sub_100017974();
  return (int)objc_msgSend((id)sub_100059D94(v0), "activityLevel");
}

uint64_t sub_100057610()
{
  uint64_t v0;

  return (int)objc_msgSend(*(id *)(v0 + 16), "activityLevel");
}

uint64_t sub_100057634()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_100017974();
  if (objc_msgSend((id)sub_100059D94(v1), "activityLevelTimeStamp"))
  {
    sub_100059EA4();

  }
  sub_1000569A8();
  v2 = sub_100059EBC();
  return sub_100059E0C(v2, v3, v4, v5);
}

uint64_t sub_100057688()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (objc_msgSend(v0[2], "activityLevelTimeStamp"))
  {
    sub_100059EA4();

  }
  sub_1000569A8();
  v1 = sub_100059EBC();
  return sub_100059E0C(v1, v2, v3, v4);
}

void sub_1000576D8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100017974();
  if (objc_msgSend((id)sub_100059D94(v0), "homeKitUserIdentifiers"))
  {
    v1 = sub_10001322C();
    sub_100059E00(v1);
    sub_100059DC0();
  }
  sub_100005E8C();
}

void sub_10005772C()
{
  uint64_t v0;
  uint64_t v1;

  if (objc_msgSend(*(id *)(v0 + 16), "homeKitUserIdentifiers"))
  {
    v1 = sub_10001322C();
    sub_100059E00(v1);
    sub_100059DC0();
  }
  sub_100005E8C();
}

void sub_10005777C()
{
  sub_10005789C((SEL *)&selRef_identifier);
}

void sub_100057788()
{
  sub_1000578F4((SEL *)&selRef_identifier);
}

void sub_100057794()
{
  sub_10005789C((SEL *)&selRef_idsDeviceIdentifier);
}

void sub_1000577A0()
{
  sub_1000578F4((SEL *)&selRef_idsDeviceIdentifier);
}

void sub_1000577AC()
{
  sub_10005789C((SEL *)&selRef_model);
}

void sub_1000577B8()
{
  sub_1000578F4((SEL *)&selRef_model);
}

void sub_1000577C4()
{
  sub_10005789C((SEL *)&selRef_name);
}

void sub_1000577D0()
{
  sub_1000578F4((SEL *)&selRef_name);
}

void sub_1000577DC()
{
  uint64_t v0;
  id v1;

  v0 = sub_100017974();
  v1 = objc_msgSend((id)sub_100059D94(v0), "serviceInfo");
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100059DC0();
  sub_100005E8C();
}

void sub_100057838()
{
  uint64_t v0;

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(*(id *)(v0 + 16), "serviceInfo"), &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100059DC0();
  sub_100005E8C();
}

void sub_100057890()
{
  sub_10005789C((SEL *)&selRef_serviceType);
}

void sub_10005789C(SEL *a1)
{
  uint64_t v2;
  id v3;

  v2 = sub_100017974();
  v3 = objc_msgSend((id)sub_100059D94(v2), *a1);
  if (v3)
  {
    sub_100059DB8((uint64_t)v3);
    sub_100059D68();
  }
  else
  {
    sub_100059E84();
  }
  sub_100059DA0();
  sub_100020E78();
}

void sub_1000578E8()
{
  sub_1000578F4((SEL *)&selRef_serviceType);
}

void sub_1000578F4(SEL *a1)
{
  uint64_t v1;
  id v2;

  v2 = objc_msgSend(*(id *)(v1 + 16), *a1);
  if (v2)
  {
    sub_100059DB8((uint64_t)v2);
    sub_100059D68();
  }
  else
  {
    sub_100059E84();
  }
  sub_100059DA0();
  sub_100020E78();
}

void sub_10005793C()
{
  uint64_t v0;
  id v1;

  v0 = sub_100017974();
  v1 = objc_msgSend((id)sub_100059D94(v0), "serviceTypes");
  if (v1)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);
    sub_100059DC0();
  }
  sub_100005E8C();
}

void sub_100057994()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "serviceTypes");
  if (v1)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);
    sub_100059DC0();
  }
  sub_100005E8C();
}

CompanionLink::RapportSourceVersion sub_1000579EC()
{
  uint64_t v0;
  id v1;
  Swift::String v3;

  v0 = sub_100017974();
  v1 = objc_msgSend((id)sub_100059D94(v0), "sourceVersion");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  else
  {
    sub_100059E84();
  }
  v3._countAndFlagsBits = sub_100059DA0();
  return sub_100059DD8(v3);
}

CompanionLink::RapportSourceVersion sub_100057A38()
{
  uint64_t v0;
  id v1;
  Swift::String v3;

  v1 = objc_msgSend(*(id *)(v0 + 16), "sourceVersion");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  else
  {
    sub_100059E84();
  }
  v3._countAndFlagsBits = sub_100059DA0();
  return sub_100059DD8(v3);
}

uint64_t static CompanionLinkDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  id v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  char v72;
  unint64_t v73;
  id v74;
  NSDictionary v75;
  uint64_t v76;
  id v77;
  NSDictionary v78;
  Class v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  char v85;
  uint64_t v86;
  id v87;
  void *v88;
  _QWORD *v89;
  id v90;
  void *v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  CompanionLink::RapportSourceVersion v98;
  id v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;

  v6 = sub_1000569A8();
  v107 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100048930();
  v104 = v7;
  v8 = sub_100010F40(&qword_100093F00);
  sub_100013118();
  __chkstk_darwin(v9);
  sub_100048930();
  v110 = v10;
  sub_100010F40(&qword_100093D88);
  sub_100013118();
  v12 = __chkstk_darwin(v11);
  v108 = (uint64_t)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v109 = (char *)&v102 - v15;
  __chkstk_darwin(v14);
  v111 = (uint64_t)&v102 - v16;
  v17 = sub_100017974();
  v106 = *(int *)(v17 + 20);
  v18 = *(void **)(a1 + v106);
  v19 = objc_msgSend(v18, "flags");
  v105 = *(int *)(v17 + 20);
  v20 = *(void **)(a2 + v105);
  if (v19 != objc_msgSend(v20, "flags"))
    return 0;
  v21 = objc_msgSend(v18, "accountID");
  if (v21)
  {
    v103 = sub_100059D74((uint64_t)v21);
    v23 = v22;

  }
  else
  {
    v103 = 0;
    v23 = 0;
  }
  v24 = sub_100059D50((uint64_t)v21, "accountID");
  if (!v24)
  {
    sub_100059E6C();
    if (!v23)
      goto LABEL_19;
    goto LABEL_17;
  }
  v25 = sub_100059DF8((uint64_t)v24);
  v27 = v26;

  if (!v23)
  {
    sub_100059E6C();
    if (!v27)
      goto LABEL_19;
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v27)
    goto LABEL_17;
  sub_100059E6C();
  v28 = v103 == v25 && v23 == v27;
  if (v28)
  {
    sub_10001327C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v103, v23, v25, v27, 0);
    sub_10001327C();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return 0;
  }
LABEL_19:
  v30 = objc_msgSend(v18, "activityLevel");
  if (v30 != objc_msgSend(v20, "activityLevel"))
    return 0;
  v31 = v111;
  sub_100057634();
  v32 = (uint64_t)v109;
  sub_100057634();
  v33 = v110;
  v34 = v110 + *(int *)(v8 + 48);
  sub_10005933C(v31, v110);
  sub_10005933C(v32, v34);
  sub_100059E44(v33);
  if (!v28)
  {
    v37 = v108;
    sub_10005933C(v33, v108);
    sub_100059E44(v34);
    if (!v38)
    {
      v39 = v107;
      v40 = v32;
      v41 = v104;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v104, v34, a1);
      sub_100055D00(&qword_100093F10, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v43 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v41, a1, v42);
      v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v44(v41, a1);
      v35 = &qword_100093D88;
      sub_100059E14(v40);
      sub_100059E14(v111);
      v44(v37, a1);
      sub_100059E14(v33);
      if ((v43 & 1) == 0)
        return 0;
      goto LABEL_30;
    }
    sub_100055040(v32, &qword_100093D88);
    sub_100055040(v31, &qword_100093D88);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v37, a1);
LABEL_28:
    sub_100055040(v33, &qword_100093F00);
    return 0;
  }
  v35 = &qword_100093D88;
  sub_100059E14(v32);
  sub_100059E14(v31);
  sub_100059E44(v34);
  if (!v28)
    goto LABEL_28;
  sub_100055040(v33, &qword_100093D88);
LABEL_30:
  v45 = sub_100059D3C(v36, "homeKitUserIdentifiers");
  if (v45)
  {
    v46 = sub_10001322C();
    sub_100059E00(v46);
    sub_100059DC0();
  }
  else
  {
    v35 = _swiftEmptyArrayStorage;
  }
  v47 = sub_100059D50((uint64_t)v45, "homeKitUserIdentifiers");
  if (v47)
  {
    v48 = v47;
    v49 = sub_10001322C();
    v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

  }
  else
  {
    v50 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v51 = sub_100058328((uint64_t)v35, v50);
  sub_1000132F4();
  v52 = sub_1000132A0();
  if ((v51 & 1) == 0)
    return 0;
  v53 = sub_100059D3C(v52, "identifier");
  if (v53)
  {
    sub_100059D74((uint64_t)v53);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  v55 = sub_100059D50(v54, "identifier");
  if (v55)
  {
    sub_100059DF8((uint64_t)v55);
    sub_100059D7C();
  }
  else
  {
    sub_100059E60();
  }
  if ((char **)v50 == &stru_10008EFF8.name && v35 == (uint64_t *)v51)
  {
    v57 = sub_100059D88();
  }
  else
  {
    v50 = sub_100059D24();
    sub_1000132F4();
    v57 = sub_10001300C();
    if ((v50 & 1) == 0)
      return 0;
  }
  v58 = sub_100059D3C(v57, "idsDeviceIdentifier");
  if (v58)
  {
    sub_100059D74((uint64_t)v58);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  v60 = sub_100059D50(v59, "idsDeviceIdentifier");
  if (v60)
  {
    sub_100059DF8((uint64_t)v60);
    sub_100059D7C();
  }
  else
  {
    sub_100059E60();
  }
  if ((char **)v50 == &stru_10008EFF8.name && v35 == (uint64_t *)v51)
  {
    v62 = sub_100059D88();
  }
  else
  {
    v50 = sub_100059D24();
    sub_1000132F4();
    v62 = sub_10001300C();
    if ((v50 & 1) == 0)
      return 0;
  }
  v63 = sub_100059D3C(v62, "model");
  if (v63)
  {
    sub_100059D74((uint64_t)v63);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  v65 = sub_100059D50(v64, "model");
  if (v65)
  {
    sub_100059DF8((uint64_t)v65);
    sub_100059D7C();
  }
  else
  {
    sub_100059E60();
  }
  if ((char **)v50 == &stru_10008EFF8.name && v35 == (uint64_t *)v51)
  {
    v67 = sub_100059D88();
  }
  else
  {
    v50 = sub_100059D24();
    sub_1000132F4();
    v67 = sub_10001300C();
    if ((v50 & 1) == 0)
      return 0;
  }
  v68 = sub_100059D3C(v67, "name");
  if (v68)
  {
    sub_100059D74((uint64_t)v68);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  v70 = sub_100059D50(v69, "name");
  if (v70)
  {
    sub_100059DF8((uint64_t)v70);
    sub_100059D7C();
  }
  else
  {
    sub_100059E60();
  }
  if ((char **)v50 == &stru_10008EFF8.name && v35 == (uint64_t *)v51)
  {
    sub_100059D88();
  }
  else
  {
    v72 = sub_100059D24();
    sub_1000132F4();
    sub_10001300C();
    if ((v72 & 1) == 0)
      return 0;
  }
  v73 = sub_100059384();
  v74 = sub_100059D3C(v73, "serviceInfo");
  sub_100059E1C((uint64_t)v74);

  v75.super.isa = sub_100059E2C().super.isa;
  v76 = swift_bridgeObjectRelease();
  v77 = sub_100059D50(v76, "serviceInfo");
  sub_100059E1C((uint64_t)v77);

  v78.super.isa = sub_100059E2C().super.isa;
  swift_bridgeObjectRelease();
  v79 = (Class)static NSObject.== infix(_:_:)(v75.super.isa, v78.super.isa);

  if ((v79 & 1) != 0)
  {
    v81 = sub_100059D3C(v80, "serviceType");
    if (v81)
    {
      sub_100059D74((uint64_t)v81);
      sub_100059D44();
    }
    else
    {
      sub_100059DAC();
    }
    v83 = sub_100059D50(v82, "serviceType");
    if (v83)
    {
      sub_100059DF8((uint64_t)v83);
      sub_100059D7C();
    }
    else
    {
      sub_100059E60();
    }
    if ((char **)v75.super.isa == &stru_10008EFF8.name && v79 == v78.super.isa)
    {
      v86 = sub_100059D88();
    }
    else
    {
      v85 = sub_100059D24();
      sub_1000132F4();
      v86 = sub_10001300C();
      if ((v85 & 1) == 0)
        return 0;
    }
    v87 = sub_100059D3C(v86, "serviceTypes");
    if (v87)
    {
      v88 = v87;
      v89 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v87, &type metadata for String);

    }
    else
    {
      v89 = _swiftEmptyArrayStorage;
    }
    v90 = sub_100059D50((uint64_t)v87, "serviceTypes");
    if (v90)
    {
      v91 = v90;
      v92 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v90, &type metadata for String);

    }
    else
    {
      v92 = _swiftEmptyArrayStorage;
    }
    v93 = sub_1000584AC(v89, v92);
    sub_1000132F4();
    v94 = sub_1000132A0();
    if ((v93 & 1) != 0)
    {
      v95 = sub_100059D3C(v94, "statusFlags");
      v96 = sub_100059D50((uint64_t)v95, "statusFlags");
      if (v95 == v96)
      {
        v97 = sub_100059D3C((uint64_t)v96, "sourceVersion");
        if (v97)
        {
          sub_100059ED0((uint64_t)v97);
          sub_100059EB0();
        }
        else
        {
          v95 = 0;
        }
        v98.rawValue = sub_100059E9C((uint64_t)v95).rawValue;
        v99 = sub_100059D50(v98.rawValue, "sourceVersion");
        if (v99)
        {
          v100 = sub_100059ED0((uint64_t)v99);

        }
        else
        {
          v100 = 0;
        }
        if (v98.rawValue == sub_100059E9C(v100).rawValue)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100058328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for UUID(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_100055D00(&qword_100092F90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1000584AC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  if (result != v7 || v6 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, v7, v8, 0);
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v11 = a1 + 7;
  v12 = a2 + 7;
  v13 = 1;
  while (v13 < v2)
  {
    result = *(v11 - 1);
    v14 = *v11;
    v15 = *(v12 - 1);
    v16 = *v12;
    if (result != v15 || v14 != v16)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v15, v16, 0);
      if ((result & 1) == 0)
        return 0;
    }
    ++v13;
    v11 += 2;
    v12 += 2;
    if (v2 == v13)
      return 1;
  }
  __break(1u);
  return result;
}

void CompanionLinkDevice.hash(into:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  Class isa;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  CompanionLink::RapportSourceVersion v50;
  uint64_t v51;
  uint64_t v52;

  sub_1000569A8();
  sub_100059DE4();
  __chkstk_darwin(v6);
  sub_10001795C();
  sub_100010F40(&qword_100093D88);
  sub_100013118();
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v51 - v11;
  v52 = *(int *)(sub_100017974() + 20);
  v13 = *(void **)(v1 + v52);
  Hasher._combine(_:)((Swift::UInt32)objc_msgSend(v13, "flags"));
  v14 = objc_msgSend(v13, "accountID");
  if (v14)
  {
    v15 = sub_100059E3C((uint64_t)v14);
    v51 = v2;
    v16 = v4;
    v17 = v15;
    v19 = v18;

    sub_100059E7C(1u);
    swift_bridgeObjectRetain();
    v20 = v17;
    v4 = v16;
    v2 = v51;
    String.hash(into:)(a1, v20, v19);
    swift_bridgeObjectRelease_n(v19, 2);
  }
  else
  {
    sub_100059E7C(0);
  }
  sub_100059ED8((int)objc_msgSend(v13, "activityLevel"));
  sub_100057634();
  sub_10005933C((uint64_t)v12, (uint64_t)v10);
  if (sub_1000124B8((uint64_t)v10, 1, v2) == 1)
  {
    sub_100059E7C(0);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v3, v10, v2);
    sub_100059E7C(1u);
    sub_100055D00(&qword_100093F18, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v2, v21);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  }
  sub_100055040((uint64_t)v12, &qword_100093D88);
  v23 = sub_100059D3C(v22, "homeKitUserIdentifiers");
  if (v23)
  {
    v24 = v23;
    v25 = sub_10001322C();
    v26 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

  }
  else
  {
    v26 = _swiftEmptyArrayStorage;
  }
  sub_1000594F4((uint64_t)a1, (uint64_t)v26);
  v27 = sub_1000132A0();
  v28 = sub_100059D3C(v27, "identifier");
  if (v28)
  {
    sub_100059D74((uint64_t)v28);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  sub_100059D58();
  v29 = sub_1000132F4();
  v30 = sub_100059D3C(v29, "idsDeviceIdentifier");
  if (v30)
  {
    sub_100059D74((uint64_t)v30);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  sub_100059D58();
  v31 = sub_1000132F4();
  v32 = sub_100059D3C(v31, "model");
  if (v32)
  {
    sub_100059D74((uint64_t)v32);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  sub_100059D58();
  v33 = sub_1000132F4();
  v34 = sub_100059D3C(v33, "name");
  if (v34)
  {
    sub_100059D74((uint64_t)v34);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  sub_100059D58();
  v35 = sub_1000132F4();
  v36 = sub_100059D3C(v35, "serviceInfo");
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSObject.hash(into:)(a1);

  v39 = sub_100059D3C(v38, "serviceType");
  if (v39)
  {
    sub_100059D74((uint64_t)v39);
    sub_100059D44();
  }
  else
  {
    sub_100059DAC();
  }
  sub_100059D58();
  v40 = sub_1000132F4();
  v41 = sub_100059D3C(v40, "serviceTypes");
  if (v41)
  {
    v42 = v41;
    v43 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for String);

  }
  else
  {
    v43 = _swiftEmptyArrayStorage;
  }
  v44 = sub_100059DA0();
  sub_100059480(v44, v45);
  v46 = sub_1000132F4();
  v47 = sub_100059D3C(v46, "statusFlags");
  sub_100059ED8((Swift::UInt)v47);
  v49 = sub_100059D3C(v48, "sourceVersion");
  if (v49)
  {
    sub_100059ED0((uint64_t)v49);
    sub_100059EB0();
  }
  else
  {
    v43 = 0;
  }
  v50.rawValue = sub_100059E9C((uint64_t)v43).rawValue;
  sub_100059ED8(v50.rawValue);
  sub_100012D28();
}

void CompanionLinkDevice.hashValue.getter(uint64_t a1)
{
  _BYTE v1[72];

  sub_100048850(a1);
  CompanionLinkDevice.hash(into:)(v1);
  Hasher._finalize()();
  sub_1000487F0();
}

Swift::Int sub_100058A00(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  CompanionLinkDevice.hash(into:)(v2);
  return Hasher._finalize()();
}

uint64_t CompanionLinkDevice.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  CompanionLink::RapportSourceVersion v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v22;
  void *v23;

  v2 = sub_100017974();
  v3 = sub_100059D50(v2, "description");
  sub_100059E3C((uint64_t)v3);
  sub_100059E90();
  v22 = v0;
  v23 = v1;
  v5 = sub_100059D50(v4, "statusFlags");
  v6 = RPStatusFlagsCopyDescription((unint64_t)v5);
  sub_100059E3C((uint64_t)v6);
  sub_100059E90();
  v7._countAndFlagsBits = v0;
  v7._object = v1;
  String.append(_:)(v7);
  sub_1000132A0();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3C204653202CLL;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10 = sub_10001327C();
  v11 = sub_100059D50(v10, "sourceVersion");
  if (v11)
  {
    sub_100059DB8((uint64_t)v11);
    sub_100059D68();
  }
  else
  {
    sub_100059E84();
  }
  v12._countAndFlagsBits = sub_100059DA0();
  v13.rawValue = RapportSourceVersion.init(stringValue:)(v12).rawValue;
  v14 = (id)RPVersionToSourceVersionString(v13.rawValue);
  if (v14)
  {
    v15 = sub_100059E3C((uint64_t)v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = (void *)0xE000000000000000;
  }
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  sub_100012E98();
  v19._countAndFlagsBits = 39;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x27205653202CLL;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  sub_100012E98();
  return v22;
}

void sub_100058BA8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v3 = a1 == 6580577 && a2 == 0xE300000000000000;
  if (!v3 && (sub_100059CEC(6580577, 0xE300000000000000) & 1) == 0)
  {
    v5 = a1 == 25705 && a2 == 0xE200000000000000;
    if (!v5 && (sub_100059CEC(25705, 0xE200000000000000) & 1) == 0)
    {
      v6 = a1 == 7562345 && a2 == 0xE300000000000000;
      if (!v6 && (sub_100059CEC(7562345, 0xE300000000000000) & 1) == 0)
      {
        v7 = a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000;
        if (!v7 && (sub_100059CEC(0x6C65646F6DLL, 0xE500000000000000) & 1) == 0)
        {
          v8 = a1 == 1701667182 && a2 == 0xE400000000000000;
          if (!v8 && (sub_100059CEC(1701667182, 0xE400000000000000) & 1) == 0)
          {
            v9 = a1 == 2020569712 && a2 == 0xE400000000000000;
            if (!v9 && (sub_100059CEC(2020569712, 0xE400000000000000) & 1) == 0)
            {
              v10 = a1 == 1868983913 && a2 == 0xE400000000000000;
              if (!v10 && (sub_100059CEC(1868983913, 0xE400000000000000) & 1) == 0)
              {
                v11 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
                if (!v11 && (sub_100059CEC(0x65636976726573, 0xE700000000000000) & 1) == 0)
                {
                  v12 = a1 == 0x7365636976726573 && a2 == 0xE800000000000000;
                  if (!v12 && (sub_100059CEC(0x7365636976726573, 0xE800000000000000) & 1) == 0)
                  {
                    v13 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
                    if (!v13
                      && (sub_100059CEC(0x737574617473, 0xE600000000000000) & 1) == 0
                      && (a1 != 0x6E6F6973726576 || a2 != 0xE700000000000000))
                    {
                      sub_100059CEC(0x6E6F6973726576, 0xE700000000000000);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_100012E98();
  sub_100020E78();
}

void sub_100058E74(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100048850(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000487F0();
}

uint64_t sub_100058EA8(char a1)
{
  return qword_100073410[a1];
}

void sub_100058ECC()
{
  unsigned __int8 *v0;

  sub_100058E74(*v0);
}

uint64_t sub_100058ED4()
{
  char *v0;

  return sub_100058EA8(*v0);
}

void sub_100058EDC(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_100058BA8(a1, a2);
  *a3 = v4;
}

void sub_100058F00(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100058F0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059684();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058F34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059684();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CompanionLinkDevice.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v4 = v2;
  v5 = v1;
  sub_100010F40(&qword_100093F20);
  sub_100059DE4();
  __chkstk_darwin(v7);
  sub_10001795C();
  v8 = a1[3];
  v9 = a1[4];
  sub_100010F80(a1, v8);
  v10 = sub_100059684();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionLinkDevice.CodingKeys, &type metadata for CompanionLinkDevice.CodingKeys, v10, v8, v9);
  v11 = *(id *)(v5 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20));
  sub_100059420(v11, (SEL *)&selRef_accountID);
  if (v13)
  {
    LOBYTE(v43) = 0;
    sub_100059D14(v12, v13, (uint64_t)&v43);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v14 = v11;
  sub_100059420(v14, (SEL *)&selRef_identifier);
  if (v16)
  {
    sub_100059CFC(v15, v16, 1);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v17 = v14;
  sub_100059420(v17, (SEL *)&selRef_idsDeviceIdentifier);
  if (v19)
  {
    sub_100059CFC(v18, v19, 2);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v20 = v17;
  sub_100059420(v20, (SEL *)&selRef_model);
  if (v22)
  {
    sub_100059CFC(v21, v22, 3);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v23 = v20;
  sub_100059420(v23, (SEL *)&selRef_name);
  if (v25)
  {
    sub_100059CFC(v24, v25, 4);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v26 = objc_msgSend(v23, "proximity");
  if ((_DWORD)v26)
  {
    LOBYTE(v43) = 5;
    v2 = v4;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v43, v3);
    if (v4)
      return sub_100059DC8();
  }
  v28 = v23;
  sub_100059420(v28, (SEL *)&selRef_serviceType);
  if (v30)
  {
    sub_100059CFC(v29, v30, 7);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  v31 = v28;
  v32 = sub_1000593C0(v31);
  if (!v32)
    goto LABEL_25;
  v43 = v32;
  v42 = 8;
  v33 = sub_100010F40(&qword_100091880);
  v34 = sub_1000596C0();
  v2 = v4;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v43, &v42, v3, v33, v34);
  if (v4)
  {
LABEL_27:
    sub_100059DC8();
    return swift_bridgeObjectRelease();
  }
  sub_10001320C();
LABEL_25:
  v35 = objc_msgSend(v31, "statusFlags");
  if (v35)
  {
    v36 = RPStatusFlagsCopyDescription((unint64_t)v35);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    LOBYTE(v43) = 9;
    sub_100059D14(v37, v39, (uint64_t)&v43);
    if (v2)
      goto LABEL_27;
    sub_10001320C();
  }
  sub_100059420(v31, (SEL *)&selRef_sourceVersion);
  if (!v41)
    return sub_100059DC8();
  sub_100059CFC(v40, v41, 10);
  sub_100059DC8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100059264(_QWORD *a1)
{
  return CompanionLinkDevice.encode(to:)(a1);
}

uint64_t variable initialization expression of RapportRemoteDisplayServer.sessions()
{
  uint64_t v0;

  v0 = type metadata accessor for RapportRemoteDisplaySession();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v0, &protocol witness table for ObjectIdentifier);
}

uint64_t variable initialization expression of Clock.heartbeat()
{
  return 0;
}

uint64_t variable initialization expression of RapportStreamServer.activating()
{
  uint64_t v0;

  v0 = type metadata accessor for RapportStreamSession();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v0, &protocol witness table for ObjectIdentifier);
}

void sub_1000592EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setIdentifier:", v5);

}

uint64_t sub_10005933C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100093D88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100059384()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093F08;
  if (!qword_100093F08)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100093F08);
  }
  return result;
}

uint64_t sub_1000593C0(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "serviceTypes");

  if (!v2)
    return 0;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

void sub_100059420(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  sub_100020E78();
}

void sub_100059480(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_1000594F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100010F40(&qword_1000918F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v11);
  if (!v11)
    return sub_1000124AC((uint64_t)v10, 1, 1, v4);
  v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v13 = *(_QWORD *)(v5 + 72);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  while (1)
  {
    v14(v10, v12, v4);
    sub_1000124AC((uint64_t)v10, 0, 1, v4);
    result = sub_1000124B8((uint64_t)v10, 1, v4);
    if ((_DWORD)result == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_100055D00((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 += v13;
    if (!--v11)
      return sub_1000124AC((uint64_t)v10, 1, 1, v4);
  }
  return result;
}

unint64_t sub_100059684()
{
  unint64_t result;

  result = qword_100093F28;
  if (!qword_100093F28)
  {
    result = swift_getWitnessTable(&unk_1000733B8, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100093F28);
  }
  return result;
}

unint64_t sub_1000596C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092F30;
  if (!qword_100092F30)
  {
    v1 = sub_100010FE0(&qword_100091880);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100092F30);
  }
  return result;
}

void sub_10005971C()
{
  sub_100055D00((unint64_t *)&unk_1000918A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_100059748()
{
  sub_100055D00(&qword_100093FC0, type metadata accessor for CompanionLinkDevice, (uint64_t)&protocol conformance descriptor for CompanionLinkDevice);
}

uint64_t *initializeBufferWithCopyOfBuffer for CompanionLinkDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for CompanionLinkDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t assignWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005997C);
}

void sub_10005997C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001322C();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_1000124B8(a1, a2, v4);
  else
    sub_100020E78();
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000599F4);
}

uint64_t sub_1000599F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_10001322C();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_1000124AC(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100059A64(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100059BAC + 4 * byte_1000731C5[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100059BE0 + 4 * byte_1000731C0[v4]))();
}

uint64_t sub_100059BE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100059BF0);
  return result;
}

uint64_t sub_100059BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100059C04);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100059C08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059C10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompanionLinkDevice.CodingKeys()
{
  return &type metadata for CompanionLinkDevice.CodingKeys;
}

unint64_t sub_100059C30()
{
  unint64_t result;

  result = qword_1000940B8;
  if (!qword_1000940B8)
  {
    result = swift_getWitnessTable(&unk_100073390, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000940B8);
  }
  return result;
}

unint64_t sub_100059C70()
{
  unint64_t result;

  result = qword_1000940C0;
  if (!qword_1000940C0)
  {
    result = swift_getWitnessTable(&unk_100073300, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000940C0);
  }
  return result;
}

unint64_t sub_100059CB0()
{
  unint64_t result;

  result = qword_1000940C8;
  if (!qword_1000940C8)
  {
    result = swift_getWitnessTable(&unk_100073328, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000940C8);
  }
  return result;
}

uint64_t sub_100059CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100059CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_100059D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100059D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, v3, v2, 0);
}

id sub_100059D3C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_100059D44()
{
  void *v0;

}

id sub_100059D50(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100059D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v2, v1);
}

void sub_100059D68()
{
  void *v0;

}

uint64_t sub_100059D74(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_100059D7C()
{
  void *v0;

}

uint64_t sub_100059D88()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100059D94(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_100059DA0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100059DB8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_100059DC0()
{
  void *v0;

}

uint64_t sub_100059DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

CompanionLink::RapportSourceVersion sub_100059DD8(Swift::String stringValue)
{
  return RapportSourceVersion.init(stringValue:)(stringValue);
}

uint64_t sub_100059DF8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100059E00(uint64_t a1)
{
  uint64_t v1;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_100059E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000124AC(a1, a2, a3, a4);
}

void sub_100059E14(uint64_t a1)
{
  uint64_t *v1;

  sub_100055040(a1, v1);
}

uint64_t sub_100059E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v2, v1, v3);
}

NSDictionary sub_100059E2C()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100059E3C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100059E44(uint64_t a1)
{
  uint64_t v1;

  return sub_1000124B8(a1, 1, v1);
}

void sub_100059E7C(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

void sub_100059E90()
{
  void *v0;

}

CompanionLink::RapportSourceVersion sub_100059E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  return RapportSourceVersion.init(stringValue:)(*(Swift::String *)&a1);
}

uint64_t sub_100059EA4()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_100059EB0()
{
  void *v0;

}

uint64_t sub_100059EBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100059ED0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_100059ED8(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

void *RapportErrorFlags.notSignedIn.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.notSignedIn;
}

uint64_t static RapportDeviceChangeFlags.advertisementData.getter()
{
  return 1;
}

void *RapportErrorFlags.bluetoothOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.bluetoothOff;
}

void *RapportErrorFlags.WiFiOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.WiFiOff;
}

void *RapportErrorFlags.noDevices.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.noDevices;
}

uint64_t static RapportDeviceChangeFlags.IE.getter()
{
  return 8;
}

void *RapportErrorFlags.keychainOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.keychainOff;
}

void *RapportErrorFlags.nonHSA2.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.nonHSA2;
}

uint64_t static RapportDeviceChangeFlags.RSSI.getter()
{
  return 32;
}

void *RapportErrorFlags.homeKitNotConfigured.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.homeKitNotConfigured;
}

uint64_t static RapportDeviceChangeFlags.SSID.getter()
{
  return 64;
}

void *RapportErrorFlags.WiFiHostAP.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.WiFiHostAP;
}

uint64_t static RapportDeviceChangeFlags.proximity.getter()
{
  return 128;
}

void *RapportErrorFlags.noManatee.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.noManatee;
}

uint64_t static RapportDeviceChangeFlags.relativeLocation.getter()
{
  return 256;
}

uint64_t RapportDeviceChangeFlags.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*RapportDeviceChangeFlags.rawValue.modify())()
{
  return RapportDeviceChangeFlags.rawValue.getter;
}

void sub_100059F94(uint64_t *a1@<X8>)
{
  *a1 = j___s15SidecarTimeSync5ClockC14heartbeatTimer33_52E478E0294A7D1A30B0593D640BE43CLLSo24OS_dispatch_source_timer_pSgvpfi();
  sub_100005E8C();
}

uint64_t sub_100059FB4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100060890(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_100059FE0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_100038240(*a1, *v2);
  sub_100005E8C();
}

void sub_10005A008(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_100060894(*a1, *v2);
  sub_100005E8C();
}

BOOL sub_10005A030(_QWORD *a1, uint64_t *a2)
{
  return sub_100050B64(a1, *a2);
}

void sub_10005A038(uint64_t *a1)
{
  sub_100060898(*a1);
}

void sub_10005A040(uint64_t *a1)
{
  sub_1000608A4(*a1);
}

void sub_10005A048(uint64_t *a1)
{
  sub_1000608B0(*a1);
}

BOOL sub_10005A050(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10003826C(*a1, *v1);
}

void sub_10005A05C(uint64_t *a1)
{
  sub_1000608BC(*a1);
}

uint64_t sub_10005A064@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000608C8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005A088()
{
  _QWORD *v0;

  return sub_100060B84(*v0);
}

uint64_t sub_10005A090(uint64_t a1)
{
  _QWORD *v1;

  return sub_100060BBC(a1, *v1);
}

uint64_t RapportErrorFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = RPErrorFlagsCopyDescription(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t sub_10005A0E4()
{
  unint64_t result;

  result = qword_1000940D0;
  if (!qword_1000940D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportErrorFlags, &type metadata for RapportErrorFlags);
    atomic_store(result, (unint64_t *)&qword_1000940D0);
  }
  return result;
}

unint64_t sub_10005A124()
{
  unint64_t result;

  result = qword_1000940D8;
  if (!qword_1000940D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportErrorFlags, &type metadata for RapportErrorFlags);
    atomic_store(result, (unint64_t *)&qword_1000940D8);
  }
  return result;
}

unint64_t sub_10005A164()
{
  unint64_t result;

  result = qword_1000940E0;
  if (!qword_1000940E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportErrorFlags, &type metadata for RapportErrorFlags);
    atomic_store(result, (unint64_t *)&qword_1000940E0);
  }
  return result;
}

unint64_t sub_10005A1A4()
{
  unint64_t result;

  result = qword_1000940E8;
  if (!qword_1000940E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportErrorFlags, &type metadata for RapportErrorFlags);
    atomic_store(result, (unint64_t *)&qword_1000940E8);
  }
  return result;
}

uint64_t sub_10005A1E0()
{
  unint64_t *v0;

  return RapportErrorFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportErrorFlags()
{
  return &type metadata for RapportErrorFlags;
}

id sub_10005A1F8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  return sub_10001F230(v6, v7, a1, a2, a3, 0);
}

uint64_t RapportStatusFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = RPStatusFlagsCopyDescription(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

const char *RapportStatusFlags.asleep.unsafeMutableAddressor()
{
  return " ";
}

const char *RapportStatusFlags.AWDL.unsafeMutableAddressor()
{
  return "\b";
}

void *RapportStatusFlags.AWDLDegraded.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLDegraded;
}

uint64_t static RapportStatusFlags.AWDLDegraded.getter()
{
  return 0x2000000;
}

void *RapportStatusFlags.AWDLRetro.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLRetro;
}

uint64_t static RapportStatusFlags.AWDLRetro.getter()
{
  return 0x4000000;
}

void *RapportStatusFlags.BLE.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.BLE;
}

void *RapportStatusFlags.local.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.local;
}

uint64_t static RapportControlFlags.proximity.getter()
{
  return 0x200000000;
}

void *RapportStatusFlags.owner.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.owner;
}

uint64_t static RapportControlFlags.moreComing.getter()
{
  return 0x80000;
}

void *RapportStatusFlags.WiFi.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFi;
}

void *RapportStatusFlags.WiFiP2P.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFiP2P;
}

uint64_t static RapportDeviceChangeFlags.removed.getter()
{
  return 512;
}

void *RapportStatusFlags.USB.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.USB;
}

uint64_t static RapportStatusFlags.USB.getter()
{
  return 0x1000000;
}

uint64_t sub_10005A370@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100060B60(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10005A3A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100060B64(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10005A3D0(_QWORD *a1)
{
  return sub_100060B6C(*a1);
}

uint64_t sub_10005A3D8(_QWORD *a1)
{
  return sub_100060B54(*a1);
}

uint64_t sub_10005A3E0(_QWORD *a1)
{
  return sub_100060B5C(*a1);
}

uint64_t sub_10005A3E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100060B58(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10005A414(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100060B68(*a1, *v1);
}

BOOL sub_10005A420()
{
  uint64_t *v0;

  return sub_100060B78(*v0);
}

uint64_t sub_10005A428(_QWORD *a1)
{
  return sub_100060B74(*a1);
}

unint64_t sub_10005A434()
{
  unint64_t result;

  result = qword_1000940F0;
  if (!qword_1000940F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1000940F0);
  }
  return result;
}

unint64_t sub_10005A474()
{
  unint64_t result;

  result = qword_1000940F8;
  if (!qword_1000940F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1000940F8);
  }
  return result;
}

unint64_t sub_10005A4B4()
{
  unint64_t result;

  result = qword_100094100;
  if (!qword_100094100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_100094100);
  }
  return result;
}

unint64_t sub_10005A4F4()
{
  unint64_t result;

  result = qword_100094108;
  if (!qword_100094108)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_100094108);
  }
  return result;
}

uint64_t sub_10005A530()
{
  unint64_t *v0;

  return RapportStatusFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStatusFlags()
{
  return &type metadata for RapportStatusFlags;
}

uint64_t RapportRemoteDisplaySession.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100012DD0(v0 + 16, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t RapportRemoteDisplaySession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_100012DD0(v2 + 16, (uint64_t)v6, 1);
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  return swift_unknownObjectRelease(a1);
}

void RapportRemoteDisplaySession.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_100012DD0(v1 + 16, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  sub_100020E78();
}

void sub_10005A644(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

void RapportRemoteDisplaySession.__allocating_init(session:)()
{
  uint64_t v0;

  sub_100014AC4(v0, 40);
  sub_10005B6E8();
  sub_100005E8C();
}

uint64_t RapportRemoteDisplaySession.init(session:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit(v1 + 16, 0);
  *(_QWORD *)(v1 + 32) = a1;
  v3 = sub_10005B654();
  sub_10005B684(v3);
  v19 = v3;
  v4 = sub_10001EFD8((uint64_t)sub_100021604, (uint64_t)_NSConcreteStackBlock, 1107296256, v13, v16);
  v5 = a1;
  v6 = swift_release(v19);
  sub_100013094(v6, "setErrorHandler:");
  _Block_release(v4);
  v7 = sub_10005B654();
  sub_10005B684(v7);
  v20 = v7;
  v8 = sub_10005B6D0((uint64_t)&unk_1000887B8, (uint64_t)_NSConcreteStackBlock, 1107296256, v14, v17);
  v9 = swift_release(v20);
  sub_100013094(v9, "setInterruptionHandler:");
  _Block_release(v8);
  v10 = sub_10005B654();
  sub_10005B684(v10);
  v21 = v10;
  v11 = sub_10005B6D0((uint64_t)&unk_1000887E0, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v18);
  swift_release(v21);
  sub_10005B6C8(v5, "setInvalidationHandler:");

  _Block_release(v11);
  return v1;
}

uint64_t sub_10005A858()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005A87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10005A8E0(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10005A8D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10005A87C(a1, v1);
}

uint64_t sub_10005A8E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v7[24];

  if (result)
  {
    v2 = result;
    swift_beginAccess(v1 + 16, v7, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)(v1 + 24);
      ObjectType = swift_getObjectType(result);
      v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
      swift_errorRetain(v2);
      v6(v1, v2, ObjectType, v4);
      swift_unknownObjectRelease(v3);
      return swift_errorRelease(v2);
    }
  }
  return result;
}

uint64_t sub_10005A980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005A990(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10005A998()
{
  uint64_t v0;

  sub_10005AA30(v0, (void (*)(void))sub_10005A9B8);
}

uint64_t sub_10005A9B8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 24);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_10005AA30(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  _BYTE v4[24];

  v3 = a1 + 16;
  sub_100012DD0(a1 + 16, (uint64_t)v4, 0);
  if (swift_weakLoadStrong(v3))
  {
    a2();
    sub_100048718();
  }
  sub_100020EFC();
}

void sub_10005AA78()
{
  uint64_t v0;

  sub_10005AA30(v0, (void (*)(void))sub_10005AA98);
}

uint64_t sub_10005AA98()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 24);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void RapportRemoteDisplaySession.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPRemoteDisplaySession), "init");
  sub_100014AC4(v0, 40);
  sub_10005B6E8();
  sub_100005E8C();
}

uint64_t RapportRemoteDisplaySession.deinit()
{
  uint64_t v0;

  RapportRemoteDisplaySession.cancel()();
  sub_10005ABC8(v0 + 16);

  return v0;
}

Swift::Void __swiftcall RapportRemoteDisplaySession.cancel()()
{
  uint64_t v0;
  _BYTE v1[24];

  objc_msgSend(*(id *)(v0 + 32), "invalidate");
  sub_100012DD0(v0 + 16, (uint64_t)v1, 1);
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakAssign(v0 + 16, 0);
  sub_100020EFC();
}

uint64_t sub_10005ABC8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t RapportRemoteDisplaySession.__deallocating_deinit()
{
  uint64_t v0;

  RapportRemoteDisplaySession.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

id RapportRemoteDisplaySession.controlFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 32), "controlFlags");
}

id RapportRemoteDisplaySession.controlFlags.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 32), "setControlFlags:", a1);
}

void RapportRemoteDisplaySession.controlFlags.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 32);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "controlFlags");
  sub_100005E8C();
}

id sub_10005AC6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setControlFlags:", *(_QWORD *)a1);
}

void RapportRemoteDisplaySession.destinationDevice.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(*(id *)(v0 + 32), "destinationDevice");
  if (v1)
  {
    v2 = v1;
    v3 = type metadata accessor for RapportRemoteDisplayDevice();
    v4 = sub_100014AC4(v3, 40);
    *(_QWORD *)(v4 + 32) = 0;
    swift_unknownObjectWeakInit(v4 + 24, 0);
    *(_QWORD *)(v4 + 16) = v2;
  }
  sub_100005E8C();
}

uint64_t RapportRemoteDisplaySession.destinationDevice.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + 32);
  if (a1)
    v4 = *(id *)(a1 + 16);
  else
    v4 = 0;
  sub_10005B6C8(v3, "setDestinationDevice:");

  return swift_release(a1);
}

void RapportRemoteDisplaySession.destinationDevice.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  RapportRemoteDisplaySession.destinationDevice.getter();
  *a1 = v3;
  sub_100005E8C();
}

uint64_t sub_10005AD70(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return RapportRemoteDisplaySession.destinationDevice.setter(*a1);
  v3 = sub_1000130A0();
  RapportRemoteDisplaySession.destinationDevice.setter(v3);
  return sub_10005B67C(v2);
}

id RapportRemoteDisplaySession.dispatchQueue.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 32), "dispatchQueue");
}

void RapportRemoteDisplaySession.dispatchQueue.setter(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 32), "setDispatchQueue:", a1);
  sub_10005B698(a1);
}

void RapportRemoteDisplaySession.dispatchQueue.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 32);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "dispatchQueue");
  sub_100005E8C();
}

void sub_10005AE44(void **a1)
{
  void *v1;

  v1 = *a1;
  objc_msgSend(a1[1], "setDispatchQueue:");
  sub_10005B698(v1);
}

void RapportRemoteDisplaySession.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(v2 + 32);
  v4 = sub_10001EFD8((uint64_t)sub_100021604, (uint64_t)_NSConcreteStackBlock, 1107296256, v5, v6);
  sub_1000130A0();
  swift_release(a2);
  sub_10005B6C8(v3, "activateWithCompletion:");
  _Block_release(v4);
}

void RapportRemoteDisplaySession.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSDictionary v11;
  uint64_t v12;
  uint64_t v13;

  v10 = sub_10005B6DC();
  v11.super.isa = sub_10005B6A0().super.isa;
  if (isa)
    isa = sub_10005B6A0().super.isa;
  if (a5)
  {
    a5 = sub_10001EFD8((uint64_t)sub_100021604, (uint64_t)_NSConcreteStackBlock, 1107296256, v12, v13);
    swift_retain(a6);
    swift_release(a6);
  }
  objc_msgSend(v6, "sendEventID:event:options:completion:", v10, v11.super.isa, isa, a5);
  _Block_release(a5);

  sub_10005B664();
}

void RapportRemoteDisplaySession.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v9;
  NSDictionary v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = sub_10005B6DC();
  v10.super.isa = sub_10005B6A0().super.isa;
  if (isa)
    isa = sub_10005B6A0().super.isa;
  v11 = sub_10001EFD8((uint64_t)sub_10005B0FC, (uint64_t)_NSConcreteStackBlock, 1107296256, v12, v13);
  swift_retain(a6);
  swift_release(a6);
  objc_msgSend(v6, "sendRequestID:request:options:responseHandler:", v9, v10.super.isa, isa, v11);
  _Block_release(v11);

  sub_10005B664();
}

uint64_t sub_10005B0FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, void *);
  uint64_t v7;
  id v8;

  v5 = a3;
  v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    v7 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (v5)
LABEL_3:
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
LABEL_4:
  sub_10001EFE4();
  v8 = a4;
  v6(v7, v5, a4);
  sub_100048718();

  sub_1000132A0();
  return swift_bridgeObjectRelease(v7);
}

void sub_10005B1BC()
{
  RapportRemoteDisplaySession.cancel()();
}

void sub_10005B1DC()
{
  RapportRemoteDisplaySession.messenger.getter();
  sub_100005E8C();
}

id sub_10005B1F8()
{
  return RapportRemoteDisplaySession.dispatchQueue.getter();
}

void sub_10005B218()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 32), "serviceType");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  sub_100020E78();
}

void sub_10005B268(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, "serviceType");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  sub_100020E78();
}

void sub_10005B2B4()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "serviceType");
  if (v1)
  {
    sub_100059DB8((uint64_t)v1);
    sub_100059D68();
  }
  sub_100020E78();
}

void sub_10005B304(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  RapportRemoteDisplaySession.sendEvent(id:event:options:completion:)(a1, a2, a3, a4, a5, a6);
}

void sub_10005B324(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  RapportRemoteDisplaySession.sendRequest(id:request:options:response:)(a1, a2, a3, a4, a5, a6);
}

unint64_t RapportRemoteDisplaySession.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;

  v1 = v0;
  v2 = RPControlFlagsCopyDescription((unint64_t)objc_msgSend(*(id *)(v0 + 32), "controlFlags"));
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  sub_1000132A0();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  sub_10005B6B8(v8, v9, v10, v11, v12, v13, v14, v15, 0x3C204643202CLL, (void *)0xE600000000000000);
  sub_10001327C();
  RapportRemoteDisplaySession.destinationDevice.getter();
  if (v16
    && (v17 = v16,
        RapportRemoteDisplayDevice.persistentIdentifier.getter(),
        v19 = v18,
        v21 = v20,
        swift_release(v17),
        v21))
  {
    v22 = sub_10005B4FC(8, v19, v21);
  }
  else
  {
    v22 = Substring.init(_:)(0, 0xE000000000000000);
  }
  v23._countAndFlagsBits = static String._fromSubstring(_:)(v22);
  String.append(_:)(v23);
  sub_10001327C();
  sub_1000132A0();
  sub_10005B6A8();
  sub_10005B6B8(v24, v25, v26, v27, v28, v29, v30, v31, 0x27204444202CLL, (void *)0xE600000000000000);
  sub_10001327C();
  sub_1000130A0();
  sub_10005B218();
  v33 = v32;
  v35 = v34;
  swift_release(v1);
  if (v35)
    v36 = v33;
  else
    v36 = 0;
  if (v35)
    v37 = v35;
  else
    v37 = 0xE000000000000000;
  v38 = v37;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease(v37);
  sub_10005B6A8();
  v39._countAndFlagsBits = 0x27205453202CLL;
  v39._object = (void *)0xE600000000000000;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(0xE600000000000000);
  return 0xD000000000000014;
}

uint64_t sub_10005B4FC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v4 = a2;
    v5 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6 = v5 | (v4 << 16);
    v7 = String.index(_:offsetBy:limitedBy:)(15, result, v6, a2, a3);
    if ((v8 & 1) != 0)
      v9 = v6;
    else
      v9 = v7;
    v10 = String.subscript.getter(15, v9);
    swift_bridgeObjectRelease(a3);
    return v10;
  }
  return result;
}

unint64_t sub_10005B5B8()
{
  return RapportRemoteDisplaySession.description.getter();
}

BOOL static RapportRemoteDisplaySession.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

BOOL sub_10005B5EC(uint64_t *a1, uint64_t *a2)
{
  return static RapportRemoteDisplaySession.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for RapportRemoteDisplaySession()
{
  return objc_opt_self(_TtC13CompanionLink27RapportRemoteDisplaySession);
}

uint64_t sub_10005B654()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_10005B67C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10005B684(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

id _s13CompanionLink27RapportRemoteDisplaySessionC9messengerSo08RPRemoteeF0Cvg_0()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void sub_10005B698(id a1)
{

}

NSDictionary sub_10005B6A0()
{
  return Dictionary._bridgeToObjectiveC()();
}

void sub_10005B6A8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 39;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_10005B6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v10;

  v10._countAndFlagsBits = a9;
  v10._object = a10;
  String.append(_:)(v10);
}

id sub_10005B6C8(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

void *sub_10005B6D0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = v5;
  a5 = a1;
  return _Block_copy(&a2);
}

NSString sub_10005B6DC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10005B6E8()
{
  void *v0;

  return RapportRemoteDisplaySession.init(session:)(v0);
}

void *RapportSourceVersion.skyAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyAligned;
}

uint64_t static RapportSourceVersion.skyAligned.getter()
{
  return 3000000;
}

void *RapportSourceVersion.starAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.starAligned;
}

uint64_t static RapportSourceVersion.starAligned.getter()
{
  return 3050000;
}

void *RapportSourceVersion.skyBAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyBAligned;
}

uint64_t static RapportSourceVersion.skyBAligned.getter()
{
  return 3100000;
}

void *RapportSourceVersion.skyCAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyCAligned;
}

uint64_t static RapportSourceVersion.skyCAligned.getter()
{
  return 3200000;
}

void *RapportSourceVersion.skyDAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyDAligned;
}

uint64_t static RapportSourceVersion.skyDAligned.getter()
{
  return 3300000;
}

void *RapportSourceVersion.skyEchoAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyEchoAligned;
}

uint64_t static RapportSourceVersion.skyEchoAligned.getter()
{
  return 3400000;
}

CompanionLink::RapportSourceVersion __swiftcall RapportSourceVersion.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CompanionLink::RapportSourceVersion result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  Swift::String v10;

  object = stringValue._object;
  v10 = stringValue;
  v9[0] = 46;
  v9[1] = 0xE100000000000000;
  v2 = sub_10005B840();
  v3 = StringProtocol.components<A>(separatedBy:)(v9, &type metadata for String, &type metadata for String, v2, v2);
  swift_bridgeObjectRelease(object);
  v4 = sub_10005BD98(0, 10000);
  result.rawValue = sub_10005BD98(1, 100);
  v6 = __OFADD__(v4, result.rawValue);
  v7 = v4 + result.rawValue;
  if (v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  v8 = sub_10005BD98(2, 1);
  swift_bridgeObjectRelease(v3);
  result.rawValue = v7 + v8;
  if (__OFADD__(v7, v8))
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_10005B840()
{
  unint64_t result;

  result = qword_1000941F8;
  if (!qword_1000941F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000941F8);
  }
  return result;
}

uint64_t sub_10005B87C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];

  v7 = 0;
  if (result >= a3)
    return v7;
  if (result < 0)
  {
    __break(1u);
    goto LABEL_59;
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)result)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain(v6);
    v13 = (uint64_t)sub_10005BCB4(v5, v6, 10);
    LOBYTE(v5) = v27;
    swift_bridgeObjectRelease(v6);
    goto LABEL_47;
  }
  v4 = a2;
  v8 = a4 + 16 * result;
  v5 = *(_QWORD *)(v8 + 32);
  v6 = *(_QWORD *)(v8 + 40);
  v9 = HIBYTE(v6) & 0xF;
  v10 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v6) & 0xF;
  else
    v11 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v11)
    return 0;
  if ((v6 & 0x1000000000000000) != 0)
    goto LABEL_60;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
      v12 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    v13 = (uint64_t)sub_1000449CC(v12, v10, 10);
    LOBYTE(v5) = v14 & 1;
LABEL_47:
    if ((v5 & 1) == 0)
    {
      v7 = v13 * v4;
      if ((unsigned __int128)(v13 * (__int128)v4) >> 64 == (v13 * v4) >> 63)
        return v7;
      __break(1u);
    }
    return 0;
  }
  v28[0] = *(_QWORD *)(v8 + 32);
  v28[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (!v9)
      goto LABEL_63;
    if (v9 == 1 || (BYTE1(v5) - 48) > 9u)
      goto LABEL_34;
    v13 = (BYTE1(v5) - 48);
    if (v9 != 2)
    {
      if ((BYTE2(v5) - 48) > 9u)
        goto LABEL_34;
      v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
      v15 = v9 - 3;
      if (v9 != 3)
      {
        v16 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            goto LABEL_34;
          v18 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v18 + v17;
          if (__OFADD__(v18, v17))
            goto LABEL_34;
          LOBYTE(v5) = 0;
          ++v16;
          if (!--v15)
            goto LABEL_47;
        }
      }
    }
LABEL_46:
    LOBYTE(v5) = 0;
    goto LABEL_47;
  }
  if (v5 != 45)
  {
    if (!v9 || (v5 - 48) > 9u)
      goto LABEL_34;
    v13 = (v5 - 48);
    if (v9 != 1)
    {
      if ((BYTE1(v5) - 48) > 9u)
        goto LABEL_34;
      v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
      v19 = v9 - 2;
      if (v9 != 2)
      {
        v20 = (unsigned __int8 *)v28 + 2;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_34;
          v22 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v22 + v21;
          if (__OFADD__(v22, v21))
            goto LABEL_34;
          LOBYTE(v5) = 0;
          ++v20;
          if (!--v19)
            goto LABEL_47;
        }
      }
    }
    goto LABEL_46;
  }
  if (v9)
  {
    if (v9 != 1 && (BYTE1(v5) - 48) <= 9u)
    {
      if (v9 == 2)
      {
        LOBYTE(v5) = 0;
        v13 = -(uint64_t)(BYTE1(v5) - 48);
        goto LABEL_47;
      }
      if ((BYTE2(v5) - 48) <= 9u)
      {
        v13 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
        v23 = v9 - 3;
        if (v9 == 3)
          goto LABEL_46;
        v24 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v25 = *v24 - 48;
          if (v25 > 9)
            break;
          v26 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            break;
          v13 = v26 - v25;
          if (__OFSUB__(v26, v25))
            break;
          LOBYTE(v5) = 0;
          ++v24;
          if (!--v23)
            goto LABEL_47;
        }
      }
    }
LABEL_34:
    v13 = 0;
    LOBYTE(v5) = 1;
    goto LABEL_47;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

void RapportSourceVersion.stringValue.getter(uint64_t a1)
{
  id v1;

  v1 = (id)RPVersionToSourceVersionString(a1);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    sub_100059D68();
  }
  sub_100020E78();
}

void sub_10005BBD0()
{
  uint64_t *v0;

  RapportSourceVersion.stringValue.getter(*v0);
}

void RapportDeviceChangeFlags.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

void sub_10005BBFC(int a1)
{
  Swift::UInt *v1;

  RapportDeviceChangeFlags.hash(into:)(a1, *v1);
}

BOOL static RapportSourceVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_10005BC14()
{
  unint64_t result;

  result = qword_100094200;
  if (!qword_100094200)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportSourceVersion, &type metadata for RapportSourceVersion);
    atomic_store(result, (unint64_t *)&qword_100094200);
  }
  return result;
}

BOOL sub_10005BC50(uint64_t *a1, uint64_t *a2)
{
  return static RapportSourceVersion.< infix(_:_:)(*a1, *a2);
}

BOOL sub_10005BC5C(uint64_t *a1, uint64_t *a2)
{
  return sub_10005BC68(*a1, *a2);
}

BOOL sub_10005BC68(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_10005BC74(uint64_t *a1, uint64_t *a2)
{
  return sub_10005BC80(*a1, *a2);
}

BOOL sub_10005BC80(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_10005BC8C(uint64_t *a1, uint64_t *a2)
{
  return sub_10005BCA8(*a1, *a2);
}

ValueMetadata *type metadata accessor for RapportSourceVersion()
{
  return &type metadata for RapportSourceVersion;
}

BOOL sub_10005BCA8(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

unsigned __int8 *sub_10005BCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_100044C48(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1000449CC(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_10005BD98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_10005B87C(a1, a2, v3, v2);
}

uint64_t RapportControlFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = RPControlFlagsCopyDescription(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void *RapportControlFlags.noIPv6.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noIPv6;
}

void *RapportControlFlags.BLE.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BLE;
}

void *RapportControlFlags.infraWiFi.unsafeMutableAddressor()
{
  return &static RapportControlFlags.infraWiFi;
}

void *RapportControlFlags.AWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.AWDL;
}

void *RapportControlFlags.NAN.unsafeMutableAddressor()
{
  return &static RapportControlFlags.NAN;
}

void *RapportControlFlags.BTPipe.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BTPipe;
}

void *RapportControlFlags.forceL2CAP.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceL2CAP;
}

void *RapportControlFlags.forceBLE.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceBLE;
}

uint64_t static RapportControlFlags.forceBLE.getter()
{
  return 0x8000;
}

void *RapportControlFlags.BLEScreenOff.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BLEScreenOff;
}

uint64_t static RapportControlFlags.BLEScreenOff.getter()
{
  return 0x10000;
}

void *RapportControlFlags.forceAWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceAWDL;
}

uint64_t static RapportControlFlags.forceAWDL.getter()
{
  return 0x20000;
}

void *RapportControlFlags.forceUSB.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceUSB;
}

uint64_t static RapportControlFlags.forceUSB.getter()
{
  return 0x40000;
}

void *RapportControlFlags.moreComing.unsafeMutableAddressor()
{
  return &static RapportControlFlags.moreComing;
}

void *RapportControlFlags.noInfraWiFi.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noInfraWiFi;
}

uint64_t static RapportControlFlags.noInfraWiFi.getter()
{
  return 0x200000;
}

void *RapportControlFlags.noAWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noAWDL;
}

uint64_t static RapportControlFlags.noAWDL.getter()
{
  return 0x400000;
}

void *RapportControlFlags.OPACKNoCopy.unsafeMutableAddressor()
{
  return &static RapportControlFlags.OPACKNoCopy;
}

uint64_t static RapportControlFlags.OPACKNoCopy.getter()
{
  return 0x40000000;
}

void *RapportControlFlags.proximity.unsafeMutableAddressor()
{
  return &static RapportControlFlags.proximity;
}

void *RapportControlFlags.ensemble.unsafeMutableAddressor()
{
  return &static RapportControlFlags.ensemble;
}

uint64_t static RapportControlFlags.ensemble.getter()
{
  return 0x10000000000;
}

void *RapportControlFlags.noL2CAP.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noL2CAP;
}

uint64_t static RapportControlFlags.noL2CAP.getter()
{
  return 0x20000000000;
}

void *RapportControlFlags.noUSB.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noUSB;
}

uint64_t static RapportControlFlags.noUSB.getter()
{
  return 0x40000000000;
}

unint64_t sub_10005BF24()
{
  unint64_t result;

  result = qword_100094208;
  if (!qword_100094208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportControlFlags, &type metadata for RapportControlFlags);
    atomic_store(result, (unint64_t *)&qword_100094208);
  }
  return result;
}

unint64_t sub_10005BF64()
{
  unint64_t result;

  result = qword_100094210;
  if (!qword_100094210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportControlFlags, &type metadata for RapportControlFlags);
    atomic_store(result, (unint64_t *)&qword_100094210);
  }
  return result;
}

unint64_t sub_10005BFA4()
{
  unint64_t result;

  result = qword_100094218;
  if (!qword_100094218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportControlFlags, &type metadata for RapportControlFlags);
    atomic_store(result, (unint64_t *)&qword_100094218);
  }
  return result;
}

unint64_t sub_10005BFE4()
{
  unint64_t result;

  result = qword_100094220;
  if (!qword_100094220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportControlFlags, &type metadata for RapportControlFlags);
    atomic_store(result, (unint64_t *)&qword_100094220);
  }
  return result;
}

uint64_t sub_10005C020()
{
  unint64_t *v0;

  return RapportControlFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportControlFlags()
{
  return &type metadata for RapportControlFlags;
}

uint64_t RapportDeviceChangeFlags.init(_:)(uint64_t result)
{
  return result;
}

void *RapportStreamFlags.dontStart.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.dontStart;
}

void *RapportStreamFlags.lowLatency.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.lowLatency;
}

void *RapportStreamFlags.handoff.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.handoff;
}

uint64_t RapportStreamFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t result;

  if (HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  else
  {
    v1 = RPStreamFlagsCopyDescription(a1);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return v2;
  }
  return result;
}

unint64_t sub_10005C108()
{
  unint64_t result;

  result = qword_100094228;
  if (!qword_100094228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStreamFlags, &type metadata for RapportStreamFlags);
    atomic_store(result, (unint64_t *)&qword_100094228);
  }
  return result;
}

unint64_t sub_10005C148()
{
  unint64_t result;

  result = qword_100094230;
  if (!qword_100094230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStreamFlags, &type metadata for RapportStreamFlags);
    atomic_store(result, (unint64_t *)&qword_100094230);
  }
  return result;
}

unint64_t sub_10005C188()
{
  unint64_t result;

  result = qword_100094238;
  if (!qword_100094238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStreamFlags, &type metadata for RapportStreamFlags);
    atomic_store(result, (unint64_t *)&qword_100094238);
  }
  return result;
}

unint64_t sub_10005C1C8()
{
  unint64_t result;

  result = qword_100094240;
  if (!qword_100094240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStreamFlags, &type metadata for RapportStreamFlags);
    atomic_store(result, (unint64_t *)&qword_100094240);
  }
  return result;
}

uint64_t sub_10005C204()
{
  unint64_t *v0;

  return RapportStreamFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStreamFlags()
{
  return &type metadata for RapportStreamFlags;
}

uint64_t RapportRemoteDisplayDiscovery.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100012DD0(v0 + 24, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

void RapportRemoteDisplayDiscovery.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_100012DD0(v2 + 24, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  swift_unknownObjectRelease(a1);
  sub_100018094();
}

void RapportRemoteDisplayDiscovery.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_100012DD0(v1 + 24, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  sub_100020E78();
}

void sub_10005C30C(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t RapportRemoteDisplayDiscovery.__allocating_init(discovery:)()
{
  uint64_t v0;

  sub_100014AC4(v0, 40);
  sub_10005D128();
  return v0;
}

uint64_t RapportRemoteDisplayDiscovery.init(discovery:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit(v1 + 24, 0);
  *(_QWORD *)(v1 + 16) = a1;
  v4 = sub_10005B654();
  v5 = sub_10005D0FC(v4);
  sub_100013024(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)_NSConcreteStackBlock);
  v13 = a1;
  v14 = swift_release(v2);
  sub_100013094(v14, "setInterruptionHandler:");
  sub_10001315C();
  v15 = sub_10005B654();
  sub_10005D0FC(v15);
  sub_10005D118();
  v24 = sub_100013024(v16, v17, v18, v19, v20, v21, v22, v23, v98);
  v32 = sub_10005D10C((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v99, 1107296256, (uint64_t)sub_100050438, (uint64_t)&unk_100088D20, (uint64_t)sub_10005C5F4, v2);
  sub_100013094(v32, "setInvalidationHandler:");
  sub_10001315C();
  v33 = sub_10005B654();
  sub_10005D0FC(v33);
  sub_10005D118();
  v42 = sub_100013024(v34, v35, v36, v37, v38, v39, v40, v41, v100);
  v50 = sub_10005D10C((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, v101, v106, (uint64_t)sub_10005C834, (uint64_t)&unk_100088D48, v109, v112);
  sub_100013094(v50, "setDeviceFoundHandler:");
  sub_10001315C();
  v51 = sub_10005B654();
  sub_10005D0FC(v51);
  sub_10005D118();
  v60 = sub_100013024(v52, v53, v54, v55, v56, v57, v58, v59, v102);
  v68 = sub_10005D10C((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, v103, v107, (uint64_t)sub_10005C834, (uint64_t)&unk_100088D70, v110, v113);
  sub_100013094(v68, "setDeviceLostHandler:");
  sub_10001315C();
  v69 = sub_10005B654();
  sub_10005D0FC(v69);
  sub_10005D118();
  v78 = sub_100013024(v70, v71, v72, v73, v74, v75, v76, v77, v104);
  v86 = sub_10005D10C((uint64_t)v78, v79, v80, v81, v82, v83, v84, v85, v105, v108, (uint64_t)sub_10005CB34, (uint64_t)&unk_100088D98, v111, v114);
  sub_100013094(v86, "setDeviceChangedHandler:");
  sub_10001315C();
  v87 = sub_10005B654();
  v88 = swift_weakInit(v87 + 16, v1);
  v115 = v87;
  v96 = sub_100013024(v88, v89, v90, v91, v92, v93, v94, v95, (uint64_t)_NSConcreteStackBlock);
  swift_release(v115);
  objc_msgSend(v13, "setErrorFlagsChangedHandler:", v96);

  _Block_release(v96);
  return v1;
}

uint64_t sub_10005C5D0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005C5F4()
{
  uint64_t v0;

  return sub_10005CB90(v0, (void (*)(void))sub_10005C62C);
}

uint64_t sub_10005C614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005C624(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005C62C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_10005C6A4()
{
  uint64_t v0;

  return sub_10005CB90(v0, (void (*)(void))sub_10005C6C4);
}

uint64_t sub_10005C6C4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_10005C73C(uint64_t a1)
{
  uint64_t v1;

  sub_10005C884(a1, v1, (void (*)(uint64_t))sub_10005C75C);
}

uint64_t sub_10005C75C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  id v12;
  _BYTE v13[24];

  v3 = type metadata accessor for RapportRemoteDisplayDevice();
  v4 = swift_allocObject(v3, 40, 7);
  *(_QWORD *)(v4 + 32) = 0;
  swift_unknownObjectWeakInit(v4 + 24, 0);
  *(_QWORD *)(v4 + 16) = a1;
  swift_beginAccess(v1 + 24, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v1 + 32);
    ObjectType = swift_getObjectType(Strong);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
    v10 = a1;
    v9(v4, ObjectType, v7);
    swift_release(v4);
    return swift_unknownObjectRelease(v6);
  }
  else
  {
    v12 = a1;
    return swift_release(v4);
  }
}

void sub_10005C834(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10005C884(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a2 + 16;
  sub_100012DD0(a2 + 16, (uint64_t)v8, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    a3(a1);
    swift_release(v7);
  }
  sub_100018094();
}

void sub_10005C8E0(uint64_t a1)
{
  uint64_t v1;

  sub_10005C884(a1, v1, (void (*)(uint64_t))sub_10005C900);
}

uint64_t sub_10005C900(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  id v12;
  _BYTE v13[24];

  v3 = type metadata accessor for RapportRemoteDisplayDevice();
  v4 = swift_allocObject(v3, 40, 7);
  *(_QWORD *)(v4 + 32) = 0;
  swift_unknownObjectWeakInit(v4 + 24, 0);
  *(_QWORD *)(v4 + 16) = a1;
  swift_beginAccess(v1 + 24, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v1 + 32);
    ObjectType = swift_getObjectType(Strong);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    v9(v4, ObjectType, v7);
    swift_release(v4);
    return swift_unknownObjectRelease(v6);
  }
  else
  {
    v12 = a1;
    return swift_release(v4);
  }
}

uint64_t sub_10005C9D8(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10005CA50(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10005CA48(void *a1, unsigned int a2)
{
  uint64_t v2;

  return sub_10005C9D8(a1, a2, v2);
}

uint64_t sub_10005CA50(void *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v13;
  id v15;
  _BYTE v16[24];

  v5 = type metadata accessor for RapportRemoteDisplayDevice();
  v6 = swift_allocObject(v5, 40, 7);
  *(_QWORD *)(v6 + 32) = 0;
  swift_unknownObjectWeakInit(v6 + 24, 0);
  *(_QWORD *)(v6 + 16) = a1;
  swift_beginAccess(v2 + 24, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 24);
  if (Strong)
  {
    v8 = Strong;
    v9 = *(_QWORD *)(v2 + 32);
    v10 = a2;
    ObjectType = swift_getObjectType(Strong);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
    v13 = a1;
    v12(v6, v10, ObjectType, v9);
    swift_release(v6);
    return swift_unknownObjectRelease(v8);
  }
  else
  {
    v15 = a1;
    return swift_release(v6);
  }
}

void sub_10005CB34(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10005CB90(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  sub_100012DD0(a1 + 16, (uint64_t)v6, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    a2();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10005CBE4()
{
  uint64_t v0;

  return sub_10005CB90(v0, (void (*)(void))sub_10005CC04);
}

uint64_t sub_10005CC04()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t RapportRemoteDisplayDiscovery.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPRemoteDisplayDiscovery), "init");
  sub_100014AC4(v0, 40);
  sub_10005D128();
  return v0;
}

_QWORD *RapportRemoteDisplayDiscovery.devices.getter()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend(*(id *)(v0 + 16), "discoveredDevices");
  v2 = sub_10005CE40();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_14:
    sub_100012E98();
    return _swiftEmptyArrayStorage;
  }
  if (v3 < 0)
    v14 = v3;
  else
    v14 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter(v14);
  sub_100012E98();
  if (!v4)
    goto LABEL_14;
LABEL_3:
  result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      else
        v7 = *(id *)(v3 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = type metadata accessor for RapportRemoteDisplayDevice();
      v10 = sub_100014AC4(v9, 40);
      *(_QWORD *)(v10 + 32) = 0;
      v11 = swift_unknownObjectWeakInit(v10 + 24, 0);
      *(_QWORD *)(v10 + 16) = v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12);
      specialized ContiguousArray._endMutation()(v13);
    }
    while (v4 != v6);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t sub_10005CE40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100094248;
  if (!qword_100094248)
  {
    v1 = objc_opt_self(RPRemoteDisplayDevice);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100094248);
  }
  return result;
}

id RapportRemoteDisplayDiscovery.dispatchQueue.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "dispatchQueue");
}

void RapportRemoteDisplayDiscovery.dispatchQueue.setter(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 16), "setDispatchQueue:", a1);
  sub_10005B698(a1);
}

void (*RapportRemoteDisplayDiscovery.dispatchQueue.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "dispatchQueue");
  return sub_10005AE44;
}

id RapportRemoteDisplayDiscovery.errorFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "errorFlags");
}

void RapportRemoteDisplayDiscovery.activate(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v10;
  void *v11;

  v10 = *(void **)(v8 + 16);
  v11 = sub_100013024(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  swift_retain(a2);
  swift_release(a2);
  objc_msgSend(v10, "activateWithCompletion:", v11);
  _Block_release(v11);
}

Swift::Void __swiftcall RapportRemoteDisplayDiscovery.cancel()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "invalidate");
}

uint64_t RapportRemoteDisplayDiscovery.deinit()
{
  uint64_t v0;

  sub_10005ABC8(v0 + 24);
  return v0;
}

uint64_t RapportRemoteDisplayDiscovery.__deallocating_deinit()
{
  uint64_t v0;

  sub_10005ABC8(v0 + 24);
  return swift_deallocClassInstance(v0, 40, 7);
}

void sub_10005D020()
{
  RapportRemoteDisplayDiscovery.cancel()();
}

void RapportRemoteDisplayDiscovery.description.getter()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  sub_100020E78();
}

void sub_10005D08C()
{
  RapportRemoteDisplayDiscovery.description.getter();
}

uint64_t type metadata accessor for RapportRemoteDisplayDiscovery()
{
  return objc_opt_self(_TtC13CompanionLink29RapportRemoteDisplayDiscovery);
}

uint64_t sub_10005D0FC(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10005D10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

uint64_t sub_10005D128()
{
  void *v0;

  return RapportRemoteDisplayDiscovery.init(discovery:)(v0);
}

void sub_10005D134()
{
  sub_10005B218();
  sub_100005E8C();
}

uint64_t RapportMessageable.serviceType.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend((id)(*(uint64_t (**)(void))(a2 + 24))(), "serviceType");
  sub_1000131CC();
  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_10005D1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  id v7;

  v3 = *(void **)(*(_QWORD *)v2 + 32);
  if (a2)
  {
    v5 = v3;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = v3;
    v7 = 0;
  }
  objc_msgSend(v3, "setServiceType:", v7);

}

void sub_10005D248(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  id v5;

  v3 = (void *)*v2;
  if (a2)
  {
    swift_unknownObjectRetain(*v2);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    swift_unknownObjectRetain(*v2);
    v5 = 0;
  }
  objc_msgSend(v3, "setServiceType:", v5);
  swift_unknownObjectRelease(v3);

}

void sub_10005D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  id v7;

  v3 = *(void **)(*(_QWORD *)v2 + 16);
  if (a2)
  {
    v5 = v3;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = v3;
    v7 = 0;
  }
  objc_msgSend(v3, "setServiceType:", v7);

}

void RapportMessageable.serviceType.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  NSString v6;

  v5 = (void *)sub_10005F7B4(a1, a2, a3, a4);
  if (v4)
  {
    v6 = sub_10005F768();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v5, "setServiceType:", v6);
  sub_100013390();
  sub_100012EB8(v6);
}

void sub_10005D3AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  sub_10005B218();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

uint64_t sub_10005D3E0(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

void (*RapportMessageable.serviceType.modify())(void **a1, char a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10005F870();
  v4 = malloc(0x28uLL);
  *v3 = v4;
  v4[3] = v0;
  v4[4] = v1;
  v4[2] = v2;
  *v4 = RapportMessageable.serviceType.getter(v2, v0);
  v4[1] = v5;
  return sub_10005D44C;
}

void sub_10005D44C(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10005F7F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10005F7F8();
  }
  free(v2);
}

void sub_10005D4A8(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_10005D4C4(a1, a2, a3, a4, a5);
  sub_100005E8C();
}

void sub_10005D4C4(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v9 = *(id *)(v5 + 32);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_100089320, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F750;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10005EB38;
  v14[3] = &unk_100089338;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(v9, "registerEventID:options:handler:", v10, isa, v12);
  _Block_release(v12);

}

void sub_10005D5F8(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  swift_unknownObjectRetain(a6);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_100089230, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F750;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10005EB38;
  v14[3] = &unk_100089248;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(a6, "registerEventID:options:handler:", v10, isa, v12);
  _Block_release(v12);
  swift_unknownObjectRelease(a6);

}

void sub_10005D728(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v9 = *(id *)(v5 + 16);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_1000890F0, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F750;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10005EB38;
  v14[3] = &unk_100089108;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(v9, "registerEventID:options:handler:", v10, isa, v12);
  _Block_release(v12);

}

#error "10005D8EC: call analysis failed (funcsize=48)"

void sub_10005D92C(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_10005D948(a1, a2, a3, a4, a5);
  sub_100005E8C();
}

void sub_10005D948(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v9 = *(id *)(v5 + 32);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_1000892D0, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F688;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100014274;
  v14[3] = &unk_1000892E8;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(v9, "registerRequestID:options:handler:", v10, isa, v12);
  _Block_release(v12);

}

void sub_10005DA7C(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  swift_unknownObjectRetain(a6);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_1000891E0, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F688;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100014274;
  v14[3] = &unk_1000891F8;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(a6, "registerRequestID:options:handler:", v10, isa, v12);
  _Block_release(v12);
  swift_unknownObjectRelease(a6);

}

void sub_10005DBAC(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v9 = *(id *)(v5 + 16);
  v10 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = swift_allocObject(&unk_1000890A0, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10005F688;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100014274;
  v14[3] = &unk_1000890B8;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(v9, "registerRequestID:options:handler:", v10, isa, v12);
  _Block_release(v12);

}

#error "10005DD70: call analysis failed (funcsize=48)"

void sub_10005DDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
  sub_10005DDCC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100005E8C();
}

void sub_10005DDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v12 = *(id *)(v8 + 32);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a7)
  {
    v17[4] = a7;
    v18 = a8;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100021604;
    v17[3] = &unk_100089298;
    a7 = _Block_copy(v17);
    v16 = v18;
    swift_retain(a8);
    swift_release(v16);
  }
  objc_msgSend(v12, "sendEventID:event:destinationID:options:completion:", v13, v14.super.isa, v15, isa, a7);
  _Block_release(a7);

}

void sub_10005DF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8, void *a9)
{
  NSString v12;
  NSDictionary v13;
  NSString v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  swift_unknownObjectRetain(a9);
  v12 = String._bridgeToObjectiveC()();
  v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a7)
  {
    v16[4] = a7;
    v17 = a8;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_100021604;
    v16[3] = &unk_1000891A8;
    a7 = _Block_copy(v16);
    v15 = v17;
    swift_retain(a8);
    swift_release(v15);
  }
  objc_msgSend(a9, "sendEventID:event:destinationID:options:completion:", v12, v13.super.isa, v14, isa, a7);
  _Block_release(a7);
  swift_unknownObjectRelease(a9);

}

void sub_10005E0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v12 = *(id *)(v8 + 16);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a7)
  {
    v17[4] = a7;
    v18 = a8;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100021604;
    v17[3] = &unk_100089068;
    a7 = _Block_copy(v17);
    v16 = v18;
    swift_retain(a8);
    swift_release(v16);
  }
  objc_msgSend(v12, "sendEventID:event:destinationID:options:completion:", v13, v14.super.isa, v15, isa, a7);
  _Block_release(a7);

}

void RapportMessageable.sendEvent(id:event:destinationID:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  void *v8;
  NSString v12;
  NSDictionary v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;

  sub_10005F80C();
  v12 = sub_10005F838();
  v13.super.isa = sub_10005F868().super.isa;
  v14 = String._bridgeToObjectiveC()();
  if (isa)
    isa = sub_10005F868().super.isa;
  if (a7)
  {
    a7 = sub_10001EFD8((uint64_t)sub_100021604, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v16);
    swift_retain(a8);
    swift_release(a8);
  }
  objc_msgSend(v8, "sendEventID:event:destinationID:options:completion:", v12, v13.super.isa, v14, isa, a7);
  _Block_release(a7);
  sub_100013390();

  sub_10005F798();
}

void sub_10005E350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
  sub_10005E36C(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100005E8C();
}

void sub_10005E36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  v12 = *(id *)(v8 + 32);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v18[4] = a7;
  v19 = a8;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10005B0FC;
  v18[3] = &unk_100089270;
  v16 = _Block_copy(v18);
  v17 = v19;
  swift_retain(a8);
  swift_release(v17);
  objc_msgSend(v12, "sendRequestID:request:destinationID:options:responseHandler:", v13, v14.super.isa, v15, isa, v16);
  _Block_release(v16);

}

void sub_10005E4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8, void *a9)
{
  NSString v12;
  NSDictionary v13;
  NSString v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  swift_unknownObjectRetain(a9);
  v12 = String._bridgeToObjectiveC()();
  v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v17[4] = a7;
  v18 = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10005B0FC;
  v17[3] = &unk_100089180;
  v15 = _Block_copy(v17);
  v16 = v18;
  swift_retain(a8);
  swift_release(v16);
  objc_msgSend(a9, "sendRequestID:request:destinationID:options:responseHandler:", v12, v13.super.isa, v14, isa, v15);
  _Block_release(v15);
  swift_unknownObjectRelease(a9);

}

void sub_10005E648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  v12 = *(id *)(v8 + 16);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v18[4] = a7;
  v19 = a8;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10005B0FC;
  v18[3] = &unk_100089040;
  v16 = _Block_copy(v18);
  v17 = v19;
  swift_retain(a8);
  swift_release(v17);
  objc_msgSend(v12, "sendRequestID:request:destinationID:options:responseHandler:", v13, v14.super.isa, v15, isa, v16);
  _Block_release(v16);

}

void RapportMessageable.sendRequest(id:request:destinationID:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  NSString v10;
  NSDictionary v11;
  NSString v12;
  void *v13;
  void *v14;
  SEL v15;
  uint64_t v16;
  uint64_t v17;

  sub_10005F80C();
  v10 = sub_10005F838();
  v11.super.isa = sub_10005F868().super.isa;
  v12 = String._bridgeToObjectiveC()();
  if (isa)
    isa = sub_10005F868().super.isa;
  v13 = sub_10001EFD8((uint64_t)sub_10005B0FC, (uint64_t)_NSConcreteStackBlock, 1107296256, v16, v17);
  sub_1000485CC();
  swift_release(a8);
  v14 = (void *)sub_10005F820();
  objc_msgSend(v14, v15);
  _Block_release(v13);
  sub_100013390();

  sub_10005F798();
}

void sub_10005E8CC()
{
  sub_10005E920();
  sub_100005E8C();
}

Swift::Void __swiftcall RapportMessageable.unregisterEvent(id:)(Swift::String id)
{
  uint64_t v1;
  uint64_t v2;

  sub_10005E9E8(id._countAndFlagsBits, (uint64_t)id._object, v1, v2);
}

void sub_10005E8FC()
{
  sub_10005E920();
  sub_100005E8C();
}

void sub_10005E920()
{
  uint64_t v0;
  id v1;
  NSString v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  sub_10005F870();
  v1 = *(id *)(v0 + 32);
  v2 = sub_10005F768();
  sub_10005F754((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

  sub_100012EB8(v12);
}

void sub_10005E95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  swift_unknownObjectRetain(a3);
  v3 = sub_10005F768();
  sub_10005F754((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1000131CC();
  sub_100012EB8(v13);
}

void sub_10005E9A0()
{
  uint64_t v0;
  id v1;
  NSString v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  sub_10005F870();
  v1 = *(id *)(v0 + 16);
  v2 = sub_10005F768();
  sub_10005F754((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

  sub_100012EB8(v12);
}

Swift::Void __swiftcall RapportMessageable.unregisterRequest(id:)(Swift::String id)
{
  uint64_t v1;
  uint64_t v2;

  sub_10005E9E8(id._countAndFlagsBits, (uint64_t)id._object, v1, v2);
}

void sub_10005E9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  sub_10005F7B4(a1, a2, a3, a4);
  v4 = sub_10005F768();
  sub_10005F754((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  sub_1000131CC();
  sub_100012EB8(v14);
}

id sub_10005EA20(void *a1)
{
  return objc_msgSend(a1, "dispatchQueue");
}

id RapportMessageable.dispatchQueue.getter(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = objc_msgSend((id)(*(uint64_t (**)(void))(a2 + 24))(), "dispatchQueue");
  sub_100013390();
  return v2;
}

uint64_t sub_10005EA84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;

  if (a2)
    v6 = a2;
  else
    v6 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_bridgeObjectRetain(a2);
  a3(a1, v6);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10005EB0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005EB30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005EA84(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10005EB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v4);
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_10005EBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005EBF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005EBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  if (a2)
    v10 = a2;
  else
    v10 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_bridgeObjectRetain(a2);
  a5(a1, v10, a3, a4);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10005EC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10005EBFC(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

void sub_10005ECA4(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6, void *a7)
{
  NSString v11;
  NSDictionary v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  swift_unknownObjectRetain(a7);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
    v14[4] = a5;
    v15 = a6;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100021604;
    v14[3] = &unk_100089158;
    a5 = _Block_copy(v14);
    v13 = v15;
    swift_retain(a6);
    swift_release(v13);
  }
  objc_msgSend(a7, "sendEventID:event:options:completion:", v11, v12.super.isa, isa, a5);
  _Block_release(a5);
  swift_unknownObjectRelease(a7);

}

void sub_10005EDF0(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  uint64_t v6;
  id v10;
  NSString v11;
  NSDictionary v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v10 = *(id *)(v6 + 16);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
    v14[4] = a5;
    v15 = a6;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100021604;
    v14[3] = &unk_100089018;
    a5 = _Block_copy(v14);
    v13 = v15;
    swift_retain(a6);
    swift_release(v13);
  }
  objc_msgSend(v10, "sendEventID:event:options:completion:", v11, v12.super.isa, isa, a5);
  _Block_release(a5);

}

#error "10005EFE0: call analysis failed (funcsize=63)"

void sub_10005F03C(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6, void *a7)
{
  NSString v11;
  NSDictionary v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  swift_unknownObjectRetain(a7);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15[4] = a5;
  v16 = a6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10005B0FC;
  v15[3] = &unk_100089130;
  v13 = _Block_copy(v15);
  v14 = v16;
  swift_retain(a6);
  swift_release(v14);
  objc_msgSend(a7, "sendRequestID:request:options:responseHandler:", v11, v12.super.isa, isa, v13);
  _Block_release(v13);
  swift_unknownObjectRelease(a7);

}

void sub_10005F184(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v10;
  NSString v11;
  NSDictionary v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  v10 = *(id *)(v6 + 16);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15[4] = a5;
  v16 = a6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10005B0FC;
  v15[3] = &unk_100088FF0;
  v13 = _Block_copy(v15);
  v14 = v16;
  swift_retain(a6);
  swift_release(v14);
  objc_msgSend(v10, "sendRequestID:request:options:responseHandler:", v11, v12.super.isa, isa, v13);
  _Block_release(v13);

}

#error "10005F36C: call analysis failed (funcsize=57)"

void AnyRapportMessageable.messenger.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_unknownObjectRelease(*v1);
  *v1 = a1;
  sub_100005E8C();
}

uint64_t sub_10005F3DC()
{
  _QWORD *v0;

  return swift_unknownObjectRetain(*v0);
}

id sub_10005F3E4()
{
  void **v0;

  return sub_10005EA20(*v0);
}

void sub_10005F3EC()
{
  void **v0;

  sub_10005B268(*v0);
}

uint64_t (*sub_10005F3F8(_QWORD *a1))(uint64_t a1, char a2)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  sub_10005B268(*v1);
  *a1 = v3;
  a1[1] = v4;
  return sub_10005F430;
}

uint64_t sub_10005F430(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

void sub_10005F43C(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  void **v5;

  sub_10005D5F8(a1, a2, a3, a4, a5, *v5);
}

void sub_10005F444(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  void **v5;

  sub_10005DA7C(a1, a2, a3, a4, a5, *v5);
}

void sub_10005F44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
  void **v8;

  sub_10005DF3C(a1, a2, a3, a4, a5, a6, a7, a8, *v8);
}

void sub_10005F458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
  void **v8;

  sub_10005E4D8(a1, a2, a3, a4, a5, a6, a7, a8, *v8);
}

void sub_10005F464(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10005E95C(a1, a2, *v2);
}

void sub_10005F484(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10005E95C(a1, a2, *v2);
}

void sub_10005F4A4(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  void **v6;

  sub_10005ECA4(a1, a2, a3, a4, a5, a6, *v6);
}

void sub_10005F4AC(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  void **v6;

  sub_10005F03C(a1, a2, a3, a4, a5, a6, *v6);
}

ValueMetadata *type metadata accessor for AnyRapportMessageable()
{
  return &type metadata for AnyRapportMessageable;
}

id sub_10005F4C4()
{
  return RapportRemoteDisplayDiscovery.dispatchQueue.getter();
}

void sub_10005F4E4()
{
  sub_10005B2B4();
  sub_100005E8C();
}

void sub_10005F504(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  sub_10005B2B4();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

uint64_t sub_10005F538(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

uint64_t sub_10005F544(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return sub_10005F898();
  swift_bridgeObjectRetain();
  sub_10005F898();
  return swift_bridgeObjectRelease();
}

void sub_10005F598(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_10005D728(a1, a2, a3, a4, a5);
  sub_100005E8C();
}

void sub_10005F5B4(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_10005DBAC(a1, a2, a3, a4, a5);
  sub_100005E8C();
}

void sub_10005F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
  sub_10005E0B0(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100005E8C();
}

void sub_10005F5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
  sub_10005E648(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100005E8C();
}

void sub_10005F608()
{
  sub_10005E9A0();
  sub_100005E8C();
}

void sub_10005F62C()
{
  sub_10005E9A0();
  sub_100005E8C();
}

void sub_10005F650(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  sub_10005EDF0(a1, a2, a3, a4, a5, a6);
  sub_100005E8C();
}

void sub_10005F66C(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  sub_10005F184(a1, a2, a3, a4, a5, a6);
  sub_100005E8C();
}

id sub_10005F754(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  SEL *v10;
  void *v11;

  return objc_msgSend(v11, *v10, a1);
}

NSString sub_10005F768()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10005F774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a6, a7);
}

uint64_t sub_10005F7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
}

uint64_t sub_10005F7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 24))(a7, a8);
}

id sub_10005F7E4(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return objc_msgSend(v2, a2, v3, v4, v5);
}

void sub_10005F7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  RapportMessageable.serviceType.setter(v0, v1, v3, v2);
}

uint64_t sub_10005F80C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10005F820()
{
  uint64_t v0;

  return v0;
}

NSString sub_10005F838()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_10005F848()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_10005F858()
{
  return String._bridgeToObjectiveC()();
}

NSDictionary sub_10005F868()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10005F898()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t RapportRemoteDisplayServer.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_100012DD0(v2 + 24, (uint64_t)v6, 1);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t RapportRemoteDisplayServer.__allocating_init(server:)()
{
  uint64_t v0;

  sub_1000601A0();
  sub_1000601B4();
  return v0;
}

_QWORD *RapportRemoteDisplayServer.init(server:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1[4] = 0;
  swift_unknownObjectWeakInit(v1 + 3, 0);
  v3 = type metadata accessor for RapportRemoteDisplaySession();
  v1[5] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v3, &protocol witness table for ObjectIdentifier);
  v1[2] = a1;
  v4 = sub_10005B654();
  v5 = sub_10005B684(v4);
  sub_100013024(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)_NSConcreteStackBlock);
  v13 = a1;
  v14 = swift_release(v4);
  sub_100013094(v14, "setInterruptionHandler:");
  sub_10001315C();
  v15 = sub_10005B654();
  v16 = sub_10005B684(v15);
  v24 = sub_100013024(v16, v17, v18, v19, v20, v21, v22, v23, (uint64_t)_NSConcreteStackBlock);
  v32 = sub_1000601C0((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v69, 1107296256, (uint64_t)sub_100050438, (uint64_t)&unk_1000893B0, (uint64_t)sub_10005C6A4, v15);
  sub_100013094(v32, "setInvalidationHandler:");
  sub_10001315C();
  v33 = sub_10005B654();
  v34 = sub_10005B684(v33);
  v42 = sub_100013024(v34, v35, v36, v37, v38, v39, v40, v41, (uint64_t)_NSConcreteStackBlock);
  v50 = sub_1000601C0((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, v70, 1107296256, (uint64_t)sub_10005FD3C, (uint64_t)&unk_1000893D8, (uint64_t)sub_10005FBD0, v33);
  sub_100013094(v50, "setSessionStartHandler:");
  sub_10001315C();
  v51 = sub_10005B654();
  v52 = sub_10005B684(v51);
  v72 = v51;
  v60 = sub_100013024(v52, v53, v54, v55, v56, v57, v58, v59, (uint64_t)_NSConcreteStackBlock);
  sub_1000601C0((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, v71, 1107296256, (uint64_t)sub_10005FFA8, (uint64_t)&unk_100089400, (uint64_t)sub_10005FE40, v72);
  objc_msgSend(v13, "setSessionEndedHandler:", v60);

  _Block_release(v60);
  return v1;
}

uint64_t sub_10005FB1C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005FB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005FB50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005FB58(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_10005FBD8(a1, a2, a3);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_10005FBD0(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_10005FB58(a1, a2, a3, v3);
}

void sub_10005FBD8(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  id v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v4 = v3;
  v8 = type metadata accessor for RapportRemoteDisplaySession();
  swift_allocObject(v8, 40, 7);
  v9 = a1;
  v10 = RapportRemoteDisplaySession.init(session:)(v9);
  swift_beginAccess(v4 + 24, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 24);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(_QWORD *)(v4 + 32);
    swift_beginAccess(v4 + 40, v17, 33, 0);
    v14 = swift_retain(v10);
    sub_10006416C(v14, (uint64_t)v9);
    swift_endAccess(v17);
    ObjectType = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v13 + 24))(v4, v10, a2, a3, ObjectType, v13);
    swift_release(v10);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    sub_10004A098();
    v16 = sub_10005A1F8(-6714, 0xD000000000000025, 0x8000000100070AC0);
    a2();
    swift_release(v10);

  }
}

void sub_10005FD3C(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_100089460, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);

}

uint64_t sub_10005FDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10005FE48(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10005FE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005FDD0(a1, a2, v2);
}

uint64_t sub_10005FE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v19;
  _BYTE v20[24];

  v3 = v2;
  swift_beginAccess(v2 + 40, v20, 33, 0);
  v6 = sub_10006406C(a1);
  if ((v7 & 1) == 0)
    return swift_endAccess(v20);
  v8 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 40));
  v19 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0x8000000000000000;
  v10 = *(_QWORD *)(v19 + 24);
  sub_100010F40(&qword_1000943E8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v8);
  v12 = type metadata accessor for RapportRemoteDisplaySession();
  _NativeDictionary._delete(at:)(v8, v19, &type metadata for ObjectIdentifier, v12, &protocol witness table for ObjectIdentifier);
  v13 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v19;
  swift_bridgeObjectRelease(v13);
  swift_endAccess(v20);
  swift_beginAccess(v2 + 24, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 24);
  if (!Strong)
    return swift_release(v11);
  v15 = Strong;
  v16 = *(_QWORD *)(v3 + 32);
  ObjectType = swift_getObjectType(Strong);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 32))(v3, v11, a2, ObjectType, v16);
  swift_release(v11);
  return swift_unknownObjectRelease(v15);
}

void sub_10005FFA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

uint64_t RapportRemoteDisplayServer.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPRemoteDisplayServer), "init");
  sub_1000601A0();
  sub_1000601B4();
  return v0;
}

void RapportRemoteDisplayServer.activate(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v10;
  void *v11;

  v10 = *(void **)(v8 + 16);
  v11 = sub_100013024(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  swift_retain(a2);
  swift_release(a2);
  objc_msgSend(v10, "activateWithCompletion:", v11);
  _Block_release(v11);
}

uint64_t RapportRemoteDisplayServer.deinit()
{
  uint64_t v0;

  sub_10005ABC8(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RapportRemoteDisplayServer.__deallocating_deinit()
{
  uint64_t v0;

  RapportRemoteDisplayServer.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RapportRemoteDisplayServer()
{
  return objc_opt_self(_TtC13CompanionLink26RapportRemoteDisplayServer);
}

uint64_t sub_10006015C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000601A0()
{
  uint64_t v0;

  return swift_allocObject(v0, 48, 7);
}

_QWORD *sub_1000601B4()
{
  void *v0;

  return RapportRemoteDisplayServer.init(server:)(v0);
}

uint64_t sub_1000601C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

void RapportEndpoint.accountID.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v3 = objc_msgSend((id)sub_100060888(a1, a2), "accountID");
  sub_100020E48();
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_100020E78();
}

void RapportEndpoint.activityLevel.getter(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)sub_100060888(a1, a2);
  objc_msgSend(v2, "activityLevel");

  sub_100005E8C();
}

uint64_t RapportEndpoint.activityLevelTimeStamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)sub_100060888(a1, a2);
  v5 = objc_msgSend(v4, "activityLevelTimeStamp");

  if (v5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = type metadata accessor for Date(0);
  return sub_1000124AC(a3, v6, 1, v7);
}

uint64_t sub_1000602F0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20)), "cameraState");
}

uint64_t sub_100060320()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "cameraState");
}

void RapportEndpoint.cameraState.getter(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)sub_100060888(a1, a2);
  objc_msgSend(v2, "cameraState");

  sub_100005E8C();
}

void RapportEndpoint.homeKitUserIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend((id)sub_100060888(a1, a2), "homeKitUserIdentifiers");
  sub_100020E48();
  if (v2)
  {
    v4 = type metadata accessor for UUID(0);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v4);
    sub_100059DC0();
  }
  sub_100005E8C();
}

void RapportEndpoint.identifier.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_identifier);
}

void RapportEndpoint.idsDeviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_100060400()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20)), "mediaRouteIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100060470()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + 16), "mediaRouteIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void RapportEndpoint.mediaRouteIdentifier.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_mediaRouteIdentifier);
}

void RapportEndpoint.model.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_model);
}

void RapportEndpoint.name.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_name);
}

void RapportEndpoint.serviceInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v3 = objc_msgSend((id)sub_100060888(a1, a2), "serviceInfo");
  sub_100059DC0();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100020E48();
  sub_100005E8C();
}

void RapportEndpoint.serviceType.getter(uint64_t a1, uint64_t a2)
{
  sub_100060574(a1, a2, (SEL *)&selRef_serviceType);
}

void sub_100060574(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v4;
  id v5;

  v4 = (void *)sub_100060888(a1, a2);
  v5 = objc_msgSend(v4, *a3);

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    sub_100059D68();
  }
  sub_100020E78();
}

void RapportEndpoint.serviceTypes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v3 = objc_msgSend((id)sub_100060888(a1, a2), "serviceTypes");
  sub_100020E48();
  if (v2)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
    sub_100059DC0();
  }
  sub_100005E8C();
}

CompanionLink::RapportSourceVersion RapportEndpoint.sourceVersion.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  Swift::String v5;

  v3 = (void *)sub_100060888(a1, a2);
  v4 = objc_msgSend(v3, "sourceVersion");

  if (v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    sub_100059D68();
  }
  else
  {
    v3 = 0;
    v2 = (void *)0xE000000000000000;
  }
  v5._countAndFlagsBits = (uint64_t)v3;
  v5._object = v2;
  return RapportSourceVersion.init(stringValue:)(v5);
}

id RapportStreamSession.statusFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "statusFlags");
}

void RapportEndpoint.statusFlags.getter(uint64_t a1, uint64_t a2)
{
  objc_msgSend((id)sub_100060888(a1, a2), "statusFlags");
  sub_100059DC0();
  sub_100005E8C();
}

void sub_1000606E0()
{
  sub_10005759C();
  sub_100005E8C();
}

void sub_1000606FC()
{
  sub_100057610();
  sub_100005E8C();
}

uint64_t sub_100060718()
{
  return sub_100057688();
}

void sub_100060738()
{
  sub_100060320();
  sub_100005E8C();
}

void sub_100060754()
{
  sub_10005772C();
  sub_100005E8C();
}

void sub_100060770()
{
  sub_100057788();
  sub_100005E8C();
}

void sub_10006078C()
{
  sub_1000577A0();
  sub_100005E8C();
}

void sub_1000607A8()
{
  sub_100060470();
  sub_100005E8C();
}

void sub_1000607C4()
{
  sub_1000577B8();
  sub_100005E8C();
}

void sub_1000607E0()
{
  sub_1000577D0();
  sub_100005E8C();
}

void sub_1000607FC()
{
  sub_100057838();
  sub_100005E8C();
}

void sub_100060818()
{
  sub_1000578E8();
  sub_100005E8C();
}

void sub_100060834()
{
  sub_100057994();
  sub_100005E8C();
}

void sub_100060850()
{
  RapportStreamSession.statusFlags.getter();
  sub_100005E8C();
}

void sub_10006086C()
{
  sub_100057A38();
  sub_100005E8C();
}

uint64_t sub_100060888(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_100060898(uint64_t a1)
{
  _QWORD *v1;

  sub_100060B7C(*v1 | a1);
}

void sub_1000608A4(uint64_t a1)
{
  _QWORD *v1;

  sub_100060B7C(*v1 & a1);
}

void sub_1000608B0(uint64_t a1)
{
  _QWORD *v1;

  sub_100060B7C(*v1 ^ a1);
}

void sub_1000608BC(uint64_t a1)
{
  _QWORD *v1;

  sub_100060B7C(*v1 & ~a1);
}

void *RapportDeviceChangeFlags.advertisementData.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.advertisementData;
}

void *RapportDeviceChangeFlags.attributes.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.attributes;
}

void *RapportDeviceChangeFlags.distance.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.distance;
}

void *RapportDeviceChangeFlags.IE.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.IE;
}

void *RapportDeviceChangeFlags.name.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.name;
}

void *RapportDeviceChangeFlags.RSSI.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.RSSI;
}

void *RapportDeviceChangeFlags.SSID.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.SSID;
}

void *RapportDeviceChangeFlags.proximity.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.proximity;
}

void *RapportDeviceChangeFlags.relativeLocation.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.relativeLocation;
}

void *RapportDeviceChangeFlags.removed.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.removed;
}

uint64_t sub_100060944@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100038240(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100060970@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100060894(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t RapportDeviceChangeFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t result;

  if (HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  else
  {
    v1 = RPDeviceChangeFlagsCopyDescription(a1);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return v2;
  }
  return result;
}

unint64_t sub_100060A40()
{
  unint64_t result;

  result = qword_1000943F0;
  if (!qword_1000943F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1000943F0);
  }
  return result;
}

unint64_t sub_100060A80()
{
  unint64_t result;

  result = qword_1000943F8;
  if (!qword_1000943F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1000943F8);
  }
  return result;
}

unint64_t sub_100060AC0()
{
  unint64_t result;

  result = qword_100094400;
  if (!qword_100094400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_100094400);
  }
  return result;
}

unint64_t sub_100060B00()
{
  unint64_t result;

  result = qword_100094408;
  if (!qword_100094408)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_100094408);
  }
  return result;
}

uint64_t sub_100060B3C()
{
  unint64_t *v0;

  return RapportDeviceChangeFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportDeviceChangeFlags()
{
  return &type metadata for RapportDeviceChangeFlags;
}

void sub_100060B7C(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
}

void sub_100060B88()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v9[9];

  v0 = Hasher.init(_seed:)(v9, 0);
  sub_1000490B8(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9[0]);
  Hasher._finalize()();
  sub_1000487F0();
}

void sub_100060BC0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[9];

  v1 = Hasher.init(_seed:)(v10, a1);
  sub_1000490B8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  Hasher._finalize()();
  sub_1000487F0();
}

void sub_100060BF0()
{
  static RapportStreamQoS.default = 0;
}

uint64_t RapportStreamQoS.init(_:)(uint64_t result)
{
  return (int)result;
}

uint64_t *RapportStreamQoS.default.unsafeMutableAddressor()
{
  if (qword_100093EB8 != -1)
    swift_once(&qword_100093EB8, sub_100060BF0);
  return &static RapportStreamQoS.default;
}

uint64_t static RapportStreamQoS.default.getter()
{
  return sub_100060F54(&qword_100093EB8, (uint64_t)&static RapportStreamQoS.default);
}

void sub_100060C60()
{
  static RapportStreamQoS.background = 1;
}

uint64_t *RapportStreamQoS.background.unsafeMutableAddressor()
{
  if (qword_100093EC0 != -1)
    swift_once(&qword_100093EC0, sub_100060C60);
  return &static RapportStreamQoS.background;
}

uint64_t static RapportStreamQoS.background.getter()
{
  return sub_100060F54(&qword_100093EC0, (uint64_t)&static RapportStreamQoS.background);
}

void sub_100060CCC()
{
  static RapportStreamQoS.video = 2;
}

uint64_t *RapportStreamQoS.video.unsafeMutableAddressor()
{
  if (qword_100093EC8 != -1)
    swift_once(&qword_100093EC8, sub_100060CCC);
  return &static RapportStreamQoS.video;
}

uint64_t static RapportStreamQoS.video.getter()
{
  return sub_100060F54(&qword_100093EC8, (uint64_t)&static RapportStreamQoS.video);
}

void sub_100060D38()
{
  static RapportStreamQoS.voice = 3;
}

uint64_t *RapportStreamQoS.voice.unsafeMutableAddressor()
{
  if (qword_100093ED0 != -1)
    swift_once(&qword_100093ED0, sub_100060D38);
  return &static RapportStreamQoS.voice;
}

uint64_t static RapportStreamQoS.voice.getter()
{
  return sub_100060F54(&qword_100093ED0, (uint64_t)&static RapportStreamQoS.voice);
}

void sub_100060DA4()
{
  static RapportStreamQoS.airPlayAudio = 10;
}

uint64_t *RapportStreamQoS.airPlayAudio.unsafeMutableAddressor()
{
  if (qword_100093ED8 != -1)
    swift_once(&qword_100093ED8, sub_100060DA4);
  return &static RapportStreamQoS.airPlayAudio;
}

uint64_t static RapportStreamQoS.airPlayAudio.getter()
{
  return sub_100060F54(&qword_100093ED8, (uint64_t)&static RapportStreamQoS.airPlayAudio);
}

void sub_100060E10()
{
  static RapportStreamQoS.airPlayScreenAudio = 11;
}

uint64_t *RapportStreamQoS.airPlayScreenAudio.unsafeMutableAddressor()
{
  if (qword_100093EE0 != -1)
    swift_once(&qword_100093EE0, sub_100060E10);
  return &static RapportStreamQoS.airPlayScreenAudio;
}

uint64_t static RapportStreamQoS.airPlayScreenAudio.getter()
{
  return sub_100060F54(&qword_100093EE0, (uint64_t)&static RapportStreamQoS.airPlayScreenAudio);
}

void sub_100060E7C()
{
  static RapportStreamQoS.airPlayScreenVideo = 12;
}

uint64_t *RapportStreamQoS.airPlayScreenVideo.unsafeMutableAddressor()
{
  if (qword_100093EE8 != -1)
    swift_once(&qword_100093EE8, sub_100060E7C);
  return &static RapportStreamQoS.airPlayScreenVideo;
}

uint64_t static RapportStreamQoS.airPlayScreenVideo.getter()
{
  return sub_100060F54(&qword_100093EE8, (uint64_t)&static RapportStreamQoS.airPlayScreenVideo);
}

void sub_100060EE8()
{
  static RapportStreamQoS.ntp = 20;
}

uint64_t *RapportStreamQoS.ntp.unsafeMutableAddressor()
{
  if (qword_100093EF0 != -1)
    swift_once(&qword_100093EF0, sub_100060EE8);
  return &static RapportStreamQoS.ntp;
}

uint64_t static RapportStreamQoS.ntp.getter()
{
  return sub_100060F54(&qword_100093EF0, (uint64_t)&static RapportStreamQoS.ntp);
}

uint64_t sub_100060F54(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

void sub_100060F8C()
{
  sub_100060B88();
}

void sub_100060FA4(uint64_t a1)
{
  sub_100060BC0(a1);
}

uint64_t RapportStreamQoS.description.getter(uint64_t result)
{
  id v1;
  uint64_t v2;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v1 = RPStreamQoSCopyDescription(result);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return v2;
  }
  __break(1u);
  return result;
}

unint64_t sub_100061028()
{
  unint64_t result;

  result = qword_100094410;
  if (!qword_100094410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStreamQoS, &type metadata for RapportStreamQoS);
    atomic_store(result, (unint64_t *)&qword_100094410);
  }
  return result;
}

uint64_t sub_100061064()
{
  uint64_t *v0;

  return RapportStreamQoS.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStreamQoS()
{
  return &type metadata for RapportStreamQoS;
}

void RapportRemoteDisplayDevice.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 40, 7);
  sub_100061244(v3 + 24);
  *(_QWORD *)(v3 + 16) = a1;
  sub_100005E8C();
}

void RapportRemoteDisplayDevice.persistentIdentifier.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), "persistentIdentifier");
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  sub_100020E78();
}

void RapportRemoteDisplayDevice.init(device:)(uint64_t a1)
{
  uint64_t v1;

  sub_100061244(v1 + 24);
  *(_QWORD *)(v1 + 16) = a1;
  sub_100005E8C();
}

void RapportRemoteDisplayDevice.cameraCapabilities.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), "cameraCapabilities");
  if (v1)
  {
    v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  sub_100005E8C();
}

uint64_t RapportRemoteDisplayDevice.flags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "flags");
}

void sub_1000611CC()
{
  RapportRemoteDisplayDevice._endpoint.getter();
  sub_100005E8C();
}

BOOL static RapportRemoteDisplayDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL sub_1000611FC(uint64_t *a1, uint64_t *a2)
{
  return static RapportRemoteDisplayDevice.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for RapportRemoteDisplayDevice()
{
  return objc_opt_self(_TtC13CompanionLink26RapportRemoteDisplayDevice);
}

id RapportStreamSession.session.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_100061244(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = 0;
  return swift_unknownObjectWeakInit(a1, 0);
}

void sub_100061250(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  id v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  uint64_t v216;
  uint64_t v217;

  v4 = a3();
  v5 = (void *)_convertErrorToNSError(_:)(v4);
  swift_errorRelease(v4);
  v6 = objc_msgSend(v5, "localizedDescription");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = a1();
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v200 = v5;
    swift_bridgeObjectRetain(v13);
    v14 = sub_1000133A4();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (sub_100006D2C(v16))
    {
      v17 = sub_100006D24(42);
      v185 = sub_100006D24(96);
      v217 = v185;
      *(_DWORD *)v17 = 136446979;
      swift_bridgeObjectRetain(v13);
      v216 = sub_100015FFC(v12, v13, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v17 + 4, v17 + 12);
      v18 = sub_100012DBC(v13);
      *(_WORD *)(v17 + 12) = 2082;
      v25 = sub_100018844(v18, "domain", v19, v20, v21, v22, v23, v24, v185, v200);
      v26 = v7;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v216 = sub_100015FFC(v27, v29, &v217);
      v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v17 + 14, v17 + 22);
      sub_100018804(v30, v31, v32, v33, v34, v35, v36, v37, v186, v201);
      sub_100018804(v38, v39, v40, v41, v42, v43, v44, v45, v187, v202);
      v46 = swift_bridgeObjectRelease(v29);
      *(_WORD *)(v17 + 22) = 2048;
      v53 = sub_100018844(v46, "code", v47, v48, v49, v50, v51, v52, v188, v203);
      sub_100018804((int)v53, v54, v55, v56, v57, v58, v59, v60, v189, v204);
      v216 = (uint64_t)v53;
      v66 = sub_100018834(v61, v62, v63, v17 + 32, v64, v65);
      sub_100018804(v66, v67, v68, v69, v70, v71, v72, v73, v190, v205);
      *(_WORD *)(v17 + 32) = 2081;
      sub_1000133A4();
      v216 = sub_100015FFC(v26, v9, &v217);
      sub_100018834(v216, v74, v75, v17 + 42, v76, v77);
      sub_100012DBC(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v17, 0x2Au);
      swift_arrayDestroy(v191, 3, (char *)&type metadata for Any + 8);
      v78 = v191;
LABEL_6:
      sub_100006D04(v78);
      sub_100006D04(v17);

      sub_100018804(v143, v144, v145, v146, v147, v148, v149, v150, v191, v206);
      return;
    }
    swift_bridgeObjectRelease_n(v9, 2);
    v151 = v13;
  }
  else
  {
    v200 = v5;
    v79 = sub_1000133A4();
    v15 = Logger.logObject.getter(v79);
    v80 = static os_log_type_t.error.getter();
    if (sub_100006D2C(v80))
    {
      v17 = sub_100006D24(32);
      v81 = sub_100006D24(64);
      v217 = v81;
      *(_DWORD *)v17 = 136446723;
      v88 = sub_100018844(v81, "domain", v82, v83, v84, v85, v86, v87, v184, v200);
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v216 = sub_100015FFC(v89, v91, &v217);
      v96 = sub_100018814(v216, v92, v93, v17 + 12, v94, v95);
      sub_100018804(v96, v97, v98, v99, v100, v101, v102, v103, v192, v207);
      sub_100018804(v104, v105, v106, v107, v108, v109, v110, v111, v193, v208);
      v112 = swift_bridgeObjectRelease(v91);
      *(_WORD *)(v17 + 12) = 2048;
      LODWORD(v89) = sub_100018844(v112, "code", v113, v114, v115, v116, v117, v118, v194, v209);
      sub_100018804(v89, v119, v120, v121, v122, v123, v124, v125, v195, v210);
      v131 = sub_100018814(v126, v127, v128, v17 + 22, v129, v130);
      sub_100018804(v131, v132, v133, v134, v135, v136, v137, v138, v196, v211);
      *(_WORD *)(v17 + 22) = 2081;
      sub_1000133A4();
      v216 = sub_100015FFC(v7, v9, &v217);
      sub_100018814(v216, v139, v140, v17 + 32, v141, v142);
      sub_100012DBC(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s (%ld) %{private}s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      v78 = v81;
      goto LABEL_6;
    }
    v151 = v9;
  }
  swift_bridgeObjectRelease_n(v151, 2);

  sub_100018804(v152, v153, v154, v155, v156, v157, v158, v159, v184, v200);
  sub_100018804(v160, v161, v162, v163, v164, v165, v166, v167, v197, v212);
  sub_100018804(v168, v169, v170, v171, v172, v173, v174, v175, v198, v213);
  sub_100018804(v176, v177, v178, v179, v180, v181, v182, v183, v199, v214);

}

uint64_t CompanionLinkClient.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100012DD0(v0 + 32, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

void CompanionLinkClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_100012DD0(v2 + 32, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  swift_unknownObjectRelease(a1);
  sub_100018094();
}

void CompanionLinkClient.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_100012DD0(v1 + 32, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v3[3] = Strong;
  v3[4] = v5;
  sub_100020E78();
}

void sub_100061770(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 32, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  sub_1000630BC(v3);
}

id CompanionLinkClient.id.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "clientID");
}

id CompanionLinkClient.controlFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "controlFlags");
}

id CompanionLinkClient.controlFlags.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setControlFlags:", a1);
}

id (*CompanionLinkClient.controlFlags.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "controlFlags");
  return sub_10005AC6C;
}

void CompanionLinkClient.destinationDevice.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(v1 + 16), "destinationDevice");
  if (v3)
  {
    sub_1000630C8(v3, a1);
  }
  else
  {
    type metadata accessor for CompanionLinkDevice(0);
    v4 = sub_1000489F8();
    sub_100059E0C(v4, v5, v6, v7);
  }
}

uint64_t CompanionLinkClient.destinationDevice.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  v3 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + 16);
  sub_100061970(a1, (uint64_t)v5);
  v7 = type metadata accessor for CompanionLinkDevice(0);
  if (sub_1000124B8((uint64_t)v5, 1, v7) == 1)
  {
    sub_10001C508((uint64_t)v5);
    v8 = 0;
  }
  else
  {
    v8 = *(id *)&v5[*(int *)(v7 + 20)];
    sub_1000167F8((uint64_t)v5);
  }
  objc_msgSend(v6, "setDestinationDevice:", v8);

  return sub_10001C508(a1);
}

uint64_t sub_100061970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100091BD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void CompanionLinkClient.destinationDevice.modify(_QWORD *a1)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_100010F40(&qword_100091BD8) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  CompanionLinkClient.destinationDevice.getter((uint64_t)v4);
  sub_100020E78();
}

void sub_100061A1C(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_100061970((uint64_t)v3, (uint64_t)v2);
    CompanionLinkClient.destinationDevice.setter((uint64_t)v2);
    sub_10001C508((uint64_t)v3);
  }
  else
  {
    CompanionLinkClient.destinationDevice.setter((uint64_t)v3);
  }
  free(v3);
  sub_1000630BC(v2);
}

void CompanionLinkClient.localDevice.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(v1 + 16), "localDevice");
  if (v3)
  {
    sub_1000630C8(v3, a1);
  }
  else
  {
    type metadata accessor for CompanionLinkDevice(0);
    v4 = sub_1000489F8();
    sub_100059E0C(v4, v5, v6, v7);
  }
}

void sub_100061AB8(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  swift_unknownObjectWeakInit(v1 + 32, 0);
  *(_QWORD *)(v1 + 16) = a1;
  sub_100005E8C();
}

void CompanionLinkClient.__allocating_init()()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  sub_1000630D0();
  sub_100061AB8((uint64_t)v0);
  v1 = v0;
  sub_10001EFE4();
  sub_100061B4C(v1);

  sub_100048718();
  sub_100005E8C();
}

void sub_100061B4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_100062F2C(v4);
  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(a1, "setAppID:", v7);

  v8 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v27 = sub_100062FBC;
  v28 = v8;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_100050438;
  v26 = &unk_100089798;
  v9 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setDisconnectHandler:", v9);
  _Block_release(v9);
  sub_1000149C4();
  v10 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(a1, "setDispatchQueue:", v10);

  v11 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v11 + 16, v2);
  v27 = sub_100062FDC;
  v28 = v11;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10005C834;
  v26 = &unk_1000897C0;
  v12 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setDeviceFoundHandler:", v12);
  _Block_release(v12);
  v13 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v13 + 16, v2);
  v27 = sub_100062FFC;
  v28 = v13;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10005C834;
  v26 = &unk_1000897E8;
  v14 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setDeviceLostHandler:", v14);
  _Block_release(v14);
  v15 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v15 + 16, v2);
  v27 = sub_10006301C;
  v28 = v15;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10005CB34;
  v26 = &unk_100089810;
  v16 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setDeviceChangedHandler:", v16);
  _Block_release(v16);
  v17 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v17 + 16, v2);
  v27 = sub_100063024;
  v28 = v17;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_100050438;
  v26 = &unk_100089838;
  v18 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setInterruptionHandler:", v18);
  _Block_release(v18);
  v19 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v19 + 16, v2);
  v27 = sub_100063044;
  v28 = v19;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_100050438;
  v26 = &unk_100089860;
  v20 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setInvalidationHandler:", v20);
  _Block_release(v20);
  v21 = swift_allocObject(&unk_100089780, 24, 7);
  swift_weakInit(v21 + 16, v2);
  v27 = sub_100063064;
  v28 = v21;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10005C834;
  v26 = &unk_100089888;
  v22 = _Block_copy(&v23);
  swift_release(v28);
  objc_msgSend(a1, "setLocalDeviceUpdatedHandler:", v22);
  _Block_release(v22);
}

uint64_t CompanionLinkClient.__allocating_init(destination:serviceType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSString v9;

  v5 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  v6 = sub_1000630D0();
  sub_100061AB8((uint64_t)v5);
  v7 = v5;
  sub_10001EFE4();
  sub_100061B4C(v7);
  v8 = *(void **)(v6 + 16);
  objc_msgSend(v8, "setDestinationDevice:", *(_QWORD *)(a1 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20)));
  if (a3)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v8, "setServiceType:", v9);

  sub_100048718();
  sub_1000167F8(a1);
  return v6;
}

void sub_100062044()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_100093EF8 != -1)
      swift_once(&qword_100093EF8, sub_100064390);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006CAC(v5, (uint64_t)qword_10009A268);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient disconnected", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_10006216C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000573EC(a1, (uint64_t)v5);
  if (sub_1000124B8((uint64_t)v5, 1, v6) == 1)
    return sub_10001C508((uint64_t)v5);
  sub_10001C548((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_1000167F8((uint64_t)v8);
}

uint64_t sub_1000622A4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000573EC(a1, (uint64_t)v5);
  if (sub_1000124B8((uint64_t)v5, 1, v6) == 1)
    return sub_10001C508((uint64_t)v5);
  sub_10001C548((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_1000167F8((uint64_t)v8);
}

uint64_t sub_1000623DC(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10006244C(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10006244C(void *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _BYTE v17[24];

  v5 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000573EC(a1, (uint64_t)v7);
  if (sub_1000124B8((uint64_t)v7, 1, v8) == 1)
    return sub_10001C508((uint64_t)v7);
  sub_10001C548((uint64_t)v7, (uint64_t)v10);
  swift_beginAccess(v2 + 32, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (Strong)
  {
    v13 = Strong;
    v14 = *(_QWORD *)(v2 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 8))(v10, a2, ObjectType, v14);
    swift_unknownObjectRelease(v13);
  }
  return sub_1000167F8((uint64_t)v10);
}

void sub_100062590()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_100093EF8 != -1)
      swift_once(&qword_100093EF8, sub_100064390);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006CAC(v5, (uint64_t)qword_10009A268);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient interrupted", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_1000626B8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  sub_100012DD0(a1 + 16, (uint64_t)v5, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    a2();
    return sub_100048718();
  }
  return result;
}

void sub_100062708()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_100093EF8 != -1)
      swift_once(&qword_100093EF8, sub_100064390);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006CAC(v5, (uint64_t)qword_10009A268);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient invalidated", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_100062830(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_100010F40(&qword_100091BD8);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000573EC(a1, (uint64_t)v5);
  if (sub_1000124B8((uint64_t)v5, 1, v6) == 1)
    return sub_10001C508((uint64_t)v5);
  sub_10001C548((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 56))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_1000167F8((uint64_t)v8);
}

void CompanionLinkClient.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD v9[5];
  _QWORD *v10;

  v5 = *(void **)(v2 + 16);
  v6 = (_QWORD *)swift_allocObject(&unk_1000896D8, 40, 7);
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  v9[4] = sub_100062A70;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100021604;
  v9[3] = &unk_1000896F0;
  v7 = _Block_copy(v9);
  v8 = v10;
  sub_10001EFE4();
  sub_100046E6C(a1, a2);
  swift_release(v8);
  objc_msgSend(v5, "activateWithCompletion:", v7);
  _Block_release(v7);
}

uint64_t sub_100062A3C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100062A70(uint64_t a1)
{
  uint64_t v1;

  sub_100062AB0(a1, *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100062A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100062AA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100062AB0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain(a3);
    a2(a1);
    sub_1000121B4((uint64_t)a2, a3);
    return;
  }
  if (!a1)
  {
    if (qword_100093EF8 != -1)
      swift_once(&qword_100093EF8, sub_100064390);
    v21 = sub_100006CAC(v7, (uint64_t)qword_10009A268);
    v31 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v22, "CompanionLinkClient activated", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    goto LABEL_22;
  }
  v31 = _convertErrorToNSError(_:)(a1);
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    v11 = -[NSObject domain](v31, "domain");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = -[NSObject code](v31, "code");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    if (v12 == v16 && v14 == v17)
    {
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v19 = v17;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v17, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v19);
      if ((v20 & 1) == 0)
        goto LABEL_23;
    }
    if (v15 == (id)4099)
    {
      if (qword_100093EF8 != -1)
        swift_once(&qword_100093EF8, sub_100064390);
      v24 = sub_100006CAC(v7, (uint64_t)qword_10009A268);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "CompanionLinkClient invalidated before activation completion", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

LABEL_22:
      return;
    }
  }
LABEL_23:
  if (qword_100093EF8 != -1)
    swift_once(&qword_100093EF8, sub_100064390);
  v28 = sub_100006CAC(v7, (uint64_t)qword_10009A268);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v28, v7);
  __chkstk_darwin(v29);
  *(&v30 - 2) = (uint64_t)v31;
  sub_100061250((uint64_t (*)(void))sub_100062E4C, 0, (uint64_t (*)(void))sub_1000123F8);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_100062E4C()
{
  return 0xD000000000000025;
}

Swift::Void __swiftcall CompanionLinkClient.cancel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 24) = 1;
  objc_msgSend(*(id *)(v0 + 16), "invalidate");
}

uint64_t CompanionLinkClient.deinit()
{
  uint64_t v0;

  sub_10005ABC8(v0 + 32);
  return v0;
}

uint64_t CompanionLinkClient.__deallocating_deinit()
{
  uint64_t v0;

  sub_10005ABC8(v0 + 32);
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_100062ED0()
{
  CompanionLinkClient.cancel()();
}

void sub_100062EF0()
{
  RapportStreamSession.session.getter();
  sub_100005E8C();
}

uint64_t type metadata accessor for CompanionLinkClient()
{
  return objc_opt_self(_TtC13CompanionLink19CompanionLinkClient);
}

uint64_t sub_100062F2C(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "bundleIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100062F98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062FBC()
{
  uint64_t v0;

  return sub_1000626B8(v0, sub_100062044);
}

void sub_100062FDC(uint64_t a1)
{
  uint64_t v1;

  sub_10005C884(a1, v1, (void (*)(uint64_t))sub_10006216C);
}

void sub_100062FFC(uint64_t a1)
{
  uint64_t v1;

  sub_10005C884(a1, v1, (void (*)(uint64_t))sub_1000622A4);
}

uint64_t sub_10006301C(void *a1, unsigned int a2)
{
  uint64_t v2;

  return sub_1000623DC(a1, a2, v2);
}

uint64_t sub_100063024()
{
  uint64_t v0;

  return sub_1000626B8(v0, sub_100062590);
}

uint64_t sub_100063044()
{
  uint64_t v0;

  return sub_1000626B8(v0, sub_100062708);
}

void sub_100063064(uint64_t a1)
{
  uint64_t v1;

  sub_10005C884(a1, v1, (void (*)(uint64_t))sub_100062830);
}

void sub_1000630BC(void *a1)
{
  free(a1);
}

void sub_1000630C8(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000573EC(a1, a2);
}

uint64_t sub_1000630D0()
{
  uint64_t v0;

  return swift_allocObject(v0, 48, 7);
}

void RapportStreamServer.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_100012DD0(v1 + 24, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  sub_100020E78();
}

void sub_100063140(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  sub_1000630BC(v3);
}

uint64_t RapportStreamServer.__allocating_init(server:)()
{
  uint64_t v0;

  sub_1000601A0();
  sub_100064384();
  return v0;
}

_QWORD *RapportStreamServer.init(server:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[4] = 0;
  swift_unknownObjectWeakInit(v1 + 3, 0);
  v3 = type metadata accessor for RapportStreamSession();
  v1[5] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v3, &protocol witness table for ObjectIdentifier);
  v1[2] = a1;
  v4 = sub_10005B654();
  sub_10005B684(v4);
  v20 = v4;
  v5 = sub_10001EFD8((uint64_t)sub_100050438, (uint64_t)_NSConcreteStackBlock, 1107296256, v14, v17);
  v6 = a1;
  v7 = swift_release(v20);
  sub_100013094(v7, "setInvalidationHandler:");
  _Block_release(v5);
  v8 = sub_10005B654();
  sub_10005B684(v8);
  v21 = v8;
  v9 = sub_10001EFD8((uint64_t)sub_1000635DC, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v18);
  v10 = swift_release(v21);
  sub_100013094(v10, "setStreamAcceptHandler:");
  _Block_release(v9);
  v11 = sub_10005B654();
  sub_10005B684(v11);
  v22 = v11;
  v12 = sub_10001EFD8((uint64_t)sub_10006386C, (uint64_t)_NSConcreteStackBlock, 1107296256, v16, v19);
  swift_release(v22);
  objc_msgSend(v6, "setStreamPrepareHandlerEx:", v12);

  _Block_release(v12);
  return v1;
}

uint64_t sub_100063378()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006339C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10005C62C();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1000633F0()
{
  uint64_t v0;

  return sub_10006339C(v0);
}

uint64_t sub_1000633F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100063408(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100063410(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_100063490(a1, a2, a3);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_100063488(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_100063410(a1, a2, a3, v3);
}

void sub_100063490(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;
  _BYTE v15[24];

  v4 = v3;
  swift_beginAccess(v3 + 40, v15, 33, 0);
  v8 = sub_10006409C((uint64_t)a1);
  swift_endAccess(v15);
  if (!v8)
  {
    v9 = type metadata accessor for RapportStreamSession();
    swift_allocObject(v9, 40, 7);
    v8 = RapportStreamSession.init(session:)(a1);
  }
  swift_beginAccess(v3 + 24, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 24);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v4 + 32);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v12 + 16))(v4, v8, a2, a3, ObjectType, v12);
    swift_release(v8);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    sub_10004A098();
    v14 = sub_10005A1F8(-6714, 0xD00000000000001DLL, 0x8000000100070CB0);
    a2();
    swift_release(v8);

  }
}

void sub_1000635DC(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_1000899C0, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);

}

uint64_t sub_100063670(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  char v8;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = sub_1000636F8(a1, a2);
    swift_release(v7);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1000636F0(void *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_100063670(a1, a2, v2);
}

uint64_t sub_1000636F8(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v18;
  id v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v3 = v2;
  v6 = type metadata accessor for RapportStreamSession();
  swift_allocObject(v6, 40, 7);
  v7 = a1;
  v8 = RapportStreamSession.init(session:)(v7);
  swift_beginAccess(v3 + 24, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 24);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(_QWORD *)(v3 + 32);
    ObjectType = swift_getObjectType(Strong);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v3, v8, ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
    swift_beginAccess(v3 + 40, v20, 33, 0);
    v16 = swift_retain(v8);
    sub_100064178(v16, (uint64_t)v7, &qword_1000946F0);
    swift_endAccess(v20);
    if ((v15 & 1) != 0)
    {
      if (a2)
      {
        swift_errorRetain(v13);
        v18 = (void *)_convertErrorToNSError(_:)(v13);
        v19 = v18;
        *a2 = v18;
        swift_release(v8);
        sub_1000641C0(v13, 1);
      }
      else
      {
        swift_release(v8);
      }
      sub_1000641C0(v13, 1);
      return 0;
    }
    else
    {
      swift_release(v8);
      return v13 & 1;
    }
  }
  else
  {
    swift_release(v8);
    return 1;
  }
}

uint64_t sub_10006386C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  char v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = v4();
  swift_release(v3);

  return v6 & 1;
}

uint64_t RapportStreamServer.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPStreamServer), "init");
  sub_1000601A0();
  sub_100064384();
  return v0;
}

void RapportStreamSession.messenger.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;

  v3 = objc_msgSend(*(id *)(v1 + 16), "messenger");
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = &type metadata for AnyRapportMessageable;
    *(_QWORD *)(a1 + 32) = &protocol witness table for AnyRapportMessageable;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  sub_100005E8C();
}

uint64_t RapportStreamServer.messenger.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = *(void **)(v1 + 16);
  sub_100063A14(a1, (uint64_t)v8);
  v4 = v9;
  if (v9)
  {
    v5 = v10;
    sub_100010F80(v8, v9);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    sub_100012B68(v8);
  }
  else
  {
    sub_100063A5C((uint64_t)v8);
    v6 = 0;
  }
  objc_msgSend(v3, "setMessenger:", v6);
  swift_unknownObjectRelease(v6);
  return sub_100063A5C(a1);
}

uint64_t sub_100063A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40(&qword_100092EC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100063A5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100010F40(&qword_100092EC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void RapportStreamServer.messenger.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  RapportStreamSession.messenger.getter((uint64_t)v3);
  sub_100020E78();
}

void sub_100063AE0(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_100063A14(*a1, (uint64_t)v2 + 40);
    RapportStreamServer.messenger.setter((uint64_t)v2 + 40);
    sub_100063A5C((uint64_t)v2);
  }
  else
  {
    RapportStreamServer.messenger.setter(*a1);
  }
  sub_1000630BC(v2);
}

void RapportStreamServer.serviceType.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), "serviceType");
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  sub_100020E78();
}

void RapportStreamServer.serviceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v5;

  v3 = *(void **)(v2 + 16);
  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v3, "setServiceType:", v5);

}

void RapportStreamServer.serviceType.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamServer.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

void sub_100063C28(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10006436C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10006436C();
  }
}

uint64_t RapportStreamSession.streamFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamFlags");
}

id RapportStreamServer.streamFlags.setter(unint64_t a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if (!HIDWORD(a1))
    return objc_msgSend(*(id *)(v1 + 16), "setStreamFlags:", a1);
  sub_10006430C();
  result = (id)sub_1000642F4((uint64_t)"Fatal error", v3, v4, (uint64_t)"Not enough bits to represent the passed value", v5, v6, (uint64_t)"Swift/Integers.swift", v7, v8, v9, v10);
  __break(1u);
  return result;
}

void RapportStreamServer.streamFlags.modify(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(v1 + 16), "streamFlags");
  sub_100005E8C();
}

void sub_100063D30(unint64_t *a1)
{
  RapportStreamServer.streamFlags.setter(*a1);
  sub_100005E8C();
}

uint64_t RapportStreamSession.streamQoS.getter()
{
  uint64_t v0;

  return (int)objc_msgSend(*(id *)(v0 + 16), "streamQoS");
}

uint64_t RapportStreamSession.streamQoS.setter(uint64_t result)
{
  uint64_t v1;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return (uint64_t)objc_msgSend(*(id *)(v1 + 16), "setStreamQoS:", result);
  }
  __break(1u);
  return result;
}

void RapportStreamSession.streamQoS.modify(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (int)objc_msgSend(*(id *)(v1 + 16), "streamQoS");
  sub_100005E8C();
}

void sub_100063DE4(uint64_t *a1)
{
  RapportStreamSession.streamQoS.setter(*a1);
  sub_100005E8C();
}

void RapportStreamServer.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)(v2 + 16);
  v5 = sub_10001EFD8((uint64_t)sub_100021604, (uint64_t)_NSConcreteStackBlock, 1107296256, v6, v7);
  swift_retain(a2);
  swift_release(a2);
  objc_msgSend(v4, "activateWithCompletion:", v5);
  _Block_release(v5);
}

uint64_t RapportStreamServer.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  _QWORD v34[2];

  strcpy((char *)v34, "StreamServer");
  BYTE5(v34[1]) = 0;
  HIWORD(v34[1]) = -5120;
  sub_100064378(1279664172);
  v2 = *(void **)(v0 + 16);
  v3 = sub_100064360();
  sub_100064354(v3);
  sub_100064344();
  sub_100064324(v4, v5, v6, v7, v8, v9, v10, v11, 0, (void *)0xE000000000000000);
  swift_bridgeObjectRelease(v1);
  v12 = RPStreamQoSCopyDescription((int)objc_msgSend(v2, "streamQoS"));
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  v17 = swift_bridgeObjectRelease(v15);
  sub_100064324(v17, v18, v19, v20, v21, v22, v23, v24, 0x20536F51202CLL, (void *)0xE600000000000000);
  swift_bridgeObjectRelease(v13);
  sub_100064378(1179852844);
  v25 = sub_100064360();
  sub_100064354(v25);
  sub_100064344();
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(0xE000000000000000);
  RapportStreamServer.serviceType.getter();
  if (v28)
  {
    v29 = v28;
  }
  else
  {
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  v30 = v29;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x27205453202CLL;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v34[0];
}

uint64_t sub_10006402C()
{
  return RapportStreamServer.description.getter();
}

uint64_t type metadata accessor for RapportStreamServer()
{
  return objc_opt_self(_TtC13CompanionLink19RapportStreamServer);
}

unint64_t sub_10006406C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100039E8C(a1, v3);
}

uint64_t sub_10006409C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = sub_10006406C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v12 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_100010F40(&qword_1000946F0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v5);
  v10 = type metadata accessor for RapportStreamSession();
  _NativeDictionary._delete(at:)(v5, v12, &type metadata for ObjectIdentifier, v10, &protocol witness table for ObjectIdentifier);
  *v2 = v12;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10006416C(uint64_t a1, uint64_t a2)
{
  return sub_100064178(a1, a2, &qword_1000943E8);
}

uint64_t sub_100064178(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  sub_100064334();
  v5 = sub_1000488E8();
  sub_1000641CC(v5, v6, v7, a3);
  v8 = *v3;
  *v3 = v10;
  return sub_100048370(v8);
}

uint64_t sub_1000641C0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_1000641CC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t result;

  v6 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_10006406C(a2);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100010F40(a4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15))
    goto LABEL_5;
  v18 = sub_10006406C(a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v6;
  if ((v17 & 1) == 0)
    return sub_10003EB90(v16, a2, a1, v20);
  v21 = v20[7];
  result = swift_release(*(_QWORD *)(v21 + 8 * v16));
  *(_QWORD *)(v21 + 8 * v16) = a1;
  return result;
}

uint64_t sub_1000642B8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000642F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 45, 2, a7, 20, a9, a10, a11);
}

void sub_100064324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v10;

  v10._countAndFlagsBits = a9;
  v10._object = a10;
  String.append(_:)(v10);
}

uint64_t sub_100064334()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_100064344()
{
  Swift::String v0;

  v0._countAndFlagsBits = 62;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100064354(unsigned int a1)
{
  return sub_100008350(a1);
}

id sub_100064360()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2768));
}

void sub_10006436C()
{
  uint64_t v0;
  uint64_t v1;

  RapportStreamServer.serviceType.setter(v1, v0);
}

void sub_100064378(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFF0000FFFFFFFFLL | 0x3C2000000000;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
}

_QWORD *sub_100064384()
{
  void *v0;

  return RapportStreamServer.init(server:)(v0);
}

uint64_t sub_100064390()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_10009A268);
  sub_100006CAC(v0, (uint64_t)qword_10009A268);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0x74726F70706172, 0xE700000000000000);
}

void RapportStreamSession.__allocating_init(session:)()
{
  sub_100065E14();
  sub_100065E48();
  sub_100005E8C();
}

uint64_t RapportStreamSession.delegate.getter(uint64_t a1)
{
  sub_100065DDC(a1);
  return sub_100065E40();
}

void RapportStreamSession.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_100012DD0(v1 + 24, (uint64_t)v3, 33);
  v4 = sub_100065E40();
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  sub_100020E78();
}

uint64_t RapportStreamSession.init(session:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit(v1 + 24, 0);
  *(_QWORD *)(v1 + 16) = a1;
  v4 = sub_10005B654();
  v5 = sub_10005D0FC(v4);
  v134 = v2;
  v13 = sub_100013024(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)_NSConcreteStackBlock);
  v14 = a1;
  v15 = swift_release(v134);
  sub_100013094(v15, "setFlowControlWriteChangedHandler:");
  sub_10001315C();
  v16 = sub_10005B654();
  sub_10005D0FC(v16);
  sub_10005D118();
  v25 = sub_100013024(v17, v18, v19, v20, v21, v22, v23, v24, v116);
  v33 = sub_10005D10C((uint64_t)v25, v26, v27, v28, v29, v30, v31, v32, v117, 1107296256, (uint64_t)sub_100050438, (uint64_t)&unk_100089A48, (uint64_t)sub_100064730, v134);
  sub_100013094(v33, "setInvalidationHandler:");
  sub_10001315C();
  v34 = sub_10005B654();
  sub_10005D0FC(v34);
  sub_10005D118();
  v43 = sub_100013024(v35, v36, v37, v38, v39, v40, v41, v42, v118);
  sub_10005D10C((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v119, v126, (uint64_t)sub_100050438, (uint64_t)&unk_100089A70, v130, v135);
  RPStreamSessionSetDisconnectHandler(v14, v13);
  sub_10001315C();
  v51 = sub_10005B654();
  sub_10005D0FC(v51);
  sub_10005D118();
  v60 = sub_100013024(v52, v53, v54, v55, v56, v57, v58, v59, v120);
  v68 = sub_10005D10C((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, v121, v127, (uint64_t)sub_100064964, (uint64_t)&unk_100089A98, v131, v136);
  sub_100013094(v68, "setReceivedEventHandler:");
  sub_10001315C();
  v69 = sub_10005B654();
  sub_10005D0FC(v69);
  sub_10005D118();
  v78 = sub_100013024(v70, v71, v72, v73, v74, v75, v76, v77, v122);
  v86 = sub_10005D10C((uint64_t)v78, v79, v80, v81, v82, v83, v84, v85, v123, v128, (uint64_t)sub_100064BE0, (uint64_t)&unk_100089AC0, v132, v137);
  sub_100013094(v86, "setReceivedRequestHandler:");
  sub_10001315C();
  v87 = sub_10005B654();
  sub_10005D0FC(v87);
  sub_10005D118();
  v96 = sub_100013024(v88, v89, v90, v91, v92, v93, v94, v95, v124);
  v104 = sub_10005D10C((uint64_t)v96, v97, v98, v99, v100, v101, v102, v103, v125, v129, (uint64_t)sub_100050438, (uint64_t)&unk_100089AE8, v133, v138);
  sub_100013094(v104, "setStatusChangedHandler:");
  sub_10001315C();
  v105 = sub_10005B654();
  v106 = swift_weakInit(v105 + 16, v1);
  v139 = v105;
  v114 = sub_100013024(v106, v107, v108, v109, v110, v111, v112, v113, (uint64_t)_NSConcreteStackBlock);
  swift_release(v139);
  objc_msgSend(v14, "setConnectionReadyHandler:", v114);

  _Block_release(v114);
  return v1;
}

uint64_t sub_10006470C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100064730()
{
  uint64_t v0;

  sub_100064CF4(v0);
}

uint64_t sub_100064748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100064758(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100064760(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  sub_100012DD0(a1 + 16, (uint64_t)v6, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    a2();
    swift_release(v5);
  }
  sub_100020EFC();
}

void sub_1000647AC()
{
  uint64_t v0;

  sub_100064760(v0, (void (*)(void))sub_10005C6C4);
}

void sub_1000647CC()
{
  uint64_t v0;

  sub_100064760(v0, (void (*)(void))sub_10005C62C);
}

uint64_t sub_1000647EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v9 = a5 + 16;
  swift_beginAccess(a5 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    sub_10006487C(a1, a2, a3, a4);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_100064874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000647EC(a1, a2, a3, a4, v4);
}

uint64_t sub_10006487C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v13[24];

  swift_beginAccess(v4 + 24, v13, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4 + 24);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(v4 + 32);
    if (a4)
      v10 = a4;
    else
      v10 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    ObjectType = swift_getObjectType(v8);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24);
    swift_bridgeObjectRetain(a4);
    v12(v4, a3, v10, ObjectType, v9);
    swift_bridgeObjectRelease(v10);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_100064964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v6);
  v7(v8, v10, v11, a4);
  swift_release(v6);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100064A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[24];

  v13 = a7 + 16;
  swift_beginAccess(a7 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v13);
  if (result)
  {
    v15 = result;
    sub_100064AE0(a1, a2, a3, a4, a5, a6);
    return swift_release(v15);
  }
  return result;
}

uint64_t sub_100064AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_100064A38(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_100064AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v17[24];

  swift_beginAccess(v6 + 24, v17, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v6 + 24);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)(v6 + 32);
    if (a4)
      v14 = a4;
    else
      v14 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    ObjectType = swift_getObjectType(v12);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32);
    swift_bridgeObjectRetain(a4);
    v16(v6, a3, v14, a5, a6, ObjectType, v13);
    swift_bridgeObjectRelease(v14);
    return swift_unknownObjectRelease(v12);
  }
  return result;
}

uint64_t sub_100064BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12 = v11;
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v14 = _Block_copy(a5);
  v15 = swift_allocObject(&unk_100089C00, 24, 7);
  *(_QWORD *)(v15 + 16) = v14;
  swift_retain(v8);
  v9(v10, v12, v13, a4, sub_1000149BC, v15);
  swift_release(v8);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v15);
  return swift_bridgeObjectRelease(a4);
}

void sub_100064CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;

  v1 = a1 + 16;
  sub_100065DDC(a1);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_100064D30(Strong);
    swift_release(v3);
  }
  sub_100020EFC();
}

void sub_100064D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  sub_100065DDC(a1);
  v2 = sub_100065E40();
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)(v1 + 32);
    ObjectType = swift_getObjectType(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v1, ObjectType, v4);
    swift_unknownObjectRelease(v3);
  }
  sub_100018094();
}

void sub_100064D88()
{
  uint64_t v0;

  sub_100064760(v0, (void (*)(void))sub_100064DA8);
}

uint64_t sub_100064DA8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void RapportStreamSession.__allocating_init()()
{
  objc_msgSend(objc_allocWithZone((Class)RPStreamSession), "init");
  sub_100065E14();
  sub_100065E48();
  sub_100005E8C();
}

uint64_t RapportStreamSession.deinit()
{
  uint64_t v0;

  RapportStreamSession.cancel()();

  sub_10005ABC8(v0 + 24);
  return v0;
}

Swift::Void __swiftcall RapportStreamSession.cancel()()
{
  uint64_t v0;
  _BYTE v1[24];

  objc_msgSend(*(id *)(v0 + 16), "invalidate");
  sub_100012DD0(v0 + 24, (uint64_t)v1, 1);
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectWeakAssign(v0 + 24, 0);
  sub_100020EFC();
}

uint64_t RapportStreamSession.__deallocating_deinit()
{
  uint64_t v0;

  RapportStreamSession.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

void RapportStreamSession.serviceType.getter()
{
  sub_100065408((SEL *)&selRef_serviceType);
}

void RapportStreamSession.serviceType.setter(uint64_t a1, uint64_t a2)
{
  sub_100065468(a1, a2, (SEL *)&selRef_setServiceType_);
}

void RapportStreamSession.serviceType.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

uint64_t sub_100064F34(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

id RapportStreamSession.delegatedProcessUPID.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "delegatedProcessUPID");
}

id RapportStreamSession.delegatedProcessUPID.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setDelegatedProcessUPID:", a1);
}

void RapportStreamSession.delegatedProcessUPID.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "delegatedProcessUPID");
  sub_100005E8C();
}

id sub_100064FA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setDelegatedProcessUPID:", *(_QWORD *)a1);
}

id RapportStreamSession.flowControlWriteState.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "flowControlWriteState");
}

void RapportStreamSession.messenger.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = *(void **)(v1 + 16);
  sub_100063A14(a1, (uint64_t)v7);
  v4 = v8;
  if (v8)
  {
    v5 = v9;
    sub_100010F80(v7, v8);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    sub_100012B68(v7);
  }
  else
  {
    sub_100055040((uint64_t)v7, &qword_100092EC8);
    v6 = 0;
  }
  objc_msgSend(v3, "setMessenger:", v6);
  swift_unknownObjectRelease(v6);
  sub_100055040(a1, &qword_100092EC8);
  sub_100065E00();
}

void RapportStreamSession.messenger.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  RapportStreamSession.messenger.getter((uint64_t)v3);
  sub_100020E78();
}

void sub_1000650B4(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_100063A14(*a1, (uint64_t)v2 + 40);
    RapportStreamSession.messenger.setter((uint64_t)v2 + 40);
    sub_100055040((uint64_t)v2, &qword_100092EC8);
  }
  else
  {
    RapportStreamSession.messenger.setter(*a1);
  }
  sub_1000630BC(v2);
}

uint64_t RapportStreamSession.nwClientID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(v1 + 16), "nwClientID");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = type metadata accessor for UUID(0);
  return sub_1000124AC(a1, v5, 1, v6);
}

id RapportStreamSession.streamFlags.setter(unint64_t a1)
{
  uint64_t v1;
  id result;
  char v3;

  if (!HIDWORD(a1))
    return objc_msgSend(*(id *)(v1 + 16), "setStreamFlags:", a1);
  v3 = 2;
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v3, 3455, 0);
  __break(1u);
  return result;
}

void RapportStreamSession.streamFlags.modify(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(v1 + 16), "streamFlags");
  sub_100005E8C();
}

void sub_100065238(unint64_t *a1)
{
  RapportStreamSession.streamFlags.setter(*a1);
  sub_100005E8C();
}

void RapportStreamSession.streamID.getter()
{
  sub_100065408((SEL *)&selRef_streamID);
}

void RapportStreamSession.streamID.setter(uint64_t a1, uint64_t a2)
{
  sub_100065468(a1, a2, (SEL *)&selRef_setStreamID_);
}

void RapportStreamSession.streamID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.streamID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

uint64_t sub_10006529C(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

void RapportStreamSession.streamKey.getter()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "streamKey");
  if (v1)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    sub_100059D68();
  }
  sub_100020E78();
}

id RapportStreamSession.streamSocket.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamSocket");
}

id RapportStreamSession.streamType.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamType");
}

id RapportStreamSession.streamType.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setStreamType:", a1);
}

void RapportStreamSession.streamType.modify(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = objc_msgSend(v3, "streamType");
  sub_100005E8C();
}

id sub_10006536C(uint64_t a1, uint64_t a2)
{
  return sub_1000653E4(a1, a2, (SEL *)&selRef_setStreamType_);
}

id RapportStreamSession.trafficFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "trafficFlags");
}

id RapportStreamSession.trafficFlags.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setTrafficFlags:", a1);
}

void RapportStreamSession.trafficFlags.modify(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = objc_msgSend(v3, "trafficFlags");
  sub_100005E8C();
}

id sub_1000653D8(uint64_t a1, uint64_t a2)
{
  return sub_1000653E4(a1, a2, (SEL *)&selRef_setTrafficFlags_);
}

id sub_1000653E4(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(*(id *)a1, *a3, *(unsigned int *)(a1 + 8));
}

void RapportStreamSession.trafficSessionID.getter()
{
  sub_100065408((SEL *)&selRef_trafficSessionID);
}

void sub_100065408(SEL *a1)
{
  uint64_t v1;
  id v2;

  v2 = objc_msgSend(*(id *)(v1 + 16), *a1);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_100059D68();
  }
  sub_100020E78();
}

void RapportStreamSession.trafficSessionID.setter(uint64_t a1, uint64_t a2)
{
  sub_100065468(a1, a2, (SEL *)&selRef_setTrafficSessionID_);
}

void sub_100065468(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  void *v5;
  id v7;

  v5 = *(void **)(v3 + 16);
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, *a3, v7);

}

void RapportStreamSession.trafficSessionID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.trafficSessionID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_100005E8C();
}

uint64_t sub_1000654FC(uint64_t a1, char a2)
{
  return sub_10005F544(a1, a2);
}

void RapportStreamSession.activate(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100065530(a1, a2, (uint64_t)&unk_100089B38, (SEL *)&selRef_activateWithCompletion_, a5, a6, a7, a8);
}

void RapportStreamSession.prepare(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100065530(a1, a2, (uint64_t)&unk_100089B60, (SEL *)&selRef_prepareWithCompletion_, a5, a6, a7, a8);
}

void sub_100065530(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v11;
  void *v12;

  v11 = *(void **)(v8 + 16);
  v12 = sub_100013024(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  swift_retain(a2);
  swift_release(a2);
  objc_msgSend(v11, *a4, v12);
  sub_10001315C();
  sub_100065E00();
}

void RapportStreamSession.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, Class a4, void *a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSDictionary v11;
  NSDictionary v12;
  NSDictionary v13;
  NSDictionary v14;
  NSDictionary v15;
  NSDictionary v16;
  NSDictionary v17;
  NSDictionary v18;
  Class isa;

  v10 = sub_100065E54();
  v11.super.isa = sub_10005B6A0().super.isa;
  isa = v11.super.isa;
  if (a4)
  {
    v11.super.isa = sub_10005B6A0().super.isa;
    a4 = v11.super.isa;
  }
  if (a5)
  {
    a5 = sub_100013024((uint64_t)v11.super.isa, (uint64_t)v12.super.isa, (uint64_t)v13.super.isa, (uint64_t)v14.super.isa, (uint64_t)v15.super.isa, (uint64_t)v16.super.isa, (uint64_t)v17.super.isa, (uint64_t)v18.super.isa, (uint64_t)_NSConcreteStackBlock);
    swift_retain(a6);
    swift_release(a6);
  }
  objc_msgSend(v6, "sendEventID:event:options:completion:", v10, isa, a4, a5);
  _Block_release(a5);

  sub_10005B664();
}

void RapportStreamSession.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, Class a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v9;
  NSDictionary v10;
  NSDictionary v11;
  NSDictionary v12;
  NSDictionary v13;
  NSDictionary v14;
  NSDictionary v15;
  NSDictionary v16;
  NSDictionary v17;
  Class isa;
  void *v19;

  v9 = sub_100065E54();
  v10.super.isa = sub_10005B6A0().super.isa;
  isa = v10.super.isa;
  if (a4)
  {
    v10.super.isa = sub_10005B6A0().super.isa;
    a4 = v10.super.isa;
  }
  v19 = sub_100013024((uint64_t)v10.super.isa, (uint64_t)v11.super.isa, (uint64_t)v12.super.isa, (uint64_t)v13.super.isa, (uint64_t)v14.super.isa, (uint64_t)v15.super.isa, (uint64_t)v16.super.isa, (uint64_t)v17.super.isa, (uint64_t)_NSConcreteStackBlock);
  swift_retain(a6);
  swift_release(a6);
  objc_msgSend(v6, "sendRequestID:request:options:responseHandler:", v9, isa, a4, v19);
  _Block_release(v19);

  sub_10005B664();
}

void sub_1000657B8()
{
  RapportStreamSession.cancel()();
}

void sub_1000657D8(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  RapportStreamSession.sendEvent(id:event:options:completion:)(a1, a2, a3, a4, a5, a6);
}

void sub_1000657F8(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  RapportStreamSession.sendRequest(id:request:options:response:)(a1, a2, a3, a4, a5, a6);
}

uint64_t RapportStreamSession.description.getter()
{
  id *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  id v10;
  Swift::String v11;
  uint64_t v12;
  unsigned int v13;
  id v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  void *object;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  void *v39;
  void *v40;
  uint64_t v42;
  id v43;
  Swift::String v44;
  _QWORD v45[2];
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;

  sub_100010F40(&qword_1000918F8);
  __chkstk_darwin();
  v2 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[0] = 0;
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v7 = swift_bridgeObjectRelease(v45[1]);
  strcpy((char *)v45, "StreamSession ");
  HIBYTE(v45[1]) = -18;
  v8 = v0[2];
  v9 = sub_100059D3C(v7, "streamType");
  v10 = RPStreamTypeCopyDescription(v9);
  sub_100059E3C((uint64_t)v10);
  sub_100065E34();
  sub_100065E28();
  sub_100012F54();
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x3C204C46202CLL;
  v11._object = (void *)0xE600000000000000;
  String.append(_:)(v11);
  v13 = sub_100059D3C(v12, "streamFlags");
  sub_100008350(v13);
  sub_100065DF0(62);
  sub_100065DBC();
  sub_10001320C();
  v44._countAndFlagsBits = 0x3C204653202CLL;
  v44._object = (void *)0xE600000000000000;
  v14 = RPStatusFlagsCopyDescription((unint64_t)objc_msgSend(v8, "statusFlags"));
  sub_100059E3C((uint64_t)v14);
  sub_100065E34();
  sub_100065E28();
  sub_100012F54();
  sub_100065DF0(62);
  sub_100065DBC();
  sub_10001320C();
  v15 = objc_msgSend(v8, "delegatedProcessUPID");
  if (v15)
  {
    v44._countAndFlagsBits = 0x205044202CLL;
    v44._object = (void *)0xE500000000000000;
    v43 = v15;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64);
    sub_100065DF8(v46);
    sub_10001320C();
    sub_100065DBC();
    v15 = (id)sub_10001320C();
  }
  v44._countAndFlagsBits = 0x204346202CLL;
  v44._object = (void *)0xE500000000000000;
  v16 = sub_100059D3C((uint64_t)v15, "flowControlWriteState");
  v17 = RPFlowControlStateCopyDescription(v16);
  sub_100059E3C((uint64_t)v17);
  sub_100065E34();
  sub_100065E28();
  sub_100012F54();
  sub_100065DBC();
  sub_10001320C();
  RapportStreamSession.nwClientID.getter((uint64_t)v2);
  if (sub_1000124B8((uint64_t)v2, 1, v3) == 1)
  {
    sub_100055040((uint64_t)v2, &qword_1000918F8);
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    v44._countAndFlagsBits = 0x20574E202CLL;
    v44._object = (void *)0xE500000000000000;
    v47._countAndFlagsBits = UUID.uuidString.getter(v18);
    object = v47._object;
    sub_100065DF8(v47);
    swift_bridgeObjectRelease(object);
    v20 = v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  RapportStreamSession.serviceType.getter();
  if (v21._object)
  {
    v44._countAndFlagsBits = 0x27205453202CLL;
    v44._object = (void *)0xE600000000000000;
    sub_100065DF8(v21);
    sub_1000132A0();
    sub_100065DF0(39);
    sub_100065DCC();
    sub_1000132A0();
  }
  RapportStreamSession.streamID.getter();
  if (v22._object)
  {
    v44._countAndFlagsBits = 0x27204449202CLL;
    v44._object = (void *)0xE600000000000000;
    sub_100065DF8(v22);
    sub_1000132A0();
    sub_100065DF0(39);
    sub_100065DCC();
    v22._countAndFlagsBits = sub_1000132A0();
  }
  v23 = (uint64_t)sub_100059D3C(v22._countAndFlagsBits, "streamSocket");
  if ((_DWORD)v23 != -1)
  {
    v44._countAndFlagsBits = 0x204446202CLL;
    v44._object = (void *)0xE500000000000000;
    LODWORD(v43) = v23;
    v0 = &v43;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32);
    sub_100065DF8(v48);
    sub_1000132A0();
    sub_100065DCC();
    v23 = sub_1000132A0();
  }
  v44._countAndFlagsBits = 0x20536F51202CLL;
  v44._object = (void *)0xE600000000000000;
  v24 = sub_100059D3C(v23, "streamQoS");
  v25 = RPStreamQoSCopyDescription(v24);
  v26 = sub_100059E3C((uint64_t)v25);
  v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  sub_100065DCC();
  v30 = sub_1000132A0();
  v44._countAndFlagsBits = 0x3C204654202CLL;
  v44._object = (void *)0xE600000000000000;
  v31 = sub_100059D3C(v30, "trafficFlags");
  v32 = CUTrafficFlagsCopyDescription(v31);
  v33 = sub_100059E3C((uint64_t)v32);
  v35 = v34;

  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  sub_1000132A0();
  sub_100065DF0(62);
  v37 = v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v37);
  RapportStreamSession.trafficSessionID.getter();
  if (v38._object)
  {
    v39 = v38._object;
    v44._countAndFlagsBits = 0x272044495354202CLL;
    v44._object = (void *)0xE800000000000000;
    sub_100065DF8(v38);
    swift_bridgeObjectRelease(v39);
    sub_100065DF0(39);
    v40 = v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(v40);
  }
  return v45[0];
}

uint64_t sub_100065D08()
{
  return RapportStreamSession.description.getter();
}

uint64_t type metadata accessor for RapportStreamSession()
{
  return objc_opt_self(_TtC13CompanionLink20RapportStreamSession);
}

uint64_t sub_100065D48()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100065DBC()
{
  uint64_t v0;

  String.append(_:)(*(Swift::String *)(v0 - 112));
}

void sub_100065DCC()
{
  uint64_t v0;

  String.append(_:)(*(Swift::String *)(v0 - 112));
}

uint64_t sub_100065DDC(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1, va, 0, 0);
}

void sub_100065DF0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_100065DF8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100065E14()
{
  uint64_t v0;

  return swift_allocObject(v0, 40, 7);
}

void sub_100065E28()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_100065E34()
{
  void *v0;

}

uint64_t sub_100065E40()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t sub_100065E48()
{
  void *v0;

  return RapportStreamSession.init(session:)(v0);
}

NSString sub_100065E54()
{
  return String._bridgeToObjectiveC()();
}

void DarwinNotification.name.getter()
{
  swift_bridgeObjectRetain();
  sub_100005E8C();
}

uint64_t variable initialization expression of DarwinNotification.token()
{
  return 0xFFFFFFFFLL;
}

uint64_t DarwinNotification.token.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100012DD0(v0 + 32, (uint64_t)v2, 0);
  return *(unsigned int *)(v0 + 32);
}

uint64_t DarwinNotification.handler.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  sub_100012DD0(v0 + 40, (uint64_t)v3, 0);
  v1 = *(_QWORD *)(v0 + 40);
  sub_100046E6C(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

void DarwinNotification.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_100012DD0(v2 + 40, (uint64_t)v7, 1);
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  sub_1000121B4(v5, v6);
  sub_100066520();
}

void DarwinNotification.handler.modify(uint64_t a1)
{
  uint64_t v1;

  sub_100012DD0(v1 + 40, a1, 33);
  sub_100005E8C();
}

void DarwinNotification.__allocating_init(check:)(uint64_t a1, uint64_t a2)
{
  sub_100066510();
  DarwinNotification.init(check:)(a1, a2);
  sub_100020E78();
}

uint64_t DarwinNotification.init(check:)(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = sub_1000664F4(a1, a2);
  v5 = String.utf8CString.getter(v4);
  sub_100012DD0((uint64_t)v2, (uint64_t)v7, 33);
  notify_register_check((const char *)(v5 + 32), v2);
  swift_endAccess(v7);
  swift_release(v5);
  sub_100066028();
  return v3;
}

void sub_100066028()
{
  uint64_t v0;
  int v1;
  uint64_t state64;
  _BYTE v3[24];

  sub_100012DD0(v0 + 32, (uint64_t)v3, 0);
  v1 = *(_DWORD *)(v0 + 32);
  state64 = DarwinNotification.state.getter();
  notify_get_state(v1, &state64);
  DarwinNotification.state.setter(state64);
  sub_100066520();
}

void DarwinNotification.__allocating_init(dispatch:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100066510();
  DarwinNotification.init(dispatch:queue:)(a1, a2, a3);
  sub_100020E78();
}

uint64_t DarwinNotification.init(dispatch:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[5];
  uint64_t v14;

  sub_1000664F4(a1, a2);
  v7 = swift_allocObject(&unk_100089C60, 24, 7);
  swift_weakInit(v7 + 16, v4);
  v13[4] = sub_100066238;
  v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000662C8;
  v13[3] = &unk_100089C78;
  v8 = _Block_copy(v13);
  v9 = v14;
  swift_bridgeObjectRetain();
  v10 = a3;
  swift_release(v9);
  v11 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease();
  sub_100012DD0((uint64_t)v3, (uint64_t)v13, 33);
  notify_register_dispatch((const char *)(v11 + 32), v3, v10, v8);
  swift_endAccess(v13);
  swift_release(v11);
  _Block_release(v8);

  sub_100066028();
  return v4;
}

uint64_t sub_100066214()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100066238()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_100012DD0(v0 + 16, (uint64_t)v7, 0);
  result = swift_weakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    sub_100012DD0(result + 40, (uint64_t)&v6, 0);
    v3 = *(void (**)(uint64_t))(v2 + 40);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 48);
      sub_100046E6C(*(_QWORD *)(v2 + 40), v4);
      v5 = sub_1000130A8();
      v3(v5);
      return sub_1000121B4((uint64_t)v3, v4);
    }
    else
    {
      return sub_1000130A8();
    }
  }
  return result;
}

uint64_t sub_1000662C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100066304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100066314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t DarwinNotification.state.getter()
{
  uint64_t v0;
  int v1;
  _BYTE v3[24];
  _BYTE v4[24];

  sub_100012DD0(v0 + 32, (uint64_t)v4, 0);
  v1 = *(_DWORD *)(v0 + 32);
  sub_100012DD0(v0 + 56, (uint64_t)v3, 33);
  notify_get_state(v1, (uint64_t *)(v0 + 56));
  swift_endAccess(v3);
  return *(_QWORD *)(v0 + 56);
}

void DarwinNotification.state.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  sub_100012DD0(v1 + 56, (uint64_t)v5, 1);
  if (*(_QWORD *)(v1 + 56) != a1)
  {
    *(_QWORD *)(v1 + 56) = a1;
    sub_100012DD0(v1 + 32, (uint64_t)&v4, 0);
    notify_set_state(*(_DWORD *)(v1 + 32), a1);
    v3 = String.utf8CString.getter(*(_QWORD *)(v1 + 16));
    notify_post((const char *)(v3 + 32));
    sub_1000130A8();
  }
  sub_100066520();
}

Swift::Void __swiftcall DarwinNotification.cancel()()
{
  uint64_t v0;
  int v1;
  _BYTE v2[24];

  sub_100012DD0(v0 + 32, (uint64_t)v2, 1);
  v1 = *(_DWORD *)(v0 + 32);
  if (v1 != -1)
  {
    notify_cancel(v1);
    *(_DWORD *)(v0 + 32) = -1;
  }
  sub_100020EFC();
}

uint64_t DarwinNotification.deinit()
{
  uint64_t v0;

  DarwinNotification.cancel()();
  swift_bridgeObjectRelease();
  sub_1000121B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t DarwinNotification.__deallocating_deinit()
{
  uint64_t v0;

  DarwinNotification.deinit();
  return swift_deallocClassInstance(v0, 64, 7);
}

void DarwinNotification.state.modify(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = DarwinNotification.state.getter();
  sub_100005E8C();
}

void sub_1000664B4(uint64_t *a1)
{
  DarwinNotification.state.setter(*a1);
}

uint64_t type metadata accessor for DarwinNotification()
{
  return objc_opt_self(_TtC12EyeCandyCore18DarwinNotification);
}

uint64_t sub_1000664F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 32) = -1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t sub_100066510()
{
  uint64_t v0;

  return swift_allocObject(v0, 64, 7);
}

uint64_t static DispatchTimeInterval.seconds(_:)(double a1)
{
  double v1;
  char v2;
  double v3;
  char v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t result;

  if (a1 < 0.0)
    goto LABEL_37;
  if (a1 < 9223372040.0)
  {
    sub_100067874();
    if (v2)
    {
      __break(1u);
    }
    else if (v1 > -9.22337204e18)
    {
      sub_100067864();
      if (!v4)
        goto LABEL_28;
      goto LABEL_24;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a1 < 9.22337204e12)
  {
    sub_100067874();
    if (v2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    sub_100067864();
    if (!v4)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (a1 < 9.22337204e15)
  {
    sub_100067874();
    if (v2)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v6 <= -9.22337204e18)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_100067864();
    if (!v4)
      goto LABEL_34;
    goto LABEL_24;
  }
  sub_100067864();
  if (!v4)
    goto LABEL_25;
  sub_100067874();
  if (v2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v3 > -9.22337204e18)
  {
LABEL_24:
    sub_100067A9C(v3);
LABEL_25:
    sub_1000677E4();
    v7 = sub_1000679BC();
    return v8(v7);
  }
LABEL_36:
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x8000000100070E70, "EyeCandyCore/Queue.swift", 24, 2, 16, 0);
  __break(1u);
  return result;
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100067768();
  v14 = v5;
  v15 = v6;
  sub_1000677E4();
  sub_100067AD4();
  __chkstk_darwin(v7);
  sub_100067950();
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  sub_100067844();
  sub_100067A88();
  __chkstk_darwin(v11);
  sub_1000676DC();
  __chkstk_darwin(v12);
  sub_1000678DC();
  sub_100067A34();
  sub_100067A2C(v2);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v10, enum case for DispatchTimeInterval.never(_:));
  sub_100067AC8();
  sub_100067934();
  sub_1000679D4(v1);
  sub_1000679D4((uint64_t)v10);
  sub_100067A2C(v3);
  sub_1000676F8();
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:interval:)(Swift::Double _, Swift::Double interval)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100067768();
  v16 = v5;
  v17 = v6;
  v8 = v7;
  sub_1000677E4();
  sub_100067AD4();
  __chkstk_darwin(v9);
  sub_100067950();
  __chkstk_darwin(v10);
  v12 = (char *)&v15 - v11;
  sub_100067844();
  sub_100067A88();
  __chkstk_darwin(v13);
  sub_1000676DC();
  __chkstk_darwin(v14);
  sub_1000678DC();
  sub_100067A44();
  sub_100067A2C(v3);
  static DispatchTimeInterval.seconds(_:)(v8);
  sub_100067AC8();
  sub_100067934();
  sub_1000679D4(v2);
  sub_1000679D4((uint64_t)v12);
  sub_100067A2C(v4);
  sub_1000676F8();
}

uint64_t sub_100066890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100012DF0();
  v4 = v3 - v2;
  sub_100012E50(v5, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchQoS.QoSClass.default(_:), v0);
  v6 = static OS_dispatch_queue.global(qos:)(v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  static OS_dispatch_queue.defaultPriority = v6;
  return result;
}

uint64_t *OS_dispatch_queue.defaultPriority.unsafeMutableAddressor()
{
  if (qword_10009A0E0 != -1)
    swift_once(&qword_10009A0E0, sub_100066890);
  return &static OS_dispatch_queue.defaultPriority;
}

id static OS_dispatch_queue.defaultPriority.getter()
{
  if (qword_10009A0E0 != -1)
    swift_once(&qword_10009A0E0, sub_100066890);
  return (id)static OS_dispatch_queue.defaultPriority;
}

void OS_dispatch_queue.after(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[5];
  uint64_t v35;

  sub_100067768();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v4 - 8);
  sub_1000569E8();
  __chkstk_darwin(v5);
  sub_100012DF0();
  v8 = v7 - v6;
  v9 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  sub_1000569E8();
  __chkstk_darwin(v10);
  sub_100012DF0();
  v13 = v12 - v11;
  v14 = sub_100067844();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v29 - v20;
  static DispatchTime.now()(v19);
  sub_100067A34();
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  v34[4] = v3;
  v35 = v1;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 1107296256;
  v34[2] = sub_100050438;
  v34[3] = &unk_100089D20;
  v23 = _Block_copy(v34);
  v24 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v24);
  v33 = _swiftEmptyArrayStorage;
  sub_100055D00((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_10004922C();
  sub_100067948((unint64_t *)&qword_100093000);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v4, v26);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v21, v13, v8, v23);
  _Block_release(v23);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v13, v31);
  v22(v21, v14);
  swift_release(v35);
  sub_1000676F8();
}

uint64_t sub_100066BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100066BDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void OS_dispatch_queue.once(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  void (*v55)();
  _QWORD *v56;

  sub_100067768();
  v40 = v0;
  v45 = v3;
  v46 = v4;
  v5 = sub_1000677E4();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  sub_1000569E8();
  __chkstk_darwin(v6);
  sub_100067730(v7, v39);
  __chkstk_darwin(v8);
  v50 = (char *)&v39 - v9;
  v10 = sub_100067844();
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  sub_1000569E8();
  __chkstk_darwin(v11);
  sub_1000676DC();
  v13 = __chkstk_darwin(v12);
  v21 = sub_100067750(v13, v14, v15, v16, v17, v18, v19, v20, v39);
  v43 = *(_QWORD *)(v21 - 8);
  v44 = v21;
  sub_1000569E8();
  __chkstk_darwin(v22);
  v23 = sub_100067714();
  v41 = *(_QWORD *)(v23 - 8);
  v42 = v23;
  sub_1000569E8();
  __chkstk_darwin(v24);
  sub_100067800();
  sub_100012FE0();
  __chkstk_darwin(v25);
  sub_100013234();
  sub_100012E50(v26, &qword_100093D98, OS_dispatch_source_ptr);
  v53 = (void **)_swiftEmptyArrayStorage;
  sub_1000679DC(&qword_100093DA0, v27, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  sub_10004922C();
  sub_100067948((unint64_t *)&unk_100093DB0);
  sub_1000677C4(v28);
  sub_100067904();
  sub_1000678C8();
  sub_10001EF9C();
  v29 = (_QWORD *)sub_100067ABC((uint64_t)&unk_100089D58);
  v30 = v46;
  v29[2] = v45;
  v29[3] = v30;
  v29[4] = &qword_100093DA8;
  v55 = sub_100066E24;
  v56 = v29;
  v53 = _NSConcreteStackBlock;
  v54 = 1107296256;
  sub_1000677F4((uint64_t)sub_100050438);
  sub_100067838();
  v31 = swift_unknownObjectRetain(&qword_100093DA8);
  static DispatchQoS.unspecified.getter(v31);
  sub_100067A64();
  sub_10006796C();
  sub_1000679A4();
  sub_100067994();
  sub_100067A54();
  v32 = sub_100067A3C();
  static DispatchTime.now()(v32);
  v33 = v47;
  sub_100067A34();
  v34 = sub_100067784();
  sub_10006789C(v34, enum case for DispatchTimeInterval.never(_:));
  sub_1000679E4();
  v35 = sub_100067AA8();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v35, v36, v37, v38);
  sub_1000677EC(v1);
  sub_1000677EC(v2);
  sub_10006779C(v33);
  OS_dispatch_source.resume()();
  sub_100067A7C();
  sub_1000676F8();
}

void OS_dispatch_queue.wallOnce(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_100067768();
  v45 = v3;
  v46 = v4;
  v6 = v5;
  sub_1000677E4();
  sub_1000569E8();
  __chkstk_darwin(v7);
  sub_100067730(v8, v42);
  v10 = __chkstk_darwin(v9);
  sub_10006784C(v10, v11, v12, v13, v14, v15, v16, v17, v43);
  sub_1000569E8();
  __chkstk_darwin(v18);
  sub_1000676DC();
  v20 = __chkstk_darwin(v19);
  sub_100067750(v20, v21, v22, v23, v24, v25, v26, v27, v44);
  sub_1000569E8();
  __chkstk_darwin(v28);
  sub_100067714();
  sub_1000569E8();
  __chkstk_darwin(v29);
  sub_100067800();
  sub_100012FE0();
  __chkstk_darwin(v30);
  sub_100013234();
  sub_100012E50(v31, &qword_100093D98, OS_dispatch_source_ptr);
  sub_1000679DC(&qword_100093DA0, v32, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  sub_10004922C();
  sub_100067948((unint64_t *)&unk_100093DB0);
  sub_1000677C4(v33);
  sub_100067904();
  sub_1000678C8();
  sub_10001EF9C();
  v34 = (_QWORD *)sub_100067ABC((uint64_t)&unk_100089DA8);
  v34[2] = v45;
  v34[3] = v46;
  v34[4] = &qword_100093DA8;
  sub_1000677F4((uint64_t)sub_100050438);
  sub_100067838();
  v35 = swift_unknownObjectRetain(&qword_100093DA8);
  static DispatchQoS.unspecified.getter(v35);
  sub_100067A64();
  sub_10006796C();
  sub_1000679A4();
  sub_100067994();
  sub_100067A54();
  v36 = sub_100067A3C();
  static DispatchWallTime.now()(v36);
  + infix(_:_:)(v2, v6);
  v37 = sub_100067784();
  sub_10006789C(v37, enum case for DispatchTimeInterval.never(_:));
  sub_1000679E4();
  v38 = sub_100067AA8();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v38, v39, v40, v41);
  sub_1000677EC(v0);
  sub_1000677EC(v1);
  sub_10006779C(v47);
  OS_dispatch_source.resume()();
  sub_100067A7C();
  sub_1000676F8();
}

uint64_t sub_10006705C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100067088()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  swift_getObjectType(v1);
  OS_dispatch_source.cancel()();
}

uint64_t sub_1000670C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  *a1 = 0;
  sub_1000677E4();
  v1 = sub_1000679BC();
  return v2(v1);
}

void OS_dispatch_queue.timer(_:interval:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_100067768();
  v37 = v0;
  v39 = v2;
  v40 = v3;
  v4 = sub_1000677E4();
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  sub_1000569E8();
  __chkstk_darwin(v5);
  sub_100067730(v6, v34[0]);
  __chkstk_darwin(v7);
  v44 = (char *)v34 - v8;
  v9 = sub_100067844();
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  sub_1000569E8();
  __chkstk_darwin(v10);
  sub_1000676DC();
  v12 = __chkstk_darwin(v11);
  v38 = sub_100067750(v12, v13, v14, v15, v16, v17, v18, v19, v34[0]);
  v36 = *(_QWORD *)(v38 - 8);
  sub_1000569E8();
  __chkstk_darwin(v20);
  v35 = sub_100067714();
  v34[1] = *(_QWORD *)(v35 - 8);
  sub_1000569E8();
  __chkstk_darwin(v21);
  sub_10006781C();
  sub_100012FE0();
  __chkstk_darwin(v22);
  sub_1000679F4();
  sub_100012E50(v23, &qword_100093D98, OS_dispatch_source_ptr);
  v47 = (void **)_swiftEmptyArrayStorage;
  sub_1000679DC(&qword_100093DA0, v24, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v25 = sub_10004922C();
  sub_100067948((unint64_t *)&unk_100093DB0);
  sub_1000677A4(v26);
  sub_1000679AC();
  sub_1000678B4();
  sub_10001EF9C();
  v49 = v39;
  v50 = v40;
  v47 = _NSConcreteStackBlock;
  v48 = 1107296256;
  sub_1000677F4((uint64_t)sub_100050438);
  v27 = sub_100067838();
  static DispatchQoS.unspecified.getter(v27);
  sub_100067A70();
  sub_1000678F0();
  sub_1000679A4();
  sub_100067980();
  sub_100067884();
  v28 = sub_100067A3C();
  static DispatchTime.now()(v28);
  v29 = v41;
  sub_100067A44();
  sub_100067784();
  sub_100067A1C();
  sub_100067A0C();
  v30 = sub_100067918();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v30, v31, v32, v33);
  sub_1000677EC(v25);
  sub_1000677EC(v1);
  sub_10006779C(v29);
  OS_dispatch_source.resume()();
  sub_100067A7C();
  sub_1000676F8();
}

void OS_dispatch_queue.wallTimer(_:interval:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_100067768();
  v3 = v2;
  sub_1000677E4();
  sub_1000569E8();
  __chkstk_darwin(v4);
  sub_100067730(v5, v38);
  v7 = __chkstk_darwin(v6);
  sub_10006784C(v7, v8, v9, v10, v11, v12, v13, v14, v39);
  sub_1000569E8();
  __chkstk_darwin(v15);
  sub_1000676DC();
  v17 = __chkstk_darwin(v16);
  sub_100067750(v17, v18, v19, v20, v21, v22, v23, v24, v40);
  sub_1000569E8();
  __chkstk_darwin(v25);
  sub_100067714();
  sub_1000569E8();
  __chkstk_darwin(v26);
  sub_10006781C();
  sub_100012FE0();
  __chkstk_darwin(v27);
  sub_1000679F4();
  sub_100012E50(v28, &qword_100093D98, OS_dispatch_source_ptr);
  sub_1000679DC(&qword_100093DA0, v29, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v30 = sub_10004922C();
  sub_100067948((unint64_t *)&unk_100093DB0);
  sub_1000677A4(v31);
  sub_1000679AC();
  sub_1000678B4();
  sub_10001EF9C();
  sub_1000677F4((uint64_t)sub_100050438);
  v32 = sub_100067838();
  static DispatchQoS.unspecified.getter(v32);
  sub_100067A70();
  sub_1000678F0();
  sub_1000679A4();
  sub_100067980();
  sub_100067884();
  v33 = sub_100067A3C();
  static DispatchWallTime.now()(v33);
  + infix(_:_:)(v1, v3);
  sub_100067784();
  sub_100067A1C();
  sub_100067A0C();
  v34 = sub_100067918();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v34, v35, v36, v37);
  sub_1000677EC(v30);
  sub_1000677EC(v0);
  sub_10006779C(v41);
  OS_dispatch_source.resume()();
  sub_100067A7C();
  sub_1000676F8();
}

uint64_t OS_dispatch_semaphore.wait(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v11;

  v0 = sub_100067844();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v11 - v6;
  static DispatchTime.now()(v5);
  sub_100067A34();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v9 = OS_dispatch_semaphore.wait(timeout:)(v7) & 1;
  v8(v7, v0);
  return v9;
}

void static OS_dispatch_source.makeSignalSourceIgnored(signal:queue:)(uint64_t a1, uint64_t a2)
{
  void (__cdecl *v4)(int);
  void (__cdecl *v5)(int);

  v4 = (void (__cdecl *)(int))SIG_IGN.getter();
  v5 = signal(a1, v4);
  sub_100012E50((uint64_t)v5, &qword_100093D98, OS_dispatch_source_ptr);
  static OS_dispatch_source.makeSignalSource(signal:queue:)(a1, a2);
  sub_100005E8C();
}

double OS_dispatch_source_data_replace.doubleData.getter()
{
  return COERCE_DOUBLE(OS_dispatch_source.data.getter());
}

void OS_dispatch_source_data_replace.doubleData.setter(double a1)
{
  OS_dispatch_source_data_replace.replace(data:)(*(Swift::UInt *)&a1);
}

void (*OS_dispatch_source_data_replace.doubleData.modify(_QWORD *a1, uint64_t a2))(Swift::UInt *a1)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = OS_dispatch_source.data.getter(a2);
  return sub_100067698;
}

void sub_100067698(Swift::UInt *a1)
{
  OS_dispatch_source_data_replace.replace(data:)(*a1);
}

uint64_t sub_100067714()
{
  return type metadata accessor for DispatchQoS(0);
}

void sub_100067730(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100067750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 208) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_100067784()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 200) + 8))(v0, *(_QWORD *)(v1 - 192));
}

uint64_t sub_10006779C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000677A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 152, v2, a1, v3, v1);
}

uint64_t sub_1000677C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 152, v2, a1, v3, v1);
}

uint64_t sub_1000677E4()
{
  return type metadata accessor for DispatchTimeInterval(0);
}

uint64_t sub_1000677EC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void *sub_1000677F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = v1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t sub_100067800()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags(0);
}

uint64_t sub_10006781C()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags(0);
}

uint64_t sub_100067838()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100067844()
{
  return type metadata accessor for DispatchTime(0);
}

uint64_t sub_10006784C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 184) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWallTime(0);
}

uint64_t sub_100067884()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 264) + 8))(v0, *(_QWORD *)(v1 - 256));
}

uint64_t sub_10006789C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 168) + 104))(*(_QWORD *)(v2 - 184), a2, *(_QWORD *)(v2 - 160));
}

uint64_t sub_1000678B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000678C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000678DC()
{
  return static DispatchTime.now()();
}

uint64_t sub_1000678F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source.setEventHandler(qos:flags:handler:)(v2, v3, v0, v1);
}

uint64_t sub_100067904()
{
  uint64_t v0;
  uint64_t v1;

  return static OS_dispatch_source.makeTimerSource(flags:queue:)(v0, *(_QWORD *)(v1 - 264));
}

uint64_t sub_100067918()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100067934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v3, v2, v1, v0);
}

void sub_100067948(unint64_t *a1)
{
  uint64_t *v1;

  sub_100054F18(a1, v1);
}

uint64_t sub_10006796C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source.setEventHandler(qos:flags:handler:)(v1, v2, v0, v3);
}

uint64_t sub_100067980()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t sub_100067994()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 240) + 8))(v0, *(_QWORD *)(v1 - 232));
}

void sub_1000679A4()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_1000679AC()
{
  uint64_t v0;
  uint64_t v1;

  return static OS_dispatch_source.makeTimerSource(flags:queue:)(v0, *(_QWORD *)(v1 - 240));
}

uint64_t sub_1000679BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000679D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_1000679DC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100055D00(a1, v3, a3);
}

uint64_t sub_1000679E4()
{
  uint64_t v0;

  return sub_1000670C0(*(_QWORD **)(v0 - 176));
}

uint64_t sub_100067A0C()
{
  uint64_t v0;

  return sub_1000670C0(*(_QWORD **)(v0 - 176));
}

uint64_t sub_100067A1C()
{
  double v0;

  return static DispatchTimeInterval.seconds(_:)(v0);
}

uint64_t sub_100067A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100067A34()
{
  double v0;

  return + infix(_:_:)(v0);
}

uint64_t sub_100067A3C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 112));
}

uint64_t sub_100067A44()
{
  double v0;

  return + infix(_:_:)(v0);
}

uint64_t sub_100067A54()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 256) + 8))(v0, *(_QWORD *)(v1 - 248));
}

uint64_t sub_100067A64()
{
  return sub_1000543AC();
}

uint64_t sub_100067A70()
{
  return sub_1000543AC();
}

uint64_t sub_100067A7C()
{
  uint64_t v0;

  return v0;
}

void sub_100067A9C(double a1)
{
  _QWORD *v1;

  *v1 = (uint64_t)a1;
}

uint64_t sub_100067AA8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100067ABC(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_100067AC8()
{
  _QWORD *v0;

  return sub_1000670C0(v0);
}

void ClassHashable.hash(into:)()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t sub_100067B10()
{
  return 0;
}

uint64_t sub_100067B7C()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v3;
  char *v4;
  char *v5;

  v1 = *(_DWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 1) != 30 || v1 == 0)
    return 0;
  v4 = (char *)sub_100006D24(16);
  v5 = if_indextoname(v1, v4);
  if (v5)
    v3 = String.init(cString:)(v5);
  else
    v3 = 0;
  sub_100006D04((uint64_t)v4);
  return v3;
}

const char *sub_100067C34()
{
  __uint8_t *v0;
  socklen_t sa_len;
  char *v2;
  char *v3;
  int v4;
  const char *result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  sockaddr v12[8];

  v12[0].sa_len = *v0;
  memcpy(&v12[0].sa_family, v0 + 1, 0x7FuLL);
  if (v12[0].sa_len)
    sa_len = v12[0].sa_len;
  else
    sa_len = 128;
  v2 = (char *)sub_100006D24(1025);
  v3 = (char *)sub_100006D24(32);
  v4 = getnameinfo(v12, sa_len, v2, 0x401u, v3, 0x20u, 26);
  if (!v4)
  {
    v6 = String.init(cString:)(v2);
    v7 = String.init(cString:)(v3);
    v9 = v8;
    v10._countAndFlagsBits = 58;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = v7;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v9);
    goto LABEL_8;
  }
  result = gai_strerror(v4);
  if (result)
  {
    v6 = String.init(cString:)(result);
LABEL_8:
    sub_100006D04((uint64_t)v3);
    sub_100006D04((uint64_t)v2);
    return (const char *)v6;
  }
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Domain.result()
{
  return 0;
}

uint64_t variable initialization expression of Domain.peer@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[136];

  sub_100067DC0((uint64_t)v3);
  return sub_100067DE0((uint64_t)v3, a1);
}

double sub_100067DC0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_100067DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100010F40((uint64_t *)&unk_100094870);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *variable initialization expression of Domain.completions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of Clock.masterIdentifier()
{
  return TSNullgPTPClockIdentity;
}

uint64_t sub_100067E54(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v10 = v2;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  v8 = a1;
  sub_10006B3A0();
  v4._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v8, 16, 1);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return v9;
}

id sub_100067EE4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimeSyncManager()), "init");
  qword_100094880 = (uint64_t)result;
  return result;
}

id sub_100067F14()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation];
  *(_QWORD *)v2 = 0;
  v2[8] = -1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_clocks] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions] = &_swiftEmptyArrayStorage;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_100067FA0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006CC4(v0, qword_100094888);
  sub_100006CAC(v0, (uint64_t)qword_100094888);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010006E4B0, 0x636E7973656D6974, 0xE800000000000000);
}

BOOL sub_100068014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v5 = swift_allocObject(&unk_10008A258, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
  swift_beginAccess(v6, v11, 33, 0);
  swift_retain(a2);
  sub_10006AE80((uint64_t *)&unk_100094AD0);
  v7 = *(char **)(*v6 + 16);
  sub_10006AED8(v7, (uint64_t *)&unk_100094AD0);
  v8 = *v6;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 16 * (_QWORD)v7;
  *(_QWORD *)(v9 + 32) = sub_10006B198;
  *(_QWORD *)(v9 + 40) = v5;
  swift_endAccess(v11);
  return sub_1000680E4();
}

BOOL sub_1000680E4()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(void **);
  void *v10;
  char v11;
  _BYTE v12[24];

  v1 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation
                          + 8);
  if (v1 != 255)
  {
    v2 = *(void **)(v0
                  + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
    v3 = (uint64_t *)(v0
                   + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
    swift_beginAccess(v3, v12, 1, 0);
    v4 = *v3;
    *v3 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10006B2B4(v2, v1);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = (uint64_t *)(v4 + 40);
      do
      {
        v8 = (void (*)(void **))*(v6 - 1);
        v7 = *v6;
        v10 = v2;
        v11 = v1 & 1;
        swift_retain(v7);
        v8(&v10);
        swift_release(v7);
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    sub_10006B21C(v2, v1);
    swift_bridgeObjectRelease(v4);
  }
  return v1 != 255;
}

void sub_1000681D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  sub_100068014(a1, a2);
  if (!sub_1000680E4())
  {
    if (qword_100094868 != -1)
      swift_once(&qword_100094868, sub_100067FA0);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100006CAC(v2, (uint64_t)qword_100094888);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Activating TimeSync", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    sub_1000682BC();
  }
}

void sub_1000682BC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v1 = (void *)objc_opt_self(TSClockManager);
  v2 = swift_allocObject(&unk_10008A078, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v6[4] = sub_10006B240;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100050438;
  v6[3] = &unk_10008A090;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = v0;
  swift_release(v4);
  objc_msgSend(v1, "notifyWhenClockManagerIsAvailable:", v3);
  _Block_release(v3);
}

void sub_10006837C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  unsigned int v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id aBlock[5];
  uint64_t v25;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100094868 != -1)
    swift_once(&qword_100094868, sub_100067FA0);
  v6 = sub_100006CAC(v2, (uint64_t)qword_100094888);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "TSClockManager is Available", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_msgSend((id)objc_opt_self(TSClockManager), "sharedClockManager");
  objc_msgSend(v10, "addClient:", a1);
  aBlock[0] = 0;
  v11 = objc_msgSend(v10, "addgPTPServicesWithError:", aBlock);
  v12 = aBlock[0];
  if (v11)
  {
    v13 = (void *)objc_opt_self(TSgPTPManager);
    v14 = swift_allocObject(&unk_10008A0C8, 24, 7);
    *(_QWORD *)(v14 + 16) = a1;
    aBlock[4] = sub_10006B268;
    v25 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100050438;
    aBlock[3] = &unk_10008A0E0;
    v15 = _Block_copy(aBlock);
    v16 = v25;
    v17 = v12;
    v18 = a1;
    swift_release(v16);
    objc_msgSend(v13, "notifyWhengPTPManagerIsAvailable:", v15);
    _Block_release(v15);

  }
  else
  {
    v19 = aBlock[0];
    v20 = (void *)_convertNSErrorToError(_:)(v12);

    swift_willThrow(v21, v22);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    __chkstk_darwin(v23);
    aBlock[-2] = v20;
    sub_100061250(sub_1000689BC, 0, (uint64_t (*)(void))sub_1000123F8);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_errorRetain(v20);
    sub_100068798(v20, 1);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
  }
}

void sub_100068678()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  id v6;

  if (qword_100094868 != -1)
    swift_once(&qword_100094868, sub_100067FA0);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100006CAC(v0, (uint64_t)qword_100094888);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "gPTPManager is Available", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = objc_msgSend((id)objc_opt_self(TSgPTPManager), "sharedgPTPManager");
  v6 = v5;
  sub_100068798(v5, 0);

}

uint64_t sub_100068798(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = swift_allocObject(&unk_10008A118, 33, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = a1;
  v14 = a2 & 1;
  *(_BYTE *)(v13 + 32) = a2 & 1;
  aBlock[4] = sub_10006B29C;
  v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_10008A130;
  v15 = _Block_copy(aBlock);
  v16 = v27;
  v17 = v3;
  sub_10006B2A8(a1, v14);
  v18 = swift_release(v16);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100055D00((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = v19;
  v21 = sub_100010F40((uint64_t *)&unk_100092170);
  sub_100054F18((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

uint64_t sub_1000689BC()
{
  return 0x636E7953656D6954;
}

BOOL sub_1000689E0(uint64_t a1, void *a2, char a3)
{
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  char v7;

  v4 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  v5 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(_QWORD *)v4 = a2;
  v6 = *(_BYTE *)(v4 + 8);
  v7 = a3 & 1;
  *(_BYTE *)(v4 + 8) = a3 & 1;
  sub_10006B21C(v5, v6);
  sub_10006B2A8(a2, v7);
  return sub_1000680E4();
}

id sub_100068A3C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100068AC0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100094868 != -1)
    swift_once(&qword_100094868, sub_100067FA0);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100006CAC(v9, (uint64_t)qword_100094888);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "TimeSync Connection Interrupted", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  v16 = swift_allocObject(&unk_10008A028, 24, 7);
  *(_QWORD *)(v16 + 16) = v1;
  aBlock[4] = sub_10006B1FC;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_10008A040;
  v17 = _Block_copy(aBlock);
  v18 = v29;
  v19 = v1;
  v20 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100055D00((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = v21;
  v23 = sub_100010F40((uint64_t *)&unk_100092170);
  sub_100054F18((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100068D74(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  v2 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(_QWORD *)v1 = 0;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(v1 + 8) = -1;
  sub_10006B21C(v2, v3);
  sub_1000682BC();
}

uint64_t sub_100068E0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100094868 != -1)
    swift_once(&qword_100094868, sub_100067FA0);
  v8 = sub_100006CAC(v4, (uint64_t)qword_100094888);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10 = __chkstk_darwin(v9);
  *(&v16 - 2) = v11;
  __chkstk_darwin(v10);
  *(&v16 - 2) = a1;
  sub_100061250(sub_10006B398, v12, sub_100012D04);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = *(unsigned __int8 *)(v2 + 24);
  if (v14 == 255 || (v14 & 1) == 0)
  {
    v15 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = a1;
    *(_BYTE *)(v2 + 24) = 1;
    sub_100069318(v15, v14);
    swift_errorRetain(a1);
    return sub_100068F84();
  }
  return result;
}

BOOL sub_100068F84()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  uint64_t v9;
  char v10;
  _BYTE v11[24];

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_beginAccess(v0 + 168, v11, 1, 0);
    v3 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = _swiftEmptyArrayStorage;
    sub_10006B3DC(v2, v1);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = (uint64_t *)(v3 + 40);
      do
      {
        v7 = (void (*)(uint64_t *))*(v5 - 1);
        v6 = *v5;
        v9 = v2;
        v10 = v1 & 1;
        swift_retain(v6);
        v7(&v9);
        swift_release(v6);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    sub_100069318(v2, v1);
    swift_bridgeObjectRelease(v3);
  }
  return v1 != 255;
}

void Domain.__allocating_init()()
{
  uint64_t v0;

  sub_100014AC4(v0, 176);
  Domain.init()();
  sub_100005E8C();
}

uint64_t Domain.init()()
{
  uint64_t v0;
  _BYTE v2[136];

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = -1;
  sub_100067DC0((uint64_t)v2);
  sub_100067DE0((uint64_t)v2, v0 + 32);
  *(_QWORD *)(v0 + 168) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t Domain.deinit()
{
  uint64_t v0;

  Domain.deallocate()();
  sub_100069318(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Void __swiftcall Domain.deallocate()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = *(_BYTE *)(v0 + 24);
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4 != TSNullClockIdentifier)
    {
      sub_1000123B0(*(_QWORD *)(v0 + 16), 0);
      if (qword_100094868 != -1)
        swift_once(&qword_100094868, sub_100067FA0);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_100006CAC(v5, (uint64_t)qword_100094888);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v9 = 134217984;
        v14 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%llx: Deallocating", v9, 0xCu);
        swift_slowDealloc(v9, -1, -1);
      }

      if (qword_100094860 != -1)
        swift_once(&qword_100094860, sub_100067EE4);
      v10 = sub_100014AC4((uint64_t)&unk_100089FD8, 32);
      *(_QWORD *)(v10 + 16) = v1;
      *(_QWORD *)(v10 + 24) = v4;
      swift_retain(v1);
      sub_1000681D0((uint64_t)sub_100069C64, v10);
      swift_release(v10);
      sub_100069318(v3, v2);
    }
  }
  sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
  v11 = sub_10006B470(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 207);
  v12 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v11;
  v13 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 1;
  sub_100069318(v12, v13);
}

uint64_t sub_100069318(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1000123BC(result, a2 & 1);
  return result;
}

uint64_t Domain.__deallocating_deinit()
{
  uint64_t v0;

  Domain.deinit();
  return swift_deallocClassInstance(v0, 176, 7);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Domain.bind(peer:)(Swift::String peer)
{
  uint64_t v1;
  _OWORD v2[8];
  _BYTE __dst[128];

  memset(v2, 0, sizeof(v2));
  sub_1000693F0((uint64_t)v2, 0x80u, peer._countAndFlagsBits);
  if (!v1)
  {
    memcpy(__dst, v2, sizeof(__dst));
    sub_1000694E4(__dst);
  }
}

uint64_t sub_1000693F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  v11 = a2;
  v5 = String.utf8CString.getter(a3);
  v6 = StringToSockAddr(v5 + 32, a1, v4, &v11);
  v7 = swift_release(v5);
  result = noErr.getter(v7);
  if (v6 != (_DWORD)result)
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v9 = sub_10001F3E0(v6, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 154);
    return swift_willThrow(v9, v10);
  }
  return result;
}

uint64_t sub_1000694E4(const void *a1)
{
  uint64_t v1;
  id v4;
  uint64_t v5;
  _BYTE __dst[136];
  _BYTE v7[136];
  _BYTE v8[136];

  sub_100067DE0(v1 + 32, (uint64_t)v7);
  sub_100067DE0((uint64_t)v7, (uint64_t)v8);
  if (sub_10006B160((uint64_t)v8) == 1)
  {
    memcpy(__dst, a1, 0x80uLL);
    sub_10006B3F4((uint64_t)__dst);
    sub_100067DE0((uint64_t)__dst, v1 + 32);
    return sub_1000695FC();
  }
  else
  {
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v4 = sub_10006B470(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 166);
    return swift_willThrow(v4, v5);
  }
}

BOOL Domain.isBound.getter()
{
  uint64_t v0;
  _BYTE v2[136];

  sub_100067DE0(v0 + 32, (uint64_t)v2);
  return sub_10006B160((uint64_t)v2) == 0;
}

uint64_t sub_1000695FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[136];
  _BYTE __src[136];
  _BYTE __dst[128];

  v1 = v0;
  result = sub_100068F84();
  if ((result & 1) == 0)
  {
    sub_100067DE0(v0 + 32, (uint64_t)v15);
    sub_100067DE0((uint64_t)v15, (uint64_t)__src);
    result = sub_10006B160((uint64_t)__src);
    if ((_DWORD)result != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      if (qword_100094868 != -1)
        swift_once(&qword_100094868, sub_100067FA0);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100006CAC(v3, (uint64_t)qword_100094888);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(12, -1);
        v8 = swift_slowAlloc(32, -1);
        v14 = v8;
        *(_DWORD *)v7 = 136446210;
        v9 = sub_100067C34();
        v11 = v10;
        v13 = sub_100015FFC((uint64_t)v9, v10, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
        swift_bridgeObjectRelease(v11);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Allocating", v7, 0xCu);
        swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v8, -1, -1);
        swift_slowDealloc(v7, -1, -1);
      }

      if (qword_100094860 != -1)
        swift_once(&qword_100094860, sub_100067EE4);
      v12 = swift_allocObject(&unk_10008A1E0, 152, 7);
      *(_QWORD *)(v12 + 16) = v1;
      memcpy((void *)(v12 + 24), __dst, 0x80uLL);
      swift_retain(v1);
      sub_1000681D0((uint64_t)sub_10006B358, v12);
      return swift_release(v12);
    }
  }
  return result;
}

uint64_t Domain.allocate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = sub_100014AC4((uint64_t)&unk_10008A000, 32);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  sub_100012DD0(v2 + 168, (uint64_t)v10, 33);
  swift_retain(a2);
  sub_10006AE80(&qword_100094AC0);
  v6 = *(char **)(*(_QWORD *)(v2 + 168) + 16);
  sub_10006AED8(v6, &qword_100094AC0);
  v7 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * (_QWORD)v6;
  *(_QWORD *)(v8 + 32) = sub_10006B198;
  *(_QWORD *)(v8 + 40) = v5;
  swift_endAccess(v10);
  return sub_1000695FC();
}

void sub_1000698F0(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  id v32;
  uint64_t v33;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100094868 != -1)
      swift_once(&qword_100094868, sub_100067FA0);
    v19 = sub_100006CAC(v7, (uint64_t)qword_100094888);
    v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v19, v7);
    v21 = __chkstk_darwin(v20);
    *(_QWORD *)&v31[-16] = a4;
    __chkstk_darwin(v21);
    *(_QWORD *)&v31[-16] = a1;
    sub_100061250(sub_10006B45C, v22, sub_100012D04);
    sub_10006B234(a1, 1);
    goto LABEL_14;
  }
  v32 = 0;
  v11 = objc_msgSend(a1, "removePTPInstanceWithIdentifier:error:", a4, &v32);
  v12 = v32;
  if ((v11 & 1) == 0)
  {
    v23 = v32;
    v24 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v25, v26);
    if (qword_100094868 != -1)
      swift_once(&qword_100094868, sub_100067FA0);
    v27 = sub_100006CAC(v7, (uint64_t)qword_100094888);
    v28 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v27, v7);
    v29 = __chkstk_darwin(v28);
    *(_QWORD *)&v31[-16] = a4;
    __chkstk_darwin(v29);
    *(_QWORD *)&v31[-16] = v24;
    sub_100061250(sub_10006B45C, v30, sub_100012D04);
    sub_10006B234(a1, 0);
    swift_errorRelease(v24);
LABEL_14:
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  v13 = qword_100094868;
  v14 = v32;
  if (v13 != -1)
    swift_once(&qword_100094868, sub_100067FA0);
  v15 = sub_100006CAC(v7, (uint64_t)qword_100094888);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    v32 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%llx: Deallocated", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);
  }
  sub_10006B234(a1, 0);

}

uint64_t sub_100069C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001C930();
  v0 = sub_10006B460();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100069C64(void *a1, char a2)
{
  uint64_t v2;

  sub_1000698F0(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_100069C70(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    sub_100068E0C((uint64_t)a1);
    sub_10006B234(a1, 1);
  }
  else
  {
    v14 = 0;
    v15 = TSNullClockIdentifier;
    v6 = objc_msgSend(a1, "addPTPInstance:error:", &v15, &v14);
    v7 = v14;
    if (v6)
    {
      v8 = v15;
      v9 = v14;
      sub_100069DB8(v8, a4, 10);
      sub_10006B234(a1, 0);
    }
    else
    {
      v10 = v14;
      v11 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v12, v13);
      sub_100068E0C(v11);
      sub_10006B234(a1, 0);
      swift_errorRelease(v11);
    }
  }
}

uint64_t sub_100069DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSString v32;
  unsigned int v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id aBlock[5];
  _QWORD *v93;
  _QWORD v94[2];

  v4 = v3;
  v89 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  __chkstk_darwin(v7);
  v86 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v84 = *(_QWORD *)(v9 - 8);
  v85 = v9;
  __chkstk_darwin(v9);
  v83 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v82 - 8);
  v16 = __chkstk_darwin(v82);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v81 = (char *)&v78 - v19;
  v20 = *(unsigned __int8 *)(a2 + 1);
  if (v20 == 30)
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    if (v20 != 2)
    {
LABEL_14:
      sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
      v52 = sub_10006B470(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 261);
      swift_willThrow(v52, v53);
      goto LABEL_20;
    }
    v21 = sub_100067B10();
  }
  v94[0] = v21;
  v94[1] = v22;
  sub_100067B7C();
  if (!v23)
    goto LABEL_14;
  v24 = v23;
  v80 = v4;
  v25 = objc_msgSend((id)objc_opt_self(TSClockManager), "sharedClockManager");
  v26 = a1;
  v27 = v25;
  v79 = v26;
  v28 = objc_msgSend(v25, "clockWithClockIdentifier:");

  if (!v28)
  {
LABEL_16:
    swift_bridgeObjectRelease(v24);
    v54 = v89;
    if (v89)
    {
      sub_100006C74(0, (unint64_t *)&qword_1000918C0, OS_dispatch_queue_ptr);
      v78 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      *v14 = 100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchTimeInterval.milliseconds(_:), v11);
      v55 = v81;
      + infix(_:_:)(v18, v14);
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
      v56 = *(void (**)(char *, uint64_t))(v15 + 8);
      v57 = v82;
      v56(v18, v82);
      v58 = (_QWORD *)swift_allocObject(&unk_10008A208, 168, 7);
      v59 = v80;
      v60 = v79;
      v58[2] = v80;
      v58[3] = v60;
      memcpy(v58 + 4, (const void *)a2, 0x80uLL);
      v58[20] = v54;
      aBlock[4] = sub_10006B388;
      v93 = v58;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_100050438;
      aBlock[3] = &unk_10008A220;
      v61 = _Block_copy(aBlock);
      v62 = v93;
      swift_retain(v59);
      v63 = swift_release(v62);
      v64 = v83;
      static DispatchQoS.unspecified.getter(v63);
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_100055D00((unint64_t *)&unk_100092FF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v66 = v65;
      v67 = sub_100010F40((uint64_t *)&unk_100092170);
      sub_100054F18((unint64_t *)&qword_100093000, (uint64_t *)&unk_100092170);
      v68 = v86;
      v69 = v67;
      v70 = v88;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v69, v71, v88, v66);
      v72 = (void *)v78;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v55, v64, v68, v61);
      _Block_release(v61);

      (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v70);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v85);
      return ((uint64_t (*)(char *, uint64_t))v56)(v55, v57);
    }
    sub_100006C74(0, (unint64_t *)&qword_100091750, NSError_ptr);
    v52 = sub_10006B470(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 268);
    swift_willThrow(v52, v74);
    goto LABEL_20;
  }
  v29 = objc_opt_self(TSgPTPClock);
  v30 = swift_dynamicCastObjCClass(v28, v29);
  if (!v30)
  {

    goto LABEL_16;
  }
  v31 = (void *)v30;
  LOWORD(v90) = 0;
  v32 = String._bridgeToObjectiveC()();
  aBlock[0] = 0;
  v33 = objc_msgSend(v31, "addUnicastUDPv6EtEPortOnInterfaceNamed:withDestinationAddress:allocatedPortNumber:error:", v32, v94, &v90, aBlock);

  v34 = aBlock[0];
  if (v33)
  {
    v35 = aBlock[0];
    swift_bridgeObjectRelease(v24);
    if (qword_100094868 != -1)
      swift_once(&qword_100094868, sub_100067FA0);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100006CAC(v36, (uint64_t)qword_100094888);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = v79;
    if (v40)
    {
      v42 = swift_slowAlloc(22, -1);
      v43 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v43;
      *(_DWORD *)v42 = 136446466;
      v44 = sub_100067C34();
      v46 = v45;
      v90 = sub_100015FFC((uint64_t)v44, v45, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v42 + 12) = 2048;
      v90 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v42 + 14, v42 + 22);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s: Allocated %llx", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }

    v47 = type metadata accessor for Clock();
    swift_allocObject(v47, 56, 7);
    v48 = sub_10006A5B4(v31);
    v49 = v80;
    v50 = *(_QWORD *)(v80 + 16);
    *(_QWORD *)(v80 + 16) = v48;
    v51 = *(_BYTE *)(v49 + 24);
    *(_BYTE *)(v49 + 24) = 0;
    sub_100069318(v50, v51);
    return sub_100068F84();
  }
  v75 = aBlock[0];
  v52 = (id)_convertNSErrorToError(_:)(v34);

  swift_willThrow(v76, v77);
  swift_bridgeObjectRelease(v24);
LABEL_20:
  sub_100068E0C((uint64_t)v52);
  swift_errorRelease(v52);
  return sub_100068F84();
}

uint64_t sub_10006A4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!__OFSUB__(a4, 1))
    return sub_100069DB8(a2, a3, a4 - 1);
  __break(1u);
  return result;
}

uint64_t Clock.clockIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t static Clock.nullClockIdentifier.getter()
{
  return TSNullClockIdentifier;
}

void Clock.__allocating_init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v1;

  sub_100014AC4(v1, 56);
  Clock.init(clockIdentifier:)(a1);
  sub_100005E8C();
}

void Clock.init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = TSNullgPTPClockIdentity;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)TSgPTPClock), "initWithClockIdentifier:", a1);
  sub_100005E8C();
}

uint64_t sub_10006A5B4(void *a1)
{
  uint64_t v1;
  id v3;

  *(_QWORD *)(v1 + 32) = TSNullgPTPClockIdentity;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  v3 = objc_msgSend(a1, "clockIdentifier");
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v3;
  return v1;
}

Swift::UInt64 __swiftcall Clock.domainTimeForMachAbsoluteTime(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  Swift::UInt64 result;
  uint64_t v3;

  v3 = TSNullgPTPClockIdentity;
  result = (Swift::UInt64)objc_msgSend(*(id *)(v1 + 16), "convertFromMachAbsoluteToDomainTime:grandmasterUsed:", a1, &v3);
  *(_QWORD *)(v1 + 32) = v3;
  return result;
}

Swift::UInt64 __swiftcall Clock.machAbsoluteTimeForDomainTime(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  Swift::UInt64 result;
  __int16 v3;
  uint64_t v4;

  v4 = TSNullgPTPClockIdentity;
  v3 = 0;
  result = (Swift::UInt64)objc_msgSend(*(id *)(v1 + 16), "convertFromDomainToMachAbsoluteTime:grandmasterUsed:portNumber:", a1, &v4, &v3);
  *(_QWORD *)(v1 + 32) = v4;
  return result;
}

uint64_t sub_10006A6EC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _BYTE v3[24];

  result = swift_beginAccess(v0 + 40, v3, 0, 0);
  v2 = *(_QWORD *)(v0 + 48);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    if (!v2)
      return sub_10006A73C();
  }
  else if (v2)
  {
    return sub_10006AAD4();
  }
  return result;
}

uint64_t sub_10006A73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(_QWORD *, uint64_t);
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[5];
  uint64_t v58;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  v53 = *(_QWORD *)(v0 - 8);
  v54 = v0;
  sub_1000569E8();
  v2 = __chkstk_darwin(v1);
  v52 = (uint64_t *)((char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v45 - v4);
  v6 = type metadata accessor for DispatchTime(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  sub_1000569E8();
  __chkstk_darwin(v7);
  sub_100012DF0();
  v51 = v9 - v8;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  sub_1000569E8();
  __chkstk_darwin(v11);
  sub_100012DF0();
  v14 = v13 - v12;
  v15 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  sub_1000569E8();
  __chkstk_darwin(v16);
  sub_100012DF0();
  v19 = v18 - v17;
  v20 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_100012DF0();
  v24 = v23 - v22;
  sub_100006C74(0, &qword_100093D98, OS_dispatch_source_ptr);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100055D00(&qword_100093DA0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v26 = v25;
  v27 = sub_100010F40(&qword_100093DA8);
  sub_100054F18((unint64_t *)&unk_100093DB0, &qword_100093DA8);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v20, v26);
  v29 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v24, 0);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
  ObjectType = swift_getObjectType(v29);
  v31 = sub_100014AC4((uint64_t)&unk_10008A168, 24);
  v32 = v46;
  swift_weakInit(v31 + 16, v46);
  v33 = sub_100014AC4((uint64_t)&unk_10008A190, 32);
  *(_QWORD *)(v33 + 16) = v31;
  *(_QWORD *)(v33 + 24) = v29;
  aBlock[4] = sub_10006B310;
  v58 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050438;
  aBlock[3] = &unk_10008A1A8;
  v34 = _Block_copy(aBlock);
  swift_retain(v31);
  v35 = swift_unknownObjectRetain(v29);
  static DispatchQoS.unspecified.getter(v35);
  sub_1000543AC();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v19, v14, v34, ObjectType);
  _Block_release(v34);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v14, v50);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v19, v48);
  v36 = v58;
  swift_release(v31);
  v37 = swift_release(v36);
  v38 = v51;
  static DispatchTime.now()(v37);
  *v5 = 5;
  v39 = v53;
  v40 = v54;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v53 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v54);
  v41 = v52;
  sub_10005449C(v52);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v38, v5, v41, ObjectType);
  v42 = *(void (**)(_QWORD *, uint64_t))(v39 + 8);
  v42(v41, v40);
  v42(v5, v40);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v38, v56);
  OS_dispatch_source.activate()();
  v43 = *(_QWORD *)(v32 + 48);
  *(_QWORD *)(v32 + 48) = v29;
  return swift_unknownObjectRelease(v43);
}

uint64_t sub_10006AAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    swift_getObjectType(v2);
    swift_unknownObjectRetain(v2);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v2);
    v3 = *(_QWORD *)(v1 + 48);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v1 + 48) = 0;
  return swift_unknownObjectRelease(v3);
}

uint64_t Clock.heartbeat.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100012DD0(v0 + 40, (uint64_t)v2, 0);
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Clock.heartbeat.setter(char a1)
{
  uint64_t v1;
  _BYTE v4[24];

  sub_100012DD0(v1 + 40, (uint64_t)v4, 1);
  *(_BYTE *)(v1 + 40) = a1;
  return sub_10006A6EC();
}

uint64_t (*Clock.heartbeat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_100012DD0(v1 + 40, a1, 33);
  return sub_10006ABD8;
}

uint64_t sub_10006ABD8(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_10006A6EC();
  return result;
}

void sub_10006AC08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = mach_absolute_time();
    v7 = Clock.domainTimeForMachAbsoluteTime(_:)(v6);
    sub_10006B318(*(_QWORD *)(v5 + 32), v6, v7, (int)objc_msgSend(*(id *)(v5 + 16), "lockState"));
    if (qword_100094868 != -1)
      swift_once(&qword_100094868, sub_100067FA0);
    v8 = type metadata accessor for Logger(0);
    sub_100006CAC(v8, (uint64_t)qword_100094888);
    v9 = swift_retain(v5);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(42, -1);
      *(_DWORD *)v12 = 134218752;
      v13 = *(_QWORD *)(v5 + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2048;
      v13 = *(_QWORD *)(v5 + 32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 14, v12 + 22);
      swift_release(v5);
      *(_WORD *)(v12 + 22) = 2048;
      v13 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 24, v12 + 32);
      *(_WORD *)(v12 + 32) = 2048;
      v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 34, v12 + 42);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%llx: (%llx) %llu -> %llu", (uint8_t *)v12, 0x2Au);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release(v5);
    }
    if (v7 == TSInvalidTime)
    {
      swift_getObjectType(a2);
      OS_dispatch_source.cancel()();
    }
    swift_release(v5);
  }
  else
  {
    swift_getObjectType(a2);
    OS_dispatch_source.cancel()();
  }
}

uint64_t Clock.deinit()
{
  uint64_t v0;

  sub_1000133E8();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t Clock.__deallocating_deinit()
{
  uint64_t v0;

  Clock.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

char *sub_10006AE80(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *result;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = sub_10006AF18(result, *(_QWORD *)(v3 + 16) + 1, 1, v3, a1);
    *v1 = (uint64_t)result;
  }
  return result;
}

char *sub_10006AED8(char *result, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*v2 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v3 >> 1))
  {
    result = sub_10006AF18((char *)(v3 > 1), (int64_t)(result + 1), 1, *v2, a2);
    *v2 = (uint64_t)result;
  }
  return result;
}

char *sub_10006AF18(char *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a4 + 24);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v8 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100010F40(a5);
    v12 = (char *)sub_100014AC4(v11, 16 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  if ((v6 & 1) != 0)
  {
    sub_10006B0F0((char *)(a4 + 32), v9, v14);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10006AFFC(0, v9, (unint64_t)v14, a4);
  }
  return v12;
}

uint64_t sub_10006AFFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_1000568BC();
    v13 = "UnsafeMutablePointer.initialize with negative count";
    v14 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100010F40(&qword_100094AC8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  sub_1000568BC();
  v13 = "UnsafeMutablePointer.initialize overlapping range";
  v14 = 49;
LABEL_11:
  result = sub_1000569C4((uint64_t)"Fatal error", 11, 2, (uint64_t)v13, v14, v11, (uint64_t)"Swift/UnsafePointer.swift", v12, v15, v16, v17);
  __break(1u);
  return result;
}

char *sub_10006B0F0(char *__src, uint64_t a2, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2 < 0)
  {
    sub_1000568BC();
    __src = (char *)sub_1000569C4((uint64_t)"Fatal error", 11, 2, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", 55, v4, (uint64_t)"Swift/UnsafePointer.swift", v5, v6, v7, v8);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_10006B160(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10006B17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10006B460();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t type metadata accessor for TimeSyncManager()
{
  return objc_opt_self(_TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager);
}

uint64_t type metadata accessor for Domain()
{
  return objc_opt_self(_TtC15SidecarTimeSync6Domain);
}

uint64_t type metadata accessor for Clock()
{
  return objc_opt_self(_TtC15SidecarTimeSync5Clock);
}

void sub_10006B1FC()
{
  uint64_t v0;

  sub_100068D74(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006B204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006B214(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10006B21C(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_10006B234(a1, a2 & 1);
}

void sub_10006B234(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void sub_10006B240()
{
  uint64_t v0;

  sub_10006837C(*(void **)(v0 + 16));
}

uint64_t sub_10006B248()
{
  uint64_t v0;

  sub_1000133E8();
  return swift_deallocObject(v0, 24, 7);
}

void sub_10006B268()
{
  sub_100068678();
}

uint64_t sub_10006B270()
{
  uint64_t v0;

  sub_1000133E8();
  sub_10006B234(*(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

BOOL sub_10006B29C()
{
  uint64_t v0;

  return sub_1000689E0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

id sub_10006B2A8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

id sub_10006B2B4(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10006B2A8(result, a2 & 1);
  return result;
}

uint64_t sub_10006B2CC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006B2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001C930();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = sub_10006B460();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10006B310()
{
  uint64_t v0;

  sub_10006AC08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006B318(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return kdebug_trace(553976352, a1, a2, a3, a4);
}

uint64_t sub_10006B338()
{
  uint64_t v0;

  sub_10001C930();
  return swift_deallocObject(v0, 152, 7);
}

void sub_10006B358(void *a1, char a2)
{
  uint64_t v2;

  sub_100069C70(a1, a2 & 1, *(_QWORD *)(v2 + 16), v2 + 24);
}

uint64_t sub_10006B368()
{
  uint64_t v0;

  sub_10001C930();
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_10006B388()
{
  uint64_t *v0;

  return sub_10006A4DC(v0[2], v0[3], (uint64_t)(v0 + 4), v0[20]);
}

uint64_t sub_10006B398()
{
  uint64_t v0;

  return sub_100067E54(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10006B3A0()
{
  unint64_t result;

  result = qword_100094AB8;
  if (!qword_100094AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100094AB8);
  }
  return result;
}

uint64_t sub_10006B3DC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1000123B0(result, a2 & 1);
  return result;
}

uint64_t sub_10006B3F4(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_10006B3FC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10006B460()
{
  uint64_t v0;

  return v0;
}

id sub_10006B470(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10001F3F8(a1, a2, a3, a4, a5, a6, a7, &NSMachErrorDomain);
}

id sub_10006B76C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handler:", a2);
}

void sub_10006B778(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSISO8601DateFormatter *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v18 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v3, 0, 0, &v18));
  v5 = v18;
  if (v4)
  {
    v6 = sub_10006B980(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v17 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v7, 7, &v17));
    v9 = v17;

    v5 = v9;
    if (v8)
      goto LABEL_7;
  }
  else
  {
    v8 = 0;
  }
  if (v5)
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v5, 7, 0));
LABEL_7:
  v10 = objc_opt_new(NSISO8601DateFormatter);
  -[NSISO8601DateFormatter setFormatOptions:](v10, "setFormatOptions:", 2163);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone systemTimeZone](NSTimeZone, "systemTimeZone"));
  -[NSISO8601DateFormatter setTimeZone:](v10, "setTimeZone:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSISO8601DateFormatter stringFromDate:](v10, "stringFromDate:", v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s-%@.json"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[_DiagnosticsHandler tmpDir](_DiagnosticsHandler, "tmpDir"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:relativeToURL:](NSURL, "fileURLWithPath:isDirectory:relativeToURL:", v14, 0, v15));

  objc_msgSend(v8, "writeToURL:atomically:", v16, 0);
}

id sub_10006B980(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSISO8601DateFormatter *v10;
  void *v11;
  _QWORD v13[5];
  _QWORD v14[5];

  v1 = a1;
  v2 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0)
  {
    v3 = v1;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v3, "count")));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10006BB9C;
    v14[3] = &unk_10008A2C8;
    v14[4] = v4;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v14);
  }
  else
  {
    v5 = objc_opt_class(NSArray);
    if ((objc_opt_isKindOfClass(v1, v5) & 1) == 0)
    {
      v6 = objc_opt_class(NSData);
      if ((objc_opt_isKindOfClass(v1, v6) & 1) != 0)
      {
        v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "base64EncodedStringWithOptions:", 0));
      }
      else
      {
        v8 = objc_opt_class(NSDate);
        if ((objc_opt_isKindOfClass(v1, v8) & 1) != 0)
        {
          v9 = v1;
          v10 = objc_opt_new(NSISO8601DateFormatter);
          -[NSISO8601DateFormatter setFormatOptions:](v10, "setFormatOptions:", 2163);
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone systemTimeZone](NSTimeZone, "systemTimeZone"));
          -[NSISO8601DateFormatter setTimeZone:](v10, "setTimeZone:", v11);

          v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSISO8601DateFormatter stringFromDate:](v10, "stringFromDate:", v9));
          goto LABEL_14;
        }
        if (+[NSJSONSerialization isValidJSONObject:](NSJSONSerialization, "isValidJSONObject:", v1))
          v7 = v1;
        else
          v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "description"));
      }
      v4 = v7;
      goto LABEL_14;
    }
    v3 = v1;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v3, "count")));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10006BC14;
    v13[3] = &unk_10008A2F0;
    v13[4] = v4;
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", v13);
  }

LABEL_14:
  return v4;
}

void sub_10006BB9C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = a2;
  v6 = sub_10006B980(a3);
  v10 = (id)objc_claimAutoreleasedReturnValue(v6);
  v7 = *(void **)(a1 + 32);
  v8 = sub_10006B980(v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, v9);
}

void sub_10006BC14(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = sub_10006B980(a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "addObject:", v4);

}

char *sub_10006BD44()
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x78uLL, 0x1000040EBE173EBuLL);
  pthread_mutex_init((pthread_mutex_t *)v0, 0);
  pthread_cond_init((pthread_cond_t *)(v0 + 64), 0);
  atomic_store(0, (unsigned __int8 *)v0 + 112);
  return v0;
}

uint64_t sub_10006BD98(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  atomic_store(1u, (unsigned __int8 *)(a1 + 112));
  pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

pthread_mutex_t *sub_10006BDD0(pthread_mutex_t *result)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  pthread_mutex_t *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = (unsigned __int8 *)&result[1].__opaque[40];
  v2 = atomic_load((unsigned __int8 *)&result[1].__opaque[40]);
  if ((v2 & 1) == 0)
  {
    v3 = result;
    pthread_mutex_lock(result);
    v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
    {
      do
      {
        pthread_cond_wait((pthread_cond_t *)&v3[1], v3);
        v5 = atomic_load((unsigned __int8 *)&v3[1].__opaque[40]);
      }
      while ((v5 & 1) == 0);
    }
    return (pthread_mutex_t *)pthread_mutex_unlock(v3);
  }
  return result;
}

id CUTrafficFlagsCopyDescription(unsigned int a1)
{
  return sub_10006BE40(a1, byte_100074BD8);
}

id sub_10006BE40(unint64_t a1, _BYTE *a2)
{
  id v4;
  char v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;

  v4 = objc_alloc_init((Class)NSMutableString);
  v5 = *a2;
  do
  {
    v6 = a2 + 1;
    if (((1 << v5) & a1) != 0)
    {
      if (objc_msgSend(v4, "length"))
        v7 = " ";
      else
        v7 = "";
      objc_msgSend(v4, "appendFormat:", CFSTR("%s%s"), v7, v6);
    }
    v8 = &v6[strlen(v6)];
    v9 = *((unsigned __int8 *)v8 + 1);
    a2 = v8 + 1;
    v5 = v9;
  }
  while (v9);
  return v4;
}

id RPControlFlagsCopyDescription(unint64_t a1)
{
  return sub_10006BE40(a1, byte_100074C4B);
}

id RPDataLinkTypeCopyDescription(unsigned int a1)
{
  const char *v1;

  if (a1 > 0xB)
    v1 = "?";
  else
    v1 = (&off_10008A310)[a1];
  return +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4);
}

id RPDeviceChangeFlagsCopyDescription(unsigned int a1)
{
  return sub_10006BE40(a1, byte_100074ED0);
}

id RPErrorFlagsCopyDescription(unint64_t a1)
{
  return sub_10006BE40(a1, byte_100074F13);
}

id RPFlowControlStateCopyDescription(unsigned int a1)
{
  const char *v1;

  if (a1 > 2)
    v1 = "?";
  else
    v1 = (&off_10008A370)[a1];
  return +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4);
}

id RPStreamQoSCopyDescription(int a1)
{
  const char *v1;

  v1 = "Default";
  switch(a1)
  {
    case 0:
      return +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4);
    case 1:
      v1 = "Background";
      break;
    case 2:
      v1 = "Video";
      break;
    case 3:
      v1 = "Voice";
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_5;
    case 10:
      v1 = "AirPlayAudio";
      break;
    case 11:
      v1 = "AirPlayScreenAudio";
      break;
    case 12:
      v1 = "AirPlayScreenVideo";
      break;
    default:
      if (a1 == 20)
        v1 = "NTP";
      else
LABEL_5:
        v1 = "?";
      break;
  }
  return +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4);
}

id RPStatusFlagsCopyDescription(unint64_t a1)
{
  return sub_10006BE40(a1, byte_100074FA5);
}

id RPStreamFlagsCopyDescription(unsigned int a1)
{
  return sub_10006BE40(a1, byte_100075164);
}

id RPStreamTypeCopyDescription(unsigned int a1)
{
  const char *v1;

  if (a1 > 3)
    v1 = "?";
  else
    v1 = (&off_10008A388)[a1];
  return +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4);
}

void RPStreamSessionSetDisconnectHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v5 = a1;
  v3 = a2;
  if ((objc_opt_respondsToSelector(v5, "setDisconnectHandler:") & 1) != 0)
  {
    v4 = objc_retainBlock(v3);
    objc_msgSend(v5, "performSelector:withObject:", "setDisconnectHandler:", v4);

  }
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:relativeToURL:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_setFormatOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormatOptions:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemTimeZone");
}

id objc_msgSend_tmpDir(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tmpDir");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

