void sub_100005F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100005FAC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if (v15)
  {
    if (qword_1002A4400 != -1)
      dispatch_once(&qword_1002A4400, &stru_10023A130);
    v16 = qword_1002A4408;
    if (os_log_type_enabled((os_log_t)qword_1002A4408, OS_LOG_TYPE_ERROR))
    {
      v21 = 141558530;
      v22 = 1752392040;
      v23 = 2112;
      v24 = v11;
      v25 = 2112;
      v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", (uint8_t *)&v21, 0x20u);
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "data"));
    LOBYTE(v18) = objc_msgSend(v17, "failSMTsIfOverMMD:skipOptInOut:proof:underlyingError:errorCode:analyticsData:", v18, 0, v19, v15, -306, *(_QWORD *)(a1 + 56));

    if ((v18 & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v20, "verifyKTSMTsMerged:mapLeaf:analyticsData:", *(_QWORD *)(a1 + 40), v13, *(_QWORD *)(a1 + 56));

  }
}

void sub_100006190(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_100006418(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  id v15;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v11 = 0;
  v5 = objc_msgSend(v3, "validatePendingSMTs:singleQuery:error:", a2, v4, &v11);
  v6 = v11;
  if ((v5 & 1) == 0)
  {
    if (qword_1002A4400 != -1)
      dispatch_once(&qword_1002A4400, &stru_10023A178);
    v7 = (void *)qword_1002A4408;
    if (os_log_type_enabled((os_log_t)qword_1002A4408, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void **)(a1 + 40);
      v9 = v7;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rpcId"));
      *(_DWORD *)buf = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to validate pending SMTs with rpcId %{public}@: %@", buf, 0x16u);

    }
  }

}

void sub_100006544(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_100006574(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_1000065A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_100006668(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_1000067E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  if (objc_msgSend(v3, "rpcType"))
  {
    if (objc_msgSend(v3, "rpcType") == (id)1)
    {
      objc_msgSend(*(id *)(a1 + 32), "validatePendingSMTsForBatchQuery:", v3);
    }
    else
    {
      if (qword_1002A4400 != -1)
        dispatch_once(&qword_1002A4400, &stru_10023A220);
      v4 = (void *)qword_1002A4408;
      if (os_log_type_enabled((os_log_t)qword_1002A4408, OS_LOG_TYPE_ERROR))
      {
        v5 = v4;
        v6 = 134217984;
        v7 = objc_msgSend(v3, "rpcType");
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unknown server rpc type: %lld", (uint8_t *)&v6, 0xCu);

      }
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "validatePendingSMTsForSingleQuery:", v3);
  }

}

void sub_100006904(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_100006934(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4408;
  qword_1002A4408 = (uint64_t)v1;

}

void sub_100006F48(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100006F78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100006FA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100006FD8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007008(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007038(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007068(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id obj;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  void *v49;
  _QWORD v50[2];
  _QWORD v51[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR(",")));
    v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Consistency failed for applications: %@"), v6));

    v50[0] = NSMultipleUnderlyingErrorsKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allValues"));
    v50[1] = NSLocalizedDescriptionKey;
    v51[0] = v9;
    v51[1] = v7;
    v10 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 2));

    v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyErrorVerify"), -382, v10));
    v39 = v5;
    v36 = (void *)v11;
    v37 = (void *)v10;
    if ((objc_msgSend(v5, "containsObject:", kKTApplicationIdentifierIDS) & 1) != 0
      || objc_msgSend(v5, "containsObject:", kKTApplicationIdentifierTLT))
    {
      objc_msgSend(*(id *)(a1 + 32), "setError:", v11);
    }
    else
    {
      if (qword_1002A4410 != -1)
        dispatch_once(&qword_1002A4410, &stru_10023A348);
      v31 = (void *)qword_1002A4418;
      if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_ERROR))
      {
        v32 = *(void **)(a1 + 32);
        v33 = v31;
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "errors"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "allValues"));
        *(_DWORD *)buf = 138543618;
        v47 = v7;
        v48 = 2112;
        v49 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}@: %@", buf, 0x16u);

      }
    }
    v38 = (void *)v7;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "failedRevs"));
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v16)
            objc_enumerationMutation(obj);
          v18 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverHints"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v18));
          objc_msgSend(v12, "appendFormat:", CFSTR("%@/%@,"), v18, v20);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "failedRevs"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v18));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "componentsJoinedByString:", CFSTR(",")));
          objc_msgSend(v13, "appendFormat:", CFSTR("%@:%@"), v18, v23);

        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      }
      while (v15);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundOpId"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "smDataStore"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:](KTBackgroundSystemValidationOperation, "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:", v24, v26, v13, v27, v12, v36);

  }
  if (qword_1002A4410 != -1)
    dispatch_once(&qword_1002A4410, &stru_10023A368);
  v28 = qword_1002A4418;
  if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VerifyConsistency: end", buf, 2u);
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedOp"));
  objc_msgSend(v29, "addOperation:", v30);

}

void sub_100007568(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007598(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007BDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007C0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007C3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007C6C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100007FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_100008000(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

uint64_t sub_100008030(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100008040(uint64_t a1)
{

}

void sub_100008048(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  void *v29;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "createDownloadRecord:moc:application:", 3, v4, *(_QWORD *)(a1 + 40)));

  objc_msgSend(v7, "setStartSLHRevision:", objc_msgSend(*(id *)(a1 + 48), "longLongValue"));
  v8 = *(_QWORD *)(a1 + 56);
  v23 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v8, 0, &v23));
  v10 = v23;
  objc_msgSend(v7, "setRevisions:", v9);

  if (qword_1002A4410 != -1)
    dispatch_once(&qword_1002A4410, &stru_10023A450);
  v11 = (void *)qword_1002A4418;
  if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v11;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "downloadId"));
    *(_DWORD *)buf = 138543874;
    v25 = v12;
    v26 = 2114;
    v27 = v13;
    v28 = 2114;
    v29 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fetching consistency proof for %{public}@ %{public}@ with downloadId %{public}@", buf, 0x20u);

  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "downloadId"));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataStore"));
  v22 = v10;
  objc_msgSend(v20, "persistWithError:", &v22);
  v21 = v22;

}

void sub_100008268(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100008298(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  KTContextVerifier *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unsigned __int8 v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  unsigned int v37;
  signed int v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  NSObject *v56;
  KTContextVerifier *v57;
  id obj;
  _QWORD v59[4];
  KTContextVerifier *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  id v73;
  uint8_t buf[4];
  uint64_t v75;
  __int16 v76;
  id v77;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "publicKeyStore"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "applicationPublicKeyStore:", *(_QWORD *)(a1 + 32)));

  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", kKTApplicationIdentifierTLT))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicKeyStore"));
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "tltKeyStore"));

    v10 = (void *)v13;
  }
  v14 = [KTContextVerifier alloc];
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "dataStore"));
  v57 = -[KTContextVerifier initWithApplicationKeyStore:dataStore:applicationID:](v14, "initWithApplicationKeyStore:dataStore:applicationID:", v10, v16, *(_QWORD *)(a1 + 32));

  v68 = 0;
  v69 = &v68;
  v70 = 0x3032000000;
  v71 = sub_100008030;
  v72 = sub_100008040;
  v73 = 0;
  if (!v5 || v6)
  {
    if (qword_1002A4410 != -1)
      dispatch_once(&qword_1002A4410, &stru_10023A498);
    v26 = qword_1002A4418;
    if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v75 = v27;
      v76 = 2112;
      v77 = v6;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to fetch consistency proof downloadId %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
      v6 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -145, CFSTR("empty consistency proof response")));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "dataStore"));
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "logClient"));
    objc_msgSend(v29, "failHeadDownload:failure:logClient:", v30, v6, v32);

    v33 = v69;
    v34 = v6;
    v23 = (id)v33[5];
    v33[5] = (uint64_t)v34;
  }
  else
  {
    if (objc_msgSend(v5, "status") == 1)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dataStore"));
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v67 = 0;
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_100008A3C;
      v59[3] = &unk_10023A520;
      v60 = v57;
      v20 = v5;
      v21 = *(_QWORD *)(a1 + 48);
      v65 = &v68;
      v66 = v21;
      v61 = v20;
      v62 = WeakRetained;
      v63 = *(id *)(a1 + 32);
      v64 = *(id *)(a1 + 40);
      v22 = objc_msgSend(v18, "performAndWaitForDownloadId:error:block:", v19, &v67, v59);
      v23 = v67;

      if ((v22 & 1) == 0)
      {
        if (qword_1002A4410 != -1)
          dispatch_once(&qword_1002A4410, &stru_10023A540);
        v24 = qword_1002A4418;
        if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_ERROR))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543618;
          v75 = v25;
          v76 = 2112;
          v77 = v23;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to find downloadId %{public}@: %@", buf, 0x16u);
        }
      }

    }
    else
    {
      if (qword_1002A4410 != -1)
        dispatch_once(&qword_1002A4410, &stru_10023A4B8);
      v35 = (id)qword_1002A4418;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v37 = objc_msgSend(v5, "status");
        *(_DWORD *)buf = 138543618;
        v75 = v36;
        v76 = 1024;
        LODWORD(v77) = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "server failed to produce consistency proof downloadId %{public}@: %d", buf, 0x12u);
      }

      v38 = objc_msgSend(v5, "status");
      v39 = objc_msgSend(v5, "status");
      v40 = objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorServer, v38, CFSTR("server failed to produce consistency proof: %d"), v39));
      v41 = (void *)v69[5];
      v69[5] = v40;

      v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dataStore"));
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v44 = v69[5];
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "logClient"));
      objc_msgSend(v42, "failHeadDownload:failure:logClient:", v43, v44, v46);

    }
    v34 = 0;
  }

  v47 = (id *)(v69 + 5);
  obj = (id)v69[5];
  v48 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier failExpiredSTHsForType:error:](v57, "failExpiredSTHsForType:error:", 2, &obj));
  objc_storeStrong(v47, obj);
  if (v48 && objc_msgSend(v48, "count"))
  {
    if (v5)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    }
    else
    {
      v50 = 0;
    }
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
    objc_sync_enter(v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "serverHints"));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v50, *(_QWORD *)(a1 + 32));

    v53 = v69[5];
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
    objc_msgSend(v54, "setObject:forKeyedSubscript:", v53, *(_QWORD *)(a1 + 32));

    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "failedRevs"));
    objc_msgSend(v55, "setObject:forKeyedSubscript:", v48, *(_QWORD *)(a1 + 32));

    objc_sync_exit(v51);
  }
  v56 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fetchGroup"));
  dispatch_group_leave(v56);

  _Block_object_dispose(&v68, 8);
}

void sub_10000899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000089DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100008A0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100008A3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id obj;
  _QWORD v38[2];
  _QWORD v39[2];
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend(v3, "startSLHRevision");

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  obj = *(id *)(v8 + 40);
  v9 = objc_msgSend(v5, "verifyConsistencyProofResponse:startRevision:receivedRevisions:error:", v6, v7, v4, &obj);
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "settings"));
    v12 = objc_msgSend(v11, "allowsInternalSecurityPolicies");

    if (v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("ConsistencyDownload"), *(_QWORD *)(a1 + 56)));
      v14 = *(_QWORD *)(a1 + 64);
      v38[0] = CFSTR("requestedRevisions");
      v38[1] = CFSTR("receivedRevisions");
      v39[0] = v14;
      v39[1] = v4;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v39, v38, 2));
      v16 = objc_msgSend(v15, "mutableCopy");

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "metadata"));
      v18 = kTransparencyResponseMetadataKeyServerHint;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

      if (v19)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "metadata"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v18));
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, v18);

      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "metadata"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("APS")));

      if (v23)
        objc_msgSend(v16, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("APS"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "logger"));
      objc_msgSend(v25, "logHardFailureForEventNamed:withAttributes:", v13, v16);

    }
    if (qword_1002A4410 != -1)
      dispatch_once(&qword_1002A4410, &stru_10023A4F8);
    v26 = qword_1002A4418;
    if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      *(_DWORD *)buf = 138543362;
      v41 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "consistency proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "logClient"));
    objc_msgSend(v29, "deleteDownloadId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
  }
  else
  {
    if (qword_1002A4410 != -1)
      dispatch_once(&qword_1002A4410, &stru_10023A4D8);
    v30 = qword_1002A4418;
    if (os_log_type_enabled((os_log_t)qword_1002A4418, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v41 = v31;
      v42 = 2112;
      v43 = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Consistency proof response verification failed for downloadId %{public}@: %@", buf, 0x16u);
    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "dataStore"));
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "logClient"));
    objc_msgSend(v29, "failHeadDownload:failure:logClient:", v33, v34, v36);

  }
}

void sub_100008E58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100008E88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_100008EB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4418;
  qword_1002A4418 = (uint64_t)v1;

}

void sub_1000095C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_1000095F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_100009620(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_100009988(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_1000099B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A34C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A37C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A3AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A3DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A40C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A43C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A46C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000A49C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

id sub_10000A67C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v21;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ResponseTime")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate kt_dateFromString:](NSDate, "kt_dateFromString:", v6));

  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v21 = 0;
  v15 = objc_msgSend(v10, "validatePeer:transparentData:accountKey:loggableDatas:enforceStaticKey:idsResponseTime:responseTime:error:", v11, v12, v13, v14, (v9 < 6) & (0x31u >> v9), v8, v7, &v21);
  v16 = v21;
  objc_msgSend(*(id *)(a1 + 40), "reportValidationTime:initialResult:result:idsResponseTime:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v15, *(_QWORD *)(a1 + 80));
  v17 = *(_QWORD *)(a1 + 88);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "analyticsLogger"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "applicationID"));
  +[KTContext metricsForResult:type:logger:applicationID:](KTContext, "metricsForResult:type:logger:applicationID:", v15, v17, v18, v19);

  *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "analyticsForType:uri:accountKey:serverLoggableDatas:syncedLoggableDatas:transparentData:responseTime:result:failure:responseMetadata:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0, *(_QWORD *)(a1 + 56), v7, v15, v16, *(_QWORD *)(a1 + 32)));
  if (a2 && v16)
    *a2 = objc_retainAutorelease(v16);

  return v15;
}

void sub_10000AB0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

void sub_10000AB3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4428;
  qword_1002A4428 = (uint64_t)v1;

}

id sub_10000AE5C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_BYTE *)(a1 + 120);
  v33 = 0;
  LOBYTE(v32) = 0;
  LOBYTE(v31) = v15;
  v16 = objc_msgSend(v6, "validateSelf:transparentData:accountKey:serverloggableDatas:syncedLoggableDatas:idsResponseTime:responseTime:optInCheck:cloudDevices:pcsAccountKey:kvsOptInHistory:isReplay:error:", v7, v8, v9, v10, v11, v12, v13, v31, v14, 0, 0, v32, &v33);
  v17 = v33;
  v18 = *(void **)(a1 + 32);
  if (v16 == (id)1)
  {
    objc_msgSend(v18, "clearSelfTicketState:responseTime:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 88));
  }
  else
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "optInServer"));
    v20 = objc_msgSend(v19, "optInState");

    if (v20)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tapToRadar"));
      objc_msgSend(v21, "presentTapToRadarErrorWithType:", CFSTR("self"));

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "reportValidationTime:initialResult:result:idsResponseTime:", 1, *(_QWORD *)(a1 + 112), v16, *(_QWORD *)(a1 + 80));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsLogger"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
  +[KTContext metricsForResult:type:logger:applicationID:](KTContext, "metricsForResult:type:logger:applicationID:", v16, 1, v22, v23);

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
  +[KTContext checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:](KTContext, "checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:", v16, 1, v24, v17, v25);

  v26 = *(void **)(a1 + 32);
  v27 = *(_QWORD *)(a1 + 64);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
  objc_msgSend(v26, "selfValidationURIStatus:transparentData:logger:", v27, v28, v29);

  *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsForType:uri:accountKey:serverLoggableDatas:syncedLoggableDatas:transparentData:responseTime:result:failure:responseMetadata:", 1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 88), v16, v17, *(_QWORD *)(a1 + 104)));
  if (a2 && v17)
    *a2 = objc_retainAutorelease(v17);

  return v16;
}

id sub_10000B560(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
  v7 = objc_msgSend(v6, "handleInsertResponse:uri:fetchId:error:transparentDataHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2, *(_QWORD *)(a1 + 64));

  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "metadataForInsertResponse:", *(_QWORD *)(a1 + 40)));
  *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "analyticsForResponse:type:uri:result:ktCapable:", v9, 2, *(_QWORD *)(a1 + 48), v7, 1));

  return v7;
}

void sub_10000BBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_10000BBEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4438;
  qword_1002A4438 = (uint64_t)v1;

}

void sub_10000BC1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4438;
  qword_1002A4438 = (uint64_t)v1;

}

void sub_10000BC4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4438;
  qword_1002A4438 = (uint64_t)v1;

}

void sub_10000BC7C(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (qword_1002A4430 != -1)
    dispatch_once(&qword_1002A4430, &stru_10023A840);
  v3 = qword_1002A4438;
  if (os_log_type_enabled((os_log_t)qword_1002A4438, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v12 = 138412290;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Completed fixup %@", (uint8_t *)&v12, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "logger"));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(v6, "logResultForEvent:hardFailure:result:", v7, 1, v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (!v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "smDataStore"));
    objc_msgSend(v11, "storeFixup:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10000BDF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4438;
  qword_1002A4438 = (uint64_t)v1;

}

void sub_10000C938(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4448;
  qword_1002A4448 = (uint64_t)v1;

}

void sub_10000CD3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4448;
  qword_1002A4448 = (uint64_t)v1;

}

void sub_10000CE40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4448;
  qword_1002A4448 = (uint64_t)v1;

}

void sub_10000D854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_10000D88C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000D8BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000D8EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000D91C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000D94C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setTransaction:", 0);

}

void sub_10000D97C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  id v26;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v5 || v6)
  {
    if (qword_1002A4450 != -1)
      dispatch_once(&qword_1002A4450, &stru_10023A990);
    v10 = (void *)qword_1002A4458;
    if (os_log_type_enabled((os_log_t)qword_1002A4458, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "componentsJoinedByString:", CFSTR(",")));
      *(_DWORD *)buf = 138413058;
      v20 = v12;
      v21 = 2160;
      v22 = 1752392040;
      v23 = 2112;
      v24 = v14;
      v25 = 2112;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "ValidatePendingURIs: failed to get validation context for fetch for %@ for uris %{mask.hash}@: %@", buf, 0x2Au);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
    objc_msgSend(v15, "addOperation:", v16);

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "opUUID"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10000DBF0;
    v17[3] = &unk_10023A9D8;
    v17[4] = WeakRetained;
    v18 = *(id *)(a1 + 32);
    objc_msgSend(v5, "queryForUris:userInitiated:cachedYoungerThan:backgroundOpId:completionHandler:", v8, 0, 0, v9, v17);

  }
}

void sub_10000DBC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000DBF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v3 = a2;
  if (v3)
  {
    if (qword_1002A4450 != -1)
      dispatch_once(&qword_1002A4450, &stru_10023A9B0);
    v4 = (void *)qword_1002A4458;
    if (os_log_type_enabled((os_log_t)qword_1002A4458, OS_LOG_TYPE_ERROR))
    {
      v5 = *(void **)(a1 + 32);
      v6 = v4;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "application"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", CFSTR(",")));
      v12 = 138413058;
      v13 = v7;
      v14 = 2160;
      v15 = 1752392040;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "ValidatePendingURIs: failed to trigger query for %@ for uris %{mask.hash}@: %@", (uint8_t *)&v12, 0x2Au);

    }
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedOp"));
  objc_msgSend(v10, "addOperation:", v11);

}

void sub_10000DD80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4458;
  qword_1002A4458 = (uint64_t)v1;

}

void sub_10000E984(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000E9B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000E9E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EA14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EA44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EA74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EAA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EAD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EB04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000EDDC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000EDEC(uint64_t a1)
{

}

void sub_10000EDF4(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  NSObject *v23;
  id v24;
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  id v29;

  v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1002A4460 != -1)
      dispatch_once(&qword_1002A4460, &stru_10023AB40);
    v8 = qword_1002A4468;
    if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
    {
      v9 = *a4;
      *(_DWORD *)buf = 138412290;
      v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to get pending SMTs: %@", buf, 0xCu);
    }
    if (*a4)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *a4);
    *a3 = 1;
  }
  else
  {
    v10 = *(void **)(a1 + 32);
    v25 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "verifyKTSMTSignatures:error:", v7, &v25));
    v12 = v25;
    v13 = v25;
    if (v11 && objc_msgSend(v11, "count"))
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023AB80);
      v14 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
      {
        v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v27 = v15;
        v28 = 2112;
        v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: %@ SMT signature validation failed: %@", buf, 0x16u);
      }
      if (v13)
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v12);
      objc_msgSend(*(id *)(a1 + 48), "addObjectsFromArray:", v11);
    }
    else
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023AB60);
      v16 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_INFO))
      {
        v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "VerifyPendingSignatures: %@ SMT signature validation succeeded", buf, 0xCu);
      }
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "dataStore"));
    v24 = 0;
    v20 = objc_msgSend(v19, "persistAndRefaultObjects:error:", v7, &v24);
    v21 = v24;
    v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023ABA0);
      v23 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to persist signature verified SMTs: %@", buf, 0xCu);
      }
      if (v22)
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v21);
      *a3 = 1;
    }

  }
}

void sub_10000F164(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F194(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F1C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F1F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F618(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  NSObject *v23;
  id v24;
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  id v29;

  v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1002A4460 != -1)
      dispatch_once(&qword_1002A4460, &stru_10023ABE8);
    v8 = qword_1002A4468;
    if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
    {
      v9 = *a4;
      *(_DWORD *)buf = 138412290;
      v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to get pending STH/SMH: %@", buf, 0xCu);
    }
    if (*a4)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *a4);
    *a3 = 1;
  }
  else
  {
    v10 = *(void **)(a1 + 32);
    v25 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "verifySTHs:error:", v7, &v25));
    v12 = v25;
    v13 = v25;
    if (v11 && objc_msgSend(v11, "count"))
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023AC28);
      v14 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
      {
        v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v27 = v15;
        v28 = 2112;
        v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: %@ STH/SMH signature validation failed: %@", buf, 0x16u);
      }
      if (v13)
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v12);
      objc_msgSend(*(id *)(a1 + 48), "addObjectsFromArray:", v11);
    }
    else
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023AC08);
      v16 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_INFO))
      {
        v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "VerifyPendingSignatures: %@ STH/SMH signature validation succeeded", buf, 0xCu);
      }
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "dataStore"));
    v24 = 0;
    v20 = objc_msgSend(v19, "persistAndRefaultObjects:error:", v7, &v24);
    v21 = v24;
    v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1002A4460 != -1)
        dispatch_once(&qword_1002A4460, &stru_10023AC48);
      v23 = qword_1002A4468;
      if (os_log_type_enabled((os_log_t)qword_1002A4468, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to persist signature verified STHs/SMHs: %@", buf, 0xCu);
      }
      if (v22)
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v21);
      *a3 = 1;
    }

  }
}

void sub_10000F988(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F9B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000F9E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000FA18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4468;
  qword_1002A4468 = (uint64_t)v1;

}

void sub_10000FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000FE94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_10000FEC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  dispatch_group_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[5];
  _QWORD v19[5];
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v5 || v6)
  {
    if (qword_1002A4470 != -1)
      dispatch_once(&qword_1002A4470, &stru_10023AC88);
    v16 = qword_1002A4478;
    if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "ValidatePendingRequests: failed to get validation context for validating pending requests: %@", buf, 0xCu);
    }
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
    objc_msgSend(v12, "addOperation:", v17);

  }
  else
  {
    v8 = dispatch_group_create();
    objc_msgSend(WeakRetained, "setFetchGroup:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataStore"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
    v21 = 0;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000101B8;
    v19[3] = &unk_10023ACD0;
    v19[4] = WeakRetained;
    v20 = v5;
    objc_msgSend(v10, "performForRequestsWithPendingResponses:error:block:", v11, &v21, v19);
    v12 = v21;

    if (qword_1002A4470 != -1)
      dispatch_once(&qword_1002A4470, &stru_10023ACF0);
    v13 = qword_1002A4478;
    if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ValidatePendingRequests: waiting for fetches to finish validating", buf, 2u);
    }
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fetchGroup"));
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fetchQueue"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100010448;
    v18[3] = &unk_10023A390;
    v18[4] = WeakRetained;
    dispatch_group_notify(v14, v15, v18);

  }
}

void sub_100010188(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_1000101B8(uint64_t a1, void *a2, _BYTE *a3, _QWORD *a4)
{
  id v7;
  id v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  uint64_t v27;
  _BYTE v28[128];

  v7 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v23;
    *(_QWORD *)&v9 = 138412290;
    v21 = v9;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v7);
        v13 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v12);
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchGroup", v21));
        dispatch_group_enter(v14);

        objc_msgSend(*(id *)(a1 + 32), "handleKTRequestDownload:context:", v13, *(_QWORD *)(a1 + 40));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "dataStore"));
        LOBYTE(v13) = objc_msgSend(v16, "persistAndRefaultObject:error:", v13, a4);

        if ((v13 & 1) == 0)
        {
          if (qword_1002A4470 != -1)
            dispatch_once(&qword_1002A4470, &stru_10023ACA8);
          v17 = qword_1002A4478;
          if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_ERROR))
          {
            if (a4)
              v18 = *a4;
            else
              v18 = 0;
            *(_DWORD *)buf = v21;
            v27 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to persist pending requests: %@", buf, 0xCu);
          }
          if (a4 && *a4)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataStore"));
            objc_msgSend(v20, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("handlePendingQueryRequests"), *a4);

          }
          *a3 = 1;
        }
        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v10);
  }

}

void sub_1000103E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100010418(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100010448(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint8_t buf[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  NSErrorUserInfoKey v30;
  void *v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v30 = NSMultipleUnderlyingErrorsKey;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
    v31 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyErrorVerify"), -381, v5));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverHints"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(",")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestIds"));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v13)
            objc_enumerationMutation(v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i), "UUIDString"));
          objc_msgSend(v9, "appendFormat:", CFSTR("%@,"), v15);

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v12);
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundOpId"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "smDataStore"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:](KTBackgroundSystemValidationOperation, "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:", v16, v18, v9, v19, v8, v20);

  }
  if (qword_1002A4470 != -1)
    dispatch_once(&qword_1002A4470, &stru_10023AD10);
  v21 = qword_1002A4478;
  if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "ValidatePendingRequests: end", buf, 2u);
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedOp"));
  objc_msgSend(v22, "addOperation:", v23);

}

void sub_100010778(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100010864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010880(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  id WeakRetained;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "metadata"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

  if (v9 && v10 && v11 && !v12)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100010BE0;
    v27[3] = &unk_10023AD60;
    objc_copyWeak(&v30, v13);
    v28 = v9;
    v29 = v16;
    objc_msgSend(WeakRetained, "handleKTRequest:queryRequest:queryResponse:completionHandler:", v28, v10, v11, v27);

    objc_destroyWeak(&v30);
  }
  else
  {
    v17 = objc_msgSend(v9, "type");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", v17, v18));

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v20, "logResultForEvent:hardFailure:result:", v19, objc_msgSend(v9, "isDeleted"), v12);

    if (qword_1002A4470 != -1)
      dispatch_once(&qword_1002A4470, &stru_10023AD80);
    v21 = qword_1002A4478;
    if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "ValidatePendingRequests:background fetch error: %@", buf, 0xCu);
    }
    if (!v12)
      v12 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -145, CFSTR("empty inclusion proof response")));
    objc_msgSend(WeakRetained, "saveRequestFailure:failure:", v9, v12);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "failExpiredRequest:error:", v9, v12));
    if (v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
      objc_msgSend(v23, "addObject:", v12);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestIds"));
      objc_msgSend(v24, "addObject:", v22);

      if (v16)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "serverHints"));
        objc_msgSend(v25, "addObject:", v16);

      }
    }
    v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fetchGroup"));
    dispatch_group_leave(v26);

  }
}

void sub_100010BC4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100010BE0(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;

  v12 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = WeakRetained;
  if (a2 == 2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "failExpiredRequest:error:", *(_QWORD *)(a1 + 32), v12));
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "errors"));
      objc_msgSend(v8, "addObject:", v12);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "requestIds"));
      objc_msgSend(v9, "addObject:", v7);

      if (*(_QWORD *)(a1 + 40))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serverHints"));
        objc_msgSend(v10, "addObject:", *(_QWORD *)(a1 + 40));

      }
    }

  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fetchGroup"));
  dispatch_group_leave(v11);

}

void sub_100010CC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100010EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010EDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  id v23;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = WeakRetained;
  if (!v5 || v6)
  {
    if (qword_1002A4470 != -1)
      dispatch_once(&qword_1002A4470, &stru_10023ADC8);
    v12 = qword_1002A4478;
    if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v21 = v13;
      v22 = 2112;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "ValidatePendingRequests: failed to get validation context for validating pending request %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
      v6 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInternal, -167, CFSTR("no context for handling pending requestId %@"), *(_QWORD *)(a1 + 32)));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataStore"));
    v11 = *(_QWORD *)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100011124;
    v14[3] = &unk_10023AE10;
    v15 = v5;
    v16 = *(id *)(a1 + 40);
    v17 = *(id *)(a1 + 48);
    v18 = v8;
    v19 = *(id *)(a1 + 56);
    objc_msgSend(v10, "performAndWaitForRequestId:error:block:", v11, 0, v14);

    v6 = v15;
  }

}

void sub_1000110F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100011124(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  _TtC13transparencyd19KTCloudRecordsCache *v10;
  _TtC13transparencyd19KTCloudRecordsCache *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;

  v3 = a2;
  v4 = objc_msgSend(v3, "type");
  if (v4 == (id)2)
    goto LABEL_4;
  if (v4 == (id)1)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
    v10 = (_TtC13transparencyd19KTCloudRecordsCache *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cloudRecords"));

    if (v10)
    {
      v11 = [_TtC13transparencyd19KTCloudRecordsCache alloc];
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cloudRecords"));
      v10 = -[KTCloudRecordsCache initWithRecords:](v11, "initWithRecords:", v13);

    }
    v14 = *(void **)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v28 = 0;
    objc_msgSend(v14, "validateSelfKTRequest:queryRequest:queryResponse:optInCheck:cloudDevices:transparentData:loggableDatas:error:", v3, v15, v16, 0, v10, 0, 0, &v28);
    v8 = v28;

  }
  else
  {
    if (!v4)
    {
LABEL_4:
      v5 = *(void **)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      v29 = 0;
      objc_msgSend(v5, "validatePeerOrEnrollKTRequest:queryRequest:queryResponse:transparentData:loggableDatas:error:", v3, v6, v7, 0, 0, &v29);
      v8 = v29;
      goto LABEL_13;
    }
    if (qword_1002A4470 != -1)
      dispatch_once(&qword_1002A4470, &stru_10023ADE8);
    v17 = (void *)qword_1002A4478;
    if (os_log_type_enabled((os_log_t)qword_1002A4478, OS_LOG_TYPE_ERROR))
    {
      v18 = v17;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requestId"));
      *(_DWORD *)buf = 138543618;
      v31 = v19;
      v32 = 2048;
      v33 = objc_msgSend(v3, "type");
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ValidatePendingRequests:deleting requestId %{public}@ with unknown type %lld", buf, 0x16u);

    }
    v20 = kTransparencyErrorDecode;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requestId"));
    v8 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", v20, -206, CFSTR("deleting requestId %@ with unknown type"), v21));

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "dataStore"));
    objc_msgSend(v23, "deleteObject:", v3);

    v24 = objc_msgSend(v3, "type");
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "application"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", v24, v25));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v27, "logResultForEvent:hardFailure:result:", v26, 1, v8);

  }
LABEL_13:
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100011430(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100011770(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4478;
  qword_1002A4478 = (uint64_t)v1;

}

void sub_100012114(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012144(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000125F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012624(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012654(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012684(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000126B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012DCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012DFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012E2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012E5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100012FE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_10001345C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_10001348C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000134BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000137C8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100013B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013B80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100013B90(uint64_t a1)
{

}

void sub_100013B98(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = *(_QWORD *)(a1[8] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fetchPeer:application:error:", v3, v4, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  if (!v6)
  {
    v8 = (void *)a1[4];
    v9 = a1[5];
    v10 = a1[6];
    v11 = *(_QWORD *)(a1[8] + 8);
    v15 = *(id *)(v11 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "createPeerState:application:error:", v9, v10, &v15));
    objc_storeStrong((id *)(v11 + 40), v15);
  }
  v12 = (void *)objc_opt_class(a1[4], v7);
  v13 = *(_QWORD *)(a1[8] + 8);
  v14 = *(id *)(v13 + 40);
  objc_msgSend(v12, "cleanseError:", &v14);
  objc_storeStrong((id *)(v13 + 40), v14);
  (*(void (**)(void))(a1[7] + 16))();
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;

}

void sub_100013E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013E44(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  id obj;
  _BYTE v29[128];

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "persistWithError:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](PeerState, "fetchRequest"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("application = %@ && (failure != nil || mostRecentSuccess != nil || mostRecentCompleted != nil)"), *(_QWORD *)(a1 + 40)));
    objc_msgSend(v5, "setPredicate:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v27 = *(id *)(v8 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "executeFetchRequest:error:", v5, &v27));
    objc_storeStrong((id *)(v8 + 40), v27);

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v15, "setMostRecentCompleted:", 0);
          objc_msgSend(v15, "setMostRecentSuccess:", 0);
          objc_msgSend(v15, "setFailure:", 0);
          objc_msgSend(v15, "setSeenDate:", 0);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
      }
      while (v12);
    }

    v16 = *(void **)(a1 + 32);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v22 = *(id *)(v17 + 40);
    objc_msgSend(v16, "persistWithError:", &v22);
    objc_storeStrong((id *)(v17 + 40), v22);
    v19 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v18);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(id *)(v20 + 40);
    objc_msgSend(v19, "cleanseError:", &v21);
    objc_storeStrong((id *)(v20 + 40), v21);

  }
}

void sub_100014078(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100014168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100014180(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void (*v16)(void);
  id v17;
  id v18;
  id v19;
  id obj;
  uint8_t buf[4];
  uint64_t v22;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "persistWithError:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](PeerState, "fetchRequest"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v19 = *(id *)(v7 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeFetchRequest:error:", v5, &v19));
    objc_storeStrong((id *)(v7 + 40), v19);

    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(id *)(v10 + 40);
    objc_msgSend(v9, "persistWithError:", &v18);
    objc_storeStrong((id *)(v10 + 40), v18);
    v12 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v17 = *(id *)(v13 + 40);
    objc_msgSend(v12, "cleanseError:", &v17);
    objc_storeStrong((id *)(v13 + 40), v17);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      if (qword_1002A4480 != -1)
        dispatch_once(&qword_1002A4480, &stru_10023B0E8);
      v14 = qword_1002A4488;
      if (os_log_type_enabled((os_log_t)qword_1002A4488, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to retrieve peer states: %@", buf, 0xCu);
      }
      v16 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    else
    {
      v16 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    v16();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_100014388(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000145B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000145D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id obj;
  uint8_t buf[4];
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "persistWithError:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBatchUpdateRequest batchUpdateRequestWithEntityName:](NSBatchUpdateRequest, "batchUpdateRequestWithEntityName:", CFSTR("PeerState")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("uri IN %@ && application = %@ && failure != nil && seenDate == nil"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    objc_msgSend(v6, "setPredicate:", v7);

    v24 = CFSTR("seenDate");
    v25 = *(_QWORD *)(a1 + 56);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    objc_msgSend(v6, "setPropertiesToUpdate:", v8);

    objc_msgSend(v6, "setResultType:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v20 = *(id *)(v10 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeRequest:error:", v6, &v20));
    objc_storeStrong((id *)(v10 + 40), v20);

    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v19 = *(id *)(v13 + 40);
    objc_msgSend(v12, "persistWithError:", &v19);
    objc_storeStrong((id *)(v13 + 40), v19);
    if (!v11)
    {
      if (qword_1002A4480 != -1)
        dispatch_once(&qword_1002A4480, &stru_10023B130);
      v14 = qword_1002A4488;
      if (os_log_type_enabled((os_log_t)qword_1002A4488, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "setSeenDate delete: %@", buf, 0xCu);
      }
    }

  }
  v16 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v5);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v18 = *(id *)(v17 + 40);
  objc_msgSend(v16, "cleanseError:", &v18);
  objc_storeStrong((id *)(v17 + 40), v18);
}

void sub_100014824(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100014854(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100014DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_100014DF0(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id obj;

  v3 = (void *)a1[4];
  v4 = a2;
  objc_msgSend(v4, "setUnsigned:value:", "lastIDSCacheUIStatus", objc_msgSend(v3, "uiStatus"));
  v5 = (void *)a1[5];
  v6 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v6 + 40);
  objc_msgSend(v5, "persistAndRefaultObject:error:", v4, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  v8 = (void *)objc_opt_class(a1[5], v7);
  v9 = *(_QWORD *)(a1[6] + 8);
  v10 = *(id *)(v9 + 40);
  objc_msgSend(v8, "cleanseError:", &v10);
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_100014EA0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100014ED0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100014F00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000151EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100015434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100015454(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;

  v3 = a2;
  v4 = v3;
  v5 = a1[8];
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x20C1) != 0)
    {
      +[TransparencySettings failureIgnorePeriod](TransparencySettings, "failureIgnorePeriod");
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:"));
      objc_msgSend(v4, "setIgnoredFailureExpiry:", v6);

    }
    else
    {
      if (v5 != 10)
        goto LABEL_16;
      if ((objc_msgSend(v3, "optedIn") & 1) == 0)
        objc_msgSend(v4, "setTurnedOffIgnored:", 1);
    }
    v7 = (void *)a1[4];
    v18 = 0;
    v8 = objc_msgSend(v7, "persistWithError:", &v18);
    v9 = v18;
    if ((v8 & 1) == 0)
    {
      if (qword_1002A4480 != -1)
        dispatch_once(&qword_1002A4480, &stru_10023B240);
      v10 = qword_1002A4488;
      if (os_log_type_enabled((os_log_t)qword_1002A4488, OS_LOG_TYPE_ERROR))
      {
        v12 = a1[5];
        v13 = a1[6];
        *(_DWORD *)buf = 138544130;
        v20 = v12;
        v21 = 2160;
        v22 = 1752392040;
        v23 = 2112;
        v24 = v13;
        v25 = 2112;
        v26 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to save ignore error for application=%{public}@ uri=%{mask.hash}@: %@", buf, 0x2Au);
      }
      v14 = (void *)objc_opt_class(a1[4], v11);
      v17 = v9;
      objc_msgSend(v14, "cleanseError:", &v17);
      v15 = v17;
      v16 = v17;

      if (v16)
      {
        objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v15);
        v9 = v16;
      }
      else
      {
        v9 = 0;
      }
    }

  }
LABEL_16:

}

void sub_100015648(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100015678(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100015790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000157A8(uint64_t a1, void *a2)
{
  id v3;
  KTOptInStatus *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = objc_alloc_init(KTOptInStatus);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setEverOptedIn:", objc_msgSend(v3, "everOptedIn"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setOptedIn:", objc_msgSend(v3, "optedIn"));
  v7 = objc_msgSend(v3, "everCompletedVerification");

  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setEverCompletedVerification:", v7);
}

void sub_100015994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000159AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  id v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v3 = a2;
  objc_msgSend(v3, "setDataStore:", *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "staticKeyStore"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "verifierResultWithStaticKeyStore:", v4));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "uiStatus");
  if (v8 != objc_msgSend(v3, "lastIDSCacheUIStatus"))
  {
    if (qword_1002A4480 != -1)
      dispatch_once(&qword_1002A4480, &stru_10023B2D0);
    v9 = (void *)qword_1002A4488;
    if (os_log_type_enabled((os_log_t)qword_1002A4488, OS_LOG_TYPE_INFO))
    {
      v10 = v9;
      v11 = objc_msgSend(v3, "lastIDSCacheUIStatus");
      v12 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "uiStatus");
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218754;
      v19 = v11;
      v20 = 2048;
      v21 = v12;
      v22 = 2160;
      v23 = 1752392040;
      v24 = 2112;
      v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "verifierResultForPeer cached UI status changed %lld->%llu for %{mask.hash}@, will update IDS cache", buf, 0x2Au);

    }
    v14 = *(void **)(a1 + 32);
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    objc_msgSend(v14, "updateIDSCacheWithResults:", v15);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setSentToIDS:", 1);
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerOverridesStore"));
  objc_msgSend(v16, "applyPeerOverrides:peer:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v3);

  objc_msgSend(*(id *)(a1 + 32), "persistAndRefaultObject:error:", v3, 0);
}

void sub_100015BCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100015D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100015D30(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = objc_msgSend(WeakRetained, "verifierResultForPeer:application:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100016054(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000162BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000162EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

id sub_1000163E8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueueSetCachedPeerOptInState:uris:application:error:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0);
}

id sub_100016498(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueueRemoveFailures:error:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000166C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000166E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100016714(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  id obj;
  _BYTE v28[128];

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "persistWithError:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[PeerState fetchRequest](PeerState, "fetchRequest"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("application = %@ && (failure != nil)"), *(_QWORD *)(a1 + 40)));
    objc_msgSend(v5, "setPredicate:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v26 = *(id *)(v8 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "executeFetchRequest:error:", v5, &v26));
    objc_storeStrong((id *)(v8 + 40), v26);

    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v23;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v23 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v14), "setFailure:", 0);
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      }
      while (v12);
    }

    v15 = *(void **)(a1 + 32);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(id *)(v16 + 40);
    objc_msgSend(v15, "persistWithError:", &v21);
    objc_storeStrong((id *)(v16 + 40), v21);
    v18 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v17);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v20 = *(id *)(v19 + 40);
    objc_msgSend(v18, "cleanseError:", &v20);
    objc_storeStrong((id *)(v19 + 40), v20);

  }
}

void sub_100016920(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100016C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100016C84(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id obj;
  uint8_t buf[4];
  uint64_t v26;
  const __CFString *v27;
  void *v28;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "persistWithError:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBatchUpdateRequest batchUpdateRequestWithEntityName:](NSBatchUpdateRequest, "batchUpdateRequestWithEntityName:", CFSTR("PeerState")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("uri IN %@ && application = %@"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    objc_msgSend(v6, "setPredicate:", v7);

    v27 = CFSTR("optedIn");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
    v28 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    v10 = objc_msgSend(v9, "mutableCopy");

    if (*(_BYTE *)(a1 + 64))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("everOptedIn"));

    }
    objc_msgSend(v6, "setPropertiesToUpdate:", v10);
    objc_msgSend(v6, "setResultType:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v23 = *(id *)(v13 + 40);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "executeRequest:error:", v6, &v23));
    objc_storeStrong((id *)(v13 + 40), v23);

    v15 = *(void **)(a1 + 32);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v22 = *(id *)(v16 + 40);
    objc_msgSend(v15, "persistWithError:", &v22);
    objc_storeStrong((id *)(v16 + 40), v22);
    if (!v14)
    {
      if (qword_1002A4480 != -1)
        dispatch_once(&qword_1002A4480, &stru_10023B408);
      v17 = qword_1002A4488;
      if (os_log_type_enabled((os_log_t)qword_1002A4488, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "onQueueSetCachedPeerOptInState delete: %@", buf, 0xCu);
      }
    }

  }
  v19 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v5);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v21 = *(id *)(v20 + 40);
  objc_msgSend(v19, "cleanseError:", &v21);
  objc_storeStrong((id *)(v20 + 40), v21);
}

void sub_100016F30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_100016F60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4488;
  qword_1002A4488 = (uint64_t)v1;

}

void sub_1000172E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017B24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017B54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017B84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017BB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017BE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017C14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017C44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017C74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017CA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017CD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017D04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017D34(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4498;
  qword_1002A4498 = (uint64_t)v1;

}

void sub_100017DE8(id a1)
{
  uint64_t v1;
  const char *v2;
  const char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint32_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (!qword_1002A44D0)
  {
    v8 = off_10023B938;
    v9 = 0;
    qword_1002A44D0 = _sl_dlopen(&v8, 0);
  }
  if (qword_1002A44D0)
  {
    byte_1002A44A8 = _os_feature_enabled_impl("Transparency", "KTSystemFailureUI");
    if (qword_1002A44B8 != -1)
      dispatch_once(&qword_1002A44B8, &stru_10023B650);
    v1 = qword_1002A44C0;
    if (os_log_type_enabled((os_log_t)qword_1002A44C0, OS_LOG_TYPE_INFO))
    {
      if (byte_1002A44A8)
        v2 = "enabled";
      else
        v2 = "disabled";
      LODWORD(v8) = 136315138;
      *(_QWORD *)((char *)&v8 + 4) = v2;
      v3 = "Transparency CFUs are %s (via feature flags)";
      v4 = v1;
      v5 = OS_LOG_TYPE_INFO;
      v6 = 12;
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_1002A44B8 != -1)
      dispatch_once(&qword_1002A44B8, &stru_10023B630);
    v7 = qword_1002A44C0;
    if (os_log_type_enabled((os_log_t)qword_1002A44C0, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      v3 = "CoreFollowUp is not available";
      v4 = v7;
      v5 = OS_LOG_TYPE_ERROR;
      v6 = 2;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v3, (uint8_t *)&v8, v6);
    }
  }
}

void sub_100017F84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100017FB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100018024(id a1)
{
  TransparencyFollowup *v1;
  void *v2;

  if (+[TransparencyFollowup isFollowupEnabled](TransparencyFollowup, "isFollowupEnabled"))
  {
    v1 = -[TransparencyFollowup initWithAnalytics:]([TransparencyFollowup alloc], "initWithAnalytics:", 0);
    v2 = (void *)qword_1002A44A0;
    qword_1002A44A0 = (uint64_t)v1;

  }
}

void sub_1000183D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000183F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

id sub_10001858C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1002A44E0;
  v7 = qword_1002A44E0;
  if (!qword_1002A44E0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10001B6A8;
    v3[3] = &unk_10023B958;
    v3[4] = &v4;
    sub_10001B6A8((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001862C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100018920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100018B18()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1002A44F0;
  v7 = qword_1002A44F0;
  if (!qword_1002A44F0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10001B750;
    v3[3] = &unk_10023B958;
    v3[4] = &v4;
    sub_10001B750((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100018BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100018BD0()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)qword_1002A44F8;
  v7 = qword_1002A44F8;
  if (!qword_1002A44F8)
  {
    v1 = (void *)sub_10001B5F8();
    v0 = (id *)dlsym(v1, "FLGroupIdentifierAccount");
    v5[3] = (uint64_t)v0;
    qword_1002A44F8 = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    v3 = (_Unwind_Exception *)sub_1001ACAD0();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

void sub_100019D38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100019D54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019D84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019DB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019DE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019E14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019E44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_100019E74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001A050(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001A06C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001A09C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001A40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001A440(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001A5D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001A658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001A930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001A958(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AEBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AEEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AF1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AF4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AF7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AFAC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001AFDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001B3DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A44C0;
  qword_1002A44C0 = (uint64_t)v1;

}

void sub_10001B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10001B4F4(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ktFollowupStatus"));

  return v2;
}

Class sub_10001B5A4(uint64_t a1)
{
  Class result;

  sub_10001B5F8();
  result = objc_getClass("FLFollowUpController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1002A44D8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1001ACAF0();
    return (Class)sub_10001B5F8();
  }
  return result;
}

uint64_t sub_10001B5F8()
{
  uint64_t v0;
  char *v1;
  char *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1002A44D0)
  {
    v4 = off_10023B938;
    v5 = 0;
    qword_1002A44D0 = _sl_dlopen(&v4, &v3);
  }
  v0 = qword_1002A44D0;
  v1 = v3;
  if (!qword_1002A44D0)
  {
    v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }
  if (v3)
LABEL_7:
    free(v1);
  return v0;
}

Class sub_10001B6A8(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_10001B5F8();
  result = objc_getClass("FLFollowUpAction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1002A44E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1001ACB14();
    return (Class)sub_10001B6FC(v3);
  }
  return result;
}

Class sub_10001B6FC(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_10001B5F8();
  result = objc_getClass("FLFollowUpNotification");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1002A44E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1001ACB38();
    return (Class)sub_10001B750(v3);
  }
  return result;
}

KTBackgroundSystemValidationOperation *sub_10001B750(uint64_t a1)
{
  KTBackgroundSystemValidationOperation *result;
  KTBackgroundSystemValidationOperation *v3;
  SEL v4;
  id v5;

  sub_10001B5F8();
  result = (KTBackgroundSystemValidationOperation *)objc_getClass("FLFollowUpItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1002A44F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (KTBackgroundSystemValidationOperation *)sub_1001ACB5C();
    return -[KTBackgroundSystemValidationOperation initWithDependencies:](v3, v4, v5);
  }
  return result;
}

void sub_10001BFE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001C010(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001C040(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a15);
  _Unwind_Resume(a1);
}

void sub_10001C760(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001C790(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

  objc_msgSend(WeakRetained, "setError:", v4);
  objc_msgSend(WeakRetained, "setTransaction:", 0);

}

void sub_10001D074(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001D0A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4508;
  qword_1002A4508 = (uint64_t)v1;

}

void sub_10001D298(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t *v25;
  _QWORD v26[4];
  id v27;
  int8x16_t v28;
  id v29;
  uint64_t *v30;
  id obj;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  uint8_t buf[4];
  uint64_t v39;

  v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x3032000000;
    v35 = sub_10001D5F4;
    v36 = sub_10001D604;
    v37 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
    v7 = objc_msgSend(v6, "batchQueryMaxURIs");
    v8 = (id *)(v33 + 5);
    obj = (id)v33[5];
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyRPCRequestBuilder buildBatchQueryRequests:application:maxURIsPerBatch:error:](TransparencyRPCRequestBuilder, "buildBatchQueryRequests:application:maxURIsPerBatch:error:", v4, v5, v7, &obj));
    objc_storeStrong(v8, obj);

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
      v13 = *(unsigned __int8 *)(a1 + 64);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10001D63C;
      v26[3] = &unk_10023BB38;
      v30 = &v32;
      v27 = v10;
      v20 = *(int8x16_t *)(a1 + 40);
      v14 = (id)v20.i64[0];
      v28 = vextq_s8(v20, v20, 8uLL);
      v29 = v11;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10001DDE8;
      v21[3] = &unk_10023BB60;
      v15 = v27;
      v22 = v15;
      v16 = v29;
      v23 = v16;
      v24 = *(id *)(a1 + 56);
      v25 = &v32;
      objc_msgSend(v12, "fetchBatchQueries:userInitiated:responseHandler:completionHandler:", v9, v13, v26, v21);

    }
    else
    {
      if (qword_1002A4510 != -1)
        dispatch_once(&qword_1002A4510, &stru_10023BA60);
      v17 = qword_1002A4518;
      if (os_log_type_enabled((os_log_t)qword_1002A4518, OS_LOG_TYPE_ERROR))
      {
        v18 = v33[5];
        *(_DWORD *)buf = 138412290;
        v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create query request: %@", buf, 0xCu);
      }
      v19 = *(_QWORD *)(a1 + 56);
      v15 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v33[5]));
      (*(void (**)(uint64_t, _QWORD, id))(v19 + 16))(v19, 0, v15);
    }

    _Block_object_dispose(&v32, 8);
  }

}

void sub_10001D5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D5F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D604(uint64_t a1)
{

}

void sub_10001D60C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4518;
  qword_1002A4518 = (uint64_t)v1;

}

void sub_10001D63C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;
  const __CFString *v31;
  void *v32;
  const __CFString *v33;
  void *v34;
  uint8_t buf[4];
  id v36;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (v10)
  {
    if (qword_1002A4510 != -1)
      dispatch_once(&qword_1002A4510, &stru_10023BAA0);
    v13 = qword_1002A4518;
    if (os_log_type_enabled((os_log_t)qword_1002A4518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "fetch batch query succeeded", buf, 2u);
    }
    v31 = CFSTR("responseDebugDescription");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "diagnosticsJsonDictionary"));
    v32 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    v16 = *(void **)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, v17);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "xpcContextStore"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ktLogClient"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10001D9F0;
    v29[3] = &unk_10023BAC8;
    v30 = *(id *)(a1 + 56);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10001DCD0;
    v27[3] = &unk_10023BB10;
    v28 = v11;
    objc_msgSend(v18, "handleBatchQueryResponse:queryRequest:receiptDate:fetchId:application:logClient:transparentDataHandler:completionHandler:", v10, v9, v19, v28, v20, v21, v29, v27);

    v22 = v30;
  }
  else
  {
    if (qword_1002A4510 != -1)
      dispatch_once(&qword_1002A4510, &stru_10023BA80);
    v23 = qword_1002A4518;
    if (os_log_type_enabled((os_log_t)qword_1002A4518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "fetch batch query failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a5);
    v33 = CFSTR("error");
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "description"));
    v34 = v22;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    v25 = *(void **)(a1 + 32);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v24, v26);

  }
}

void sub_10001D990(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4518;
  qword_1002A4518 = (uint64_t)v1;

}

void sub_10001D9C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4518;
  qword_1002A4518 = (uint64_t)v1;

}

void sub_10001D9F0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (v10)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapEntry"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapLeaf"));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mapEntry"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "mapLeaf"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[IdsMapLeaf parseFromData:error:](IdsMapLeaf, "parseFromData:error:", v17, 0));

      if (v18)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "diagnosticsJsonDictionary"));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v19, CFSTR("mapLeaf"));

      }
    }
    if (objc_msgSend(v10, "pendingSmtsArray_Count"))
    {
      v30 = v12;
      v31 = a1;
      v32 = v9;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pendingSmtsArray"));
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (v22)
      {
        v23 = v22;
        v24 = *(_QWORD *)v34;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(_QWORD *)v34 != v24)
              objc_enumerationMutation(v21);
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[SignedMutationTimestamp signedTypeWithObject:](SignedMutationTimestamp, "signedTypeWithObject:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i)));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "diagnosticsJsonDictionary"));
            objc_msgSend(v20, "addObject:", v27);

          }
          v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        }
        while (v23);
      }

      if (objc_msgSend(v20, "count"))
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v20, CFSTR("pendingSmts"));

      a1 = v31;
      v9 = v32;
      v12 = v30;
    }
  }
  if (v11)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "diagnosticsJsonDictionary"));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v28, CFSTR("transparentData"));

  }
  if (v12)
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "description"));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v29, CFSTR("error"));

  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v13, v9);

}

void sub_10001DCD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v4 = a3;
  if (qword_1002A4510 != -1)
    dispatch_once(&qword_1002A4510, &stru_10023BAE8);
  v5 = qword_1002A4518;
  if (os_log_type_enabled((os_log_t)qword_1002A4518, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "failed to handle fetchId %{public}@ batch query: %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_10001DDB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4518;
  qword_1002A4518 = (uint64_t)v1;

}

void sub_10001DDE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("uriData"));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v2, v4);

}

void sub_10001E38C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001E3BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001E3EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001E41C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001EAC4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001EAF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001EB24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001ED70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001F3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F434(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001F444(uint64_t a1)
{

}

void sub_10001F44C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  const char *v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint32_t v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id obj;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v40 = a3;
    v41 = *(_QWORD *)(a1 + 88);
    v11 = v8;
    v12 = v7;
    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountKey"));
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v16 = *(_QWORD *)(a1 + 96);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsResponseTime"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "metadata"));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    obj = *(id *)(v19 + 40);
    v20 = v13;
    v7 = v12;
    v8 = v11;
    v21 = objc_msgSend(v20, "validateAndReportPeerOrEnroll:type:transparentData:accountKey:loggableDatas:initialResult:idsResponseTime:responseMetadata:error:", v7, v41, v11, v14, v15, v16, v17, v18, &obj);
    objc_storeStrong((id *)(v19 + 40), obj);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v21;

    if (*(_QWORD *)(a1 + 96) == 3)
    {
      objc_msgSend(*(id *)(a1 + 40), "setVerificationResult:", 3);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 3;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    if (v22 == 3)
    {
      v23 = v40;
      v9 = 0;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BCE8);
      v30 = (void *)qword_1002A4528;
      if (!os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      if (*(_QWORD *)(a1 + 88))
        v31 = CFSTR("enroll");
      else
        v31 = CFSTR("peer");
      v32 = *(void **)(a1 + 40);
      v27 = v30;
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "requestId"));
      *(_DWORD *)buf = 138412546;
      v44 = (uint64_t)v31;
      v45 = 2114;
      v46 = v28;
      v29 = "Ignoring validate %@ result for requestId %{public}@";
    }
    else
    {
      v23 = v40;
      v9 = 0;
      if (v22 != 1)
      {
        if (qword_1002A4520 != -1)
          dispatch_once(&qword_1002A4520, &stru_10023BD08);
        v36 = (void *)qword_1002A4528;
        if (!os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
          goto LABEL_34;
        if (*(_QWORD *)(a1 + 88))
          v37 = CFSTR("enroll");
        else
          v37 = CFSTR("peer");
        v38 = *(void **)(a1 + 40);
        v27 = v36;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "requestId"));
        v39 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412802;
        v44 = (uint64_t)v37;
        v45 = 2114;
        v46 = v28;
        v47 = 2112;
        v48 = v39;
        v29 = "Validate %@ failed for requestId %{public}@: %@";
        v33 = v27;
        v34 = OS_LOG_TYPE_ERROR;
        v35 = 32;
        goto LABEL_33;
      }
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BCC8);
      v24 = (void *)qword_1002A4528;
      if (!os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      if (*(_QWORD *)(a1 + 88))
        v25 = CFSTR("enroll");
      else
        v25 = CFSTR("peer");
      v26 = *(void **)(a1 + 40);
      v27 = v24;
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "requestId"));
      *(_DWORD *)buf = 138412546;
      v44 = (uint64_t)v25;
      v45 = 2114;
      v46 = v28;
      v29 = "Validate %@ succeeded for requestId %{public}@";
    }
    v33 = v27;
    v34 = OS_LOG_TYPE_DEFAULT;
    v35 = 22;
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v29, buf, v35);

LABEL_34:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v23);
    goto LABEL_35;
  }
  if (qword_1002A4520 != -1)
    dispatch_once(&qword_1002A4520, &stru_10023BCA8);
  v10 = qword_1002A4528;
  if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    v44 = 1752392040;
    v45 = 2112;
    v46 = v7;
    v47 = 2112;
    v48 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_35:

}

void sub_10001F8F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001F924(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001F954(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001F984(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001F9B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10001FD4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000203EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100020444(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id obj;
  id v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  id v70;
  __int16 v71;
  id v72;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v66 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    obj = *(id *)(v13 + 40);
    v14 = objc_msgSend(v11, "deserializeSyncedLoggableDatas:loggableDatas:error:", v12, &v66, &obj);
    v15 = v66;
    objc_storeStrong((id *)(v13 + 40), obj);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v14;
    if (v14 != (id)1)
    {
LABEL_33:

      goto LABEL_34;
    }
    v62 = a3;
    v16 = *(void **)(a1 + 48);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uriVRFOutput"));
    objc_msgSend(v16, "setWithUriVRFHash:", v17);

    v61 = *(void **)(a1 + 32);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountKey"));
    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    v60 = *(unsigned __int8 *)(a1 + 120);
    v58 = *(_OWORD *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 64);
    v63 = v15;
    v20 = v8;
    v21 = v7;
    v22 = *(_BYTE *)(a1 + 121);
    v23 = *(_QWORD *)(a1 + 112);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsResponseTime"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "metadata"));
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v64 = *(id *)(v26 + 40);
    LOBYTE(v57) = v22;
    v7 = v21;
    v8 = v20;
    v27 = objc_msgSend(v61, "validateAndReportSelf:transparentData:accountKey:serverloggableDatas:syncedLoggableDatas:optInCheck:cloudDevices:pcsAccountKey:kvsOptInHistory:isReplay:initialResult:idsResponseTime:responseMetadata:error:", v7, v20, v18, v59, v63, v60, v58, v19, v57, v23, v24, v25, &v64);
    objc_storeStrong((id *)(v26 + 40), v64);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v27;

    if (*(_QWORD *)(a1 + 112) == 3)
    {
      objc_msgSend(*(id *)(a1 + 40), "setVerificationResult:", 3);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 3;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
    if (v28 == 3)
    {
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BDD0);
      v9 = 0;
      v37 = (void *)qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(void **)(a1 + 40);
        v39 = v37;
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "requestId"));
        *(_DWORD *)buf = 138543362;
        v68 = (uint64_t)v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Ignoring validate self result for requestId %{public}@", buf, 0xCu);

      }
      goto LABEL_32;
    }
    if (v28 == 1)
    {
      v9 = 0;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BDB0);
      v29 = (void *)qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(void **)(a1 + 40);
        v31 = v29;
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "requestId"));
        *(_DWORD *)buf = 138543362;
        v68 = (uint64_t)v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Validate self succeeded for requestId %{public}@", buf, 0xCu);

      }
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
      objc_msgSend(v33, "clearSelfValidationFollowups:uri:error:", v34, v7, 0);

      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
      objc_msgSend(v35, "clearSelfFailureRelatedData:uri:error:", v36, v7, 0);

    }
    else
    {
      v9 = 0;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BDF0);
      v41 = (void *)qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
      {
        v42 = *(void **)(a1 + 40);
        v43 = v41;
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "requestId"));
        v45 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
        *(_DWORD *)buf = 138543618;
        v68 = (uint64_t)v44;
        v69 = 2112;
        v70 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Validate self failed for requestId %{public}@: %@", buf, 0x16u);

      }
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsResponseTime"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountKey"));
      v48 = objc_msgSend(v20, "optInAfter:accountKey:", v46, v47);

      if (!v48)
        goto LABEL_32;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BE10);
      v49 = (void *)qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *(void **)(a1 + 32);
        v51 = v49;
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "applicationID"));
        *(_DWORD *)buf = 141558530;
        v68 = 1752392040;
        v69 = 2112;
        v70 = v7;
        v71 = 2112;
        v72 = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Clearing IDS cache for %{mask.hash}@[%@]", buf, 0x20u);

      }
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uri"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
      objc_msgSend(v53, "clearIDSCacheForUri:application:", v54, v55);

      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
      objc_msgSend(v35, "triggerSelfValidate:", 1.0);
    }

LABEL_32:
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyManagedDataStore serializeLoggableDatas:](TransparencyManagedDataStore, "serializeLoggableDatas:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)));
    objc_msgSend(*(id *)(a1 + 40), "setServerLoggableDatas:", v56);

    objc_msgSend(*(id *)(a1 + 32), "writeLoggableDatas:request:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), v62);
    v15 = v63;
    goto LABEL_33;
  }
  if (qword_1002A4520 != -1)
    dispatch_once(&qword_1002A4520, &stru_10023BD90);
  v10 = qword_1002A4528;
  if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    v68 = 1752392040;
    v69 = 2112;
    v70 = v7;
    v71 = 2112;
    v72 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
LABEL_34:

}

void sub_100020B60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020B90(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020BC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020BF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020C20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020C50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020F2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100020F5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100021480(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint32_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id obj;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v37 = a3;
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountKey"));
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsResponseTime"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataForInsertResponse:", *(_QWORD *)(a1 + 56)));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    obj = *(id *)(v17 + 40);
    v38 = v7;
    v18 = objc_msgSend(v11, "validateAndReportEnroll:transparentData:accountKey:loggableDatas:initialResult:idsResponseTime:responseMetadata:error:", v7, v8, v12, v14, v13, v15, v16, &obj);
    objc_storeStrong((id *)(v17 + 40), obj);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v18;

    if (*(_QWORD *)(a1 + 96) == 3)
    {
      objc_msgSend(*(id *)(a1 + 40), "setVerificationResult:", 3);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 3;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
    v9 = 0;
    if (v19 == 3)
    {
      v7 = v38;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BEF8);
      v20 = v37;
      v27 = (void *)qword_1002A4528;
      if (!os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
        goto LABEL_26;
      v28 = *(void **)(a1 + 40);
      v26 = v27;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "requestId"));
      *(_DWORD *)buf = 138543362;
      v41 = (uint64_t)v29;
      v30 = "Ignoring validate enrollment result for requestId %{public}@";
      v31 = v26;
      v32 = OS_LOG_TYPE_DEFAULT;
      v33 = 12;
    }
    else
    {
      v7 = v38;
      if (v19 == 1)
      {
        v20 = v37;
        if (qword_1002A4520 != -1)
          dispatch_once(&qword_1002A4520, &stru_10023BED8);
        v21 = (void *)qword_1002A4528;
        if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEFAULT))
        {
          v22 = *(void **)(a1 + 40);
          v23 = v21;
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "requestId"));
          *(_DWORD *)buf = 138543362;
          v41 = (uint64_t)v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Validate enrollment succeeded for requestId %{public}@", buf, 0xCu);

        }
        v25 = *(void **)(a1 + 32);
        v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountKey"));
        objc_msgSend(v25, "recordEnrollOptInRecord:accountKey:transparentData:cloudOptIn:", v38, v26, v8, *(_QWORD *)(a1 + 64));
        goto LABEL_25;
      }
      v20 = v37;
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023BF18);
      v34 = (void *)qword_1002A4528;
      if (!os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      v35 = *(void **)(a1 + 40);
      v26 = v34;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "requestId"));
      v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v41 = (uint64_t)v29;
      v42 = 2112;
      v43 = v36;
      v30 = "Validate enrollment failed for requestId %{public}@: %@";
      v31 = v26;
      v32 = OS_LOG_TYPE_ERROR;
      v33 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, v33);

LABEL_25:
LABEL_26:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v20);
    goto LABEL_27;
  }
  if (qword_1002A4520 != -1)
    dispatch_once(&qword_1002A4520, &stru_10023BEB8);
  v10 = qword_1002A4528;
  if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    v41 = 1752392040;
    v42 = 2112;
    v43 = v7;
    v44 = 2112;
    v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
LABEL_27:

}

void sub_1000218F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021924(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021954(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021984(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000219B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021E20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021E50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100021E80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000220F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002244C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002247C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000224AC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "dataStore"));
  v8 = a1[5];
  v22 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000225F4;
  v15[3] = &unk_10023C0A8;
  v9 = v6;
  v16 = v9;
  v21 = a1[7];
  v10 = v5;
  v17 = v10;
  v18 = a1[6];
  v11 = a1[5];
  v12 = a1[4];
  v19 = v11;
  v20 = v12;
  v13 = objc_msgSend(v7, "performAndWaitForFetchId:error:block:", v8, &v22, v15);
  v14 = v22;

  if ((v13 & 1) == 0)
    (*((void (**)(void))a1[7] + 2))();

}

void sub_1000225F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  id v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "request"));
  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C040);
    v5 = (void *)qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_INFO))
    {
      v6 = v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "requestId"));
      *(_DWORD *)buf = 138543362;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "handling fetched response for requestId %{public}@", buf, 0xCu);

    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requestData"));
    v20 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](QueryRequest, "parseFromData:error:", v8, &v20));
    v10 = v20;

    if (!*(_QWORD *)(a1 + 48))
    {
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023C060);
      v11 = qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
      {
        v12 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138543618;
        v22 = v12;
        v23 = 2112;
        v24 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "parse saved queryRequest for fetchId %{public}@ failed after fetch: %@", buf, 0x16u);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "dataStore"));
  objc_msgSend(v13, "deleteObject:", v3);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "dataStore"));
  v19 = 0;
  v15 = objc_msgSend(v14, "persistAndRefaultObject:error:", v3, &v19);
  v16 = v19;

  if ((v15 & 1) == 0)
  {
    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C080);
    v17 = qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to delete fetch record after fetch: %@", buf, 0xCu);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "dataStore"));
    objc_msgSend(v18, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("fetchRecordDelete"), v16);

  }
}

void sub_10002290C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002293C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002296C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100022BFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002302C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002305C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002308C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void (*v23)(void);
  void *v24;
  void *v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  uint64_t v34;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = v12;
  if (!v11 || !v10 || !v9 || v12)
  {
    if (!v11 || v12)
    {
      v19 = *(void **)(a1 + 32);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uri"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accountKey"));
      v27 = 0;
      v22 = objc_msgSend(v19, "peerStaticKeyFallback:accountKey:transparentData:", v20, v21, &v27);
      v17 = v27;

      if (v22)
      {
        v23 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_20:
        v23();
        goto LABEL_21;
      }

    }
    else
    {
      if (qword_1002A4520 != -1)
        dispatch_once(&qword_1002A4520, &stru_10023C150);
      v18 = qword_1002A4528;
      if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v32 = v11;
        v33 = 2112;
        v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validatePeer static key: %@/%@", buf, 0x16u);
      }
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
    v17 = (id)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", 0, v24));

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v25, "logResultForEvent:hardFailure:result:", v17, objc_msgSend(v9, "isDeleted"), v13);

    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C170);
    v26 = qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "validatePeer fetch error: %@", buf, 0xCu);
    }
    v23 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_20;
  }
  v14 = *(void **)(a1 + 32);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  objc_msgSend(v14, "validatePeerOrEnrollKTRequest:queryRequest:queryResponse:transparentData:loggableDatas:error:", v9, v10, v11, &v30, &v29, &v28);
  v15 = v30;
  v16 = v29;
  v17 = v28;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

LABEL_21:
}

void sub_1000233C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000233F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023420(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000236FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100023738(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v9;
  v20 = v9;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v10;
  v16 = v10;

  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v11;
  v19 = v11;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100023804(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023CE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023D10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023D40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t buf[4];
  void *v21;

  v9 = a5;
  v10 = v9;
  if (a4 && a3 && a2 && !v9)
  {
    v11 = *(void **)(a1 + 32);
    v19 = 0;
    v12 = a2;
    objc_msgSend(v11, "validatePeerOrEnrollKTRequest:queryRequest:queryResponse:transparentData:loggableDatas:error:", v12, a3, a4, 0, 0, &v19);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v14 = a2;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "applicationID"));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", 2, v15));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v17 = objc_msgSend(v14, "isDeleted");

    objc_msgSend(v16, "logResultForEvent:hardFailure:result:", v12, v17, v10);
    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C260);
    v18 = qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validateEnrollment fetch error: %@", buf, 0xCu);
    }
  }

}

void sub_100023EF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023F20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100023F50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000240E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, void *, void *, void *);
  void *v17;
  id v18;
  id v19;

  v3 = a2;
  v4 = objc_msgSend(v3, "verificationResult");
  if (*(_BYTE *)(a1 + 48))
    v5 = 1;
  else
    v5 = v4 == (id)2;
  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = *(unsigned __int8 *)(a1 + 49);
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_100024234;
    v17 = &unk_10023C2F0;
    v18 = v3;
    v19 = *(id *)(a1 + 40);
    objc_msgSend(v6, "fetchAndValidatePeerKTRequest:fetchNow:completionHandler:", v18, v7, &v14);

  }
  else
  {
    v8 = v4;
    v9 = objc_alloc((Class)KTVerifierResult);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
    v12 = objc_msgSend(v9, "initWithUri:application:ktResult:", v10, v11, v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore", v14, v15, v16, v17));
  objc_msgSend(v13, "refaultObject:", v3);

}

void sub_100024234(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = objc_alloc((Class)KTVerifierResult);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uri"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v15 = objc_msgSend(v12, "initWithUri:application:ktResult:transparentData:loggableDatas:", v13, v14, a2, v11, v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100024518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 168), 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_100024554(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v13 = *(id *)(v5 + 40);
  obj = v4;
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v12 = *(id *)(v8 + 40);
  v9 = a2;
  v10 = objc_msgSend(v6, "fetchAndValidateEnrollKTRequest:transparentData:loggableDatas:cloudOptIn:error:", v9, &obj, &v13, v7, &v12);
  objc_storeStrong((id *)(v3 + 40), obj);
  objc_storeStrong((id *)(v5 + 40), v13);
  objc_storeStrong((id *)(v8 + 40), v12);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  objc_msgSend(v11, "refaultObject:", v9);

}

void sub_100024C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_100024C38(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100024C68(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  id v35;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v31 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](QueryRequest, "parseFromData:error:", v4, &v31));
  v6 = v31;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v30 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](QueryResponse, "parseFromData:error:", v7, &v30));
    v9 = v30;

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "kt_dateToString"));
    objc_msgSend(v8, "setMetadataValue:key:", v10, CFSTR("ResponseTime"));

    v11 = *(void **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 72);
    v28 = 0;
    v29 = 0;
    LOBYTE(v27) = 1;
    v13 = objc_msgSend(v11, "validateSelfKTRequest:queryRequest:queryResponse:optInCheck:cloudDevices:pcsAccountKey:kvsOptInHistory:isReplay:transparentData:loggableDatas:error:", v3, v5, v8, 0, 0, v12, 0, v27, &v29, 0, &v28);
    v14 = v29;
    v15 = v28;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "diagnosticsJsonDictionary"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setKtVerificationInfoDiagnosticsJson:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "diagnosticsJsonDictionary"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setTransparentDataDiagnosticsJson:", v17);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setRequestTime:", *(_QWORD *)(a1 + 64));
    if ((unint64_t)v13 > 3)
      v18 = CFSTR("Unknown");
    else
      v18 = *(&off_10023C408 + (_QWORD)v13);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setResult:", v18);
    if (v15)
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setError:", v15);
    objc_msgSend(*(id *)(a1 + 88), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), *(_QWORD *)(a1 + 96));
    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C3A0);
    v22 = qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = *(void **)(a1 + 96);
      *(_DWORD *)buf = 138543618;
      v33 = v23;
      v34 = 2112;
      v35 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "ReplaySelfValidate: deleting requestId %{public}@ for %@", buf, 0x16u);
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataStore"));
    objc_msgSend(v25, "deleteObject:", v3);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataStore"));
    objc_msgSend(v26, "persistWithError:", 0);

    v6 = v9;
  }
  else
  {
    if (qword_1002A4520 != -1)
      dispatch_once(&qword_1002A4520, &stru_10023C380);
    v19 = qword_1002A4528;
    if (os_log_type_enabled((os_log_t)qword_1002A4528, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v33 = v20;
      v34 = 2112;
      v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "ReplayValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@", buf, 0x16u);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setResult:", CFSTR("Failed"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setError:", v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataStore"));
    objc_msgSend(v21, "deleteObject:", v3);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataStore"));
    objc_msgSend(v8, "persistWithError:", 0);
  }

}

void sub_10002504C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_10002507C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_1000250AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4528;
  qword_1002A4528 = (uint64_t)v1;

}

void sub_100025408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002542C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_10002545C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  NSObject *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id obj;
  void *v46;
  id *from;
  void *v48;
  uint64_t v49;
  void *v50;
  NSObject *group;
  _QWORD block[4];
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  NSObject *v58;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t v66[128];
  uint8_t buf[4];
  id v68;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  from = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v50 = v7;
  v42 = v8;
  v44 = v9;
  if (!v7 || v9)
  {
    if (qword_1002A4530 != -1)
      dispatch_once(&qword_1002A4530, &stru_10023C448);
    v39 = qword_1002A4538;
    if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v68 = v9;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to fetch self verification info: %@", buf, 0xCu);
    }
    objc_msgSend(WeakRetained, "setError:", v9, v8, v9);
    group = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
    -[NSObject addOperation:](group, "addOperation:", v48);
  }
  else
  {
    if (qword_1002A4530 != -1)
      dispatch_once(&qword_1002A4530, &stru_10023C468);
    v11 = (void *)qword_1002A4538;
    if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEBUG))
    {
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uriToServerLoggableDatas", v42, v9));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allKeys"));
      *(_DWORD *)buf = 138412290;
      v68 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "ValidateSelf: got self verification info for %@", buf, 0xCu);

    }
    objc_msgSend(WeakRetained, "setSelfInfo:", v7, v42);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uriToServerLoggableDatas"));
    v16 = objc_msgSend(v15, "count") == 0;

    if (v16)
    {
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C488);
      v40 = qword_1002A4538;
      if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "FetchKTSelf: no uriToServerLoggableDatas", buf, 2u);
      }
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kTransparencyErrorServer, -336, 0));
      objc_msgSend(WeakRetained, "setError:", v41);

      group = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
      -[NSObject addOperation:](group, "addOperation:", v48);
    }
    else
    {
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      group = dispatch_group_create();
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stateMonitor"));
      objc_msgSend(v18, "setPendingChanges:", 1);

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "syncedLoggableDatas"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyManagedDataStore serializeLoggableDatas:](TransparencyManagedDataStore, "serializeLoggableDatas:", v19));

      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uriToServerLoggableDatas"));
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
      if (v20)
      {
        v49 = *(_QWORD *)v63;
        do
        {
          v21 = 0;
          do
          {
            if (*(_QWORD *)v63 != v49)
              objc_enumerationMutation(obj);
            v22 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)v21);
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "uriToServerLoggableDatas"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v22));

            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyApplication addApplicationPrefixForIdentifier:uri:](TransparencyApplication, "addApplicationPrefixForIdentifier:uri:", v25, v22));

            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "accountKey"));
            LODWORD(v22) = v27 == 0;

            if ((_DWORD)v22)
            {
              v34 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", CFSTR("TransparencyErrorVerify"), -389, CFSTR("accountKey is nil for KTVerificationInfo")));
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selfErrors"));
              objc_msgSend(v35, "setObject:forKeyedSubscript:", v34, v26);

            }
            else
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "accountKey"));
              objc_msgSend(v46, "addObject:", v28);

              dispatch_group_enter(group);
              if (qword_1002A4530 != -1)
                dispatch_once(&qword_1002A4530, &stru_10023C4A8);
              v29 = qword_1002A4538;
              if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v68 = v26;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "ValidateSelf: getting KT data for %@", buf, 0xCu);
              }
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "smDataStore"));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
              v55[0] = _NSConcreteStackBlock;
              v55[1] = 3221225472;
              v55[2] = sub_100025CC0;
              v55[3] = &unk_10023C640;
              v33 = v26;
              v56 = v33;
              v57 = WeakRetained;
              v58 = group;
              objc_copyWeak(&v61, from);
              v59 = v24;
              v60 = v48;
              objc_msgSend(v31, "fetchKTInfoForApplication:uri:complete:", v32, v33, v55);

              objc_destroyWeak(&v61);
              v34 = v56;
            }

            v21 = (char *)v21 + 1;
          }
          while (v20 != v21);
          v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
        }
        while (v20);
      }

      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C660);
      v36 = qword_1002A4538;
      if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "ValidateSelf: waiting for uris to finish validating", buf, 2u);
      }
      v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uriQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100026C00;
      block[3] = &unk_10023B3A8;
      v53 = v46;
      v54 = WeakRetained;
      v38 = v46;
      dispatch_group_notify(group, v37, block);

    }
  }

}

void sub_100025BE4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100025C00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100025C30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100025C60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100025C90(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100025CC0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  id WeakRetained;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  _QWORD v47[4];
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  id v63;

  v11 = a2;
  v12 = a3;
  v46 = a4;
  v42 = a5;
  v13 = a6;
  v44 = v11;
  v45 = v12;
  v43 = v13;
  if (v11 && v12 && v46 && !v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cachedTimes"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v46, *(_QWORD *)(a1 + 32));

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    if (qword_1002A4530 != -1)
      dispatch_once(&qword_1002A4530, &stru_10023C4E8);
    v16 = qword_1002A4538;
    if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v59 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "ValidateSelf: creating requestId for %@", buf, 0xCu);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "serverLoggableDatas"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyManagedDataStore serializeLoggableDatas:](TransparencyManagedDataStore, "serializeLoggableDatas:", v18));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataStore"));
    v21 = *(_QWORD *)(a1 + 32);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountKey"));
    v24 = *(_QWORD *)(a1 + 64);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "idsResponseTime"));
    v57 = 0;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "createRequestWithUri:application:accountKey:serverData:syncedData:idsResponseTime:queryRequest:queryResponse:responseDate:type:clientId:error:", v21, v22, v23, v40, v24, v25, v44, v45, v46, 1, 0, &v57));
    v39 = v57;

    if (v41)
    {
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C528);
      v26 = qword_1002A4538;
      if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        v59 = (uint64_t)v41;
        v60 = 2160;
        v61 = 1752392040;
        v62 = 2112;
        v63 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "ValidateSelf: created requestId %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "contextStore"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "application"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "logClient"));
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_1000263AC;
      v47[3] = &unk_10023C618;
      v48 = v41;
      v49 = WeakRetained;
      v50 = *(id *)(a1 + 32);
      v51 = *(id *)(a1 + 48);
      objc_copyWeak(&v56, (id *)(a1 + 72));
      v52 = v44;
      v53 = v45;
      v54 = v42;
      v55 = v46;
      objc_msgSend(v29, "contextForApplication:logClient:fetchState:completionHandler:", v30, v32, 1, v47);

      objc_destroyWeak(&v56);
    }
    else
    {
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C508);
      v36 = qword_1002A4538;
      if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
      {
        v37 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 141558530;
        v59 = 1752392040;
        v60 = 2112;
        v61 = v37;
        v62 = 2112;
        v63 = v39;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to save KTRequest for %{mask.hash}@: %@", buf, 0x20u);
      }
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selfErrors"));
      objc_msgSend(v38, "setObject:forKeyedSubscript:", v39, *(_QWORD *)(a1 + 32));

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    }

  }
  else
  {
    if (qword_1002A4530 != -1)
      dispatch_once(&qword_1002A4530, &stru_10023C4C8);
    v33 = qword_1002A4538;
    if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
    {
      v34 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 141558530;
      v59 = 1752392040;
      v60 = 2112;
      v61 = v34;
      v62 = 2112;
      v63 = v43;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to fetch KT data for %{mask.hash}@: %@", buf, 0x20u);
    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v43, *(_QWORD *)(a1 + 32));

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

}

void sub_1000262D0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000262EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_10002631C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_10002634C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_10002637C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_1000263AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    if (qword_1002A4530 != -1)
      dispatch_once(&qword_1002A4530, &stru_10023C548);
    v17 = qword_1002A4538;
    if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v31 = v18;
      v32 = 2112;
      v33 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to get validation context for validating requestId %{public}@: %@", buf, 0x16u);
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 48));

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataStore"));
    v11 = *(_QWORD *)(a1 + 32);
    v29 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000266D4;
    v20[3] = &unk_10023C5D0;
    v21 = *(id *)(a1 + 64);
    v22 = *(id *)(a1 + 32);
    v23 = WeakRetained;
    v24 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 72);
    v26 = *(id *)(a1 + 80);
    v27 = *(id *)(a1 + 88);
    v28 = v5;
    v12 = objc_msgSend(v10, "performAndWaitForRequestId:error:block:", v11, &v29, v20);
    v13 = v29;

    if ((v12 & 1) == 0)
    {
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C5F0);
      v14 = qword_1002A4538;
      if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        v31 = v15;
        v32 = 2160;
        v33 = 1752392040;
        v34 = 2112;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to find request for requestId %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }

}

void sub_1000266A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_1000266D4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _TtC13transparencyd19KTCloudRecordsCache *v12;
  _TtC13transparencyd19KTCloudRecordsCache *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  id v40;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v36 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](QueryRequest, "parseFromData:error:", v4, &v36));
  v6 = v36;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v35 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](QueryResponse, "parseFromData:error:", v7, &v35));
    v31 = v35;

    v9 = *(_QWORD *)(a1 + 72);
    if (v9)
      objc_msgSend(v8, "setMetadataValue:key:", v9, kTransparencyResponseMetadataKeyServerHint);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "kt_dateToString"));
    objc_msgSend(v8, "setMetadataValue:key:", v10, CFSTR("ResponseTime"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v12 = (_TtC13transparencyd19KTCloudRecordsCache *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "cloudRecords"));

    if (v12)
    {
      v13 = [_TtC13transparencyd19KTCloudRecordsCache alloc];
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "cloudRecords"));
      v12 = -[KTCloudRecordsCache initWithRecords:](v13, "initWithRecords:", v15);

    }
    v16 = objc_msgSend(*(id *)(a1 + 48), "isOptInSelfValidation");
    v17 = *(void **)(a1 + 88);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v18 = objc_msgSend(v17, "validateSelfKTRequest:queryRequest:queryResponse:optInCheck:cloudDevices:transparentData:loggableDatas:error:", v3, v5, v8, v16, v12, &v34, &v33, &v32);
    v19 = v34;
    v20 = v33;
    v21 = v32;
    if (v18 == (id)2)
    {
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C5A8);
      v22 = qword_1002A4538;
      if (!os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      *(_DWORD *)buf = 138412290;
      v38 = v21;
      v23 = "ValidateSelf: self verification pending: %@";
    }
    else
    {
      if (v18)
        goto LABEL_22;
      if (qword_1002A4530 != -1)
        dispatch_once(&qword_1002A4530, &stru_10023C588);
      v22 = qword_1002A4538;
      if (!os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      *(_DWORD *)buf = 138412290;
      v38 = v21;
      v23 = "ValidateSelf: self verification failed: %@";
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v23, buf, 0xCu);
LABEL_22:
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "transparentDatas"));
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v19, *(_QWORD *)(a1 + 56));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v18));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selfResults"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v27, *(_QWORD *)(a1 + 56));

    if (v21)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selfErrors"));
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v21, *(_QWORD *)(a1 + 56));

    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selfInfo"));
    objc_msgSend(v30, "updateUri:serverLoggableDatas:", *(_QWORD *)(a1 + 56), v20);

    v6 = v31;
    goto LABEL_25;
  }
  if (qword_1002A4530 != -1)
    dispatch_once(&qword_1002A4530, &stru_10023C568);
  v24 = qword_1002A4538;
  if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
  {
    v25 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v38 = v25;
    v39 = 2112;
    v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@", buf, 0x16u);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selfErrors"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 56));
LABEL_25:

}

void sub_100026B10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100026B40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100026B70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100026BA0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100026BD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100026C00(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  _QWORD v35[5];
  _QWORD v36[2];
  _QWORD v37[2];
  uint8_t buf[4];
  void *v39;
  const __CFString *v40;
  void *v41;

  if (objc_msgSend(*(id *)(a1 + 32), "count") != (id)1)
  {
    v40 = CFSTR("publicKeys");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
    v41 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:](TransparencyError, "errorWithDomain:code:underlyingError:userinfo:description:", CFSTR("TransparencyErrorVerify"), -379, 0, v3, CFSTR("public key count is not expected 1")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("publicKeys"));

  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1000270E4;
  v35[3] = &unk_10023C6A8;
  v35[4] = *(_QWORD *)(a1 + 40);
  v6 = sub_1000270E4((uint64_t)v35);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cloudRecords"));
  if ((objc_msgSend(v8, "disableKTSyncabledKVSStore") & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 40), "isOptInSelfValidation") & 1) != 0)
  {
    goto LABEL_11;
  }

  if ((v6 & 1) != 0)
    goto LABEL_12;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accountKeyService"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "accountKeyService:", kKTApplicationIdentifierIDS));
  v34 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicPublicKey:", &v34));
  v12 = v34;

  if (!v8)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:](TransparencyError, "errorWithDomain:code:underlyingError:userinfo:description:", CFSTR("TransparencyErrorVerify"), -271, v12, 0, CFSTR("no opt-in state due to missing account key")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CFSTR("optIn"));
    v7 = v12;
    goto LABEL_10;
  }
  v13 = *(void **)(a1 + 40);
  v33 = v12;
  v14 = objc_msgSend(v13, "validateOptInStatusWithAccountKey:error:", v8, &v33);
  v7 = v33;

  if ((v14 & 1) == 0)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:userinfo:description:](TransparencyError, "errorWithDomain:code:underlyingError:userinfo:description:", CFSTR("TransparencyErrorVerify"), -364, v7, 0, CFSTR("optInMismatch")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CFSTR("optIn"));
LABEL_10:

  }
LABEL_11:

LABEL_12:
  if (qword_1002A4530 != -1)
    dispatch_once(&qword_1002A4530, &stru_10023C6C8);
  v17 = (void *)qword_1002A4538;
  if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(void **)(a1 + 40);
    v19 = v17;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "selfErrors"));
    *(_DWORD *)buf = 138412290;
    v39 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "ValidateSelf: finished: %@", buf, 0xCu);

  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
  v22 = objc_msgSend(v21, "count");

  if (v22)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allKeys"));

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "componentsJoinedByString:", CFSTR(",")));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("uris failed: %@"), v25));

    v36[0] = NSMultipleUnderlyingErrorsKey;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selfErrors"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "allValues"));
    v36[1] = NSLocalizedDescriptionKey;
    v37[0] = v28;
    v37[1] = v26;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 2));

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyErrorVerify"), -320, v29));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v30);

  }
  objc_msgSend(*(id *)(a1 + 40), "fillStatus");
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "finishedOp"));
  objc_msgSend(v31, "addOperation:", v32);

}

uint64_t sub_1000270E4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _BYTE v21[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transparentDatas", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transparentDatas"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));

        if (!v9)
        {
          if (qword_1002A4530 != -1)
            dispatch_once(&qword_1002A4530, &stru_10023C680);
          v11 = qword_1002A4538;
          if (os_log_type_enabled((os_log_t)qword_1002A4538, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 141558274;
            v18 = 1752392040;
            v19 = 2112;
            v20 = v7;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "No transparentData for URI %{mask.hash}@, skipping opt-in checks", buf, 0x16u);
          }
          v10 = 1;
          goto LABEL_15;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
      if (v4)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_15:

  return v10;
}

void sub_1000272A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_1000272D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

uint64_t sub_100027304(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return dword_100213FF0[a1];
}

void sub_100027920(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100027950(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100027B98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100027BC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

void sub_100027CC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *i;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountOptInHistory:", *(_QWORD *)(a1 + 32)));
  v9 = v8;
  if (v8)
  {
    v18 = a1;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v20;
      do
      {
        v13 = v9;
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v12)
            objc_enumerationMutation(v13);
          v15 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(v15, "timestampMs") / 1000.0));
          v17 = objc_msgSend(objc_alloc((Class)KTOptIOLogState), "initWithURI:smtTimestamp:optIn:", v5, v16, objc_msgSend(v15, "optIn"));
          objc_msgSend(v7, "addObject:", v17);

        }
        v9 = v13;
        v11 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v11);
    }
    objc_msgSend(*(id *)(v18 + 40), "setObject:forKeyedSubscript:", v7, v5);
  }

}

void sub_10002854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100028588(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4538;
  qword_1002A4538 = (uint64_t)v1;

}

uint64_t sub_1000285B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000285C8(uint64_t a1)
{

}

void sub_1000285D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a2)
  {
    v3 = a2;
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "kt_hexString"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v10 = (id)objc_claimAutoreleasedReturnValue(+[KTAccountPublicID ktAccountPublicIDWithPublicKeyInfo:error:](KTAccountPublicID, "ktAccountPublicIDWithPublicKeyInfo:error:", v3, 0));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "publicAccountIdentity"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
}

void sub_100028C74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100028CA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100028E84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100028EB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029264(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029294(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_1000292C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_1000292F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029324(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *j;
  void *v32;
  void *v33;
  id v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  id v51;
  uint8_t v52[128];
  uint8_t buf[4];
  id v54;
  __int16 v55;
  void *v56;
  _BYTE v57[128];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serverLoggableDatas"));
    v51 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyManagedDataStore deserializeLoggableDatas:error:](TransparencyManagedDataStore, "deserializeLoggableDatas:error:", v7, &v51));
    v9 = v51;

    objc_msgSend(*(id *)(a1 + 32), "setSelfDevices:", v8);
    if (!v8)
    {
      if (qword_1002A4540 != -1)
        dispatch_once(&qword_1002A4540, &stru_10023C920);
      v10 = qword_1002A4548;
      if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v54 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "FillStatus: no self loggable datas: %@", buf, 0xCu);
      }
    }
    v11 = objc_msgSend(v5, "verificationResult");
    if (v11)
    {
      if (v11 == (id)1)
      {
        if (qword_1002A4540 != -1)
          dispatch_once(&qword_1002A4540, &stru_10023C940);
        v12 = qword_1002A4548;
        if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to OK", buf, 2u);
        }
        v13 = 0;
      }
      else
      {
        if (qword_1002A4540 != -1)
          dispatch_once(&qword_1002A4540, &stru_10023C9C0);
        v21 = qword_1002A4548;
        if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v13 = 2;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to Unavailable", buf, 2u);
        }
        else
        {
          v13 = 2;
        }
      }
    }
    else
    {
      v41 = v9;
      v42 = a1;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v15 = v8;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v48;
        v13 = 3;
        while (2)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v48 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
            if (!objc_msgSend(v20, "result"))
            {
              if (qword_1002A4540 != -1)
                dispatch_once(&qword_1002A4540, &stru_10023C960);
              v22 = (void *)qword_1002A4548;
              if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_ERROR))
              {
                v23 = v22;
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "deviceID"));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "deviceIdHash"));
                *(_DWORD *)buf = 138412546;
                v54 = v24;
                v55 = 2112;
                v56 = v25;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "FillStatus: failing device is: %@[%@]", buf, 0x16u);

              }
              v13 = 1;
              goto LABEL_39;
            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
          if (v17)
            continue;
          break;
        }
      }
      else
      {
        v13 = 3;
      }
LABEL_39:

      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "failures"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "allObjects"));

      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
      if (v28)
      {
        v29 = v28;
        v39 = v8;
        v40 = v6;
        v30 = *(_QWORD *)v44;
        while (2)
        {
          for (j = 0; j != v29; j = (char *)j + 1)
          {
            if (*(_QWORD *)v44 != v30)
              objc_enumerationMutation(v27);
            v32 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)j);
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "errorDomain", v39));
            if (objc_msgSend(v33, "isEqual:", CFSTR("com.apple.Transparency")))
            {
              if (objc_msgSend(v32, "errorCode") == (id)7)
              {

LABEL_54:
                if (qword_1002A4540 != -1)
                  dispatch_once(&qword_1002A4540, &stru_10023C980);
                v9 = v41;
                a1 = v42;
                v8 = v39;
                v35 = qword_1002A4548;
                if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v54 = v32;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "FillStatus: opt-in failure %@", buf, 0xCu);
                }
                v13 = 4;
                v6 = v40;
                goto LABEL_59;
              }
              v34 = objc_msgSend(v32, "errorCode");

              if (v34 == (id)10)
                goto LABEL_54;
            }
            else
            {

            }
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
          if (v29)
            continue;
          break;
        }
        v8 = v39;
        v6 = v40;
      }
      a1 = v42;
      v9 = v41;
LABEL_59:

      if (qword_1002A4540 != -1)
        dispatch_once(&qword_1002A4540, &stru_10023C9A0);
      v36 = (void *)qword_1002A4548;
      if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_DEFAULT))
      {
        v37 = v36;
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
        *(_DWORD *)buf = 138412290;
        v54 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to failure type %@", buf, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "setSelfStatus:", v13);

  }
  else
  {
    if (qword_1002A4540 != -1)
      dispatch_once(&qword_1002A4540, &stru_10023C9E0);
    v14 = qword_1002A4548;
    if (os_log_type_enabled((os_log_t)qword_1002A4548, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v54 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "FillStatus: no recent self validation: %@", buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "setSelfStatus:", 2);
  }

}

void sub_100029BB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029BE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029C14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029C44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029C74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029CA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029CD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029D04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029F90(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_100029FC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4548;
  qword_1002A4548 = (uint64_t)v1;

}

void sub_10002A568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002A594(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002A5C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002A5F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  void *v24;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (qword_1002A4550 != -1)
      dispatch_once(&qword_1002A4550, &stru_10023CAC8);
    v9 = qword_1002A4558;
    if (os_log_type_enabled((os_log_t)qword_1002A4558, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = (uint64_t)v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "FillStatus: failed to get context: %@", buf, 0xCu);
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
    objc_msgSend(v10, "addOperation:", v11);

  }
  else
  {
    if (qword_1002A4550 != -1)
      dispatch_once(&qword_1002A4550, &stru_10023CAE8);
    v12 = (void *)qword_1002A4558;
    if (os_log_type_enabled((os_log_t)qword_1002A4558, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v12;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reason"));
      *(_DWORD *)buf = 141558530;
      v20 = 1752392040;
      v21 = 2112;
      v22 = v13;
      v23 = 2114;
      v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "querying KT server for opt-in state of %{mask.hash}@ for reason %{public}@", buf, 0x20u);

    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "prefixedURI"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10002A8D0;
    v17[3] = &unk_10023CB50;
    objc_copyWeak(&v18, v7);
    objc_msgSend(v5, "optInStateForUri:completionHandler:", v16, v17);

    objc_destroyWeak(&v18);
  }

}

void sub_10002A854(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10002A870(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002A8A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002A8D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v5)
  {
    if (qword_1002A4550 != -1)
      dispatch_once(&qword_1002A4550, &stru_10023CB08);
    v7 = qword_1002A4558;
    if (os_log_type_enabled((os_log_t)qword_1002A4558, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "FillStatus: failed to check server opt-in: %@", (uint8_t *)&v13, 0xCu);
    }
LABEL_11:
    objc_msgSend(WeakRetained, "retry");
    goto LABEL_12;
  }
  if (qword_1002A4550 != -1)
    dispatch_once(&qword_1002A4550, &stru_10023CB28);
  v8 = qword_1002A4558;
  if (os_log_type_enabled((os_log_t)qword_1002A4558, OS_LOG_TYPE_INFO))
  {
    v13 = 134217984;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "FillStatus: setting server opt-in state to %lu", (uint8_t *)&v13, 0xCu);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stateMonitor"));
  objc_msgSend(v10, "setServerOptInState:", a2);

  if (a2 == (void *)2)
    goto LABEL_11;
LABEL_12:
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
  objc_msgSend(v11, "addOperation:", v12);

}

void sub_10002AAA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002AAD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002AC54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4558;
  qword_1002A4558 = (uint64_t)v1;

}

void sub_10002B50C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002B53C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002B56C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002B59C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002B5CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002B74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B77C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002B78C(uint64_t a1)
{

}

void sub_10002B794(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id obj;
  uint8_t buf[4];
  uint64_t v25;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(v5, "count"))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v8 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "verifyMapHeadMMDs:application:error:", v5, v7, &obj));
    objc_storeStrong((id *)(v8 + 40), obj);
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-SmhMMD"), *(_QWORD *)(a1 + 32)));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "failedSMHs"));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v9, v10);

      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v10);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dataStore"));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v22 = *(id *)(v16 + 40);
    v17 = objc_msgSend(v15, "persistAndRefaultObjects:error:", v5, &v22);
    objc_storeStrong((id *)(v16 + 40), v22);

    if ((v17 & 1) == 0)
    {
      if (qword_1002A4560 != -1)
        dispatch_once(&qword_1002A4560, &stru_10023CC58);
      v18 = qword_1002A4568;
      if (os_log_type_enabled((os_log_t)qword_1002A4568, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v25 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "VerifyMapHeadMMD: failed to save MMD verified SMHs: %@", buf, 0xCu);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "dataStore"));
        objc_msgSend(v21, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("verifyMapHeadMMDs"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

      }
      *a3 = 1;
    }

  }
}

void sub_10002BA08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002BEF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4568;
  qword_1002A4568 = (uint64_t)v1;

}

void sub_10002C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C7D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_10002C808(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_10002C838(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_10002C868(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (!v8)
      goto LABEL_7;
    v20 = 138412290;
    v21 = v6;
    v9 = "Failed to load Core Data stack: %@";
  }
  else
  {
    if (!v8)
      goto LABEL_7;
    v20 = 138412290;
    v21 = v5;
    v9 = "Load Core Data complete: %@";
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v20, 0xCu);
LABEL_7:

  v10 = *(id *)(a1 + 32);
  objc_sync_enter(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12)
    __assert_rtn("-[StaticKeyController initCloudDataStore:idsDelegate:configurationStore:notificationCenter:complete:]_block_invoke", "StaticKeyController.m", 155, "storeCount >= 1");
  *(_QWORD *)(v11 + 24) = v12 - 1;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0;
  objc_sync_exit(v10);

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v15 = *(void **)(a1 + 32);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cloudContainer"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "persistentStoreCoordinator"));
    objc_msgSend(v14, "addObserver:selector:name:object:", v15, "remoteUpdate:", NSPersistentStoreRemoteChangeNotification, v17);

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    dispatch_resume(v18);

    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v19);
  }

}

void sub_10002CA70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10002CD2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  int v6;
  id v7;

  v4 = a3;
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to load Core Data stack: %@", (uint8_t *)&v6, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002CF10(uint64_t a1)
{
  id v2;

  v2 = (id)os_transaction_create("processCoreDataHistory");
  objc_msgSend(*(id *)(a1 + 32), "processCoreDataHistory");

}

void sub_10002D258(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  _UNKNOWN **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *i;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id obj;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  id v59;
  uint8_t buf[4];
  const __CFString *v61;
  __int16 v62;
  void *v63;
  _BYTE v64[128];
  _BYTE v65[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPersistentHistoryChangeRequest fetchHistoryAfterToken:](NSPersistentHistoryChangeRequest, "fetchHistoryAfterToken:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setResultType:", 5);
  v3 = *(void **)(v1 + 40);
  v59 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeRequest:error:", v2, &v59));
  v5 = v59;
  v6 = v5;
  if (v4)
  {
    v41 = v4;
    v42 = v2;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "result"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "fetchContactsSyncToken"));

    if (!v8)
    {
      if (qword_1002A4570 != -1)
        dispatch_once(&qword_1002A4570, &stru_10023CD70);
      v9 = qword_1002A4578;
      if (os_log_type_enabled((os_log_t)qword_1002A4578, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "processCoreDataHistory no previously existing sync token", buf, 2u);
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "contactStore"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "configurationStore"));
      objc_msgSend(v10, "fetchAndStoreContactsSyncTokenWithConfigStore:", v11);

    }
    v40 = v6;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    obj = v7;
    v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v65, 16);
    v12 = 0;
    if (v45)
    {
      v44 = *(_QWORD *)v56;
      v13 = NSSet_ptr;
      do
      {
        v14 = 0;
        v15 = v12;
        do
        {
          v47 = v15;
          if (*(_QWORD *)v56 != v44)
            objc_enumerationMutation(obj);
          v48 = v14;
          v16 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v14);
          v51 = 0u;
          v52 = 0u;
          v53 = 0u;
          v54 = 0u;
          v46 = v16;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "changes"));
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v51, v64, 16);
          if (v18)
          {
            v19 = v18;
            v49 = v17;
            v50 = *(_QWORD *)v52;
            do
            {
              for (i = 0; i != v19; i = (char *)i + 1)
              {
                if (*(_QWORD *)v52 != v50)
                  objc_enumerationMutation(v17);
                v21 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "changedObjectID"));
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "entityName"));
                v24 = objc_msgSend(v23, "isEqual:", CFSTR("STStaticKeyHandle"));

                if (v24)
                {
                  v25 = objc_msgSend(v21, "changeType");
                  if ((unint64_t)v25 >= 2)
                  {
                    if (v25 == (id)2)
                    {
                      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "tombstone"));
                      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("idsID")));
                      goto LABEL_29;
                    }
                    v34 = 0;
                  }
                  else
                  {
                    v27 = v1;
                    v28 = *(void **)(v1 + 40);
                    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "changedObjectID"));
                    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "existingObjectWithID:error:", v29, 0));

                    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "entity"));
                    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "name"));
                    v33 = objc_msgSend(v32, "isEqual:", CFSTR("STStaticKeyHandle"));

                    if ((v33 & 1) != 0)
                    {
                      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "valueForKey:", CFSTR("idsID")));
                    }
                    else
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "changedObjectID"));
                        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "entityName"));
                        *(_DWORD *)buf = 138412546;
                        v61 = CFSTR("STStaticKeyHandle");
                        v62 = 2112;
                        v63 = v36;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "not %@: %@", buf, 0x16u);

                      }
                      v34 = 0;
                    }
                    v1 = v27;
                    v13 = NSSet_ptr;
                    v17 = v49;
LABEL_29:

                  }
                  v37 = objc_opt_class(v13[2], v26);
                  if ((objc_opt_isKindOfClass(v34, v37) & 1) != 0)
                    objc_msgSend(*(id *)(v1 + 56), "addObject:", v34);

                  continue;
                }
              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v51, v64, 16);
            }
            while (v19);
          }

          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "token"));
          v14 = v48 + 1;
          v15 = v12;
        }
        while ((id)(v48 + 1) != v45);
        v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v65, 16);
      }
      while (v45);
    }

    if (objc_msgSend(obj, "count"))
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "dataFromHistoryToken:", v12));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "configurationStore"));
      objc_msgSend(v39, "setSettingsData:data:", CFSTR("CoreDataSyncToken"), v38);

    }
    v4 = v41;
    v2 = v42;
    v6 = v40;
    goto LABEL_42;
  }
  if (v5)
  {
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "configurationStore"));
    objc_msgSend(obj, "setSettingsData:data:", CFSTR("CoreDataSyncToken"), 0);
LABEL_42:

  }
}

void sub_10002D79C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_10002DC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DCA4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[8];
  id v12;
  _QWORD v13[6];

  v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  v3 = objc_alloc((Class)NSCloudKitMirroringImportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10002DDE0;
  v13[3] = &unk_10023CDC0;
  v4 = *(_QWORD *)(a1 + 48);
  v13[4] = *(_QWORD *)(a1 + 32);
  v13[5] = v4;
  v5 = objc_msgSend(v3, "initWithOptions:completionBlock:", v2, v13);
  v6 = *(void **)(a1 + 40);
  v12 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v5, &v12));
  v8 = v12;

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "import request finished", v11, 2u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_1001ACB80();
  }

}

void sub_10002DDE0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;

  v3 = a2;
  if (objc_msgSend(v3, "success"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "import result: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10002DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DFC8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[8];
  id v12;
  _QWORD v13[6];

  v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  v3 = objc_alloc((Class)NSCloudKitMirroringExportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10002E104;
  v13[3] = &unk_10023CDC0;
  v4 = *(_QWORD *)(a1 + 48);
  v13[4] = *(_QWORD *)(a1 + 32);
  v13[5] = v4;
  v5 = objc_msgSend(v3, "initWithOptions:completionBlock:", v2, v13);
  v6 = *(void **)(a1 + 40);
  v12 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v5, &v12));
  v8 = v12;

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "export request finished", v11, 2u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_1001ACBE0();
  }

}

void sub_10002E104(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;

  v3 = a2;
  if (objc_msgSend(v3, "success"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "export result: %@", (uint8_t *)&v5, 0xCu);
  }

}

id sub_10002E290(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "importFromCloud");
  objc_msgSend(*(id *)(a1 + 32), "exportToCloud");
  return objc_msgSend(*(id *)(a1 + 32), "consumeContactsChangeHistory");
}

void sub_10002E51C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  id v11;
  _QWORD v12[5];

  v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  v3 = objc_alloc((Class)NSCloudKitMirroringResetZoneRequest);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002E654;
  v12[3] = &unk_10023CE10;
  v12[4] = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(v3, "initWithOptions:completionBlock:", v2, v12);
  v5 = *(void **)(a1 + 40);
  v11 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeRequest:error:", v4, &v11));
  v7 = v11;

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "reset request finished", v10, 2u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_1001ACCCC();
  }

}

void sub_10002E654(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "reset zone: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10002ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10002ED3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

uint64_t sub_10002ED6C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002ED7C(uint64_t a1)
{

}

void sub_10002ED84(uint64_t a1)
{
  void *v2;
  NSPredicate *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *i;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *j;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *k;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *m;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void *n;
  void *v64;
  uint64_t v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  id v101;
  id v102;
  id obj;
  _BYTE v104[128];
  _BYTE v105[5];
  uint8_t v106[128];
  uint8_t buf[4];
  uint64_t v108;
  _BYTE v109[128];
  _BYTE v110[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  if (*(_QWORD *)(a1 + 32))
    v3 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactExternalIdentifier == %@"), *(_QWORD *)(a1 + 32));
  else
    v3 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactIdentifier == %@"), *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "setPredicate:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v6 = *(void **)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  obj = *(id *)(v7 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v7 + 40), obj);
  v75 = v8;
  if (objc_msgSend(v8, "count"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "publicIdentity"));
    v11 = objc_msgSend(v10, "isEqual:", *(_QWORD *)(a1 + 56));

    if ((v11 & 1) != 0)
    {
      v12 = v9;
      v13 = 0;
    }
    else
    {
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "publicIdentity"));
      v12 = v9;
      objc_msgSend(v9, "setPublicIdentity:", *(_QWORD *)(a1 + 56));
    }
    v20 = *(_QWORD *)(a1 + 56);
    v19 = *(void **)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v102 = *(id *)(v22 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fetchHandles:moc:error:", v20, v21, &v102));
    objc_storeStrong((id *)(v22 + 40), v102);
    v23 = *(void **)(a1 + 64);
    v24 = *(_QWORD *)(a1 + 48);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v101 = *(id *)(v25 + 40);
    v78 = (void *)v13;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "fetchHandles:moc:error:", v13, v24, &v101));
    objc_storeStrong((id *)(v25 + 40), v101);
    if (v18)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v27 = v18;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v97, v110, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v98;
        do
        {
          for (i = 0; i != v29; i = (char *)i + 1)
          {
            if (*(_QWORD *)v98 != v30)
              objc_enumerationMutation(v27);
            objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)i));
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v97, v110, 16);
        }
        while (v29);
      }

    }
    if (v26)
    {
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v32 = v26;
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v93, v109, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v94;
        do
        {
          for (j = 0; j != v34; j = (char *)j + 1)
          {
            if (*(_QWORD *)v94 != v35)
              objc_enumerationMutation(v32);
            objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)j));
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v93, v109, 16);
        }
        while (v34);
      }

    }
    v8 = v75;
  }
  else
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "log"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v108 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "storeStaticKey will create new record, failed to fetch: %@", buf, 0xCu);
    }

    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("STStaticKey"), *(_QWORD *)(a1 + 48)));
    objc_msgSend(v12, "setPublicIdentity:", *(_QWORD *)(a1 + 56));
    v78 = 0;
    v18 = v5;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  }

  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v12, "setContactIdentifier:");
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v12, "setContactExternalIdentifier:");
  if (*(_QWORD *)(a1 + 72))
  {
    v73 = v12;
    v74 = v2;
    v77 = a1;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v76 = v5;
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
    v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v89, v106, 16);
    if (!v40)
      goto LABEL_50;
    v41 = v40;
    v42 = *(_QWORD *)v90;
    while (1)
    {
      for (k = 0; k != v41; k = (char *)k + 1)
      {
        if (*(_QWORD *)v90 != v42)
          objc_enumerationMutation(v39);
        v44 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * (_QWORD)k);
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "idsID"));
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", v45));
        if (v46)
        {

LABEL_42:
          objc_msgSend(v38, "addObject:", v44);
          continue;
        }
        if (v78)
        {
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "publicIdentity"));
          v48 = objc_msgSend(v47, "isEqualToString:", v78);

          if (v48)
            goto LABEL_42;
        }
        else
        {

        }
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "idsID"));
        objc_msgSend(v37, "setObject:forKeyedSubscript:", v44, v49);

      }
      v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v89, v106, 16);
      if (!v41)
      {
LABEL_50:

        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v50 = *(id *)(v77 + 72);
        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v85, v105, 16);
        if (v51)
        {
          v52 = v51;
          v53 = *(_QWORD *)v86;
          do
          {
            for (m = 0; m != v52; m = (char *)m + 1)
            {
              if (*(_QWORD *)v86 != v53)
                objc_enumerationMutation(v50);
              v55 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)m);
              v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", v55));

              if (v56)
              {
                objc_msgSend(v37, "setObject:forKeyedSubscript:", 0, v55);
              }
              else
              {
                v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("STStaticKeyHandle"), *(_QWORD *)(v77 + 48)));
                objc_msgSend(v57, "setIdsID:", v55);
                objc_msgSend(v57, "setValidated:", 0);
                objc_msgSend(v57, "setPublicIdentity:", *(_QWORD *)(v77 + 56));
                objc_msgSend(v76, "addObject:", v57);

              }
            }
            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v85, v105, 16);
          }
          while (v52);
        }

        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "allValues"));
        objc_msgSend(v38, "addObjectsFromArray:", v58);

        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v59 = v38;
        v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v81, v104, 16);
        v2 = v74;
        v5 = v76;
        a1 = v77;
        if (v60)
        {
          v61 = v60;
          v62 = *(_QWORD *)v82;
          do
          {
            for (n = 0; n != v61; n = (char *)n + 1)
            {
              if (*(_QWORD *)v82 != v62)
                objc_enumerationMutation(v59);
              objc_msgSend(*(id *)(v77 + 48), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)n));
            }
            v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v81, v104, 16);
          }
          while (v61);
        }

        v8 = v75;
        v12 = v73;
        break;
      }
    }
  }
  v64 = *(void **)(a1 + 48);
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v80 = *(id *)(v65 + 40);
  v66 = objc_msgSend(v64, "save:", &v80);
  objc_storeStrong((id *)(v65 + 40), v80);
  if (v66)
  {
    v67 = *(void **)(a1 + 64);
    v68 = *(_QWORD *)(a1 + 48);
    v69 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v79 = *(id *)(v69 + 40);
    v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "mapStaticKeyToStoreEntry:handles:moc:error:", v12, v5, v68, &v79));
    objc_storeStrong((id *)(v69 + 40), v79);
    v71 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v72 = *(void **)(v71 + 40);
    *(_QWORD *)(v71 + 40) = v70;

  }
}

id sub_10002F550(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "exportToCloud");
}

void sub_10002FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002FC28(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity == %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = (void *)a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  if (v7)
  {
    v8 = a1[4];
    v9 = a1[5];
    v10 = (void *)a1[6];
    v11 = *(_QWORD *)(a1[7] + 8);
    v20 = *(id *)(v11 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fetchHandles:moc:error:", v8, v9, &v20));
    objc_storeStrong((id *)(v11 + 40), v20);
    v14 = a1[5];
    v13 = (void *)a1[6];
    v15 = *(_QWORD *)(a1[7] + 8);
    v19 = *(id *)(v15 + 40);
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "mapStaticKeyToStoreEntry:handles:moc:error:", v7, v12, v14, &v19));
    objc_storeStrong((id *)(v15 + 40), v19);
    v17 = *(_QWORD *)(a1[8] + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
}

void sub_10002FF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002FF28(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("STStaticKeyHandle")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("idsID == %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = (void *)a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicIdentity"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity == %@"), v9));
    objc_msgSend(v8, "setPredicate:", v10);

    v11 = (void *)a1[5];
    v12 = *(_QWORD *)(a1[7] + 8);
    v28 = *(id *)(v12 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "executeFetchRequest:error:", v8, &v28));
    objc_storeStrong((id *)(v12 + 40), v28);
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
      if (v14)
      {
        v15 = (void *)a1[6];
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicIdentity"));
        v17 = a1[5];
        v18 = *(_QWORD *)(a1[7] + 8);
        v27 = *(id *)(v18 + 40);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fetchHandles:moc:error:", v16, v17, &v27));
        objc_storeStrong((id *)(v18 + 40), v27);

        v21 = a1[5];
        v20 = (void *)a1[6];
        v22 = *(_QWORD *)(a1[7] + 8);
        v26 = *(id *)(v22 + 40);
        v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "mapStaticKeyToStoreEntry:handles:moc:error:", v14, v19, v21, &v26));
        objc_storeStrong((id *)(v22 + 40), v26);
        v24 = *(_QWORD *)(a1[8] + 8);
        v25 = *(void **)(v24 + 40);
        *(_QWORD *)(v24 + 40) = v23;

      }
    }

  }
}

void sub_10003044C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_10003047C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_1000304AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_1000304DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_100030670(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

id sub_1000306A0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_1002A4570 != -1)
    dispatch_once(&qword_1002A4570, &stru_10023CF40);
  v2 = qword_1002A4578;
  if (os_log_type_enabled((os_log_t)qword_1002A4578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Doing initial cloud sync", v4, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "importFromCloud");
}

void sub_100030734(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_1000308E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10003090C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactIdentifier == %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = (void *)a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  v8 = v7;
  if (v7)
  {
    v9 = (void *)a1[6];
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicIdentity"));
    v11 = a1[5];
    v12 = *(_QWORD *)(a1[7] + 8);
    v21 = *(id *)(v12 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fetchHandles:moc:error:", v10, v11, &v21));
    objc_storeStrong((id *)(v12 + 40), v21);

    v15 = a1[5];
    v14 = (void *)a1[6];
    v16 = *(_QWORD *)(a1[7] + 8);
    v20 = *(id *)(v16 + 40);
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapStaticKeyToStoreEntry:handles:moc:error:", v8, v13, v15, &v20));
    objc_storeStrong((id *)(v16 + 40), v20);
    v18 = *(_QWORD *)(a1[8] + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

  }
}

void sub_100030C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100030C34(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactExternalIdentifier == %@"), a1[4]));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = (void *)a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  v8 = v7;
  if (v7)
  {
    v9 = (void *)a1[6];
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicIdentity"));
    v11 = a1[5];
    v12 = *(_QWORD *)(a1[7] + 8);
    v21 = *(id *)(v12 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fetchHandles:moc:error:", v10, v11, &v21));
    objc_storeStrong((id *)(v12 + 40), v21);

    v15 = a1[5];
    v14 = (void *)a1[6];
    v16 = *(_QWORD *)(a1[7] + 8);
    v20 = *(id *)(v16 + 40);
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapStaticKeyToStoreEntry:handles:moc:error:", v8, v13, v15, &v20));
    objc_storeStrong((id *)(v16 + 40), v20);
    v18 = *(_QWORD *)(a1[8] + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

  }
}

void sub_1000310F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100031120(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *j;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  id obj;
  _BYTE v40[128];
  _BYTE v41[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v5 + 40);
  v28 = v2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i));
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    }
    while (v9);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](KTCoreDataSTHandle, "fetchRequest"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v12, "setPredicate:", v13);

  v14 = *(void **)(a1 + 40);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v34 = *(id *)(v15 + 40);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "executeFetchRequest:error:", v12, &v34));
  objc_storeStrong((id *)(v15 + 40), v34);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v17 = v16;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v31;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(_QWORD *)v31 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)j);
        v23 = *(void **)(a1 + 48);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "idsID"));
        objc_msgSend(v23, "addObject:", v24);

        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v22);
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
    }
    while (v19);
  }

  v25 = *(void **)(a1 + 40);
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v29 = *(id *)(v26 + 40);
  v27 = objc_msgSend(v25, "save:", &v29);
  objc_storeStrong((id *)(v26 + 40), v29);
  if (v27)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

}

void sub_100031610(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10003163C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id obj;
  _BYTE v44[128];
  _BYTE v45[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactIdentifier == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v6 + 40);
  v32 = v2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v6 + 40), obj);
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v40 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicIdentity"));
        objc_msgSend(v4, "addObject:", v14);

        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
    }
    while (v10);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](KTCoreDataSTHandle, "fetchRequest"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity IN %@"), v4));
  objc_msgSend(v15, "setPredicate:", v16);

  v17 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v38 = *(id *)(v18 + 40);
  v31 = v15;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "executeFetchRequest:error:", v15, &v38));
  objc_storeStrong((id *)(v18 + 40), v38);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v20 = v19;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v22; j = (char *)j + 1)
      {
        if (*(_QWORD *)v35 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)j);
        v26 = *(void **)(a1 + 48);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "idsID"));
        objc_msgSend(v26, "addObject:", v27);

        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v25);
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    }
    while (v22);
  }

  v28 = *(void **)(a1 + 40);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v33 = *(id *)(v29 + 40);
  v30 = objc_msgSend(v28, "save:", &v33);
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v8, "count") != 0;

}

void sub_100031B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100031BB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id obj;
  _BYTE v44[128];
  _BYTE v45[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("contactExternalIdentifier == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v3, "setPredicate:", v4);

  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v6 + 40);
  v32 = v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v6 + 40), obj);
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v40 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicIdentity"));
        objc_msgSend(v2, "addObject:", v14);

        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
    }
    while (v10);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTHandle fetchRequest](KTCoreDataSTHandle, "fetchRequest"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("publicIdentity IN %@"), v2));
  objc_msgSend(v15, "setPredicate:", v16);

  v17 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v38 = *(id *)(v18 + 40);
  v31 = v15;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "executeFetchRequest:error:", v15, &v38));
  objc_storeStrong((id *)(v18 + 40), v38);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v20 = v19;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v22; j = (char *)j + 1)
      {
        if (*(_QWORD *)v35 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)j);
        v26 = *(void **)(a1 + 48);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "idsID"));
        objc_msgSend(v26, "addObject:", v27);

        objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v25);
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    }
    while (v22);
  }

  v28 = *(void **)(a1 + 40);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v33 = *(id *)(v29 + 40);
  v30 = objc_msgSend(v28, "save:", &v33);
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v8, "count") != 0;

}

void sub_100032030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032048(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id obj;
  _BYTE v21[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[KTCoreDataSTStaticKey fetchRequest](KTCoreDataSTStaticKey, "fetchRequest"));
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    v15 = v2;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicIdentity"));

          if (v12)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicIdentity"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[KTAccountPublicID ktAccountPublicIDWithStorageString:error:](KTAccountPublicID, "ktAccountPublicIDWithStorageString:error:", v13, 0));

            if (v14)
              objc_msgSend(*(id *)(a1 + 40), "addObject:", v14);

          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      }
      while (v8);
    }

    v2 = v15;
  }

}

void sub_100032378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10003239C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  id v10;
  _QWORD v11[4];
  int v12;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("STStaticKeyHandle")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("idsID == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000324D8;
    v11[3] = &unk_10023CF60;
    v12 = *(_DWORD *)(a1 + 64);
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v11);
    v7 = *(void **)(a1 + 40);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(id *)(v8 + 40);
    v9 = objc_msgSend(v7, "save:", &v10);
    objc_storeStrong((id *)(v8 + 40), v10);
    if (v9)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }

}

id sub_1000324D8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setError:", *(unsigned int *)(a1 + 32));
}

void sub_100032974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032998(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_1000329C8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  unsigned int v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  unsigned int v37;
  _BYTE v38[128];

  v4 = a2;
  v5 = a3;
  if (v5)
  {
    if (qword_1002A4570 != -1)
      dispatch_once(&qword_1002A4570, &stru_10023CFC8);
    v6 = qword_1002A4578;
    if (os_log_type_enabled((os_log_t)qword_1002A4578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, " fetch handles return error with %@, continuing anyway", buf, 0xCu);
    }
  }
  v27 = v5;
  v7 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v26 = v7;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "handles"));
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v31;
    v11 = kKTApplicationIdentifierIDS;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v31 != v10)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyApplication addApplicationPrefixForIdentifier:uri:](TransparencyApplication, "addApplicationPrefixForIdentifier:uri:", v11, v13));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v14));
        if (v15)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handles"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v13));

          if (v17)
          {
            if (qword_1002A4570 != -1)
              dispatch_once(&qword_1002A4570, &stru_10023D008);
            v18 = (void *)qword_1002A4578;
            if (os_log_type_enabled((os_log_t)qword_1002A4578, OS_LOG_TYPE_DEFAULT))
            {
              v19 = v18;
              v20 = objc_msgSend(v15, "succeed");
              *(_DWORD *)buf = 138412546;
              v35 = v13;
              v36 = 1024;
              v37 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " updating handle %@ with %d", buf, 0x12u);

            }
            objc_msgSend(v17, "setValid:", objc_msgSend(v15, "succeed") == (id)1);
            v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
            objc_msgSend(v17, "setValidationDate:", v21);

          }
        }
        else
        {
          if (qword_1002A4570 != -1)
            dispatch_once(&qword_1002A4570, &stru_10023CFE8);
          v22 = qword_1002A4578;
          if (os_log_type_enabled((os_log_t)qword_1002A4578, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v35 = v14;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " imHandle %@ not found", buf, 0xCu);
          }
        }

        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v9);
  }

  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v26;
  v25 = v26;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100032D74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_100032DA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_100032DD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4578;
  qword_1002A4578 = (uint64_t)v1;

}

void sub_1000336B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000336C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000336E4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100033A98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100033B98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100034900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, id *a15, id *a16, id *a17, id *a18, id *a19, id *a20,id *a21)
{
  id *v21;
  id *v22;
  id *v23;
  id *v24;
  id *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v21);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak(a19);
  objc_destroyWeak(a20);
  objc_destroyWeak(a21);
  objc_destroyWeak((id *)(v27 - 128));
  _Unwind_Resume(a1);
}

void sub_100034A24(uint64_t a1, int a2)
{
  id WeakRetained;
  NSObject *v4;
  void *v5;
  _DWORD v6[2];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D090);
  v4 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Octagon changed: %{BOOL}d", (uint8_t *)v6, 8u);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v5, "handleFlag:", CFSTR("OctagonTrustChanged"));

}

void sub_100034B24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100034B54(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D0D8);
  v5 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKKS view changed: %{public}@", (uint8_t *)&v9, 0xCu);
  }
  if (!v3 || objc_msgSend(v3, "isEqual:", CFSTR("Manatee")))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
    objc_msgSend(v6, "handleFlag:", CFSTR("ManateeViewChanged"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "logger"));
    +[KTContext updateReliabilityThreshold:](KTContext, "updateReliabilityThreshold:", v8);

  }
}

void sub_100034CB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100034CE8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D120);
  v5 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDS status: %{public}@", (uint8_t *)&v7, 0xCu);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v6, "handleFlag:", CFSTR("IDSStatusChanged"));

  objc_msgSend(WeakRetained, "newServerOptInFetch:", CFSTR("idsStatusObserver"));
}

void sub_100034E04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100034E34(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerPublicKeyFetch");

}

void sub_100034E60(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerEnsureIdentity");

}

void sub_100034E8C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerGetPrimaryAccount");

}

void sub_100034EB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "maybeCreateNewCKFetch");

}

void sub_100034EE4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerCheckKTAccountKey");

}

void sub_100034F10(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerCheckIDSRegistration");

}

void sub_100034F3C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerKTAccountKeySignature:", 0.0);

}

id sub_100034F6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "triggerCheckAccountIdentityChanged");
}

void sub_100034F74(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "maybeCreateServerOptInFetch");

}

void sub_100034FA0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "validatePendingURIsAndRequests");

}

void sub_100034FCC(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "manateeViewChangedScheduler"));
  objc_msgSend(v1, "trigger");

}

uint64_t sub_100035010(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachineQueue"));
    dispatch_sync(v3, &stru_10023D190);

  }
  return 1;
}

void sub_10003535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100035380(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id obj;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  _BYTE v78[128];
  _BYTE v79[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", kTransparencyAnalyticsVersion));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, kTransparencyAnalyticsVersionKey);

  v64 = WeakRetained;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "settings"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "getEnvironment")));
  v7 = v2;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, kTransparencyAnalyticsEnvironmentKey);

  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics analyticsApplications](TransparencyAnalytics, "analyticsApplications"));
  v62 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
  if (v62)
  {
    v61 = *(_QWORD *)v74;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v74 != v61)
          objc_enumerationMutation(obj);
        v63 = v8;
        v9 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * v8);
        v69 = 0u;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext analyticsSuccessNames](KTContext, "analyticsSuccessNames"));
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v70;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v70 != v13)
                objc_enumerationMutation(v10);
              v15 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext successMetricsKey:validationName:](KTContext, "successMetricsKey:validationName:", v9, *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)i)));
              if (v15)
              {
                v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "logger"));
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fuzzyTimeSinceLastSuccess:", v15));
                objc_msgSend(v7, "setObject:forKeyedSubscript:", v18, v15);

              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
          }
          while (v12);
        }

        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext analyticsSelfFlagNames](KTContext, "analyticsSelfFlagNames"));
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v66;
          do
          {
            for (j = 0; j != v21; j = (char *)j + 1)
            {
              if (*(_QWORD *)v66 != v22)
                objc_enumerationMutation(v19);
              v24 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext selfStatusFlagMetricsKey:name:](KTContext, "selfStatusFlagMetricsKey:name:", v9, *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)j)));
              if (v24)
              {
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "logger"));
                v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "numberPropertyForKey:", v24));
                objc_msgSend(v7, "setObject:forKeyedSubscript:", v27, v24);

              }
            }
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
          }
          while (v21);
        }

        v8 = v63 + 1;
      }
      while ((id)(v63 + 1) != v62);
      v62 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
    }
    while (v62);
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "smState"));
  v29 = v7;
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v28, CFSTR("smState"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "metricsRegistration_ktView"));
  if (objc_msgSend(v30, "count"))
    objc_msgSend(v29, "addEntriesFromDictionary:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "metricsRegistration_idsView"));
  if (objc_msgSend(v31, "count"))
    objc_msgSend(v29, "addEntriesFromDictionary:", v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "logger"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "fuzzyTimeSinceDateKey:", off_10029E518));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v34, CFSTR("idsRegPoke"));

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "logger"));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "fuzzyTimeSinceDateKey:", off_10029E520));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v37, CFSTR("idsRegValid"));

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "idsConfigBag"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v39, "ktDisable")));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v40, CFSTR("idsKTDisable"));

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "idsAccountTracker"));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "messagesStatus"));

  if (v43)
  {
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v43, "status") == (id)3));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v44, CFSTR("messages"));

  }
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[KTFillStatusOperation memoizedKTSelfStatusResult:](KTFillStatusOperation, "memoizedKTSelfStatusResult:", v45));

  if (v46 && (objc_msgSend(v46, "pendingStatusChanges") & 1) == 0)
  {
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v46, "optIn")));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v47, CFSTR("optIn"));

    if (objc_msgSend(v46, "everOptIn"))
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v46, "everOptIn")));
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v48, CFSTR("everOptIn"));

    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v46, "accountStatus")));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v49, CFSTR("accountStatus"));

    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v46, "selfStatus")));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v50, CFSTR("selfStatus"));

    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v46, "systemStatus")));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v51, CFSTR("systemStatus"));

  }
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "logger"));
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[KTContext hasReachedReliabilityThreshold:](KTContext, "hasReachedReliabilityThreshold:", v53)));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v54, CFSTR("wasReliable"));

  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "deps"));
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "logger"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[KTContext isCurrentlyReliable:](KTContext, "isCurrentlyReliable:", v56)));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v57, CFSTR("currentlyReliable"));

  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", ktReliabilityAnalyticsVersion));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v58, CFSTR("reliabilityVersion"));

  return v29;
}

void sub_100035C54(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  objc_msgSend(*(id *)(a1 + 32), "setCloudKitAccountInfo:", *(_QWORD *)(a1 + 40));
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D1D8);
  v2 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CK account changed to: %@", (uint8_t *)&v5, 0xCu);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v4, "_onqueueHandleFlag:", CFSTR("CKAccountChanged"));

}

void sub_100035D48(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100035EB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100036114(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003637C(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("CheckAccountSignatures"), 0, *(double *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "_onqueueHandlePendingFlagLater:", v3);

}

void sub_100036600(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[KTStateTransitionWatcher stripUnexpectedPathError:](KTStateTransitionWatcher, "stripUnexpectedPathError:", a2));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100036A5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100036A8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100036ABC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100036B94(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[6];

  objc_msgSend(*(id *)(a1 + 32), "setSelfValidationResult:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100036C18;
  v3[3] = &unk_10023D240;
  v3[5] = *(_QWORD *)(a1 + 48);
  v3[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, v3);

}

void sub_100036C18(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("RepairIDSFlag"), 2, *(double *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100036DC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_100036E9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "maybeCreateNewCKFetchOnQueue");
}

void sub_100036F98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000373B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000373E0(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003747C;
  block[3] = &unk_10023D398;
  v3 = a1[5];
  v4 = a1[4];
  v6 = v3;
  v7 = v4;
  v8 = a1[6];
  dispatch_async(v2, block);

}

void sub_10003747C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  _BYTE v31[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v2)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "shouldRetry") & 1) != 0)
    {
      v3 = *(void **)(a1 + 40);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckFetchScheduler"));
      objc_msgSend(v3, "inspectErrorForRetryAfter:trigger:", v4, v5);

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "reachabilityTracker"));
      LODWORD(v5) = objc_msgSend(v7, "isNetworkError:", v2);

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckFetchReasons"));
      v9 = v8;
      if ((_DWORD)v5)
      {
        objc_msgSend(v8, "addObject:", off_10029E5A0);

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "networkTimeout"));
        objc_msgSend(v10, "networkWithFeedback:", 1);

      }
      else
      {
        objc_msgSend(v8, "addObject:", off_10029E5A8);
      }

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckFetchReasons"));
      objc_msgSend(v22, "unionSet:", *(_QWORD *)(a1 + 48));

      if (objc_msgSend(*(id *)(a1 + 40), "isCloudKitManateeAcountAvailable"))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "specificUser"));

        if (v23)
        {
          objc_msgSend(*(id *)(a1 + 40), "setNewCKRequests:", 1);
LABEL_22:
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckFetchScheduler"));
          objc_msgSend(v24, "trigger");

        }
      }
    }
    else
    {
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023D370);
      v21 = qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v30 = v2;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Fetcher don't advice retry on error: %{public}@", buf, 0xCu);
      }
    }
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inflightCKFetchDependencies", 0));
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
          objc_msgSend(v17, "addOperation:", v16);

        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
      }
      while (v13);
    }

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inflightCKFetchDependencies"));
    objc_msgSend(v18, "removeAllObjects");

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "networkTimeout"));
    objc_msgSend(v20, "networkWithFeedback:", 0);

    if (objc_msgSend(*(id *)(a1 + 40), "newCKRequests"))
      goto LABEL_22;
  }
  objc_msgSend(*(id *)(a1 + 40), "setLastCKFetch:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "setCurrentCKFetch:", 0);

}

void sub_1000377CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100037A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100037A50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

uint64_t sub_100037A80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100037A90(uint64_t a1)
{

}

void sub_100037A98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "successfulCKFetchDependency"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 32), "setNewCKRequests:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckFetchReasons"));
  objc_msgSend(v5, "unionSet:", *(_QWORD *)(a1 + 40));

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckFetchScheduler"));
  objc_msgSend(v6, "trigger");

}

void sub_100037E3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100037F30(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("CheckKTAccountKey"), 2, 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100038104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003811C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  BOOL v6;
  id v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "dateByAddingTimeInterval:", *(double *)(a1 + 48)));
  if (!a3 || (v7 = v5, v6 = (char *)objc_msgSend(v5, "compare:", *(_QWORD *)(a1 + 32)) + 1 == 0, v5 = v7, v6))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

void sub_100038180(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("FetchIDMS"), 2, 0.1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_10003826C(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("FetchIDMS"), 2, *(double *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100038354(uint64_t a1)
{
  KTPendingFlag *v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("ValidateSelf"), 2, *(double *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v3, "handlePendingFlag:", v2);

  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D420);
  v4 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "scheduling server opt-in check due to self validate xpc activity", v5, 2u);
  }

}

void sub_100038428(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000385FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003862C(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("ValidateSelf"), 2, *(double *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100038714(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("FetchSelf"), 2, *(double *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100038928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100038940(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  KTBackgroundSystemValidationOperation *v5;
  void *v6;
  KTBackgroundSystemValidationOperation *v7;
  void *v8;
  KTBackgroundSystemValidationOperation *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];
  KTBackgroundSystemValidationOperation *v18;
  id v19;
  uint64_t v20;
  id v21;

  v2 = *(void **)(a1 + 32);
  v21 = 0;
  v3 = objc_msgSend(v2, "waitUntilReadyForRPCForOperation:fast:error:", CFSTR("background-validation"), 0, &v21);
  v4 = v21;
  if ((v3 & 1) != 0)
  {
    v5 = [KTBackgroundSystemValidationOperation alloc];
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v7 = -[KTBackgroundSystemValidationOperation initWithDependencies:](v5, "initWithDependencies:", v6);

    objc_msgSend(*(id *)(a1 + 32), "setLastDutyCycle:", v7);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100038B14;
    v17[3] = &unk_10023D4B0;
    v8 = *(void **)(a1 + 40);
    v17[4] = *(_QWORD *)(a1 + 32);
    v18 = v7;
    v19 = v8;
    v20 = *(_QWORD *)(a1 + 48);
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v17));
    objc_msgSend(v10, "addNullableDependency:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "reachabilityTracker"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "reachabilityDependency"));
    -[KTBackgroundSystemValidationOperation addNullableDependency:](v9, "addNullableDependency:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    objc_msgSend(v14, "addOperation:", v9);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    objc_msgSend(v15, "addOperation:", v10);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(KTBackgroundSystemValidationOperation **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;
  }

}

void sub_100038B14(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100038BB8;
  v5[3] = &unk_10023D488;
  v8 = *(id *)(a1 + 48);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  v9 = *(_QWORD *)(a1 + 56);
  dispatch_async(v2, v5);

}

void sub_100038BB8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "smDataStore"));
    objc_msgSend(v6, "setSettingsNumber:number:", off_10029E2F8, &off_10025BE78);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "smDataStore"));
    objc_msgSend(v8, "setSettingsData:data:", off_10029E318, 0);

  }
  objc_msgSend(*(id *)(a1 + 40), "triggerStatusUpdate:", kKTApplicationIdentifierIDS);
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D460);
  v9 = (void *)qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "opUUID"));
    v15 = 138543362;
    v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BackgroundSystemValidation: end %{public}@", (uint8_t *)&v15, 0xCu);

  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;

}

void sub_100038D88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100038F54(uint64_t a1)
{
  void *v2;
  KTPendingFlag *v3;

  v3 = -[KTPendingFlag initWithFlag:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:delayInSeconds:", CFSTR("StatusUpdate"), 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v2, "handlePendingFlag:", v3);

}

void sub_100039188(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000391B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000392B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000392C8(uint64_t a1)
{
  KTValidatePendingURIsOperation *v2;
  uint64_t v3;
  void *v4;
  KTValidatePendingURIsOperation *v5;
  KTValidatePendingRequestsOperation *v6;
  void *v7;
  KTValidatePendingRequestsOperation *v8;
  KTFillStatusOperation *v9;
  void *v10;
  KTFillStatusOperation *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  __int128 v24;

  v2 = [KTValidatePendingURIsOperation alloc];
  v3 = kKTApplicationIdentifierIDS;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v5 = -[KTValidatePendingURIsOperation initWithApplication:opId:dependencies:](v2, "initWithApplication:opId:dependencies:", v3, 0, v4);

  v6 = [KTValidatePendingRequestsOperation alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v8 = -[KTValidatePendingRequestsOperation initWithApplication:dependencies:opId:](v6, "initWithApplication:dependencies:opId:", v3, v7, 0);

  v9 = [KTFillStatusOperation alloc];
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v11 = -[KTFillStatusOperation initWithApplication:initialFill:dependencies:intendedState:errorState:](v9, "initWithApplication:initialFill:dependencies:intendedState:errorState:", v3, 1, v10, CFSTR("Ready"), CFSTR("Ready"));

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10003954C;
  v23[3] = &unk_10023D540;
  v24 = *(_OWORD *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v23));
  objc_msgSend(v12, "addNullableDependency:", v5);
  objc_msgSend(v12, "addNullableDependency:", v8);
  objc_msgSend(v12, "addNullableDependency:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "reachabilityTracker"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "reachabilityDependency"));
  -[KTValidatePendingURIsOperation addNullableDependency:](v5, "addNullableDependency:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "reachabilityTracker"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "reachabilityDependency"));
  -[KTValidatePendingRequestsOperation addNullableDependency:](v8, "addNullableDependency:", v18);

  -[KTFillStatusOperation addNullableDependency:](v11, "addNullableDependency:", v8);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v19, "addOperation:", v5);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v20, "addOperation:", v8);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v21, "addOperation:", v11);

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v22, "addOperation:", v12);

}

void sub_10003954C(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000395C0;
  v3[3] = &unk_10023D540;
  v4 = *(_OWORD *)(a1 + 32);
  dispatch_async(v2, v3);

}

void sub_1000395C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingValidationsComplete"));
  objc_msgSend(v2, "fulfill");

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_100039820(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100039834(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  KTCondition *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "logger"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v2, "setDateProperty:forKey:", v3, off_10029E520);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "successfulIDSRegistrationCheck"));
  objc_msgSend(v4, "fulfill");

  v5 = objc_alloc_init(KTCondition);
  objc_msgSend(WeakRetained, "setSuccessfulIDSRegistrationCheck:", v5);

}

void sub_100039BAC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100039E04(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  if (!v3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastValidateSelf"));

    if (v6)
    {
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastValidateSelf"));
      objc_msgSend(v7, "handleOperationResults:", *(_QWORD *)(a1 + 40));
      goto LABEL_5;
    }
    v3 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInternal, -319, CFSTR("no prior self validation operation")));
  }
  v7 = (id)objc_claimAutoreleasedReturnValue(+[KTStateTransitionWatcher stripUnexpectedPathError:](KTStateTransitionWatcher, "stripUnexpectedPathError:", v3));

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(v4 + 16))(v4, 0, 0, 0, v5);

LABEL_5:
}

void sub_100039F84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v8 = a5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("selfFetchResult"));

  if (v8)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("selfFetchError"));

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "diagnosticsJsonDictionary"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("diagnostics"));

}

void sub_10003A118(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  id v29;
  _BYTE v30[128];
  const __CFString *v31;
  void *v32;
  uint8_t buf[4];
  id v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v23 = v8;
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D5D0);
  v10 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v34 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fetchSelfVerificationInfoForApplication: %@", buf, 0xCu);
  }
  if (v9)
  {
    v31 = CFSTR("error");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
    v32 = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("fetchError"));

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uriToServerLoggableDatas"));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10003A438;
  v28[3] = &unk_10023D5F8;
  v15 = v13;
  v29 = v15;
  objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v28);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "syncedLoggableDatas"));
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v20)
          objc_enumerationMutation(v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "diagnosticsJsonDictionary"));
        objc_msgSend(v16, "addObject:", v22);

      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v19);
  }

  if (objc_msgSend(v15, "count"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v15, CFSTR("serverLoggableDatas"));
  if (objc_msgSend(v16, "count"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v16, CFSTR("syncedLoggableDatas"));

}

void sub_10003A408(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003A438(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const __CFString *v19;
  void *v20;
  _BYTE v21[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serverLoggableDatas", 0));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v12), "diagnosticsJsonDictionary"));
        objc_msgSend(v7, "addObject:", v13);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    }
    while (v10);
  }

  v19 = CFSTR("loggableData");
  v20 = v7;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v14, v5);

}

void sub_10003A91C(uint64_t a1)
{
  void *v2;
  dispatch_semaphore_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t PublicKey;
  uint64_t v29;
  const __CFString *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  const __CFString *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  dispatch_time_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  id v172;
  dispatch_semaphore_t dsema;
  void *v174;
  id obj;
  id obja;
  void *v177;
  uint64_t v178;
  _QWORD v179[4];
  id v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _QWORD v185[5];
  id v186;
  dispatch_semaphore_t v187;
  _BYTE v188[128];

  v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = dispatch_semaphore_create(0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "idsOperations"));
  v185[0] = _NSConcreteStackBlock;
  v185[1] = 3221225472;
  v185[2] = sub_10003BC24;
  v185[3] = &unk_10023D670;
  v185[4] = *(_QWORD *)(a1 + 32);
  v172 = v2;
  v186 = v172;
  dsema = v3;
  v187 = dsema;
  objc_msgSend(v5, "fetchKTRegistrationStatus:", v185);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v181 = 0u;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v178 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicKeyStore"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "applicationKeyStores"));

  obj = v9;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v181, v188, 16);
  v177 = v6;
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v182;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v182 != v12)
          objc_enumerationMutation(obj);
        v14 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "publicKeyStore"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "applicationKeyStores"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v14));

        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v18, "tltLogBeginningMs")));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, CFSTR("tltLogBeginMs"));

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v18, "patLogBeginningMs")));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v21, CFSTR("patLogBeginMs"));

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "vrfKey"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "vrfKey"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "kt_hexString"));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v24, CFSTR("vrfKey"));

        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v18, "inResetWindow")));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v25, CFSTR("inResetWindow"));

        v6 = v177;
        objc_msgSend(v177, "setObject:forKeyedSubscript:", v19, v14);

      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v181, v188, 16);
    }
    while (v11);
  }

  if (objc_msgSend(v6, "count"))
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v6, CFSTR("trees"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "pcsOperation"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "getCurrentKTPCSIdentity:error:", off_1002A39A8, 0));

  obja = v27;
  if (v27)
  {
    PublicKey = PCSIdentityGetPublicKey(objc_msgSend(v27, "identity"));
    v29 = objc_claimAutoreleasedReturnValue(PublicKey);
  }
  else
  {
    v29 = 0;
  }
  v171 = (void *)v29;
  if (v29)
    v30 = (const __CFString *)v29;
  else
    v30 = CFSTR("<no-key>");
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v30, CFSTR("accountKey"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "accountKeyService"));
  v33 = kKTApplicationIdentifierIDS;
  v34 = objc_msgSend(v32, "copyCachedPCSIdentityForApplication:", kKTApplicationIdentifierIDS);

  if (v34)
  {
    v35 = PCSIdentityGetPublicKey(objc_msgSend(v34, "identity"));
    v36 = objc_claimAutoreleasedReturnValue(v35);
  }
  else
  {
    v36 = 0;
  }
  v169 = (void *)v36;
  if (v36)
    v37 = (const __CFString *)v36;
  else
    v37 = CFSTR("<no-key>");
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v37, CFSTR("accountKeyCache"));
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "smDataStore"));
  v179[0] = _NSConcreteStackBlock;
  v179[1] = 3221225472;
  v179[2] = sub_10003BDB8;
  v179[3] = &unk_10023D698;
  v41 = v38;
  v180 = v41;
  objc_msgSend(v40, "fetchIDMSDeviceList:", v179);

  if (objc_msgSend(v41, "count"))
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v41, CFSTR("devices"));
  v42 = *(void **)(v178 + 32);
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "lastValidateSelf"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "validateSelfDiagnostics:", v43));

  v45 = *(void **)(v178 + 32);
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "lastValidateSelfOptIn"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "validateSelfDiagnostics:", v46));

  v170 = v34;
  v168 = v47;
  if (objc_msgSend(v44, "count") || objc_msgSend(v47, "count", v47))
  {
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v44, CFSTR("lastValidateSelf"), v168);
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v47, CFSTR("lastValidateSelfOptIn"));
  }
  else
  {
    v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "missingValidateSelfFallbackDiagnostics"));
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v167, CFSTR("missingValidateSelfFallback"));

  }
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "lockStateTracker"));
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "description"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v50, CFSTR("lockstate"));

  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "logger"));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "nfsReporting"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v53, CFSTR("nfs"));

  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "kvs"));
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[KTOptInManagerServer getOptInHistoryDiagnostic:store:](KTOptInManagerServer, "getOptInHistoryDiagnostic:store:", v33, v55));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v56, CFSTR("IDSKVSOptInHistory"));

  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "cloudRecords"));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "sysdiagnose"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v59, CFSTR("cloudRecords"));

  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "networkTimeout"));
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "sysdiagnose"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v62, CFSTR("networkTimeout"));

  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "launch"));
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "eventsByTime"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v64, CFSTR("launch"));

  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "idsConfigBag"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v66, "ktDisable")));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v67, CFSTR("idsKTDisable"));

  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "stateMonitor"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "ktStatus"));
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "diagnosticsJsonDictionary"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v71, CFSTR("status"));

  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[KTFillStatusOperation memoizedKTSelfStatusResult:](KTFillStatusOperation, "memoizedKTSelfStatusResult:", v72));
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "diagnosticsJsonDictionary"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v74, CFSTR("memoizedStatus"));

  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "idsAccountTracker"));
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "messagesStatus"));

  if (v77)
  {
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v77, "status") == (id)3));
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v78, CFSTR("messages"));

  }
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchIDMS"));

  if (v80)
  {
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchIDMS"));
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v82, CFSTR("fetchIDMS"));

  }
  v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastValidateSelf"));

  if (v83)
  {
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastValidateSelf"));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v85, CFSTR("validateSelf"));

  }
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastValidateSelfOptIn"));

  if (v86)
  {
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastValidateSelfOptIn"));
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v88, CFSTR("validateSelfOptIn"));

  }
  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastSignalIDS"));

  if (v89)
  {
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastSignalIDS"));
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v91, CFSTR("signalIDS"));

  }
  v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchIDSSelf"));

  if (v92)
  {
    v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchIDSSelf"));
    v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v94, CFSTR("fetchIDSSelf"));

  }
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchKTSelf"));

  if (v95)
  {
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastFetchKTSelf"));
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v97, CFSTR("fetchKTSelf"));

  }
  v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastRegistration"));

  if (v98)
  {
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastRegistration"));
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v100, CFSTR("lastRegistration"));

  }
  v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastForceSyncKVS"));

  if (v101)
  {
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastForceSyncKVS"));
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v103, CFSTR("forceSyncKVS"));

  }
  v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastCKFetch"));

  if (v104)
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastCKFetch"));
    v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v106, CFSTR("lastCKFetch"));

  }
  v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastPublicKeyRefresh"));

  if (v107)
  {
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastPublicKeyRefresh"));
    v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v109, CFSTR("publicKeyRefresh"));

  }
  v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastCheckIDSRegistration"));

  if (v110)
  {
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastCheckIDSRegistration"));
    v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v112, CFSTR("checkIDSRegistration"));

  }
  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastDutyCycle"));

  if (v113)
  {
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastDutyCycle"));
    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "description"));
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v115, CFSTR("lastDutyCycle"));

  }
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v79, CFSTR("ops"));
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v118 = (void *)objc_claimAutoreleasedReturnValue(+[KTFetchCloudStorageOperation lastCKFetchWithDeps:](_TtC13transparencyd28KTFetchCloudStorageOperation, "lastCKFetchWithDeps:", v117));
  v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v119, CFSTR("ck-fetch"));

  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastPush"));
  v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v121, CFSTR("push"));

  v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "lastSelfValidate"));
  v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v123, CFSTR("self-validate"));

  v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[KTFetchIDSSelfOperation lastSelfIDSFetch:](KTFetchIDSSelfOperation, "lastSelfIDSFetch:", v124));
  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v126, CFSTR("idsSelfFetch"));

  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "logger"));
  v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "datePropertyForKey:", off_10029E518));
  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v130, CFSTR("idsRegPoke"));

  v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "logger"));
  v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "datePropertyForKey:", off_10029E520));
  v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v134, CFSTR("idsRegValid"));

  v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "logger"));
  v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "datePropertyForKey:", off_10029E528));
  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v138, CFSTR("idsRegEnroll"));

  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v140 = (void *)objc_claimAutoreleasedReturnValue(+[KTBackgroundSystemValidationOperation lastDutyCycle:](KTBackgroundSystemValidationOperation, "lastDutyCycle:", v139));
  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v141, CFSTR("bkValidate"));

  v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v143 = (void *)objc_claimAutoreleasedReturnValue(+[KTBackgroundSystemValidationOperation lastDutyCycleSuccess:](KTBackgroundSystemValidationOperation, "lastDutyCycleSuccess:", v142));
  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "description"));
  objc_msgSend(v116, "setObject:forKeyedSubscript:", v144, CFSTR("bkSuccess"));

  objc_msgSend(v174, "setObject:forKeyedSubscript:", v116, CFSTR("lasts"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", *(_QWORD *)(v178 + 40), CFSTR("pendingFlags"));
  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "stateMachine"));
  v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "currentState"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v146, CFSTR("state"));

  v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "accountFirstSeenDate"));
  v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v147, "description"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v148, CFSTR("accountFirstSeen"));

  v149 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencySettings cfPrefsJson](TransparencySettings, "cfPrefsJson"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v149, CFSTR("cfprefs"));

  v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v151 = (void *)objc_claimAutoreleasedReturnValue(+[KTBackgroundSystemValidationOperation sysdiagnoseInfo:](KTBackgroundSystemValidationOperation, "sysdiagnoseInfo:", v150));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v151, CFSTR("backgroundOp"));

  v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "lockStateTracker"));
  v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "description"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v154, CFSTR("lockstate"));

  v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "reachabilityTracker"));
  if (objc_msgSend(v156, "currentReachability"))
    v157 = CFSTR("network");
  else
    v157 = CFSTR("no-network");
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v157, CFSTR("reachability"));

  v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "deps"));
  v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "cloudKitAccountTracker"));
  v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "description"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v160, CFSTR("cloudkitaccounttracker"));

  v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v178 + 32), "ckFetchScheduler"));
  v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "description"));
  objc_msgSend(v174, "setObject:forKeyedSubscript:", v162, CFSTR("fetcher"));

  v163 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(dsema, v163))
  {
    objc_msgSend(v174, "setObject:forKeyedSubscript:", CFSTR("timeout"), CFSTR("ids-kt"));
    v164 = v172;
  }
  else
  {
    v164 = v172;
    objc_msgSend(v174, "setObject:forKeyedSubscript:", v172, CFSTR("ids-kt"));
  }
  v165 = *(_QWORD *)(v178 + 48);
  v166 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencySettings jsonDictFromPlistDict:](TransparencySettings, "jsonDictFromPlistDict:", v174));
  (*(void (**)(uint64_t, void *))(v165 + 16))(v165, v166);

}

void sub_10003BC24(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ktApplicationToKTRegStatus"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003BCB4;
  v5[3] = &unk_10023D648;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10003BCB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = a3;
  v6 = a2;
  v13 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "registeredKTData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "idsKTData:", v8));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, CFSTR("reg"));

  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "unregisteredKTData"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsKTData:", v11));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, CFSTR("unreg"));

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v13, v6);
}

void sub_10003BDB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  const __CFString *v35;
  void *v36;

  v7 = a2;
  v28 = a3;
  v8 = a4;
  v9 = v8;
  if (v8)
  {
    v35 = CFSTR("error");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
    v36 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("fetch_error"));

  }
  v27 = v9;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v7;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v31;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v31 != v14)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("name"));

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "deviceID"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("deviceID"));

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "pushToken"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("pushToken"));

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "osVersion"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("osVersion"));

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "model"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, CFSTR("model"));

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "build"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, CFSTR("build"));

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "serial"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v24, CFSTR("serial"));

        v25 = *(void **)(a1 + 32);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "deviceID"));
        objc_msgSend(v25, "setObject:forKeyedSubscript:", v17, v26);

        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v13);
  }

}

void sub_10003C144(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stateMonitor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "statusFilled"));
  +[TransparencySettings uiBlockingNetworkTimeout](TransparencySettings, "uiBlockingNetworkTimeout");
  v6 = objc_msgSend(v4, "wait:", (uint64_t)(v5 * 1000000000.0));

  if (v6)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D6E0);
    v7 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v7;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deps"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stateMonitor"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ktStatus"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "simpleStatus"));
      v18 = 138412290;
      v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "returning partially filled status: %@", (uint8_t *)&v18, 0xCu);

    }
  }
  v14 = *(_QWORD *)(a1 + 40);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stateMonitor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "ktStatus"));
  (*(void (**)(uint64_t, void *, _QWORD))(v14 + 16))(v14, v17, 0);

}

void sub_10003C314(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003C548(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003C578(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003C660(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id obj;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "allValues"));
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "metricsTimeToCreate"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[SFAnalytics fuzzyNumber:](SFAnalytics, "fuzzyNumber:", v8));
        v10 = *(void **)(a1 + 32);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "application"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("KTReg%@"), v11));
        objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v12);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_10003CACC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ktApplicationToKTRegStatus"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003CB58;
  v6[3] = &unk_10023D648;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10003CB58(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v5 = *(void **)(a1 + 40);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "registeredKTData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsKTData:", v8));
  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("reg-%@"), v7));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v11);

  v12 = *(void **)(a1 + 40);
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "unregisteredKTData"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "idsKTData:", v16));
  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("unreg-%@"), v7));

  objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v15);
}

void sub_10003F050(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10003F0EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003F11C(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString **v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;

  v2 = objc_msgSend(*(id *)(a1 + 32), "checkAccountKeyChanged");
  if (v2 == 1)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D7F0);
    v12 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "PCS KT identity no change, all is good", (uint8_t *)&v20, 2u);
    }
  }
  else
  {
    if (v2 == 2)
    {
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023D7D0);
      v13 = (void *)qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(void **)(a1 + 32);
        v15 = v13;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "deps"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stateMonitor"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ktStatus"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "accountKey"));
        v20 = 138412290;
        v21 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PCS KT Identity no longer exists, ensure identity: %@", (uint8_t *)&v20, 0xCu);

      }
      v10 = *(void **)(a1 + 40);
      v11 = off_10024D308;
    }
    else
    {
      if (v2 != 3)
        return;
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023D7B0);
      v3 = (void *)qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(void **)(a1 + 32);
        v5 = v3;
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deps"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stateMonitor"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ktStatus"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "accountKey"));
        v20 = 138412290;
        v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PCS KT Identity changed, asking for new signatures: %@", (uint8_t *)&v20, 0xCu);

      }
      v10 = *(void **)(a1 + 40);
      v11 = off_10024D2D8;
    }
    objc_msgSend(v10, "setFlag:", *v11);
  }
}

void sub_10003F3BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003F3EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003F41C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003F44C(uint64_t a1, void *a2, double a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  double v16;
  __int16 v17;
  id v18;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "checkKTAccountKeyScheduler"));
    if (a3 == 0.0)
    {
      if (!v5)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "checkKTSignatureScheduler"));
        objc_msgSend(v12, "trigger");

        goto LABEL_11;
      }
      objc_msgSend(v7, "inspectErrorForRetryAfter:trigger:", v5, v8);
    }
    else
    {
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023D838);
      v9 = (void *)qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
      {
        v10 = v9;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
        v13 = 138412802;
        v14 = v11;
        v15 = 2048;
        v16 = a3;
        v17 = 2112;
        v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CKKS sync operation asked to retry later, scheduling %@ delay for %.1f seconds: %@", (uint8_t *)&v13, 0x20u);

      }
      objc_msgSend(v8, "waitUntil:", 1000000000 * (unint64_t)a3);
    }
    objc_msgSend(v8, "trigger");
LABEL_11:

  }
}

void sub_10003F5F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003F620(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  KTPendingFlag *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  KTPendingFlag *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  KTPendingFlag *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  void *v47;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lockStateTracker"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  v7 = objc_msgSend(v5, "isLockedError:", v6);

  if (v7)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D880);
    v8 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
    {
      LOWORD(v46) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device is locked, pending ensure identity on unlock", (uint8_t *)&v46, 2u);
    }
    v9 = [KTPendingFlag alloc];
    v10 = 3;
LABEL_13:
    v17 = -[KTPendingFlag initWithFlag:conditions:](v9, "initWithFlag:conditions:", CFSTR("EnsureIdentity"), v10);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "flagHandler"));
    objc_msgSend(v19, "handlePendingFlag:", v17);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stateMonitor"));
    objc_msgSend(v21, "setAccountStatus:", 3);

    objc_msgSend(v3, "setNextState:", CFSTR("RetryEnsureAccountIdentity"));
    goto LABEL_14;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "reachabilityTracker"));
  v14 = (void *)objc_opt_class(v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  LODWORD(v14) = objc_msgSend(v14, "isNetworkError:", v15);

  if ((_DWORD)v14)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D8A0);
    v16 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
    {
      LOWORD(v46) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Device have network issues, pending ensure identity on network", (uint8_t *)&v46, 2u);
    }
    v9 = [KTPendingFlag alloc];
    v10 = 2;
    goto LABEL_13;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));

  if (v22)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D8C0);
    v23 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v24 = *(void **)(a1 + 40);
      v25 = v23;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "error"));
      v46 = 138412290;
      v47 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Device have issues %@, triggering retry", (uint8_t *)&v46, 0xCu);

    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryEnsureIdentity"));
    objc_msgSend(v27, "trigger");

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "stateMonitor"));
    objc_msgSend(v29, "setAccountStatus:", 3);

    objc_msgSend(v3, "setNextState:", CFSTR("RetryEnsureAccountIdentity"));
    goto LABEL_14;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "identityCreated"))
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D8E0);
    v30 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(void **)(a1 + 40);
      v32 = v30;
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "identity"));
      v46 = 138412290;
      v47 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Identity created, make sure we check signatures: %@", (uint8_t *)&v46, 0xCu);

    }
    v34 = -[KTPendingFlag initWithFlag:conditions:]([KTPendingFlag alloc], "initWithFlag:conditions:", CFSTR("CheckAccountSignatures"), 0);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "flagHandler"));
    objc_msgSend(v36, "handlePendingFlag:", v34);

  }
  else
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D900);
    v37 = (void *)qword_1002A4588;
    if (!os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
      goto LABEL_32;
    v38 = *(void **)(a1 + 40);
    v34 = v37;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "identity"));
    v46 = 138412290;
    v47 = v35;
    _os_log_impl((void *)&_mh_execute_header, &v34->super, OS_LOG_TYPE_INFO, "Have identity, all good: %@", (uint8_t *)&v46, 0xCu);
  }

LABEL_32:
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));

  if (v39)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "stateMonitor"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
    objc_msgSend(v41, "setKTAccountKey:", v42);

  }
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "stateMonitor"));
  objc_msgSend(v44, "setAccountStatus:", 4);

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "intendedState"));
  objc_msgSend(v3, "setNextState:", v45);

LABEL_14:
}

void sub_10003FBE8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FC18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FC48(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FC78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FCA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FCD8(uint64_t a1, void *a2)
{
  id v3;
  KTCheckIDSRegistrationOperation *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  KTCheckIDSRegistrationOperation *v8;
  KTCheckIDSRegistrationOperation *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  KTCheckIDSRegistrationOperation *v18;

  v3 = a2;
  v4 = [KTCheckIDSRegistrationOperation alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v6 = kKTApplicationIdentifierIDS;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pcsOperation"));
  v8 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:](v4, "initWithDependencies:application:pcs:idsRegistrationInterface:", v5, v6, v7, *(_QWORD *)(a1 + 32));

  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_10003FE44;
  v16 = &unk_10023B3A8;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v8;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[KTResultOperation named:withBlock:](KTResultOperation, "named:withBlock:", CFSTR("ids-reg-finish"), &v13));
  objc_msgSend(v10, "addNullableDependency:", v9, v13, v14, v15, v16, v17);
  objc_msgSend(v3, "dependOnBeforeGroupFinished:", v10);

  objc_msgSend(*(id *)(a1 + 32), "setLastCheckIDSRegistration:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v11, "addOperation:", v9);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v12, "addOperation:", v10);

}

void sub_10003FE44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "logger"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(v3, "logResultForEvent:hardFailure:result:", CFSTR("CheckIDSRegistration"), 0, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v5)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D920);
    v6 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v7 = *(void **)(a1 + 40);
      v8 = v6;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "error"));
      v10 = 138543362;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CheckIDSRegistrationOperation failed, trying again: %{public}@", (uint8_t *)&v10, 0xCu);

    }
  }
}

void sub_10003FF9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10003FFCC(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _TtC13transparencyd11KTZoneSetup *v25;
  NSObject *v26;
  _TtC13transparencyd11KTZoneSetup *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _TtC13transparencyd11KTZoneSetup *v34;
  void *v35;
  id v36;
  _QWORD v37[4];
  _TtC13transparencyd11KTZoneSetup *v38;
  id v39;
  id v40;
  id v41;
  uint8_t buf[16];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "staticKeyStore"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dew"));
  objc_msgSend(v10, "coreDataInitialDelaySync");
  objc_msgSend(v7, "launchCloudSyncing:initialDelay:", v8);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ckdatabase"));
  if (v12)
  {
    v13 = (void *)v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "cloudRecords"));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "cloudRecords"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "cloudKitZones"));

      if (objc_msgSend(v18, "count"))
      {
        v34 = [_TtC13transparencyd11KTZoneSetup alloc];
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "ckdatabase"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v36 = v3;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "logger"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "dataStore"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "controller"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "backgroundContext"));
        v25 = -[KTZoneSetup initWithCkdatabase:analytics:context:zoneCreate:](v34, "initWithCkdatabase:analytics:context:zoneCreate:", v33, v20, v24, v18);

        v3 = v36;
      }
      else
      {
        v25 = 0;
      }
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_1000403C8;
      v37[3] = &unk_10023D9B0;
      objc_copyWeak(&v41, v4);
      v27 = v25;
      v38 = v27;
      v28 = v3;
      v39 = v28;
      v29 = v18;
      v40 = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v37));
      objc_msgSend(v28, "dependOnBeforeGroupFinished:", v30);
      objc_msgSend(v30, "addNullableDependency:", v27);
      if (v27)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
        objc_msgSend(v31, "addOperation:", v27);

      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
      objc_msgSend(v32, "addOperation:", v30);

      objc_destroyWeak(&v41);
      goto LABEL_15;
    }
  }
  else
  {

  }
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023D968);
  v26 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "zone setup have no cloudRecords", buf, 2u);
  }
  objc_msgSend(v3, "setNextState:", CFSTR("InitialSignRegistrationData"));
LABEL_15:

}

void sub_100040380(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100040398(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000403C8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  KTPendingFlag *v10;
  void *v11;
  _DWORD v12[2];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (objc_msgSend(*(id *)(a1 + 32), "initialFetch"))
  {
    objc_msgSend(*(id *)(a1 + 40), "setNextState:", CFSTR("ProcessIncomingInitial"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "launch"));
    objc_msgSend(v3, "setFirstLaunch:", 1);

  }
  else
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023D988);
    v4 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(void **)(a1 + 48);
      v6 = v4;
      v12[0] = 67109120;
      v12[1] = objc_msgSend(v5, "count");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "already done initial fetch: %d", (uint8_t *)v12, 8u);

    }
    objc_msgSend(*(id *)(a1 + 40), "setNextState:", CFSTR("InitialSignRegistrationData"));
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cloudRecords"));
  v9 = objc_msgSend(v8, "havePendingRecords");

  if (v9)
  {
    v10 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]([KTPendingFlag alloc], "initWithFlag:conditions:delayInSeconds:", CFSTR("CloudKitOutgoing"), 2, 5.0);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
    objc_msgSend(v11, "handlePendingFlag:", v10);

  }
}

void sub_100040588(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000405B8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckFetchScheduler"));
    objc_msgSend(v4, "inspectErrorForRetryAfter:trigger:", v5, v6);

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "intendedState"));
    objc_msgSend(v7, "setNextState:", v5);
  }

}

void sub_100040660(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  KTEnsureAccountIdentityOperation *v5;
  void *v6;
  void *v7;
  KTEnsureAccountIdentityOperation *v8;
  KTEnsureAccountIdentityOperation *v9;
  void *v10;
  KTEnsureAccountIdentityOperation *v11;
  KTEnrollmentRegistrationSignature *v12;
  void *v13;
  KTEnrollmentRegistrationSignature *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  id v22;
  KTFetchIDSSelfOperation *v23;
  void *v24;
  void *v25;
  KTFetchIDSSelfOperation *v26;
  KTFetchKTSelfOperation *v27;
  void *v28;
  KTFetchKTSelfOperation *v29;
  KTEnrollmentRegistrationSignature *v30;
  KTFetchKTSelfOperation *v31;
  KTValidateSelfOperation *v32;
  void *v33;
  KTValidateSelfOperation *v34;
  KTValidateSelfOperation *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  KTEnrollmentRegistrationSignature *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  _QWORD v50[4];
  id v51;
  KTValidateSelfOperation *v52;
  _QWORD v53[4];
  KTEnsureAccountIdentityOperation *v54;
  id v55;

  v47 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = kKTApplicationIdentifierIDS;
  v5 = [KTEnsureAccountIdentityOperation alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pcsOperation"));
  v8 = -[KTEnsureAccountIdentityOperation initWithDependencies:pcsOperation:](v5, "initWithDependencies:pcsOperation:", v6, v7);

  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_100040B80;
  v53[3] = &unk_10023B3A8;
  v9 = v8;
  v54 = v9;
  v55 = WeakRetained;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v53));
  v11 = v9;
  objc_msgSend(v10, "addNullableDependency:", v9);
  v12 = [KTEnrollmentRegistrationSignature alloc];
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v14 = -[KTEnrollmentRegistrationSignature initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:](v12, "initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:", v13, 0, CFSTR("Ready"), CFSTR("Ready"), WeakRetained, WeakRetained);

  v49 = v10;
  -[KTEnrollmentRegistrationSignature addNullableDependency:](v14, "addNullableDependency:", v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", off_10029E5B8));
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestSuccessfulCKFetchForManyReasons:", v15));

  v46 = (void *)v16;
  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dew"));
    objc_msgSend(v18, "selfValidateCloudKitTimeout");
    v20 = v19;

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[KTResultOperation operationWithBlock:](KTResultOperation, "operationWithBlock:", &stru_10023D9F8));
    v22 = objc_msgSend(v21, "timeout:", (unint64_t)(v20 * 1000000000.0));
    objc_msgSend(v21, "addNullableDependency:", v16);
  }
  else
  {
    v21 = 0;
  }
  v23 = [KTFetchIDSSelfOperation alloc];
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v25 = v4;
  v26 = -[KTFetchIDSSelfOperation initWithApplication:dependencies:intendedState:errorState:](v23, "initWithApplication:dependencies:intendedState:errorState:", v4, v24, CFSTR("Ready"), CFSTR("Ready"));

  -[KTFetchIDSSelfOperation addNullableDependency:](v26, "addNullableDependency:", v14);
  -[KTFetchIDSSelfOperation addNullableDependency:](v26, "addNullableDependency:", v21);
  v27 = [KTFetchKTSelfOperation alloc];
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v29 = -[KTFetchKTSelfOperation initWithApplication:dependencies:intendedState:errorState:](v27, "initWithApplication:dependencies:intendedState:errorState:", v25, v28, CFSTR("Ready"), CFSTR("Ready"));
  v30 = v14;
  v45 = v14;
  v31 = v29;

  -[KTFetchKTSelfOperation addNullableDependency:](v31, "addNullableDependency:", v30);
  -[KTFetchKTSelfOperation addNullableDependency:](v31, "addNullableDependency:", v21);
  -[KTResultOperation addSuccessDependency:](v31, "addSuccessDependency:", v26);
  v32 = [KTValidateSelfOperation alloc];
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v34 = -[KTValidateSelfOperation initWithApplication:dependencies:isOptInSelfValidation:](v32, "initWithApplication:dependencies:isOptInSelfValidation:", v25, v33, 0);

  -[KTValidateSelfOperation addNullableDependency:](v34, "addNullableDependency:", v21);
  -[KTResultOperation addSuccessDependency:](v34, "addSuccessDependency:", v31);
  -[KTResultOperation addSuccessDependency:](v34, "addSuccessDependency:", v26);
  objc_msgSend(WeakRetained, "setLastValidateSelf:", v34);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_100040BE8;
  v50[3] = &unk_10023B3A8;
  v51 = v47;
  v52 = v34;
  v35 = v34;
  v48 = v47;
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation named:withBlock:](NSBlockOperation, "named:withBlock:", CFSTR("validate-self-finish"), v50));
  objc_msgSend(v36, "addNullableDependency:", v35);
  objc_msgSend(v48, "dependOnBeforeGroupFinished:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v37, "addOperation:", v21);

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v38, "addOperation:", v11);

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v39, "addOperation:", v49);

  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v40, "addOperation:", v45);

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v41, "addOperation:", v31);

  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v42, "addOperation:", v26);

  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v43, "addOperation:", v35);

  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v44, "addOperation:", v36);

}

void sub_100040B80(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryEnsureIdentity"));
    objc_msgSend(v3, "trigger");

  }
}

void sub_100040BE8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "intendedState"));
  objc_msgSend(*(id *)(a1 + 32), "setNextState:", v3);

}

void sub_100040C4C(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _TtC13transparencyd28KTFetchCloudStorageOperation *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  KTCheckIDSRegistrationOperation *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  KTCheckIDSRegistrationOperation *v19;
  KTFetchIDSSelfOperation *v20;
  void *v21;
  KTFetchIDSSelfOperation *v22;
  KTFetchKTSelfOperation *v23;
  void *v24;
  KTFetchKTSelfOperation *v25;
  KTValidateSelfOperation *v26;
  void *v27;
  KTValidateSelfOperation *v28;
  KTValidateSelfOperation *v29;
  id v30;
  KTCheckIDSRegistrationOperation *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  _TtC13transparencyd28KTFetchCloudStorageOperation *v40;
  id v41;
  void *v42;
  _QWORD v43[4];
  KTValidateSelfOperation *v44;
  id v45;
  id v46;
  KTCheckIDSRegistrationOperation *v47;
  id v48;
  id v49;
  uint8_t buf[4];
  void *v51;

  v41 = a2;
  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "optInStates"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentTarget"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "optInStates"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "targetOptInStates"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v42));

  if (v8)
  {
    v9 = [_TtC13transparencyd28KTFetchCloudStorageOperation alloc];
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dataStore"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "controller"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "backgroundContext"));
    v40 = -[KTFetchCloudStorageOperation initWithDeps:initialFetch:userInteractive:reason:context:](v9, "initWithDeps:initialFetch:userInteractive:reason:context:", v10, 0, 1, CFSTR("optIn"), v14);

    v15 = [KTCheckIDSRegistrationOperation alloc];
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pcsOperation"));
    v18 = kKTApplicationIdentifierIDS;
    v19 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:](v15, "initWithDependencies:application:pcs:idsRegistrationInterface:", v16, kKTApplicationIdentifierIDS, v17, WeakRetained);

    v20 = [KTFetchIDSSelfOperation alloc];
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v22 = -[KTFetchIDSSelfOperation initWithApplication:dependencies:intendedState:errorState:](v20, "initWithApplication:dependencies:intendedState:errorState:", v18, v21, CFSTR("Ready"), CFSTR("Ready"));

    v23 = [KTFetchKTSelfOperation alloc];
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v25 = -[KTFetchKTSelfOperation initWithApplication:dependencies:intendedState:errorState:](v23, "initWithApplication:dependencies:intendedState:errorState:", v18, v24, CFSTR("Ready"), CFSTR("Ready"));

    v26 = [KTValidateSelfOperation alloc];
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v28 = -[KTValidateSelfOperation initWithApplication:dependencies:isOptInSelfValidation:](v26, "initWithApplication:dependencies:isOptInSelfValidation:", v18, v27, 1);

    -[KTResultOperation addSuccessDependency:](v25, "addSuccessDependency:", v22);
    -[KTValidateSelfOperation addNullableDependency:](v28, "addNullableDependency:", v40);
    -[KTResultOperation addSuccessDependency:](v28, "addSuccessDependency:", v25);
    -[KTResultOperation addSuccessDependency:](v28, "addSuccessDependency:", v22);
    objc_msgSend(WeakRetained, "setLastValidateSelfOptIn:", v28);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1000411C0;
    v43[3] = &unk_10023DA60;
    objc_copyWeak(&v49, v3);
    v29 = v28;
    v44 = v29;
    v45 = v8;
    v30 = v41;
    v46 = v30;
    v31 = v19;
    v47 = v31;
    v48 = v42;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[KTResultOperation operationWithBlock:](KTResultOperation, "operationWithBlock:", v43));
    objc_msgSend(v32, "addNullableDependency:", v29);
    objc_msgSend(v32, "addNullableDependency:", v31);
    objc_msgSend(v30, "dependOnBeforeGroupFinished:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v33, "addOperation:", v40);

    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v34, "addOperation:", v31);

    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v35, "addOperation:", v25);

    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v36, "addOperation:", v22);

    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v37, "addOperation:", v29);

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v38, "addOperation:", v32);

    objc_destroyWeak(&v49);
  }
  else
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DA18);
    v39 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v51 = v42;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Warning: no target application available: %@", buf, 0xCu);
    }
    v22 = (KTFetchIDSSelfOperation *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "optInStates"));
    -[KTFetchIDSSelfOperation setCurrentTarget:](v22, "setCurrentTarget:", 0);
  }

}

void sub_100041170(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100041190(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000411C0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  uint64_t v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v5);

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000413EC;
    v14[3] = &unk_10023D5B0;
    v6 = *(void **)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    objc_msgSend(v6, "handleOperationResults:", v14);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "optInStates"));
    objc_msgSend(v7, "completedCurrentTarget");

  }
  else if (objc_msgSend(*(id *)(a1 + 56), "checkIDSResult") == (id)1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "intendedState"));
    objc_msgSend(*(id *)(a1 + 48), "setNextState:", v8);

  }
  else
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DA38);
    v9 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138412290;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "IDS have not completed KT registration: %@", buf, 0xCu);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "error"));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "error"));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "optInStates"));
    objc_msgSend(v13, "completedCurrentTarget");

  }
}

id sub_1000413EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLoggableData:", a4);
}

void sub_1000413F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100041428(id a1, KTStateTransitionOperation *a2)
{
  KTStateTransitionOperation *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = a2;
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023DAC0);
  v3 = (void *)qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
  {
    v4 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[KTResultOperation error](v2, "error"));
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "processOutgoing completed up with: %@", (uint8_t *)&v7, 0xCu);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[KTStateTransitionOperation intendedState](v2, "intendedState"));
  -[KTStateTransitionOperation setNextState:](v2, "setNextState:", v6);

}

void sub_10004153C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004156C(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "publicKeyStore"));
  objc_msgSend(v7, "clearForEnvironmentChange");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[KTResultOperation named:withBlock:](KTResultOperation, "named:withBlock:", CFSTR("reset-configure-client"), &stru_10023DAE0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dew"));
  objc_msgSend(v10, "resetEnvLogClientNetworkTimeout");
  v12 = objc_msgSend(v8, "timeout:", (unint64_t)(v11 * 1000000000.0));

  objc_msgSend(v3, "dependOnBeforeGroupFinished:", v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "logClient"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10004170C;
  v16[3] = &unk_10023DB28;
  objc_copyWeak(&v18, v4);
  v15 = v8;
  v17 = v15;
  objc_msgSend(v14, "configure:", v16);

  objc_destroyWeak(&v18);
}

void sub_1000416F4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004170C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023DB00);
  v5 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "environment switch log client: %{public}@", (uint8_t *)&v7, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  objc_msgSend(v6, "addOperation:", *(_QWORD *)(a1 + 32));

}

void sub_10004181C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004184C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint8_t buf[4];
  id v29;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountKeyService"));
  objc_msgSend(v6, "clearCachedPCSIdentities");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountStateHolder"));
  objc_msgSend(v8, "clearAccountMetadata");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "smDataStore"));
  v27 = 0;
  v11 = objc_msgSend(v10, "clearDataStore:", &v27);
  v12 = v27;

  if ((v11 & 1) == 0)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DB48);
    v13 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "dataStore clearDataStore failed: %@", buf, 0xCu);
    }
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dataStore"));
  v26 = 0;
  v16 = objc_msgSend(v15, "clearState:", &v26);
  v17 = v26;

  if ((v16 & 1) == 0)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DB68);
    v18 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "dataStore clearState failed: %@", buf, 0xCu);
    }
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "cloudRecords"));
  objc_msgSend(v20, "clearDataStore:", 0);

  objc_msgSend(*(id *)(a1 + 32), "resetLastAccountOperations");
  objc_msgSend(*(id *)(a1 + 32), "clearAccountMetrics");
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stateMonitor"));
  objc_msgSend(v22, "reset");

  objc_msgSend(*(id *)(a1 + 32), "setSpecificUser:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPcsOperation:", 0);
  objc_msgSend(*(id *)(a1 + 32), "clearAllFollowups:", CFSTR("reset-local-state"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "stateMonitor"));
  objc_msgSend(v24, "setPendingChanges:", 1);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "intendedState"));
  objc_msgSend(v4, "setNextState:", v25);

}

void sub_100041B64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100041B94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100041BC4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudRecords"));
  objc_msgSend(v6, "clearLocalCloudState");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cloudRecords"));
  objc_msgSend(v8, "clearDataStore:", 1);

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "intendedState"));
  objc_msgSend(v4, "setNextState:", v9);

}

id sub_100041CE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueueMaybeCreateNewServerOptInFetch");
}

void sub_100041E64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000420EC(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100042160;
  block[3] = &unk_10023A390;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

id sub_100042160(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCurrentServerOptInFetch:", 0);
}

void sub_100042398(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000423C8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverOptInFetchReasons"));
  objc_msgSend(v2, "unionSet:", *(_QWORD *)(a1 + 40));

  if (*(double *)(a1 + 48) > 0.0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverOptInScheduler"));
    objc_msgSend(v3, "waitUntil:", (unint64_t)(*(double *)(a1 + 48) * 1000000000.0));

  }
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverOptInScheduler"));
  objc_msgSend(v4, "trigger");

}

void sub_100042500(id a1, KTBAAKey *a2)
{
  KTBAAKey *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));

  if (v3)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DC30);
    v4 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v5 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error fetching BAA cert from triggerBAACertFetcher: %@", (uint8_t *)&v7, 0xCu);

    }
  }

}

void sub_100042608(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100042694(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  id v16;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DC50);
    v7 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error getting opt in state to post a followup CFU after receiving IDS disable notification: %@", buf, 0xCu);
    }
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "followup"));
  v10 = kKTApplicationIdentifierIDS;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "idsConfigBag"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "kbInfoArticleUrl"));
  objc_msgSend(v9, "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:", v10, 6, v11, -390, v5, v14, 0, 0);

}

void sub_100042838(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000428F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableArray);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        if (*(_BYTE *)(a1 + 40))
        {
          v10 = objc_alloc((Class)KTVerifierResult);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uri"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "application"));
          v13 = objc_msgSend(v10, "initWithUri:application:", v11, v12);

          objc_msgSend(v13, "setUiStatus:", 3);
        }
        else
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dataStore"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uri"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "application"));
          v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "verifierResultForPeer:application:", v16, v17));

        }
        objc_msgSend(v4, "addObject:", v13);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v6);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "idsOperations"));
  objc_msgSend(v19, "peerVerificationFinishedWithResults:", v4);

}

void sub_100042BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100042BFC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString **v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  const __CFString *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  __CFString **v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  NSObject *v63;
  void *v64;
  void *v65;
  unsigned int v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  unsigned __int8 v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  KTActualSpecificUser *v81;
  void *v82;
  id v83;
  uint64_t v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  unsigned __int8 v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  NSObject *v95;
  void *v96;
  void *v97;
  NSObject *v98;
  void *v99;
  void *v100;
  void *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  NSObject *v110;
  __CFString **v111;
  NSObject *v112;
  void *v113;
  void *v114;
  NSObject *v115;
  NSObject *v116;
  void *v117;
  void *v118;
  char *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  _QWORD v126[5];
  _QWORD v127[4];
  char v128;
  _QWORD v129[5];
  _QWORD v130[4];
  id v131;
  id v132;
  char v133;
  id v134;
  id v135;
  id v136;
  uint8_t buf[4];
  _BYTE v138[18];
  __int16 v139;
  void *v140;
  __int16 v141;
  id v142;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!_os_feature_enabled_impl("Transparency", "KTEnableKillSwitch"))
    goto LABEL_10;
  if (!objc_msgSend(WeakRetained, "isKTDisabled"))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stateMonitor"));
    objc_msgSend(v12, "setSystemStatus:", 0);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stateMonitor"));
    objc_msgSend(v14, "setAccountStatus:", 4);

    objc_msgSend(WeakRetained, "updateKTDisabledForIDS:", 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "followup"));
    v136 = 0;
    objc_msgSend(v16, "clearFollowupsByType:type:error:", kKTApplicationIdentifierIDS, 6, &v136);
    v17 = v136;

    if (v17)
    {
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023DCC0);
      v18 = qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v138 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error clearing IDS disable CFU %@", buf, 0xCu);
      }
    }

LABEL_10:
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "initializedComplete"));
    objc_msgSend(v19, "fulfill");

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "lockStateTracker"));
    v22 = objc_msgSend(v21, "hasBeenUnlocked");

    if ((v22 & 1) == 0)
    {
      v10 = off_10024D280;
      goto LABEL_25;
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "accountOperations"));
    v135 = 0;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "primaryAccount:", &v135));
    v26 = v135;

    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DCE0);
    v27 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
    {
      if (v25)
        v28 = CFSTR("yes");
      else
        v28 = CFSTR("no");
      v29 = v27;
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "aa_personID"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "aa_altDSID"));
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)v138 = v28;
      *(_WORD *)&v138[8] = 2112;
      *(_QWORD *)&v138[10] = v30;
      v139 = 2112;
      v140 = v31;
      v141 = 2112;
      v142 = v26;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "TransparencyAccount Primary account found %{public}@ %@ %@: %@", buf, 0x2Au);

    }
    if (v25)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "accountOperations"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsAccountTracker"));
      v134 = v26;
      v36 = (char *)objc_msgSend(v33, "ktAccountStatus:idsAccountsTracker:error:", v25, v35, &v134);
      v37 = v134;

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "stateMonitor"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "idsAccountTracker"));
      objc_msgSend(v39, "setIDSAccountStatus:", objc_msgSend(v41, "idsAccountType"));

      if ((unint64_t)(v36 - 1) < 2)
      {
        if (qword_1002A4580 != -1)
          dispatch_once(&qword_1002A4580, &stru_10023DD60);
        v42 = qword_1002A4588;
        if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v138 = (_DWORD)v36;
          *(_WORD *)&v138[4] = 2112;
          *(_QWORD *)&v138[6] = v37;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "TransparencyAccount no account: %d: %@", buf, 0x12u);
        }
        goto LABEL_33;
      }
      if (v36 == (char *)3)
      {
LABEL_33:
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "stateMonitor"));
        objc_msgSend(v48, "setAccountStatus:", 5);

        objc_msgSend(v3, "setNextState:", CFSTR("NoAccount"));
LABEL_121:
        v26 = v37;
LABEL_122:

        goto LABEL_123;
      }
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "aa_altDSID"));
      if (!v59)
      {
        if (qword_1002A4580 != -1)
          dispatch_once(&qword_1002A4580, &stru_10023DD80);
        v98 = qword_1002A4588;
        if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "TransparencyAccount no altDSID", buf, 2u);
        }
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "stateMonitor"));
        objc_msgSend(v100, "setAccountStatus:", 5);

        objc_msgSend(v3, "setNextState:", CFSTR("NoAccount"));
        goto LABEL_120;
      }
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "settings"));
      v62 = objc_msgSend(v61, "getEnvironment");

      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023DDA0);
      v63 = qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v138 = (_DWORD)v62;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Environment at start time: %d", buf, 8u);
      }
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "settings"));
      v66 = objc_msgSend(v65, "systemFailureFeatureEnabled");

      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "accountStateHolder"));
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "loadAccountMetadata"));

      if (v69
        && (v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "altDSID")), v70, v70))
      {
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "altDSID"));
        v72 = objc_msgSend(v71, "isEqual:", v59);

        if ((v72 & 1) == 0)
        {
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DDE8);
          v110 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "Account have switch since last load, start over", buf, 2u);
          }
          v111 = off_10024D1F8;
LABEL_99:
          objc_msgSend(v3, "setNextState:", *v111);
LABEL_119:

LABEL_120:
          goto LABEL_121;
        }
        if (objc_msgSend(v69, "environment") != v62)
        {
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DE08);
          v115 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "Environment switched since last load, starting over", buf, 2u);
          }
          objc_msgSend(v3, "setNextState:", CFSTR("EnvironmentSwitch"));
          v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "accountStateHolder"));
          v108 = v107;
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472;
          v129[2] = sub_1000440BC;
          v129[3] = &unk_10023DE28;
          v129[4] = v62;
          v109 = v129;
          goto LABEL_105;
        }
        if (v66 != objc_msgSend(v69, "hasBeenEnabled"))
        {
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DE48);
          v73 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "Feature state changed", buf, 2u);
          }
          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "accountStateHolder"));
          v127[0] = _NSConcreteStackBlock;
          v127[1] = 3221225472;
          v127[2] = sub_10004411C;
          v127[3] = &unk_10023DE68;
          v128 = v66;
          objc_msgSend(v75, "persistAccountChanges:", v127);

          if ((v66 & 1) == 0)
            objc_msgSend(WeakRetained, "clearAllFollowups:", CFSTR("clear all CFU since feature is now off"));
        }
      }
      else
      {
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "accountStateHolder"));
        v130[0] = _NSConcreteStackBlock;
        v130[1] = 3221225472;
        v130[2] = sub_100044014;
        v130[3] = &unk_10023DDC8;
        v133 = v66;
        v131 = v59;
        v132 = v62;
        objc_msgSend(v77, "persistAccountChanges:", v130);

      }
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "logClient"));
      v80 = objc_msgSend(v79, "currentEnvironment");

      if (v80 == v62)
      {
        objc_msgSend(WeakRetained, "addEvent:", CFSTR("AccountPresent"));
        v81 = -[KTActualSpecificUser initWithACAccount:]([KTActualSpecificUser alloc], "initWithACAccount:", v25);
        objc_msgSend(WeakRetained, "setSpecificUser:", v81);

        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v83 = objc_msgSend(objc_msgSend(v82, "pcsOperationsClass"), "alloc");
        v84 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "specificUser"));
        v85 = objc_msgSend(v83, "initWithSpecificUser:", v84);
        objc_msgSend(WeakRetained, "setPcsOperation:", v85);

        objc_msgSend(WeakRetained, "newServerOptInFetch:", CFSTR("accountPresent"));
        v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "octagonOperations"));
        LOBYTE(v84) = objc_msgSend(v87, "getCachedOctagonStatus");

        if ((v84 & 1) != 0)
        {
          objc_msgSend(WeakRetained, "addEvent:", CFSTR("OctagonReady"));
          v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
          v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "octagonOperations"));
          v125 = 0;
          v90 = objc_msgSend(v89, "ckksViewReady:error:", CFSTR("Manatee"), &v125);
          v124 = v125;

          if ((v90 & 1) != 0)
          {
            objc_msgSend(WeakRetained, "addEvent:", CFSTR("CKKSManateeReady"));
            v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountFirstSeenDate"));
            if (!v91)
            {
              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
              v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "logger"));
              v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
              objc_msgSend(v93, "setDateProperty:forKey:", v94, off_10029E530);

            }
            if (qword_1002A4580 != -1)
              dispatch_once(&qword_1002A4580, &stru_10023DEE8);
            v95 = qword_1002A4588;
            if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "initializingOperation: Checking for a cached BAA certificate and triggering a network fetch if cert is missing or expired.", buf, 2u);
            }
            v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
            v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "certFetcher"));
            objc_msgSend(v97, "getDeviceCertWithForcedFetch:completionHandler:", 0, &stru_10023DF08);

            objc_msgSend(v3, "setNextState:", CFSTR("KTStateFixups"));
            goto LABEL_118;
          }
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DEC8);
          v116 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v138 = v124;
            _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "TransparencyAccount waiting for Manatee view: %@", buf, 0xCu);
          }
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
          v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "octagonOperations"));
          v119 = (char *)objc_msgSend(v118, "ckksGetKnownBadState:", CFSTR("Manatee"));

          if ((unint64_t)v119 < 2)
          {
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
            v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "stateMonitor"));
            v122 = v121;
            v123 = 3;
          }
          else if ((unint64_t)(v119 - 2) >= 2)
          {
            if (v119 != (char *)4)
            {
LABEL_117:
              objc_msgSend(v3, "setNextState:", CFSTR("WaitForCKKS"));
LABEL_118:

              goto LABEL_119;
            }
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
            v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "stateMonitor"));
            v122 = v121;
            v123 = 5;
          }
          else
          {
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
            v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "stateMonitor"));
            v122 = v121;
            v123 = 2;
          }
          objc_msgSend(v121, "setAccountStatus:", v123);

          goto LABEL_117;
        }
        if (qword_1002A4580 != -1)
          dispatch_once(&qword_1002A4580, &stru_10023DEA8);
        v112 = qword_1002A4588;
        if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "TransparencyAccount waiting for Octagon", buf, 2u);
        }
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "stateMonitor"));
        objc_msgSend(v114, "setAccountStatus:", 2);

        v111 = off_10024D180;
        goto LABEL_99;
      }
      if (qword_1002A4580 != -1)
        dispatch_once(&qword_1002A4580, &stru_10023DE88);
      v101 = (void *)qword_1002A4588;
      if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
      {
        v102 = v101;
        v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "logClient"));
        v105 = objc_msgSend(v104, "currentEnvironment");
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v138 = v105;
        *(_WORD *)&v138[8] = 2048;
        *(_QWORD *)&v138[10] = v62;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "Environment for logClient (%lu) != current environment (%lu). Clearing state & reconfiguring", buf, 0x16u);

      }
      objc_msgSend(v3, "setNextState:", CFSTR("EnvironmentSwitch"));
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "accountStateHolder"));
      v108 = v107;
      v126[0] = _NSConcreteStackBlock;
      v126[1] = 3221225472;
      v126[2] = sub_10004417C;
      v126[3] = &unk_10023DE28;
      v126[4] = v62;
      v109 = v126;
LABEL_105:
      objc_msgSend(v107, "persistAccountChanges:", v109);

      goto LABEL_119;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "userInfo"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

    if (!+[TransparencyAccount isAccountsErrorRetryable:](TransparencyAccount, "isAccountsErrorRetryable:", v26))
    {
      if (!v44)
        goto LABEL_39;
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "domain"));
      if (!objc_msgSend(v46, "isEqual:", ACErrorDomain))
        goto LABEL_38;
      v49 = objc_msgSend(v44, "code");

      if (v49 != (id)10002)
      {
LABEL_39:
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "stateMonitor"));
        objc_msgSend(v51, "setAccountStatus:", 5);

        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "accountStateHolder"));
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "loadAccountMetadata"));

        if (v54
          && (v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "altDSID")), v55, v55))
        {
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DD20);
          v56 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "User seems to have logged out, cleaning state", buf, 2u);
          }
          v57 = off_10024D1F8;
        }
        else
        {
          if (qword_1002A4580 != -1)
            dispatch_once(&qword_1002A4580, &stru_10023DD40);
          v58 = qword_1002A4588;
          if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Still no account", buf, 2u);
          }
          v57 = off_10024D128;
        }
        objc_msgSend(v3, "setNextState:", *v57);

        goto LABEL_122;
      }
    }
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DD00);
    v45 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Failed to get primary account due to XPC issue; triggering retry",
        buf,
        2u);
    }
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "retryGetPrimaryAccount"));
    objc_msgSend(v46, "trigger");
LABEL_38:

    goto LABEL_39;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
  objc_msgSend(v5, "noteEventNamed:", CFSTR("ktDisabledEvent"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stateMonitor"));
  objc_msgSend(v7, "setSystemStatus:", 5);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stateMonitor"));
  objc_msgSend(v9, "setAccountStatus:", 6);

  objc_msgSend(WeakRetained, "postKTDisabledFollowup");
  objc_msgSend(WeakRetained, "updateKTDisabledForIDS:", 1);
  v10 = off_10024D288;
LABEL_25:
  objc_msgSend(v3, "setNextState:", *v10);
LABEL_123:

}

void sub_100043E94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043EC4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043EF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043F24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043F54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043F84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043FB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100043FE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_100044014(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setAltDSID:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "setHasBeenEnabled:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(v3, "setEnvironment:", *(_QWORD *)(a1 + 40));
  return v3;
}

void sub_10004405C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004408C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_1000440BC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setEnvironment:", *(_QWORD *)(a1 + 32));
  return v3;
}

void sub_1000440EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_10004411C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setHasBeenEnabled:", *(unsigned __int8 *)(a1 + 32));
  return v3;
}

void sub_10004414C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_10004417C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setEnvironment:", *(_QWORD *)(a1 + 32));
  return v3;
}

void sub_1000441AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000441DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004420C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004423C(id a1, KTBAAKey *a2)
{
  KTBAAKey *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));

  if (v3)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023DF28);
    v4 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      v5 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[KTBAAKey error](v2, "error"));
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error fetching BAA cert from KTStateInitializing: %@", (uint8_t *)&v7, 0xCu);

    }
  }

}

void sub_100044344(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100044444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100044460(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  id v21;
  uint8_t buf[4];
  const __CFString *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountOperations"));
  v21 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "primaryAccount:", &v21));
  v8 = v21;

  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023DF70);
  v9 = (void *)qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
      v10 = CFSTR("yes");
    else
      v10 = CFSTR("no");
    v11 = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_personID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_altDSID"));
    *(_DWORD *)buf = 138544130;
    v23 = v10;
    v24 = 2112;
    v25 = v12;
    v26 = 2112;
    v27 = v13;
    v28 = 2112;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TransparencyAccount Primary account found %{public}@ %@ %@: %@", buf, 0x2Au);

  }
  if (v7)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "accountStateHolder"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "loadAccountMetadata"));

    if (v16
      && (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "altDSID")),
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "aa_altDSID")),
          v19 = objc_msgSend(v17, "isEqual:", v18),
          v18,
          v17,
          (v19 & 1) != 0))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "intendedState"));
      objc_msgSend(v3, "setNextState:", v20);

    }
    else
    {
      objc_msgSend(v3, "setNextState:", CFSTR("ResetLocalState"));
    }

  }
  else
  {
    objc_msgSend(v3, "setNextState:", CFSTR("ResetLocalState"));
  }

}

void sub_1000446D0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

intptr_t sub_1000449D4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "newServerOptInFetch:", CFSTR("optOutWhenNotEligible"));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100044FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100044FE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100045014(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100045044(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "optInStates"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "targetOptInStates"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "optInStates"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "targetOptInStates"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, *(_QWORD *)(a1 + 40));

  }
}

void sub_1000452DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004530C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint8_t v7[16];

  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023E040);
  v2 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "IDS registration timeout hit", v7, 2u);
  }
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));
  dispatch_source_cancel(v3);

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkIDSTimer"));
  dispatch_source_cancel(v4);

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kTransparencyErrorIDSRegistrationTimeout, -391, 0));
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

}

void sub_100045408(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004554C(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v6 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "timer"));
  dispatch_source_cancel(v4);

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkIDSTimer"));
  dispatch_source_cancel(v5);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100045718(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100045788;
  v2[3] = &unk_10023E088;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "checkIDSHealth:", v2);

}

void sub_100045788(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (objc_msgSend(a2, "isEqualToString:", CFSTR("hsa2upsell")))
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023E060);
    v3 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
    {
      v4 = *(void **)(a1 + 32);
      v5 = v3;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deps"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "idsOperations"));
      objc_msgSend(v7, "sleepTimeBetweenIDSCheckups");
      v9 = 134217984;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_waitForIDSRegistration, unregistered with IDS, will try again in %f seconds", (uint8_t *)&v9, 0xCu);

    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
}

void sub_1000458D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100045B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100045B28(uint64_t a1, void *a2)
{
  id WeakRetained;
  KTCheckIDSRegistrationOperation *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  KTCheckIDSRegistrationOperation *v8;
  id v9;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = [KTCheckIDSRegistrationOperation alloc];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v6 = kKTApplicationIdentifierIDS;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pcsOperation"));
    v8 = -[KTCheckIDSRegistrationOperation initWithDependencies:application:pcs:idsRegistrationInterface:](v4, "initWithDependencies:application:pcs:idsRegistrationInterface:", v5, v6, v7, *(_QWORD *)(a1 + 32));

    objc_msgSend(v9, "runBeforeGroupFinished:", v8);
  }

}

void sub_100045BEC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint8_t buf[4];
  id v10;

  v3 = a2;
  if (v3)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023E0D0);
    v4 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to check self validation: %@", buf, 0xCu);
    }
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("timeout: %@"), v3));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reason"));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void sub_100045D28(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000462A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_1000462D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setShouldPokeIDSUponSigning:", 0);
}

void sub_1000462DC(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  KTCondition *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  unsigned int v28;
  _QWORD v29[5];
  _QWORD block[5];
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint8_t buf[4];
  unsigned int v37;

  v10 = a2;
  v11 = a5;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  if (a4)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stateMonitor"));
    objc_msgSend(v13, "setAccountStatus:", 3);

  }
  v14 = objc_alloc_init((Class)TransparencyIDSRegistrationResponse);
  if (a3)
  {
    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023E138);
    v15 = qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "New keys inserted. Waiting while we try to make signatures.", buf, 2u);
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smState"));
    objc_msgSend(v16, "setNumberProperty:forKey:", v17, CFSTR("stateAtSigFetchStart"));

    v18 = objc_alloc_init(KTCondition);
    objc_msgSend(*(id *)(a1 + 32), "setSignaturesComplete:", v18);

    objc_msgSend(*(id *)(a1 + 32), "triggerKTAccountKeySignature:", 0.0);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signaturesComplete"));
    objc_msgSend(v19, "wait:", 5000000000);

    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signatureQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000466AC;
    block[3] = &unk_10023E1C8;
    v21 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v22 = v21;
    v23 = *(_QWORD *)(a1 + 56);
    v31 = v22;
    v35 = v23;
    v32 = v14;
    v34 = *(id *)(a1 + 48);
    v33 = v11;
    dispatch_async(v20, block);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "triggerStatusUpdate:", kKTApplicationIdentifierIDS);
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signatureQueue"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100046994;
    v29[3] = &unk_10023A390;
    v29[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v24, v29);

    if (qword_1002A4580 != -1)
      dispatch_once(&qword_1002A4580, &stru_10023E1E8);
    v25 = (void *)qword_1002A4588;
    if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v27 = v25;
      v28 = objc_msgSend(v26, "count");
      *(_DWORD *)buf = 67109120;
      v37 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Returning existing signatures: %d. insertedKeys [0]", buf, 8u);

    }
    objc_msgSend(v14, "setRegistrationData:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10004667C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000466AC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  _QWORD v13[5];
  uint8_t buf[4];
  unsigned int v15;

  objc_msgSend(*(id *)(a1 + 32), "setShouldPokeIDSUponSigning:", 1);
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023E158);
  v2 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to fetch signatures again.", buf, 2u);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "requests"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allKeys"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "smDataStore"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100046928;
  v13[3] = &unk_10023E180;
  v13[4] = *(_QWORD *)(a1 + 72);
  objc_msgSend(v6, "fetchDeviceSignature:complete:", v4, v13);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smState"));
  objc_msgSend(v7, "setNumberProperty:forKey:", v8, CFSTR("stateAtSigFetchEnd"));

  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023E1A0);
  v9 = (void *)qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v11 = v9;
    v12 = objc_msgSend(v10, "count");
    *(_DWORD *)buf = 67109120;
    v15 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Returning existing signatures: %d. insertedKeys [1]", buf, 8u);

  }
  objc_msgSend(*(id *)(a1 + 48), "setRegistrationData:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000468F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100046928(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = objc_msgSend(a2, "mutableCopy");
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_100046964(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

id sub_100046994(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setShouldPokeIDSUponSigning:", 1);
}

void sub_1000469A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100046A7C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = objc_alloc_init((Class)TransparencyIDSRegistrationResponse);
    objc_msgSend(v3, "setRegistrationData:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id sub_100046BFC(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    return objc_msgSend(*(id *)(a1 + 32), "transparencyDumpKTRegistrationData:", *(_QWORD *)(a1 + 40));
}

void sub_100047494(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_10004780C(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023E2B8);
  v3 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "cloud-data-reset: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_1000478D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000479F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100047B84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100047DC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100047DF0(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (qword_1002A4580 != -1)
    dispatch_once(&qword_1002A4580, &stru_10023E358);
  v3 = qword_1002A4588;
  if (os_log_type_enabled((os_log_t)qword_1002A4588, OS_LOG_TYPE_INFO))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ids-server-bag-update: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_100047EBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100047EEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_1000488E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4588;
  qword_1002A4588 = (uint64_t)v1;

}

void sub_100048B70(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_10025C670));
  v2 = (void *)qword_1002A4598;
  qword_1002A4598 = v1;

}

void sub_100048CF0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_10025C688));
  v2 = (void *)qword_1002A45A8;
  qword_1002A45A8 = v1;

}

void sub_10004A76C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45B8;
  qword_1002A45B8 = (uint64_t)v1;

}

void sub_10004A79C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45B8;
  qword_1002A45B8 = (uint64_t)v1;

}

void sub_10004A96C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45B8;
  qword_1002A45B8 = (uint64_t)v1;

}

void sub_10004AEF8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004AF28(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004AF58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004AF88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004AFB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004AFE8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id obj;
  uint8_t buf[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _QWORD v42[2];
  _QWORD v43[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));

    v34 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR(",")));
    v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Inclusion failed for applications: %@"), v6));

    v42[0] = NSMultipleUnderlyingErrorsKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errors"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allValues"));
    v42[1] = NSLocalizedDescriptionKey;
    v43[0] = v9;
    v33 = (void *)v7;
    v43[1] = v7;
    v10 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 2));

    v32 = (void *)v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyErrorVerify"), -385, v10));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "failedRevs"));
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v38 != v16)
            objc_enumerationMutation(obj);
          v18 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverHints"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v18));
          objc_msgSend(v12, "appendFormat:", CFSTR("%@/%@,"), v18, v20);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "failedRevs"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v18));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "componentsJoinedByString:", CFSTR(",")));
          objc_msgSend(v13, "appendFormat:", CFSTR("%@:%@"), v18, v23);

        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
      }
      while (v15);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundOpId"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "smDataStore"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:](KTBackgroundSystemValidationOperation, "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:", v24, v26, v13, v27, v12, v28);

  }
  if (qword_1002A45C0 != -1)
    dispatch_once(&qword_1002A45C0, &stru_10023E560);
  v29 = qword_1002A45C8;
  if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "VerifyRevisionInclusion: end", buf, 2u);
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedOp"));
  objc_msgSend(v30, "addOperation:", v31);

}

void sub_10004B40C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004B6A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004B878(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004BB20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004BE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_10004BE54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

uint64_t sub_10004BE84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004BE94(uint64_t a1)
{

}

void sub_10004BE9C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void *v30;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "createDownloadRecord:moc:application:", *(_QWORD *)(a1 + 64), v4, *(_QWORD *)(a1 + 40)));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 72)));
  objc_msgSend(v7, "setRevisions:", v8);

  if (qword_1002A45C0 != -1)
    dispatch_once(&qword_1002A45C0, &stru_10023E600);
  v9 = (void *)qword_1002A45C8;
  if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(void **)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = v9;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "downloadId"));
    *(_DWORD *)buf = 138543874;
    v26 = v10;
    v27 = 2114;
    v28 = v11;
    v29 = 2114;
    v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fetching Inclusion Proofs for %{public}@ %{public}@ with downloadId %{public}@", buf, 0x20u);

  }
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "downloadId"));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dataStore"));
  v24 = 0;
  v19 = objc_msgSend(v18, "persistWithError:", &v24);
  v20 = v24;

  if ((v19 & 1) == 0)
  {
    if (qword_1002A45C0 != -1)
      dispatch_once(&qword_1002A45C0, &stru_10023E620);
    v21 = qword_1002A45C8;
    if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to save downloadRecord: %@", buf, 0xCu);
    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "dataStore"));
    objc_msgSend(v23, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("verifyConsistency"), v20);

  }
}

void sub_10004C138(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004C168(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004C198(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  KTContextVerifier *v10;
  void *v11;
  void *v12;
  KTContextVerifier *v13;
  unsigned __int8 v14;
  id v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  signed int v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  _QWORD v75[2];
  _QWORD v76[2];
  uint8_t buf[4];
  uint64_t v78;
  __int16 v79;
  id v80;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "publicKeyStore"));
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "applicationPublicKeyStore:", *(_QWORD *)(a1 + 32)));

  v10 = [KTContextVerifier alloc];
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dataStore"));
  v13 = -[KTContextVerifier initWithApplicationKeyStore:dataStore:applicationID:](v10, "initWithApplicationKeyStore:dataStore:applicationID:", v72, v12, *(_QWORD *)(a1 + 32));

  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (!v5 || v6)
  {
    if (qword_1002A45C0 != -1)
      dispatch_once(&qword_1002A45C0, &stru_10023E668);
    v36 = qword_1002A45C8;
    if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v78 = v37;
      v79 = 2112;
      v80 = v6;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Failed inclusion proof downloadId %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
      v6 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -145, CFSTR("empty inclusion proof response")));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "dataStore"));
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "logClient"));
    objc_msgSend(v39, "failHeadDownload:failure:logClient:", v40, v6, v42);

    v15 = v6;
    v43 = v15;
  }
  else
  {
    if (objc_msgSend(v5, "status") == 1)
    {
      v74 = 0;
      v14 = -[KTContextVerifier verifyRevisionLogInclusionProofResponse:receivedRevisions:error:](v13, "verifyRevisionLogInclusionProofResponse:receivedRevisions:error:", v5, v71, &v74);
      v15 = v74;
      if ((v14 & 1) != 0)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "settings"));
        v18 = objc_msgSend(v17, "allowsInternalSecurityPolicies");

        if (v18)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("InclusionDownload"), *(_QWORD *)(a1 + 32)));
          v20 = *(_QWORD *)(a1 + 40);
          v75[0] = CFSTR("requestedRevisions");
          v75[1] = CFSTR("receivedRevisions");
          v76[0] = v20;
          v76[1] = v71;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v76, v75, 2));
          v22 = objc_msgSend(v21, "mutableCopy");

          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
          v24 = kTransparencyResponseMetadataKeyServerHint;
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

          if (v25)
          {
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v24));
            objc_msgSend(v22, "setObject:forKeyedSubscript:", v27, v24);

          }
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("APS")));

          if (v29)
            objc_msgSend(v22, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("APS"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "logger"));
          objc_msgSend(v31, "logHardFailureForEventNamed:withAttributes:", v19, v22);

        }
        if (qword_1002A45C0 != -1)
          dispatch_once(&qword_1002A45C0, &stru_10023E6C8);
        v32 = qword_1002A45C8;
        if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_DEFAULT))
        {
          v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543362;
          v78 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Revision log inclusion proof downloadId %{public}@: verification succeeded", buf, 0xCu);
        }
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "logClient"));
        objc_msgSend(v35, "deleteDownloadId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

      }
      else
      {
        if (qword_1002A45C0 != -1)
          dispatch_once(&qword_1002A45C0, &stru_10023E6A8);
        v54 = qword_1002A45C8;
        if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_ERROR))
        {
          v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543618;
          v78 = v55;
          v79 = 2112;
          v80 = v15;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Inclusion proof response donwloadId %{public}@: verification failed %@", buf, 0x16u);
        }
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "dataStore"));
        v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "logClient"));
        objc_msgSend(v57, "failHeadDownload:failure:logClient:", v58, v15, v60);

      }
    }
    else
    {
      if (qword_1002A45C0 != -1)
        dispatch_once(&qword_1002A45C0, &stru_10023E688);
      v44 = (void *)qword_1002A45C8;
      if (os_log_type_enabled((os_log_t)qword_1002A45C8, OS_LOG_TYPE_ERROR))
      {
        v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v46 = v44;
        *(_DWORD *)buf = 138543618;
        v78 = v45;
        v79 = 1024;
        LODWORD(v80) = objc_msgSend(v5, "status");
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "server failed to produce inclusion proof for downloadId %{public}@: %d", buf, 0x12u);

      }
      v47 = objc_msgSend(v5, "status");
      v48 = objc_msgSend(v5, "status");
      v15 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorServer, v47, CFSTR("server failed to produce inclusion proof: %d"), v48));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "dataStore"));
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "logClient"));
      objc_msgSend(v50, "failHeadDownload:failure:logClient:", v51, v15, v53);

    }
    v43 = 0;
  }
  v73 = v15;
  v61 = (void *)objc_claimAutoreleasedReturnValue(-[KTContextVerifier failExpiredSTHsForType:error:](v13, "failExpiredSTHsForType:error:", 1, &v73));
  v62 = v73;

  if (v61 && objc_msgSend(v61, "count"))
  {
    if (v5)
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    }
    else
    {
      v64 = 0;
    }
    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%lu"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64)));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
    objc_sync_enter(v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "serverHints"));
    objc_msgSend(v67, "setObject:forKeyedSubscript:", v64, v65);

    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "errors"));
    objc_msgSend(v68, "setObject:forKeyedSubscript:", v62, v65);

    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "failedRevs"));
    objc_msgSend(v69, "setObject:forKeyedSubscript:", v61, v65);

    objc_sync_exit(v66);
  }
  v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fetchGroup"));
  dispatch_group_leave(v70);

}

void sub_10004CA2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004CA48(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004CA78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004CAA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004CAD8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45C8;
  qword_1002A45C8 = (uint64_t)v1;

}

void sub_10004D12C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45D8;
  qword_1002A45D8 = (uint64_t)v1;

}

void sub_10004D15C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45D8;
  qword_1002A45D8 = (uint64_t)v1;

}

void sub_10004D18C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;

  v5 = a3;
  v6 = v5;
  if (a2 && !v5)
    goto LABEL_3;
  if (qword_1002A45D0 != -1)
    dispatch_once(&qword_1002A45D0, &stru_10023E750);
  v7 = qword_1002A45D8;
  if (os_log_type_enabled((os_log_t)qword_1002A45D8, OS_LOG_TYPE_ERROR))
  {
    v16 = 138412290;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "createManateeIdentity: %@", (uint8_t *)&v16, 0xCu);
  }
  if (v6)
  {
    if (qword_1002A45D0 != -1)
      dispatch_once(&qword_1002A45D0, &stru_10023E770);
    v8 = qword_1002A45D8;
    if (os_log_type_enabled((os_log_t)qword_1002A45D8, OS_LOG_TYPE_ERROR))
    {
      v16 = 138412290;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "createManateeIdentity: %@", (uint8_t *)&v16, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  }
  else
  {
    if (a2)
    {
LABEL_3:
      objc_msgSend(*(id *)(a1 + 32), "setIdentityCreated:", 1);
      objc_msgSend(*(id *)(a1 + 32), "setIdentity:", PCSIdentityGetPublicKey(a2));
      goto LABEL_14;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInterface, -327, CFSTR("Identity creation failed")));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v11);

    if (qword_1002A45D0 != -1)
      dispatch_once(&qword_1002A45D0, &stru_10023E790);
    v12 = (void *)qword_1002A45D8;
    if (os_log_type_enabled((os_log_t)qword_1002A45D8, OS_LOG_TYPE_ERROR))
    {
      v13 = *(void **)(a1 + 32);
      v14 = v12;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "error"));
      v16 = 138412290;
      v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "createManateeIdentity no identity returned: %@", (uint8_t *)&v16, 0xCu);

    }
  }
LABEL_14:
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedOp"));
  objc_msgSend(v9, "addOperation:", v10);

  objc_msgSend(*(id *)(a1 + 32), "setTransaction:", 0);
}

void sub_10004D42C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45D8;
  qword_1002A45D8 = (uint64_t)v1;

}

void sub_10004D45C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45D8;
  qword_1002A45D8 = (uint64_t)v1;

}

void sub_10004D48C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45D8;
  qword_1002A45D8 = (uint64_t)v1;

}

void sub_10004D75C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_10004D96C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004D97C(uint64_t a1)
{

}

void sub_10004D984(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004D9B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  BOOL v9;
  NSObject *v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint8_t v14[16];
  _BYTE to[24];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    if (qword_1002A45E0 != -1)
      dispatch_once(&qword_1002A45E0, &stru_10023E7F8);
    v13 = qword_1002A45E8;
    if (os_log_type_enabled((os_log_t)qword_1002A45E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)to = 138412290;
      *(_QWORD *)&to[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Updating configuration for collection failed: %@", to, 0xCu);
    }
  }
  else
  {
    *(_QWORD *)to = 0;
    objc_copyWeak((id *)to, (id *)(a1 + 40));
    WeakRetained = objc_loadWeakRetained((id *)to);
    v9 = WeakRetained == 0;

    if (!v9)
    {
      if (qword_1002A45E0 != -1)
        dispatch_once(&qword_1002A45E0, &stru_10023E818);
      v10 = qword_1002A45E8;
      if (os_log_type_enabled((os_log_t)qword_1002A45E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Updating configuration for collection", v14, 2u);
      }
      v11 = objc_loadWeakRetained((id *)to);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "delegate"));
      objc_msgSend(v12, "updateCollectionConfigurationWithData:", v5);

    }
    objc_destroyWeak((id *)to);
  }

}

void sub_10004DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004DB84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004DBB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004DD2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004DF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004DF5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004DF8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  id to;
  uint8_t buf[4];
  id v18;

  v5 = a2;
  v6 = a3;
  to = 0;
  objc_copyWeak(&to, (id *)(a1 + 40));
  v7 = objc_loadWeakRetained(&to);
  v8 = v7 == 0;

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -1001, CFSTR("time out")));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_21:

    goto LABEL_22;
  }
  if (v5 && !v6)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("configurationData")));
    v11 = objc_opt_class(NSData, v10);
    if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
    {
      if (qword_1002A45E0 != -1)
        dispatch_once(&qword_1002A45E0, &stru_10023E8E0);
      v12 = qword_1002A45E8;
      if (os_log_type_enabled((os_log_t)qword_1002A45E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Configuration updated", buf, 2u);
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      if (qword_1002A45E0 != -1)
        dispatch_once(&qword_1002A45E0, &stru_10023E8C0);
      v14 = qword_1002A45E8;
      if (os_log_type_enabled((os_log_t)qword_1002A45E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ConfigurationData not present/wrong type", buf, 2u);
      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -1001, CFSTR("time out")));
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

    }
    goto LABEL_21;
  }
  if (qword_1002A45E0 != -1)
    dispatch_once(&qword_1002A45E0, &stru_10023E8A0);
  v13 = qword_1002A45E8;
  if (os_log_type_enabled((os_log_t)qword_1002A45E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to fetch configuration record: %@", buf, 0xCu);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_22:
  objc_destroyWeak(&to);

}

void sub_10004E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004E290(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004E2C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004E2F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45E8;
  qword_1002A45E8 = (uint64_t)v1;

}

void sub_10004EE6C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004EE9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004EECC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004EEFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004EF2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004F3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F3FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004F40C(uint64_t a1)
{

}

void sub_10004F414(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id obj;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("KTRequest")));
  objc_msgSend(v2, "setPropertiesToFetch:", &off_10025C6A0);
  objc_msgSend(v2, "setResultType:", 2);
  objc_msgSend(v2, "setFetchLimit:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("sequenceId"), 0));
  v14 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
  objc_msgSend(v2, "setSortDescriptors:", v4);

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v6 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v2, &obj));
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7 && objc_msgSend(v7, "count"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("sequenceId")));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (char *)objc_msgSend(v9, "longLongValue") + 1;
  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 40), "reportCoreDataEventForEntity:write:code:underlyingError:", CFSTR("KTRequest"), 0, -126);
  }
  v10 = objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_10004F664(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  __CFString *v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  NSObject *v21;
  unsigned int v22;
  const __CFString *v23;
  id v24;
  id v25;
  uint8_t buf[4];
  const __CFString *v27;
  __int16 v28;
  id v29;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    if (qword_1002A45F0 != -1)
      dispatch_once(&qword_1002A45F0, &stru_10023E9F8);
    v8 = (void *)qword_1002A45F8;
    if (os_log_type_enabled((os_log_t)qword_1002A45F8, OS_LOG_TYPE_INFO))
    {
      v9 = v8;
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URL"));
      *(_DWORD *)buf = 138412290;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loaded store at %@", buf, 0xCu);

    }
    v11 = *(void **)(a1 + 32);
    v25 = 0;
    v12 = objc_msgSend(v11, "createContexts:", &v25);
    v13 = v25;
    v14 = v13;
    if (v12)
    {
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "logger"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyFollowup instance](TransparencyFollowup, "instance"));
      v24 = v14;
      v18 = objc_msgSend(v15, "createDataStores:followup:error:", v16, v17, &v24);
      v7 = v24;

      if (v18)
        goto LABEL_20;
    }
    else
    {
      v7 = v13;
    }
  }
  if (qword_1002A45F0 != -1)
    dispatch_once(&qword_1002A45F0, &stru_10023EA18);
  v19 = (void *)qword_1002A45F8;
  if (os_log_type_enabled((os_log_t)qword_1002A45F8, OS_LOG_TYPE_ERROR))
  {
    v20 = *(void **)(a1 + 32);
    v21 = v19;
    v22 = objc_msgSend(v20, "movedDatabase");
    v23 = &stru_1002508B8;
    if (v22)
      v23 = CFSTR(" again");
    *(_DWORD *)buf = 138412546;
    v27 = v23;
    v28 = 2112;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to load stack%@: %@", buf, 0x16u);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "shouldMoveAsideDatabase:", v7)
    || !objc_msgSend(*(id *)(a1 + 32), "moveAsideDatabase:", v7))
  {
    objc_msgSend(*(id *)(a1 + 32), "reportCoreDataEventForEntity:hardFailure:write:code:underlyingError:", CFSTR("Initialization"), 1, 1, -127, v7);
    objc_msgSend(*(id *)(a1 + 32), "setPersistentContainer:", 0);
LABEL_20:
    objc_msgSend(*(id *)(a1 + 32), "setupComplete");
    goto LABEL_21;
  }
  objc_msgSend(*(id *)(a1 + 32), "reportCoreDataEventForEntity:hardFailure:write:code:underlyingError:", CFSTR("Initialization"), 0, 1, -127, v7);
  objc_msgSend(*(id *)(a1 + 32), "setMovedDatabase:", 1);
  objc_msgSend(*(id *)(a1 + 32), "loadPersistentStores");
LABEL_21:

}

void sub_10004F954(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004F984(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_10004FDB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const __CFString *a11, const __CFString *a12, const __CFString *a13, const __CFString *a14, const __CFString *a15, _UNKNOWN **a16, uint64_t a17, void *a18, const __CFString *a19, void *a20,__int128 buf)
{
  _QWORD *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _BOOL4 v39;
  void *v40;

  if (a2 == 1)
  {
    v23 = objc_begin_catch(a1);
    if (qword_1002A45F0 != -1)
      dispatch_once(&qword_1002A45F0, &stru_10023EAA0);
    v24 = qword_1002A45F8;
    if (os_log_type_enabled((os_log_t)qword_1002A45F8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CoreData context save exception: %@", (uint8_t *)&buf, 0xCu);
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
    objc_msgSend(v25, "setValue:forKey:", v26, CFSTR("CoreDataExceptionName"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "reason"));
    objc_msgSend(v25, "setValue:forKey:", v27, CFSTR("CoreDataExceptionReason"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "userInfo"));
    objc_msgSend(v25, "setValue:forKey:", v28, CFSTR("CoreDataExceptionUserInfo"));

    if (v21 && *v21)
      objc_msgSend(v25, "setValue:forKey:", *v21, NSUnderlyingErrorKey);
    v29 = objc_alloc((Class)NSError);
    v30 = kTransparencyErrorDatabase;
    v31 = objc_msgSend(v29, "initWithDomain:code:userInfo:", kTransparencyErrorDatabase, -110, v25);
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "reason"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", v30, -110, v31, CFSTR("Error persisting to database: %@")));

    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "logger"));
    a11 = CFSTR("errorCode");
    a12 = CFSTR("errorDomain");
    a16 = &off_10025BEF0;
    a17 = v30;
    a13 = CFSTR("exceptionName");
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
    a18 = v34;
    a19 = CFSTR("Persistence");
    a14 = CFSTR("entityType");
    a15 = CFSTR("write");
    a20 = &__kCFBooleanTrue;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &a16, &a11, 5));
    objc_msgSend(v33, "logHardFailureForEventNamed:withAttributes:", CFSTR("ktCoreDataEvent"), v35);

    if (qword_1002A45F0 != -1)
      dispatch_once(&qword_1002A45F0, &stru_10023EAC0);
    v36 = (id)qword_1002A45F8;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "reason"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Error saving to database: %@", (uint8_t *)&buf, 0xCu);

    }
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v32));

    if (v38)
      v39 = v21 != 0;
    else
      v39 = 0;
    if (v39)
      *v21 = objc_retainAutorelease(v38);

    objc_end_catch();
    JUMPOUT(0x10004FD3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_100050124(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_100050154(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_100050184(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_1000501B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A45F8;
  qword_1002A45F8 = (uint64_t)v1;

}

void sub_100050698(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100050734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100050A14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100050A44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100050BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100050BE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_1000512B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1000512D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

uint64_t sub_100051304(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100051314(uint64_t a1)
{

}

void sub_10005131C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (qword_1002A4600 != -1)
      dispatch_once(&qword_1002A4600, &stru_10023EB60);
    v7 = qword_1002A4608;
    if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412546;
      v15 = v5;
      v16 = 2112;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "ContextStore configuration error for %@: %@", (uint8_t *)&v14, 0x16u);
    }
    if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)))
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  }
  else
  {
    v8 = *(void **)(a1 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataStore"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "staticKeyStore"));
    v11 = *(_QWORD *)(a1 + 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
    v13 = objc_msgSend(v8, "createContextForApplication:dataStore:staticKeyStore:logClient:stateMachine:", v5, v9, v10, v11, v12);

  }
}

void sub_1000514B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_1000514E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  v14 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataStore"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "staticKeyStore"));
    v8 = *(_QWORD *)(a1 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
    v10 = objc_msgSend(v5, "createContextForTLT:staticKeyStore:logClient:stateMachine:", v6, v7, v8, v9);

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));

    if (v12)
    {
      v13 = 0;
    }
    else
    {
      v13 = v14;
      if (!v13)
        v13 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInternal, -148, CFSTR("Failed to configure public key store for %@"), *(_QWORD *)(a1 + 48)));
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
}

void sub_100051654(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100051824(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a3;
  v10 = v5;
  if (!a2 || v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = objc_msgSend(objc_alloc((Class)KTVerifierResult), "initWithUri:application:ktResult:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v10);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", 0, *(_QWORD *)(a1 + 40)));
    objc_msgSend(v8, "logResultForEvent:hardFailure:result:", v9, 0, v10);

  }
  else
  {
    objc_msgSend(a2, "validatePeerRequestId:revalidate:fetchNow:completionHandler:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 56));
  }

}

void sub_100051A98(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;

  v5 = a3;
  v6 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(a1[7] + 16))();
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[KTContext validateEventName:application:](KTContext, "validateEventName:application:", 2, a1[4]));
    objc_msgSend(v12, "logResultForEvent:hardFailure:result:", v13, 0, v6);

  }
  else
  {
    v15 = 0;
    v16 = 0;
    v7 = a1[5];
    v8 = a1[6];
    v14 = 0;
    objc_msgSend(a2, "validateEnrollmentRequestId:transparentData:loggableDatas:cloudOptIn:error:", v7, &v16, &v15, v8, &v14);
    v9 = v16;
    v10 = v15;
    v11 = v14;
    (*(void (**)(void))(a1[7] + 16))();

  }
}

void sub_100051DA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100051DD8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100051FF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052024(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052054(id a1, NSString *a2, NSError *a3)
{
  NSString *v4;
  NSError *v5;
  NSObject *v6;
  int v7;
  NSString *v8;
  __int16 v9;
  NSError *v10;

  v4 = a2;
  v5 = a3;
  if (v5)
  {
    if (qword_1002A4600 != -1)
      dispatch_once(&qword_1002A4600, &stru_10023ED00);
    v6 = qword_1002A4608;
    if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_INFO))
    {
      v7 = 138412546;
      v8 = v4;
      v9 = 2112;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Failed to update key store for %@ with error %@", (uint8_t *)&v7, 0x16u);
    }
  }

}

void sub_100052148(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_1000521E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000522B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;

  v5 = a3;
  v6 = v5;
  if (!a2 || v5)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("VerifyInclusionProofEvent"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v12, "logResultForEvent:hardFailure:result:", v13, 0, v6);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v14 = 0;
    v8 = objc_msgSend(a2, "verifyInclusionProofDownload:error:", v7, &v14);
    v9 = v14;
    v10 = v9;
    if (!v8 || v9)
    {
      if (qword_1002A4600 != -1)
        dispatch_once(&qword_1002A4600, &stru_10023ED20);
      v11 = qword_1002A4608;
      if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to handle inclusion proof download: %@", buf, 0xCu);
      }
    }

  }
}

void sub_100052414(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_1000524F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v5 = a3;
  v6 = v5;
  if (!a2 || v5)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("VerifyConsistencyProofEvent"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v11, "logResultForEvent:hardFailure:result:", v12, 0, v6);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v13 = 0;
    v8 = objc_msgSend(a2, "verifyConsistencyProofDownload:error:", v7, &v13);
    v9 = v13;
    if (v8 != (id)1)
    {
      if (qword_1002A4600 != -1)
        dispatch_once(&qword_1002A4600, &stru_10023ED68);
      v10 = qword_1002A4608;
      if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to handle consistency proof download: %@", buf, 0xCu);
      }
    }

  }
}

void sub_10005265C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052788(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (!a2 || v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("VerifyUnknownProofEvent"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v6, "logResultForEvent:hardFailure:result:", v7, 0, v8);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
    objc_msgSend(v6, "failHeadDownload:failure:logClient:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }

}

void sub_1000528D0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "transcript"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serialize"));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_100052D04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052D34(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052D64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100052D94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("RetrieveTLTSTHEvent"), kKTApplicationIdentifierTLT));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v11, "logResultForEvent:hardFailure:result:", v9, 0, v7);

    if (qword_1002A4600 != -1)
      dispatch_once(&qword_1002A4600, &stru_10023EE38);
    v12 = qword_1002A4608;
    if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to get context for TLT STH retrieval: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (qword_1002A4600 != -1)
      dispatch_once(&qword_1002A4600, &stru_10023EE58);
    v8 = qword_1002A4608;
    if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "retrieving STH for gossip", buf, 2u);
    }
    v14 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "retrieveTLTSTH:", &v14));
    v10 = v14;
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "setCachedGossip:", v9);
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
      objc_msgSend(*(id *)(a1 + 32), "setCachedGossip:", v13);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100052FD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_100053000(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_10005311C(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (!a2 || v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("ReceivedSTHsFromPeersEvent"), kKTApplicationIdentifierTLT));
    objc_msgSend(v6, "logResultForEvent:hardFailure:result:", v7, 0, v8);

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    objc_msgSend(a2, "processSTHsFromPeers:verifier:completionHandler:", a1[4], a1[5], a1[6]);
  }

}

void sub_1000532C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000532DC(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = objc_msgSend(a3, "contextShouldGossip");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

void sub_1000533DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v6, "logResultForEvent:hardFailure:result:", CFSTR("KTAccountKeySign"), 0, v7);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "accountKeyServer"));
    objc_msgSend(v6, "signData:completionBlock:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }

}

void sub_10005351C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v6, "logResultForEvent:hardFailure:result:", CFSTR("KTAccountKeyRoll"), 0, v7);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "accountKeyServer"));
    objc_msgSend(v6, "rollKey:", *(_QWORD *)(a1 + 32));
  }

}

void sub_100053678(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (!a2 || v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("OptInServerGet"), *(_QWORD *)(a1 + 32)));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v7, "logResultForEvent:hardFailure:result:", v6, 0, v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "optInServer"));
    objc_msgSend(v6, "getOptInState:completionBlock:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }

}

void sub_100053800(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a3;
  v10 = v5;
  if (!a2 || v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("OptInServerSet"), *(_QWORD *)(a1 + 32)));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    objc_msgSend(v9, "logResultForEvent:hardFailure:result:", v6, 0, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "optInServer"));
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
    objc_msgSend(v6, "changeOptInState:dataStore:completionBlock:", v7, v8, *(_QWORD *)(a1 + 48));

  }
}

void sub_100053A3C(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  if (!a2 || a3)
  {
    (*(void (**)(void))(a1[8] + 16))();
  }
  else
  {
    v4 = a1[4];
    v5 = a1[5];
    v6 = a1[6];
    v7 = a1[7];
    v9 = 0;
    objc_msgSend(a2, "handleBatchQueryResponse:queryRequest:receiptDate:fetchId:error:transparentDataHandler:", v4, v5, v6, v7, &v9, a1[9]);
    v8 = v9;
    (*(void (**)(void))(a1[8] + 16))();

  }
}

void sub_100053BE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    if (qword_1002A4600 != -1)
      dispatch_once(&qword_1002A4600, &stru_10023EF90);
    v8 = qword_1002A4608;
    if (os_log_type_enabled((os_log_t)qword_1002A4608, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Context for application %@ unavailable", buf, 0xCu);
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorInternal, -167, v7, CFSTR("Context for application %@ unavailable"), *(_QWORD *)(a1 + 32)));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
  else
  {
    objc_msgSend(v5, "queryForUris:userInitiated:cachedYoungerThan:completionHandler:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  }

}

void sub_100053D3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

id sub_100053EC0(_QWORD *a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
    return (id)(*(uint64_t (**)(void))(a1[9] + 16))();
  else
    return _objc_msgSend(a2, "replaySelfValidate:pcsAccountKey:queryRequest:queryResponse:responseTime:completionHandler:", a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_100053FDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a3;
  v9 = v5;
  if (!a2 || v5)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[KTVerifierResult resultsForUris:application:failure:](KTVerifierResult, "resultsForUris:application:failure:", v7, *(_QWORD *)(a1 + 40), v9));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);

  }
  else
  {
    objc_msgSend(a2, "validatePeers:fetchNow:completionBlock:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
  }

}

void sub_100054258(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4608;
  qword_1002A4608 = (uint64_t)v1;

}

void sub_10005494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100054978(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100054988(uint64_t a1)
{

}

void sub_100054990(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "createSingleQuery:backgroundOpId:error:", v3, v4, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_100054A14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100054A44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id obj;
  id v28;
  uint8_t buf[4];
  uint64_t v30;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v15 = objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorNetwork, -329, v6, CFSTR("Failed to get a response for single query rpc with id: %@"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    if (qword_1002A4610 != -1)
      dispatch_once(&qword_1002A4610, &stru_10023F090);
    v18 = qword_1002A4618;
    if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to get a response for single query rpc with id: %@", buf, 0xCu);
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v28 = *(id *)(v22 + 40);
    objc_msgSend(v20, "failRpcId:failure:error:", v21, v7, &v28);
    objc_storeStrong((id *)(v22 + 40), v28);

  }
  else
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v26 = (void *)v8;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "data"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v5, "status")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("APS")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v13 + 40);
    v14 = objc_msgSend(v26, "setResponseForRpcId:response:responseStatus:usedReversePush:serverHint:error:", v25, v24, v9, v10 != 0, v12, &obj);
    objc_storeStrong((id *)(v13 + 40), obj);

    v7 = 0;
    if (v14)
    {
      objc_msgSend(*(id *)(a1 + 32), "validatePendingPeersForRpcId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      objc_msgSend(*(id *)(a1 + 32), "validatePendingSMTsForRpcId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    }
  }

}

void sub_100054D2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_10005511C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10005514C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_10005517C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_1000551AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  id v16;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (qword_1002A4610 != -1)
      dispatch_once(&qword_1002A4610, &stru_10023F118);
    v7 = qword_1002A4618;
    if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v11 = 141558530;
      v12 = 1752392040;
      v13 = 2112;
      v14 = v8;
      v15 = 2114;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Created RPCSingleQuery for %{mask.hash}@ with rpcId %{public}@", (uint8_t *)&v11, 0x20u);
    }
  }
  else
  {
    if (qword_1002A4610 != -1)
      dispatch_once(&qword_1002A4610, &stru_10023F138);
    v9 = qword_1002A4618;
    if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 141558530;
      v12 = 1752392040;
      v13 = 2112;
      v14 = v10;
      v15 = 2112;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create RPCSingleQuery for %{mask.hash}@: %@", (uint8_t *)&v11, 0x20u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }

}

void sub_100055364(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100055394(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_1000556CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000556F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100055728(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100055758(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!v5 || v6)
  {
    if (qword_1002A4610 != -1)
      dispatch_once(&qword_1002A4610, &stru_10023F1C0);
    v17 = qword_1002A4618;
    if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to check opt-in, network failure: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ResponseTime")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate kt_dateFromString:](NSDate, "kt_dateFromString:", v9));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "verifier"));
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v20 = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100055A0C;
    v18[3] = &unk_10023F208;
    v19 = *(id *)(a1 + 48);
    v14 = objc_msgSend(v11, "handleQueryResponse:queryRequest:receiptDate:fetchId:error:transparentDataHandler:", v5, v12, v10, v13, &v20, v18);
    v15 = v20;

    if (v14 != (id)1)
    {
      if (qword_1002A4610 != -1)
        dispatch_once(&qword_1002A4610, &stru_10023F228);
      v16 = qword_1002A4618;
      if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to check opt-in, KT server failure: %@", buf, 0xCu);
      }
    }

  }
}

void sub_1000559DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100055A0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (qword_1002A4610 != -1)
      dispatch_once(&qword_1002A4610, &stru_10023F1E0);
    v10 = qword_1002A4618;
    if (os_log_type_enabled((os_log_t)qword_1002A4618, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to verify opt-in, KT server failure: %@", (uint8_t *)&v11, 0xCu);
    }
    (*(void (**)(_QWORD, uint64_t, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 2, v9);
  }
  else
  {
    (*(void (**)(_QWORD, id, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(v8, "currentAccountOptInState"), 0);
  }

}

void sub_100055B44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100055B74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4618;
  qword_1002A4618 = (uint64_t)v1;

}

void sub_100056F50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100056F80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

id sub_100056FB0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performInitialDispatches");
}

id sub_100056FB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "generateFallbackSysdiagnose");
}

uint64_t sub_100057108(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100057118(uint64_t a1)
{

}

void sub_100057120(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_1000573B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100057628(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_1000579D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100057A00(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  id v16;
  _QWORD v17[5];
  id v18;

  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_100057108;
  v17[4] = sub_100057118;
  v18 = 0;
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcDataStore"));
  v16 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "addValidateRequest:dataStore:error:", v3, v4, &v16));
  v6 = v16;
  v18 = v5;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "settings"));
  v9 = objc_msgSend(v8, "getBool:", kTransparencyFlagDisableAsyncValidation);

  if ((v9 & 1) == 0)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100057B98;
    v11[3] = &unk_10023F368;
    v10 = *(void **)(a1 + 40);
    v12 = *(id *)(a1 + 32);
    v15 = v17;
    v13 = v10;
    v14 = *(id *)(a1 + 48);
    objc_msgSend(v12, "runAsynchronousTransactionName:block:", "com.apple.transparencyd.validatePeer", v11);

  }
  _Block_object_dispose(v17, 8);

}

void sub_100057B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100057B98(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];

  objc_msgSend(*(id *)(a1 + 32), "logStartEvent:", CFSTR("validatePeerUri-Async"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workloopContextStore"));
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ktLogClient"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100057C60;
  v7[3] = &unk_10023F340;
  v7[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "validatePeerRequestId:uri:application:logClient:completionHandler:", v4, v5, v3, v6, v7);

}

id sub_100057C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    return objc_msgSend(v3, "logFinishFailureEvent:error:", CFSTR("validatePeerUri-Async"), a3);
  else
    return objc_msgSend(v3, "logFinishSuccessEvent:", CFSTR("validatePeerUri-Async"));
}

void sub_100057EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100057F14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  id v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;

  v3 = a2;
  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = sub_100057108;
  v45 = sub_100057118;
  v46 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((v5 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
    v17 = objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInterface, -159, CFSTR("Request associated with UUID %@ does not have expected uri %@. Got %@"), v14, v15, v16));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    objc_msgSend(*(id *)(a1 + 48), "logFinishFailureEvent:error:", CFSTR("validatePeerResult"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
    v20 = objc_msgSend(objc_alloc((Class)KTVerifierResult), "initWithUri:application:ktResult:", *(_QWORD *)(a1 + 32), 0, 0);
    v21 = (void *)v42[5];
    v42[5] = (uint64_t)v20;

    v22 = v42[5];
    v23 = *(_QWORD *)(a1 + 56);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cleanseErrorForXPC:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
    (*(void (**)(uint64_t, uint64_t, void *))(v23 + 16))(v23, v22, v24);
LABEL_7:

    goto LABEL_8;
  }
  if (objc_msgSend(v3, "type") && objc_msgSend(v3, "type") != (id)1)
  {
    v25 = *(_QWORD *)(a1 + 40);
    v26 = objc_msgSend(v3, "type");
    v27 = objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInterface, -124, CFSTR("Request associated with UUID %@ is not of expected type %llu. Got %lld."), v25, 0, v26));
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v27;

    objc_msgSend(*(id *)(a1 + 48), "logFinishFailureEvent:error:", CFSTR("validatePeerResult"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
    v30 = objc_alloc((Class)KTVerifierResult);
    v31 = *(_QWORD *)(a1 + 32);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
    v33 = objc_msgSend(v30, "initWithUri:application:ktResult:", v31, v32, 0);
    v34 = (void *)v42[5];
    v42[5] = (uint64_t)v33;

    v35 = v42[5];
    v36 = *(_QWORD *)(a1 + 56);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cleanseErrorForXPC:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
    (*(void (**)(uint64_t, uint64_t, void *))(v36 + 16))(v36, v35, v24);
    goto LABEL_7;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "xpcContextStore"));
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
  v11 = *(unsigned __int8 *)(a1 + 72);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10005828C;
  v37[3] = &unk_10023F3B8;
  v13 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v39 = &v41;
  v40 = v12;
  v37[4] = *(_QWORD *)(a1 + 48);
  v38 = v13;
  objc_msgSend(v6, "validatePeerRequestId:uri:application:logClient:revalidate:fetchNow:completionHandler:", v7, v8, v9, v10, 1, v11, v37);

LABEL_8:
  _Block_object_dispose(&v41, 8);

}

void sub_100058274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005828C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v7 = *(void **)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    objc_msgSend(v7, "logFinishFailureEvent:error:", CFSTR("validatePeerResult"));
  else
    objc_msgSend(v7, "logFinishSuccessEvent:", CFSTR("validatePeerResult"));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
  (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, v8, v10);

}

void sub_1000586D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10005870C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD *v11;
  id v12;
  _QWORD v13[5];
  id v14;

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = sub_100057108;
  v13[4] = sub_100057118;
  v14 = 0;
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcDataStore"));
  v12 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "addValidateRequest:dataStore:error:", v3, v4, &v12));
  v6 = v12;
  v14 = v5;

  if ((+[TransparencySettings getBool:](TransparencySettings, "getBool:", kTransparencyFlagDisableAsyncValidation) & 1) == 0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100058868;
    v8[3] = &unk_10023B0A8;
    v7 = *(void **)(a1 + 40);
    v9 = *(id *)(a1 + 32);
    v11 = v13;
    v10 = v7;
    objc_msgSend(v9, "runAsynchronousTransactionName:block:", "com.apple.transparencyd.validateEnrollment", v8);

  }
  _Block_object_dispose(v13, 8);

}

void sub_100058850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100058868(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];

  objc_msgSend(*(id *)(a1 + 32), "logStartEvent:", CFSTR("validateEnrollmentUri-Async"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workloopContextStore"));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ktLogClient"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cloudRecords"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005895C;
  v8[3] = &unk_10023F408;
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "validateEnrollmentRequestId:application:logClient:cloudOptIn:completionHandler:", v4, v3, v5, v7, v8);

}

id sub_10005895C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;

  v5 = *(void **)(a1 + 32);
  if (a5)
    return objc_msgSend(v5, "logFinishFailureEvent:error:", CFSTR("validateEnrollmentUri-Async"), a5);
  else
    return objc_msgSend(v5, "logFinishSuccessEvent:", CFSTR("validateEnrollmentUri-Async"));
}

void sub_100058B74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((v5 & 1) == 0)
  {
    v13 = kTransparencyErrorInterface;
    v15 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", v13, -159, CFSTR("Request associated with UUID %@ does not have expected uri %@. Got %@"), v14, v15, v16));

LABEL_6:
    objc_msgSend(*(id *)(a1 + 48), "logFinishFailureEvent:error:", CFSTR("validateEnrollmentUriResult"), v17);
    v18 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = objc_msgSend(v3, "verificationResult");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cleanseErrorForXPC:", v17));
    (*(void (**)(uint64_t, uint64_t, id, _QWORD, _QWORD, void *))(v18 + 16))(v18, v19, v20, 0, 0, v21);

    goto LABEL_7;
  }
  if (objc_msgSend(v3, "type") != (id)2)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInterface, -124, CFSTR("Request associated with UUID %@ is not of expected type %llu. Got %lld."), *(_QWORD *)(a1 + 40), 2, objc_msgSend(v3, "type")));
    goto LABEL_6;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "xpcContextStore"));
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "cloudRecords"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100058DD0;
  v22[3] = &unk_10023F458;
  v12 = *(void **)(a1 + 56);
  v22[4] = *(_QWORD *)(a1 + 48);
  v24 = v12;
  v23 = *(id *)(a1 + 32);
  objc_msgSend(v6, "validateEnrollmentRequestId:application:logClient:cloudOptIn:completionHandler:", v7, v8, v9, v11, v22);

LABEL_7:
}

void sub_100058DD0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _BOOL8 v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v9 = *(void **)(a1 + 32);
  v10 = a5;
  v11 = a4;
  v12 = a3;
  objc_msgSend(v9, "logFinishSuccessEvent:", CFSTR("validateEnrollmentUriResult"));
  v13 = objc_msgSend(v12, "verifiedAccountOptInState");

  v14 = v13 == (id)1;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "logger"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v16, "setDateProperty:forKey:", v17, off_10029E528);

  v19 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v10));

  (*(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8, id, id))(v18 + 16))(v18, v19, a2, v14, v11, v20);
}

id sub_100059038(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "logFinishSuccessEvent:", CFSTR("GetLoggableDataForDeviceID"));
}

void sub_10005923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059254(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "xpcContextStore"));
  v8 = 0;
  objc_msgSend(v5, "ignoreFailure:error:", v4, &v8);

  v6 = v8;
  v7 = v8;

  if (v7)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6);

}

void sub_100059674(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  if (v11)
  {
    objc_msgSend(v5, "logFinishSuccessEvent:", CFSTR("copyApplicationState"));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = objc_msgSend(v11, "copyState");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v6));

    (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v8, v9);
  }
  else
  {
    objc_msgSend(v5, "logFinishFailureEvent:error:", CFSTR("copyApplicationState"), v6);
    v10 = *(_QWORD *)(a1 + 40);
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v6));

    (*(void (**)(uint64_t, _QWORD, id))(v10 + 16))(v10, 0, v8);
  }

}

void sub_100059888(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100059A08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100059B84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100059FA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "logFinishSuccessEvent:", CFSTR("copyApplicationTranscript"));
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transcript"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serialize"));
    (*(void (**)(uint64_t, void *, _QWORD))(v5 + 16))(v5, v7, 0);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorInternal, -167, a3, CFSTR("Context for application %@ unavailable"), *(_QWORD *)(a1 + 40)));
    objc_msgSend(*(id *)(a1 + 32), "logFinishFailureEvent:error:", CFSTR("copyApplicationTranscript"), v6);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_10005A158(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (a2)
    objc_msgSend(v4, "logFinishFailureEvent:error:", CFSTR("forceConfigUpdate"), v5);
  else
    objc_msgSend(v4, "logFinishSuccessEvent:", CFSTR("forceConfigUpdate"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005A32C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = v6;
  if (a3)
    objc_msgSend(v5, "logFinishFailureEvent:error:", CFSTR("forceApplicationConfig"), v6);
  else
    objc_msgSend(v5, "logFinishSuccessEvent:", CFSTR("forceApplicationConfig"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10005A6B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  NSString *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  id v39;
  _QWORD v40[5];
  id v41;
  id v42;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32)
    && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri")),
        v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)),
        v5,
        (v6 & 1) == 0))
  {
    v15 = kTransparencyErrorInterface;
    v17 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uri"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", v15, -159, CFSTR("Request associated with UUID %@ does not have expected uri %@. Got %@"), v16, v17, v18));

    objc_msgSend(*(id *)(a1 + 48), "logFinishFailureEvent:error:", CFSTR("forceValidateUUID"), v19);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cleanseErrorForXPC:", v19));
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, void *))(v21 + 16))(v21, v20, 0, 0, 0, v22);

  }
  else
  {
    v7 = objc_msgSend(v4, "type");
    if (v7 == (id)2)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "xpcContextStore"));
      v24 = *(_QWORD *)(a1 + 40);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "application"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "cloudRecords"));
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_10005AB10;
      v37[3] = &unk_10023F458;
      v29 = *(void **)(a1 + 56);
      v37[4] = *(_QWORD *)(a1 + 48);
      v39 = v29;
      v38 = v4;
      objc_msgSend(v23, "validateEnrollmentRequestId:application:logClient:cloudOptIn:completionHandler:", v24, v25, v26, v28, v37);

      v14 = v39;
      goto LABEL_9;
    }
    if (v7 == (id)1)
    {
      v30 = *(_QWORD *)(a1 + 56);
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uri"));
      v32 = *(void **)(a1 + 48);
      v33 = NSStringFromSelector(*(SEL *)(a1 + 64));
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("KTValidateTypeSelf in %@"), v34));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "unimplementedError:", v35));
      (*(void (**)(uint64_t, void *, _QWORD, _QWORD, _QWORD, void *))(v30 + 16))(v30, v31, 0, 0, 0, v36);

      goto LABEL_11;
    }
    if (!v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "xpcContextStore"));
      v10 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "application"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ktLogClient"));
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_10005AA18;
      v40[3] = &unk_10023F5A8;
      v13 = *(void **)(a1 + 56);
      v40[4] = *(_QWORD *)(a1 + 48);
      v42 = v13;
      v41 = v4;
      objc_msgSend(v8, "validatePeerRequestId:uri:application:logClient:revalidate:fetchNow:completionHandler:", v9, v10, v11, v12, 1, 0, v40);

      v14 = v42;
LABEL_9:

    }
  }
LABEL_11:

}

void sub_10005AA18(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("forceValidateUUID"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("forceValidateUUID"));
  v9 = *(_QWORD *)(a1 + 48);
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uri"));
  v10 = objc_msgSend(v8, "succeed");
  v11 = objc_msgSend(v8, "optedIn");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "loggableDatas"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v7));
  (*(void (**)(uint64_t, id, id, id, void *, void *))(v9 + 16))(v9, v14, v10, v11, v12, v13);

}

void sub_10005AB10(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;

  v10 = *(void **)(a1 + 32);
  v11 = a5;
  v12 = a4;
  v13 = a3;
  if (a5)
    objc_msgSend(v10, "logFinishFailureEvent:error:", CFSTR("forceValidateUUID"), v11);
  else
    objc_msgSend(v10, "logFinishSuccessEvent:", CFSTR("forceValidateUUID"));
  v14 = objc_msgSend(v13, "verifiedAccountOptInState");

  v15 = *(_QWORD *)(a1 + 48);
  v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uri"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v11));

  (*(void (**)(uint64_t, id, uint64_t, BOOL, id, void *))(v15 + 16))(v15, v17, a2, v14 == (id)1, v12, v16);
}

void sub_10005AC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  id v8;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", a6));
  (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a3, v8);

}

void sub_10005AE80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v3 = a2;
  objc_msgSend(v3, "setVerificationResult:", 2);
  objc_msgSend(v3, "setResponseTime:", 0);
  objc_msgSend(v3, "setQueryResponse:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcDataStore"));
  v9 = 0;
  v5 = objc_msgSend(v4, "persistWithError:", &v9);
  v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_1002A4620 != -1)
      dispatch_once(&qword_1002A4620, &stru_10023F618);
    v7 = qword_1002A4628;
    if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save request reset to pending: %@", buf, 0xCu);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcDataStore"));
    objc_msgSend(v8, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("resetToPending"), v6);

  }
}

void sub_10005AFD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005B1AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005B1DC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = a2;
  if (qword_1002A4620 != -1)
    dispatch_once(&qword_1002A4620, &stru_10023F680);
  v4 = qword_1002A4628;
  if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "runDutyCycle done: %@", (uint8_t *)&v7, 0xCu);
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);

}

void sub_10005B2CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005B9E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005BA14(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;

  if (qword_1002A4620 != -1)
    dispatch_once(&qword_1002A4620, &stru_10023F6A0);
  v2 = qword_1002A4628;
  if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
  {
    v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to get gossip message within %fs", buf, 0xCu);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -151, CFSTR("failed to get gossip message within %fs"), a1[7]));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
  v5 = *(_QWORD *)(a1[6] + 8);
  v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(_QWORD *)(v5 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
    (*(void (**)(void))(a1[4] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
  }

}

void sub_10005BB74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005BBA4(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = (void *)a1[4];
  if (!v10 || v5)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("retrieveCurrentVerifiedTLTSTH"), v5);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("retrieveCurrentVerifiedTLTSTH"));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
  v7 = *(NSObject **)(*(_QWORD *)(a1[7] + 8) + 40);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *(_QWORD *)(a1[7] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
  }

}

void sub_10005BF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10005BF6C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;

  if (qword_1002A4620 != -1)
    dispatch_once(&qword_1002A4620, &stru_10023F710);
  v2 = qword_1002A4628;
  if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
  {
    v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to get gossip message within %fs", buf, 0xCu);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorNetwork, -151, CFSTR("failed to get gossip message within %fs"), a1[7]));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
  v5 = *(_QWORD *)(a1[6] + 8);
  v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(_QWORD *)(v5 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
    (*(void (**)(void))(a1[4] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[5] + 8) + 32));
  }

}

void sub_10005C0C8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005C0F8(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = (void *)a1[4];
  v8 = v3;
  if (v3)
    objc_msgSend(v4, "logFinishFailureEvent:error:", CFSTR("receivedSTHsFromPeers"));
  else
    objc_msgSend(v4, "logFinishSuccessEvent:", CFSTR("receivedSTHsFromPeers"));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
  v5 = *(NSObject **)(*(_QWORD *)(a1[7] + 8) + 40);
  if (v5)
  {
    dispatch_source_cancel(v5);
    v6 = *(_QWORD *)(a1[7] + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1[6] + 8) + 32));
  }

}

void sub_10005C2C4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  v10 = *(void **)(a1 + 32);
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  if (a5)
    objc_msgSend(v10, "logFinishFailureEvent:error:", CFSTR("accountKeySignData"), v11);
  else
    objc_msgSend(v10, "logFinishSuccessEvent:", CFSTR("accountKeySignData"));
  v15 = *(_QWORD *)(a1 + 40);
  v16 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v11));

  (*(void (**)(uint64_t, id, id, id, id))(v15 + 16))(v15, v14, v13, v12, v16);
}

void sub_10005C49C(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("accountKeyRoll"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("accountKeyRoll"));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

uint64_t sub_10005C5E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005C6A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005C7A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005C8A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005C9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_10005CA80(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005CBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_10005CCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_10005CDBC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005CEEC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005D040(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:"));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);

}

void sub_10005D124(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005D240(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", a3));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

}

void sub_10005D370(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:"));
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);

}

void sub_10005D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D634(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  id WeakRetained;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a3;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = objc_alloc((Class)KTOptInState);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v11 = objc_msgSend(v9, "initWithApplication:", v10);

  if (v7)
  {
    objc_msgSend(v11, "setState:", 2);
    objc_msgSend(WeakRetained, "logFinishFailureEvent:error:", CFSTR("GetOptIn"), v7);
  }
  else
  {
    objc_msgSend(WeakRetained, "logFinishSuccessEvent:", CFSTR("GetOptIn"));
    objc_msgSend(v11, "setState:", a2);
    objc_msgSend(v11, "setSmtTimestamp:", v14);
  }
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v11, v13);
}

void sub_10005D890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D8B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  id WeakRetained;
  uint64_t v11;
  void *v12;
  id v13;

  v7 = (id *)(a1 + 40);
  v8 = a4;
  v9 = a3;
  WeakRetained = objc_loadWeakRetained(v7);
  v13 = WeakRetained;
  if (v8)
    objc_msgSend(WeakRetained, "logFinishFailureEvent:error:", CFSTR("SetOptIn"), v8);
  else
    objc_msgSend(WeakRetained, "logFinishSuccessEvent:", CFSTR("SetOptIn"));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v8));

  (*(void (**)(uint64_t, uint64_t, id, void *))(v11 + 16))(v11, a2, v9, v12);
}

void sub_10005DB3C(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("GetStatus"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("GetStatus"));
  v9 = *(_QWORD *)(a1 + 40);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "simpleStatus"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));
  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v11, v10);

}

void sub_10005DCC4(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("GetSelfStatus"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("GetSelfStatus"));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10005DE60(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;

  v7 = *(void **)(a1 + 32);
  v8 = a4;
  v9 = a3;
  if (a2 == 1)
    objc_msgSend(v7, "logFinishSuccessEvent:", CFSTR("GetKTErrorForEventId"));
  else
    objc_msgSend(v7, "logFinishFailureEvent:error:", CFSTR("GetKTErrorForEventId"), v8);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v8));

  (*(void (**)(uint64_t, uint64_t, id, id))(v10 + 16))(v10, a2, v9, v11);
}

void sub_10005E004(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (a2)
    objc_msgSend(v4, "logFinishFailureEvent:error:", CFSTR("IgnoreKTErrorEvent"), v5);
  else
    objc_msgSend(v4, "logFinishSuccessEvent:", CFSTR("IgnoreKTErrorEvent"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005E1E0(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("getAuditorReport"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("getAuditorReport"));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10005E3AC(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (a2)
    objc_msgSend(v4, "logFinishFailureEvent:error:", CFSTR("makeAuditorReport"), v5);
  else
    objc_msgSend(v4, "logFinishSuccessEvent:", CFSTR("makeAuditorReport"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10005E778(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005E7A8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005ECF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005ED20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F004(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F034(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F2D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F308(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F5AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F5DC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F7A8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005F7D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (qword_1002A4620 != -1)
      dispatch_once(&qword_1002A4620, &stru_10023FAC0);
    v7 = qword_1002A4628;
    if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error fetching opt in state to check static key store mapping %{public}@", buf, 0xCu);
    }
  }
  if (objc_msgSend(v5, "state"))
  {
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v30 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ensureContactFieldsPresent:error:", v9, &v30));
    v11 = v30;
    if (!v10)
    {
      v26 = *(_QWORD *)(a1 + 48);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v11));
      (*(void (**)(uint64_t, _QWORD, void *))(v26 + 16))(v26, 0, v22);
      goto LABEL_23;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "staticKeyController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "externalURI"));
    v29 = v11;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "findStaticKeyByContactExternalURI:error:", v13, &v29));
    v15 = v29;

    if (!v14)
    {
      if (qword_1002A4620 != -1)
        dispatch_once(&qword_1002A4620, &stru_10023FB00);
      v16 = (void *)qword_1002A4628;
      if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
      {
        v17 = v16;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "externalURI"));
        *(_DWORD *)buf = 138412546;
        v32 = v18;
        v33 = 2112;
        v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "findStaticKeyStoreMappingByContactExternalURI: %@ error: %@", buf, 0x16u);

      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "staticKeyController"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
      v28 = v15;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "findStaticKeyByContactIdentifier:error:", v20, &v28));
      v11 = v28;

      if (!v14)
      {
        v22 = 0;
        goto LABEL_16;
      }
      v15 = v11;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "staticKeyController"));
    v27 = v15;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "validateStoreEntry:error:", v14, &v27));
    v11 = v27;

LABEL_16:
    v23 = *(_QWORD *)(a1 + 48);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v11));
    (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v22, v24);

LABEL_23:
    goto LABEL_24;
  }
  if (qword_1002A4620 != -1)
    dispatch_once(&qword_1002A4620, &stru_10023FAE0);
  v25 = qword_1002A4628;
  if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Ignoring static key store entry request because user is not opted into KT", buf, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_24:

}

void sub_10005FB8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005FBBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005FBEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005FDE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_10005FFB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100060188(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100060424(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100060454(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_1000606B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_1000606E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100060DA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100061098(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100061194(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = a2;
  if (a3)
    objc_msgSend(v6, "logFinishFailureEvent:error:", CFSTR("fetchBatchQuery"), v7);
  else
    objc_msgSend(v6, "logFinishSuccessEvent:", CFSTR("fetchBatchQuery"));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v7));

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_100061768(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = *(void **)(a1 + 32);
  if (a3)
  {
    objc_msgSend(v5, "logFinishFailureEvent:error:", CFSTR("triggerTapToRadarNotification"), a3);
  }
  else
  {
    objc_msgSend(v5, "logFinishSuccessEvent:", CFSTR("triggerTapToRadarNotification"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "tapToRadar"));
    objc_msgSend(v6, "presentTapToRadarErrorWithType:", CFSTR("self"));

  }
}

uint64_t sub_10006186C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100061A24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100061AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100061B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  NSFileAttributeKey v19;
  NSFileProtectionType v20;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addEntriesFromDictionary:", a2);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", CFSTR("true"), CFSTR("isFallback"));
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v16 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v3, 1, &v16));
  v5 = v16;
  v15 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyFileSupport transparencyFilesPath:](TransparencyFileSupport, "transparencyFilesPath:", &v15));
  v7 = v15;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URLByAppendingPathComponent:isDirectory:", CFSTR("transparency_start.log"), 0));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "relativePath"));
  v19 = NSFileProtectionKey;
  v20 = NSFileProtectionNone;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  v12 = objc_msgSend(v9, "createFileAtPath:contents:attributes:", v10, v4, v11);

  if ((v12 & 1) == 0)
  {
    if (qword_1002A4620 != -1)
      dispatch_once(&qword_1002A4620, &stru_10023FD10);
    v13 = qword_1002A4628;
    if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "transparencyd: create fallback sysdiagnose error %@", buf, 0xCu);
    }
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "absoluteString"));
  objc_msgSend(v4, "writeToFile:atomically:", v14, 1);

}

void sub_100061D50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_1000620B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000621C8;
  block[3] = &unk_10023B3A8;
  v7 = *(NSObject **)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v9 = v5;
  v15 = v9;
  dispatch_sync(v7, block);
  if (v6)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10006220C;
    v10[3] = &unk_10023B3A8;
    v8 = *(NSObject **)(a1 + 32);
    v11 = *(id *)(a1 + 40);
    v12 = v6;
    dispatch_sync(v8, v10);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

}

id sub_1000621C8(uint64_t a1)
{
  void *v1;
  const __CFString *v2;

  v1 = *(void **)(a1 + 32);
  if (objc_msgSend(*(id *)(a1 + 40), "state") == (id)1)
    v2 = CFSTR("true");
  else
    v2 = CFSTR("false");
  return objc_msgSend(v1, "setValue:forKey:", v2, CFSTR("optedIn"));
}

void sub_10006220C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v2, CFSTR("error"));

}

void sub_100062258(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000622F4;
  block[3] = &unk_10023B3A8;
  v4 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  dispatch_sync(v4, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

id sub_1000622F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("stateMachine"));
}

void sub_100062304(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  double v35;
  double v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  void *v50;
  NSObject *v51;
  id v52;
  void *v53;
  id obj;
  _QWORD block[4];
  id v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v53 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "registrationData"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allValues"));

  obj = v6;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v59;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v59 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "application"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("app"));

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signature"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "kt_hexString"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("signature"));

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicKey"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "kt_hexString"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v17, CFSTR("publicKey"));

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "orderedTimestamp"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "kt_toISO_8601_UTCString"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v19, CFSTR("orderedTimestamp"));

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "tbsKTIDSRegistrationData"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "kt_hexString"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v21, CFSTR("tbs"));

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "createdAt"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "description"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v23, CFSTR("createdAt"));

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signedAt"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "description"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v25, CFSTR("signedAt"));

        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uploadedAt"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "description"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v27, CFSTR("uploadedAt"));

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pushToken"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "kt_hexString"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v29, CFSTR("pushToken"));

        v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "createdAt"));
        if (v30)
        {
          v31 = (void *)v30;
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signedAt"));

          if (v32)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signedAt"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "createdAt"));
            objc_msgSend(v33, "timeIntervalSinceDate:", v34);
            v36 = v35;

            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", +[SFAnalytics fuzzyInteger:](SFAnalytics, "fuzzyInteger:", (uint64_t)v36)));
            objc_msgSend(v12, "setObject:forKeyedSubscript:", v37, CFSTR("delay"));

          }
        }
        v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signedAt"));
        if (v38)
        {
          v39 = (void *)v38;
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uploadedAt"));

          if (v40)
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uploadedAt"));
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signedAt"));
            objc_msgSend(v41, "timeIntervalSinceDate:", v42);
            v44 = v43;

            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", +[SFAnalytics fuzzyInteger:](SFAnalytics, "fuzzyInteger:", (uint64_t)v44)));
            objc_msgSend(v12, "setObject:forKeyedSubscript:", v45, CFSTR("networkDelay"));

          }
        }
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "settings"));
        v48 = objc_msgSend(v47, "allowsInternalSecurityPolicies");

        if (v48)
        {
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "altDSID"));
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v49, CFSTR("altDSID"));

          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dsid"));
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v50, CFSTR("dsid"));

        }
        objc_msgSend(v4, "addObject:", v12);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
    }
    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100062898;
  block[3] = &unk_10023B3A8;
  v51 = *(NSObject **)(a1 + 40);
  v56 = *(id *)(a1 + 48);
  v57 = v4;
  v52 = v4;
  dispatch_sync(v51, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

id sub_100062898(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("registration"));
}

void sub_1000628A8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  _QWORD block[4];
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  void *v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  id v35;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (!v4)
  {
    if (qword_1002A4620 != -1)
      dispatch_once(&qword_1002A4620, &stru_10023FDD0);
    v7 = qword_1002A4628;
    if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "KTIDStaticKeyStore listStaticKey: %@", buf, 0xCu);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("failed"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("error"));

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (+[TransparencyAnalytics hasInternalDiagnostics](TransparencyAnalytics, "hasInternalDiagnostics"))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v10 = v4;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v11)
    {
      v12 = v11;
      v19 = v5;
      v13 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v30 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "publicAccountIdentity"));
          if (v16)
          {
            v17 = *(void **)(a1 + 32);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_100062C20;
            v24[3] = &unk_10023FE18;
            v25 = v9;
            v26 = v15;
            v27 = v6;
            v28 = v16;
            objc_msgSend(v17, "findStaticKeyStoreMappingByKey:complete:", v15, v24);

          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v12);
      v5 = v19;
    }
  }
  else
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "count")));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, CFSTR("peers"));
  }

  if (objc_msgSend(v6, "count"))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100062E44;
    block[3] = &unk_10023B3A8;
    v18 = *(NSObject **)(a1 + 40);
    v22 = *(id *)(a1 + 48);
    v23 = v6;
    dispatch_sync(v18, block);

  }
}

void sub_100062BF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100062C20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mappings"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("mappings"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contactIdentifier"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("contactIdentifier"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contactExternalURI"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("contactExternalURI"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v5, "valid")));
    v11 = *(void **)(a1 + 32);
    v12 = CFSTR("valid");
  }
  else
  {
    if (qword_1002A4620 != -1)
      dispatch_once(&qword_1002A4620, &stru_10023FDF0);
    v13 = qword_1002A4628;
    if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138412546;
      v16 = v14;
      v17 = 2112;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "KTIDStaticKeyStore findByIdentifier: %@: %@", (uint8_t *)&v15, 0x16u);
    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("failed"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
    v11 = *(void **)(a1 + 32);
    v12 = CFSTR("error");
  }
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);

  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

void sub_100062E14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

id sub_100062E44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("static_key_peers"));
}

void sub_100062E54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

uint64_t sub_100062E84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100062F9C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id obj;
  _QWORD v25[4];
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (!v5 || v6)
  {
    v21 = *(_QWORD *)(a1 + 48);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v6));
    (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v22);

  }
  else
  {
    v23 = v5;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = v5;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          v13 = objc_alloc_init((Class)KTDeviceStatus);
          objc_msgSend(v13, "setIdms:", v12);
          v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pushToken")));
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSData kt_dataWithHexString:](NSData, "kt_dataWithHexString:", objc_msgSend(v14, "UTF8String")));

          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcDataStore"));
          v17 = *(_QWORD *)(a1 + 40);
          v27 = 0;
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_100063228;
          v25[3] = &unk_10023FE88;
          v18 = v13;
          v26 = v18;
          v19 = objc_msgSend(v16, "performAndWaitForDeviceId:application:error:block:", v15, v17, &v27, v25);
          v20 = v27;

          if ((v19 & 1) == 0)
            objc_msgSend(v18, "setLoggableDataError:", v20);
          objc_msgSend(v7, "addObject:", v18);

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v9);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v6 = 0;
    v5 = v23;
  }

}

id sub_100063228(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLoggableData:", a2);
}

uint64_t sub_1000632C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000634D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000635DC(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (a2)
    objc_msgSend(v4, "logFinishFailureEvent:error:", CFSTR("initiateQueryForUris"), v5);
  else
    objc_msgSend(v4, "logFinishSuccessEvent:", CFSTR("initiateQueryForUris"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", v5));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_100063780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanseErrorForXPC:", a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_100063F70(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (qword_1002A4620 != -1)
    dispatch_once(&qword_1002A4620, &stru_10023FF18);
  v3 = qword_1002A4628;
  if (os_log_type_enabled((os_log_t)qword_1002A4628, OS_LOG_TYPE_INFO))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "uploadedDeviceSignature:tbs:complete: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_10006403C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_1000643B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4628;
  qword_1002A4628 = (uint64_t)v1;

}

void sub_100064A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100064A5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100064A6C(uint64_t a1)
{

}

void sub_100064A74(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id obj;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v4 + 40);
  v5 = a2;
  LOBYTE(v3) = objc_msgSend(v3, "verifyInclusionProofDownloadRecord:error:", v5, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_10023FF78);
    v6 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "revision log inclusion proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logClient"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "downloadId"));

    objc_msgSend(v8, "deleteDownloadId:", v9);
  }
  else
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_10023FF58);
    v10 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v25 = v11;
      v26 = 2112;
      v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to verify inclusion proof downloadId %{public}@: %@", buf, 0x16u);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v22 = *(id *)(v13 + 40);
    objc_msgSend(v8, "failHeadDownloadRecord:failure:error:", v5);

    v14 = v22;
    v9 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v14;
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v21 = *(id *)(v16 + 40);
  v17 = objc_msgSend(v15, "persistWithError:", &v21);
  objc_storeStrong((id *)(v16 + 40), v21);

  if ((v17 & 1) == 0)
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_10023FF98);
    v18 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v25 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to save inclusion proof results: %@", buf, 0xCu);
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v20, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("handleInclusionDownload"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  }
}

void sub_100064D8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100064DBC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100064DEC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100064E1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065114(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065144(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_1000653A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000653D4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id obj;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v4 + 40);
  v5 = a2;
  v6 = objc_msgSend(v3, "verifyConsistencyProofDownloadRecord:error:", v5, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v6;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 1)
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_100240060);
    v7 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "consistency proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logClient"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "downloadId"));

    objc_msgSend(v9, "deleteDownloadId:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextStore"));
    objc_msgSend(v11, "clearGossip");
  }
  else
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_100240040);
    v12 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2112;
      v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to verify consistency proof for downloadId %{public}@: %@", buf, 0x16u);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v23 = *(id *)(v15 + 40);
    objc_msgSend(v11, "failHeadDownloadRecord:failure:error:", v5);

    objc_storeStrong((id *)(v15 + 40), v23);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v22 = *(id *)(v17 + 40);
  v18 = objc_msgSend(v16, "persistWithError:", &v22);
  objc_storeStrong((id *)(v17 + 40), v22);

  if ((v18 & 1) == 0)
  {
    if (qword_1002A4630 != -1)
      dispatch_once(&qword_1002A4630, &stru_100240080);
    v19 = qword_1002A4638;
    if (os_log_type_enabled((os_log_t)qword_1002A4638, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "failed to save consistency proof results: %@", buf, 0xCu);
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v21, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("handleConsistencyDownload"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  }
}

void sub_100065700(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065730(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065760(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065790(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065BD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065C00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065C30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100065C60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066B90(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066BC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066BF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066C20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066C50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066C80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100066CB0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4638;
  qword_1002A4638 = (uint64_t)v1;

}

void sub_100067134(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100067164(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_1000676DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100067720(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100067730(uint64_t a1)
{

}

void sub_100067738(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100067768(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint32_t v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  void *v43;
  void *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (qword_1002A4640 != -1)
      dispatch_once(&qword_1002A4640, &stru_100240280);
    v10 = qword_1002A4648;
    if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 141558530;
      v51 = 1752392040;
      v52 = 2112;
      v53 = v7;
      v54 = 2112;
      v55 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
    }
    v11 = objc_alloc((Class)KTVerifierResult);
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v13 = objc_msgSend(v11, "initWithUri:application:failure:", v7, v12, v9);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;
LABEL_7:

    goto LABEL_25;
  }
  v16 = objc_msgSend(*(id *)(a1 + 32), "getUnsigned:", "verificationResult");
  v17 = *(_QWORD *)(a1 + 72);
  v18 = *(void **)(a1 + 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountKey"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "loggableDatas"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsResponseTime"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "metadata"));
  v49 = 0;
  v23 = objc_msgSend(v18, "validateAndReportPeerOrEnroll:type:transparentData:accountKey:loggableDatas:initialResult:idsResponseTime:responseMetadata:error:", v7, v17, v8, v19, v20, v16, v21, v22, &v49);
  v12 = v49;

  if (v23 == (id)1)
  {
    if (qword_1002A4640 != -1)
      dispatch_once(&qword_1002A4640, &stru_1002402A0);
    v9 = 0;
    v24 = (void *)qword_1002A4648;
    if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(void **)(a1 + 32);
      v26 = v24;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "verificationId"));
      *(_DWORD *)buf = 138543362;
      v51 = (uint64_t)v27;
      v28 = "Validate peer succeeded for verificationId %{public}@";
      v29 = v26;
      v30 = OS_LOG_TYPE_DEFAULT;
      v31 = 12;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, v31);

    }
  }
  else
  {
    if (qword_1002A4640 != -1)
      dispatch_once(&qword_1002A4640, &stru_1002402C0);
    v9 = 0;
    v32 = (void *)qword_1002A4648;
    if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_ERROR))
    {
      v33 = *(void **)(a1 + 32);
      v26 = v32;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "verificationId"));
      *(_DWORD *)buf = 138543618;
      v51 = (uint64_t)v27;
      v52 = 2112;
      v53 = v12;
      v28 = "Validate Peer failed for verificationId %{public}@: %@";
      v29 = v26;
      v30 = OS_LOG_TYPE_ERROR;
      v31 = 22;
      goto LABEL_17;
    }
  }
  v34 = objc_alloc((Class)KTVerifierResult);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "loggableDatas"));
  v37 = objc_msgSend(v34, "initWithUri:application:ktResult:transparentData:loggableDatas:", v7, v35, v23, v8, v36);
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v39 = *(void **)(v38 + 40);
  *(_QWORD *)(v38 + 40) = v37;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setFailure:", v12);
  if (!v23)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsResponseTime"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountKey"));
    v42 = objc_msgSend(v8, "optInAfter:accountKey:", v40, v41);

    if (v42)
    {
      if (qword_1002A4640 != -1)
        dispatch_once(&qword_1002A4640, &stru_1002402E0);
      v43 = (void *)qword_1002A4648;
      if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *(void **)(a1 + 40);
        v45 = v43;
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "applicationID"));
        *(_DWORD *)buf = 141558530;
        v51 = 1752392040;
        v52 = 2112;
        v53 = v7;
        v54 = 2112;
        v55 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Clearing IDS cache for %{mask.hash}@[%@]", buf, 0x20u);

      }
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setOptedIn:", 0);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setOptInTernaryState:", 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uri"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "applicationID"));
      objc_msgSend(v15, "clearIDSCacheForUri:application:", v47, v48);

      goto LABEL_7;
    }
  }
LABEL_25:

}

void sub_100067CD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100067D00(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100067D30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100067D60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100068200(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  id v28;
  id v29;
  void *v30;
  void **v31;
  uint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  id v48;

  v3 = a2;
  if (objc_msgSend(v3, "getUnsigned:", "verificationResult") == (id)2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "idsResponseTime"));
    if (!v4)
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "creationTime"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "applicationID"));
    v42 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getLatestSuccessfulSingleQueryForUri:application:requestYoungerThan:error:", v6, v7, v4, &v42));
    v9 = v42;

    if (v8)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore"));
      v41 = v9;
      v31 = _NSConcreteStackBlock;
      v32 = 3221225472;
      v33 = sub_100068704;
      v34 = &unk_1002403B8;
      v11 = v8;
      v35 = v11;
      v36 = a1[4];
      v12 = a1[5];
      v13 = a1[6];
      v37 = v12;
      v38 = v13;
      v14 = v3;
      v39 = v14;
      v40 = a1[7];
      v15 = objc_msgSend(v10, "performAndWaitForRpcId:error:block:", v11, &v41, &v31);
      v16 = v41;

      if ((v15 & 1) == 0)
      {
        if (qword_1002A4640 != -1)
          dispatch_once(&qword_1002A4640, &stru_1002403D8);
        v17 = qword_1002A4648;
        if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543618;
          v44 = v11;
          v45 = 2112;
          v46 = (uint64_t)v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to find ServerRPC %{public}@: %@", buf, 0x16u);
        }
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore", v31, v32, v33, v34));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "onMocSetPendingResultForVerification:", v14));

        (*((void (**)(void))a1[7] + 2))();
      }

      v20 = v35;
      v9 = v16;
    }
    else
    {
      if (qword_1002A4640 != -1)
        dispatch_once(&qword_1002A4640, &stru_100240348);
      v27 = qword_1002A4648;
      if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
      {
        v28 = a1[4];
        v29 = a1[5];
        *(_DWORD *)buf = 138543874;
        v44 = v28;
        v45 = 2160;
        v46 = 1752392040;
        v47 = 2112;
        v48 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "validatePeer: no successful rpc for %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "onMocSetPendingResultForVerification:", v3));

      (*((void (**)(void))a1[7] + 2))();
    }

    goto LABEL_24;
  }
  if (qword_1002A4640 != -1)
    dispatch_once(&qword_1002A4640, &stru_100240328);
  v21 = qword_1002A4648;
  if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
  {
    v22 = a1[4];
    v23 = a1[5];
    *(_DWORD *)buf = 138543874;
    v44 = v22;
    v45 = 2160;
    v46 = 1752392040;
    v47 = 2112;
    v48 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "validatePeer: reusing completed result %{public}@ for %{mask.hash}@", buf, 0x20u);
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uri"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "applicationID"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "verifierResultForPeer:application:", v25, v26));

  if (v9)
  {
    (*((void (**)(void))a1[7] + 2))();
LABEL_24:

  }
}

void sub_1000686A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_1000686D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100068704(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v3 = a2;
  if (qword_1002A4640 != -1)
    dispatch_once(&qword_1002A4640, &stru_100240368);
  v4 = qword_1002A4648;
  if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    v14 = v5;
    v15 = 2114;
    v16 = v6;
    v17 = 2160;
    v18 = 1752392040;
    v19 = 2112;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "validatePeer: validating rpc %{public}@ for %{public}@ for %{mask.hash}@", buf, 0x2Au);
  }
  v9 = *(void **)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000688B0;
  v10[3] = &unk_100240390;
  v10[4] = v9;
  v11 = v8;
  v12 = *(id *)(a1 + 72);
  objc_msgSend(v9, "validatePeerIDSKTVerification:serverRPC:completionBlock:", v11, v3, v10);

}

void sub_100068880(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_1000688B0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uri"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "verifierResultForPeer:application:", v4, v5));

  if (v6)
    v7 = v6;
  else
    v7 = v8;
  (*(void (**)(_QWORD, id, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v7, 0);

}

void sub_100068968(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100068D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_100068DB4(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t String;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;

  v5 = a2;
  if (qword_1002A4640 != -1)
    dispatch_once(&qword_1002A4640, &stru_100240420);
  v6 = (void *)qword_1002A4648;
  if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v6;
    String = KTUIStatusGetString(objc_msgSend(v5, "uiStatus"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(String);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uri"));
    v11 = 138543874;
    v12 = v9;
    v13 = 2160;
    v14 = 1752392040;
    v15 = 2112;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "validatePeers: UIStatus %{public}@ for uri %{mask.hash}@", (uint8_t *)&v11, 0x20u);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v5);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
  if ((objc_msgSend(v5, "sentToIDS") & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "addObject:", v5);
  if (a3)
    objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_100068F38(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100068F68(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100068F98(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (v2)
  {
    if (qword_1002A4640 != -1)
      dispatch_once(&qword_1002A4640, &stru_1002404A8);
    v3 = qword_1002A4648;
    if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "failed to kick off query for validatePeers uris with no current RPC: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_100069068(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_1000693CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_1000693FC(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void **v7;
  void *i;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id obj;
  _QWORD v25[5];
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];

  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = a2;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v29;
    v5 = &unk_1002A4000;
    v6 = &unk_1002A4000;
    v7 = _NSConcreteStackBlock;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v4)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        if (v5[200] != -1)
          dispatch_once(&qword_1002A4640, &stru_1002404E8);
        v10 = *((_QWORD *)v6 + 201);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v11 = v10;
          v12 = v3;
          v13 = v4;
          v14 = v7;
          v15 = v6;
          v16 = v5;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "verificationId"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rpcId"));
          *(_DWORD *)buf = 138543618;
          v33 = v17;
          v34 = 2114;
          v35 = v18;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "performing peer validation for verificationId %{public}@ with received rpcId %{public}@", buf, 0x16u);

          v5 = v16;
          v6 = v15;
          v7 = v14;
          v4 = v13;
          v3 = v12;

        }
        v19 = *(void **)(a1 + 32);
        v20 = *(void **)(a1 + 40);
        v25[0] = v7;
        v25[1] = 3221225472;
        v25[2] = sub_100069678;
        v25[3] = &unk_100240530;
        v25[4] = v9;
        v21 = v19;
        v22 = *(_QWORD *)(a1 + 40);
        v26 = v21;
        v27 = v22;
        objc_msgSend(v20, "validatePeerIDSKTVerification:singleQuery:completionBlock:", v9, v21, v25);

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
    }
    while (v3);
  }

}

void sub_100069648(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069678(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t String;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  v3 = a2;
  if (qword_1002A4640 != -1)
    dispatch_once(&qword_1002A4640, &stru_100240508);
  v4 = (void *)qword_1002A4648;
  if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "verificationId"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "rpcId"));
    String = KTResultGetString(objc_msgSend(v3, "succeed"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(String);
    v15 = 138543874;
    v16 = v7;
    v17 = 2114;
    v18 = v8;
    v19 = 2112;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "verificationId %{public}@ with rpcId %{public}@ result: %@", (uint8_t *)&v15, 0x20u);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "dataStore"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "uri"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  v14 = objc_msgSend(v11, "verifierResultForPeer:application:", v12, v13);

}

void sub_100069814(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069844(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069874(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069938(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069AB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  if (objc_msgSend(v3, "rpcType"))
  {
    if (objc_msgSend(v3, "rpcType") == (id)1)
    {
      objc_msgSend(*(id *)(a1 + 32), "validatePendingPeersForBatchQuery:", v3);
    }
    else
    {
      if (qword_1002A4640 != -1)
        dispatch_once(&qword_1002A4640, &stru_1002405B0);
      v4 = (void *)qword_1002A4648;
      if (os_log_type_enabled((os_log_t)qword_1002A4648, OS_LOG_TYPE_ERROR))
      {
        v5 = v4;
        v6 = 134217984;
        v7 = objc_msgSend(v3, "rpcType");
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unknown server rpc type: %lld", (uint8_t *)&v6, 0xCu);

      }
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "validatePendingPeersForSingleQuery:", v3);
  }

}

void sub_100069BD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069C04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4648;
  qword_1002A4648 = (uint64_t)v1;

}

void sub_100069E5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_100069E8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006A164(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006A194(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006A424(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006A454(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

uint64_t start()
{
  char *v0;
  char *v1;
  void *v2;
  transparencyd *v3;
  MainServiceDelegate *v4;
  dispatch_workloop_t v5;
  KTIDSSupportServiceDelegate *v6;
  void *v7;
  KTAccountsSupportServiceDelegate *v8;
  void *v9;
  MainServiceDelegate *v10;
  transparencyd *v11;
  transparencyd *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v20;
  NSObject *v21;
  int v22;
  int *v23;
  char *v24;
  const char *v25;
  void *v26;
  int v27;
  int *v28;
  char *v29;
  KTSignalTermHandler *v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void (*v34)(uint64_t, void *);
  void *v35;
  transparencyd *v36;
  _QWORD v37[4];
  transparencyd *v38;
  _QWORD handler[4];
  MainServiceDelegate *v40;
  uint8_t v41[4];
  int v42;
  __int16 v43;
  char *v44;
  uint8_t buf[1032];

  +[NSError _setFileNameLocalizationEnabled:](NSError, "_setFileNameLocalizationEnabled:", 0);
  bzero(buf, 0x400uLL);
  if (!_set_user_dir_suffix("com.apple.transparencyd")
    || !confstr(65537, (char *)buf, 0x400uLL)
    || mkdir((const char *)buf, 0x1C0u) && *__error() != 17)
  {
    if (qword_1002A4650 != -1)
      dispatch_once(&qword_1002A4650, &stru_1002407F8);
    v20 = (void *)qword_1002A4658;
    if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_ERROR))
    {
      v21 = v20;
      v22 = *__error();
      v23 = __error();
      v24 = strerror(*v23);
      *(_DWORD *)v41 = 67109378;
      v42 = v22;
      v43 = 2080;
      v44 = v24;
      v25 = "failed to initialize temporary directory (%d): %s";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v25, v41, 0x12u);

    }
LABEL_24:
    exit(1);
  }
  v0 = realpath_DARWIN_EXTSN((const char *)buf, 0);
  if (!v0)
  {
    if (qword_1002A4650 != -1)
      dispatch_once(&qword_1002A4650, &stru_100240818);
    v26 = (void *)qword_1002A4658;
    if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_ERROR))
    {
      v21 = v26;
      v27 = *__error();
      v28 = __error();
      v29 = strerror(*v28);
      *(_DWORD *)v41 = 67109378;
      v42 = v27;
      v43 = 2080;
      v44 = v29;
      v25 = "failed to resolve temporary directory (%d): %s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v1 = v0;
  setenv("SQLITE_TMPDIR", v0, 1);
  free(v1);
  v2 = objc_autoreleasePoolPush();
  v3 = objc_alloc_init(transparencyd);
  v4 = objc_alloc_init(MainServiceDelegate);
  -[MainServiceDelegate setDaemonContext:](v4, "setDaemonContext:", v3);
  v5 = dispatch_workloop_create("com.apple.transparencyd.xpc");
  -[MainServiceDelegate setXpcQueue:](v4, "setXpcQueue:", v5);

  v6 = objc_alloc_init(KTIDSSupportServiceDelegate);
  -[KTIDSSupportServiceDelegate setDaemonContext:](v6, "setDaemonContext:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MainServiceDelegate xpcQueue](v4, "xpcQueue"));
  -[KTIDSSupportServiceDelegate setXpcQueue:](v6, "setXpcQueue:", v7);

  v8 = objc_alloc_init(KTAccountsSupportServiceDelegate);
  -[KTAccountsSupportServiceDelegate setDaemonContext:](v8, "setDaemonContext:", v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[MainServiceDelegate xpcQueue](v4, "xpcQueue"));
  -[KTAccountsSupportServiceDelegate setXpcQueue:](v8, "setXpcQueue:", v9);

  v30 = -[KTSignalTermHandler initWithSIGTERMNotification:]([KTSignalTermHandler alloc], "initWithSIGTERMNotification:", &stru_1002406B0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10006AB14;
  handler[3] = &unk_100240738;
  v10 = v4;
  v40 = v10;
  xpc_activity_register("com.apple.transparencyd.dutycycle", XPC_ACTIVITY_CHECK_IN, handler);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10006AE44;
  v37[3] = &unk_100240738;
  v11 = v3;
  v38 = v11;
  xpc_activity_register("com.apple.transparencyd.self-validate", XPC_ACTIVITY_CHECK_IN, v37);
  v32 = _NSConcreteStackBlock;
  v33 = 3221225472;
  v34 = sub_10006B020;
  v35 = &unk_100240738;
  v12 = v11;
  v36 = v12;
  xpc_activity_register("com.apple.transparencyd.24h", XPC_ACTIVITY_CHECK_IN, &v32);
  v13 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.transparencyd"));
  objc_msgSend(v13, "setDelegate:", v10);
  objc_msgSend(v13, "resume");
  v14 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.transparencyd.ids-support"));
  objc_msgSend(v14, "setDelegate:", v6);
  objc_msgSend(v14, "resume");
  v15 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.transparencyd.accounts-support"));
  objc_msgSend(v15, "setDelegate:", v8);
  objc_msgSend(v15, "resume");

  objc_autoreleasePoolPop(v2);
  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_1002407B8);
  v16 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "transparencyd accepting work", buf, 2u);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop", v30, v32, v33, v34, v35));
  objc_msgSend(v17, "run");

  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_1002407D8);
  v18 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "transparencyd stopping", buf, 2u);
  }

  return 1;
}

void sub_10006AA5C(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_1002406D0);
  v1 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Received signal SIGTERM. Will terminate when clean.", v2, 2u);
  }
}

void sub_10006AAE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006AB14(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  void *v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  dispatch_qos_class_t qos_class;
  dispatch_queue_attr_t v9;
  NSObject *v10;
  dispatch_queue_attr_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD v16[4];
  _xpc_activity_s *v17;
  id v18;
  uint8_t buf[4];
  xpc_activity_state_t v20;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  state = xpc_activity_get_state(v3);
  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_1002406F0);
  v6 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v20 = state;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "XPC dutycycle activity triggered, state: %ld", buf, 0xCu);
  }
  if (state == 2)
  {
    v7 = xpc_activity_copy_dispatch_queue(v3);
    *(_DWORD *)buf = 0;
    qos_class = dispatch_queue_get_qos_class(v7, (int *)buf);
    v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = dispatch_queue_attr_make_with_qos_class(v10, qos_class, *(int *)buf);
    v12 = objc_claimAutoreleasedReturnValue(v11);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "daemonContext"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "workloop"));
    v15 = dispatch_queue_create_with_target_V2("com.apple.transparencyd.dutycycle.workloop", v12, v14);

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10006AD3C;
    v16[3] = &unk_10023B3A8;
    v17 = v3;
    v18 = *(id *)(a1 + 32);
    dispatch_sync(v15, v16);

  }
  objc_autoreleasePoolPop(v4);

}

void sub_10006AD0C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006AD3C(uint64_t a1)
{
  _xpc_activity_s *v2;
  NSObject *v3;
  id v4;
  uint8_t buf[16];

  v2 = *(_xpc_activity_s **)(a1 + 32);
  if (v2 && xpc_activity_should_defer(v2) && xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3))
  {
    if (qword_1002A4650 != -1)
      dispatch_once(&qword_1002A4650, &stru_100240710);
    v3 = qword_1002A4658;
    if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "duty cycle deferred", buf, 2u);
    }
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "daemonContext"));
    objc_msgSend(v4, "runDutyCycleForActivity:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10006AE14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006AE44(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  NSObject *v6;
  int v7;
  xpc_activity_state_t v8;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_100240758);
  v5 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_INFO))
  {
    v7 = 134217984;
    v8 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC self-validate activity triggered, state: %ld", (uint8_t *)&v7, 0xCu);
  }
  if (state == 2)
  {
    if ((+[TransparencySettings enableSelfValidationXPCActivity](TransparencySettings, "enableSelfValidationXPCActivity") & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "selfValidateNotification:", v3);
    }
    else
    {
      if (qword_1002A4650 != -1)
        dispatch_once(&qword_1002A4650, &stru_100240778);
      v6 = qword_1002A4658;
      if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "XPC self-validate activity ignored by setting on internal build", (uint8_t *)&v7, 2u);
      }
      xpc_activity_set_state(v3, 5);
    }
  }

}

void sub_10006AFC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006AFF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006B020(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  void *v6;
  int v7;
  xpc_activity_state_t v8;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (qword_1002A4650 != -1)
    dispatch_once(&qword_1002A4650, &stru_100240798);
  v5 = qword_1002A4658;
  if (os_log_type_enabled((os_log_t)qword_1002A4658, OS_LOG_TYPE_INFO))
  {
    v7 = 134217984;
    v8 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC settings activity triggered, state: %ld", (uint8_t *)&v7, 0xCu);
  }
  if (state == 2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "globalSettings"));
    objc_msgSend(v6, "fetchSettings:force:", v3, 0);

    objc_msgSend(*(id *)(a1 + 32), "xpc24HrNotification:", v3);
  }

}

void sub_10006B134(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006B164(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006B194(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006B1C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

void sub_10006B1F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_1002A4658;
  qword_1002A4658 = (uint64_t)v1;

}

uint64_t sub_10006B224()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A4668);
  sub_10006F07C(v0, (uint64_t)qword_1002A4668);
  return Logger.init(transparencyCategory:)(0x656E6F5A4B43544BLL, 0xE800000000000000);
}

void sub_10006B280()
{
  byte_1002A4688 = 1;
  qword_1002A4690 = 0xED00006863746546;
}

void sub_10006B2A8()
{
  byte_1002A46A0 = 1;
  qword_1002A46A8 = 0xEB00000000686374;
}

uint64_t variable initialization expression of KTFetchCloudStorageOperation.previousServerChangeToken()
{
  return 0;
}

uint64_t variable initialization expression of KTUpdateCloudStorageOperation.shouldRetry()
{
  return 0;
}

uint64_t sub_10006B2DC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage, v3, 0, 0);
  return *v1;
}

uint64_t sub_10006B320(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

void *sub_10006B368(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage, a1, 33, 0);
  return &j__swift_endAccess;
}

unint64_t variable initialization expression of KTFetchCloudStorageOperation.serverChangeTokens()
{
  return sub_10006B3BC((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t sub_10006B3BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C((uint64_t *)&unk_10029EE70);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10006CDD0((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006B4C4()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10006B50C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10006B55C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_10006B5A0()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context);
}

uint64_t sub_10006B5B0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler));
}

uint64_t sub_10006B5C0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch);
}

uint64_t sub_10006B5D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason + 8));
  return v1;
}

uint64_t KTFetchCloudStorageOperation.shouldRetry.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD8))();
}

uint64_t static KTFetchCloudStorageOperation.lastCKFetch(deps:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(a1, "smDataStore");
  if (qword_1002A4698 != -1)
    swift_once(&qword_1002A4698, sub_10006B2A8);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "getSettingsDate:", v4);

  swift_unknownObjectRelease(v3);
  if (v5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);

    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 0;
  }
  else
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

id KTFetchCloudStorageOperation.__allocating_init(deps:initialFetch:userInteractive:reason:context:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  objc_class *v6;
  id v13;
  id v14;

  v13 = objc_allocWithZone(v6);
  v14 = sub_10006D5A0(a1, a2, a3, a4, a5, a6);

  return v14;
}

id KTFetchCloudStorageOperation.init(deps:initialFetch:userInteractive:reason:context:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;

  v8 = sub_10006D5A0(a1, a2, a3, a4, a5, a6);

  return v8;
}

uint64_t sub_10006BA88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);

  if ((unint64_t)a1 >> 62)
  {
LABEL_29:
    if (a1 < 0)
      v31 = a1;
    else
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v31);
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v3)
    {
LABEL_3:
      v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
      v5 = 4;
      v34 = v3;
      v35 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(v1
                                                                     + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler)
                                                       + 96);
      while (1)
      {
        v1 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
        else
          v8 = *(id *)(a1 + 8 * v5);
        v9 = v8;
        v10 = v5 - 3;
        if (__OFADD__(v1, 1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v11 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration), "init");
        v12 = objc_msgSend(v9, "zoneName");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        v16 = (void *)v35(v13, v15);
        swift_bridgeObjectRelease(v15);
        objc_msgSend(v11, "setPreviousServerChangeToken:", v16);

        if ((v4 & 0xC000000000000001) != 0)
        {
          if (v4 < 0)
            v1 = v4;
          else
            v1 = v4 & 0xFFFFFFFFFFFFFF8;
          v17 = __CocoaDictionary.count.getter(v1);
          if (__OFADD__(v17, 1))
            goto LABEL_27;
          v4 = sub_10006CF18(v1, v17 + 1);
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
        v1 = v4;
        v20 = sub_10006CDD0((uint64_t)v9);
        v21 = *(_QWORD *)(v4 + 16);
        v22 = (v19 & 1) == 0;
        v23 = v21 + v22;
        if (__OFADD__(v21, v22))
          goto LABEL_26;
        v24 = v19;
        if (*(_QWORD *)(v4 + 24) >= v23)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_10006D414();
        }
        else
        {
          sub_10006D168(v23, isUniquelyReferenced_nonNull_native);
          v25 = sub_10006CDD0((uint64_t)v9);
          if ((v24 & 1) != (v26 & 1))
          {
            v33 = sub_10006D6DC(0, &qword_10029ED80, CKRecordZoneID_ptr);
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
            __break(1u);
            return result;
          }
          v20 = v25;
        }
        v1 = v34;
        if ((v24 & 1) != 0)
        {
          v6 = *(_QWORD *)(v4 + 56);
          v7 = *(void **)(v6 + 8 * v20);
          *(_QWORD *)(v6 + 8 * v20) = v11;

        }
        else
        {
          *(_QWORD *)(v4 + 8 * (v20 >> 6) + 64) |= 1 << v20;
          *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v20) = v9;
          *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20) = v11;
          v27 = *(_QWORD *)(v4 + 16);
          v28 = __OFADD__(v27, 1);
          v29 = v27 + 1;
          if (v28)
            goto LABEL_28;
          *(_QWORD *)(v4 + 16) = v29;
          v30 = v9;
        }

        swift_bridgeObjectRelease(0x8000000000000000);
        ++v5;
        if (v10 == v34)
          goto LABEL_34;
      }
    }
  }
  v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
LABEL_34:
  swift_bridgeObjectRelease(a1);
  return v4;
}

Swift::Void __swiftcall KTFetchCloudStorageOperation.groupStart()()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  objc_class *v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  Class v16;
  id v17;
  NSString v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  v2 = objc_msgSend(v1, "ckdatabase");
  if (v2)
  {
    v31 = v2;
    v3 = objc_msgSend(v1, "cloudRecords");
    if (v3)
    {
      v4 = v3;
      v5 = (objc_class *)objc_msgSend(v3, "cloudKitZones");
      isa = v5;
      if (!v5)
      {
        v7 = sub_10006D6DC(0, &qword_10029ED80, CKRecordZoneID_ptr);
        v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v7);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v8);
      }
      v9 = sub_10006D6DC(0, &qword_10029ED80, CKRecordZoneID_ptr);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
      v11 = objc_msgSend(objc_allocWithZone((Class)NSBlockOperation), "init");
      objc_msgSend(v0, "dependOnBeforeGroupFinished:", v11);
      v12 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesOperation), "init");
      v13 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation);
      *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation) = v12;
      v14 = v12;

      v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x118))(v10);
      swift_bridgeObjectRelease(v10);
      sub_10006D6DC(0, &qword_10029ED98, CKFetchRecordZoneChangesConfiguration_ptr);
      sub_10006D714();
      v16 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      objc_msgSend(v14, "setConfigurationsByRecordZoneID:", v16);

      objc_msgSend(v14, "setRecordZoneIDs:", isa);
      if (*((_BYTE *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch) == 1)
        objc_msgSend(v4, "clearDataStore:", 1);
      if (*((_BYTE *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive) == 1)
        objc_msgSend(v14, "setQualityOfService:", 25);
      v17 = v14;
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "setName:", v18);

      v19 = swift_allocObject(&unk_100240848, 24, 7);
      *(_QWORD *)(v19 + 16) = v0;
      aBlock[4] = sub_10006D790;
      v33 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10006C1C0;
      aBlock[3] = &unk_100240860;
      v20 = _Block_copy(aBlock);
      v21 = v33;
      v22 = v0;
      swift_release(v21);
      objc_msgSend(v17, "setRecordZoneChangeTokensUpdatedBlock:", v20);
      _Block_release(v20);
      v23 = swift_allocObject(&unk_100240898, 24, 7);
      *(_QWORD *)(v23 + 16) = v22;
      v24 = v22;
      CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_10006D858, v23);
      v25 = swift_allocObject(&unk_1002408C0, 24, 7);
      *(_QWORD *)(v25 + 16) = v4;
      swift_unknownObjectRetain(v4);
      CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10006E460, v25);
      v26 = swift_allocObject(&unk_1002408E8, 32, 7);
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(v26 + 24) = v4;
      v27 = v24;
      swift_unknownObjectRetain(v4);
      CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_10006E630, v26);
      v28 = swift_allocObject(&unk_100240910, 32, 7);
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = v11;
      v29 = v27;
      v30 = v11;
      CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_10006EB10, v28);
      objc_msgSend(v31, "addOperation:", v17);

      swift_unknownObjectRelease(v4);
    }
    else
    {

    }
  }
}

uint64_t sub_10006C1C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  uint64_t v7;
  void (*v8)(void *, void *, void *, unint64_t);
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;

  v4 = a4;
  v8 = *(void (**)(void *, void *, void *, unint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a4)
  {
    swift_retain(v7);
    v9 = a2;
    v10 = a3;
    v11 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v13 = v12;

  }
  else
  {
    swift_retain(v7);
    v14 = a2;
    v15 = a3;
    v13 = 0xF000000000000000;
  }
  v8(a2, a3, v4, v13);

  sub_10006F218((uint64_t)v4, v13);
  return swift_release(v7);
}

uint64_t sub_10006C270(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, "setZoneCreated:", 0);
    objc_msgSend(a1, "setZoneSubscribed:", 0);
    objc_msgSend(a1, "setServerChangeToken:", 0);
  }
  return 1;
}

id KTUpdateCloudStorageOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void KTFetchCloudStorageOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTFetchCloudStorageOperation", 42, "init()", 6, 0);
  __break(1u);
}

id KTFetchCloudStorageOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10006C460()
{
  id *v0;

  return *v0;
}

uint64_t sub_10006C468@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10006C470()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10006C480(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10006C4C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10006C500(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10006C564()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10006C598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10006C5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_10006C644@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10006C654(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10006C660(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F284((unint64_t *)&unk_10029EE90, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_10021423C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10006C6A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F284((unint64_t *)&unk_10029EE90, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_10021423C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10006C6E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10006C724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10006C77C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10006C790(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10006C860(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10006F118((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10006F118((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10006F0F8(v12);
  return v7;
}

uint64_t sub_10006C860(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10006CA18(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10006CA18(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10006CAAC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10006CC84(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10006CC84(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10006CAAC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10006CC20(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10006CC20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10006F03C(&qword_10029EE50);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10006CC84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10006F03C(&qword_10029EE50);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10006CDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10006CE00(a1, v4);
}

unint64_t sub_10006CE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10006D6DC(0, &qword_10029ED80, CKRecordZoneID_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

Swift::Int sub_10006CF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10006F03C(&qword_10029EE68);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10006D6DC(0, &qword_10029ED80, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_10006D6DC(0, &qword_10029ED98, CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_10006D168(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_10006D168(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029EE68);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain(v5);
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v16 << 6);
      }
      else
      {
        if (__OFADD__(v16++, 1))
          goto LABEL_41;
        if (v16 >= v13)
        {
LABEL_34:
          swift_release(v5);
          v3 = v37;
          if ((v38 & 1) != 0)
          {
            v36 = 1 << *(_BYTE *)(v5 + 32);
            if (v36 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v10 = -1 << v36;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v25 = v10[v16];
        if (!v25)
        {
          v26 = v16 + 1;
          if (v16 + 1 >= v13)
            goto LABEL_34;
          v25 = v10[v26];
          if (!v25)
          {
            while (1)
            {
              v16 = v26 + 1;
              if (__OFADD__(v26, 1))
                break;
              if (v16 >= v13)
                goto LABEL_34;
              v25 = v10[v16];
              ++v26;
              if (v25)
                goto LABEL_23;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v16;
        }
LABEL_23:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v16 << 6);
      }
      v27 = 8 * v23;
      v28 = *(void **)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + v27);
      if ((v38 & 1) == 0)
      {
        v30 = v28;
        v31 = v29;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v34 = v19 == v33;
          if (v19 == v33)
            v19 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v35 == -1);
        v20 = __clz(__rbit64(~v35)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v21) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

id sub_10006D414()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006F03C(&qword_10029EE68);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    if (!v21)
      break;
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id sub_10006D5A0(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  _BYTE *v6;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  objc_super v20;

  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_previousServerChangeToken] = 0;
  v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage] = 0;
  v13 = OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens;
  v14 = v6;
  v15 = sub_10006B3BC((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)&v6[v13] = v15;
  Date.init()(v15);
  *(_QWORD *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps] = a1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context] = a6;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch] = a2;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive] = a3;
  type metadata accessor for KTCKZone();
  v16 = a6;
  v17 = a1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler] = sub_1000A56EC((uint64_t)v16);
  v18 = &v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason];
  *v18 = a4;
  v18[1] = a5;

  v20.receiver = v14;
  v20.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation(0);
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t sub_10006D6DC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10006D714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029EDA0;
  if (!qword_10029EDA0)
  {
    v1 = sub_10006D6DC(255, &qword_10029ED80, CKRecordZoneID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10029EDA0);
  }
  return result;
}

uint64_t sub_10006D76C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006D790(uint64_t result, void *a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, void *);
  id v12;

  if (a2)
  {
    v4 = (void *)result;
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    v6 = a2;
    v7 = objc_msgSend(v4, "zoneName");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = *(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v5 + 104);
    v12 = v6;
    v11(v8, v10, a2);

    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

uint64_t sub_10006D840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006D850(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10006D858(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  NSString v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v28;
  NSString v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, void *);
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  NSString v68;
  id v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  id v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  NSString v87;
  uint8_t *v88;
  id v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  uint64_t *v99;
  uint8_t *bufa;
  uint8_t *buf;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  id v106;
  _QWORD *v107;
  _QWORD *v108;
  unsigned int v109;
  unsigned int v110;
  os_log_t log;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;

  v6 = a2;
  v8 = *(_QWORD **)(v5 + 16);
  v9 = *(void **)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  if ((a5 & 0x100) == 0)
  {
    v10 = a2;
    v11 = objc_msgSend(v9, "logger");
    if (qword_1002A4680 != -1)
      swift_once(&qword_1002A4680, sub_10006B280);
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "logResultForEvent:hardFailure:result:", v12, 1, 0);

    if (qword_1002A4660 != -1)
      swift_once(&qword_1002A4660, sub_10006B224);
    v13 = type metadata accessor for Logger(0);
    sub_10006F07C(v13, (uint64_t)qword_1002A4668);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v116 = (void *)v18;
      v112 = v6;
      *(_DWORD *)v17 = 136315138;
      v19 = objc_msgSend(v14, "zoneName");
      v20 = v8;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      v24 = v21;
      v8 = v20;
      v115 = (void *)sub_10006C790(v24, v23, (uint64_t *)&v116);
      v6 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v23);

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "zone fetch success: %s ", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {

    }
    v48 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    v49 = objc_msgSend(v14, "zoneName");
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    v53 = *(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v48 + 104);
    v54 = v10;
    v53(v50, v52, v6);

    swift_bridgeObjectRelease(v52);
    return;
  }
  v25 = a5;
  swift_errorRetain(a2);
  v28 = objc_msgSend(v9, "logger");
  if (qword_1002A4680 != -1)
    swift_once(&qword_1002A4680, sub_10006B280);
  v29 = String._bridgeToObjectiveC()();
  v30 = (void *)_convertErrorToNSError(_:)(v6);
  objc_msgSend(v28, "logResultForEvent:hardFailure:result:", v29, 1, v30);

  if (qword_1002A4660 != -1)
    swift_once(&qword_1002A4660, sub_10006B224);
  v31 = type metadata accessor for Logger(0);
  sub_10006F07C(v31, (uint64_t)qword_1002A4668);
  v32 = a1;
  sub_10006F158(v6, a3, a4, v25, 1);
  v33 = v32;
  v34 = sub_10006F158(v6, a3, a4, v25, 1);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter();
  v113 = a3;
  v106 = v33;
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v99 = (uint64_t *)swift_slowAlloc(8, -1);
    bufa = (uint8_t *)swift_slowAlloc(32, -1);
    v116 = bufa;
    *(_DWORD *)v37 = 136315394;
    v109 = v25;
    v38 = objc_msgSend(v33, "zoneName");
    v102 = v9;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = a4;
    v41 = v8;
    v42 = v6;
    v44 = v43;

    v115 = (void *)sub_10006C790(v39, v44, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v37 + 4, v37 + 12);
    v45 = v44;
    v6 = v42;
    v8 = v41;
    a4 = v40;
    swift_bridgeObjectRelease(v45);

    *(_WORD *)(v37 + 12) = 2112;
    swift_errorRetain(v6);
    v46 = _swift_stdlib_bridgeErrorToNSError(v6);
    v115 = (void *)v46;
    v25 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v37 + 14, v37 + 22);
    *v99 = v46;
    v9 = v102;
    sub_10006F1E4(v6, v113, v40, v109, 1);
    sub_10006F1E4(v6, v113, v40, v109, 1);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "zone fetch fail: %s %@", (uint8_t *)v37, 0x16u);
    v47 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v99, 1, v47);
    swift_slowDealloc(v99, -1, -1);
    swift_arrayDestroy(bufa, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(bufa, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    sub_10006F1E4(v6, a3, a4, v25, 1);
    sub_10006F1E4(v6, a3, a4, v25, 1);

  }
  v116 = v6;
  swift_errorRetain(v6);
  v55 = sub_10006F03C(&qword_10029EE58);
  type metadata accessor for CKError(0);
  v57 = v56;
  if ((swift_dynamicCast(&v115, &v116, v55, v56, 6) & 1) == 0)
  {
    v69 = 0;
    goto LABEL_32;
  }
  log = (os_log_t)a4;
  v58 = v115;
  v59 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
  _BridgedStoredNSError.code.getter(&v116, v57, v59);
  if (v116 != (void *)5)
  {
    if (v116 == (void *)21)
    {
      v110 = v25;
      v81 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
      v82 = objc_msgSend(v106, "zoneName");
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v85 = v84;

      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v81 + 104))(v83, v85, 0);
      swift_bridgeObjectRelease(v85);
      v86 = objc_allocWithZone((Class)KTPendingFlag);
      v87 = String._bridgeToObjectiveC()();
      v69 = objc_msgSend(v86, "initWithFlag:delayInSeconds:", v87, 0.1);

      v70 = v106;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v104 = v9;
        v88 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        v115 = (void *)v105;
        buf = v88;
        *(_DWORD *)v88 = 136315138;
        v89 = objc_msgSend(v70, "zoneName");
        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        v108 = v8;
        v91 = v6;
        v93 = v92;

        v9 = v104;
        v114 = sub_10006C790(v90, v93, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v88 + 4, v88 + 12);
        v94 = v93;
        v6 = v91;
        v8 = v108;
        swift_bridgeObjectRelease(v94);

        v80 = "will re-fetch the zone %s";
        goto LABEL_26;
      }
LABEL_29:

      goto LABEL_30;
    }
    if (v116 == (void *)26)
    {
      v110 = v25;
      v60 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
      v61 = objc_msgSend(v106, "zoneName");
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), _QWORD))(*(_QWORD *)v60 + 120))(v62, v64, sub_10006C270, 0);
      swift_bridgeObjectRelease(v64);
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CloudKitZoneRecreate"));
      v66 = v65;
      v67 = objc_allocWithZone((Class)KTPendingFlag);
      v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v66);
      v69 = objc_msgSend(v67, "initWithFlag:delayInSeconds:", v68, 0.1);

      v70 = v106;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v103 = v9;
        v73 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        v115 = (void *)v105;
        buf = v73;
        *(_DWORD *)v73 = 136315138;
        v74 = objc_msgSend(v70, "zoneName");
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v107 = v8;
        v76 = v6;
        v78 = v77;

        v9 = v103;
        v114 = sub_10006C790(v75, v78, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v73 + 4, v73 + 12);
        v79 = v78;
        v6 = v76;
        v8 = v107;
        swift_bridgeObjectRelease(v79);

        v80 = "will recreate the zone %s";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v71, v72, v80, buf, 0xCu);
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(buf, -1, -1);

LABEL_30:
        v25 = v110;
        goto LABEL_31;
      }
      goto LABEL_29;
    }
    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0xE0))(1);
  }

  v69 = 0;
LABEL_31:
  a4 = (unint64_t)log;
LABEL_32:
  v95 = (void *)_convertErrorToNSError(_:)(v6);
  objc_msgSend(v8, "setError:", v95);

  sub_10006F1E4(v6, v113, a4, v25, 1);
  if (v69)
  {
    v96 = v69;
    v97 = objc_msgSend(v9, "flagHandler");
    if (v97)
    {
      v98 = v97;
      objc_msgSend(v97, "handlePendingFlag:", v96);

      swift_unknownObjectRelease(v98);
    }
    else
    {

    }
  }
}

uint64_t sub_10006E43C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10006E460(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v13;
  uint64_t v14;

  v3 = *(void **)(v1 + 16);
  if (qword_1002A4660 != -1)
    swift_once(&qword_1002A4660, sub_10006B224);
  v4 = type metadata accessor for Logger(0);
  sub_10006F07C(v4, (uint64_t)qword_1002A4668);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v13 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "delete block: %@", v8, 0xCu);
    v11 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {

  }
  return objc_msgSend(v3, "deleteRecordIDWithCkrecordID:", v5);
}

uint64_t sub_10006E604()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10006E630(void *a1, void *a2, char a3)
{
  uint64_t v3;
  char v4;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  os_log_t log;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a3;
  if ((a3 & 1) != 0)
  {
    v7 = *(void **)(v3 + 16);
    swift_errorRetain(a2);
    if (qword_1002A4660 != -1)
      swift_once(&qword_1002A4660, sub_10006B224);
    v8 = type metadata accessor for Logger(0);
    sub_10006F07C(v8, (uint64_t)qword_1002A4668);
    sub_10006F0E0(a2, 1);
    v9 = a1;
    sub_10006F0E0(a2, 1);
    v10 = v9;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v38 = v4;
      v14 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v13 = 138412546;
      v41 = (uint64_t)v10;
      v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v13 + 4, v13 + 12);
      *v14 = v10;

      *(_WORD *)(v13 + 12) = 2112;
      swift_errorRetain(a2);
      v16 = _swift_stdlib_bridgeErrorToNSError(a2);
      v41 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v13 + 14, v13 + 22);
      v14[1] = v16;
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "merge error: %@ %@", (uint8_t *)v13, 0x16u);
      v17 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v14, 2, v17);
      v18 = v14;
      v4 = v38;
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {

      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
    }

    v35 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v7, "setError:", v35);

  }
  else
  {
    v19 = *(void **)(v3 + 24);
    v20 = qword_1002A4660;
    v21 = a2;
    if (v20 != -1)
      swift_once(&qword_1002A4660, sub_10006B224);
    v22 = type metadata accessor for Logger(0);
    sub_10006F07C(v22, (uint64_t)qword_1002A4668);
    sub_10006F0E0(a2, 0);
    v23 = a1;
    sub_10006F0E0(a2, 0);
    v24 = v23;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v39 = v4;
      v27 = swift_slowAlloc(22, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v40 = (uint64_t)v24;
      v41 = v37;
      *(_DWORD *)v27 = 138412546;
      v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 4, v27 + 12);
      *v28 = v24;

      *(_WORD *)(v27 + 12) = 2080;
      v30 = CKRecord.recordType.getter();
      v32 = v31;
      v40 = sub_10006C790(v30, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v32);
      sub_10006F0EC(a2, 0);
      sub_10006F0EC(a2, 0);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "merge block: %@[%s]", (uint8_t *)v27, 0x16u);
      v33 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v28, 1, v33);
      swift_slowDealloc(v28, -1, -1);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      v34 = v27;
      v4 = v39;
      swift_slowDealloc(v34, -1, -1);

      objc_msgSend(v19, "updatedRecordWithCkrecord:", v21, v25);
    }
    else
    {

      sub_10006F0EC(a2, 0);
      sub_10006F0EC(a2, 0);

      objc_msgSend(v19, "updatedRecordWithCkrecord:", v21, log);
    }
  }
  sub_10006F0EC(a2, v4 & 1);
}

uint64_t sub_10006EAE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10006EB10(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __objc2_class *v5;
  id v6;
  NSString v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  NSString v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(char **)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v5 = TransparencyResponse;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1002A4660 != -1)
      swift_once(&qword_1002A4660, sub_10006B224);
    v15 = type metadata accessor for Logger(0);
    sub_10006F07C(v15, (uint64_t)qword_1002A4668);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a1);
      v21 = _swift_stdlib_bridgeErrorToNSError(a1);
      v31 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
      *v20 = v21;
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "fetchRecordZoneChangesResultBlock: %@", v19, 0xCu);
      v22 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v20, 1, v22);
      v23 = v20;
      v5 = TransparencyResponse;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
    }

    v24 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v4, "setError:", v24);

    sub_10006F094(a1, 1);
  }
  else
  {
    v6 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps], "smDataStore");
    if (qword_1002A4698 != -1)
      swift_once(&qword_1002A4698, sub_10006B2A8);
    v7 = String._bridgeToObjectiveC()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, "setSettingsDate:date:", v7, isa);

    swift_unknownObjectRelease(v6);
    if (qword_1002A4660 != -1)
      swift_once(&qword_1002A4660, sub_10006B224);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10006F07C(v9, (uint64_t)qword_1002A4668);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetchRecordZoneChangesResultBlock", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

  }
  v25 = objc_msgSend(*(id *)&v4[(unint64_t)v5[86].vtable], "logger");
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v4, "error");
  if (v27)
  {
    v28 = v27;
    v29 = (void *)_convertErrorToNSError(_:)(v27);

  }
  else
  {
    v29 = 0;
  }
  objc_msgSend(v25, "logResultForEvent:hardFailure:result:", v26, 0, v29);

  v30 = objc_msgSend(v4, "operationQueue");
  objc_msgSend(v30, "addOperation:", v3);

}

uint64_t type metadata accessor for KTFetchCloudStorageOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A46B8;
  if (!qword_1002A46B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTFetchCloudStorageOperation);
  return result;
}

uint64_t sub_10006EF78()
{
  return type metadata accessor for KTFetchCloudStorageOperation(0);
}

uint64_t sub_10006EF80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = &unk_1002140E8;
  v4[4] = &unk_1002140E8;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = &unk_1002140E8;
  v4[9] = &unk_100214100;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10006F03C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10006F07C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10006F094(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

uint64_t *sub_10006F0A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

id sub_10006F0E0(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain();
  else
    return a1;
}

void sub_10006F0EC(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease();
  else

}

uint64_t sub_10006F0F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10006F118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10006F158(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  id v8;

  if ((a5 & 1) != 0)
    return swift_errorRetain();
  v8 = a1;
  return sub_10006F18C(a2, a3);
}

uint64_t sub_10006F18C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10006F1A0(result, a2);
  return result;
}

uint64_t sub_10006F1A0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10006F1E4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_errorRelease(a1);

  return sub_10006F218(a2, a3);
}

uint64_t sub_10006F218(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10006F22C(result, a2);
  return result;
}

uint64_t sub_10006F22C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_10006F3E0(a1, (unint64_t *)&unk_10029F7A0, (uint64_t)&unk_100240A08);
}

uint64_t sub_10006F284(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F2C4()
{
  return sub_10006F284((unint64_t *)&unk_10029EE80, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214154);
}

uint64_t sub_10006F2F0()
{
  return sub_10006F284((unint64_t *)&unk_10029F7B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214180);
}

uint64_t sub_10006F31C()
{
  return sub_10006F284((unint64_t *)&unk_10029EE90, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_10021423C);
}

uint64_t sub_10006F348()
{
  return sub_10006F284((unint64_t *)&unk_10029F7C0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214208);
}

uint64_t sub_10006F374()
{
  return sub_10006F284((unint64_t *)&unk_10029EEA0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1002141C4);
}

uint64_t sub_10006F3A0()
{
  return sub_10006F284((unint64_t *)&unk_10029F7D0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100214328);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10006F3E0(a1, qword_10029F7F0, (uint64_t)&unk_100240A30);
}

void sub_10006F3E0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10006F424()
{
  return sub_10006F284((unint64_t *)&unk_10029EEB0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1002142EC);
}

unint64_t sub_10006F454()
{
  unint64_t result;

  result = qword_10029F7E0;
  if (!qword_10029F7E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10029F7E0);
  }
  return result;
}

uint64_t sub_10006F498()
{
  return sub_10006F284((unint64_t *)&unk_10029EEC0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100214364);
}

uint64_t sub_10006F4C4()
{
  return sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
}

void sub_10006F4F0()
{
  swift_deletedMethodError();
  __break(1u);
}

void sub_10006F50C(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*sub_10006F514())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

double sub_10006F524(double a1, double a2)
{
  return a2;
}

void sub_10006F52C(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*sub_10006F534())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

double sub_10006F544(double a1, double a2, double a3)
{
  return a3;
}

void sub_10006F54C(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_10006F554())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10006F564()
{
  return 0x65746E49656D6954;
}

void sub_10006F584(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  BOOL v5;

  v5 = a2 > a5 || a4 > a2;
  *(_QWORD *)(a1 + 24) = &type metadata for DewConfigurationTimeInterval;
  *(_QWORD *)(a1 + 32) = &off_10029F070;
  if (v5)
    a2 = a3;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
}

double sub_10006F5B0@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double *sub_10006F5BC@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double *v4;
  double v5;
  double v6;
  double v7;

  v5 = *result;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 > *result || v5 > v7)
    v5 = *v4;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  *(double *)a4 = v5;
  *(double *)(a4 + 8) = v6;
  *(double *)(a4 + 16) = v7;
  return result;
}

uint64_t sub_10006F5E4(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_10006F5EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006F5F4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10006F5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_10006F604(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10006F60C()
{
  return 7630409;
}

uint64_t sub_10006F61C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  if (a4 >= result && result >= a3)
    a2 = result;
  *a5 = a2;
  a5[1] = a3;
  a5[3] = &type metadata for DewConfigurationInt;
  a5[4] = &off_10029F098;
  a5[2] = a4;
  return result;
}

uint64_t *sub_10006F648@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *result;
  v6 = v4[1];
  v7 = v4[2];
  if (*result < v6 || v7 < v5)
    v5 = *v4;
  a4[3] = a2;
  a4[4] = a3;
  *a4 = v5;
  a4[1] = v6;
  a4[2] = v7;
  return result;
}

uint64_t sub_10006F670()
{
  return 1953384789;
}

unint64_t sub_10006F680@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  if (a4 >= result && result >= a3)
    a2 = result;
  *a5 = a2;
  a5[1] = a3;
  a5[3] = (unint64_t)&type metadata for DewConfigurationUInt;
  a5[4] = (unint64_t)&off_10029F0C0;
  a5[2] = a4;
  return result;
}

unint64_t *sub_10006F6AC@<X0>(unint64_t *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *result;
  v6 = v4[1];
  v7 = v4[2];
  if (*result < v6 || v7 < v5)
    v5 = *v4;
  a4[3] = a2;
  a4[4] = a3;
  *a4 = v5;
  a4[1] = v6;
  a4[2] = v7;
  return result;
}

uint64_t sub_10006F6D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_10006F704(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t sub_10006F738()
{
  return 0x676E69727453;
}

uint64_t sub_10006F74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = &type metadata for DewConfigurationString;
  a3[4] = &off_10029F0E8;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10006F76C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10006F778@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  a4[3] = a2;
  a4[4] = a3;
  *a4 = v4;
  a4[1] = v5;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_10006F788(char a1)
{
  return a1 & 1;
}

uint64_t sub_10006F790(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t sub_10006F798()
{
  return 1819242306;
}

uint64_t sub_10006F7A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 24) = &type metadata for DewConfigurationBool;
  *(_QWORD *)(a2 + 32) = &off_10029F110;
  *(_BYTE *)a2 = result;
  return result;
}

void sub_10006F7C4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

char *sub_10006F7D0@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *result;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)a4 = v4;
  return result;
}

uint64_t sub_10006F7E0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10006F80C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_10006F838()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_10006F864@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

void *sub_10006F87C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

id sub_10006F8B8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(id *)(v0 + 24);
}

void sub_10006F8E8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 24, v4, 1, 0);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

void *sub_10006F92C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10006F968()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 32, 7);
  sub_10006F99C();
  return v1;
}

uint64_t sub_10006F99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void *v17;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_10006FB3C((uint64_t)&_swiftEmptyArrayStorage);
  sub_10006FC9C();
  static DispatchQoS.unspecified.getter();
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_10006FCD8();
  v13 = sub_10006F03C(&qword_10029F058);
  v14 = sub_10006FD20();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000011, 0x80000001001DEDD0, v11, v8, v5, 0);
  return v1;
}

unint64_t sub_10006FB3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029F330);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v23 = v3 + 64;
  swift_retain(v3);
  v22 = v1;
  v6 = (uint64_t *)(v1 + 48);
  while (1)
  {
    v24 = v5;
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    v10 = v6[1];
    v12 = v6[2];
    v11 = v6[3];
    v14 = v6[4];
    v13 = v6[5];
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    result = sub_100072E70(v7, v8);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v4[6] + 16 * result);
    *v17 = v7;
    v17[1] = v8;
    v18 = (_QWORD *)(v4[7] + 48 * result);
    *v18 = v9;
    v18[1] = v10;
    v18[2] = v12;
    v18[3] = v11;
    v18[4] = v14;
    v18[5] = v13;
    v19 = v4[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v4[2] = v21;
    v6 += 8;
    v5 = v24 - 1;
    if (v24 == 1)
    {
      swift_release(v4);
      v1 = v22;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10006FC9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029F050;
  if (!qword_10029F050)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10029F050);
  }
  return result;
}

unint64_t sub_10006FCD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A0850;
  if (!qword_1002A0850)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1002A0850);
  }
  return result;
}

unint64_t sub_10006FD20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A0860;
  if (!qword_1002A0860)
  {
    v1 = sub_10006FD6C(&qword_10029F058);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002A0860);
  }
  return result;
}

uint64_t sub_10006FD6C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10006FDB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029F318);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100074E7C(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_100072E70(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_100073F04(&v18, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006FEDC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 120))();
  v8 = swift_allocObject(&unk_100240B80, 88, 7);
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = a3[1];
  *(_OWORD *)(v8 + 40) = *a3;
  *(_OWORD *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 72) = a3[2];
  v10 = swift_allocObject(&unk_100240BA8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1000700B0;
  *(_QWORD *)(v10 + 24) = v8;
  v16[4] = sub_10007025C;
  v17 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10007027C;
  v16[3] = &unk_100240BC0;
  v11 = _Block_copy(v16);
  v12 = *a3;
  v19 = a3[1];
  v20 = v12;
  v18 = a3[2];
  v13 = v17;
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  sub_1000702B4((uint64_t)&v20);
  sub_1000702B4((uint64_t)&v19);
  sub_1000702B4((uint64_t)&v18);
  swift_retain(v10);
  swift_release(v13);
  dispatch_sync(v7, v11);

  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 116, 100, 20, 1);
  swift_release(v8);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10007006C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000700B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_BYTE *);
  __int128 v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  uint64_t *v6;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)(v0 + 16) + 112);
  v15 = *(_OWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 56);
  v13 = *(_OWORD *)(v0 + 72);
  v14 = v4;
  swift_bridgeObjectRetain(v2);
  sub_1000702B4((uint64_t)&v15);
  sub_1000702B4((uint64_t)&v14);
  sub_1000702B4((uint64_t)&v13);
  v5 = (uint64_t (*)(_BYTE *, _QWORD))v3(v12);
  v7 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v11 = *v7;
  *v7 = 0x8000000000000000;
  sub_100074774((_OWORD *)(v0 + 40), v1, v2, isUniquelyReferenced_nonNull_native);
  v9 = *v7;
  *v7 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v2);
  return v5(v12, 0);
}

uint64_t sub_100070190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  __int128 v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100073F04((__int128 *)a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_10007490C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_100073CEC(a1);
    sub_100073E0C(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_100073CEC((uint64_t)v11);
  }
}

uint64_t sub_10007024C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007025C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10007027C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10007029C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000702AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000702B4(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000702DC()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  v2 = swift_allocObject(&unk_100240BF8, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1000703F4;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_100074EF4;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10007027C;
  v6[3] = &unk_100240C10;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 116, 105, 20, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000703F4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  v2 = result;
  v3 = 0;
  v25 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v8 = v7 | (v3 << 6);
      goto LABEL_5;
    }
    v22 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v26)
      return swift_release(v2);
    v23 = *(_QWORD *)(v25 + 8 * v22);
    ++v3;
    if (!v23)
    {
      v3 = v22 + 1;
      if (v22 + 1 >= v26)
        return swift_release(v2);
      v23 = *(_QWORD *)(v25 + 8 * v3);
      if (!v23)
      {
        v3 = v22 + 2;
        if (v22 + 2 >= v26)
          return swift_release(v2);
        v23 = *(_QWORD *)(v25 + 8 * v3);
        if (!v23)
        {
          v3 = v22 + 3;
          if (v22 + 3 >= v26)
            return swift_release(v2);
          v23 = *(_QWORD *)(v25 + 8 * v3);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v23 - 1) & v23;
    v8 = __clz(__rbit64(v23)) + (v3 << 6);
LABEL_5:
    v9 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 48 * v8);
    v10 = *v9;
    v11 = v9[1];
    v13 = v9[2];
    v12 = (void *)v9[3];
    v15 = v9[4];
    v14 = (void *)v9[5];
    v16 = sub_10006F03C(&qword_10029F328);
    v17 = swift_allocObject(v16, 64, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1002143C0;
    swift_bridgeObjectRetain_n(v11, 2);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v18._countAndFlagsBits = 2108704;
    v18._object = (void *)0xE300000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRetain(v14);
    v19._countAndFlagsBits = v15;
    v19._object = v14;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v14);
    v20._countAndFlagsBits = 2108704;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRetain(v12);
    v21._countAndFlagsBits = v13;
    v21._object = v12;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 32) = v10;
    *(_QWORD *)(v17 + 40) = v11;
    print(_:separator:terminator:)(v17, 32, 0xE100000000000000, 10, 0xE100000000000000);
    result = swift_bridgeObjectRelease(v17);
  }
  v24 = v22 + 4;
  if (v24 >= v26)
    return swift_release(v2);
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
  {
    v3 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v3 >= v26)
      return swift_release(v2);
    v23 = *(_QWORD *)(v25 + 8 * v3);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100070698()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000706A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return v0;
}

uint64_t sub_1000706CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1000706F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for DewGlobalState();
  v1 = swift_allocObject(v0, 32, 7);
  result = sub_10006F99C();
  qword_1002A4B58 = v1;
  return result;
}

uint64_t sub_100070730@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100070770()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_100070778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t sub_100070794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*sub_1000707B4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000707C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 24);
  swift_bridgeObjectRetain(a2);
  v19 = v18(a7, a8);
  v21 = v20;
  v29 = a1;
  *(_QWORD *)&v30 = a1;
  v22 = a6;
  *((_QWORD *)&v30 + 1) = a2;
  *(_QWORD *)&v31 = a3;
  *((_QWORD *)&v31 + 1) = a4;
  *(_QWORD *)&v32 = v19;
  *((_QWORD *)&v32 + 1) = v20;
  v23 = v31;
  *(_OWORD *)a9 = v30;
  *(_OWORD *)(a9 + 16) = v23;
  *(_OWORD *)(a9 + 32) = v32;
  *(_QWORD *)(a9 + 48) = a5;
  v25 = a9 + *(int *)(type metadata accessor for DewConfigurationObject(0, a7, a8, v24) + 40);
  v26 = *(_QWORD *)(a7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, a6, a7);
  v27 = qword_1002A4B50;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v21);
  if (v27 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)qword_1002A4B58 + 152))(v29, a2, &v30);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease_n(a2, 2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v22, a7);
}

uint64_t type metadata accessor for DewConfigurationObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100074EC4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DewConfigurationObject);
}

unint64_t sub_100070930()
{
  return sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_10007093C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100070970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_1000709B4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j_j__swift_endAccess;
}

void *sub_1000709F0()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t sub_100070A14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + 24) = a1;
  return v3;
}

uint64_t sub_100070A58(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t sub_100070A88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v30 = a4;
  v8 = type metadata accessor for Optional(0, a2);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v15 = a1[1];
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96);
  v18 = swift_bridgeObjectRetain(v15);
  v19 = v17(v18);
  if (*(_QWORD *)(v19 + 16) && (v20 = sub_100072E70(v16, v15), (v21 & 1) != 0))
  {
    sub_100072ED4(*(_QWORD *)(v19 + 56) + 40 * v20, (uint64_t)v31);
  }
  else
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
  }
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v19);
  v22 = sub_10006F03C(&qword_10029F060);
  v23 = swift_dynamicCast(v11, v31, v22, a2, 6);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v11, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  else
  {
    v24(v11, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
    type metadata accessor for DewConfigurationObject(0, a2, a3, v26);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  }
}

uint64_t sub_100070C70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(_BYTE *, _QWORD);
  _BYTE v13[32];
  _QWORD v14[5];

  v8 = *a1;
  v9 = a1[1];
  type metadata accessor for DewConfigurationObject(0, a3, a4, a4);
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 32);
  swift_bridgeObjectRetain(v9);
  v10(v14, a2, a3, a4);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 112))(v13);
  sub_100070190((uint64_t)v14, v8, v9);
  return v11(v13, 0);
}

double sub_100070D30()
{
  double result;
  _QWORD v1[4];
  _WORD v2[8];

  v1[0] = 0xD000000000000026;
  v1[1] = 0x80000001001DF120;
  v1[2] = 0xD00000000000008FLL;
  v1[3] = 0x80000001001DF150;
  strcpy((char *)v2, "TimeInterval");
  HIBYTE(v2[6]) = 0;
  v2[7] = -5120;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD000000000000026, 0x80000001001DF120, v1);
  qword_1002A7C88 = 0xD000000000000026;
  unk_1002A7C90 = 0x80000001001DF120;
  qword_1002A7C98 = 0xD00000000000008FLL;
  unk_1002A7CA0 = 0x80000001001DF150;
  strcpy((char *)&qword_1002A7CA8, "TimeInterval");
  unk_1002A7CB5 = 0;
  unk_1002A7CB6 = -5120;
  qword_1002A7CB8 = 0;
  result = 10.0;
  unk_1002A7CC0 = xmmword_1002143D0;
  qword_1002A7CD0 = 0x40AC200000000000;
  return result;
}

uint64_t *sub_100070E38()
{
  if (qword_1002A4B60 != -1)
    swift_once(&qword_1002A4B60, sub_100070D30);
  return &qword_1002A7C88;
}

double sub_100070E78()
{
  double result;
  _QWORD v1[4];
  _WORD v2[8];

  v1[0] = 0xD00000000000001ALL;
  v1[1] = 0x80000001001DEFB0;
  v1[2] = 0xD000000000000089;
  v1[3] = 0x80000001001DEFD0;
  strcpy((char *)v2, "TimeInterval");
  HIBYTE(v2[6]) = 0;
  v2[7] = -5120;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD00000000000001ALL, 0x80000001001DEFB0, v1);
  qword_1002A7CD8 = 0xD00000000000001ALL;
  unk_1002A7CE0 = 0x80000001001DEFB0;
  qword_1002A7CE8 = 0xD000000000000089;
  unk_1002A7CF0 = 0x80000001001DEFD0;
  strcpy((char *)&qword_1002A7CF8, "TimeInterval");
  unk_1002A7D05 = 0;
  unk_1002A7D06 = -5120;
  qword_1002A7D08 = 1;
  result = 10.0;
  *(_OWORD *)algn_1002A7D10 = xmmword_1002143E0;
  qword_1002A7D20 = 0x4082C00000000000;
  return result;
}

uint64_t *sub_100070F84()
{
  if (qword_1002A4B68 != -1)
    swift_once(&qword_1002A4B68, sub_100070E78);
  return &qword_1002A7CD8;
}

double sub_100070FC4()
{
  double result;
  _QWORD v1[6];

  v1[0] = 0xD000000000000019;
  v1[1] = 0x80000001001DF0C0;
  v1[2] = 0xD00000000000003CLL;
  v1[3] = 0x80000001001DF0E0;
  v1[4] = 1953384789;
  v1[5] = 0xE400000000000000;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD000000000000019, 0x80000001001DF0C0, v1);
  qword_1002A7D28 = 0xD000000000000019;
  unk_1002A7D30 = 0x80000001001DF0C0;
  qword_1002A7D38 = 0xD00000000000003CLL;
  unk_1002A7D40 = 0x80000001001DF0E0;
  qword_1002A7D48 = 1953384789;
  unk_1002A7D50 = 0xE400000000000000;
  *(_QWORD *)&result = 1;
  xmmword_1002A7D58 = xmmword_1002143F0;
  unk_1002A7D68 = xmmword_100214400;
  return result;
}

uint64_t *sub_1000710B4()
{
  if (qword_1002A4B70 != -1)
    swift_once(&qword_1002A4B70, sub_100070FC4);
  return &qword_1002A7D28;
}

double sub_1000710F4()
{
  double result;
  _QWORD v1[6];

  v1[0] = 0xD000000000000019;
  v1[1] = 0x80000001001DF060;
  v1[2] = 0xD00000000000003CLL;
  v1[3] = 0x80000001001DF080;
  v1[4] = 1953384789;
  v1[5] = 0xE400000000000000;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD000000000000019, 0x80000001001DF060, v1);
  qword_1002A7D78 = 0xD000000000000019;
  unk_1002A7D80 = 0x80000001001DF060;
  qword_1002A7D88 = 0xD00000000000003CLL;
  unk_1002A7D90 = 0x80000001001DF080;
  qword_1002A7D98 = 1953384789;
  unk_1002A7DA0 = 0xE400000000000000;
  *(_QWORD *)&result = 1;
  xmmword_1002A7DA8 = xmmword_1002143F0;
  unk_1002A7DB8 = xmmword_100214400;
  return result;
}

uint64_t *sub_1000711E4()
{
  if (qword_1002A4B78 != -1)
    swift_once(&qword_1002A4B78, sub_1000710F4);
  return &qword_1002A7D78;
}

double sub_100071224()
{
  double result;
  _QWORD v1[4];
  _WORD v2[8];

  v1[0] = 0xD00000000000001ALL;
  v1[1] = 0x80000001001DEFB0;
  v1[2] = 0xD000000000000089;
  v1[3] = 0x80000001001DEFD0;
  strcpy((char *)v2, "TimeInterval");
  HIBYTE(v2[6]) = 0;
  v2[7] = -5120;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD00000000000001ALL, 0x80000001001DEFB0, v1);
  qword_1002A7DC8 = 0xD00000000000001ALL;
  unk_1002A7DD0 = 0x80000001001DEFB0;
  qword_1002A7DD8 = 0xD000000000000089;
  unk_1002A7DE0 = 0x80000001001DEFD0;
  strcpy((char *)&qword_1002A7DE8, "TimeInterval");
  unk_1002A7DF5 = 0;
  unk_1002A7DF6 = -5120;
  qword_1002A7DF8 = 1;
  result = 10.0;
  unk_1002A7E00 = xmmword_100214410;
  qword_1002A7E10 = 0x4072C00000000000;
  return result;
}

uint64_t *sub_100071330()
{
  if (qword_1002A4B80 != -1)
    swift_once(&qword_1002A4B80, sub_100071224);
  return &qword_1002A7DC8;
}

double sub_100071370()
{
  double result;
  _QWORD v1[4];
  _WORD v2[8];

  v1[0] = 0xD000000000000021;
  v1[1] = 0x80000001001DEF30;
  v1[2] = 0xD000000000000046;
  v1[3] = 0x80000001001DEF60;
  strcpy((char *)v2, "TimeInterval");
  HIBYTE(v2[6]) = 0;
  v2[7] = -5120;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  (*(void (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD000000000000021, 0x80000001001DEF30, v1);
  qword_1002A7E18 = 0xD000000000000021;
  unk_1002A7E20 = 0x80000001001DEF30;
  qword_1002A7E28 = 0xD000000000000046;
  unk_1002A7E30 = 0x80000001001DEF60;
  strcpy((char *)&qword_1002A7E38, "TimeInterval");
  unk_1002A7E45 = 0;
  unk_1002A7E46 = -5120;
  qword_1002A7E48 = 1;
  result = 30.0;
  *(_OWORD *)algn_1002A7E50 = xmmword_100214420;
  qword_1002A7E60 = 0x40AC200000000000;
  return result;
}

uint64_t *sub_10007147C()
{
  if (qword_1002A4B88 != -1)
    swift_once(&qword_1002A4B88, sub_100071370);
  return &qword_1002A7E18;
}

uint64_t sub_1000714BC()
{
  uint64_t result;
  _QWORD v1[6];

  v1[0] = 0xD000000000000012;
  v1[1] = 0x80000001001DEEE0;
  v1[2] = 0xD00000000000002DLL;
  v1[3] = 0x80000001001DEF00;
  v1[4] = 1819242306;
  v1[5] = 0xE400000000000000;
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  result = (*(uint64_t (**)(unint64_t, unint64_t, _QWORD *))(*(_QWORD *)qword_1002A4B58 + 152))(0xD000000000000012, 0x80000001001DEEE0, v1);
  qword_1002A7E68 = 0xD000000000000012;
  unk_1002A7E70 = 0x80000001001DEEE0;
  qword_1002A7E78 = 0xD00000000000002DLL;
  unk_1002A7E80 = 0x80000001001DEF00;
  qword_1002A7E88 = 1819242306;
  unk_1002A7E90 = 0xE400000000000000;
  qword_1002A7E98 = 1;
  byte_1002A7EA0 = 1;
  return result;
}

uint64_t *sub_1000715A4()
{
  if (qword_1002A4B90 != -1)
    swift_once(&qword_1002A4B90, sub_1000714BC);
  return &qword_1002A7E68;
}

id sub_1000715E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  objc_super v5;

  v1 = type metadata accessor for DewConfiguration();
  v2 = swift_allocObject(v1, 32, 7);
  v3 = v0;
  *(_QWORD *)(v2 + 16) = sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config] = v2;

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for DewConfigurationObjectiveC();
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000716D0(void *a1)
{
  objc_class *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = objc_allocWithZone(v1);
  v4 = type metadata accessor for DewConfiguration();
  v5 = swift_allocObject(v4, 32, 7);
  v6 = (char *)v3;
  v7 = a1;
  *(_QWORD *)(v5 + 16) = sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config] = v5;

  v10.receiver = v6;
  v10.super_class = v1;
  v8 = objc_msgSendSuper2(&v10, "init");

  return v8;
}

id sub_100071774(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = type metadata accessor for DewConfiguration();
  v4 = swift_allocObject(v3, 32, 7);
  v5 = v1;
  v6 = a1;
  *(_QWORD *)(v4 + 16) = sub_10006FDB0((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config] = v4;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for DewConfigurationObjectiveC();
  v7 = objc_msgSendSuper2(&v9, "init");

  return v7;
}

double sub_1000718A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  double v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B60;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B60, sub_100070D30);
  v3 = unk_1002A7C90;
  v4 = unk_1002A7CA0;
  v5 = unk_1002A7CB0;
  v8[0] = qword_1002A7C88;
  v8[1] = unk_1002A7C90;
  v8[2] = qword_1002A7C98;
  v8[3] = unk_1002A7CA0;
  v8[4] = qword_1002A7CA8;
  v8[5] = unk_1002A7CB0;
  v8[6] = qword_1002A7CB8;
  v9 = unk_1002A7CC0;
  v10 = qword_1002A7CD0;
  v6 = *(void (**)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7C90);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

uint64_t sub_100071AB8(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **);
  double v10;
  _QWORD v11[7];
  __int128 v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v4 = qword_1002A4B60;
  swift_retain(v3);
  if (v4 != -1)
    swift_once(&qword_1002A4B60, sub_100070D30);
  v5 = unk_1002A7C90;
  v6 = unk_1002A7CA0;
  v7 = unk_1002A7CB0;
  v11[0] = qword_1002A7C88;
  v11[1] = unk_1002A7C90;
  v11[2] = qword_1002A7C98;
  v11[3] = unk_1002A7CA0;
  v11[4] = qword_1002A7CA8;
  v11[5] = unk_1002A7CB0;
  v11[6] = qword_1002A7CB8;
  v12 = unk_1002A7CC0;
  v13 = qword_1002A7CD0;
  v10 = a1;
  v8 = *(void (**)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v3 + 136);
  swift_bridgeObjectRetain(unk_1002A7C90);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v8(v11, &v10, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  return swift_release(v3);
}

double sub_100071CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  double v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B68;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B68, sub_100070E78);
  v3 = unk_1002A7CE0;
  v4 = unk_1002A7CF0;
  v5 = unk_1002A7D00;
  v8[0] = qword_1002A7CD8;
  v8[1] = unk_1002A7CE0;
  v8[2] = qword_1002A7CE8;
  v8[3] = unk_1002A7CF0;
  v8[4] = qword_1002A7CF8;
  v8[5] = unk_1002A7D00;
  v8[6] = qword_1002A7D08;
  v9 = *(_OWORD *)algn_1002A7D10;
  v10 = qword_1002A7D20;
  v6 = *(void (**)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7CE0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

uint64_t sub_100071EF8(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **);
  double v10;
  _QWORD v11[7];
  __int128 v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v4 = qword_1002A4B68;
  swift_retain(v3);
  if (v4 != -1)
    swift_once(&qword_1002A4B68, sub_100070E78);
  v5 = unk_1002A7CE0;
  v6 = unk_1002A7CF0;
  v7 = unk_1002A7D00;
  v11[0] = qword_1002A7CD8;
  v11[1] = unk_1002A7CE0;
  v11[2] = qword_1002A7CE8;
  v11[3] = unk_1002A7CF0;
  v11[4] = qword_1002A7CF8;
  v11[5] = unk_1002A7D00;
  v11[6] = qword_1002A7D08;
  v12 = *(_OWORD *)algn_1002A7D10;
  v13 = qword_1002A7D20;
  v10 = a1;
  v8 = *(void (**)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v3 + 136);
  swift_bridgeObjectRetain(unk_1002A7CE0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v8(v11, &v10, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  return swift_release(v3);
}

uint64_t sub_100072124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[6];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B70;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B70, sub_100070FC4);
  v3 = unk_1002A7D30;
  v4 = unk_1002A7D40;
  v5 = unk_1002A7D50;
  v8[0] = qword_1002A7D28;
  v8[1] = unk_1002A7D30;
  v8[2] = qword_1002A7D38;
  v8[3] = unk_1002A7D40;
  v8[4] = qword_1002A7D48;
  v8[5] = unk_1002A7D50;
  v9 = xmmword_1002A7D58;
  v10 = unk_1002A7D68;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7D30);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationUInt, &off_10029F0C0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

uint64_t sub_100072320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[6];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B78;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B78, sub_1000710F4);
  v3 = unk_1002A7D80;
  v4 = unk_1002A7D90;
  v5 = unk_1002A7DA0;
  v8[0] = qword_1002A7D78;
  v8[1] = unk_1002A7D80;
  v8[2] = qword_1002A7D88;
  v8[3] = unk_1002A7D90;
  v8[4] = qword_1002A7D98;
  v8[5] = unk_1002A7DA0;
  v9 = xmmword_1002A7DA8;
  v10 = unk_1002A7DB8;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7D80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationUInt, &off_10029F0C0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

double sub_10007251C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  double v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B80;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B80, sub_100071224);
  v3 = unk_1002A7DD0;
  v4 = unk_1002A7DE0;
  v5 = unk_1002A7DF0;
  v8[0] = qword_1002A7DC8;
  v8[1] = unk_1002A7DD0;
  v8[2] = qword_1002A7DD8;
  v8[3] = unk_1002A7DE0;
  v8[4] = qword_1002A7DE8;
  v8[5] = unk_1002A7DF0;
  v8[6] = qword_1002A7DF8;
  v9 = unk_1002A7E00;
  v10 = qword_1002A7E10;
  v6 = *(void (**)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7DD0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

uint64_t sub_100072730(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **);
  double v10;
  _QWORD v11[7];
  __int128 v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v4 = qword_1002A4B80;
  swift_retain(v3);
  if (v4 != -1)
    swift_once(&qword_1002A4B80, sub_100071224);
  v5 = unk_1002A7DD0;
  v6 = unk_1002A7DE0;
  v7 = unk_1002A7DF0;
  v11[0] = qword_1002A7DC8;
  v11[1] = unk_1002A7DD0;
  v11[2] = qword_1002A7DD8;
  v11[3] = unk_1002A7DE0;
  v11[4] = qword_1002A7DE8;
  v11[5] = unk_1002A7DF0;
  v11[6] = qword_1002A7DF8;
  v12 = unk_1002A7E00;
  v13 = qword_1002A7E10;
  v10 = a1;
  v8 = *(void (**)(_QWORD *, double *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v3 + 136);
  swift_bridgeObjectRetain(unk_1002A7DD0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v8(v11, &v10, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  return swift_release(v3);
}

double sub_10007295C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  double v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B88;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B88, sub_100071370);
  v3 = unk_1002A7E20;
  v4 = unk_1002A7E30;
  v5 = unk_1002A7E40;
  v8[0] = qword_1002A7E18;
  v8[1] = unk_1002A7E20;
  v8[2] = qword_1002A7E28;
  v8[3] = unk_1002A7E30;
  v8[4] = qword_1002A7E38;
  v8[5] = unk_1002A7E40;
  v8[6] = qword_1002A7E48;
  v9 = *(_OWORD *)algn_1002A7E50;
  v10 = qword_1002A7E60;
  v6 = *(void (**)(double *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7E20);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v11, v8, &type metadata for DewConfigurationTimeInterval, &off_10029F070);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v11;
}

uint64_t sub_100072B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **);
  _QWORD v8[7];
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  v2 = qword_1002A4B90;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_1002A4B90, sub_1000714BC);
  v3 = unk_1002A7E70;
  v4 = unk_1002A7E80;
  v5 = unk_1002A7E90;
  v8[0] = qword_1002A7E68;
  v8[1] = unk_1002A7E70;
  v8[2] = qword_1002A7E78;
  v8[3] = unk_1002A7E80;
  v8[4] = qword_1002A7E88;
  v8[5] = unk_1002A7E90;
  v8[6] = qword_1002A7E98;
  v9 = byte_1002A7EA0;
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v1 + 128);
  swift_bridgeObjectRetain(unk_1002A7E70);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6(&v10, v8, &type metadata for DewConfigurationBool, &off_10029F110);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  return v10;
}

uint64_t sub_100072D74()
{
  if (qword_1002A4B50 != -1)
    swift_once(&qword_1002A4B50, sub_1000706F8);
  return (*(uint64_t (**)(void))(*(_QWORD *)qword_1002A4B58 + 160))();
}

id sub_100072E30()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DewConfigurationObjectiveC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_100072E70(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_100073D2C(a1, a2, v4);
}

uint64_t sub_100072ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for DewConfiguration()
{
  return objc_opt_self(_TtC13transparencyd16DewConfiguration);
}

uint64_t type metadata accessor for DewConfigurationObjectiveC()
{
  return objc_opt_self(_TtC13transparencyd26DewConfigurationObjectiveC);
}

__n128 initializeBufferWithCopyOfBuffer for DewConfigurationTimeInterval(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DewConfigurationTimeInterval()
{
  return &type metadata for DewConfigurationTimeInterval;
}

uint64_t getEnumTagSinglePayload for DewConfigurationInt(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DewConfigurationInt(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DewConfigurationInt()
{
  return &type metadata for DewConfigurationInt;
}

ValueMetadata *type metadata accessor for DewConfigurationUInt()
{
  return &type metadata for DewConfigurationUInt;
}

_QWORD *initializeBufferWithCopyOfBuffer for DewConfigurationString(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for DewConfigurationString(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for DewConfigurationString(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for DewConfigurationString(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for DewConfigurationString(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DewConfigurationString(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DewConfigurationString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DewConfigurationString()
{
  return &type metadata for DewConfigurationString;
}

_BYTE *initializeBufferWithCopyOfBuffer for DewConfigurationBool(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DewConfigurationBool(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DewConfigurationBool(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100073228 + 4 * byte_100214435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007325C + 4 * byte_100214430[v4]))();
}

uint64_t sub_10007325C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100073264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007326CLL);
  return result;
}

uint64_t sub_100073278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100073280);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100073284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007328C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DewConfigurationBool()
{
  return &type metadata for DewConfigurationBool;
}

uint64_t initializeBufferWithCopyOfBuffer for DewName(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for DewName(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for DewName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for DewName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DewName(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for DewName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DewName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DewName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DewName()
{
  return &type metadata for DewName;
}

uint64_t type metadata accessor for DewGlobalState()
{
  return objc_opt_self(_TtC13transparencyd14DewGlobalState);
}

uint64_t sub_100073514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10007351C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "0";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000735A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 56) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    v12 = a2[5];
    a1[4] = a2[4];
    a1[5] = v12;
    v13 = (_QWORD *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t sub_1000736A4(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_100073700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v14(v12, v13, v9);
  return a1;
}

_QWORD *sub_1000737B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_QWORD *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))(((unint64_t)v12 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_OWORD *sub_100073880(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = (_QWORD *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *sub_1000738F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_QWORD *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 40))(((unint64_t)v12 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t sub_100073990(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 56) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 55) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100073A64 + 4 * byte_10021443A[(v9 - 1)]))();
}

void sub_100073ADC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_100073CEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F03C(&qword_10029F060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100073D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

double sub_100073E0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100072E70(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100074C94();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100073F04((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_10007458C(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100073F04(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

Swift::Int sub_100073F1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029F330);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v38)
          goto LABEL_36;
        v24 = v39[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v38)
            goto LABEL_36;
          v24 = v39[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_36:
              swift_release(v5);
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v38)
                  goto LABEL_36;
                v24 = v39[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v31 = *v30;
      v32 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 48 * v22);
      v34 = v33[1];
      v35 = v33[3];
      v44 = v33[2];
      v36 = v33[5];
      v42 = *v33;
      v43 = v33[4];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v36);
      }
      Hasher.init(_seed:)(v45);
      String.hash(into:)(v45, v31, v32);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 48 * v18);
      *v20 = v42;
      v20[1] = v34;
      v20[2] = v44;
      v20[3] = v35;
      v20[4] = v43;
      v20[5] = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100074268(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029F318);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100073F04(v26, (uint64_t)v40);
    }
    else
    {
      sub_100072ED4((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100073F04(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_10007458C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100074774(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100072E70(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100074AAC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 48 * v12;
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 40));
      swift_bridgeObjectRelease(v21);
      result = swift_bridgeObjectRelease(v20);
      v23 = a1[1];
      *(_OWORD *)v19 = *a1;
      *(_OWORD *)(v19 + 16) = v23;
      *(_OWORD *)(v19 + 32) = a1[2];
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v26 = (uint64_t *)(v18[6] + 16 * v12);
    *v26 = a2;
    v26[1] = a3;
    v27 = (_OWORD *)(v18[7] + 48 * v12);
    v28 = a1[1];
    *v27 = *a1;
    v27[1] = v28;
    v27[2] = a1[2];
    v29 = v18[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v18[2] = v31;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100073F1C(v15, a4 & 1);
  v24 = sub_100072E70(a2, a3);
  if ((v16 & 1) == (v25 & 1))
  {
    v12 = v24;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10007490C(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100072E70(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        sub_10006F0F8(v19);
        return sub_100073F04(a1, (uint64_t)v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100074C94();
      goto LABEL_7;
    }
    sub_100074268(v15, a4 & 1);
    v21 = sub_100072E70(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100074A40(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100074A40(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100073F04(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_100074AAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  sub_10006F03C(&qword_10029F330);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v19;
    v28[1] = v18;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v29 = v22;
    v29[1] = v23;
    v29[2] = v24;
    v29[3] = v25;
    v29[4] = v26;
    v29[5] = v27;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    result = (void *)swift_bridgeObjectRetain(v27);
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100074C94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_10006F03C(&qword_10029F318);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_100072ED4(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100073F04(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100074E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F03C(&qword_10029F320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100074EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100074F18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10006F18C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_100074F48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10006F18C(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100074F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CloudDeviceData(0) + 24);
  return sub_100074FE4(v3, a1);
}

uint64_t type metadata accessor for CloudDeviceData(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A4D50;
  if (!qword_1002A4D50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudDeviceData);
  return result;
}

uint64_t sub_100074FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007502C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100075068()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000750A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for CloudDeviceData(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 36)));
}

uint64_t sub_1000750C4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 40));
}

uint64_t sub_1000750E4(char a1)
{
  return *(_QWORD *)&aPushtokedata[8 * a1];
}

BOOL sub_100075104(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100075118()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10007515C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100075184()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000751C4()
{
  char *v0;

  return sub_1000750E4(*v0);
}

uint64_t sub_1000751CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007F6AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000751F0()
{
  return 0;
}

void sub_1000751FC(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100075208(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100075520();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100075230(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100075520();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100075258(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  __int128 v29;

  v3 = v1;
  v5 = sub_10006F03C(&qword_10029F338);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000754FC(a1, v9);
  v11 = sub_100075520();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudDeviceData.CodingKeys, &type metadata for CloudDeviceData.CodingKeys, v11, v9, v10);
  v29 = *v3;
  v28 = 0;
  v12 = sub_100075564();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v29 = v3[1];
    v28 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v12);
    v13 = (int *)type metadata accessor for CloudDeviceData(0);
    v14 = (char *)v3 + v13[6];
    LOBYTE(v29) = 2;
    v15 = type metadata accessor for Date(0);
    v16 = sub_10006F284(&qword_10029F810, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[7]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v29, v5);
    v20 = (uint64_t *)((char *)v3 + v13[8]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    *(_QWORD *)&v29 = *(_QWORD *)((char *)v3 + v13[9]);
    v28 = 5;
    v23 = sub_10006F03C((uint64_t *)&unk_10029F350);
    v24 = sub_100075AE4((unint64_t *)&unk_1002A0330, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, v23, v24);
    v25 = *((unsigned __int8 *)v3 + v13[10]);
    LOBYTE(v29) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v29, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *sub_1000754FC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100075520()
{
  unint64_t result;

  result = qword_1002A4C40[0];
  if (!qword_1002A4C40[0])
  {
    result = swift_getWitnessTable(&unk_10021483C, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, qword_1002A4C40);
  }
  return result;
}

unint64_t sub_100075564()
{
  unint64_t result;

  result = qword_10029F340;
  if (!qword_10029F340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10029F340);
  }
  return result;
}

uint64_t sub_1000755A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  char v34;

  v29 = a2;
  v3 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_10006F03C(&qword_10029F360);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (int *)type metadata accessor for CloudDeviceData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  v31 = a1;
  sub_1000754FC(a1, v11);
  v12 = sub_100075520();
  v13 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudDeviceData.CodingKeys, &type metadata for CloudDeviceData.CodingKeys, v12, v11, v10);
  if (v13)
    return sub_10006F0F8(v31);
  v32 = v6;
  v14 = v9;
  v34 = 0;
  v15 = sub_100075A58();
  v16 = v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, &type metadata for Data, &v34, v30, &type metadata for Data, v15);
  *v14 = v33;
  v34 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, &type metadata for Data, &v34, v16, &type metadata for Data, v15);
  v14[1] = v33;
  v17 = type metadata accessor for Date(0);
  LOBYTE(v33) = 2;
  v18 = sub_10006F284((unint64_t *)&unk_10029F370, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v17, &v33, v16, v17, v18);
  sub_100075A9C((uint64_t)v5, (uint64_t)v14 + v7[6]);
  LOBYTE(v33) = 3;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  v20 = (uint64_t *)((char *)v14 + v7[7]);
  *v20 = v19;
  v20[1] = v21;
  LOBYTE(v33) = 4;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  v23 = v32;
  v24 = (uint64_t *)((char *)v14 + v7[8]);
  *v24 = v22;
  v24[1] = v25;
  v26 = sub_10006F03C((uint64_t *)&unk_10029F350);
  v34 = 5;
  v27 = sub_100075AE4((unint64_t *)&unk_1002A0550, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, v26, &v34, v16, v26, v27);
  *(_QWORD *)((char *)v14 + v7[9]) = v33;
  LOBYTE(v33) = 6;
  LOBYTE(v26) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v16);
  (*(void (**)(_QWORD, uint64_t))(v23 + 8))(0, v16);
  *((_BYTE *)v14 + v7[10]) = v26;
  sub_100075B44((uint64_t)v14, v29);
  sub_10006F0F8(v31);
  return sub_100075B88((uint64_t)v14);
}

unint64_t sub_100075A58()
{
  unint64_t result;

  result = qword_10029F368;
  if (!qword_10029F368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10029F368);
  }
  return result;
}

uint64_t sub_100075A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075AE4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10006FD6C((uint64_t *)&unk_10029F350);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100075B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudDeviceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075B88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudDeviceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100075BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  int *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v17 = (int *)type metadata accessor for CloudDeviceData(0);
  result = sub_100075A9C(a5, (uint64_t)a9 + v17[6]);
  v19 = (_QWORD *)((char *)a9 + v17[7]);
  *v19 = a6;
  v19[1] = a7;
  v20 = (_QWORD *)((char *)a9 + v17[8]);
  *v20 = a8;
  v20[1] = a10;
  *(_QWORD *)((char *)a9 + v17[9]) = a11;
  *((_BYTE *)a9 + v17[10]) = a12;
  return result;
}

uint64_t sub_100075C64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000755A8(a1, a2);
}

uint64_t sub_100075C78(_QWORD *a1)
{
  return sub_100075258(a1);
}

uint64_t sub_100075C8C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A4C28);
  sub_10006F07C(v0, (uint64_t)qword_1002A4C28);
  return Logger.init(transparencyCategory:)(0x76656464756F6C63, 0xEB00000000656369);
}

uint64_t sub_100075CF0()
{
  return 0x76654464756F6C43;
}

uint64_t sub_100075D10()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100075D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

id sub_100075DA8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(id *)(v0 + 32);
}

void sub_100075DD8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 32, v4, 1, 0);
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

void *sub_100075E1C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_100075E58()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t sub_100075E60()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_100075E68()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 56);
}

uint64_t sub_100075EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 56;
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_100075EF8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 56, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 56);
  return sub_100075F60;
}

void sub_100075F60(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

_QWORD *sub_100075FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];

  v9 = (_QWORD *)swift_allocObject(v4, 72, 7);
  v9[2] = 0x76654464756F6C43;
  v9[3] = 0xEB00000000656369;
  v10 = swift_unknownObjectWeakInit(v9 + 7, 0);
  v9[8] = 0x404B800000000000;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  swift_beginAccess(v10, v12, 1, 0);
  swift_unknownObjectWeakAssign(v9 + 7, a4);
  swift_unknownObjectRelease(a4);
  return v9;
}

_QWORD *sub_10007608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  _BYTE v11[24];

  v4[2] = 0x76654464756F6C43;
  v4[3] = 0xEB00000000656369;
  v9 = swift_unknownObjectWeakInit(v4 + 7, 0);
  v4[8] = 0x404B800000000000;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  swift_beginAccess(v9, v11, 1, 0);
  swift_unknownObjectWeakAssign(v4 + 7, a4);
  swift_unknownObjectRelease(a4);
  return v4;
}

double sub_100076138()
{
  return 55.0;
}

double sub_100076148()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return *(double *)(v0 + 64);
}

uint64_t sub_100076178(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 64, v4, 1, 0);
  *(double *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1000761B4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000761F0()
{
  uint64_t v0;
  double v1;

  v1 = (*(double (**)(void))(*(_QWORD *)v0 + 208))();
  return Date.addingTimeInterval(_:)(v1 * 24.0 * 3600.0);
}

uint64_t sub_100076248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  double v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v5 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v20 - v13;
  sub_100074FE4(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100081AB0((uint64_t)v7, (uint64_t *)&unk_10029EE40);
    v15 = 1;
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    v17 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 208))(v16);
    Date.addingTimeInterval(_:)(v17 * -2.0 / 3.0 * 24.0 * 3600.0);
    v15 = static Date.< infix(_:_:)(v12, a2);
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  return v15 & 1;
}

uint64_t sub_1000763D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v12;
  uint64_t v13;
  os_log_type_t v14;
  id v15;
  NSObject *v16;
  uint8_t *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t aBlock[5];
  uint64_t v43;

  v6 = v5;
  result = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 304))();
  if (result)
  {
    v12 = (void *)result;
    if (qword_1002A4C20 != -1)
      swift_once(&qword_1002A4C20, sub_100075C8C);
    v13 = type metadata accessor for Logger(0);
    sub_10006F07C(v13, (uint64_t)qword_1002A4C28);
    v14 = static os_log_type_t.error.getter();
    v15 = v12;
    v16 = Logger.logObject.getter(v15);
    if (os_log_type_enabled(v16, v14))
    {
      v36 = a2;
      v38 = (id)a3;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      aBlock[0] = v34;
      *(_DWORD *)v17 = 136315138;
      v18 = objc_msgSend(v15, "recordName");
      v19 = v15;
      v20 = a5;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v35 = v6;
      v22 = a1;
      v24 = v23;

      a2 = v36;
      v25 = v21;
      a5 = v20;
      v15 = v19;
      v41 = sub_10006C790(v25, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, aBlock, v17 + 4, v17 + 12);

      v26 = v24;
      a1 = v22;
      v6 = v35;
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v14, "updating record %s", v17, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v27 = v17;
      a3 = (uint64_t)v38;
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
    v39 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 152))();
    v28 = (_QWORD *)swift_allocObject(&unk_100240FC0, 72, 7);
    v28[2] = v15;
    v28[3] = v6;
    v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a4;
    v28[8] = a5;
    v29 = swift_allocObject(&unk_100240FE8, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_100077210;
    *(_QWORD *)(v29 + 24) = v28;
    aBlock[4] = (uint64_t)sub_10007025C;
    v43 = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10007027C;
    aBlock[3] = (uint64_t)&unk_100241000;
    v30 = _Block_copy(aBlock);
    v31 = v15;
    v32 = v30;
    v33 = v43;
    v37 = v31;
    swift_retain(v6);
    sub_10006F1A0(a1, a2);
    sub_10006F1A0(a3, a4);
    swift_bridgeObjectRetain(a5);
    swift_retain(v29);
    swift_release(v33);
    objc_msgSend(v39, "performBlockAndWait:", v32);

    _Block_release(v32);
    LOBYTE(v32) = swift_isEscapingClosureAtFileLocation(v29, "", 120, 105, 32, 1);
    swift_release(v28);
    result = swift_release(v29);
    if ((v32 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_100076750(void *a1, _QWORD *a2, uint64_t a3, uint8_t *a4, uint8_t *a5, void *a6, void *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  void *v45;
  id v46;
  uint64_t v47;
  NSString v48;
  id v49;
  NSString v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  id v54;
  NSObject *v55;
  uint8_t *v56;
  _QWORD *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  NSString v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  Class v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  Class isa;
  Class v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Class v91;
  NSString v92;
  char *v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  Class v97;
  void *v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint8_t *v103;
  void *v104;
  id v105;
  uint64_t v106;
  uint8_t *v107;
  uint8_t *v108;
  void *v109;
  char *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;

  v111 = a7;
  v108 = a5;
  v109 = a6;
  v106 = a3;
  v107 = a4;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v114 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v115 = (char *)&v103 - v13;
  v14 = type metadata accessor for String.Encoding(0);
  v112 = *(_QWORD *)(v14 - 8);
  v113 = v14;
  __chkstk_darwin(v14);
  v110 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v17 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1002143C0;
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10008189C();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  v23 = (id)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v18);
  objc_msgSend(v16, "setPredicate:", v23);

  v119 = 0;
  v24 = objc_msgSend(v16, "execute:", &v119);
  v25 = v119;
  v116 = v10;
  if (v24)
  {
    v26 = v24;
    v27 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);
    v29 = v25;

    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0)
        v23 = (id)v28;
      else
        v23 = (id)(v28 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v28);
      v51 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v28);
      if (v51)
      {
LABEL_4:
        if ((v28 & 0xC000000000000001) != 0)
        {
          v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
        }
        else
        {
          if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = *(id *)(v28 + 32);
        }
        v23 = v30;
        swift_bridgeObjectRelease(v28);
        if (qword_1002A4C20 == -1)
        {
LABEL_8:
          v31 = type metadata accessor for Logger(0);
          sub_10006F07C(v31, (uint64_t)qword_1002A4C28);
          v32 = a1;
          v33 = Logger.logObject.getter(v32);
          v34 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v33, v34))
          {

            v48 = (NSString)a2[6];
            if (v48)
            {
LABEL_28:
              v73 = v23;
              v74 = objc_msgSend(v48, "osVersion");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
              v76 = v75;

              v50 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v76);
LABEL_29:
              objc_msgSend(v23, "setOsVersion:", v50);

              if (v48)
              {
                v77 = objc_msgSend(v48, "serialNumber");
                v48 = v77;
                if (v77)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
                  v79 = v78;

                  v48 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v79);
                }
              }
              objc_msgSend(v23, "setSerialNumber:", v48);

              sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
              isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
              objc_msgSend(v23, "setInjected:", isa);

              v81 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
              objc_msgSend(v23, "setLocal:", v81);

              v119 = v111;
              v82 = sub_10006F03C((uint64_t *)&unk_10029F350);
              v83 = sub_10007E5E8();
              v84 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v82, v83);
              v86 = v85;
              v87 = v110;
              static String.Encoding.utf8.getter();
              v88 = String.data(using:allowLossyConversion:)(v87, 0, v84, v86);
              v90 = v89;
              swift_bridgeObjectRelease(v86);
              (*(void (**)(char *, uint64_t))(v112 + 8))(v87, v113);
              v91 = 0;
              if (v90 >> 60 != 15)
              {
                v91 = Data._bridgeToObjectiveC()().super.isa;
                sub_10006F218(v88, v90);
              }
              objc_msgSend(v23, "setApplications:", v91);

              v92 = String._bridgeToObjectiveC()();
              objc_msgSend(v23, "setCkstate:", v92);

              v93 = v114;
              Date.init()(v94);
              v95 = v115;
              (*(void (**)(char *))(*a2 + 232))(v93);
              v96 = *(void (**)(char *, uint64_t))(v116 + 8);
              v96(v93, v9);
              v97 = Date._bridgeToObjectiveC()().super.isa;
              v96(v95, v9);
              objc_msgSend(v23, "setTimeToLive:", v97);

              v98 = (void *)(*(uint64_t (**)(void))(*a2 + 152))();
              v119 = 0;
              LODWORD(v96) = objc_msgSend(v98, "save:", &v119);

              v99 = v119;
              if ((_DWORD)v96)
              {
                v100 = v119;

              }
              else
              {
                v101 = v119;
                v102 = _convertNSErrorToError(_:)(v99);

                swift_willThrow();
                swift_errorRelease(v102);
                v16 = v23;
              }
              goto LABEL_37;
            }
LABEL_12:
            v49 = v23;
            v50 = 0;
            goto LABEL_29;
          }
          v105 = v16;
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v109 = (void *)swift_slowAlloc(32, -1);
          v119 = v109;
          v108 = v35;
          *(_DWORD *)v35 = 136315138;
          v107 = v35 + 4;
          v36 = a2;
          v37 = objc_msgSend(v32, "recordName");
          v38 = v9;
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v41 = v40;

          a2 = v36;
          v42 = v39;
          v9 = v38;
          v117 = sub_10006C790(v42, v41, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v107, v35 + 12);

          v43 = v41;
          v16 = v105;
          swift_bridgeObjectRelease(v43);
          v44 = v108;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "self: updating existing record %s", v108, 0xCu);
          v45 = v109;
          swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);
LABEL_27:

          v48 = (NSString)a2[6];
          if (v48)
            goto LABEL_28;
          goto LABEL_12;
        }
LABEL_40:
        swift_once(&qword_1002A4C20, sub_100075C8C);
        goto LABEL_8;
      }
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v46 = v119;
    v47 = _convertNSErrorToError(_:)(v25);

    swift_willThrow();
    swift_errorRelease(v47);
  }
  if (qword_1002A4C20 != -1)
    swift_once(&qword_1002A4C20, sub_100075C8C);
  v52 = type metadata accessor for Logger(0);
  sub_10006F07C(v52, (uint64_t)qword_1002A4C28);
  v53 = static os_log_type_t.error.getter();
  v54 = a1;
  v55 = Logger.logObject.getter(v54);
  if (os_log_type_enabled(v55, v53))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = (void *)swift_slowAlloc(32, -1);
    v119 = v104;
    *(_DWORD *)v56 = 136315138;
    v105 = v16;
    v103 = v56 + 4;
    v57 = a2;
    v58 = objc_msgSend(v54, "recordName");
    v59 = v9;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v62 = v61;

    a2 = v57;
    v63 = v60;
    v9 = v59;
    v117 = sub_10006C790(v63, v62, (uint64_t *)&v119);
    v16 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v103, v56 + 12);

    swift_bridgeObjectRelease(v62);
    _os_log_impl((void *)&_mh_execute_header, v55, v53, "creating new record %s", v56, 0xCu);
    v64 = v104;
    swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

  }
  v65 = (void *)(*(uint64_t (**)(void))(*a2 + 152))();
  v66 = objc_msgSend(objc_allocWithZone((Class)CloudDevice), "initWithContext:", v65);

  if (v66)
  {
    v67 = v66;
    v68 = objc_msgSend(v54, "recordName");
    if (!v68)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v70 = v69;
      v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v70);
    }
    objc_msgSend(v67, "setRecordID:", v68);

    v71 = v67;
    v72 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v71, "setPushToken:", v72);

    v23 = v71;
    v33 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "setRegistrationData:", v33);

    goto LABEL_27;
  }
LABEL_37:

}

uint64_t sub_1000771CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10006F22C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10006F22C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100077210()
{
  uint64_t v0;

  sub_100076750(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint8_t **)(v0 + 40), *(uint8_t **)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_100077224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100077234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100077244(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007724C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  _BYTE v36[24];
  uint64_t aBlock[5];
  uint64_t v38;
  unsigned __int8 v39;

  v13 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 304))();
  if (!v13)
    return 0;
  v14 = (void *)v13;
  v39 = 0;
  v34 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 152))();
  v15 = (_QWORD *)swift_allocObject(&unk_100241038, 88, 7);
  v15[2] = v14;
  v15[3] = &v39;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a1;
  v15[7] = a2;
  v15[8] = v6;
  v15[9] = a5;
  v15[10] = a6;
  v16 = swift_allocObject(&unk_100241060, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_10007BB6C;
  *(_QWORD *)(v16 + 24) = v15;
  v33 = v15;
  aBlock[4] = (uint64_t)sub_100074EF4;
  v38 = v16;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10007027C;
  aBlock[3] = (uint64_t)&unk_100241078;
  v17 = _Block_copy(aBlock);
  v18 = v38;
  v19 = v14;
  sub_10006F1A0(a3, a4);
  sub_10006F1A0(a1, a2);
  swift_bridgeObjectRetain(a6);
  swift_retain(v16);
  swift_retain(v6);
  swift_release(v18);
  objc_msgSend(v34, "performBlockAndWait:", v17);

  _Block_release(v17);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v16, "", 120, 145, 32, 1);
  swift_release(v16);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (qword_1002A4C20 != -1)
LABEL_11:
    swift_once(&qword_1002A4C20, sub_100075C8C);
  v21 = type metadata accessor for Logger(0);
  sub_10006F07C(v21, (uint64_t)qword_1002A4C28);
  v22 = static os_log_type_t.info.getter();
  sub_10006F1A0(a1, a2);
  v23 = sub_10006F1A0(a1, a2);
  v24 = Logger.logObject.getter(v23);
  v25 = v22;
  if (os_log_type_enabled(v24, v22))
  {
    v26 = swift_slowAlloc(18, -1);
    v27 = swift_slowAlloc(32, -1);
    aBlock[0] = v27;
    *(_DWORD *)v26 = 67109378;
    swift_beginAccess(&v39, v36, 0, 0);
    LODWORD(v35) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v26 + 4, v26 + 8);
    *(_WORD *)(v26 + 8) = 2080;
    sub_1000A1394(a1, a2);
    v29 = v28;
    v35 = sub_10006C790(v30, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v26 + 10, v26 + 18);
    swift_bridgeObjectRelease(v29);
    sub_10006F22C(a1, a2);
    sub_10006F22C(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "should update record %{BOOL}d %s", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    sub_10006F22C(a1, a2);
    sub_10006F22C(a1, a2);
  }

  swift_beginAccess(&v39, aBlock, 0, 0);
  v31 = v39;
  swift_release(v33);
  return v31;
}

uint64_t sub_100077600(void *a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD v48[3];
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;

  v57 = a7;
  v62 = a6;
  v65 = a5;
  v66 = a4;
  v69 = a3;
  v67 = a2;
  v56 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v54 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v16 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1002143C0;
  v18 = objc_msgSend(a1, "recordName");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10008189C();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  v22 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v17);
  objc_msgSend(v15, "setPredicate:", v22);

  v74 = 0;
  v23 = objc_msgSend(v15, "execute:", &v74);
  v24 = v74;
  if (!v23)
  {
    v44 = v74;
    v45 = _convertNSErrorToError(_:)(v24);

    swift_willThrow();
    return swift_errorRelease(v45);
  }
  v25 = v23;
  v26 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);
  v28 = v24;

  v48[1] = a8;
  v53 = v15;
  v52 = v14;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0)
      v47 = v27;
    else
      v47 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v29 = _CocoaArrayWrapper.endIndex.getter(v47);
    v30 = v67;
    if (v29)
      goto LABEL_4;
  }
  else
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v27);
    v30 = v67;
    if (v29)
    {
LABEL_4:
      if (v29 < 1)
      {
        __break(1u);
        JUMPOUT(0x1000781C8);
      }
      v31 = 0;
      v68 = 0;
      v32 = __OFSUB__(HIDWORD(v69), (_DWORD)v69);
      v59 = v32;
      v58 = HIDWORD(v69) - (int)v69;
      v71 = BYTE6(v66);
      v33 = __OFSUB__(HIDWORD(v65), (_DWORD)v65);
      v49 = v33;
      v48[2] = HIDWORD(v65) - (int)v65;
      v64 = BYTE6(v62);
      v50 = a9;
      v70 = v66 >> 62;
      v63 = v62 >> 62;
      v60 = v27 & 0xC000000000000001;
      v61 = v29;
      v51 = v27;
      do
      {
        if ((v27 & 0xC000000000000001) != 0)
          v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v27);
        else
          v34 = *(id *)(v27 + 8 * v31 + 32);
        v35 = v34;
        v36 = objc_msgSend(v34, "registrationData");
        if (v36)
        {
          v37 = v36;
          v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v40 = v39;

          v41 = objc_msgSend(v35, "pushToken");
          if (v41)
          {
            v42 = v41;
            v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v73 = v43;

            __asm { BR              X10 }
          }
          sub_10006F22C(v38, v40);
        }
        *v30 = 1;

        ++v31;
      }
      while (v29 != v31);
    }
  }

  return swift_bridgeObjectRelease_n(v27, 2);
}

uint64_t sub_10007824C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  id v18;
  id v19;
  void (*v20)();
  _QWORD aBlock[5];
  uint64_t v22;
  id v23;

  v23 = 0;
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 304))();
  if (!v9)
  {
    v18 = 0;
    v20 = 0;
    v12 = 0;
    goto LABEL_5;
  }
  v10 = (void *)v9;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 152))();
  v12 = (_QWORD *)swift_allocObject(&unk_1002410B0, 64, 7);
  v12[2] = v10;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = &v23;
  v13 = swift_allocObject(&unk_1002410D8, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10007BBF4;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_100074EF4;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_1002410F0;
  v14 = _Block_copy(aBlock);
  v15 = v22;
  v16 = v10;
  sub_10006F1A0(a3, a4);
  sub_10006F1A0(a1, a2);
  swift_retain(v13);
  swift_release(v15);
  objc_msgSend((id)v11, "performBlockAndWait:", v14);

  _Block_release(v14);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v13, "", 120, 189, 32, 1);
  result = swift_release(v13);
  if ((v11 & 1) == 0)
  {
    v18 = v23;
    v19 = v23;
    v20 = sub_10007BBF4;
LABEL_5:

    sub_10007BBB0((uint64_t)v20, (uint64_t)v12);
    return (uint64_t)v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100078414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  _QWORD aBlock[5];
  uint64_t v9;
  void *v10;

  v10 = &_swiftEmptyArrayStorage;
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241128, 24, 7);
  *(_QWORD *)(v2 + 16) = &v10;
  v3 = swift_allocObject(&unk_100241150, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007C0F8;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241168;
  v4 = _Block_copy(aBlock);
  v5 = v9;
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend((id)v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 120, 219, 32, 1);
  result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = v10;
    swift_release(v2);
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_100078560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  _QWORD aBlock[5];
  uint64_t v9;
  void *v10;

  v10 = &_swiftEmptyArrayStorage;
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_1002411A0, 24, 7);
  *(_QWORD *)(v2 + 16) = &v10;
  v3 = swift_allocObject(&unk_1002411C8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007C4C0;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_1002411E0;
  v4 = _Block_copy(aBlock);
  v5 = v9;
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend((id)v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 120, 242, 32, 1);
  result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = v10;
    swift_release(v2);
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000786AC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  void *v9;
  uint64_t v10;
  os_log_type_t v11;
  id v12;
  NSObject *v13;
  uint8_t *v14;
  _DWORD *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _DWORD *v26;
  uint8_t *buf;
  os_log_type_t type;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 304))();
  if (result)
  {
    v9 = (void *)result;
    v32 = v4;
    v33 = a1;
    if (qword_1002A4C20 != -1)
      swift_once(&qword_1002A4C20, sub_100075C8C);
    v10 = type metadata accessor for Logger(0);
    sub_10006F07C(v10, (uint64_t)qword_1002A4C28);
    v11 = static os_log_type_t.error.getter();
    v12 = v9;
    v13 = Logger.logObject.getter(v12);
    if (os_log_type_enabled(v13, v11))
    {
      type = v11;
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (id)swift_slowAlloc(32, -1);
      aBlock[0] = (uint64_t)v30;
      *(_DWORD *)v14 = 136315138;
      v15 = v14 + 12;
      v26 = v14 + 4;
      buf = v14;
      v16 = objc_msgSend(v12, "recordName");
      v17 = a2;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      v21 = v18;
      a2 = v17;
      v37 = sub_10006C790(v21, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v26, v15);

      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v13, type, "adding device record %s", buf, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(buf, -1, -1);

    }
    else
    {

    }
    v31 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 152))();
    v22 = (_QWORD *)swift_allocObject(&unk_100241218, 64, 7);
    v22[2] = v12;
    v22[3] = v32;
    v22[4] = v33;
    v22[5] = a2;
    v22[6] = a3;
    v22[7] = a4;
    v23 = swift_allocObject(&unk_100241240, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_10007C94C;
    *(_QWORD *)(v23 + 24) = v22;
    aBlock[4] = (uint64_t)sub_100074EF4;
    v36 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10007027C;
    aBlock[3] = (uint64_t)&unk_100241258;
    v24 = _Block_copy(aBlock);
    v25 = v36;
    v29 = v12;
    swift_retain(v32);
    sub_10006F1A0(v33, a2);
    sub_10006F1A0(a3, a4);
    swift_retain(v23);
    swift_release(v25);
    objc_msgSend(v31, "performBlockAndWait:", v24);

    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 120, 276, 32, 1);
    swift_release(v22);
    result = swift_release(v23);
    if ((v24 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_100078A04(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 304))();
  if (v10)
  {
    v11 = (void *)v10;
    if (qword_1002A4C20 != -1)
      swift_once(&qword_1002A4C20, sub_100075C8C);
    v12 = type metadata accessor for Logger(0);
    sub_10006F07C(v12, (uint64_t)qword_1002A4C28);
    v13 = static os_log_type_t.error.getter();
    sub_10006F1A0(a1, a2);
    sub_10006F1A0(a3, a4);
    sub_10006F1A0(a1, a2);
    v14 = sub_10006F1A0(a3, a4);
    v15 = Logger.logObject.getter(v14);
    if (os_log_type_enabled(v15, v13))
    {
      v27 = v11;
      v16 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v30 = v26;
      *(_DWORD *)v16 = 136315394;
      sub_10006F1A0(a1, a2);
      v25 = v15;
      v17 = Data.description.getter(a1, a2);
      v19 = v18;
      sub_10006F22C(a1, a2);
      v28 = sub_10006C790(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v19);
      sub_10006F22C(a1, a2);
      sub_10006F22C(a1, a2);
      *(_WORD *)(v16 + 12) = 2080;
      sub_10006F1A0(a3, a4);
      v20 = Data.description.getter(a3, a4);
      v22 = v21;
      sub_10006F22C(a3, a4);
      v28 = sub_10006C790(v20, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v22);
      sub_10006F22C(a3, a4);
      sub_10006F22C(a3, a4);
      v15 = v25;
      _os_log_impl((void *)&_mh_execute_header, v25, v13, "deleting record %s %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v23 = v16;
      v11 = v27;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_10006F22C(a1, a2);
      sub_10006F22C(a1, a2);
      sub_10006F22C(a3, a4);
      sub_10006F22C(a3, a4);
    }

    v24 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 152))();
    __chkstk_darwin(v24);
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10007D118);

  }
}

void sub_100078D4C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[10];
  unint64_t v18;

  v5 = v4;
  v10 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v10);
  v11 = type metadata accessor for SHA256Digest(0);
  v17[2] = *(_QWORD *)(v11 - 8);
  v17[3] = v11;
  v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v17[1] = (char *)v17 - v13;
  v17[9] = a1;
  v18 = a2;
  sub_10006F1A0(a1, a2);
  sub_10006F1A0(a3, a4);
  sub_10007E3D0(a3, a4);
  sub_10006F22C(a3, a4);
  v14 = v18;
  v15 = sub_10006F284((unint64_t *)&unk_10029F380, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v10, v15);
  v16 = (char *)&loc_100078E9C + dword_10007925C[v14 >> 62];
  v17[0] = v5;
  __asm { BR              X10 }
}

Class sub_100078EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  Swift::String v21;
  Class isa;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;

  *(_QWORD *)(v7 - 128) = v5;
  *(_WORD *)(v7 - 120) = v6;
  *(_BYTE *)(v7 - 118) = BYTE2(v6);
  *(_BYTE *)(v7 - 117) = BYTE3(v6);
  *(_BYTE *)(v7 - 116) = BYTE4(v6);
  *(_BYTE *)(v7 - 115) = BYTE5(v6);
  dispatch thunk of HashFunction.update(bufferPointer:)(v7 - 128, v7 - 128 + BYTE6(v6), v2, v0);
  sub_10006F22C(v5, v6);
  v8 = *(_QWORD *)(v7 - 168);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
  sub_10006F22C(v5, v6);
  v9 = *(_QWORD *)(v7 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 16))(v3, v8, v9);
  v10 = sub_10006F284(&qword_10029F820, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of Sequence.makeIterator())(v9, v10);
  v11 = *(_QWORD *)(v7 - 104);
  v12 = *(_QWORD *)(v7 - 96);
  v13 = *(_QWORD *)(v11 + 16);
  if (v12 != v13)
  {
    if ((uint64_t)v12 < v13)
    {
      v14 = (char *)&_swiftEmptyArrayStorage;
      *(_OWORD *)(v7 - 144) = xmmword_1002143C0;
      while ((v12 & 0x8000000000000000) == 0)
      {
        if (v12 >= *(_QWORD *)(v11 + 16))
          goto LABEL_15;
        v24 = *(_BYTE *)(v11 + 32 + v12);
        v25 = sub_10006F03C((uint64_t *)&unk_10029F390);
        v26 = swift_allocObject(v25, 72, 7);
        *(_OWORD *)(v26 + 16) = *(_OWORD *)(v7 - 144);
        *(_QWORD *)(v26 + 56) = &type metadata for UInt8;
        *(_QWORD *)(v26 + 64) = &protocol witness table for UInt8;
        *(_BYTE *)(v26 + 32) = v24;
        v27 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(2016555045, 0xE400000000000000, v26);
        v29 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_10007BA1C(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        v31 = *((_QWORD *)v14 + 2);
        v30 = *((_QWORD *)v14 + 3);
        if (v31 >= v30 >> 1)
          v14 = sub_10007BA1C((char *)(v30 > 1), v31 + 1, 1, v14);
        ++v12;
        *((_QWORD *)v14 + 2) = v31 + 1;
        v32 = &v14[16 * v31];
        *((_QWORD *)v32 + 4) = v27;
        *((_QWORD *)v32 + 5) = v29;
        if (v13 == v12)
          goto LABEL_3;
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x100079254);
  }
  v14 = (char *)&_swiftEmptyArrayStorage;
LABEL_3:
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v7 - 104) = v14;
  v15 = sub_10006F03C((uint64_t *)&unk_10029F350);
  v16 = sub_10007E5E8();
  v17 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v14);
  sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
  v20 = *(id *)(*(_QWORD *)(v7 - 176) + 40);
  v21._countAndFlagsBits = v17;
  v21._object = v19;
  isa = CKRecordID.init(recordName:zoneID:)(v21, (CKRecordZoneID)v20).super.isa;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 160) + 8))(*(_QWORD *)(v7 - 168), *(_QWORD *)(v7 - 152));
  return isa;
}

CKRecordID sub_10007926C(void *a1)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  CKRecordID result;
  Class isa;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = objc_msgSend(a1, "recordID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
    v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }
  else
  {
    result.super.isa = (Class)objc_msgSend(a1, "registrationData");
    if (result.super.isa)
    {
      isa = result.super.isa;
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result.super.isa);
      v14 = v13;

      v15 = objc_msgSend(a1, "pushToken");
      if (v15)
      {
        v16 = v15;
        v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v19 = v18;

        v20 = (*((uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))*v1 + 38))(v17, v19, v12, v14);
        sub_10006F22C(v17, v19);
        sub_10006F22C(v12, v14);
        return (CKRecordID)v20;
      }
      else
      {
        sub_10006F22C(v12, v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000793B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18[2];

  v2 = v1;
  if (qword_1002A4C20 != -1)
    swift_once(&qword_1002A4C20, sub_100075C8C);
  v4 = type metadata accessor for Logger(0);
  sub_10006F07C(v4, (uint64_t)qword_1002A4C28);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v18[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "recordID");
    v11 = objc_msgSend(v10, "recordName");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v17 = sub_10006C790(v12, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud device: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v15 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 152))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_10007E634);

  return LOBYTE(v18[0]);
}

void sub_100079600(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t *v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  NSString v50;
  id v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  uint64_t v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  unsigned int v80;
  id v81;
  id v82;
  id v83;
  _BYTE *v84;
  id v85;
  uint64_t *v86;
  unint64_t v87;
  Class isa;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  Class v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Class v99;
  int *v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  Class v112;
  char *v113;
  uint64_t v114;
  NSString v115;
  char *v116;
  uint64_t v117;
  NSString v118;
  NSString v119;
  Class v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t *v132;
  id v133;
  _BYTE *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  id v141[2];

  v4 = v3;
  v138 = a2;
  v134 = a3;
  v6 = type metadata accessor for Logger(0);
  v136 = *(_QWORD *)(v6 - 8);
  v137 = v6;
  __chkstk_darwin(v6);
  v135 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v126 = *(_QWORD *)(v8 - 8);
  v127 = v8;
  __chkstk_darwin(v8);
  v125 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v10);
  v128 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006F03C(&qword_10029F6C0);
  __chkstk_darwin(v12);
  v130 = (int *)((char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for CloudDeviceData(0);
  v129 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v132 = (uint64_t *)((char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v17 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1002143C0;
  v139 = a1;
  v19 = objc_msgSend(a1, "recordID");
  v20 = objc_msgSend(v19, "recordName");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10008189C();
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  v24 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v18);
  objc_msgSend(v16, "setPredicate:", v24);

  v141[0] = 0;
  v133 = v16;
  v25 = objc_msgSend(v16, "execute:", v141);
  v26 = v141[0];
  if (!v25)
  {
    v35 = v141[0];
    v36 = _convertNSErrorToError(_:)(v26);

    swift_willThrow();
    v37 = swift_errorRelease(v36);
    v31 = 0;
LABEL_13:
    v40 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 152))(v37);
    v41 = objc_msgSend(objc_allocWithZone((Class)CloudDevice), "initWithContext:", v40);

    if (!v41)
      goto LABEL_34;
    v34 = v41;
    v32 = v139;
    v42 = objc_msgSend(v139, "recordID");
    v43 = objc_msgSend(v42, "recordName");

    if (!v43)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v45 = v44;
      v43 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
    }
    objc_msgSend(v34, "setRecordID:", v43);

    goto LABEL_17;
  }
  v27 = v25;
  v28 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);
  v30 = v26;

  if (!((unint64_t)v29 >> 62))
  {
    v31 = v3;
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_12;
  }
  if (v29 < 0)
    v38 = v29;
  else
    v38 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v29);
  v39 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v29);
  v31 = v4;
  if (!v39)
  {
LABEL_12:
    v37 = swift_bridgeObjectRelease(v29);
    goto LABEL_13;
  }
LABEL_4:
  if ((v29 & 0xC000000000000001) != 0)
  {
    v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
    swift_bridgeObjectRelease(v29);
    v32 = v139;
LABEL_17:
    v33 = v137;
    goto LABEL_18;
  }
  v32 = v139;
  v33 = v137;
  if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
    __break(1u);
  v34 = *(id *)(v29 + 32);
  swift_bridgeObjectRelease(v29);
LABEL_18:
  v46 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  v47 = v34;
  v48 = JSONDecoder.init()();
  v49 = objc_msgSend(v32, "encryptedValues");
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "objectForKeyedSubscript:", v50);
  swift_unknownObjectRelease(v49);

  v131 = v48;
  if (v51)
  {
    v140 = (uint64_t)v51;
    v52 = sub_10006F03C(&qword_10029F728);
    v53 = swift_dynamicCast(v141, &v140, v52, &type metadata for Data, 6);
    v55 = v135;
    v54 = v136;
    if ((v53 & 1) != 0)
    {
      v124 = v47;
      v56 = v141[0];
      v57 = v141[1];
      v58 = sub_10006F284((unint64_t *)&unk_10029F730, type metadata accessor for CloudDeviceData, (uint64_t)&unk_10021464C);
      v59 = (uint64_t)v130;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, v56, v57, v14, v58);
      if (!v31)
      {
        v31 = 0;
        v122 = (uint64_t)v56;
        v123 = (unint64_t)v57;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v129 + 56))(v59, 0, 1, v14);
        v86 = v132;
        sub_100081AEC(v59, (uint64_t)v132);
        v87 = v86[1];
        if (v87 >> 60 == 15)
        {
          isa = 0;
        }
        else
        {
          v89 = *v132;
          sub_10006F1A0(*v132, v87);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v90 = v89;
          v86 = v132;
          sub_10006F218(v90, v87);
        }
        v32 = v139;
        v33 = v137;
        v47 = v124;
        objc_msgSend(v124, "setPushToken:", isa);

        v91 = v86[3];
        if (v91 >> 60 == 15)
        {
          v92 = 0;
        }
        else
        {
          v93 = v132[2];
          sub_10006F1A0(v93, v91);
          v92 = Data._bridgeToObjectiveC()().super.isa;
          v94 = v93;
          v86 = v132;
          sub_10006F218(v94, v91);
        }
        objc_msgSend(v47, "setRegistrationData:", v92);

        v130 = (int *)v14;
        v95 = (uint64_t)v86 + *(int *)(v14 + 24);
        v96 = v128;
        sub_100074FE4(v95, v128);
        v97 = type metadata accessor for Date(0);
        v98 = *(_QWORD *)(v97 - 8);
        v99 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97) != 1)
        {
          v99 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v96, v97);
        }
        objc_msgSend(v47, "setTimeToLive:", v99);

        v100 = v130;
        v101 = *(void **)((char *)v86 + v130[9]);
        if (!v101)
          goto LABEL_47;
        v141[0] = v101;
        swift_bridgeObjectRetain(v101);
        v102 = sub_10006F03C((uint64_t *)&unk_10029F350);
        v103 = sub_10007E5E8();
        v104 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v102, v103);
        v106 = v105;
        v107 = swift_bridgeObjectRelease(v101);
        v108 = v125;
        static String.Encoding.utf8.getter(v107);
        v109 = String.data(using:allowLossyConversion:)(v108, 0, v104, v106);
        v111 = v110;
        swift_bridgeObjectRelease(v106);
        (*(void (**)(char *, uint64_t))(v126 + 8))(v108, v127);
        if (v111 >> 60 != 15)
        {
          v112 = Data._bridgeToObjectiveC()().super.isa;
          sub_10006F218(v109, v111);
        }
        else
        {
LABEL_47:
          v112 = 0;
        }
        objc_msgSend(v47, "setApplications:", v112);

        v113 = (char *)v132 + v100[7];
        v114 = *((_QWORD *)v113 + 1);
        if (v114)
        {
          swift_bridgeObjectRetain(*((_QWORD *)v113 + 1));
          v115 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v114);
        }
        else
        {
          v115 = 0;
        }
        v55 = v135;
        objc_msgSend(v47, "setOsVersion:", v115);

        v116 = (char *)v132 + v100[8];
        v117 = *((_QWORD *)v116 + 1);
        if (v117)
        {
          swift_bridgeObjectRetain(*((_QWORD *)v116 + 1));
          v118 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v117);
        }
        else
        {
          v118 = 0;
        }
        v54 = v136;
        objc_msgSend(v47, "setSerialNumber:", v118);

        v119 = String._bridgeToObjectiveC()();
        objc_msgSend(v47, "setCkstate:", v119);

        if (*((_BYTE *)v132 + v100[10]) == 2)
        {
          objc_msgSend(v47, "setInjected:", 0);
          sub_10006F22C(v122, v123);
        }
        else
        {
          v120 = Bool._bridgeToObjectiveC()().super.super.isa;
          objc_msgSend(v47, "setInjected:", v120);
          sub_10006F22C(v122, v123);

        }
        sub_100075B88((uint64_t)v132);
        goto LABEL_24;
      }
      swift_errorRelease(v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v59, 1, 1, v14);
      sub_10006F22C((uint64_t)v56, (unint64_t)v57);
      sub_100081AB0(v59, &qword_10029F6C0);
      v31 = 0;
      v32 = v139;
      v33 = v137;
      v47 = v124;
    }
  }
  else
  {
    v55 = v135;
    v54 = v136;
  }
  v60 = String._bridgeToObjectiveC()();
  objc_msgSend(v47, "setCkstate:", v60);

LABEL_24:
  if (qword_1002A4C20 != -1)
    swift_once(&qword_1002A4C20, sub_100075C8C);
  v61 = sub_10006F07C(v33, (uint64_t)qword_1002A4C28);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v55, v61, v33);
  v62 = v47;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v132 = v31;
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = (void *)swift_slowAlloc(32, -1);
    v141[0] = v66;
    *(_DWORD *)v65 = 136315138;
    v67 = objc_msgSend(v62, "pushToken");
    if (v67)
    {
      v68 = v67;
      v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v71 = v70;

      sub_1000A1394(v69, v71);
      v73 = v72;
      v75 = v74;
      v76 = v69;
      v33 = v137;
      sub_10006F22C(v76, v71);
    }
    else
    {
      v75 = 0xE100000000000000;
      v73 = 45;
    }
    v140 = sub_10006C790(v73, v75, (uint64_t *)v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v65 + 4, v65 + 12);

    swift_bridgeObjectRelease(v75);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "merged cloud device: %s", v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v33);
    v32 = v139;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v33);
  }
  v77 = v138;
  v78 = (*(uint64_t (**)(id, id))(*(_QWORD *)v138 + 384))(v62, v32);
  v79 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 152))(v78);
  v141[0] = 0;
  v80 = objc_msgSend(v79, "save:", v141);

  v81 = v141[0];
  if (!v80)
  {
    v85 = v141[0];
    v41 = (id)_convertNSErrorToError(_:)(v81);

    swift_willThrow();
    swift_release(v131);

    swift_errorRelease(v41);
    LOBYTE(v41) = 1;
    v83 = v62;
    v84 = v134;
    goto LABEL_36;
  }
  v82 = v141[0];
  swift_release(v131);

  LOBYTE(v41) = 1;
LABEL_34:
  v83 = v133;
  v84 = v134;
LABEL_36:

  *v84 = (_BYTE)v41;
}

uint64_t sub_10007A2C8(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;

  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v4 = swift_allocObject(&unk_100241290, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject(&unk_1002412B8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10007E678;
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = sub_100074EF4;
  v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10007027C;
  v11[3] = &unk_1002412D0;
  v6 = _Block_copy(v11);
  v7 = v12;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120, 389, 32, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

Class sub_10007A414(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  CKRecordID v21;
  Swift::String v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Class v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  uint64_t ObjectType;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;

  v2 = v1;
  v4 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v4);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CloudDeviceData(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "ckrecord");
  if (v13)
  {
    v14 = v13;
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xF000000000000000;
  }
  v18 = type metadata accessor for KTCloudRecords();
  isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 440))(v15, v17);
  sub_10006F218(v15, v17);
  if (!isa)
  {
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v2 + 312))(a1);
    if (!v20)
      return 0;
    v21.super.isa = (Class)v20;
    sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v22._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 128))();
    isa = CKRecord.init(recordType:recordID:)(v22, v21).super.isa;
  }
  v23 = objc_msgSend(a1, "applications");
  if (v23)
  {
    v24 = v23;
    v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xC000000000000000;
  }
  static String.Encoding.utf8.getter(v23);
  v78 = v27;
  v28 = String.init(data:encoding:)(v25, v27, v12);
  if (v29)
  {
    v30 = v29;
    v80 = v28;
    v81 = v29;
    v79[0] = 44;
    v79[1] = 0xE100000000000000;
    v31 = sub_10007E948();
    v76 = StringProtocol.components<A>(separatedBy:)(v79, &type metadata for String, &type metadata for String, v31, v31);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v76 = 0;
  }
  v32 = objc_msgSend(a1, "pushToken");
  if (v32)
  {
    v33 = v32;
    v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v74 = v35;
    v75 = v34;

  }
  else
  {
    v74 = 0xF000000000000000;
    v75 = 0;
  }
  v36 = objc_msgSend(a1, "registrationData");
  if (v36)
  {
    v37 = v36;
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v72 = v39;
    v73 = v38;

  }
  else
  {
    v72 = 0xF000000000000000;
    v73 = 0;
  }
  v40 = objc_msgSend(a1, "timeToLive");
  if (v40)
  {
    v41 = v40;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v42 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v6, 0, 1, v42);
  }
  else
  {
    v43 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v6, 1, 1, v43);
  }
  v44 = objc_msgSend(a1, "osVersion");
  v77 = v25;
  if (v44)
  {
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v48 = v47;

  }
  else
  {
    v46 = 0;
    v48 = 0;
  }
  v49 = isa;
  v50 = objc_msgSend(a1, "serialNumber");
  if (v50)
  {
    v51 = v50;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v54 = v53;

  }
  else
  {
    v52 = 0;
    v54 = 0;
  }
  v55 = objc_msgSend(a1, "injected");
  if (v55)
  {
    v56 = v55;
    v57 = objc_msgSend(v55, "BOOLValue");

  }
  else
  {
    v57 = 2;
  }
  v58 = v74;
  *v9 = v75;
  v9[1] = v58;
  v59 = v72;
  v9[2] = v73;
  v9[3] = v59;
  sub_100075A9C((uint64_t)v6, (uint64_t)v9 + v7[6]);
  v60 = (uint64_t *)((char *)v9 + v7[7]);
  *v60 = v46;
  v60[1] = v48;
  v61 = (uint64_t *)((char *)v9 + v7[8]);
  *v61 = v52;
  v61[1] = v54;
  *(uint64_t *)((char *)v9 + v7[9]) = v76;
  *((_BYTE *)v9 + v7[10]) = v57;
  v62 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  v63 = JSONEncoder.init()();
  v64 = sub_10006F284(&qword_10029F3B0, type metadata accessor for CloudDeviceData, (uint64_t)&unk_100214674);
  v65 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v7, v64);
  v67 = v66;
  v68 = -[objc_class encryptedValues](v49, "encryptedValues");
  ObjectType = swift_getObjectType();
  v82 = &type metadata for Data;
  v83 = &protocol witness table for Data;
  v80 = v65;
  v81 = v67;
  sub_10006F1A0(v65, v67);
  CKRecordKeyValueSetting.subscript.setter(&v80, 1635017060, 0xE400000000000000, ObjectType);
  swift_release(v63);
  sub_10006F22C(v77, v78);
  swift_unknownObjectRelease(v68);
  sub_10006F22C(v65, v67);
  sub_100075B88((uint64_t)v9);
  return v49;
}

uint64_t sub_10007A96C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  unsigned __int8 v11;

  v11 = 0;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241308, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_100241330, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007E9B0;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241348;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120, 432, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return v8;
  }
  return result;
}

uint64_t sub_10007AAB8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  void *v11;

  v11 = &_swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241380, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_1002413A8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007EB80;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_1002413C0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120, 446, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_10007AC0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  void *v11;

  v11 = &_swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_1002413F8, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_100241420, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007EBA8;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241438;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 120, 464, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_10007AD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v22[32];
  void **aBlock;
  _QWORD v24[4];
  uint64_t v25;
  unint64_t v26;

  v4 = v3;
  v26 = sub_10007B020((uint64_t)&_swiftEmptyArrayStorage);
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 152))();
  v9 = (_QWORD *)swift_allocObject(&unk_100241470, 56, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = &v26;
  v9[6] = v4;
  v10 = swift_allocObject(&unk_100241498, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10007EDD4;
  *(_QWORD *)(v10 + 24) = v9;
  v24[3] = sub_100074EF4;
  v25 = v10;
  aBlock = _NSConcreteStackBlock;
  v24[0] = 1107296256;
  v24[1] = sub_10007027C;
  v24[2] = &unk_1002414B0;
  v11 = _Block_copy(&aBlock);
  v12 = v25;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v4);
  swift_retain(v10);
  swift_release(v12);
  objc_msgSend((id)v8, "performBlockAndWait:", v11);

  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 120, 482, 32, 1);
  swift_release(v10);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else if (qword_1002A4C20 == -1)
  {
    goto LABEL_3;
  }
  swift_once(&qword_1002A4C20, sub_100075C8C);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10006F07C(v13, (uint64_t)qword_1002A4C28);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v17 = 134217984;
    swift_beginAccess(&v26, v22, 0, 0);
    aBlock = *(void ***)(v26 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v24, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "record update device cloudstate: %ld", v17, 0xCu);
    swift_slowDealloc(v17, -1, -1);
  }

  swift_beginAccess(&v26, &aBlock, 0, 0);
  v18 = v26;
  v19 = swift_bridgeObjectRetain(v26);
  sub_10007FE40(v19, (void (*)(uint64_t, unint64_t, uint64_t, unint64_t))sub_10007F5F8);
  swift_bridgeObjectRelease(v18);
  v20 = v26;
  swift_release(v9);
  return swift_bridgeObjectRelease(v20);
}

unint64_t sub_10007B020(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029F6B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    sub_10006F1A0(v7, v8);
    sub_10006F1A0(v9, v10);
    result = sub_10007D3F0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007B148(void *a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v4 = (_QWORD *)swift_allocObject(&unk_1002414E8, 40, 7);
  v4[2] = a1;
  v4[3] = &v14;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_100241510, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10008005C;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100074EF4;
  v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241528;
  v6 = _Block_copy(aBlock);
  v7 = v13;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120, 515, 32, 1);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = v14;
    swift_release(v4);
    return v11;
  }
  return result;
}

uint64_t sub_10007B2A8(void *a1, void *a2)
{
  uint64_t (*v4)(void *);
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  Class isa;

  if (!a2)
    return 0;
  v4 = *(uint64_t (**)(void *))(type metadata accessor for KTCloudRecords() + 448);
  v5 = a2;
  v6 = v4(a2);
  if (v7 >> 60 == 15)
  {

    return 0;
  }
  v9 = v6;
  v10 = v7;
  v11 = objc_msgSend(a1, "ckrecord");
  if (v11)
  {
    v12 = v11;
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

    sub_10006F18C(v9, v10);
    sub_10006F1A0(v13, v15);
    sub_10007FBC8(v13, v15);
    LOBYTE(v12) = v16;
    sub_10006F218(v9, v10);
    sub_10006F22C(v13, v15);
    sub_10006F22C(v13, v15);
    if ((v12 & 1) != 0)
    {

      sub_10006F218(v9, v10);
      return 0;
    }
  }
  else
  {
    sub_10006F1A0(v9, v10);
    sub_10006F218(0, 0xF000000000000000);
    sub_10006F218(v9, v10);
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCkrecord:", isa);

  sub_10006F218(v9, v10);
  return 1;
}

uint64_t sub_10007B430(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v10[5];
  uint64_t v11;

  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v4 = swift_allocObject(&unk_100241560, 32, 7);
  *(_BYTE *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject(&unk_100241588, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100080648;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_100074EF4;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10007027C;
  v10[3] = &unk_1002415A0;
  v6 = _Block_copy(v10);
  v7 = v11;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 120, 549, 32, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10007B574()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  sub_100080A78(v0 + 56);
  return v0;
}

uint64_t sub_10007B5B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  sub_100080A78(v0 + 56);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_10007B5F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_10007B61C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 320))() & 1;
}

uint64_t sub_10007B648()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 328))();
}

uint64_t sub_10007B670()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))();
}

uint64_t sub_10007B698()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 360))();
}

uint64_t sub_10007B6C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 344))() & 1;
}

uint64_t sub_10007B6EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 368))();
}

uint64_t sub_10007B714()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 376))();
}

uint64_t sub_10007B73C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 336))();
}

uint64_t sub_10007B764()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 312))();
}

uint64_t sub_10007B78C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 392))();
}

void sub_10007B7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10007B814(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10007B9F8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

char *sub_10007BA1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10006F03C((uint64_t *)&unk_10029F880);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10007F950(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007BB28()
{
  uint64_t v0;

  sub_10006F22C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10006F22C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007BB6C()
{
  uint64_t v0;

  return sub_100077600(*(void **)(v0 + 16), *(_BYTE **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_10007BBA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007BBB0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10007BBC0()
{
  uint64_t v0;

  sub_10006F22C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10006F22C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10007BBF4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  Class isa;
  id v41;
  Class v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  id v52;

  v1 = *(void **)(v0 + 16);
  v50 = *(void ***)(v0 + 56);
  v2 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v3 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002143C0;
  v5 = objc_msgSend(v1, "recordName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10008189C();
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  v9 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v4);
  objc_msgSend(v2, "setPredicate:", v9);

  v52 = 0;
  v10 = objc_msgSend(v2, "execute:", &v52);
  v11 = v52;
  if (!v10)
  {
    v45 = v52;
    v46 = _convertNSErrorToError(_:)(v11);

    swift_willThrow();
    swift_errorRelease(v46);
    return;
  }
  v12 = v10;
  v48 = v2;
  v13 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  v15 = v11;

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v47 = v14;
    else
      v47 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v16 = _CocoaArrayWrapper.endIndex.getter(v47);
    if (v16)
      goto LABEL_4;
LABEL_30:
    swift_bridgeObjectRelease_n(v14, 2);

    return;
  }
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v14);
  if (!v16)
    goto LABEL_30;
LABEL_4:
  if (v16 >= 1)
  {
    v17 = 0;
    v18 = v14 & 0xC000000000000001;
    v51 = v16;
    v49 = v14;
    while (1)
    {
      if (v18)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      else
        v19 = *(id *)(v14 + 8 * v17 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "registrationData", v48);
      if (!v21)
        goto LABEL_7;
      v22 = v21;
      v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      v26 = objc_msgSend(v20, "pushToken");
      if (v26)
      {
        v27 = v26;
        v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        sub_10007FBC8(v23, v25);
        if ((v31 & 1) != 0)
        {
          sub_10007FBC8(v28, v30);
          if ((v32 & 1) != 0)
          {
            v33 = objc_msgSend(v20, "ckstate");
            if (!v33)
              goto LABEL_23;
            v34 = v33;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
            v37 = v36;

            if (!v37)
              goto LABEL_23;
            if (v35 == 0x646574656C6564 && v37 == 0xE700000000000000)
            {
              swift_bridgeObjectRelease(0xE700000000000000);
              goto LABEL_22;
            }
            v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, 0x646574656C6564, 0xE700000000000000, 0);
            swift_bridgeObjectRelease(v37);
            if ((v38 & 1) != 0)
            {
LABEL_22:
              sub_10006F22C(v28, v30);
              sub_10006F22C(v23, v25);
            }
            else
            {
LABEL_23:
              v39 = objc_allocWithZone((Class)KTLoggableData);
              sub_10006F1A0(v23, v25);
              isa = Data._bridgeToObjectiveC()().super.isa;
              v41 = objc_msgSend(v39, "initWithClientData:", isa);
              sub_10006F22C(v23, v25);

              v42 = Data._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v41, "setDeviceID:", v42);

              v43 = objc_msgSend(v20, "osVersion");
              objc_msgSend(v41, "setBuild:", v43);
              sub_10006F22C(v23, v25);
              sub_10006F22C(v28, v30);

              v44 = *v50;
              *v50 = v41;

            }
            v16 = v51;
            v14 = v49;
            goto LABEL_7;
          }
        }
        sub_10006F22C(v28, v30);
        sub_10006F22C(v23, v25);
        v16 = v51;
      }
      else
      {
        sub_10006F22C(v23, v25);
      }
LABEL_7:
      ++v17;

      if (v16 == v17)
        goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t sub_10007C0D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007C0E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10007C0F8()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  Class isa;
  id v33;
  Class v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  v46 = 0;
  v3 = objc_msgSend(v2, "execute:", &v46);
  v4 = v46;
  if (!v3)
  {
    v39 = v46;
    v40 = _convertNSErrorToError(_:)(v4);

    swift_willThrow();
    swift_errorRelease(v40);
    return;
  }
  v5 = v3;
  v6 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  v8 = v4;

  v42 = v2;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v41 = v7;
    else
      v41 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v9 = _CocoaArrayWrapper.endIndex.getter(v41);
    if (v9)
      goto LABEL_4;
LABEL_29:
    swift_bridgeObjectRelease_n(v7, 2);

    return;
  }
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v7);
  if (!v9)
    goto LABEL_29;
LABEL_4:
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = v7 & 0xC000000000000001;
    v12 = &selRef_perApplicationTreeEntry;
    v44 = v9;
    v45 = v7;
    v43 = v7 & 0xC000000000000001;
    while (1)
    {
      if (v11)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      else
        v13 = *(id *)(v7 + 8 * v10 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, v12[150], v42);
      if (!v15)
        goto LABEL_7;
      v16 = v15;
      v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      v20 = objc_msgSend(v14, "pushToken");
      if (v20)
        break;
      sub_10006F22C(v17, v19);
LABEL_7:
      ++v10;

      if (v9 == v10)
        goto LABEL_29;
    }
    v21 = v20;
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = objc_msgSend(v14, "ckstate");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      if (v29)
      {
        if (v27 == 0x646574656C6564 && v29 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease(0xE700000000000000);
LABEL_19:
          sub_10006F22C(v22, v24);
          sub_10006F22C(v17, v19);
LABEL_23:
          v9 = v44;
          v7 = v45;
          v11 = v43;
          v12 = &selRef_perApplicationTreeEntry;
          goto LABEL_7;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, 0x646574656C6564, 0xE700000000000000, 0);
        swift_bridgeObjectRelease(v29);
        if ((v30 & 1) != 0)
          goto LABEL_19;
      }
    }
    v31 = objc_allocWithZone((Class)KTLoggableData);
    sub_10006F1A0(v17, v19);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v31, "initWithClientData:", isa);
    sub_10006F22C(v17, v19);

    v34 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "setDeviceID:", v34);

    v35 = v33;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v37 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v36 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v37 >= v36 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
    v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
    specialized Array._endMutation()(v38);
    sub_10006F22C(v17, v19);
    sub_10006F22C(v22, v24);

    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_10007C4A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007C4B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10007C4C0()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  Class isa;
  id v33;
  Class v34;
  id v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  v49 = 0;
  v3 = objc_msgSend(v2, "execute:", &v49);
  v4 = v49;
  if (!v3)
  {
    v42 = v49;
    v43 = _convertNSErrorToError(_:)(v4);

    swift_willThrow();
    swift_errorRelease(v43);
    return;
  }
  v5 = v3;
  v6 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  v8 = v4;

  v45 = v2;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v44 = v7;
    else
      v44 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v9 = _CocoaArrayWrapper.endIndex.getter(v44);
    if (v9)
      goto LABEL_4;
LABEL_29:
    swift_bridgeObjectRelease_n(v7, 2);

    return;
  }
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v7);
  if (!v9)
    goto LABEL_29;
LABEL_4:
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = v7 & 0xC000000000000001;
    v12 = &selRef_perApplicationTreeEntry;
    v47 = v9;
    v48 = v7;
    v46 = v7 & 0xC000000000000001;
    while (1)
    {
      if (v11)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      else
        v13 = *(id *)(v7 + 8 * v10 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, v12[150], v45);
      if (!v15)
        goto LABEL_7;
      v16 = v15;
      v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      v20 = objc_msgSend(v14, "pushToken");
      if (v20)
        break;
      sub_10006F22C(v17, v19);
LABEL_7:
      ++v10;

      if (v9 == v10)
        goto LABEL_29;
    }
    v21 = v20;
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = objc_msgSend(v14, "ckstate");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      if (v29)
      {
        if (v27 == 0x646574656C6564 && v29 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease(0xE700000000000000);
LABEL_19:
          sub_10006F22C(v22, v24);
          sub_10006F22C(v17, v19);
LABEL_23:
          v9 = v47;
          v7 = v48;
          v11 = v46;
          v12 = &selRef_perApplicationTreeEntry;
          goto LABEL_7;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, 0x646574656C6564, 0xE700000000000000, 0);
        swift_bridgeObjectRelease(v29);
        if ((v30 & 1) != 0)
          goto LABEL_19;
      }
    }
    v31 = objc_allocWithZone((Class)KTLoggableData);
    sub_10006F1A0(v17, v19);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v31, "initWithClientData:", isa);
    sub_10006F22C(v17, v19);

    v34 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "setDeviceID:", v34);

    v35 = objc_msgSend(objc_allocWithZone((Class)TransparencyCloudDevice), "init");
    objc_msgSend(v35, "setLoggableData:", v33);
    v36 = objc_msgSend(v14, "ckstate");
    objc_msgSend(v35, "setState:", v36);

    v37 = objc_msgSend(v14, "serialNumber");
    objc_msgSend(v35, "setSerialNumber:", v37);

    v38 = v35;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v40 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v39 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v40 >= v39 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
    v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
    specialized Array._endMutation()(v41);
    sub_10006F22C(v17, v19);
    sub_10006F22C(v22, v24);

    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_10007C900()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007C910()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10006F22C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10006F22C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10007C94C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _DWORD *v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  Class v55;
  Class v56;
  id v57;
  Class isa;
  Class v59;
  NSString v60;
  void *v61;
  unsigned int v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _DWORD *v67;
  uint8_t *buf;
  void *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002143C0;
  v6 = objc_msgSend(v2, "recordName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10008189C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v5);
  objc_msgSend(v3, "setPredicate:", v10);

  v74 = 0;
  v11 = objc_msgSend(v3, "execute:", &v74);
  v12 = v74;
  if (v11)
  {
    v13 = v11;
    v14 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    v16 = v12;

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v33 = v15;
      else
        v33 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v17 = (id)_CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v15);
      if (v17)
      {
LABEL_4:
        if ((v15 & 0xC000000000000001) != 0)
        {
          v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
        }
        else
        {
          if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_33;
          }
          v18 = *(id *)(v15 + 32);
        }
        v17 = v18;
        swift_bridgeObjectRelease(v15);
        if (qword_1002A4C20 == -1)
        {
LABEL_8:
          v19 = type metadata accessor for Logger(0);
          sub_10006F07C(v19, (uint64_t)qword_1002A4C28);
          v20 = v2;
          v21 = Logger.logObject.getter(v20);
          v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            v71 = v3;
            v23 = (uint8_t *)swift_slowAlloc(12, -1);
            v70 = v1;
            v24 = (void *)swift_slowAlloc(32, -1);
            v74 = v24;
            *(_DWORD *)v23 = 136315138;
            v25 = objc_msgSend(v20, "recordName");
            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v28 = v27;

            v72 = sub_10006C790(v26, v28, (uint64_t *)&v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v23 + 4, v23 + 12);
            v29 = v28;
            v3 = v71;
            swift_bridgeObjectRelease(v29);

            _os_log_impl((void *)&_mh_execute_header, v21, v22, "add device: updating existing record %s", v23, 0xCu);
            swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
            v30 = v24;
            v1 = v70;
            swift_slowDealloc(v30, -1, -1);
            swift_slowDealloc(v23, -1, -1);
          }
          else
          {

          }
LABEL_27:
          sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
          v57 = v17;
          isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          objc_msgSend(v57, "setInjected:", isa);

          v59 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
          objc_msgSend(v57, "setLocal:", v59);

          v60 = String._bridgeToObjectiveC()();
          objc_msgSend(v57, "setCkstate:", v60);

          v61 = (void *)(*(uint64_t (**)(id))(*(_QWORD *)v1 + 152))(objc_msgSend(v57, "setTimeToLive:", 0));
          v74 = 0;
          v62 = objc_msgSend(v61, "save:", &v74);

          v63 = v74;
          if (v62)
          {
            v64 = v74;

          }
          else
          {
            v65 = v74;
            v66 = _convertNSErrorToError(_:)(v63);

            swift_willThrow();
            swift_errorRelease(v66);
            v3 = v57;
          }
          goto LABEL_30;
        }
LABEL_33:
        swift_once(&qword_1002A4C20, sub_100075C8C);
        goto LABEL_8;
      }
    }
    else
    {
      v17 = *(id *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v17)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v31 = v74;
    v32 = _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    swift_errorRelease(v32);
  }
  if (qword_1002A4C20 != -1)
    swift_once(&qword_1002A4C20, sub_100075C8C);
  v34 = type metadata accessor for Logger(0);
  sub_10006F07C(v34, (uint64_t)qword_1002A4C28);
  v35 = static os_log_type_t.error.getter();
  v36 = v2;
  v37 = Logger.logObject.getter(v36);
  v38 = v35;
  if (os_log_type_enabled(v37, v35))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = (void *)swift_slowAlloc(32, -1);
    v74 = v69;
    *(_DWORD *)v39 = 136315138;
    v40 = v39 + 12;
    v67 = v39 + 4;
    buf = v39;
    v41 = v1;
    v42 = objc_msgSend(v36, "recordName");
    v43 = v3;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

    v1 = v41;
    v47 = v44;
    v3 = v43;
    v72 = sub_10006C790(v47, v46, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v67, v40);
    swift_bridgeObjectRelease(v46);

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "creating new record %s", buf, 0xCu);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(buf, -1, -1);
  }
  else
  {

  }
  v48 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v49 = objc_msgSend(objc_allocWithZone((Class)CloudDevice), "initWithContext:", v48);

  if (v49)
  {
    v50 = v49;
    v51 = objc_msgSend(v36, "recordName");
    if (!v51)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v53 = v52;
      v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
    }
    objc_msgSend(v50, "setRecordID:", v51);

    v54 = v50;
    v55 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v54, "setPushToken:", v55);

    v17 = v54;
    v56 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setRegistrationData:", v56);

    goto LABEL_27;
  }
LABEL_30:

}

uint64_t sub_10007D108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10007D118()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  id v28;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002143C0;
  v6 = objc_msgSend(v2, "recordName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10008189C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v5);
  objc_msgSend(v3, "setPredicate:", v10);

  v28 = 0;
  v11 = objc_msgSend(v3, "execute:", &v28);
  v12 = v28;
  if (!v11)
    goto LABEL_16;
  v13 = v11;
  v14 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  v16 = v12;

  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v22 = v15;
    else
      v22 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v15, 2);
    v17 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v15);
    if (!v17)
      goto LABEL_14;
  }
  else
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    if (!v17)
      goto LABEL_14;
  }
  if (v17 >= 1)
  {
    v18 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
      else
        v19 = *(id *)(v15 + 8 * v18 + 32);
      v20 = v19;
      ++v18;
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, "setCkstate:", v21);

    }
    while (v17 != v18);
LABEL_14:
    v23 = swift_bridgeObjectRelease_n(v15, 2);
    v24 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v23);
    v28 = 0;
    v25 = objc_msgSend(v24, "save:", &v28);

    v12 = v28;
    if ((v25 & 1) != 0)
    {
      v26 = v28;
LABEL_17:

      return;
    }
LABEL_16:
    v27 = v12;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10007D3F0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Data.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10007D454(a1, a2, v4);
}

uint64_t sub_10007D454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

Swift::Int sub_10007DDE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029F6B8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain(v5);
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        if (__OFADD__(v16++, 1))
          goto LABEL_41;
        if (v16 >= v13)
        {
LABEL_34:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) != 0)
          {
            v35 = 1 << *(_BYTE *)(v5 + 32);
            if (v35 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v10 = -1 << v35;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v26 = v10[v16];
        if (!v26)
        {
          v27 = v16 + 1;
          if (v16 + 1 >= v13)
            goto LABEL_34;
          v26 = v10[v27];
          if (!v26)
          {
            while (1)
            {
              v16 = v27 + 1;
              if (__OFADD__(v27, 1))
                break;
              if (v16 >= v13)
                goto LABEL_34;
              v26 = v10[v16];
              ++v27;
              if (v26)
                goto LABEL_23;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v16;
        }
LABEL_23:
        v12 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v28 = 16 * v24;
      v29 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v28);
      v38 = v29;
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28 + 8);
      if ((a2 & 1) == 0)
      {
        sub_10006F1A0(v29, *((unint64_t *)&v29 + 1));
        sub_10006F1A0(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)(v39);
      Data.hash(into:)(v39, v38, v30);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
        v21 = v38;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v17) >> 6;
        v21 = v38;
        do
        {
          if (++v19 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v19 == v32;
          if (v19 == v32)
            v19 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v34 == -1);
        v20 = __clz(__rbit64(~v34)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v22 = 16 * v20;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + v22) = v21;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void *sub_10007E0D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v19;
  int64_t v20;
  __int128 v21;

  v1 = v0;
  sub_10006F03C(&qword_10029F6B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    if (!v19)
      break;
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    sub_10006F1A0(v17, *((unint64_t *)&v17 + 1));
    result = (void *)sub_10006F1A0(v21, *((unint64_t *)&v21 + 1));
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10007E27C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_10007E30C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_10006F284((unint64_t *)&unk_10029F380, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

void sub_10007E3D0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_10007E434
     + *((int *)qword_10007E5D8 + (sub_1000754FC(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_10007E444()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_10006F1A0(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_10006F0F8(&v11);
}

unint64_t sub_10007E5E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A0340;
  if (!qword_1002A0340)
  {
    v1 = sub_10006FD6C((uint64_t *)&unk_10029F350);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002A0340);
  }
  return result;
}

void sub_10007E634(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_100079600(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10007E64C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10007E678()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002143C0;
  v6 = objc_msgSend(v2, "recordName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10008189C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v5);
  objc_msgSend(v3, "setPredicate:", v10);

  v30 = 0;
  v11 = objc_msgSend(v3, "execute:", &v30);
  v12 = v30;
  if (v11)
  {
    v13 = v11;
    v14 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    v16 = v12;

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v23 = v15;
      else
        v23 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v17 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v15);
      if (v17)
      {
LABEL_4:
        if (v17 < 1)
        {
          __break(1u);
          return;
        }
        v18 = 0;
        v19 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 152);
        do
        {
          if ((v15 & 0xC000000000000001) != 0)
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
          else
            v20 = *(id *)(v15 + 8 * v18 + 32);
          v21 = v20;
          ++v18;
          v22 = (void *)v19();
          objc_msgSend(v22, "deleteObject:", v21);

        }
        while (v17 != v18);
      }
    }
    v24 = swift_bridgeObjectRelease_n(v15, 2);
    v25 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v24);
    v30 = 0;
    v26 = objc_msgSend(v25, "save:", &v30);

    v12 = v30;
    if ((v26 & 1) != 0)
    {
      v27 = v30;

      return;
    }
  }
  v28 = v12;
  v29 = _convertNSErrorToError(_:)(v12);

  swift_willThrow();
  swift_errorRelease(v29);
}

uint64_t sub_10007E938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10007E948()
{
  unint64_t result;

  result = qword_10029F3B8;
  if (!qword_10029F3B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10029F3B8);
  }
  return result;
}

uint64_t sub_10007E98C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10007E9B0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE **)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100214630;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v6 = sub_10008189C();
  *(_QWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 32) = 0x676E696F6774756FLL;
  *(_QWORD *)(v5 + 40) = 0xE800000000000000;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 72) = 0x646574656C6564;
  *(_QWORD *)(v5 + 80) = 0xE700000000000000;
  v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x80000001001DF290, v5);
  objc_msgSend(v3, "setPredicate:", v7);

  v10 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v8 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1)
    *v2 = 1;
}

uint64_t sub_10007EB70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007EB80()
{
  return sub_10007EBC0(0x676E696F6774756FLL, 0xE800000000000000);
}

uint64_t sub_10007EB98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007EBA8()
{
  return sub_10007EBC0(0x646574656C6564, 0xE700000000000000);
}

uint64_t sub_10007EBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v20;
  uint64_t v21;
  id v22;

  v6 = *(uint64_t **)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  v8 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1002143C0;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10008189C();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  v10 = (void *)NSPredicate.init(format:_:)(0x2065746174736B63, 0xEC0000004025203DLL, v9);
  objc_msgSend(v7, "setPredicate:", v10);

  v22 = 0;
  v11 = objc_msgSend(v7, "execute:", &v22);
  v12 = v22;
  if (v11)
  {
    v13 = v11;
    v14 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    v16 = v12;

    swift_retain(v5);
    v17 = sub_1000818E0(v15, v5);
    swift_release(v5);

    swift_bridgeObjectRelease(v15);
    v18 = *v6;
    *v6 = (uint64_t)v17;
    return swift_bridgeObjectRelease(v18);
  }
  else
  {
    v20 = v22;
    v21 = _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    return swift_errorRelease(v21);
  }
}

uint64_t sub_10007ED90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007EDA0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

id sub_10007EDD4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char **v26;
  char **v27;
  uint64_t v28;
  id v29;
  void *v30;
  NSString v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unsigned __int8 v75;
  id result;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  BOOL v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  id v92;
  id v93;
  uint64_t v94;

  v1 = v0[2];
  v2 = (_QWORD *)v0[3];
  v3 = v0[4];
  v89 = (_QWORD *)v0[5];
  v79 = v0[6];
  v80 = v1;
  if ((unint64_t)v1 >> 62)
    goto LABEL_59;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  if (!v4)
  {
LABEL_63:
    v73 = swift_bridgeObjectRelease(v80);
    v74 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 152))(v73);
    v93 = 0;
    v75 = objc_msgSend(v74, "save:", &v93);

    if ((v75 & 1) != 0)
      return v93;
    v92 = v93;
    v77 = v93;
    v78 = _convertNSErrorToError(_:)(v92);

    swift_willThrow();
    return (id)swift_errorRelease(v78);
  }
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v7 = v2 == (_QWORD *)1701736292 && v3 == 0xE400000000000000;
    v86 = v3;
    v87 = v2;
    v81 = v4;
    v85 = v7;
    while (1)
    {
      v82 = v5;
      if ((v80 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v80);
      else
        v9 = *(id *)(v80 + 32 + 8 * v5);
      v10 = v9;
      v11 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
      sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
      v12 = sub_10006F03C((uint64_t *)&unk_10029F390);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_1002143C0;
      v84 = v10;
      v14 = objc_msgSend(v10, "recordName");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      *(_QWORD *)(v13 + 56) = &type metadata for String;
      *(_QWORD *)(v13 + 64) = sub_10008189C();
      *(_QWORD *)(v13 + 32) = v15;
      *(_QWORD *)(v13 + 40) = v17;
      v18 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v13);
      objc_msgSend(v11, "setPredicate:", v18);

      v93 = 0;
      v83 = v11;
      v19 = objc_msgSend(v11, "execute:", &v93);
      v20 = v93;
      if (v19)
      {
        v21 = v19;
        v22 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
        v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);
        v24 = v20;

        if ((unint64_t)v23 >> 62)
        {
          if (v23 < 0)
            v71 = v23;
          else
            v71 = v23 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v23, 2);
          v25 = _CocoaArrayWrapper.endIndex.getter(v71);
          v1 = swift_bridgeObjectRelease(v23);
        }
        else
        {
          v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
          v1 = swift_bridgeObjectRetain(v23);
        }
        v26 = &selRef_writeUnknownGroupNoTag_value_;
        v27 = &selRef_perApplicationTreeEntry;
        if (v25)
        {
          if (v25 < 1)
            goto LABEL_58;
          v28 = 0;
          v90 = v25;
          v91 = v23 & 0xC000000000000001;
          v88 = v23;
          while (2)
          {
            if (v91)
              v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v23);
            else
              v29 = *(id *)(v23 + 8 * v28 + 32);
            v30 = v29;
            v31 = String._bridgeToObjectiveC()();
            objc_msgSend(v30, v26[443], v31);

            if (!v7
              && (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 1701736292, 0xE400000000000000, 0) & 1) == 0)
            {

              goto LABEL_24;
            }
            v32 = objc_msgSend(v30, v27[91]);
            if (!v32)
            {

              goto LABEL_23;
            }
            v33 = v32;
            v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v36 = v35;

            v37 = objc_msgSend(v30, "registrationData");
            if (!v37)
            {
              sub_10006F22C(v34, v36);

              goto LABEL_46;
            }
            v38 = v37;
            v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v3 = v40;

            v2 = v89;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
            v93 = (id)*v89;
            v42 = v93;
            *v89 = 0x8000000000000000;
            v44 = sub_10007D3F0(v34, v36);
            v45 = v42[2];
            v46 = (v43 & 1) == 0;
            v1 = v45 + v46;
            if (!__OFADD__(v45, v46))
            {
              v2 = v43;
              if (v42[3] >= v1)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  if ((v43 & 1) == 0)
                    goto LABEL_43;
                }
                else
                {
                  v1 = (uint64_t)sub_10007E0D0();
                  v42 = v93;
                  if ((v2 & 1) == 0)
                    goto LABEL_43;
                }
              }
              else
              {
                sub_10007DDE4(v1, isUniquelyReferenced_nonNull_native);
                v42 = v93;
                v1 = sub_10007D3F0(v34, v36);
                if ((v2 & 1) != (v47 & 1))
                  goto LABEL_67;
                v44 = v1;
                if ((v2 & 1) == 0)
                {
LABEL_43:
                  v42[(v44 >> 6) + 8] |= 1 << v44;
                  v51 = (uint64_t *)(v42[6] + 16 * v44);
                  *v51 = v34;
                  v51[1] = v36;
                  v52 = (uint64_t *)(v42[7] + 16 * v44);
                  *v52 = v39;
                  v52[1] = v3;
                  v53 = v42[2];
                  v54 = __OFADD__(v53, 1);
                  v55 = v53 + 1;
                  if (v54)
                    goto LABEL_57;
                  v42[2] = v55;
                  sub_10006F1A0(v34, v36);
LABEL_45:
                  v56 = *v89;
                  *v89 = v42;
                  swift_bridgeObjectRelease(v56);
                  sub_10006F22C(v34, v36);

                  v3 = v86;
                  v2 = v87;
                  v7 = v85;
                  v26 = &selRef_writeUnknownGroupNoTag_value_;
                  v27 = &selRef_perApplicationTreeEntry;
LABEL_46:
                  v23 = v88;
LABEL_23:
                  v25 = v90;
LABEL_24:
                  if (v25 == ++v28)
                    goto LABEL_11;
                  continue;
                }
              }
              v48 = (uint64_t *)(v42[7] + 16 * v44);
              v49 = *v48;
              v50 = v48[1];
              *v48 = v39;
              v48[1] = v3;
              sub_10006F22C(v49, v50);
              goto LABEL_45;
            }
            break;
          }
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          if (v1 < 0)
            v72 = v1;
          else
            v72 = v1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v1);
          v4 = _CocoaArrayWrapper.endIndex.getter(v72);
          if (!v4)
            goto LABEL_63;
          goto LABEL_3;
        }
LABEL_11:

        swift_bridgeObjectRelease_n(v23, 2);
        v8 = v84;
      }
      else
      {
        v57 = v93;
        v58 = _convertNSErrorToError(_:)(v20);

        swift_willThrow();
        if (qword_1002A4C20 != -1)
          swift_once(&qword_1002A4C20, sub_100075C8C);
        v59 = type metadata accessor for Logger(0);
        sub_10006F07C(v59, (uint64_t)qword_1002A4C28);
        v8 = v84;
        v60 = v84;
        swift_errorRetain(v58);
        v61 = v60;
        v62 = swift_errorRetain(v58);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          v65 = swift_slowAlloc(22, -1);
          v66 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v65 = 138412546;
          v93 = v61;
          v67 = v61;
          v3 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v65 + 4, v65 + 12);
          *v66 = v61;

          v7 = v85;
          *(_WORD *)(v65 + 12) = 2112;
          swift_errorRetain(v58);
          v68 = (void *)_swift_stdlib_bridgeErrorToNSError(v58);
          v93 = v68;
          v2 = v87;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v65 + 14, v65 + 22);
          v66[1] = v68;
          swift_errorRelease(v58);
          swift_errorRelease(v58);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "record to update not found %@: %@", (uint8_t *)v65, 0x16u);
          v69 = sub_10006F03C(&qword_10029F6B0);
          swift_arrayDestroy(v66, 2, v69);
          v70 = v66;
          v8 = v84;
          swift_slowDealloc(v70, -1, -1);
          swift_slowDealloc(v65, -1, -1);

          swift_errorRelease(v58);
        }
        else
        {

          swift_errorRelease(v58);
          swift_errorRelease(v58);
          swift_errorRelease(v58);

        }
      }
      v5 = v82 + 1;

      if (v82 + 1 == v81)
        goto LABEL_63;
    }
  }
  __break(1u);
LABEL_67:
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_10007F5E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10007F5F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Class v3;
  Class isa;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  if (v1)
  {
    v2 = (void *)v1;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v3 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v2, "cloudDeviceUploadedWithPushToken:tbsRegistrationData:", isa, v3);
    swift_unknownObjectRelease(v2);

  }
}

uint64_t sub_10007F6AC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656B6F5468737570 && a2 == 0xE90000000000006ELL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656B6F5468737570, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 7107700 && a2 == 0xE300000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(7107700, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 1936748641 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1936748641, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 0x64657463656A6E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64657463656A6E69, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10007F950(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10007FA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10007B7B4((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10007FB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10007B7B4(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10007FBC8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10007FC14()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10007FC48 + *((int *)qword_10007FE20 + (v0 >> 62))))();
}

uint64_t sub_10007FC58@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_10007FE40(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v22)
      return swift_release(a1);
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v22)
        return swift_release(a1);
      v19 = *(_QWORD *)(v21 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v22)
          return swift_release(a1);
        v19 = *(_QWORD *)(v21 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v22)
            return swift_release(a1);
          v19 = *(_QWORD *)(v21 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = 16 * v10;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v11);
    v16 = *v15;
    v17 = v15[1];
    sub_10006F1A0(*v12, v14);
    sub_10006F1A0(v16, v17);
    a2(v13, v14, v16, v17);
    sub_10006F22C(v13, v14);
    result = sub_10006F22C(v16, v17);
  }
  v20 = v18 + 4;
  if (v20 >= v22)
    return swift_release(a1);
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v22)
      return swift_release(a1);
    v19 = *(_QWORD *)(v21 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100080030()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10008005C()
{
  _QWORD *v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t (*v23)(void *, id);
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  os_log_type_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v1 = v0[2];
  v2 = (id *)v0[3];
  v3 = v0[4];
  v4 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v5 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1002143C0;
  v7 = objc_msgSend((id)v1, "recordName");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10008189C();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v6);
  objc_msgSend(v4, "setPredicate:", v11);

  v55 = 0;
  v12 = objc_msgSend(v4, "execute:", &v55);
  v13 = v55;
  if (!v12)
  {
    v29 = v55;
    v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    swift_errorRelease(v30);
    if (qword_1002A4C20 == -1)
    {
LABEL_12:
      v31 = type metadata accessor for Logger(0);
      sub_10006F07C(v31, (uint64_t)qword_1002A4C28);
      v32 = static os_log_type_t.error.getter();
      v33 = (id)v1;
      v34 = Logger.logObject.getter(v33);
      v35 = v32;
      if (!os_log_type_enabled(v34, v32))
      {

LABEL_26:
        return;
      }
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v55 = v33;
      v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 4, v36 + 12);
      *v37 = v33;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "record not found %@", v36, 0xCu);
      v39 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v37, 1, v39);
      v40 = v37;
LABEL_24:
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v36, -1, -1);
      goto LABEL_26;
    }
LABEL_29:
    swift_once(&qword_1002A4C20, sub_100075C8C);
    goto LABEL_12;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    v17 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002A4C20 != -1)
      swift_once(&qword_1002A4C20, sub_100075C8C);
    v44 = type metadata accessor for Logger(0);
    sub_10006F07C(v44, (uint64_t)qword_1002A4C28);
    v45 = static os_log_type_t.error.getter();
    v46 = swift_bridgeObjectRetain(v1);
    v34 = Logger.logObject.getter(v46);
    v47 = v45;
    if (!os_log_type_enabled(v34, v45))
    {
      swift_bridgeObjectRelease_n(v1, 2);
      goto LABEL_26;
    }
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (void *)swift_slowAlloc(32, -1);
    v55 = v48;
    *(_DWORD *)v36 = 136315138;
    v49 = swift_bridgeObjectRetain(v1);
    v50 = Array.description.getter(v49, v15);
    v52 = v51;
    swift_bridgeObjectRelease(v1);
    v53 = sub_10006C790(v50, v52, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v34, v47, "no response %s", v36, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    v40 = v48;
    goto LABEL_24;
  }
  if (v1 < 0)
    v43 = v1;
  else
    v43 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v43))
    goto LABEL_20;
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }
  v18 = *(id *)(v1 + 32);
LABEL_7:
  v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2);
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 336))(v19);
  v21 = *v2;
  *v2 = (id)v20;

  v22 = *v2;
  v23 = *(uint64_t (**)(void *, id))(*(_QWORD *)v3 + 384);
  v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }
  v25 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 152))();
  v55 = 0;
  v26 = objc_msgSend(v25, "save:", &v55);

  v27 = v55;
  if (v26)
  {
    v28 = v55;
    goto LABEL_10;
  }
  v41 = v55;
  v42 = _convertNSErrorToError(_:)(v27);

  swift_willThrow();
  swift_errorRelease(v42);
}

uint64_t sub_100080614()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080624()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100080648()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  void *v6;
  id v7;
  uint64_t (*v8)(void);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  id v38;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  if (v1 == 1)
  {
    sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
    v6 = (void *)NSPredicate.init(format:_:)(0x3D3D206C61636F6CLL, 0xEE0065736C616620, &_swiftEmptyArrayStorage);
    objc_msgSend(v5, "setPredicate:", v6);

  }
  v7 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v5);
  v8 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 152);
  v9 = (void *)v8();
  v38 = 0;
  v10 = objc_msgSend(v9, "executeRequest:error:", v7, &v38);

  v11 = v38;
  if (v10)
  {
    v12 = v38;

    if (!v1)
      goto LABEL_22;
  }
  else
  {
    v13 = v38;
    v14 = _convertNSErrorToError(_:)(v11);

    swift_willThrow();
    swift_errorRelease(v14);
    if (!v1)
      goto LABEL_22;
  }
  v15 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v16 = (void *)NSPredicate.init(format:_:)(0x3D3D206C61636F6CLL, 0xED00006575727420, &_swiftEmptyArrayStorage);
  objc_msgSend(v15, "setPredicate:", v16);

  v38 = 0;
  v17 = objc_msgSend(v15, "execute:", &v38);
  v18 = v38;
  if (v17)
  {
    v19 = v17;
    v20 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
    v22 = v18;

    v37 = v8;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v30 = v21;
      else
        v30 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v21, 2);
      v23 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v21);
      if (v23)
        goto LABEL_10;
    }
    else
    {
      v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v21);
      if (v23)
      {
LABEL_10:
        if (v23 < 1)
        {
          __break(1u);
          return;
        }
        v24 = 0;
        do
        {
          if ((v21 & 0xC000000000000001) != 0)
            v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v21);
          else
            v25 = *(id *)(v21 + 8 * v24 + 32);
          v26 = v25;
          objc_msgSend(v25, "setCkrecord:", 0);
          ++v24;
          v27 = String._bridgeToObjectiveC()();
          objc_msgSend(v26, "setCkstate:", v27);

        }
        while (v23 != v24);
      }
    }
    swift_bridgeObjectRelease_n(v21, 2);

    v8 = v37;
    goto LABEL_22;
  }
  v28 = v38;
  v29 = _convertNSErrorToError(_:)(v18);

  swift_willThrow();
  swift_errorRelease(v29);
LABEL_22:
  v31 = (void *)v8();
  v38 = 0;
  v32 = objc_msgSend(v31, "save:", &v38);

  v33 = v38;
  if (v32)
  {
    v34 = v38;

  }
  else
  {
    v35 = v38;
    v36 = _convertNSErrorToError(_:)(v33);

    swift_willThrow();
    swift_errorRelease(v36);
    v5 = v7;
  }

}

uint64_t sub_100080A68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080A78(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

_OWORD *sub_100080A9C(_OWORD *a1, uint64_t a2, int *a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_10006F1A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    v10 = (uint64_t *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10006F1A0(*v10, *(_QWORD *)(a2 + 24));
      *((_QWORD *)v4 + 2) = v12;
      *((_QWORD *)v4 + 3) = v11;
    }
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (const void *)(a2 + v13);
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_10006F03C((uint64_t *)&unk_10029EE40);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = a3[7];
    v20 = a3[8];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)((char *)v4 + v20);
    v25 = (_QWORD *)(a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[9];
    v28 = a3[10];
    v29 = *(_QWORD *)(a2 + v27);
    *(_QWORD *)((char *)v4 + v27) = v29;
    *((_BYTE *)v4 + v28) = *(_BYTE *)(a2 + v28);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
  }
  return v4;
}

uint64_t sub_100080C40(uint64_t *a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10006F22C(*a1, v4);
  v5 = a1[3];
  if (v5 >> 60 != 15)
    sub_10006F22C(a1[2], v5);
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + a2[9]));
}

uint64_t sub_100080D08(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10006F1A0(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10006F1A0(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (uint64_t *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(a1 + v18);
  v23 = (uint64_t *)((char *)a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[9];
  v26 = a3[10];
  v27 = *(uint64_t *)((char *)a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  *(_BYTE *)(a1 + v26) = *((_BYTE *)a2 + v26);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t *sub_100080E80(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_10006F1A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_100081100((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_10006F1A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10006F22C(v9, v10);
LABEL_8:
  v11 = (uint64_t *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      v13 = *v11;
      sub_10006F1A0(*v11, *(_QWORD *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_100081100((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v14 = *v11;
  sub_10006F1A0(*v11, *(_QWORD *)(a2 + 24));
  v15 = a1[2];
  v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_10006F22C(v15, v16);
LABEL_15:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    v25 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_21:
  v26 = a3[7];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[8];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = a3[9];
  v37 = *(uint64_t *)((char *)a1 + v36);
  v38 = *(_QWORD *)(a2 + v36);
  *(uint64_t *)((char *)a1 + v36) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100081100(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

_OWORD *sub_100081134(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  return a1;
}

uint64_t sub_100081228(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100081100(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10006F22C(v8, v6);
LABEL_6:
  v9 = (_OWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_100081100(a1 + 16);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10006F22C(v12, v10);
LABEL_11:
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_16;
  }
  if (v20)
  {
LABEL_16:
    v21 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_17:
  v22 = a3[7];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[8];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[9];
  v35 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100081420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008142C);
}

uint64_t sub_10008142C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000814C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000814CC);
}

uint64_t sub_1000814CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

void sub_100081550(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1002146D0;
  v4[1] = &unk_1002146D0;
  sub_1000815E4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1002146E8;
    v4[4] = &unk_1002146E8;
    v4[5] = &unk_100214700;
    v4[6] = &unk_100214718;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_1000815E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10029F480)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10029F480);
  }
}

uint64_t type metadata accessor for KTCloudDevice()
{
  return objc_opt_self(_TtC13transparencyd13KTCloudDevice);
}

uint64_t getEnumTagSinglePayload for CloudDeviceData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudDeviceData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100081734 + 4 * byte_100214645[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100081768 + 4 * byte_100214640[v4]))();
}

uint64_t sub_100081768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100081778);
  return result;
}

uint64_t sub_100081784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008178CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100081790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000817A4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000817AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudDeviceData.CodingKeys()
{
  return &type metadata for CloudDeviceData.CodingKeys;
}

unint64_t sub_1000817C8()
{
  unint64_t result;

  result = qword_1002A4E60[0];
  if (!qword_1002A4E60[0])
  {
    result = swift_getWitnessTable(&unk_100214814, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, qword_1002A4E60);
  }
  return result;
}

unint64_t sub_100081810()
{
  unint64_t result;

  result = qword_1002A4F70;
  if (!qword_1002A4F70)
  {
    result = swift_getWitnessTable(&unk_100214784, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A4F70);
  }
  return result;
}

unint64_t sub_100081858()
{
  unint64_t result;

  result = qword_1002A4F78;
  if (!qword_1002A4F78)
  {
    result = swift_getWitnessTable(&unk_1002147AC, &type metadata for CloudDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A4F78);
  }
  return result;
}

unint64_t sub_10008189C()
{
  unint64_t result;

  result = qword_10029F860;
  if (!qword_10029F860)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10029F860);
  }
  return result;
}

void *sub_1000818E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  Swift::String v14;
  CKRecordID v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "recordID");
      if (v8)
      {
        v9 = v8;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        v12 = v11;

        sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
        v13 = *(id *)(a2 + 40);
        v14._countAndFlagsBits = v10;
        v14._object = v12;
        v15.super.isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v17 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15.super.isa);
        specialized Array._endMutation()(v18);
      }
      else
      {

      }
      ++v4;
      if (v7 == v3)
        goto LABEL_20;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_20:
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100081AB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10006F03C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100081AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudDeviceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100081B98()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A5008);
  sub_10006F07C(v0, (uint64_t)qword_1002A5008);
  return Logger.init(transparencyCategory:)(0x6C43657461647075, 0xEB0000000064756FLL);
}

id KTUpdateCloudDeviceOperation.__allocating_init(deps:context:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  _BYTE *v5;
  objc_super v7;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id KTUpdateCloudDeviceOperation.init(deps:context:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  objc_super v4;

  v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for KTUpdateCloudDeviceOperation()
{
  return objc_opt_self(_TtC13transparencyd28KTUpdateCloudDeviceOperation);
}

Swift::Void __swiftcall KTUpdateCloudDeviceOperation.groupStart()()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  objc_class *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  Swift::OpaquePointer_optional v22;
  Swift::OpaquePointer_optional v23;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
  v3 = objc_msgSend(v2, "ckdatabase");
  if (v3)
  {
    v21 = v3;
    v4 = objc_msgSend(v2, "cloudRecords");
    if (!v4)
    {
      v17 = v21;
      goto LABEL_8;
    }
    v5 = v4;
    v6 = objc_msgSend(v4, "pendingRecords");
    v7 = sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v18 = v8;
      else
        v18 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v19 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(v8);
      if (v19)
        goto LABEL_5;
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_5:
      v23.value._rawValue = (void *)sub_10006D6DC(0, (unint64_t *)&qword_10029F770, CKModifyRecordsOperation_ptr);
      v22.value._rawValue = (void *)v8;
      v22.is_nil = 0;
      isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v22, v23).super.super.super.super.isa;
      -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
      v10 = isa;
      v11 = String._bridgeToObjectiveC()();
      -[objc_class setName:](v10, "setName:", v11);

      v12 = objc_msgSend(objc_allocWithZone((Class)NSBlockOperation), "init");
      objc_msgSend(v1, "dependOnBeforeGroupFinished:", v12);
      v13 = swift_allocObject(&unk_100241720, 32, 7);
      *(_QWORD *)(v13 + 16) = v1;
      *(_QWORD *)(v13 + 24) = v5;
      v14 = v1;
      swift_unknownObjectRetain(v5);
      CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_100082034, v13);
      v15 = swift_allocObject(&unk_100241748, 32, 7);
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = v12;
      v16 = v14;
      v20 = v12;
      CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_100083224, v15);
      objc_msgSend(v21, "addOperation:", v10);

      swift_unknownObjectRelease(v5);
      v17 = v20;
LABEL_8:

      return;
    }

    swift_unknownObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
  }
}

uint64_t sub_100082008()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100082034(void *a1, void *a2, char a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSString v9;
  uint64_t v10;
  os_log_type_t v11;
  id v12;
  NSObject *v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  id v19;
  NSString v20;
  void *v21;
  uint64_t v22;
  os_log_type_t v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  Class isa;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  NSString v86;
  id v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSString v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  NSArray v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  NSString v129;
  void *type;
  os_log_type_t typea;
  id v132;
  id v133;
  os_log_t v134;
  NSObject *v135;
  NSObject *v136;
  os_log_t v137;
  NSObject *v138;
  uint64_t v139;
  id v140;
  id v141;
  uint64_t v142;

  v5 = *(void **)(v3 + 24);
  v6 = *(void **)(*(_QWORD *)(v3 + 16) + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps);
  if ((a3 & 1) != 0)
  {
    v132 = *(id *)(v3 + 24);
    v134 = *(os_log_t *)(v3 + 16);
    swift_errorRetain(a2);
    type = v6;
    v19 = objc_msgSend(v6, "logger");
    v20 = String._bridgeToObjectiveC()();
    v21 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v19, "logResultForEvent:hardFailure:result:", v20, 1, v21);

    if (qword_1002A5000 != -1)
      swift_once(&qword_1002A5000, sub_100081B98);
    v22 = type metadata accessor for Logger(0);
    sub_10006F07C(v22, (uint64_t)qword_1002A5008);
    v23 = static os_log_type_t.error.getter();
    sub_10006F0E0(a2, 1);
    v24 = a1;
    sub_10006F0E0(a2, 1);
    v25 = v24;
    v26 = Logger.logObject.getter(v25);
    if (os_log_type_enabled(v26, v23))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v27 = 138412546;
      v141 = v25;
      v29 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v27 + 4, v27 + 12);
      *v28 = v25;

      *(_WORD *)(v27 + 12) = 2112;
      swift_errorRetain(a2);
      v30 = _swift_stdlib_bridgeErrorToNSError(a2);
      v141 = (id)v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v27 + 14, v27 + 22);
      v28[1] = v30;
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v26, v23, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v27, 0x16u);
      v31 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v28, 2, v31);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {

      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
    }

    v141 = a2;
    swift_errorRetain(a2);
    v41 = sub_10006F03C(&qword_10029EE58);
    type metadata accessor for CKError(0);
    v43 = v42;
    if ((swift_dynamicCast(&v140, &v141, v41, v42, 6) & 1) == 0)
    {
      sub_10006F0E0(a2, 1);
      v57 = v25;
      sub_10006F0E0(a2, 1);
      v58 = v57;
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = swift_slowAlloc(22, -1);
        v62 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v61 = 138412546;
        v141 = v58;
        v63 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v61 + 4, v61 + 12);
        *v62 = v58;

        *(_WORD *)(v61 + 12) = 2112;
        swift_errorRetain(a2);
        v64 = _swift_stdlib_bridgeErrorToNSError(a2);
        v141 = (id)v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v61 + 14, v61 + 22);
        v62[1] = v64;
        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v61, 0x16u);
        v65 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v62, 2, v65);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v61, -1, -1);
      }
      else
      {

        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
      }

      v66 = (void *)_convertErrorToNSError(_:)(a2);
      -[NSObject setError:](v134, "setError:", v66);
      sub_10006F0EC(a2, 1);

      return;
    }
    v44 = v140;
    v45 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
    _BridgedStoredNSError.code.getter(&v141, v43, v45);
    if (v141 == (id)11)
    {
      sub_10006F0E0(a2, 1);
      v67 = v25;
      sub_10006F0E0(a2, 1);
      v68 = v67;
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.error.getter();
      v136 = v69;
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(22, -1);
        v72 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v71 = 138412546;
        v140 = v68;
        v73 = v44;
        v74 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71 + 4, v71 + 12);
        *v72 = v68;

        v44 = v73;
        *(_WORD *)(v71 + 12) = 2112;
        swift_errorRetain(a2);
        v75 = _swift_stdlib_bridgeErrorToNSError(a2);
        v140 = (id)v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71 + 14, v71 + 22);
        v72[1] = v75;
        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v136, v70, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: deleted: %@ %@", (uint8_t *)v71, 0x16u);
        v76 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v72, 2, v76);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v71, -1, -1);
      }
      else
      {

        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
      }

      v109 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v44);
      if (v109)
      {
        v110 = (void *)v109;
        objc_msgSend(v132, "deleteRecordWithCkrecord:", v109);
        sub_10006F0EC(a2, 1);

LABEL_45:
        return;
      }
    }
    else
    {
      if (v141 == (id)26)
      {
        type metadata accessor for KTCKZone();
        v77 = sub_1000A56EC((uint64_t)objc_retain(*(id *)((char *)&v134->isa
                                                       + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context)));
        v78 = objc_msgSend(v25, "zoneID");
        v79 = objc_msgSend(v78, "zoneName");

        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v82 = v81;

        v137 = (os_log_t)v77;
        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), _QWORD))(*(_QWORD *)v77 + 120))(v80, v82, sub_10006C270, 0);
        swift_bridgeObjectRelease(v82);
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CloudKitZoneRecreate"));
        v84 = v83;
        v85 = objc_allocWithZone((Class)KTPendingFlag);
        v86 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v84);
        v87 = objc_msgSend(v85, "initWithFlag:delayInSeconds:", v86, 0.1);

        v88 = v25;
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = (uint8_t *)swift_slowAlloc(12, -1);
          v133 = v44;
          v92 = swift_slowAlloc(32, -1);
          v140 = (id)v92;
          *(_DWORD *)v91 = 136315138;
          v93 = objc_msgSend(v88, "zoneID");
          v94 = objc_msgSend(v93, "zoneName");

          v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          v97 = v96;

          v139 = sub_10006C790(v95, v97, (uint64_t *)&v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease(v97);

          _os_log_impl((void *)&_mh_execute_header, v89, v90, "will recreate the zone %s", v91, 0xCu);
          swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
          v98 = v92;
          v44 = v133;
          swift_slowDealloc(v98, -1, -1);
          swift_slowDealloc(v91, -1, -1);
        }
        else
        {

        }
        v111 = objc_msgSend(type, "flagHandler");
        if (v111)
        {
          v112 = v111;
          objc_msgSend(v111, "handlePendingFlag:", v87);
          sub_10006F0EC(a2, 1);

          swift_unknownObjectRelease(v112);
        }
        else
        {
          sub_10006F0EC(a2, 1);

        }
        swift_release(v137);
        return;
      }
      if (v141 == (id)14)
      {
        v46 = related decl 'e' for CKErrorCode.serverRecord.getter(v44);
        if (v46)
        {
          v47 = (void *)v46;
          sub_10006F0E0(a2, 1);
          v48 = v25;
          sub_10006F0E0(a2, 1);
          v49 = v48;
          v50 = Logger.logObject.getter(v49);
          v51 = static os_log_type_t.error.getter();
          v135 = v50;
          if (os_log_type_enabled(v50, v51))
          {
            v52 = swift_slowAlloc(22, -1);
            v53 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v52 = 138412546;
            typea = v51;
            v140 = v49;
            v54 = v49;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v52 + 4, v52 + 12);
            *v53 = v49;

            *(_WORD *)(v52 + 12) = 2112;
            swift_errorRetain(a2);
            v55 = _swift_stdlib_bridgeErrorToNSError(a2);
            v140 = (id)v55;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v52 + 14, v52 + 22);
            v53[1] = v55;
            sub_10006F0EC(a2, 1);
            sub_10006F0EC(a2, 1);
            _os_log_impl((void *)&_mh_execute_header, v135, typea, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: serverRecord: %@ %@", (uint8_t *)v52, 0x16u);
            v56 = sub_10006F03C(&qword_10029F6B0);
            swift_arrayDestroy(v53, 2, v56);
            swift_slowDealloc(v53, -1, -1);
            swift_slowDealloc(v52, -1, -1);
          }
          else
          {

            sub_10006F0EC(a2, 1);
            sub_10006F0EC(a2, 1);
          }

          v113 = v132;
          CKRecord.recordType.getter(objc_msgSend(v132, "updatedRecordWithCkrecord:", v47));
          v124 = v123;
          v117 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v124);
          v125 = sub_10006F03C(&qword_10029F870);
          v126 = swift_allocObject(v125, 40, 7);
          *(_OWORD *)(v126 + 16) = xmmword_100214910;
          v127 = objc_msgSend(v47, "recordID");
          *(_QWORD *)(v126 + 32) = v127;
          v140 = (id)v126;
          specialized Array._endMutation()(v127);
          v128 = (uint64_t)v140;
          sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
          v122.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v128);
          goto LABEL_44;
        }
      }
      else
      {
        sub_10006F0E0(a2, 1);
        v99 = v25;
        sub_10006F0E0(a2, 1);
        v100 = v99;
        v101 = Logger.logObject.getter(v100);
        v102 = static os_log_type_t.error.getter();
        v138 = v101;
        if (os_log_type_enabled(v101, v102))
        {
          v103 = swift_slowAlloc(22, -1);
          v104 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v103 = 138412546;
          v140 = v100;
          v105 = v44;
          v106 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 4, v103 + 12);
          *v104 = v100;

          v44 = v105;
          *(_WORD *)(v103 + 12) = 2112;
          swift_errorRetain(a2);
          v107 = _swift_stdlib_bridgeErrorToNSError(a2);
          v140 = (id)v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 14, v103 + 22);
          v104[1] = v107;
          sub_10006F0EC(a2, 1);
          sub_10006F0EC(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v138, v102, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: ck fail: %@ %@", (uint8_t *)v103, 0x16u);
          v108 = sub_10006F03C(&qword_10029F6B0);
          swift_arrayDestroy(v104, 2, v108);
          swift_slowDealloc(v104, -1, -1);
          swift_slowDealloc(v103, -1, -1);
        }
        else
        {

          sub_10006F0EC(a2, 1);
          sub_10006F0EC(a2, 1);
        }
        v113 = v132;

        v114 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v44);
        if (v114)
        {
          v47 = (void *)v114;
          ((void (*)(void))CKRecord.recordType.getter)();
          v116 = v115;
          v117 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v116);
          v118 = sub_10006F03C(&qword_10029F870);
          v119 = swift_allocObject(v118, 40, 7);
          *(_OWORD *)(v119 + 16) = xmmword_100214910;
          v120 = objc_msgSend(v47, "recordID");
          *(_QWORD *)(v119 + 32) = v120;
          v140 = (id)v119;
          specialized Array._endMutation()(v120);
          v121 = (uint64_t)v140;
          sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
          v122.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v121);
LABEL_44:
          v129 = String._bridgeToObjectiveC()();
          objc_msgSend(v113, "recordUpdateCloudStateWithType:records:newState:", v117, v122.super.isa, v129);
          sub_10006F0EC(a2, 1);

          goto LABEL_45;
        }
      }
    }
    sub_10006F0EC(a2, 1);
    goto LABEL_45;
  }
  v7 = a2;
  v8 = objc_msgSend(v6, "logger");
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "logResultForEvent:hardFailure:result:", v9, 0, 0);

  if (qword_1002A5000 != -1)
    swift_once(&qword_1002A5000, sub_100081B98);
  v10 = type metadata accessor for Logger(0);
  sub_10006F07C(v10, (uint64_t)qword_1002A5008);
  v11 = static os_log_type_t.info.getter();
  v12 = v7;
  v13 = Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v11))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    v141 = v12;
    v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v14 + 4, v14 + 12);
    *v15 = a2;
    sub_10006F0EC(a2, 0);
    sub_10006F0EC(a2, 0);
    _os_log_impl((void *)&_mh_execute_header, v13, v11, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: success: %@", v14, 0xCu);
    v17 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_10006F0EC(a2, 0);
    sub_10006F0EC(a2, 0);
  }

  CKRecord.recordType.getter(objc_msgSend(v5, "updatedRecordWithCkrecord:", v12));
  v33 = v32;
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  v35 = sub_10006F03C(&qword_10029F870);
  v36 = swift_allocObject(v35, 40, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100214910;
  v37 = objc_msgSend(v12, "recordID");
  *(_QWORD *)(v36 + 32) = v37;
  v141 = (id)v36;
  specialized Array._endMutation()(v37);
  v38 = v141;
  sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  v40 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "recordUpdateCloudStateWithType:records:newState:", v34, isa, v40);

  sub_10006F0EC(a2, 0);
}

uint64_t sub_1000831F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100083224(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  void *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(char **)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v12 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v4, "setError:", v12);

    if (qword_1002A5000 != -1)
      swift_once(&qword_1002A5000, sub_100081B98);
    v13 = type metadata accessor for Logger(0);
    sub_10006F07C(v13, (uint64_t)qword_1002A5008);
    v14 = static os_log_type_t.error.getter();
    swift_errorRetain(a1);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = v14;
    if (os_log_type_enabled(v16, v14))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      swift_errorRetain(a1);
      v20 = _swift_stdlib_bridgeErrorToNSError(a1);
      v33 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
      *v19 = v20;
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: fail: %@", v18, 0xCu);
      v21 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
    }

    v22 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
    v23 = objc_msgSend(v22, "reachabilityTracker");
    v24 = (void *)_convertErrorToNSError(_:)(a1);
    v25 = objc_msgSend(v23, "isNetworkError:", v24);

    if (v25)
      v26 = 2;
    else
      v26 = 0;
    v27 = objc_allocWithZone((Class)KTPendingFlag);
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v27, "initWithFlag:conditions:delayInSeconds:", v28, v26, 0.2);

    v30 = objc_msgSend(v22, "flagHandler");
    if (v30)
    {
      v31 = v30;
      objc_msgSend(v30, "handlePendingFlag:", v29);
      sub_10006F094(a1, 1);
      swift_unknownObjectRelease(v31);
    }
    else
    {
      sub_10006F094(a1, 1);
    }

  }
  else
  {
    if (qword_1002A5000 != -1)
      swift_once(&qword_1002A5000, sub_100081B98);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10006F07C(v5, (uint64_t)qword_1002A5008);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: success", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps], "networkTimeout");
    objc_msgSend(v10, "networkWithFeedback:", 0);
    swift_unknownObjectRelease(v10);
  }
  v32 = objc_msgSend(v4, "operationQueue");
  objc_msgSend(v32, "addOperation:", v3);

}

void KTUpdateCloudDeviceOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTUpdateCloudDeviceOperation", 42, "init()", 6, 0);
  __break(1u);
}

id KTUpdateCloudDeviceOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10008372C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_100083738@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CloudOptInData(0) + 32);
  return sub_100074FE4(v3, a1);
}

uint64_t type metadata accessor for CloudOptInData(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A55D0;
  if (!qword_1002A55D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudOptInData);
  return result;
}

uint64_t sub_1000837A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudOptInData(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000837E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudOptInData(0) + 40));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10008381C(char a1)
{
  return *(_QWORD *)&aRecordiduri[8 * a1];
}

uint64_t sub_10008383C()
{
  char *v0;

  return sub_10008381C(*v0);
}

uint64_t sub_100083844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100096004(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100083868(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083AEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100083890(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083AEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000838B8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v3 = v1;
  v5 = sub_10006F03C(&qword_10029F808);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000754FC(a1, v9);
  v11 = sub_100083AEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudOptInData.CodingKeys, &type metadata for CloudOptInData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v38 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v38, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v37 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v37, v5);
    v16 = v3[4];
    v17 = v3[5];
    v36 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v36, v5);
    v18 = v3[6];
    v19 = *((unsigned __int8 *)v3 + 56);
    v35 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v35, v5);
    v20 = (int *)type metadata accessor for CloudOptInData(0);
    v21 = (uint64_t)v3 + v20[8];
    v34 = 4;
    v22 = type metadata accessor for Date(0);
    v23 = sub_10006F284(&qword_10029F810, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v34, v5, v22, v23);
    v24 = (uint64_t *)((char *)v3 + v20[9]);
    v25 = *v24;
    v26 = v24[1];
    v33 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v33, v5);
    v27 = (uint64_t *)((char *)v3 + v20[10]);
    v28 = *v27;
    v29 = v27[1];
    v32 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v32, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100083AEC()
{
  unint64_t result;

  result = qword_1002A54C0[0];
  if (!qword_1002A54C0[0])
  {
    result = swift_getWitnessTable(&unk_100214BF4, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, qword_1002A54C0);
  }
  return result;
}

uint64_t sub_100083B30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v38 = a2;
  v3 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_10006F03C(&qword_10029F818);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for CloudOptInData(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  v40 = a1;
  sub_1000754FC(a1, v12);
  v14 = sub_100083AEC();
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudOptInData.CodingKeys, &type metadata for CloudOptInData.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_10006F0F8(v40);
  v37 = v5;
  v41 = v11;
  v48 = 0;
  v16 = v39;
  v17 = v8;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v39);
  v19 = (uint64_t)v41;
  *v41 = v18;
  *(_QWORD *)(v19 + 8) = v20;
  v47 = 1;
  v21 = v6;
  *(_QWORD *)(v19 + 16) = KeyedDecodingContainer.decode(_:forKey:)(&v47, v16);
  *(_QWORD *)(v19 + 24) = v22;
  v46 = 2;
  *(_QWORD *)(v19 + 32) = KeyedDecodingContainer.decode(_:forKey:)(&v46, v16);
  *(_QWORD *)(v19 + 40) = v23;
  v45 = 3;
  *(_QWORD *)(v19 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v16);
  *(_BYTE *)(v19 + 56) = v24 & 1;
  v25 = type metadata accessor for Date(0);
  v44 = 4;
  v26 = sub_10006F284((unint64_t *)&unk_10029F370, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = v37;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v25, &v44, v16, v25, v26);
  sub_1000972B0((uint64_t)v27, v19 + v9[8], (uint64_t *)&unk_10029EE40);
  v43 = 5;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v16);
  v29 = (uint64_t *)(v19 + v9[9]);
  *v29 = v28;
  v29[1] = v30;
  v42 = 6;
  v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v16);
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v16);
  v34 = (uint64_t *)(v19 + v9[10]);
  *v34 = v31;
  v34[1] = v33;
  sub_100083F34(v19, v38);
  sub_10006F0F8(v40);
  return sub_100083F78(v19);
}

uint64_t sub_100083F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudOptInData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083F78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudOptInData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100083FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  v15 = (int *)type metadata accessor for CloudOptInData(0);
  result = sub_1000972B0(a10, a9 + v15[8], (uint64_t *)&unk_10029EE40);
  v17 = (_QWORD *)(a9 + v15[9]);
  *v17 = a11;
  v17[1] = a12;
  v18 = (_QWORD *)(a9 + v15[10]);
  *v18 = a13;
  v18[1] = a14;
  return result;
}

uint64_t sub_100084048@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100083B30(a1, a2);
}

uint64_t sub_10008405C(_QWORD *a1)
{
  return sub_1000838B8(a1);
}

uint64_t sub_100084070()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A54A8);
  sub_10006F07C(v0, (uint64_t)qword_1002A54A8);
  return Logger.init(transparencyCategory:)(0x74706F64756F6C63, 0xEA00000000006E69);
}

id sub_1000840D0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v1, "uri");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = objc_msgSend(v1, "application");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  v15 = objc_allocWithZone((Class)KTOptInState);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v18 = objc_msgSend(v15, "initWithURI:application:", v16, v17);

  v19 = objc_msgSend(v1, "state");
  if (v19)
  {
    v20 = v19;
    objc_msgSend(v18, "setState:", objc_msgSend(v19, "unsignedIntegerValue"));

  }
  v21 = objc_msgSend(v1, "smtTimestamp");
  if (v21)
  {
    v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    {
      isa = 0;
    }
    else
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    isa = 0;
  }
  objc_msgSend(v18, "setSmtTimestamp:", isa);

  v24 = objc_msgSend(v1, "osVersion");
  objc_msgSend(v18, "setOsVersion:", v24);

  v25 = objc_msgSend(v1, "serialNumber");
  objc_msgSend(v18, "setSerialNumber:", v25);

  return v18;
}

uint64_t sub_1000843B8()
{
  return 0x6E4974704FLL;
}

id sub_1000843CC()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

uint64_t sub_1000843D4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1000843DC()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 64));
}

void *sub_1000843E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 72, v4, 0, 0);
  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

void sub_100084424(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 72, v4, 1, 0);
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;

}

uint64_t (*sub_100084468(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000844A4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000844D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10008451C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100084558(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, 104, 7);
  sub_1000845C4(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *sub_1000845C4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSString v16;
  void *v17;
  id v18;
  _QWORD *v19;
  void *v20;
  _QWORD aBlock[5];
  _QWORD *v23;
  char v24[24];

  v5[2] = 0x6E4974704FLL;
  v5[3] = 0xE500000000000000;
  v5[9] = 0;
  v5[12] = 0xE100000000000000;
  v5[4] = a1;
  v5[5] = a2;
  v5[6] = a3;
  v5[7] = a4;
  v5[8] = a5;
  v5[10] = &_swiftEmptySetSingleton;
  v5[11] = 64;
  swift_beginAccess(v5 + 9, v24, 1, 0);
  v11 = (void *)v5[9];
  v5[9] = 0;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  swift_unknownObjectRetain(a4);
  swift_unknownObjectRetain(a5);

  v15 = objc_allocWithZone((Class)KTNearFutureScheduler);
  swift_retain_n(v5, 2);
  v16 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000847BC;
  v23 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EDF8;
  aBlock[3] = &unk_100241890;
  v17 = _Block_copy(aBlock);
  v18 = objc_msgSend(v15, "initWithName:initialDelay:exponentialBackoff:maximumDelay:keepProcessAlive:dependencyDescriptionCode:block:", v16, 2000000000, 3600000000000, 0, 0, v17, 1.4);

  _Block_release(v17);
  v19 = v23;
  swift_release(v5);

  swift_unknownObjectRelease(a4);
  swift_unknownObjectRelease(a5);
  swift_release(v19);
  v20 = (void *)v5[9];
  v5[9] = v18;

  return v5;
}

uint64_t sub_1000847B0()
{
  return 64;
}

uint64_t sub_1000847BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t sub_1000847C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  void *v25;

  v1 = v0;
  if (qword_1002A54A0 != -1)
LABEL_30:
    swift_once(&qword_1002A54A0, sub_100084070);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10006F07C(v2, (uint64_t)qword_1002A54A8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "updateMonitorWithNewAggregateState", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (*(uint64_t (**)(void))(*v1 + 200))();
  v8 = v7;
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v7 + 56;
  v13 = v11 & *(_QWORD *)(v7 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  while (v13)
  {
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v16 = v15 | (v9 << 6);
LABEL_24:
    v20 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(*v1 + 264);
    swift_bridgeObjectRetain(v22);
    v24 = (void *)v23(v21, v22);
    swift_bridgeObjectRelease(v22);
    if (v24)
    {
      v25 = (void *)v1[8];
      if (v25)
        objc_msgSend(v25, "updateAggregateOptIOState:", v24);

    }
  }
  v17 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= v14)
    goto LABEL_27;
  v18 = *(_QWORD *)(v12 + 8 * v17);
  ++v9;
  if (v18)
    goto LABEL_23;
  v9 = v17 + 1;
  if (v17 + 1 >= v14)
    goto LABEL_27;
  v18 = *(_QWORD *)(v12 + 8 * v9);
  if (v18)
    goto LABEL_23;
  v9 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_27;
  v18 = *(_QWORD *)(v12 + 8 * v9);
  if (v18)
  {
LABEL_23:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v9 << 6);
    goto LABEL_24;
  }
  v19 = v17 + 3;
  if (v19 < v14)
  {
    v18 = *(_QWORD *)(v12 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v9 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_29;
        if (v9 >= v14)
          goto LABEL_27;
        v18 = *(_QWORD *)(v12 + 8 * v9);
        ++v19;
        if (v18)
          goto LABEL_23;
      }
    }
    v9 = v19;
    goto LABEL_23;
  }
LABEL_27:
  swift_release(v8);
  return (*(uint64_t (**)(void *))(*v1 + 208))(&_swiftEmptySetSingleton);
}

uint64_t sub_100084A24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v27[9];
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for SHA256(0);
  v27[6] = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for SHA256Digest(0);
  v27[4] = *(_QWORD *)(v9 - 8);
  v27[5] = v9;
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v27[3] = (char *)v27 - v11;
  v12 = type metadata accessor for String.Encoding(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1;
  v29 = a2;
  swift_bridgeObjectRetain(a2);
  v16._countAndFlagsBits = 47;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = v29;
  swift_bridgeObjectRetain(v29);
  v18._countAndFlagsBits = a3;
  v18._object = a4;
  String.append(_:)(v18);
  v19 = swift_bridgeObjectRelease(v17);
  v20 = v28;
  v21 = v29;
  static String.Encoding.utf8.getter(v19);
  String.data(using:allowLossyConversion:)(v15, 0, v20, v21);
  v23 = v22;
  swift_bridgeObjectRelease(v21);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v23 >> 60 != 15)
  {
    v24 = sub_10006F284((unint64_t *)&unk_10029F380, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v8, v24);
    v25 = (char *)&loc_100084C04 + *((int *)qword_100084FF0 + (v23 >> 62));
    v27[1] = v23;
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_100085000(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v10 = type metadata accessor for Logger(0);
  sub_10006F07C(v10, (uint64_t)qword_1002A54A8);
  swift_bridgeObjectRetain_n(a2, 2);
  v11 = swift_bridgeObjectRetain_n(a4, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v19 = a3;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v22 = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(a2);
    v20 = sub_10006C790(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v20 = sub_10006C790(v19, a4, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "get record %s[%s]", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    v16 = swift_bridgeObjectRelease_n(a2, 2);
  }
  v17 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v16);
  __chkstk_darwin(v17);
  sub_10006F03C(&qword_10029F828);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100092008);

  return v22;
}

uint64_t sub_100085284(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = a1;
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_26;
  v3 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    v15 = v3;
    sub_10008EE4C(&v15);
    v2 = v15;
    if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
      break;
    v4 = *(_QWORD *)(v15 + 16);
    swift_retain(v15);
    if (!v4)
      goto LABEL_28;
LABEL_7:
    v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
LABEL_31:
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      goto LABEL_12;
    }
    v1 = v2 & 0xC000000000000001;
    if ((v2 & 0xC000000000000001) != 0)
      goto LABEL_31;
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      result = swift_release(v2);
      __break(1u);
      return result;
    }
    if (v5 >= *(_QWORD *)(v2 + 16))
      goto LABEL_33;
    v6 = *(id *)(v2 + 8 * v5 + 32);
LABEL_12:
    v7 = v6;
    swift_release(v2);
    while (!__OFSUB__(v4--, 1))
    {
      if (v1)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_24;
        if (v4 >= *(_QWORD *)(v2 + 16))
          goto LABEL_25;
        v9 = *(id *)(v2 + 32 + 8 * v4);
      }
      v10 = v9;
      v11 = objc_msgSend(v9, "state");
      if (v11 != objc_msgSend(v7, "state"))
      {

        swift_release(v2);
        return (uint64_t)v7;
      }

      v7 = v10;
      if (!v4)
      {
        swift_release(v2);
        return (uint64_t)v10;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    v12 = swift_bridgeObjectRetain(v2);
    v3 = (uint64_t)sub_10008EEC4(v12);
    swift_bridgeObjectRelease(v2);
  }
  v13 = swift_retain(v15);
  v4 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (v4)
    goto LABEL_7;
LABEL_28:
  swift_release_n(v2, 2);
  return 0;
}

uint64_t sub_10008543C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v8 = sub_10006F07C(v4, (uint64_t)qword_1002A54A8);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v57 = v8;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v56 = v7;
    v14 = v5;
    v15 = v4;
    v16 = v13;
    v61 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(a2);
    v59 = sub_10006C790(a1, a2, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "get aggregate record [%s]", v12, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v17 = v16;
    v4 = v15;
    v5 = v14;
    v7 = v56;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    v18 = swift_bridgeObjectRelease_n(a2, 2);
  }
  v19 = v58;
  v20 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 152))(v18);
  __chkstk_darwin(v20);
  *(&v54 - 2) = a1;
  *(&v54 - 1) = a2;
  sub_10006F03C(&qword_10029F830);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100092298);

  v22 = v61;
  if (!v61)
    goto LABEL_35;
  if (!((unint64_t)v61 >> 62))
  {
    v23 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v61, 2);
    if (v23)
      goto LABEL_9;
LABEL_19:
    swift_bridgeObjectRelease_n(v22, 2);
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0)
        v52 = v22;
      else
        v52 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v53 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(v22);
      if (v53)
      {
LABEL_21:
        v29 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 256))(v22);
        v30 = swift_bridgeObjectRelease(v22);
        if (v29)
        {
          objc_msgSend(v29, "setEverOptIn:", 1);
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v57, v4);
          v31 = v7;
          v32 = v29;
          v33 = Logger.logObject.getter(v32);
          v34 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v33, v34))
          {
            v56 = v31;
            v57 = v5;
            v58 = v4;
            v35 = swift_slowAlloc(32, -1);
            v55 = swift_slowAlloc(64, -1);
            v61 = v55;
            *(_DWORD *)v35 = 136315650;
            v36 = objc_msgSend(v32, "uri");
            if (v36)
            {
              v37 = v36;
              v38 = v34;
              v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
              v41 = v40;

            }
            else
            {
              v38 = v34;
              v41 = 0xE100000000000000;
              v39 = 45;
            }
            v59 = sub_10006C790(v39, v41, &v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 4, v35 + 12);

            swift_bridgeObjectRelease(v41);
            *(_WORD *)(v35 + 12) = 2080;
            v46 = objc_msgSend(v32, "application");
            v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            v49 = v48;

            v59 = sub_10006C790(v47, v49, &v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 14, v35 + 22);

            swift_bridgeObjectRelease(v49);
            *(_WORD *)(v35 + 22) = 2048;
            v50 = objc_msgSend(v32, "state");

            v59 = (uint64_t)v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 24, v35 + 32);

            _os_log_impl((void *)&_mh_execute_header, v33, v38, "Final optin: %s[%s] - %lu", (uint8_t *)v35, 0x20u);
            v51 = v55;
            swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v51, -1, -1);
            swift_slowDealloc(v35, -1, -1);

            (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
          }
          return (uint64_t)v29;
        }
        v42 = Logger.logObject.getter(v30);
        v43 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v44 = 0;
          v45 = "Failed to pick oldest record";
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v42, v43, v45, v44, 2u);
          swift_slowDealloc(v44, -1, -1);
          goto LABEL_38;
        }
        goto LABEL_38;
      }
    }
    else if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_21;
    }
    v21 = swift_bridgeObjectRelease(v22);
LABEL_35:
    v42 = Logger.logObject.getter(v21);
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      v45 = "no opt in records to pick";
      goto LABEL_37;
    }
LABEL_38:

    return 0;
  }
  if (v61 < 0)
    v28 = v61;
  else
    v28 = v61 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v61, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v28);
  v23 = result;
  if (!result)
    goto LABEL_19;
LABEL_9:
  if (v23 >= 1)
  {
    v25 = 0;
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v22);
      else
        v26 = *(id *)(v22 + 8 * v25 + 32);
      v27 = v26;
      ++v25;
      v61 = (uint64_t)v26;
      sub_100085AFC((void **)&v61);

    }
    while (v23 != v25);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100085AFC(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v7 = sub_10006F07C(v2, (uint64_t)qword_1002A54A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    v11 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v29 = v25;
    *(_DWORD *)v11 = 136315650;
    v12 = objc_msgSend(v8, "uri");
    v27 = v3;
    v26 = v10;
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v16 = 0xE100000000000000;
      v14 = 45;
    }
    v28 = sub_10006C790(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2080;
    v18 = objc_msgSend(v8, "application");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v28 = sub_10006C790(v19, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 14, v11 + 22);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v11 + 22) = 2048;
    v22 = objc_msgSend(v8, "state");

    v28 = (uint64_t)v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 24, v11 + 32);

    _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v26, "processing optin: %s[%s] - %lu", (uint8_t *)v11, 0x20u);
    v23 = v25;
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v5, v2);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_100085E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v9;

  v1 = v0;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10006F07C(v2, (uint64_t)qword_1002A54A8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "getAllOptInStates", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  sub_10006F03C(&qword_10029F838);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100092618);

  return v9;
}

uint64_t sub_100085F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25[64];
  unint64_t v26;

  v26 = sub_100086140((uint64_t)_swiftEmptyArrayStorage);
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
  v2 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    result = _CocoaArrayWrapper.endIndex.getter(v8);
    v3 = result;
    if (!result)
      goto LABEL_13;
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v1);
    if (!v3)
      goto LABEL_13;
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  v5 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
    else
      v6 = *(id *)(v2 + 8 * v5 + 32);
    v7 = v6;
    ++v5;
    v23 = (unint64_t)v6;
    sub_100086378((id *)&v23, (uint64_t *)&v26);

  }
  while (v3 != v5);
LABEL_13:
  swift_bridgeObjectRelease_n(v2, 2);
  v9 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v0 + 312))(5456969, 0xE300000000000000);
  if (v9 == 2)
  {
    v10 = v26;
  }
  else
  {
    v11 = v9;
    v12 = sub_10006F03C(&qword_10029F840);
    inited = swift_initStackObject(v12, v25);
    *(_OWORD *)(inited + 16) = xmmword_1002143C0;
    *(_QWORD *)(inited + 32) = 0x6574617473;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v23 = 0;
    v24 = 0xE000000000000000;
    if ((v11 & 1) != 0)
      v14 = 1702195828;
    else
      v14 = 0x65736C6166;
    if ((v11 & 1) != 0)
      v15 = 0xE400000000000000;
    else
      v15 = 0xE500000000000000;
    v16 = v15;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRelease(v15);
    v17 = v24;
    *(_QWORD *)(inited + 48) = v23;
    *(_QWORD *)(inited + 56) = v17;
    v18 = sub_100086258(inited);
    v19 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    v23 = v19;
    sub_100090F58(v18, 0x492D746E65746E69, 0xEA00000000005344, isUniquelyReferenced_nonNull_native);
    v10 = v23;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v21 = swift_bridgeObjectRetain(v10);
  v22 = sub_100086968(v21);
  swift_bridgeObjectRelease_n(v10, 2);
  return v22;
}

unint64_t sub_100086140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029FCB8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100072E70(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100086258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029FCC0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100072E70(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_100086378(id *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id result;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  unint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  unint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE v71[200];

  v67 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v64 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - v17;
  v19 = *a1;
  result = objc_msgSend(*a1, "uri");
  if (result)
  {
    v21 = result;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v66 = v22;

    v23 = sub_10006F03C(&qword_10029F840);
    inited = swift_initStackObject(v23, v71);
    *(_OWORD *)(inited + 16) = xmmword_1002149E0;
    *(_QWORD *)(inited + 32) = 0x6574617473;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v69 = 0;
    v70 = 0xE000000000000000;
    v68 = objc_msgSend(v19, "state");
    type metadata accessor for KTOptIn();
    _print_unlocked<A, B>(_:_:)(&v68, &v69, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v26 = v70;
    *(_QWORD *)(inited + 48) = v69;
    *(_QWORD *)(inited + 56) = v26;
    *(_QWORD *)(inited + 64) = 0x6D617473656D6974;
    *(_QWORD *)(inited + 72) = 0xE900000000000070;
    v69 = 0;
    v70 = 0xE000000000000000;
    v27 = objc_msgSend(v19, "smtTimestamp");
    if (v27)
    {
      v28 = v27;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v30 = v16;
      v31 = 0;
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v30 = v16;
      v31 = 1;
    }
    v64 = v29;
    v29(v30, v31, 1, v3);
    sub_1000972B0((uint64_t)v16, (uint64_t)v18, (uint64_t *)&unk_10029EE40);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    if (v32(v18, 1, v3))
    {
      sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029EE40);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v18, v3);
      v33 = sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029EE40);
      Date.timeIntervalSince1970.getter(v33);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    Double.write<A>(to:)(&v69, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v34 = v70;
    *(_QWORD *)(inited + 80) = v69;
    *(_QWORD *)(inited + 88) = v34;
    *(_QWORD *)(inited + 96) = 0xD000000000000011;
    *(_QWORD *)(inited + 104) = 0x80000001001DF570;
    v69 = 0;
    v70 = 0xE000000000000000;
    v35 = objc_msgSend(v19, "smtTimestamp");
    if (v35)
    {
      v36 = v35;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v37 = 0;
    }
    else
    {
      v37 = 1;
    }
    v64(v10, v37, 1, v3);
    sub_1000972B0((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_10029EE40);
    if (v32(v13, 1, v3))
    {
      sub_100081AB0((uint64_t)v13, (uint64_t *)&unk_10029EE40);
      v38 = (void *)0xE100000000000000;
      v39 = 45;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v3);
      v40 = sub_100081AB0((uint64_t)v13, (uint64_t *)&unk_10029EE40);
      v39 = Date.description.getter(v40);
      v38 = v41;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    v42._countAndFlagsBits = v39;
    v42._object = v38;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v38);
    v43 = v70;
    *(_QWORD *)(inited + 112) = v69;
    *(_QWORD *)(inited + 120) = v43;
    *(_QWORD *)(inited + 128) = 0x6F6973726556736FLL;
    *(_QWORD *)(inited + 136) = 0xE90000000000006ELL;
    v69 = 0;
    v70 = 0xE000000000000000;
    v44 = objc_msgSend(v19, "osVersion");
    if (v44)
    {
      v45 = v44;
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

    }
    else
    {
      v48 = (void *)0xE100000000000000;
      v46 = 45;
    }
    v49._countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v48);
    v50 = v70;
    *(_QWORD *)(inited + 144) = v69;
    *(_QWORD *)(inited + 152) = v50;
    *(_QWORD *)(inited + 160) = 28275;
    *(_QWORD *)(inited + 168) = 0xE200000000000000;
    v69 = 0;
    v70 = 0xE000000000000000;
    v51 = objc_msgSend(v19, "serialNumber");
    if (v51)
    {
      v52 = v51;
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v55 = v54;

    }
    else
    {
      v55 = (void *)0xE100000000000000;
      v53 = 45;
    }
    v56._countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v55);
    v57 = v70;
    *(_QWORD *)(inited + 176) = v69;
    *(_QWORD *)(inited + 184) = v57;
    v58 = sub_100086258(inited);
    v59 = v67;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v67);
    v69 = *v59;
    *v59 = 0x8000000000000000;
    v61 = v58;
    v62 = v66;
    sub_100090F58(v61, v65, v66, isUniquelyReferenced_nonNull_native);
    v63 = *v59;
    *v59 = v69;
    swift_bridgeObjectRelease(v62);
    return (id)swift_bridgeObjectRelease(v63);
  }
  return result;
}

unint64_t sub_100086968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10006F03C(&qword_10029FCC8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v38 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v37 = (unint64_t)(63 - v4) >> 6;
  v7 = &v44;
  v8 = &v46;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (uint64_t *)&unk_10029FCD0;
  v12 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v37)
    goto LABEL_32;
  v22 = *(_QWORD *)(v38 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v37)
      goto LABEL_32;
    v22 = *(_QWORD *)(v38 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v37)
        goto LABEL_32;
      v22 = *(_QWORD *)(v38 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v37)
          goto LABEL_32;
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v37)
          {
            v22 = *(_QWORD *)(v38 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v37)
                break;
              v22 = *(_QWORD *)(v38 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100097304(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v40 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v26 = v25[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v20);
    v42 = *v25;
    v43 = v26;
    v41 = v27;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    v28 = sub_10006F03C(v11);
    swift_dynamicCast(v7, &v41, v28, v12, 7);
    v29 = v42;
    v30 = v43;
    sub_1000972F4(v7, v8);
    sub_1000972F4(v8, v47);
    sub_1000972F4(v47, &v45);
    result = sub_100072E70(v29, v30);
    v31 = result;
    if ((v32 & 1) != 0)
    {
      v39 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v29;
      v18[1] = v30;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v39;
      v19 = (_QWORD *)(v3[7] + 32 * v31);
      sub_10006F0F8(v19);
      result = (unint64_t)sub_1000972F4(&v45, v19);
      v6 = v40;
      if (!v40)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v33 = (uint64_t *)(v3[6] + 16 * result);
    *v33 = v29;
    v33[1] = v30;
    result = (unint64_t)sub_1000972F4(&v45, (_OWORD *)(v3[7] + 32 * result));
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_34;
    v3[2] = v36;
    v6 = v40;
    if (!v40)
      goto LABEL_11;
LABEL_10:
    v40 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_100086CD0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = v4;
  v33 = a3;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v14 = sub_10006F07C(v10, (uint64_t)qword_1002A54A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n(a2, 2);
  v15 = swift_bridgeObjectRetain_n(a4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v32 = v16;
  v31 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v30 = v5;
    v19 = v18;
    v27 = swift_slowAlloc(64, -1);
    v36 = v27;
    *(_DWORD *)v19 = 136315394;
    if (a2)
      v20 = a1;
    else
      v20 = 45;
    v28 = v10;
    if (a2)
      v21 = a2;
    else
      v21 = 0xE100000000000000;
    swift_bridgeObjectRetain(a2);
    v34 = sub_10006C790(v20, v21, &v36);
    v29 = v6;
    v22 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v34 = sub_10006C790(v22, a4, &v36);
    v6 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    v23 = v32;
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "deleting optin record %s[%s]", (uint8_t *)v19, 0x16u);
    v24 = v27;
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v26 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 152))(v25);
  __chkstk_darwin(v26);
  *(&v27 - 6) = a1;
  *(&v27 - 5) = a2;
  *(&v27 - 4) = v33;
  *(&v27 - 3) = a4;
  *(&v27 - 2) = v6;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100092748);

}

uint64_t sub_100086FFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t sub_100087028()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  sub_10006F03C(&qword_10029F848);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100092A88);

  return v3;
}

uint64_t sub_1000870BC(uint64_t a1, uint64_t a2)
{
  return sub_100087394(a1, a2, (uint64_t *)&unk_10029F850, (uint64_t)sub_100092FC8);
}

uint64_t sub_1000870D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v28;

  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214630;
  v9 = *(_QWORD *)(v2 + 88);
  v8 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v10 = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 64) = v10;
  *(_QWORD *)(v7 + 72) = a1;
  *(_QWORD *)(v7 + 80) = a2;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001001DF3F0, v7);
  objc_msgSend(v5, "setPredicate:", v11);

  v28 = 0;
  v12 = objc_msgSend(v5, "execute:", &v28);
  v13 = v28;
  if (!v12)
  {
    v23 = v28;
    v24 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    swift_errorRelease(v24);
    return 2;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease(v16);
    return 2;
  }
  if (v16 < 0)
    v25 = v16;
  else
    v25 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v26 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v16);
  if (!v26)
    goto LABEL_15;
LABEL_4:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
  }
  else
  {
    if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v18 = *(id *)(v16 + 32);
  }
  v19 = v18;
  swift_bridgeObjectRelease(v16);
  v20 = objc_msgSend(v19, "state");
  if (!v20)
  {

    return 2;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "BOOLValue");

  return (uint64_t)v22;
}

uint64_t sub_100087380(uint64_t a1, uint64_t a2)
{
  return sub_100087394(a1, a2, &qword_10029F848, (uint64_t)sub_1000933D4);
}

uint64_t sub_100087394(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v9;

  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 152))();
  sub_10006F03C(a3);
  NSManagedObjectContext.performAndWait<A>(_:)(a4);

  return v9;
}

id sub_100087418(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id *v4;
  id *v5;
  uint64_t v10;
  void *v11;
  NSString v12;
  void *v13;
  uint64_t (*v14)(void);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  NSString v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  NSString v30;
  void *v31;
  id v32;
  char v33;
  id v34;
  id v35;
  void **aBlock;
  uint64_t v37;
  void (*v38)(uint64_t, void *);
  void *v39;
  void *v40;
  uint64_t v41;

  v5 = v4;
  v10 = (*((uint64_t (**)(void))*v4 + 37))();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = String._bridgeToObjectiveC()();
    v40 = sub_100087854;
    v41 = 0;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_100087804;
    v39 = &unk_1002418E0;
    v13 = _Block_copy(&aBlock);
    v34 = (id)objc_opt_self(KTGroupOperation);
    v35 = objc_msgSend(v34, "named:withBlockTakingSelf:", v12, v13);

    _Block_release(v13);
    swift_release(v41);
    v33 = a3;
    v14 = (uint64_t (*)(void))*((_QWORD *)*v5 + 19);
    v15 = v5[6];
    v16 = v14();
    v17 = sub_10006F03C(&qword_10029F870);
    v18 = swift_allocObject(v17, 40, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100214910;
    *(_QWORD *)(v18 + 32) = v11;
    aBlock = (void **)v18;
    specialized Array._endMutation()(v18);
    v19 = (uint64_t)aBlock;
    type metadata accessor for KTStoreOptInOperation();
    v20 = v11;
    v21 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)((uint64_t)v15, v16, v19, 0x746E65746E69, 0xE600000000000000, a4 & 1);
    v22 = swift_allocObject(&unk_100241918, 56, 7);
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = a2;
    *(_BYTE *)(v22 + 32) = v33 & 1;
    *(_QWORD *)(v22 + 40) = v21;
    *(_QWORD *)(v22 + 48) = v5;
    swift_bridgeObjectRetain(a2);
    v23 = v21;
    swift_retain(v5);
    v24 = String._bridgeToObjectiveC()();
    v40 = sub_1000936FC;
    v41 = v22;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_100087804;
    v39 = &unk_100241930;
    v25 = _Block_copy(&aBlock);
    v26 = objc_msgSend(v34, "named:withBlockTakingSelf:", v24, v25);

    _Block_release(v25);
    swift_release(v41);
    objc_msgSend(v26, "addSuccessDependency:", v23);
    objc_msgSend(v35, "addSuccessDependency:", v26);
    objc_msgSend(v35, "addSuccessDependency:", v23);
    v27 = objc_msgSend(v35, "operationQueue");
    objc_msgSend(v27, "addOperation:", v26);

    v28 = objc_msgSend(v35, "operationQueue");
    objc_msgSend(v28, "addOperation:", v23);

    return v35;
  }
  else
  {
    v30 = String._bridgeToObjectiveC()();
    v40 = sub_1000877FC;
    v41 = 0;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_100087804;
    v39 = &unk_1002418B8;
    v31 = _Block_copy(&aBlock);
    v32 = objc_msgSend((id)objc_opt_self(KTGroupOperation), "named:withBlockTakingSelf:", v30, v31);

    _Block_release(v31);
    swift_release(v41);
    return v32;
  }
}

void sub_1000877FC(void *a1)
{
  sub_100087C28(a1, 13);
}

void sub_100087804(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100087854(uint64_t a1)
{
  sub_100087CE0(a1, "storeOptInIntent finished writing to CK");
}

id sub_100087860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSString v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t (*v15)(void);
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  NSString v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  NSString v29;
  void *v30;
  id v31;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  void (*v35)(uint64_t, void *);
  void *v36;
  void *v37;
  _QWORD *v38;

  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 320))();
  if (v7)
  {
    v8 = v7;
    v32 = a3;
    v9 = objc_msgSend(v7, "recordID");

LABEL_5:
    v11 = String._bridgeToObjectiveC()();
    v37 = sub_100087CD4;
    v38 = 0;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_100087804;
    v36 = &unk_100241980;
    v12 = _Block_copy(&aBlock);
    v13 = (void *)objc_opt_self(KTGroupOperation);
    v14 = objc_msgSend(v13, "named:withBlockTakingSelf:", v11, v12);

    _Block_release(v12);
    swift_release(v38);
    type metadata accessor for KTDeleteOptInOperation();
    v15 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 152);
    v16 = *(id *)(v3 + 48);
    v17 = v15();
    v18 = v9;
    v19 = KTDeleteOptInOperation.__allocating_init(database:context:recordID:)((uint64_t)v16, v17, (uint64_t)v18);
    v20 = (_QWORD *)swift_allocObject(&unk_1002419B8, 56, 7);
    v20[2] = v19;
    v20[3] = a1;
    v20[4] = a2;
    v20[5] = v18;
    v20[6] = v32;
    v21 = v18;
    v22 = v19;
    swift_bridgeObjectRetain(a2);
    swift_unknownObjectRetain(v32);
    v23 = String._bridgeToObjectiveC()();
    v37 = sub_100093B04;
    v38 = v20;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_100087804;
    v36 = &unk_1002419D0;
    v24 = _Block_copy(&aBlock);
    v25 = objc_msgSend(v13, "named:withBlockTakingSelf:", v23, v24);

    _Block_release(v24);
    swift_release(v38);
    objc_msgSend(v25, "addSuccessDependency:", v22);
    objc_msgSend(v14, "addSuccessDependency:", v25);
    objc_msgSend(v14, "addSuccessDependency:", v22);
    v26 = objc_msgSend(v14, "operationQueue");
    objc_msgSend(v26, "addOperation:", v25);

    v27 = objc_msgSend(v14, "operationQueue");
    objc_msgSend(v27, "addOperation:", v22);

    return v14;
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 240))(*(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), a1, a2);
  if (v10)
  {
    v9 = (id)v10;
    v32 = a3;
    goto LABEL_5;
  }
  v29 = String._bridgeToObjectiveC()();
  v37 = sub_100087C20;
  v38 = 0;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_100087804;
  v36 = &unk_100241958;
  v30 = _Block_copy(&aBlock);
  v31 = objc_msgSend((id)objc_opt_self(KTGroupOperation), "named:withBlockTakingSelf:", v29, v30);

  _Block_release(v30);
  swift_release(v38);
  return v31;
}

void sub_100087C20(void *a1)
{
  sub_100087C28(a1, 15);
}

void sub_100087C28(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = type metadata accessor for KTError(0);
  v5 = sub_10006F284((unint64_t *)&qword_10029FCB0, type metadata accessor for KTError, (uint64_t)&unk_10021578C);
  v6 = swift_allocError(v4, v5, 0, 0);
  swift_storeEnumTagMultiPayload(v7, v4, a2);
  v8 = (id)_convertErrorToNSError(_:)(v6);
  swift_errorRelease(v6);
  objc_msgSend(a1, "setError:", v8);

}

void sub_100087CD4(uint64_t a1)
{
  sub_100087CE0(a1, "deleteOptInIntent finished delete from CK");
}

void sub_100087CE0(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10006F07C(v3, (uint64_t)qword_1002A54A8);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

id sub_100087DB4(uint64_t a1, uint64_t a2, id a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v11)(void);
  void *v12;
  uint64_t v13;
  NSString v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  char v29;
  void **aBlock;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;

  v6 = v4;
  v36 = _swiftEmptyArrayStorage;
  v11 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 152);
  v12 = (void *)v11();
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100093FDC);

  if (v5)
  {
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v29 = a4 & 1;
    v13 = swift_allocObject(&unk_100241A08, 25, 7);
    *(_QWORD *)(v13 + 16) = a3;
    *(_BYTE *)(v13 + 24) = a4 & 1;
    swift_bridgeObjectRetain(a3);
    v14 = String._bridgeToObjectiveC()();
    v34 = sub_100094024;
    v35 = v13;
    aBlock = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_100087804;
    v33 = &unk_100241A20;
    v15 = _Block_copy(&aBlock);
    v16 = (void *)objc_opt_self(KTGroupOperation);
    a3 = objc_msgSend(v16, "named:withBlockTakingSelf:", v14, v15);

    _Block_release(v15);
    swift_release(v35);
    v17 = *(id *)(v6 + 48);
    v18 = v11();
    v19 = (uint64_t)v36;
    type metadata accessor for KTStoreOptInOperation();
    swift_bridgeObjectRetain(v19);
    v20 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)((uint64_t)v17, v18, v19, 0x64726F636572, 0xE600000000000000, 1);
    v21 = swift_allocObject(&unk_100241A58, 56, 7);
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = a2;
    *(_BYTE *)(v21 + 32) = v29;
    *(_QWORD *)(v21 + 40) = v20;
    *(_QWORD *)(v21 + 48) = v6;
    swift_bridgeObjectRetain(a2);
    v22 = v20;
    swift_retain(v6);
    v23 = String._bridgeToObjectiveC()();
    v34 = sub_10009424C;
    v35 = v21;
    aBlock = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_100087804;
    v33 = &unk_100241A70;
    v24 = _Block_copy(&aBlock);
    v25 = objc_msgSend(v16, "named:withBlockTakingSelf:", v23, v24);

    _Block_release(v24);
    swift_release(v35);
    objc_msgSend(v25, "addDependency:", v22);
    objc_msgSend(a3, "addDependency:", v25);
    objc_msgSend(a3, "addDependency:", v22);
    v26 = objc_msgSend(a3, "operationQueue");
    objc_msgSend(v26, "addOperation:", v25);

    v27 = objc_msgSend(a3, "operationQueue");
    objc_msgSend(v27, "addOperation:", v22);

    swift_bridgeObjectRelease(v36);
  }
  return a3;
}

void sub_100088128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  NSObject *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  char *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  void *v80;
  id v81;
  NSObject *v82;
  id v83;
  char *v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  void *v96;
  uint8_t *v97;
  void *v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint8_t *v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  void *v111;
  NSString v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  NSString v117;
  id v118;
  NSString v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  id v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t (*v131)(char *, uint64_t);
  uint64_t v132;
  char *v133;
  id v134;
  Class isa;
  NSString v136;
  Class v137;
  void *v138;
  uint64_t v139;
  id v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  char *v146;
  id v147;
  NSObject *v148;
  os_log_type_t v149;
  int v150;
  uint64_t v151;
  id v152;
  id v153;
  id v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  os_log_t v167;
  void *v168;
  char *v169;
  void (*v170)(char *, uint64_t);
  uint64_t v171;
  uint64_t v172;
  void *v173;
  unsigned __int8 v174;
  id v175;
  id v176;
  os_log_type_t v177;
  uint64_t v178;
  NSObject *v179;
  uint8_t *v180;
  void *v181;
  id v182;
  uint64_t v183;
  int64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  int64_t v191;
  __int128 v192;
  uint8_t *v193;
  os_log_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  Swift::Int v203;
  void **v204;
  _QWORD *v205;
  _BYTE *v206;
  unint64_t v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  int64_t v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  double v220;
  _BYTE v221[16];
  char v222[8];
  char v223[8];
  id v224;
  id v225;

  v199 = a6;
  v217 = a3;
  v218 = a4;
  v216 = a2;
  v212 = type metadata accessor for Logger(0);
  v200 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v197 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(char **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v210 = (char *)&v183 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v198 = (char *)&v183 - v14;
  v15 = __chkstk_darwin(v13);
  v196 = (char *)&v183 - v16;
  v17 = __chkstk_darwin(v15);
  v195 = (char *)&v183 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v183 - v19;
  v21 = sub_10006F03C(&qword_10029FCA0);
  v22 = __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v183 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v26 = (void **)((char *)&v183 - v25);
  v27 = *(_QWORD *)(a1 + 64);
  v185 = a1 + 64;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v206 = v221;
  v188 = a5 & 1;
  v187 = (char *)&v220 + 4;
  v191 = (unint64_t)(v28 + 63) >> 6;
  v184 = v191 - 1;
  v201 = a1;
  swift_bridgeObjectRetain(a1);
  v31 = 0;
  v203 = a5 & 1;
  v32 = &qword_10029FCA8;
  *((_QWORD *)&v33 + 1) = 4;
  v208 = xmmword_100214630;
  v207 = 0x80000001001DF3F0;
  *(_QWORD *)&v33 = 136315138;
  v189 = v33;
  v186 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v33 = 136315906;
  v192 = v33;
  v34 = v9;
  v209 = v9;
  v35 = v10;
  v211 = v10;
  v219 = v20;
  v205 = v24;
  v204 = v26;
  while (1)
  {
    if (v30)
    {
      v213 = (v30 - 1) & v30;
      v214 = v31;
      v37 = __clz(__rbit64(v30)) | (v31 << 6);
LABEL_8:
      v38 = *(_QWORD *)(v201 + 56);
      v39 = (_QWORD *)(*(_QWORD *)(v201 + 48) + 16 * v37);
      v40 = v39[1];
      *v24 = *v39;
      v24[1] = v40;
      v41 = v38 + *((_QWORD *)v35 + 9) * v37;
      v42 = sub_10006F03C(&qword_10029FCA8);
      (*((void (**)(char *, uint64_t, uint64_t))v35 + 2))((char *)v24 + *(int *)(v42 + 48), v41, v34);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v24, 0, 1, v42);
      swift_bridgeObjectRetain(v40);
      goto LABEL_21;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_90;
    if (v43 >= v191)
      goto LABEL_19;
    v44 = *(_QWORD *)(v185 + 8 * v43);
    if (v44)
      goto LABEL_12;
    v31 += 2;
    if (v43 + 1 >= v191)
      goto LABEL_78;
    v44 = *(_QWORD *)(v185 + 8 * v31);
    if (v44)
      goto LABEL_15;
    if (v43 + 2 >= v191)
    {
LABEL_19:
      v214 = v31;
    }
    else
    {
      v44 = *(_QWORD *)(v185 + 8 * (v43 + 2));
      if (v44)
      {
        v43 += 2;
        goto LABEL_12;
      }
      v31 = v43 + 3;
      if (v43 + 3 < v191)
      {
        v44 = *(_QWORD *)(v185 + 8 * v31);
        if (v44)
        {
LABEL_15:
          v43 = v31;
LABEL_12:
          v213 = (v44 - 1) & v44;
          v214 = v43;
          v37 = __clz(__rbit64(v44)) + (v43 << 6);
          goto LABEL_8;
        }
        while (1)
        {
          v43 = v31 + 1;
          if (__OFADD__(v31, 1))
            __break(1u);
          if (v43 >= v191)
            break;
          v44 = *(_QWORD *)(v185 + 8 * v43);
          ++v31;
          if (v44)
            goto LABEL_12;
        }
        v43 = v184;
LABEL_78:
        v214 = v43;
        goto LABEL_20;
      }
      v214 = v43 + 2;
    }
LABEL_20:
    v45 = sub_10006F03C(&qword_10029FCA8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v24, 1, 1, v45);
    v213 = 0;
LABEL_21:
    sub_1000972B0((uint64_t)v24, (uint64_t)v26, &qword_10029FCA0);
    v46 = sub_10006F03C(&qword_10029FCA8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v26, 1, v46) == 1)
      break;
    v32 = v26[1];
    v47 = (char *)v26 + *(int *)(v46 + 48);
    v48 = *v26;
    (*((void (**)(char *, char *, uint64_t))v35 + 4))(v219, v47, v34);
    v225 = 0;
    v49 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
    sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
    v50 = sub_10006F03C((uint64_t *)&unk_10029F390);
    v51 = swift_allocObject(v50, 112, 7);
    *(_OWORD *)(v51 + 16) = v208;
    *(_QWORD *)(v51 + 56) = &type metadata for String;
    v52 = sub_10008189C();
    *(_QWORD *)(v51 + 32) = v48;
    *(_QWORD *)(v51 + 40) = v32;
    *(_QWORD *)(v51 + 96) = &type metadata for String;
    *(_QWORD *)(v51 + 104) = v52;
    v53 = v216;
    v54 = v217;
    *(_QWORD *)(v51 + 64) = v52;
    *(_QWORD *)(v51 + 72) = v53;
    *(_QWORD *)(v51 + 80) = v54;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v54);
    v55 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, v207, v51);
    objc_msgSend(v49, "setPredicate:", v55);

    v224 = 0;
    v215 = v49;
    v56 = objc_msgSend(v49, "execute:", &v224);
    v57 = v224;
    if (!v56)
    {
      v89 = v224;
      v90 = _convertNSErrorToError(_:)(v57);

      swift_willThrow();
      swift_errorRelease(v90);
      v190 = 0;
      v24 = (_QWORD *)v212;
      v10 = v219;
      goto LABEL_38;
    }
    v58 = v56;
    v59 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
    v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v58, v59);
    v61 = v57;

    v24 = (_QWORD *)v212;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0)
        v171 = v60;
      else
        v171 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v60);
      v62 = (void *)_CocoaArrayWrapper.endIndex.getter(v171);
      swift_bridgeObjectRelease(v60);
      v10 = v219;
      if (v62)
      {
LABEL_25:
        if ((v60 & 0xC000000000000001) != 0)
        {
          v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v60);
        }
        else
        {
          if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            swift_once(&qword_1002A54A0, sub_100084070);
LABEL_84:
            sub_10006F07C((uint64_t)v24, (uint64_t)qword_1002A54A8);
            v177 = static os_log_type_t.error.getter();
            v178 = swift_bridgeObjectRetain(v32);
            v179 = Logger.logObject.getter(v178);
            if (os_log_type_enabled(v179, v177))
            {
              v180 = (uint8_t *)swift_slowAlloc(12, -1);
              v181 = (void *)swift_slowAlloc(32, -1);
              v224 = v181;
              *(_DWORD *)v180 = v189;
              swift_bridgeObjectRetain(v32);
              v220 = COERCE_DOUBLE(sub_10006C790((uint64_t)v202, (unint64_t)v32, (uint64_t *)&v224));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v180 + 4, v180 + 12);
              swift_bridgeObjectRelease_n(v32, 3);
              _os_log_impl((void *)&_mh_execute_header, v179, v177, "failed to create recordID %s", v180, 0xCu);
              swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v181, -1, -1);
              swift_slowDealloc(v180, -1, -1);

              (*((void (**)(char *, uint64_t))v211 + 1))(v10, v34);
            }
            else
            {
              swift_bridgeObjectRelease_n(v32, 2);

              (*((void (**)(char *, uint64_t))v35 + 1))(v10, v34);
            }
            goto LABEL_88;
          }
          v63 = *(id *)(v60 + 32);
        }
        v62 = v63;
      }
    }
    else
    {
      v62 = *(void **)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
      v10 = v219;
      if (v62)
        goto LABEL_25;
    }
    v64 = v35;
    swift_bridgeObjectRelease(v60);
    swift_beginAccess(&v225, v221, 1, 0);
    v65 = v225;
    v225 = v62;

    v66 = v200;
    if (v62)
    {
      swift_bridgeObjectRelease(v32);
      if (qword_1002A54A0 != -1)
        swift_once(&qword_1002A54A0, sub_100084070);
      v67 = sub_10006F07C((uint64_t)v24, (uint64_t)qword_1002A54A8);
      v68 = v197;
      (*(void (**)(char *, uint64_t, _QWORD *))(v66 + 16))(v197, v67, v24);
      v69 = v64;
      v70 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v64 + 2);
      v71 = v195;
      v72 = v10;
      v70(v195, v10, v34);
      v73 = v24;
      v74 = v196;
      v75 = ((uint64_t (*)(char *, char *, uint64_t))v70)(v196, v72, v34);
      v76 = v66;
      v77 = Logger.logObject.getter(v75);
      v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, (os_log_type_t)v78))
      {
        LODWORD(v202) = v78;
        v79 = swift_slowAlloc(42, -1);
        v80 = (void *)swift_slowAlloc(96, -1);
        v224 = v80;
        *(_DWORD *)v79 = v192;
        v81 = v225;
        if (v225)
        {
          v82 = v77;
          v83 = objc_msgSend(v225, "recordID");
          v84 = v195;
          if (v83)
          {
            v85 = v83;
            v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
            v88 = v87;

          }
          else
          {
            v88 = 0xE300000000000000;
            v86 = 7104878;
          }
        }
        else
        {
          v82 = v77;
          v88 = 0xE300000000000000;
          v86 = 7104878;
          v84 = v195;
        }
        v220 = COERCE_DOUBLE(sub_10006C790(v86, v88, (uint64_t *)&v224));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v206, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease(v88);
        *(_WORD *)(v79 + 12) = 2080;
        if (v81)
        {
          v122 = objc_msgSend(v81, "uri");
          v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          v125 = v124;

        }
        else
        {
          v123 = 0;
          v125 = 0xE000000000000000;
        }
        v34 = v209;
        v220 = COERCE_DOUBLE(sub_10006C790(v123, v125, (uint64_t *)&v224));
        v126 = v206;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v206, v79 + 14, v79 + 22);
        swift_bridgeObjectRelease(v125);
        *(_WORD *)(v79 + 22) = 2080;
        v127 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v128 = dispatch thunk of CustomStringConvertible.description.getter(v34, v127);
        v130 = v129;
        v220 = COERCE_DOUBLE(sub_10006C790(v128, v129, (uint64_t *)&v224));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v126, v79 + 24, v79 + 32);
        swift_bridgeObjectRelease(v130);
        v131 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v211 + 1);
        v132 = v131(v84, v34);
        *(_WORD *)(v79 + 32) = 2048;
        v133 = v196;
        v220 = Date.timeIntervalSince1970.getter(v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v126, v79 + 34, v79 + 42);
        v131(v133, v34);
        v10 = v211;
        _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v202, "optInStore: updating existing record %s %s %s[%f", (uint8_t *)v79, 0x2Au);
        swift_arrayDestroy(v80, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);

        v120 = v212;
        (*(void (**)(char *, uint64_t))(v200 + 8))(v197, v212);
        v113 = v219;
      }
      else
      {
        v121 = (void (*)(char *, uint64_t))*((_QWORD *)v69 + 1);
        v121(v71, v34);
        v121(v74, v34);

        (*(void (**)(char *, _QWORD *))(v76 + 8))(v68, v73);
        v113 = v219;
        v120 = (uint64_t)v73;
        v10 = v69;
      }
      goto LABEL_56;
    }
    v35 = v64;
LABEL_38:
    v91 = (*(uint64_t (**)(void *, NSObject *, uint64_t, uint64_t))(*(_QWORD *)v218 + 240))(v48, v32, v216, v217);
    v202 = v48;
    if (!v91)
    {
      if (qword_1002A54A0 == -1)
        goto LABEL_84;
      goto LABEL_91;
    }
    v92 = (void *)v91;
    if (qword_1002A54A0 != -1)
      swift_once(&qword_1002A54A0, sub_100084070);
    sub_10006F07C((uint64_t)v24, (uint64_t)qword_1002A54A8);
    v93 = v92;
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = v93;
      v97 = (uint8_t *)swift_slowAlloc(12, -1);
      v98 = (void *)swift_slowAlloc(32, -1);
      v224 = v98;
      *(_DWORD *)v97 = v189;
      v193 = v97 + 4;
      v99 = objc_msgSend(v96, "recordName");
      v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      v194 = v32;
      v102 = v101;

      v103 = v219;
      v220 = COERCE_DOUBLE(sub_10006C790(v100, v102, (uint64_t *)&v224));
      v104 = v211;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v206, v193, v97 + 12);

      v105 = v102;
      v32 = v194;
      swift_bridgeObjectRelease(v105);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "creating new record %s", v97, 0xCu);
      swift_arrayDestroy(v98, 1, v186);
      swift_slowDealloc(v98, -1, -1);
      v106 = v97;
      v93 = v96;
      swift_slowDealloc(v106, -1, -1);

    }
    else
    {
      v104 = v35;
      v103 = v10;

    }
    v107 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v218 + 152))();
    v108 = objc_msgSend(objc_allocWithZone((Class)CloudOptIn), "initWithContext:", v107);

    swift_beginAccess(&v225, v223, 1, 0);
    v109 = v225;
    v225 = v108;

    if (v108)
    {
      v110 = v108;
      v111 = v93;
      v112 = objc_msgSend(v93, "recordName");
      v113 = v103;
      v10 = v104;
      if (!v112)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v115 = v114;
        v112 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v115);
      }
      objc_msgSend(v110, "setRecordID:", v112);

      v116 = v110;
      v117 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
      objc_msgSend(v116, "setUri:", v117);

      v118 = v116;
      v119 = String._bridgeToObjectiveC()();
      objc_msgSend(v118, "setApplication:", v119);

      v34 = v209;
      v120 = v212;
    }
    else
    {

      swift_bridgeObjectRelease(v32);
      v113 = v103;
      v34 = v209;
      v10 = v104;
      v120 = v212;
    }
LABEL_56:
    swift_beginAccess(&v225, v222, 0, 0);
    if (!v225)
    {

      (*((void (**)(char *, uint64_t))v10 + 1))(v113, v34);
LABEL_88:
      swift_release(v201);

      return;
    }
    v134 = v225;
    isa = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v134, "setSmtTimestamp:", isa);

    v136 = String._bridgeToObjectiveC()();
    objc_msgSend(v134, "setCkstate:", v136);

    sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
    v137 = NSNumber.init(integerLiteral:)(v203).super.super.isa;
    objc_msgSend(v134, "setState:", v137);

    objc_msgSend(v134, "setCkrecord:", 0);
    v138 = (void *)(*(uint64_t (**)(id))(*(_QWORD *)v218 + 432))(v134);
    if (v138)
    {
      v139 = v120;
      v140 = v138;
      v141 = v199;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v143 = *(_QWORD *)((*v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v142 = *(_QWORD *)((*v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v143 >= v142 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v142 > 1, v143 + 1, 1);
      v144 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v143, v140);
      specialized Array._endMutation()(v144);
      if (qword_1002A54A0 != -1)
        swift_once(&qword_1002A54A0, sub_100084070);
      sub_10006F07C(v139, (uint64_t)qword_1002A54A8);
      v145 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v10 + 2);
      v146 = v198;
      v145(v198, v113, v34);
      v145(v210, v113, v34);
      v147 = v140;
      v148 = Logger.logObject.getter(v147);
      v149 = static os_log_type_t.default.getter();
      v150 = v149;
      if (os_log_type_enabled(v148, v149))
      {
        v151 = swift_slowAlloc(38, -1);
        v202 = (void *)swift_slowAlloc(64, -1);
        v224 = v202;
        *(_DWORD *)v151 = v192;
        v194 = v148;
        v152 = objc_msgSend(v147, "recordID");
        LODWORD(v193) = v150;
        v153 = v152;
        v154 = objc_msgSend(v152, "recordName");

        v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
        v157 = v156;

        v220 = COERCE_DOUBLE(sub_10006C790(v155, v157, (uint64_t *)&v224));
        v158 = v206;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v206, v151 + 4, v151 + 12);

        v159 = v157;
        v160 = v209;
        swift_bridgeObjectRelease(v159);
        *(_WORD *)(v151 + 12) = 1024;
        LODWORD(v220) = v188;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v187, v151 + 14, v151 + 18);
        *(_WORD *)(v151 + 18) = 2080;
        v161 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v162 = dispatch thunk of CustomStringConvertible.description.getter(v160, v161);
        v164 = v163;
        v220 = COERCE_DOUBLE(sub_10006C790(v162, v163, (uint64_t *)&v224));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v158, v151 + 20, v151 + 28);
        swift_bridgeObjectRelease(v164);
        v10 = (char *)*((_QWORD *)v211 + 1);
        v165 = ((uint64_t (*)(char *, uint64_t))v10)(v146, v160);
        *(_WORD *)(v151 + 28) = 2048;
        v166 = v210;
        v220 = Date.timeIntervalSince1970.getter(v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v158, v151 + 30, v151 + 38);
        ((void (*)(char *, uint64_t))v10)(v166, v160);
        v167 = v194;
        _os_log_impl((void *)&_mh_execute_header, v194, (os_log_type_t)v193, "trying to update record %s %{BOOL}d smtTimeStamp: %s:[%f]", (uint8_t *)v151, 0x26u);
        v168 = v202;
        swift_arrayDestroy(v202, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v168, -1, -1);
        swift_slowDealloc(v151, -1, -1);

        v34 = v160;
        ((void (*)(char *, uint64_t))v10)(v219, v160);
        v35 = v211;
      }
      else
      {

        v169 = v113;
        v35 = v10;
        v170 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
        v170(v210, v34);
        v170(v146, v34);

        v170(v169, v34);
      }
    }
    else
    {
      v36 = v113;
      v35 = v10;
      (*((void (**)(char *, uint64_t))v10 + 1))(v36, v34);

    }
    v24 = v205;
    v26 = v204;
    v32 = &qword_10029FCA8;
    v30 = v213;
    v31 = v214;
  }
  v172 = swift_release(v201);
  v173 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 152))(v172);
  v225 = 0;
  v174 = objc_msgSend(v173, "save:", &v225);

  v175 = v225;
  if ((v174 & 1) != 0)
  {
    v176 = v225;
  }
  else
  {
    v182 = v225;
    _convertNSErrorToError(_:)(v175);

    swift_willThrow();
  }
}

void sub_10008968C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v10 = type metadata accessor for Logger(0);
  sub_10006F07C(v10, (uint64_t)qword_1002A54A8);
  swift_bridgeObjectRetain_n(a1, 2);
  v11 = swift_bridgeObjectRetain_n(a3, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(28, -1);
    v24 = swift_slowAlloc(64, -1);
    v27 = v24;
    *(_DWORD *)v14 = 136315650;
    v23 = v13;
    v15 = a4;
    v16 = type metadata accessor for Date(0);
    v17 = swift_bridgeObjectRetain(a1);
    v18 = Dictionary.Keys.description.getter(v17, &type metadata for String, v16, &protocol witness table for String);
    v20 = v19;
    swift_bridgeObjectRelease(a1);
    v25 = sub_10006C790(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v25 = sub_10006C790(a2, a3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v14 + 22) = 1024;
    LODWORD(v25) = v15 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4, v14 + 24, v14 + 28);
    _os_log_impl((void *)&_mh_execute_header, v12, v23, "updating record %s[%s] to %{BOOL}d", (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v21 = swift_bridgeObjectRelease_n(a1, 2);
  }
  v22 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v21);
  __chkstk_darwin(v22);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000947B4);

}

void sub_100089980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  _QWORD *v52;
  id v53;
  id v54;
  char *v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  char *v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  os_log_type_t v83;
  id v84;
  NSObject *v85;
  uint8_t *v86;
  void *v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  unint64_t v93;
  uint8_t *v94;
  void (*v95)(char *, uint64_t);
  void *v96;
  id v97;
  id v98;
  id v99;
  NSString v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  NSString v105;
  id v106;
  NSString v107;
  id v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  id *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t (*v119)(char *, _QWORD *);
  uint64_t v120;
  char *v121;
  id v122;
  NSString v123;
  Class isa;
  char *v125;
  Class v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unsigned __int8 v130;
  id v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  os_log_type_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t *v142;
  void *v143;
  int64_t v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  uint8_t *v148;
  __int128 v149;
  uint64_t v150;
  int64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  id *v155;
  _QWORD *v156;
  uint64_t v157;
  char *v158;
  Swift::Int v159;
  unint64_t v160;
  __int128 v161;
  uint64_t *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  int64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char *v174;
  uint64_t v175;
  id v176;
  char v177[24];
  id v178;

  v173 = a5;
  v154 = a4;
  v168 = a2;
  v169 = a3;
  v165 = type metadata accessor for Logger(0);
  v6 = *(_QWORD **)(v165 - 8);
  __chkstk_darwin(v165);
  v164 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v163 = (char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v158 = (char *)&v144 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v144 - v14;
  v16 = sub_10006F03C(&qword_10029FCA0);
  v17 = __chkstk_darwin(v16);
  v19 = (int64_t *)((char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v21 = (int64_t *)((char *)&v144 - v20);
  v178 = 0;
  v22 = *(_QWORD *)(a1 + 64);
  v147 = a1 + 64;
  v23 = 1 << *(_BYTE *)(a1 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v172 = v24 & v22;
  v157 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(&v178, v177, 1, 0);
  v25 = 0;
  v155 = &v176;
  v151 = (unint64_t)(v23 + 63) >> 6;
  v144 = v151 - 1;
  v159 = v173 & 1;
  *((_QWORD *)&v26 + 1) = 4;
  v161 = xmmword_100214630;
  v160 = 0x80000001001DF3F0;
  *(_QWORD *)&v26 = 136315138;
  v146 = v26;
  v145 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v26 = 136315906;
  v149 = v26;
  v152 = (_QWORD *)v8;
  v153 = v9;
  v174 = v15;
  v156 = v19;
  v162 = v21;
  v166 = v6;
  v27 = v172;
  if (!v172)
    goto LABEL_6;
LABEL_4:
  v171 = v25;
  v172 = (v27 - 1) & v27;
  v28 = __clz(__rbit64(v27)) | (v25 << 6);
LABEL_5:
  v29 = *(_QWORD *)(v157 + 56);
  v30 = (_QWORD *)(*(_QWORD *)(v157 + 48) + 16 * v28);
  v31 = v30[1];
  *v19 = *v30;
  v19[1] = v31;
  v32 = v29 + v9[9] * v28;
  v33 = sub_10006F03C(&qword_10029FCA8);
  ((void (*)(char *, uint64_t, uint64_t))v9[2])((char *)v19 + *(int *)(v33 + 48), v32, v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v19, 0, 1, v33);
  swift_bridgeObjectRetain(v31);
  while (1)
  {
    sub_1000972B0((uint64_t)v19, (uint64_t)v21, &qword_10029FCA0);
    v37 = sub_10006F03C(&qword_10029FCA8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v21, 1, v37) == 1)
      break;
    v39 = *v21;
    v38 = (_QWORD *)v21[1];
    ((void (*)(char *, char *, uint64_t))v9[4])(v174, (char *)v21 + *(int *)(v37 + 48), v8);
    v21 = (uint64_t *)objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
    sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
    v40 = sub_10006F03C((uint64_t *)&unk_10029F390);
    v41 = swift_allocObject(v40, 112, 7);
    *(_OWORD *)(v41 + 16) = v161;
    *(_QWORD *)(v41 + 56) = &type metadata for String;
    v42 = sub_10008189C();
    v167 = v39;
    *(_QWORD *)(v41 + 32) = v39;
    *(_QWORD *)(v41 + 40) = v38;
    *(_QWORD *)(v41 + 96) = &type metadata for String;
    *(_QWORD *)(v41 + 104) = v42;
    v43 = v168;
    v44 = v169;
    *(_QWORD *)(v41 + 64) = v42;
    *(_QWORD *)(v41 + 72) = v43;
    *(_QWORD *)(v41 + 80) = v44;
    v173 = v38;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v44);
    v45 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, v160, v41);
    objc_msgSend(v21, "setPredicate:", v45);

    v176 = 0;
    v46 = objc_msgSend(v21, "execute:", &v176);
    v47 = v176;
    if (v46)
    {
      v6 = v46;
      v48 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
      v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v48);
      v50 = v47;

      if ((unint64_t)v49 >> 62)
      {
        if (v49 < 0)
          v127 = v49;
        else
          v127 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v49);
        v51 = (void *)_CocoaArrayWrapper.endIndex.getter(v127);
        swift_bridgeObjectRelease(v49);
      }
      else
      {
        v51 = *(void **)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v52 = v166;
      if (v51)
      {
        if ((v49 & 0xC000000000000001) != 0)
        {
          v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
        }
        else
        {
          if (!*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
          v53 = *(id *)(v49 + 32);
        }
        v51 = v53;
      }
      swift_bridgeObjectRelease(v49);
      v54 = v178;
      v178 = v51;

      v55 = v163;
    }
    else
    {
      v56 = v176;
      v57 = _convertNSErrorToError(_:)(v47);

      swift_willThrow();
      swift_errorRelease(v57);
      v150 = 0;
      v52 = v166;
      v55 = v163;
    }
    v58 = v164;
    v170 = v21;
    if (v178)
    {
      v6 = v9;
      v59 = v8;
      swift_bridgeObjectRelease(v173);
      if (qword_1002A54A0 != -1)
        swift_once(&qword_1002A54A0, sub_100084070);
      v60 = v165;
      v61 = sub_10006F07C(v165, (uint64_t)qword_1002A54A8);
      ((void (*)(char *, uint64_t, uint64_t))v52[2])(v58, v61, v60);
      v62 = v52;
      v63 = (void (*)(char *, char *, uint64_t))v6[2];
      v64 = v158;
      v65 = v174;
      v63(v158, v174, v59);
      v66 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v55, v65, v59);
      v67 = v55;
      v68 = Logger.logObject.getter(v66);
      v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v68, (os_log_type_t)v69))
      {
        LODWORD(v173) = v69;
        v70 = swift_slowAlloc(42, -1);
        v71 = (void *)swift_slowAlloc(96, -1);
        v176 = v71;
        *(_DWORD *)v70 = v149;
        v72 = v178;
        if (v178)
        {
          v73 = v71;
          v74 = objc_msgSend(v178, "recordID");
          v75 = v158;
          if (v74)
          {
            v76 = v74;
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
            v79 = v78;

          }
          else
          {
            v79 = 0xE300000000000000;
            v77 = 7104878;
          }
        }
        else
        {
          v73 = v71;
          v79 = 0xE300000000000000;
          v77 = 7104878;
          v75 = v158;
        }
        v175 = sub_10006C790(v77, v79, (uint64_t *)&v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v155, v70 + 4, v70 + 12);
        swift_bridgeObjectRelease(v79);
        *(_WORD *)(v70 + 12) = 2080;
        if (v72)
        {
          v109 = objc_msgSend(v72, "uri");
          v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          v112 = v111;

        }
        else
        {
          v110 = 0;
          v112 = 0xE000000000000000;
        }
        v6 = v152;
        v175 = sub_10006C790(v110, v112, (uint64_t *)&v176);
        v113 = v155;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v155, v70 + 14, v70 + 22);
        swift_bridgeObjectRelease(v112);
        *(_WORD *)(v70 + 22) = 2080;
        v114 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v115 = dispatch thunk of CustomStringConvertible.description.getter(v6, v114);
        v117 = v116;
        v175 = sub_10006C790(v115, v116, (uint64_t *)&v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v113, v70 + 24, v70 + 32);
        swift_bridgeObjectRelease(v117);
        v118 = v153;
        v119 = (uint64_t (*)(char *, _QWORD *))v153[1];
        v120 = v119(v75, v6);
        *(_WORD *)(v70 + 32) = 2048;
        v121 = v163;
        v175 = Date.timeIntervalSince1970.getter(v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v113, v70 + 34, v70 + 42);
        v119(v121, v6);
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v173, "setOptIn: updating existing record %s %s %s[%f", (uint8_t *)v70, 0x2Au);
        swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        v9 = v118;
        swift_slowDealloc(v70, -1, -1);

        ((void (*)(char *, uint64_t))v166[1])(v164, v165);
        v19 = v156;
        v21 = v162;
        v8 = (uint64_t)v6;
      }
      else
      {
        v95 = (void (*)(char *, uint64_t))v6[1];
        v95(v64, v59);
        v95(v67, v59);

        ((void (*)(char *, uint64_t))v62[1])(v58, v60);
        v19 = v156;
        v21 = v162;
        v8 = v59;
        v9 = v6;
      }
      v108 = v178;
      if (!v178)
        goto LABEL_75;
    }
    else
    {
      v6 = v173;
      v80 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v154 + 240))(v167, v173, v168, v169);
      if (!v80)
      {
        v136 = v165;
        if (qword_1002A54A0 == -1)
        {
LABEL_81:
          sub_10006F07C(v136, (uint64_t)qword_1002A54A8);
          v137 = static os_log_type_t.error.getter();
          v138 = swift_bridgeObjectRetain(v6);
          v139 = Logger.logObject.getter(v138);
          v140 = v137;
          if (os_log_type_enabled(v139, v137))
          {
            v141 = (uint8_t *)swift_slowAlloc(12, -1);
            v142 = v21;
            v143 = (void *)swift_slowAlloc(32, -1);
            v176 = v143;
            *(_DWORD *)v141 = v146;
            swift_bridgeObjectRetain(v6);
            v175 = sub_10006C790(v167, (unint64_t)v6, (uint64_t *)&v176);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176, v141 + 4, v141 + 12);
            swift_bridgeObjectRelease_n(v6, 3);
            _os_log_impl((void *)&_mh_execute_header, v139, v140, "failed to create recordID %s", v141, 0xCu);
            swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v143, -1, -1);
            swift_slowDealloc(v141, -1, -1);

            ((void (*)(char *, uint64_t))v153[1])(v174, v8);
          }
          else
          {
            swift_bridgeObjectRelease_n(v6, 2);

LABEL_76:
            ((void (*)(char *, uint64_t))v9[1])(v174, v8);
          }
          swift_release(v157);
          goto LABEL_79;
        }
LABEL_86:
        swift_once(&qword_1002A54A0, sub_100084070);
        v136 = v165;
        goto LABEL_81;
      }
      v81 = (void *)v80;
      v82 = v165;
      if (qword_1002A54A0 != -1)
      {
        swift_once(&qword_1002A54A0, sub_100084070);
        v82 = v165;
      }
      sub_10006F07C(v82, (uint64_t)qword_1002A54A8);
      v83 = static os_log_type_t.info.getter();
      v84 = v81;
      v85 = Logger.logObject.getter(v84);
      if (os_log_type_enabled(v85, v83))
      {
        v86 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = (void *)swift_slowAlloc(32, -1);
        v176 = v87;
        *(_DWORD *)v86 = v146;
        v148 = v86 + 4;
        v88 = objc_msgSend(v84, "recordName");
        v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v91 = v90;

        v175 = sub_10006C790(v89, v91, (uint64_t *)&v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v155, v148, v86 + 12);

        v92 = v84;
        v93 = v91;
        v19 = v156;
        swift_bridgeObjectRelease(v93);
        _os_log_impl((void *)&_mh_execute_header, v85, v83, "creating new record %s", v86, 0xCu);
        swift_arrayDestroy(v87, 1, v145);
        swift_slowDealloc(v87, -1, -1);
        v94 = v86;
        v6 = v173;
        swift_slowDealloc(v94, -1, -1);

      }
      else
      {

        v92 = v84;
      }
      v21 = v162;
      v96 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v154 + 152))();
      v97 = objc_msgSend(objc_allocWithZone((Class)CloudOptIn), "initWithContext:", v96);

      v98 = v178;
      v178 = v97;

      if (v97)
      {
        v99 = v97;
        v100 = objc_msgSend(v92, "recordName");
        if (!v100)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v102 = v101;
          v100 = String._bridgeToObjectiveC()();
          v103 = v102;
          v21 = v162;
          swift_bridgeObjectRelease(v103);
        }
        objc_msgSend(v99, "setRecordID:", v100, v144);

        v104 = v99;
        v105 = String._bridgeToObjectiveC()();
        objc_msgSend(v104, "setApplication:", v105);

        v106 = v104;
        v107 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v6);
        objc_msgSend(v106, "setUri:", v107);

      }
      else
      {
        swift_bridgeObjectRelease(v6);
      }

      v8 = (uint64_t)v152;
      v9 = v153;
      v108 = v178;
      if (!v178)
      {
LABEL_75:

        goto LABEL_76;
      }
    }
    v122 = v108;
    v123 = String._bridgeToObjectiveC()();
    objc_msgSend(v122, "setCkstate:", v123);

    sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
    isa = NSNumber.init(integerLiteral:)(v159).super.super.isa;
    objc_msgSend(v122, "setState:", isa);

    v125 = v174;
    v126 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v122, "setSmtTimestamp:", v126);

    ((void (*)(char *, uint64_t))v9[1])(v125, v8);
    v25 = v171;
    v27 = v172;
    if (v172)
      goto LABEL_4;
LABEL_6:
    v34 = v25 + 1;
    if (__OFADD__(v25, 1))
      goto LABEL_85;
    if (v34 >= v151)
    {
LABEL_16:
      v171 = v25;
      goto LABEL_17;
    }
    v35 = *(_QWORD *)(v147 + 8 * v34);
    if (v35)
      goto LABEL_9;
    v25 += 2;
    if (v34 + 1 < v151)
    {
      v35 = *(_QWORD *)(v147 + 8 * v25);
      if (v35)
        goto LABEL_12;
      if (v34 + 2 >= v151)
        goto LABEL_16;
      v35 = *(_QWORD *)(v147 + 8 * (v34 + 2));
      if (v35)
      {
        v34 += 2;
        goto LABEL_9;
      }
      v25 = v34 + 3;
      if (v34 + 3 >= v151)
      {
        v171 = v34 + 2;
        goto LABEL_17;
      }
      v35 = *(_QWORD *)(v147 + 8 * v25);
      if (v35)
      {
LABEL_12:
        v34 = v25;
LABEL_9:
        v171 = v34;
        v172 = (v35 - 1) & v35;
        v28 = __clz(__rbit64(v35)) + (v34 << 6);
        goto LABEL_5;
      }
      while (1)
      {
        v34 = v25 + 1;
        if (__OFADD__(v25, 1))
          __break(1u);
        if (v34 >= v151)
          break;
        v35 = *(_QWORD *)(v147 + 8 * v34);
        ++v25;
        if (v35)
          goto LABEL_9;
      }
      v34 = v144;
    }
    v171 = v34;
LABEL_17:
    v36 = sub_10006F03C(&qword_10029FCA8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v19, 1, 1, v36);
    v172 = 0;
  }
  v128 = swift_release(v157);
  v129 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 152))(v128);
  v176 = 0;
  v130 = objc_msgSend(v129, "save:", &v176);

  v131 = v176;
  if ((v130 & 1) != 0)
  {
    v132 = v178;
    v133 = v176;

    return;
  }
  v134 = v176;
  v135 = _convertNSErrorToError(_:)(v131);

  v150 = v135;
  swift_willThrow();
LABEL_79:

}

void sub_10008AA58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = v6;
  v43 = a6;
  v42 = a4;
  v44 = a2;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v16 = type metadata accessor for Logger(0);
  sub_10006F07C(v16, (uint64_t)qword_1002A54A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  swift_bridgeObjectRetain_n(v44, 2);
  v17 = swift_bridgeObjectRetain_n(a5, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  v40 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(38, -1);
    v37 = a3;
    v21 = v20;
    v36 = swift_slowAlloc(96, -1);
    v47 = v36;
    *(_DWORD *)v21 = 136315906;
    v35 = v18;
    v41 = a1;
    v22 = v44;
    swift_bridgeObjectRetain(v44);
    v45 = sub_10006C790(v41, v22, &v47);
    v39 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(v22, 3);
    *(_WORD *)(v21 + 12) = 2080;
    v38 = a5;
    v23 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v12, v23);
    v26 = v25;
    v45 = sub_10006C790(v24, v25, &v47);
    LOBYTE(v22) = v43;
    a5 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain(a5);
    v27 = v42;
    v45 = sub_10006C790(v42, a5, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v21 + 32) = 1024;
    v28 = v22 & 1;
    a1 = v41;
    LODWORD(v45) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v21 + 34, v21 + 38);
    v29 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v40, "adding optin record %s:%s[%s] to %{BOOL}d", (uint8_t *)v21, 0x26u);
    v30 = v36;
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v21;
    a3 = v37;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v44, 2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    swift_bridgeObjectRelease_n(a5, 2);
    v27 = v42;
  }
  v32 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 152))();
  __chkstk_darwin(v32);
  v33 = v44;
  *(&v34 - 8) = a1;
  *(&v34 - 7) = v33;
  *(&v34 - 6) = v27;
  *(&v34 - 5) = a5;
  *(&v34 - 4) = a3;
  *(&v34 - 3) = v8;
  *((_BYTE *)&v34 - 16) = v43 & 1;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000947D4);

}

void sub_10008AE20(uint64_t a1, unint64_t a2, NSObject *a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  char **v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t (*v84)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  os_log_t v97;
  char *v98;
  id v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Class isa;
  NSString v106;
  void *v107;
  unsigned int v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  void *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  NSString v121;
  id v122;
  uint64_t v123;
  id v124;
  Class v125;
  uint64_t v126;
  uint64_t v127;
  Class v128;
  id v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  id v140;
  void *v141;
  id v142;
  id v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  NSObject *v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  os_log_type_t v178;
  uint64_t v179;
  NSObject *v180;
  uint8_t *v181;
  void *v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t);
  uint64_t v185;
  uint64_t v186;
  __objc2_class_ro **p_info;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t (*v192)(void);
  void *v193;
  id v194;
  NSString v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  NSString v200;
  NSString v201;
  Class v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  Class v206;
  id v207;
  Class v208;
  NSString v209;
  void *v210;
  unsigned int v211;
  id v212;
  id v213;
  id v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  __int128 v228;
  uint64_t v229;
  id v230;
  uint64_t v231;
  unint64_t v232;
  id v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  os_log_t v240;
  void (*v241)(char *, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  id v246;
  double v247;
  char v248[8];
  id v249;

  v231 = a7;
  v242 = a6;
  v239 = a5;
  v11 = type metadata accessor for Date(0);
  v244 = *(_QWORD *)(v11 - 8);
  v245 = v11;
  v12 = __chkstk_darwin(v11);
  v216 = (char *)&v216 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v219 = (char *)&v216 - v15;
  v16 = __chkstk_darwin(v14);
  v235 = (char *)&v216 - v17;
  v18 = __chkstk_darwin(v16);
  v222 = (char *)&v216 - v19;
  v20 = __chkstk_darwin(v18);
  v227 = (char *)&v216 - v21;
  __chkstk_darwin(v20);
  v226 = (char *)&v216 - v22;
  v23 = type metadata accessor for Logger(0);
  v237 = *(_QWORD *)(v23 - 8);
  v238 = v23;
  v24 = __chkstk_darwin(v23);
  v224 = (char *)&v216 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v225 = (char *)&v216 - v26;
  v27 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v28 = __chkstk_darwin(v27);
  v220 = (uint64_t)&v216 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v221 = (char *)&v216 - v31;
  v32 = __chkstk_darwin(v30);
  v223 = (char *)&v216 - v33;
  v34 = __chkstk_darwin(v32);
  v217 = (char *)&v216 - v35;
  v36 = __chkstk_darwin(v34);
  v218 = (uint64_t)&v216 - v37;
  __chkstk_darwin(v36);
  v243 = (uint64_t)&v216 - v38;
  v230 = (id)objc_opt_self(CloudOptIn);
  v39 = objc_msgSend(v230, "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v229 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v40 = swift_allocObject(v229, 112, 7);
  v228 = xmmword_100214630;
  *(_OWORD *)(v40 + 16) = xmmword_100214630;
  *(_QWORD *)(v40 + 56) = &type metadata for String;
  v41 = sub_10008189C();
  v234 = a1;
  *(_QWORD *)(v40 + 32) = a1;
  *(_QWORD *)(v40 + 40) = a2;
  *(_QWORD *)(v40 + 96) = &type metadata for String;
  *(_QWORD *)(v40 + 104) = v41;
  *(_QWORD *)(v40 + 64) = v41;
  *(_QWORD *)(v40 + 72) = a3;
  v240 = a3;
  *(_QWORD *)(v40 + 80) = a4;
  v232 = a2;
  swift_bridgeObjectRetain(a2);
  v241 = a4;
  swift_bridgeObjectRetain(a4);
  v42 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001001DF3F0, v40);
  objc_msgSend(v39, "setPredicate:", v42);

  v249 = 0;
  v233 = v39;
  v43 = objc_msgSend(v39, "execute:", &v249);
  v44 = v249;
  if (v43)
  {
    v45 = v43;
    v46 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
    v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);
    v48 = v44;

    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0)
        v112 = v47;
      else
        v112 = v47 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v47);
      v113 = _CocoaArrayWrapper.endIndex.getter(v112);
      swift_bridgeObjectRelease(v47);
      if (v113)
      {
LABEL_4:
        if ((v47 & 0xC000000000000001) != 0)
        {
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
          v50 = v244;
          v49 = v245;
          v52 = v237;
          v51 = v238;
          v53 = v227;
          v54 = v226;
        }
        else
        {
          v50 = v244;
          v49 = v245;
          v52 = v237;
          v51 = v238;
          v53 = v227;
          v54 = v226;
          if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_75;
          }
          v55 = *(id *)(v47 + 32);
        }
        swift_bridgeObjectRelease(v47);
        v56 = qword_1002A54A0;
        a3 = v55;
        if (v56 == -1)
        {
LABEL_8:
          v57 = sub_10006F07C(v51, (uint64_t)qword_1002A54A8);
          v58 = v225;
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v225, v57, v51);
          v59 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
          v60 = v239;
          v59(v54, v239, v49);
          v241 = v59;
          v59(v53, v60, v49);
          v61 = a3;
          v62 = Logger.logObject.getter(v61);
          LODWORD(v243) = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, (os_log_type_t)v243))
          {
            v240 = v62;
            v63 = swift_slowAlloc(52, -1);
            v235 = (char *)swift_slowAlloc(128, -1);
            v249 = v235;
            *(_DWORD *)v63 = 136316162;
            v64 = -[NSObject recordID](v61, "recordID");
            if (v64)
            {
              v65 = v64;
              v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
              v68 = v67;

            }
            else
            {
              v68 = 0xE300000000000000;
              v66 = 7104878;
            }
            v73 = v50;
            v247 = COERCE_DOUBLE(sub_10006C790(v66, v68, (uint64_t *)&v249));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v63 + 4, v63 + 12);

            swift_bridgeObjectRelease(v68);
            *(_WORD *)(v63 + 12) = 2080;
            v74 = -[NSObject uri](v61, "uri");
            v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
            v77 = v76;

            v247 = COERCE_DOUBLE(sub_10006C790(v75, v77, (uint64_t *)&v249));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v63 + 14, v63 + 22);

            swift_bridgeObjectRelease(v77);
            *(_WORD *)(v63 + 22) = 2080;
            v78 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v79 = v226;
            v80 = v245;
            v81 = dispatch thunk of CustomStringConvertible.description.getter(v245, v78);
            v83 = v82;
            v247 = COERCE_DOUBLE(sub_10006C790(v81, v82, (uint64_t *)&v249));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v63 + 24, v63 + 32);
            swift_bridgeObjectRelease(v83);
            v84 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
            v85 = v84(v79, v80);
            *(_WORD *)(v63 + 32) = 2048;
            v86 = v227;
            v247 = Date.timeIntervalSince1970.getter(v85);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v63 + 34, v63 + 42);
            v84(v86, v80);
            *(_WORD *)(v63 + 42) = 2080;
            v72 = &selRef_writeUnknownGroupNoTag_value_;
            v87 = -[NSObject smtTimestamp](v61, "smtTimestamp");
            if (v87)
            {
              v88 = v87;
              v89 = (uint64_t)v217;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v87);

              v90 = 0;
            }
            else
            {
              v90 = 1;
              v89 = (uint64_t)v217;
            }
            v49 = v245;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v89, v90, 1, v245);
            v91 = v218;
            sub_1000972B0(v89, v218, (uint64_t *)&unk_10029EE40);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v91, 1, v49))
            {
              sub_100081AB0(v91, (uint64_t *)&unk_10029EE40);
              v92 = 0xE100000000000000;
              v93 = 45;
            }
            else
            {
              v94 = v222;
              v241(v222, v91, v49);
              v95 = sub_100081AB0(v91, (uint64_t *)&unk_10029EE40);
              v93 = Date.description.getter(v95);
              v92 = v96;
              v84(v94, v49);
            }
            v247 = COERCE_DOUBLE(sub_10006C790(v93, v92, (uint64_t *)&v249));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v63 + 44, v63 + 52);

            swift_bridgeObjectRelease(v92);
            v97 = v240;
            _os_log_impl((void *)&_mh_execute_header, v240, (os_log_type_t)v243, "addOptIn: have existing record %s %s %s[%f] %s", (uint8_t *)v63, 0x34u);
            v98 = v235;
            swift_arrayDestroy(v235, 4, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v98, -1, -1);
            swift_slowDealloc(v63, -1, -1);

            (*(void (**)(char *, uint64_t))(v237 + 8))(v225, v238);
          }
          else
          {

            v71 = *(void (**)(char *, uint64_t))(v50 + 8);
            v71(v54, v49);
            v71(v53, v49);

            (*(void (**)(char *, uint64_t))(v237 + 8))(v58, v51);
            v72 = &selRef_writeUnknownGroupNoTag_value_;
          }
          v99 = objc_msgSend(v61, v72[457]);
          if (v99)
          {
            v100 = v99;
            v101 = v222;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v99);

            v102 = v244;
            v103 = (uint64_t)v223;
            (*(void (**)(char *, char *, uint64_t))(v244 + 32))(v223, v101, v49);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v49);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v103, 1, v49) != 1)
            {

              v104 = v103;
LABEL_71:
              sub_100081AB0(v104, (uint64_t *)&unk_10029EE40);
              return;
            }
          }
          else
          {
            v103 = (uint64_t)v223;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v244 + 56))(v223, 1, 1, v49);
          }
          sub_100081AB0(v103, (uint64_t *)&unk_10029EE40);
          isa = Date._bridgeToObjectiveC()().super.isa;
          -[NSObject setSmtTimestamp:](v61, "setSmtTimestamp:", isa);

          v106 = String._bridgeToObjectiveC()();
          -[NSObject setCkstate:](v61, "setCkstate:", v106);

          v107 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v242 + 152))();
          v249 = 0;
          v108 = objc_msgSend(v107, "save:", &v249);

          v109 = v249;
          if (v108)
          {
            v110 = v249;
          }
          else
          {
            v111 = v249;
            _convertNSErrorToError(_:)(v109);

            swift_willThrow();
          }

          return;
        }
LABEL_75:
        swift_once(&qword_1002A54A0, sub_100084070);
        goto LABEL_8;
      }
    }
    else if (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
    swift_bridgeObjectRelease(v47);
  }
  else
  {
    v69 = v249;
    v70 = _convertNSErrorToError(_:)(v44);

    swift_willThrow();
    swift_errorRelease(v70);
    v236 = 0;
  }
  v227 = *(char **)(v244 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v227)(v243, 1, 1, v245);
  v114 = objc_msgSend(v230, "fetchRequest");
  v115 = swift_allocObject(v229, 112, 7);
  *(_OWORD *)(v115 + 16) = v228;
  *(_QWORD *)(v115 + 56) = &type metadata for String;
  *(_QWORD *)(v115 + 64) = v41;
  *(_QWORD *)(v115 + 32) = v240;
  v116 = v241;
  *(_QWORD *)(v115 + 40) = v241;
  *(_QWORD *)(v115 + 96) = &type metadata for Bool;
  *(_QWORD *)(v115 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v115 + 72) = v231 & 1;
  swift_bridgeObjectRetain(v116);
  v117 = (void *)NSPredicate.init(format:_:)(0xD00000000000001FLL, 0x80000001001DF530, v115);
  objc_msgSend(v114, "setPredicate:", v117);

  v118 = sub_10006F03C(&qword_10029F870);
  v119 = swift_allocObject(v118, 40, 7);
  *(_OWORD *)(v119 + 16) = xmmword_100214910;
  v120 = objc_allocWithZone((Class)NSSortDescriptor);
  v121 = String._bridgeToObjectiveC()();
  v122 = objc_msgSend(v120, "initWithKey:ascending:", v121, 0);

  *(_QWORD *)(v119 + 32) = v122;
  v249 = (id)v119;
  specialized Array._endMutation()(v123);
  v124 = v249;
  sub_10006D6DC(0, (unint64_t *)&unk_10029FC90, NSSortDescriptor_ptr);
  v125 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v124);
  objc_msgSend(v114, "setSortDescriptors:", v125);

  v126 = sub_10006F03C(&qword_10029F328);
  v127 = swift_allocObject(v126, 64, 7);
  *(_OWORD *)(v127 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v127 + 56) = &type metadata for String;
  strcpy((char *)(v127 + 32), "smtTimestamp");
  *(_BYTE *)(v127 + 45) = 0;
  *(_WORD *)(v127 + 46) = -5120;
  v128 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v127);
  objc_msgSend(v114, "setPropertiesToFetch:", v128);

  objc_msgSend(v114, "setFetchLimit:", 1);
  v249 = 0;
  v129 = objc_msgSend(v114, "execute:", &v249);
  v130 = v249;
  if (v129)
  {
    v131 = v129;
    v132 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
    v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v131, v132);
    v134 = v130;

    v135 = v238;
    v136 = v232;
    if ((unint64_t)v133 >> 62)
    {
      if (v133 < 0)
        v215 = v133;
      else
        v215 = v133 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v133);
      v137 = _CocoaArrayWrapper.endIndex.getter(v215);
      swift_bridgeObjectRelease(v133);
    }
    else
    {
      v137 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v138 = (uint64_t)v221;
    v139 = v235;
    if (v137)
    {
      if ((v133 & 0xC000000000000001) != 0)
      {
        v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v133);
      }
      else
      {
        if (!*(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_82;
        }
        v140 = *(id *)(v133 + 32);
      }
      v141 = v140;
      swift_bridgeObjectRelease(v133);
      v142 = objc_msgSend(v141, "smtTimestamp");
      if (v142)
      {
        v143 = v142;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v142);

        v144 = 0;
        v141 = v143;
      }
      else
      {
        v144 = 1;
      }
      v139 = v235;

      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v227)(v138, v144, 1, v245);
      sub_100097268(v138, v243);
    }
    else
    {
      swift_bridgeObjectRelease(v133);
    }
  }
  else
  {
    v145 = v249;
    v146 = _convertNSErrorToError(_:)(v130);

    swift_willThrow();
    swift_errorRelease(v146);
    v236 = 0;
    v135 = v238;
    v136 = v232;
    v139 = v235;
  }
  v147 = (*(uint64_t (**)(uint64_t, unint64_t, os_log_t, void (*)(char *, uint64_t, uint64_t)))(*(_QWORD *)v242 + 240))(v234, v136, v240, v241);
  if (!v147)
  {
    if (qword_1002A54A0 == -1)
    {
LABEL_54:
      sub_10006F07C(v135, (uint64_t)qword_1002A54A8);
      v178 = static os_log_type_t.error.getter();
      v179 = swift_bridgeObjectRetain_n(v136, 2);
      v180 = Logger.logObject.getter(v179);
      if (os_log_type_enabled(v180, v178))
      {
        v181 = (uint8_t *)swift_slowAlloc(12, -1);
        v182 = (void *)swift_slowAlloc(32, -1);
        v249 = v182;
        *(_DWORD *)v181 = 136315138;
        swift_bridgeObjectRetain(v136);
        v247 = COERCE_DOUBLE(sub_10006C790(v234, v136, (uint64_t *)&v249));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v181 + 4, v181 + 12);
        swift_bridgeObjectRelease_n(v136, 3);
        _os_log_impl((void *)&_mh_execute_header, v180, v178, "failed to create recordID %s", v181, 0xCu);
        swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v182, -1, -1);
        swift_slowDealloc(v181, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v136, 2);
      }

      v104 = v243;
      goto LABEL_71;
    }
LABEL_82:
    swift_once(&qword_1002A54A0, sub_100084070);
    goto LABEL_54;
  }
  v148 = (void *)v147;
  v230 = v114;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v149 = sub_10006F07C(v135, (uint64_t)qword_1002A54A8);
  v150 = v237;
  v151 = v224;
  v152 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v237 + 16))(v224, v149, v135);
  v153 = static os_log_type_t.info.getter(v152);
  v154 = v245;
  v155 = *(void (**)(char *, uint64_t, uint64_t))(v244 + 16);
  v156 = v239;
  v155(v139, v239, v245);
  v157 = v219;
  *(_QWORD *)&v228 = v155;
  v155(v219, v156, v154);
  v158 = v151;
  v159 = v148;
  v160 = Logger.logObject.getter(v159);
  LODWORD(v229) = v153;
  if (os_log_type_enabled(v160, (os_log_type_t)v153))
  {
    v161 = swift_slowAlloc(42, -1);
    v226 = (char *)swift_slowAlloc(96, -1);
    v249 = v226;
    *(_DWORD *)v161 = 136315906;
    v162 = objc_msgSend(v159, "recordName");
    v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
    v165 = v164;

    v247 = COERCE_DOUBLE(sub_10006C790(v163, v165, (uint64_t *)&v249));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v161 + 4, v161 + 12);

    v227 = v159;
    swift_bridgeObjectRelease(v165);
    *(_WORD *)(v161 + 12) = 2080;
    v166 = sub_10006F284(&qword_10029F878, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v167 = v235;
    v168 = dispatch thunk of CustomStringConvertible.description.getter(v245, v166);
    v170 = v169;
    v247 = COERCE_DOUBLE(sub_10006C790(v168, v169, (uint64_t *)&v249));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v161 + 14, v161 + 22);
    swift_bridgeObjectRelease(v170);
    v171 = v244;
    v172 = *(uint64_t (**)(char *, uint64_t))(v244 + 8);
    v173 = v172(v167, v245);
    *(_WORD *)(v161 + 22) = 2048;
    v247 = Date.timeIntervalSince1970.getter(v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v161 + 24, v161 + 32);
    v172(v157, v245);
    *(_WORD *)(v161 + 32) = 2080;
    v174 = v245;
    v175 = v243;
    swift_beginAccess(v243, &v247, 0, 0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v175, 1, v174))
    {
      v176 = 0xE100000000000000;
      v177 = 45;
    }
    else
    {
      v188 = v222;
      v189 = ((uint64_t (*)(char *, uint64_t, uint64_t))v228)(v222, v175, v174);
      v177 = Date.description.getter(v189);
      v176 = v190;
      v172(v188, v174);
    }
    p_info = &OBJC_METACLASS___TransparencyRoot.info;
    v246 = (id)sub_10006C790(v177, v176, (uint64_t *)&v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247, v161 + 34, v161 + 42);
    swift_bridgeObjectRelease(v176);
    _os_log_impl((void *)&_mh_execute_header, v160, (os_log_type_t)v229, "creating new record %s %s[%f] newest %s", (uint8_t *)v161, 0x2Au);
    v191 = v226;
    swift_arrayDestroy(v226, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v191, -1, -1);
    swift_slowDealloc(v161, -1, -1);

    v186 = (*(uint64_t (**)(char *, uint64_t))(v237 + 8))(v224, v238);
    v183 = v244;
    v159 = v227;
  }
  else
  {

    v183 = v244;
    v184 = *(void (**)(char *, uint64_t))(v244 + 8);
    v184(v235, v154);
    v185 = v154;
    v172 = (uint64_t (*)(char *, uint64_t))v184;
    v184(v157, v185);

    v186 = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v158, v135);
    p_info = (__objc2_class_ro **)(&OBJC_METACLASS___TransparencyRoot + 32);
  }
  v192 = *(uint64_t (**)(void))(*(_QWORD *)v242 + 152);
  v193 = (void *)((uint64_t (*)(uint64_t))v192)(v186);
  v194 = objc_msgSend(objc_allocWithZone((Class)(p_info + 471)), "initWithContext:", v193);

  v195 = objc_msgSend(v159, "recordName");
  v196 = v243;
  v197 = v159;
  if (!v195)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v199 = v198;
    v195 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v199);
  }
  objc_msgSend(v194, "setRecordID:", v195);

  v200 = String._bridgeToObjectiveC()();
  objc_msgSend(v194, "setUri:", v200);

  v201 = String._bridgeToObjectiveC()();
  objc_msgSend(v194, "setApplication:", v201);

  sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
  v202 = NSNumber.init(integerLiteral:)(v231 & 1).super.super.isa;
  objc_msgSend(v194, "setState:", v202);

  swift_beginAccess(v196, &v249, 0, 0);
  v203 = v220;
  sub_100074FE4(v196, v220);
  v204 = v245;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48))(v203, 1, v245) == 1)
  {
    sub_100081AB0(v203, (uint64_t *)&unk_10029EE40);
LABEL_68:
    v207 = v230;
    v208 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v194, "setSmtTimestamp:", v208);

    goto LABEL_69;
  }
  v205 = v216;
  (*(void (**)(char *, uint64_t, uint64_t))(v183 + 32))(v216, v203, v204);
  if ((static Date.> infix(_:_:)(v205, v239) & 1) == 0)
  {
    v172(v205, v204);
    goto LABEL_68;
  }
  v206 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v194, "setSmtTimestamp:", v206);

  v172(v205, v204);
  v207 = v230;
LABEL_69:
  v209 = String._bridgeToObjectiveC()();
  objc_msgSend(v194, "setCkstate:", v209);

  v210 = (void *)v192();
  v246 = 0;
  v211 = objc_msgSend(v210, "save:", &v246);

  v212 = v246;
  if (v211)
  {
    v213 = v246;

    v104 = v196;
    goto LABEL_71;
  }
  v214 = v246;
  _convertNSErrorToError(_:)(v212);

  swift_willThrow();
  sub_100081AB0(v196, (uint64_t *)&unk_10029EE40);
}

uint64_t sub_10008C60C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18[2];

  v2 = v1;
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v4 = type metadata accessor for Logger(0);
  sub_10006F07C(v4, (uint64_t)qword_1002A54A8);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v18[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "recordID");
    v11 = objc_msgSend(v10, "recordName");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v17 = sub_10006C790(v12, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud optin: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v15 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 152))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000947F8);

  return LOBYTE(v18[0]);
}

void sub_10008C85C(void *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  NSString v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  id v81;
  char v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  unsigned int v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  NSString v119;
  uint64_t v120;
  uint64_t v121;
  NSString v122;
  _QWORD *v123;
  uint64_t (*v124)(uint64_t, uint64_t);
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  Class isa;
  char *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  NSString v137;
  char *v138;
  uint64_t v139;
  NSString v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(id *, _QWORD);
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  id v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  id v164;
  char *v165;
  char *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  id v174[4];

  v168 = a2;
  v165 = a3;
  v169 = type metadata accessor for Logger(0);
  v167 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v166 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v6 = __chkstk_darwin(v5);
  v157 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v158 = (uint64_t)&v150 - v9;
  __chkstk_darwin(v8);
  v154 = (uint64_t)&v150 - v10;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v160 = v11;
  v161 = v12;
  v13 = __chkstk_darwin(v11);
  v155 = (char *)&v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v153 = (char *)&v150 - v15;
  v16 = sub_10006F03C((uint64_t *)&unk_10029FC70);
  __chkstk_darwin(v16);
  v163 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for CloudOptInData(0);
  v162 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v156 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v20 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1002143C0;
  v170 = a1;
  v22 = objc_msgSend(a1, "recordID");
  v23 = objc_msgSend(v22, "recordName");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_10008189C();
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v26;
  v27 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v21);
  objc_msgSend(v19, "setPredicate:", v27);

  v174[0] = 0;
  v164 = v19;
  v28 = objc_msgSend(v19, "execute:", v174);
  v29 = v174[0];
  if (!v28)
  {
    v40 = v174[0];
    v41 = _convertNSErrorToError(_:)(v29);

    swift_willThrow();
    v42 = swift_errorRelease(v41);
    v171 = 0;
    v35 = v168;
    v36 = v170;
LABEL_10:
    v43 = (void *)(*(uint64_t (**)(uint64_t))(*v35 + 152))(v42);
    v44 = objc_msgSend(objc_allocWithZone((Class)CloudOptIn), "initWithContext:", v43);

    if (!v44)
    {
      v82 = 0;
      v83 = v164;
      goto LABEL_44;
    }
    v39 = v44;
    v45 = objc_msgSend(v36, "recordID");
    v46 = objc_msgSend(v45, "recordName");

    if (!v46)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v48 = v47;
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48);
    }
    objc_msgSend(v39, "setRecordID:", v46);

    goto LABEL_14;
  }
  v30 = v28;
  v31 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
  v33 = v29;

  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0)
      v149 = v32;
    else
      v149 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v32);
    v34 = _CocoaArrayWrapper.endIndex.getter(v149);
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v168;
  v36 = v170;
  if (!v34)
  {
    v42 = swift_bridgeObjectRelease(v32);
    goto LABEL_10;
  }
  if ((v32 & 0xC000000000000001) != 0)
  {
    v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v32);
    swift_bridgeObjectRelease(v32);
LABEL_14:
    v37 = v169;
    v38 = v163;
    goto LABEL_15;
  }
  v37 = v169;
  v38 = v163;
  if (!*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    __break(1u);
  v39 = *(id *)(v32 + 32);
  swift_bridgeObjectRelease(v32);
LABEL_15:
  v49 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = v39;
  v51 = JSONDecoder.init()();
  v52 = objc_msgSend(v36, "encryptedValues");
  v53 = String._bridgeToObjectiveC()();
  v54 = objc_msgSend(v52, "objectForKeyedSubscript:", v53);
  swift_unknownObjectRelease(v52);

  v163 = (char *)v51;
  if (!v54)
  {
    v162 = 0;
LABEL_20:
    v58 = v166;
    v57 = v167;
LABEL_22:
    v65 = v171;
    goto LABEL_23;
  }
  v172 = (uint64_t)v54;
  v55 = sub_10006F03C(&qword_10029F728);
  v56 = swift_dynamicCast(v174, &v172, v55, &type metadata for Data, 6);
  v58 = v166;
  v57 = v167;
  if ((v56 & 1) == 0)
  {
    v162 = 0;
    goto LABEL_22;
  }
  v152 = v50;
  v60 = v174[0];
  v59 = v174[1];
  v61 = sub_10006F284(&qword_10029FC80, type metadata accessor for CloudOptInData, (uint64_t)&unk_100214A10);
  v62 = (uint64_t)v38;
  v63 = v159;
  v64 = v171;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v159, v60, v59, v159, v61);
  if (!v64)
  {
    v150 = (uint64_t)v60;
    v151 = (unint64_t)v59;
    v171 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v162 + 56))(v62, 0, 1, v63);
    v117 = v156;
    sub_100097224(v62, (uint64_t)v156);
    v118 = v117[3];
    swift_bridgeObjectRetain(v118);
    v119 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v118);
    v50 = v152;
    objc_msgSend(v152, "setUri:", v119);

    v120 = v117[4];
    v121 = v117[5];
    swift_bridgeObjectRetain(v121);
    v122 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v121);
    objc_msgSend(v50, "setApplication:", v122);

    v123 = v117;
    v124 = *(uint64_t (**)(uint64_t, uint64_t))(*v35 + 264);
    swift_bridgeObjectRetain(v121);
    v162 = v124(v120, v121);
    swift_bridgeObjectRelease(v121);
    if (*((_BYTE *)v117 + 56) == 1)
    {
      objc_msgSend(v50, "setState:", 0);
    }
    else
    {
      v125 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v117[6]);
      objc_msgSend(v50, "setState:", v125);

    }
    v126 = v161;
    v127 = v154;
    v37 = v169;
    v128 = v159;
    sub_100074FE4((uint64_t)v123 + *(int *)(v159 + 32), v154);
    v129 = v160;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v127, 1, v160) == 1)
    {
      sub_100081AB0(v127, (uint64_t *)&unk_10029EE40);
    }
    else
    {
      v130 = v123;
      v131 = v153;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v153, v127, v129);
      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v50, "setSmtTimestamp:", isa);

      v133 = v131;
      v123 = v130;
      (*(void (**)(char *, uint64_t))(v126 + 8))(v133, v129);
    }
    v134 = v151;
    v135 = (char *)v123 + *(int *)(v128 + 40);
    v136 = *((_QWORD *)v135 + 1);
    v36 = v170;
    if (v136)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v135 + 1));
      v137 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v136);
      objc_msgSend(v50, "setSerialNumber:", v137);

      v128 = v159;
    }
    v138 = (char *)v123 + *(int *)(v128 + 36);
    v139 = *((_QWORD *)v138 + 1);
    if (v139)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v138 + 1));
      v140 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v139);
      objc_msgSend(v50, "setOsVersion:", v140);

    }
    v141 = objc_msgSend(v50, "application");
    v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
    v144 = v143;

    v145 = (uint64_t (*)(id *, _QWORD))(*(uint64_t (**)(id *))(*v35 + 216))(v174);
    sub_100091268(&v172, v142, v144);
    swift_bridgeObjectRelease(v173);
    v146 = v145(v174, 0);
    v147 = (void *)(*(uint64_t (**)(uint64_t))(*v35 + 176))(v146);
    if (v147)
    {
      v148 = v147;
      objc_msgSend(v147, "trigger");
      sub_10006F22C(v150, v134);

      sub_100083F78((uint64_t)v156);
    }
    else
    {
      sub_100083F78((uint64_t)v156);
      sub_10006F22C(v150, v134);
    }
    goto LABEL_20;
  }
  swift_errorRelease(v64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56))(v62, 1, 1, v63);
  sub_10006F22C((uint64_t)v60, (unint64_t)v59);
  sub_100081AB0(v62, (uint64_t *)&unk_10029FC70);
  v162 = 0;
  v65 = 0;
  v37 = v169;
  v36 = v170;
  v50 = v152;
LABEL_23:
  v66 = String._bridgeToObjectiveC()();
  objc_msgSend(v50, "setCkstate:", v66);

  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v171 = v65;
  v67 = sub_10006F07C(v37, (uint64_t)qword_1002A54A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v58, v67, v37);
  v68 = v50;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = swift_slowAlloc(42, -1);
    v159 = swift_slowAlloc(8, -1);
    v156 = (char *)swift_slowAlloc(96, -1);
    v174[0] = v156;
    *(_DWORD *)v71 = 136315906;
    v72 = objc_msgSend(v68, "uri");
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v75 = v74;

    v172 = sub_10006C790(v73, v75, (uint64_t *)v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v71 + 4, v71 + 12);

    swift_bridgeObjectRelease(v75);
    *(_WORD *)(v71 + 12) = 2080;
    v76 = objc_msgSend(v68, "application");
    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v79 = v78;

    v172 = sub_10006C790(v77, v79, (uint64_t *)v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v71 + 14, v71 + 22);

    swift_bridgeObjectRelease(v79);
    *(_WORD *)(v71 + 22) = 2112;
    v80 = objc_msgSend(v68, "state");
    v81 = v80;
    if (v80)
      v172 = (uint64_t)v80;
    else
      v172 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v71 + 24, v71 + 32);
    v84 = v160;
    *(_QWORD *)v159 = v81;

    *(_WORD *)(v71 + 32) = 2080;
    v85 = objc_msgSend(v68, "smtTimestamp");
    v35 = v168;
    v86 = v161;
    if (v85)
    {
      v87 = v85;
      v88 = (uint64_t)v157;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v85);

      v89 = 0;
    }
    else
    {
      v89 = 1;
      v88 = (uint64_t)v157;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v88, v89, 1, v84);
    v90 = v158;
    sub_1000972B0(v88, v158, (uint64_t *)&unk_10029EE40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v90, 1, v84))
    {
      sub_100081AB0(v90, (uint64_t *)&unk_10029EE40);
      v91 = 0xE100000000000000;
      v92 = 45;
    }
    else
    {
      v93 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v155, v90, v84);
      v94 = sub_100081AB0(v90, (uint64_t *)&unk_10029EE40);
      v95 = Date.description.getter(v94);
      v96 = v86;
      v92 = v95;
      v91 = v97;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v84);
    }
    v172 = sub_10006C790(v92, v91, (uint64_t *)v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v71 + 34, v71 + 42);

    swift_bridgeObjectRelease(v91);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "merged cloud optin: %s[%s] %@ %s", (uint8_t *)v71, 0x2Au);
    v98 = sub_10006F03C(&qword_10029F6B0);
    v99 = v159;
    swift_arrayDestroy(v159, 1, v98);
    swift_slowDealloc(v99, -1, -1);
    v100 = v156;
    swift_arrayDestroy(v156, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v71, -1, -1);

    (*(void (**)(char *, uint64_t))(v167 + 8))(v166, v169);
    v36 = v170;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v37);
  }
  v83 = (id)v162;
  v101 = (*(uint64_t (**)(id, void *))(*v35 + 448))(v68, v36);
  v102 = (void *)(*(uint64_t (**)(uint64_t))(*v35 + 152))(v101);
  v174[0] = 0;
  v103 = objc_msgSend(v102, "save:", v174);

  v104 = v174[0];
  if (v103)
  {
    v105 = v174[0];
  }
  else
  {
    v106 = v174[0];
    v107 = _convertNSErrorToError(_:)(v104);

    swift_willThrow();
    swift_errorRelease(v107);
    v171 = 0;
  }
  v108 = objc_msgSend(v68, "uri");
  v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
  v111 = v110;

  v112 = objc_msgSend(v68, "application");
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v115 = v114;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(*v35 + 376))(v109, v111, v113, v115, v83);
  swift_bridgeObjectRelease(v111);
  swift_bridgeObjectRelease(v115);
  v116 = (void *)v35[8];
  if (v116)
    objc_msgSend(v116, "triggerSelfValidate:", 0);
  swift_release(v163);

  v82 = 1;
LABEL_44:

  *v165 = v82;
}

void sub_10008D860(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  NSString v32;
  id v33;
  id v34;
  NSString v35;
  NSObject *log;
  uint64_t v37;
  os_log_type_t type;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v6 = v5;
  v12 = (void *)(*(uint64_t (**)(void))(*v5 + 248))();
  if (!v12)
    return;
  v13 = v5[11];
  v14 = v5[12];
  if (v13 == a1 && v14 == a2)
    goto LABEL_8;
  v39 = v12;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v13, v14, 0) & 1) != 0)
  {
    v12 = v39;
LABEL_8:

    return;
  }
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v16 = type metadata accessor for Logger(0);
  sub_10006F07C(v16, (uint64_t)qword_1002A54A8);
  v17 = v39;
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  v18 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    type = v20;
    v21 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(96, -1);
    v42 = v37;
    *(_DWORD *)v21 = 136315650;
    log = v19;
    v22 = (id)KTOptInGetString(objc_msgSend(v18, "state"));
    v40 = a5;
    v23 = v18;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    v41 = sub_10006C790(v24, v26, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 4, v21 + 12);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v41 = sub_10006C790(a3, a4, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v21 + 22) = 2080;
    v18 = v23;
    a5 = v40;
    swift_bridgeObjectRetain(a2);
    v41 = sub_10006C790(a1, a2, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, log, type, "updating peer opt-in state to %s for %s for %s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v27 = (void *)v6[8];
    if (v27)
      goto LABEL_13;
LABEL_18:

    return;
  }

  swift_bridgeObjectRelease_n(a2, 2);
  swift_bridgeObjectRelease_n(a4, 2);

  v27 = (void *)v5[8];
  if (!v27)
    goto LABEL_18;
LABEL_13:
  swift_unknownObjectRetain(v27);
  v28 = sub_1000BD358((uint64_t)objc_msgSend(v18, "state"));
  v29 = sub_10006F03C((uint64_t *)&unk_10029F880);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v30 + 32) = a1;
  *(_QWORD *)(v30 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setCachedPeerOptInState:uris:application:", v28, isa, v32);

  if (a5)
  {
    v33 = a5;
    v34 = objc_msgSend(v33, "state");
    if (v34 == objc_msgSend(v18, "state") || !sub_1000BD358((uint64_t)objc_msgSend(v18, "state")))
    {
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v35 = String._bridgeToObjectiveC()();
      objc_msgSend(v27, "removeFailuresOnOptIn:", v35);
      swift_unknownObjectRelease(v27);

    }
  }
  else
  {

    swift_unknownObjectRelease(v27);
  }
}

uint64_t sub_10008DCC8(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;

  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v4 = swift_allocObject(&unk_100241AA8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject(&unk_100241AD0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10009483C;
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = sub_10007025C;
  v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10007027C;
  v11[3] = &unk_100241AE8;
  v6 = _Block_copy(v11);
  v7 = v12;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 119, 693, 32, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10008DE14()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241B20, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_100241B48, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100094EE8;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241B60;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119, 713, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_10008DF68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241B98, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_100241BC0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100094F10;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241BD8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119, 731, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_10008E0BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  unsigned __int8 v11;

  v11 = 0;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241C10, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_100241C38, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10009512C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241C50;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 119, 749, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return v8;
  }
  return result;
}

uint64_t sub_10008E208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v14[5];
  uint64_t v15;

  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 152))();
  v8 = (_QWORD *)swift_allocObject(&unk_100241C88, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = v3;
  v9 = swift_allocObject(&unk_100241CB0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100095330;
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = sub_100074EF4;
  v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10007027C;
  v14[3] = &unk_100241CC8;
  v10 = _Block_copy(v14);
  v11 = v15;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v3);
  swift_retain(v9);
  swift_release(v11);
  objc_msgSend(v7, "performBlockAndWait:", v10);

  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 119, 761, 32, 1);
  swift_release(v8);
  result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10008E36C(void *a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v4 = (_QWORD *)swift_allocObject(&unk_100241D00, 40, 7);
  v4[2] = a1;
  v4[3] = &v14;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_100241D28, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100095A3C;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100074EF4;
  v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100241D40;
  v6 = _Block_copy(aBlock);
  v7 = v13;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 119, 781, 32, 1);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = v14;
    swift_release(v4);
    return v11;
  }
  return result;
}

Class sub_10008E4CC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  CKRecordID v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  objc_class *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t ObjectType;
  uint64_t v64;
  int *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[6];

  v2 = v1;
  v4 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CloudOptInData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "ckrecord");
  if (v10)
  {
    v11 = v10;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0xF000000000000000;
  }
  v15 = type metadata accessor for KTCloudRecords();
  isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v15 + 440))(v12, v14);
  sub_10006F218(v12, v14);
  if (!isa)
  {
    v17 = (*(uint64_t (**)(void *))(*v2 + 440))(a1);
    if (!v17)
      return 0;
    v18.super.isa = (Class)v17;
    sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v19 = v2[2];
    v20 = (void *)v2[3];
    swift_bridgeObjectRetain(v20);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    isa = CKRecord.init(recordType:recordID:)(v21, v18).super.isa;
  }
  v22 = -[objc_class recordID](isa, "recordID");
  v23 = objc_msgSend(v22, "recordName");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v71 = v25;

  v26 = objc_msgSend(a1, "uri");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v69 = v28;
  v70 = v27;

  v29 = objc_msgSend(a1, "application");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v67 = v31;
  v68 = v30;

  v32 = objc_msgSend(a1, "state");
  v33 = v32;
  if (v32)
  {
    v66 = objc_msgSend(v32, "integerValue");

  }
  else
  {
    v66 = 0;
  }
  v34 = objc_msgSend(a1, "smtTimestamp");
  if (v34)
  {
    v35 = v34;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v36 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v6, 0, 1, v36);
  }
  else
  {
    v37 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v6, 1, 1, v37);
  }
  v38 = (void *)v2[7];
  if (v38)
  {
    v65 = v7;
    v39 = v6;
    v40 = isa;
    v41 = v24;
    v42 = objc_msgSend(v38, "osVersion");
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v46 = objc_msgSend(v38, "serialNumber");
    if (v46)
    {
      v47 = v46;
      v38 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

    }
    else
    {
      v38 = 0;
      v49 = 0;
    }
    v24 = v41;
    isa = v40;
    v6 = v39;
    v7 = v65;
  }
  else
  {
    v49 = 0;
    v43 = 0;
    v45 = 0;
  }
  v50 = v71;
  *(_QWORD *)v9 = v24;
  *((_QWORD *)v9 + 1) = v50;
  v51 = v69;
  *((_QWORD *)v9 + 2) = v70;
  *((_QWORD *)v9 + 3) = v51;
  v52 = v67;
  *((_QWORD *)v9 + 4) = v68;
  *((_QWORD *)v9 + 5) = v52;
  *((_QWORD *)v9 + 6) = v66;
  v9[56] = v33 == 0;
  sub_1000972B0((uint64_t)v6, (uint64_t)&v9[v7[8]], (uint64_t *)&unk_10029EE40);
  v53 = (uint64_t *)&v9[v7[9]];
  *v53 = v43;
  v53[1] = v45;
  v54 = &v9[v7[10]];
  *(_QWORD *)v54 = v38;
  *((_QWORD *)v54 + 1) = v49;
  v55 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = JSONEncoder.init()();
  v57 = sub_10006F284(&qword_10029F890, type metadata accessor for CloudOptInData, (uint64_t)&unk_100214A38);
  v58 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v7, v57);
  v60 = v59;
  v61 = -[objc_class encryptedValues](isa, "encryptedValues");
  ObjectType = swift_getObjectType();
  v72[3] = &type metadata for Data;
  v72[4] = &protocol witness table for Data;
  v72[0] = v58;
  v72[1] = v60;
  sub_10006F1A0(v58, v60);
  CKRecordKeyValueSetting.subscript.setter(v72, 1635017060, 0xE400000000000000, ObjectType);
  swift_unknownObjectRelease(v61);
  swift_release(v56);
  sub_10006F22C(v58, v60);
  sub_100083F78((uint64_t)v9);
  return isa;
}

CKRecordID sub_10008E99C(void *a1)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = objc_msgSend(a1, "recordID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
    v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }
  else
  {
    v11 = objc_msgSend(a1, "uri");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = objc_msgSend(a1, "application");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))*v1 + 30))(v12, v14, v16, v18);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v18);
    return (CKRecordID)v19;
  }
}

uint64_t sub_10008EABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = swift_allocObject(&unk_100241D78, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1000962F0;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_100074EF4;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10007027C;
  v6[3] = &unk_100241D90;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  objc_msgSend((id)v1, "performBlockAndWait:", v3);

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 119, 848, 32, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10008EBDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return v0;
}

uint64_t sub_10008EC38()
{
  uint64_t v0;

  sub_10008EBDC();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_10008EC58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_10008EC88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 368))() & 1;
}

uint64_t sub_10008ECB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 384))();
}

uint64_t sub_10008ECDC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 400))();
}

uint64_t sub_10008ED04()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 408))() & 1;
}

uint64_t sub_10008ED30()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 416))();
}

uint64_t sub_10008ED58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 424))();
}

uint64_t sub_10008ED80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 432))();
}

uint64_t sub_10008EDA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 440))();
}

uint64_t sub_10008EDD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 456))();
}

uint64_t sub_10008EDF8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10008EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008EE34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10008EE4C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100091FF4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10008EFB8(v6);
  return specialized ContiguousArray._endMutation()();
}

_QWORD *sub_10008EEC4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10006F03C(&qword_10029F870);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100091DD8((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_10008EFB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  unint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  char *v53;
  _QWORD *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  char *v60;
  _QWORD *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  id *v67;
  Swift::Int v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  char *v74;
  _QWORD *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  id v78;
  void *v79;
  _QWORD *v80;
  void (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  void (*v89)(char *, uint64_t);
  uint64_t *v90;
  Swift::Int v91;
  Swift::Int v92;
  uint64_t *v93;
  uint64_t v94;
  Swift::Int v95;
  void (*v96)(char *, uint64_t);
  void *v97;
  void *v98;
  void (*v99)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v100;
  id v101;
  void *v102;
  char *v103;
  _QWORD *v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  id v109;
  void *v110;
  char *v111;
  _QWORD *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  Swift::Int v117;
  char *v118;
  char v119;
  void (*v120)(char *, uint64_t);
  void *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  Swift::Int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  size_t v190;
  char *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  Swift::Int v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  Swift::Int v201;
  char *v202;
  char *v203;
  Swift::Int v204;
  Swift::Int v205;
  void (*v206)(char *, uint64_t);
  char *v207;
  char *v208;
  void **v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  Swift::Int v216;
  uint64_t v217;
  char *v218;
  void (*v219)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v220;
  _QWORD *v221;
  uint64_t v222;

  v2 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v3 = __chkstk_darwin(v2);
  v215 = (char *)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v193 - v6;
  v8 = __chkstk_darwin(v5);
  v202 = (char *)&v193 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v193 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v193 - v14;
  __chkstk_darwin(v13);
  v199 = (char *)&v193 - v16;
  v17 = type metadata accessor for Date(0);
  v221 = *(_QWORD **)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v193 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v220 = (char *)&v193 - v22;
  v23 = __chkstk_darwin(v21);
  v203 = (char *)&v193 - v24;
  v25 = __chkstk_darwin(v23);
  v208 = (char *)&v193 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v193 - v28;
  v30 = __chkstk_darwin(v27);
  v218 = (char *)&v193 - v31;
  __chkstk_darwin(v30);
  v200 = (char *)&v193 - v32;
  v33 = a1[1];
  v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0)
      goto LABEL_170;
    if (v33)
      sub_10008FEC4(0, v33, 1, a1);
    return;
  }
  if (v33 >= 0)
    v35 = v33;
  else
    v35 = v33 + 1;
  if (v33 < -1)
    goto LABEL_178;
  v197 = v29;
  v205 = v33;
  v196 = v34;
  v193 = a1;
  if (v33 < 2)
  {
    v40 = (char *)_swiftEmptyArrayStorage;
    v222 = (uint64_t)_swiftEmptyArrayStorage;
    v209 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v33 != 1)
    {
      v44 = _swiftEmptyArrayStorage[2];
LABEL_134:
      v179 = v210;
      if (v44 >= 2)
      {
        v180 = *v193;
        do
        {
          v181 = v44 - 2;
          if (v44 < 2)
            goto LABEL_165;
          if (!v180)
            goto LABEL_177;
          v182 = v44 - 1;
          v211 = v40;
          v183 = *(_QWORD *)&v40[16 * v181 + 32];
          v184 = *(_QWORD *)&v40[16 * v44 + 24];
          sub_100090258((void **)(v180 + 8 * v183), (void **)(v180 + 8 * *(_QWORD *)&v40[16 * v44 + 16]), (void **)(v180 + 8 * v184), v209);
          if (v179)
            goto LABEL_131;
          if (v184 < v183)
            goto LABEL_166;
          if ((swift_isUniquelyReferenced_nonNull_native(v211) & 1) != 0)
            v185 = v211;
          else
            v185 = sub_100090C30((uint64_t)v211);
          if (v181 >= *((_QWORD *)v185 + 2))
            goto LABEL_167;
          v186 = v185 + 32;
          v187 = &v185[16 * v181 + 32];
          *(_QWORD *)v187 = v183;
          *((_QWORD *)v187 + 1) = v184;
          v188 = *((_QWORD *)v185 + 2);
          if (v44 > v188)
            goto LABEL_168;
          v189 = &v186[16 * v44];
          v190 = 16 * (v188 - v44);
          v191 = v185;
          memmove(&v186[16 * v182], v189, v190);
          v40 = v191;
          *((_QWORD *)v191 + 2) = v188 - 1;
          v44 = v188 - 1;
        }
        while (v188 > 2);
      }
      v178 = (uint64_t)v40;
LABEL_148:
      v192 = swift_bridgeObjectRelease(v178);
      *(_QWORD *)((v222 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v192);
      swift_bridgeObjectRelease(v222);
      return;
    }
  }
  else
  {
    v36 = a1;
    v37 = v35 >> 1;
    v38 = sub_10006D6DC(0, (unint64_t *)&qword_10029FFC0, KTOptInState_ptr);
    v39 = static Array._allocateBufferUninitialized(minimumCapacity:)(v37, v38);
    *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) = v37;
    a1 = v36;
    v209 = (void **)((v39 & 0xFFFFFFFFFFFFFF8) + 32);
    v222 = v39;
  }
  v41 = 0;
  v42 = *a1;
  v195 = *a1 + 16;
  v194 = v42 - 8;
  v40 = (char *)_swiftEmptyArrayStorage;
  v214 = v7;
  v198 = v12;
  v207 = v15;
  v212 = v20;
  v213 = v17;
  v43 = v205;
  v217 = v42;
  while (2)
  {
    v45 = v41;
    v46 = v41 + 1;
    v204 = v41;
    if (v41 + 1 >= v43)
      goto LABEL_53;
    v211 = v40;
    v47 = *(void **)(v42 + 8 * v46);
    v48 = *(void **)(v42 + 8 * v41);
    v49 = v47;
    v50 = v48;
    v51 = objc_msgSend(v49, "smtTimestamp");
    if (v51)
    {
      v52 = v51;
      v53 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      v54 = v221;
      v55 = (void (*)(char *, char *, uint64_t))v221[4];
      v56 = (uint64_t)v199;
      v55(v199, v53, v17);
      v219 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v54[7];
      v219(v56, 0, 1, v17);
      v57 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v54[6])(v56, 1, v17);
      if ((_DWORD)v57 != 1)
      {
        v55(v200, (char *)v56, v17);
        goto LABEL_21;
      }
    }
    else
    {
      v56 = (uint64_t)v199;
      v219 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v221[7];
      v57 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v199, 1, 1, v17);
    }
    static Date.distantPast.getter(v57);
    sub_100081AB0(v56, (uint64_t *)&unk_10029EE40);
LABEL_21:
    v58 = objc_msgSend(v50, "smtTimestamp", v193);
    if (!v58)
    {
      v63 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v15, 1, 1, v17);
      goto LABEL_25;
    }
    v59 = v58;
    v60 = v218;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v61 = v221;
    v62 = (void (*)(char *, char *, uint64_t))v221[4];
    v62(v15, v60, v17);
    v219((uint64_t)v15, 0, 1, v17);
    v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61[6])(v15, 1, v17);
    if ((_DWORD)v63 == 1)
    {
LABEL_25:
      v64 = v197;
      static Date.distantPast.getter(v63);
      sub_100081AB0((uint64_t)v15, (uint64_t *)&unk_10029EE40);
      goto LABEL_26;
    }
    v64 = v197;
    v62(v197, v15, v17);
LABEL_26:
    v65 = v200;
    LODWORD(v216) = static Date.< infix(_:_:)(v200, v64);
    v66 = (void (*)(char *, uint64_t))v221[1];
    v66(v64, v17);
    v206 = v66;
    v66(v65, v17);

    v45 = v204;
    v43 = v205;
    v46 = v204 + 2;
    if (v204 + 2 >= v205)
      goto LABEL_43;
    v67 = (id *)(v195 + 8 * v204);
    while (1)
    {
      v68 = v46;
      v69 = *(v67 - 1);
      v70 = *v67;
      v71 = v69;
      v72 = objc_msgSend(v70, "smtTimestamp");
      if (v72)
      {
        v73 = v72;
        v74 = v218;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        v75 = v221;
        v76 = (void (*)(char *, char *, uint64_t))v221[4];
        v76(v12, v74, v17);
        v219((uint64_t)v12, 0, 1, v17);
        v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75[6])(v12, 1, v17);
        if ((_DWORD)v77 != 1)
        {
          v76(v208, v12, v17);
          goto LABEL_33;
        }
      }
      else
      {
        v77 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v12, 1, 1, v17);
      }
      static Date.distantPast.getter(v77);
      sub_100081AB0((uint64_t)v12, (uint64_t *)&unk_10029EE40);
LABEL_33:
      v78 = objc_msgSend(v71, "smtTimestamp");
      if (v78)
      {
        v79 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        v80 = v221;
        v81 = (void (*)(void))v221[4];
        v82 = (uint64_t)v202;
        v81();
        v219(v82, 0, 1, v17);
        v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80[6])(v82, 1, v17);
        if ((_DWORD)v83 != 1)
        {
          v84 = v203;
          ((void (*)(char *, uint64_t, uint64_t))v81)(v203, v82, v17);
          goto LABEL_38;
        }
      }
      else
      {
        v82 = (uint64_t)v202;
        v83 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v202, 1, 1, v17);
      }
      v84 = v203;
      static Date.distantPast.getter(v83);
      sub_100081AB0(v82, (uint64_t *)&unk_10029EE40);
LABEL_38:
      v85 = v208;
      v86 = static Date.< infix(_:_:)(v208, v84);
      v87 = v84;
      v88 = v86;
      v89 = v206;
      v206(v87, v17);
      v89(v85, v17);

      if (((v216 ^ v88) & 1) != 0)
        break;
      v46 = v68 + 1;
      ++v67;
      if (v205 == v68 + 1)
      {
        v43 = v205;
        v46 = v205;
        v15 = v207;
        goto LABEL_42;
      }
    }
    v15 = v207;
    v43 = v205;
    v46 = v68;
LABEL_42:
    v45 = v204;
LABEL_43:
    v40 = v211;
    v42 = v217;
    if ((v216 & 1) != 0)
    {
      v20 = v212;
      if (v46 < v45)
        goto LABEL_171;
      if (v45 < v46)
      {
        v90 = (uint64_t *)(v194 + 8 * v46);
        v91 = v46;
        v92 = v45;
        v93 = (uint64_t *)(v217 + 8 * v45);
        do
        {
          if (v92 != --v91)
          {
            if (!v42)
              goto LABEL_176;
            v94 = *v93;
            *v93 = *v90;
            *v90 = v94;
          }
          ++v92;
          --v90;
          ++v93;
        }
        while (v92 < v91);
      }
    }
    else
    {
      v20 = v212;
    }
LABEL_53:
    if (v46 >= v43)
      goto LABEL_82;
    if (__OFSUB__(v46, v45))
      goto LABEL_169;
    if (v46 - v45 >= v196)
      goto LABEL_82;
    if (__OFADD__(v45, v196))
      goto LABEL_172;
    if (v45 + v196 >= v43)
      v95 = v43;
    else
      v95 = v45 + v196;
    if (v95 >= v45)
    {
      if (v46 == v95)
        goto LABEL_82;
      v211 = v40;
      v96 = (void (*)(char *, uint64_t))(v194 + 8 * v46);
      v201 = v95;
      while (2)
      {
        v97 = *(void **)(v42 + 8 * v46);
        v206 = v96;
        v216 = v46;
        while (2)
        {
          v98 = *(void **)v96;
          v99 = v97;
          v100 = v98;
          v219 = v99;
          v101 = objc_msgSend(v99, "smtTimestamp");
          if (v101)
          {
            v102 = v101;
            v103 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

            v104 = v221;
            v105 = (void (*)(char *, char *, uint64_t))v221[4];
            v106 = (uint64_t)v214;
            v105(v214, v103, v17);
            v107 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v104[7];
            v107(v106, 0, 1, v17);
            v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v104[6])(v106, 1, v17);
            if ((_DWORD)v108 == 1)
            {
              v20 = v212;
              goto LABEL_70;
            }
            v105(v220, (char *)v106, v17);
            v20 = v212;
          }
          else
          {
            v107 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v221[7];
            v106 = (uint64_t)v214;
            v108 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v214, 1, 1, v17);
LABEL_70:
            static Date.distantPast.getter(v108);
            sub_100081AB0(v106, (uint64_t *)&unk_10029EE40);
          }
          v109 = objc_msgSend(v100, "smtTimestamp", v193);
          if (v109)
          {
            v110 = v109;
            v111 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

            v112 = v221;
            v113 = (void (*)(char *, char *, uint64_t))v221[4];
            v114 = (uint64_t)v215;
            v115 = v111;
            v17 = v213;
            v113(v215, v115, v213);
            v107(v114, 0, 1, v17);
            v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v112[6])(v114, 1, v17);
            if ((_DWORD)v116 != 1)
            {
              v113(v20, (char *)v114, v17);
              goto LABEL_77;
            }
          }
          else
          {
            v114 = (uint64_t)v215;
            v17 = v213;
            v116 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v215, 1, 1, v213);
          }
          static Date.distantPast.getter(v116);
          sub_100081AB0(v114, (uint64_t *)&unk_10029EE40);
LABEL_77:
          v117 = v216;
          v118 = v220;
          v119 = static Date.< infix(_:_:)(v220, v20);
          v120 = (void (*)(char *, uint64_t))v221[1];
          v120(v20, v17);
          v120(v118, v17);

          if ((v119 & 1) != 0)
          {
            v42 = v217;
            if (!v217)
              goto LABEL_174;
            v121 = *(_QWORD *)v96;
            v97 = (void *)*((_QWORD *)v96 + 1);
            *(_QWORD *)v96 = v97;
            *((_QWORD *)v96 + 1) = v121;
            v96 = (void (*)(char *, uint64_t))((char *)v96 - 8);
            if (v117 == ++v45)
              goto LABEL_64;
            continue;
          }
          break;
        }
        v42 = v217;
LABEL_64:
        v46 = v117 + 1;
        v96 = (void (*)(char *, uint64_t))((char *)v206 + 8);
        v45 = v204;
        if (v46 != v201)
          continue;
        break;
      }
      v46 = v201;
      v40 = v211;
      v15 = v207;
LABEL_82:
      if (v46 < v45)
        goto LABEL_164;
      v216 = v46;
      v122 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) != 0)
        v40 = v122;
      else
        v40 = sub_100090A90(0, *((_QWORD *)v122 + 2) + 1, 1, v122);
      v124 = *((_QWORD *)v40 + 2);
      v123 = *((_QWORD *)v40 + 3);
      v44 = v124 + 1;
      v42 = v217;
      if (v124 >= v123 >> 1)
      {
        v177 = sub_100090A90((char *)(v123 > 1), v124 + 1, 1, v40);
        v42 = v217;
        v40 = v177;
      }
      *((_QWORD *)v40 + 2) = v44;
      v125 = v40 + 32;
      v126 = &v40[16 * v124 + 32];
      v127 = v216;
      *(_QWORD *)v126 = v45;
      *((_QWORD *)v126 + 1) = v127;
      if (!v124)
      {
        v44 = 1;
LABEL_14:
        v43 = v205;
        v41 = v216;
        v12 = v198;
        if (v216 >= v205)
          goto LABEL_134;
        continue;
      }
      v211 = v40;
LABEL_89:
      v128 = v44 - 1;
      if (v44 >= 4)
      {
        v133 = &v125[16 * v44];
        v134 = *((_QWORD *)v133 - 8);
        v135 = *((_QWORD *)v133 - 7);
        v139 = __OFSUB__(v135, v134);
        v136 = v135 - v134;
        if (v139)
          goto LABEL_153;
        v138 = *((_QWORD *)v133 - 6);
        v137 = *((_QWORD *)v133 - 5);
        v139 = __OFSUB__(v137, v138);
        v131 = v137 - v138;
        v132 = v139;
        if (v139)
          goto LABEL_154;
        v140 = v44 - 2;
        v141 = &v125[16 * v44 - 32];
        v143 = *(_QWORD *)v141;
        v142 = *((_QWORD *)v141 + 1);
        v139 = __OFSUB__(v142, v143);
        v144 = v142 - v143;
        if (v139)
          goto LABEL_156;
        v139 = __OFADD__(v131, v144);
        v145 = v131 + v144;
        if (v139)
          goto LABEL_159;
        if (v145 >= v136)
        {
          v163 = &v125[16 * v128];
          v165 = *(_QWORD *)v163;
          v164 = *((_QWORD *)v163 + 1);
          v139 = __OFSUB__(v164, v165);
          v166 = v164 - v165;
          if (v139)
            goto LABEL_163;
          v156 = v131 < v166;
        }
        else
        {
LABEL_102:
          if ((v132 & 1) != 0)
            goto LABEL_155;
          v140 = v44 - 2;
          v146 = &v125[16 * v44 - 32];
          v148 = *(_QWORD *)v146;
          v147 = *((_QWORD *)v146 + 1);
          v149 = __OFSUB__(v147, v148);
          v150 = v147 - v148;
          v151 = v149;
          if (v149)
            goto LABEL_158;
          v152 = &v125[16 * v128];
          v154 = *(_QWORD *)v152;
          v153 = *((_QWORD *)v152 + 1);
          v139 = __OFSUB__(v153, v154);
          v155 = v153 - v154;
          if (v139)
            goto LABEL_161;
          if (__OFADD__(v150, v155))
            goto LABEL_162;
          if (v150 + v155 < v131)
            goto LABEL_114;
          v156 = v131 < v155;
        }
        if (v156)
          v128 = v140;
      }
      else
      {
        if (v44 == 3)
        {
          v130 = *((_QWORD *)v40 + 4);
          v129 = *((_QWORD *)v40 + 5);
          v139 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          v132 = v139;
          goto LABEL_102;
        }
        v157 = *((_QWORD *)v40 + 4);
        v158 = *((_QWORD *)v40 + 5);
        v139 = __OFSUB__(v158, v157);
        v150 = v158 - v157;
        v151 = v139;
LABEL_114:
        if ((v151 & 1) != 0)
          goto LABEL_157;
        v159 = &v125[16 * v128];
        v161 = *(_QWORD *)v159;
        v160 = *((_QWORD *)v159 + 1);
        v139 = __OFSUB__(v160, v161);
        v162 = v160 - v161;
        if (v139)
          goto LABEL_160;
        if (v162 < v150)
          goto LABEL_14;
      }
      v167 = v128 - 1;
      if (v128 - 1 >= v44)
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        break;
      }
      if (!v42)
        goto LABEL_175;
      v168 = &v125[16 * v167];
      v169 = *(_QWORD *)v168;
      v170 = v125;
      v171 = v128;
      v172 = &v125[16 * v128];
      v173 = *((_QWORD *)v172 + 1);
      v174 = v210;
      sub_100090258((void **)(v42 + 8 * *(_QWORD *)v168), (void **)(v42 + 8 * *(_QWORD *)v172), (void **)(v42 + 8 * v173), v209);
      v210 = v174;
      if (v174)
      {
LABEL_131:
        v178 = (uint64_t)v211;
        goto LABEL_148;
      }
      if (v173 < v169)
        goto LABEL_150;
      v175 = (uint64_t)v211;
      if (v171 > *((_QWORD *)v211 + 2))
        goto LABEL_151;
      *(_QWORD *)v168 = v169;
      *(_QWORD *)&v170[16 * v167 + 8] = v173;
      v176 = *(_QWORD *)(v175 + 16);
      if (v171 >= v176)
        goto LABEL_152;
      v44 = v176 - 1;
      memmove(v172, v172 + 16, 16 * (v176 - 1 - v171));
      v125 = v170;
      v40 = v211;
      v20 = v212;
      *((_QWORD *)v211 + 2) = v176 - 1;
      v15 = v207;
      v42 = v217;
      if (v176 <= 2)
        goto LABEL_14;
      goto LABEL_89;
    }
    break;
  }
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_10008FEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  char *v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  char *v57;
  _QWORD *v58;

  v48 = a1;
  v7 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v8 = __chkstk_darwin(v7);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for Date(0);
  v58 = *(_QWORD **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v55 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  v57 = (char *)&v46 - v18;
  v47 = a2;
  if (a3 != a2)
  {
    v53 = *a4;
    v19 = v53 + 8 * a3 - 8;
    v50 = v11;
    v51 = v15;
LABEL_5:
    v20 = *(void **)(v53 + 8 * a3);
    v21 = v48;
    v49 = v19;
    v54 = a3;
    while (1)
    {
      v22 = *(void **)v19;
      v23 = v20;
      v24 = v22;
      v56 = v23;
      v25 = objc_msgSend(v23, "smtTimestamp");
      if (v25)
      {
        v26 = v25;
        v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        v28 = v58;
        v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0, 1, v12);
        v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }
      else
      {
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        v31 = v30(v11, 1, 1, v12);
      }
      static Date.distantPast.getter(v31);
      sub_100081AB0((uint64_t)v11, (uint64_t *)&unk_10029EE40);
LABEL_11:
      v32 = v24;
      v33 = objc_msgSend(v24, "smtTimestamp");
      if (v33)
      {
        v34 = v33;
        v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = v58;
        v37 = (void (*)(char *, char *, uint64_t))v58[4];
        v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0, 1, v12);
        v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1, v12);
        if ((_DWORD)v39 != 1)
        {
          v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }
      else
      {
        v38 = (uint64_t)v52;
        v39 = v30(v52, 1, 1, v12);
      }
      v40 = v51;
      static Date.distantPast.getter(v39);
      sub_100081AB0(v38, (uint64_t *)&unk_10029EE40);
LABEL_16:
      v41 = v57;
      v42 = static Date.< infix(_:_:)(v57, v40);
      v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      v44 = v54;
      v11 = v50;
      if ((v42 & 1) == 0)
        goto LABEL_4;
      if (!v53)
      {
        __break(1u);
        return;
      }
      v45 = *(void **)v19;
      v20 = *(void **)(v19 + 8);
      *(_QWORD *)v19 = v20;
      *(_QWORD *)(v19 + 8) = v45;
      v19 -= 8;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        v19 = v49 + 8;
        if (a3 == v47)
          return;
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_100090258(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  char *v42;
  _QWORD *v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  unint64_t v59;
  void **v60;
  uint64_t v61;
  void **v62;
  void **v63;
  char **v64;
  void **v65;
  void *v66;
  void *v67;
  char *v68;
  const char *v69;
  id v70;
  void *v71;
  char *v72;
  _QWORD *v73;
  void (*v74)(void **, char *, uint64_t);
  uint64_t (*v75)(void **, uint64_t, uint64_t, uint64_t);
  uint64_t (*v76)(void **, uint64_t, uint64_t);
  uint64_t v77;
  id v78;
  void *v79;
  char *v80;
  _QWORD *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void **v86;
  void **v87;
  char v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void **v91;
  uint64_t result;
  uint64_t v93;
  char *v94;
  char *v95;
  void **v96;
  char *v97;
  char *v98;
  void **v99;
  char *v100;
  void **v101;
  char *v102;
  void **v103;
  _QWORD *v104;
  void **v105;
  void **v106;
  void **v107;
  void **v108;

  v8 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v9 = __chkstk_darwin(v8);
  v95 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (void **)((char *)&v93 - v12);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v93 - v15;
  __chkstk_darwin(v14);
  v98 = (char *)&v93 - v17;
  v18 = type metadata accessor for Date(0);
  v104 = *(_QWORD **)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v94 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v99 = (void **)((char *)&v93 - v22);
  v23 = __chkstk_darwin(v21);
  v97 = (char *)&v93 - v24;
  v25 = __chkstk_darwin(v23);
  v100 = (char *)&v93 - v26;
  __chkstk_darwin(v25);
  v27 = a4;
  v101 = a3;
  v102 = (char *)&v93 - v28;
  v29 = (char *)a2 - (char *)a1;
  v30 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v30 = (char *)a2 - (char *)a1;
  v31 = v30 >> 3;
  v32 = (char *)a3 - (char *)a2;
  v33 = v32 / 8;
  v105 = a1;
  v108 = a1;
  v107 = v27;
  v103 = v27;
  if (v30 >> 3 >= v32 / 8)
  {
    if (v32 < -7)
      goto LABEL_66;
    v61 = (uint64_t)v95;
    if (v27 != a2 || &a2[v33] <= v27)
    {
      memmove(v27, a2, 8 * v33);
      v27 = v103;
    }
    v62 = &v27[v33];
    v106 = v62;
    v108 = a2;
    if (v32 < 8 || v105 >= a2)
    {
LABEL_65:
      sub_100090B88((void **)&v108, (const void **)&v107, &v106);
      return 1;
    }
    v63 = v101 - 1;
    v64 = &selRef_writeUnknownGroupNoTag_value_;
    v65 = a2;
    v101 = v13;
    while (1)
    {
      v98 = (char *)v62;
      v66 = *(v62 - 1);
      v96 = v62 - 1;
      v67 = *--v65;
      v68 = v66;
      v102 = v67;
      v69 = v64[457];
      v97 = v68;
      v70 = objc_msgSend(v68, v69);
      if (v70)
      {
        v71 = v70;
        v72 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

        v73 = v104;
        v74 = (void (*)(void **, char *, uint64_t))v104[4];
        v74(v101, v72, v18);
        v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v73[7];
        v75(v101, 0, 1, v18);
        v76 = (uint64_t (*)(void **, uint64_t, uint64_t))v73[6];
        v13 = v101;
        v77 = v76(v101, 1, v18);
        if ((_DWORD)v77 != 1)
        {
          v74(v99, (char *)v13, v18);
          goto LABEL_44;
        }
      }
      else
      {
        v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v104[7];
        v77 = v75(v13, 1, 1, v18);
      }
      static Date.distantPast.getter(v77);
      sub_100081AB0((uint64_t)v13, (uint64_t *)&unk_10029EE40);
LABEL_44:
      v78 = objc_msgSend(v102, v64[457]);
      if (v78)
      {
        v79 = v78;
        v80 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        v81 = v104;
        v82 = (void (*)(char *, char *, uint64_t))v104[4];
        v61 = (uint64_t)v95;
        v82(v95, v80, v18);
        v75((void **)v61, 0, 1, v18);
        v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v61, 1, v18);
        if ((_DWORD)v83 != 1)
        {
          v84 = v94;
          v85 = v61;
          v82(v94, (char *)v61, v18);
          goto LABEL_49;
        }
      }
      else
      {
        v83 = v75((void **)v61, 1, 1, v18);
      }
      v84 = v94;
      static Date.distantPast.getter(v83);
      v85 = v61;
      sub_100081AB0(v61, (uint64_t *)&unk_10029EE40);
LABEL_49:
      v86 = v63 + 1;
      v87 = v99;
      v88 = static Date.< infix(_:_:)(v99, v84);
      v89 = v84;
      v90 = (void (*)(char *, uint64_t))v104[1];
      v90(v89, v18);
      v90((char *)v87, v18);

      if ((v88 & 1) != 0)
      {
        v91 = v103;
        v13 = v101;
        v62 = (void **)v98;
        if (v86 != a2 || v63 >= a2)
          *v63 = *v65;
        v108 = v65;
      }
      else
      {
        v62 = v96;
        v106 = v96;
        v91 = v103;
        v13 = v101;
        if (v86 >= (void **)v98 && v63 < (void **)v98)
        {
          v61 = v85;
          if (v86 != (void **)v98)
            *v63 = *v96;
          v65 = a2;
          goto LABEL_61;
        }
        *v63 = *v96;
        v65 = a2;
      }
      v61 = v85;
LABEL_61:
      v64 = &selRef_writeUnknownGroupNoTag_value_;
      if (v62 > v91)
      {
        --v63;
        a2 = v65;
        if (v65 > v105)
          continue;
      }
      goto LABEL_65;
    }
  }
  if (v29 >= -7)
  {
    v34 = (uint64_t)v98;
    if (v27 != v105 || &v105[v31] <= v27)
    {
      memmove(v27, v105, 8 * v31);
      v27 = v103;
    }
    v99 = &v27[v31];
    v106 = v99;
    if (v29 >= 8 && a2 < v101)
    {
      while (1)
      {
        v35 = *a2;
        v103 = v27;
        v36 = *v27;
        v37 = v35;
        v38 = v36;
        v39 = v37;
        v40 = objc_msgSend(v37, "smtTimestamp");
        if (v40)
        {
          v41 = v40;
          v42 = v100;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

          v43 = v104;
          v44 = (void (*)(uint64_t, char *, uint64_t))v104[4];
          v44(v34, v42, v18);
          v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43[7];
          v45(v34, 0, 1, v18);
          v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43[6])(v34, 1, v18);
          if ((_DWORD)v46 != 1)
          {
            v44((uint64_t)v102, (char *)v34, v18);
            goto LABEL_15;
          }
        }
        else
        {
          v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v104[7];
          v46 = v45(v34, 1, 1, v18);
        }
        static Date.distantPast.getter(v46);
        sub_100081AB0(v34, (uint64_t *)&unk_10029EE40);
LABEL_15:
        v47 = objc_msgSend(v38, "smtTimestamp");
        if (!v47)
        {
          v54 = v45((uint64_t)v16, 1, 1, v18);
LABEL_19:
          v55 = v97;
          static Date.distantPast.getter(v54);
          sub_100081AB0((uint64_t)v16, (uint64_t *)&unk_10029EE40);
          goto LABEL_20;
        }
        v48 = v47;
        v49 = v16;
        v50 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

        v51 = v104;
        v52 = (void (*)(char *, char *, uint64_t))v104[4];
        v53 = v50;
        v16 = v49;
        v52(v49, v53, v18);
        v45((uint64_t)v49, 0, 1, v18);
        v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v51[6])(v49, 1, v18);
        if ((_DWORD)v54 == 1)
          goto LABEL_19;
        v55 = v97;
        v52(v97, v16, v18);
LABEL_20:
        v56 = v102;
        v57 = static Date.< infix(_:_:)(v102, v55);
        v58 = (void (*)(char *, uint64_t))v104[1];
        v58(v55, v18);
        v58(v56, v18);

        v34 = (uint64_t)v98;
        if ((v57 & 1) != 0)
        {
          v59 = (unint64_t)(a2 + 1);
          if (v105 < a2 || (unint64_t)v105 >= v59 || v105 != a2)
            *v105 = *a2;
          v27 = v103;
        }
        else
        {
          v60 = v103;
          if (v105 != v103)
            *v105 = *v103;
          v27 = v60 + 1;
          v107 = v27;
          v59 = (unint64_t)a2;
        }
        v108 = ++v105;
        if (v27 < v99)
        {
          a2 = (void **)v59;
          if (v59 < (unint64_t)v101)
            continue;
        }
        goto LABEL_65;
      }
    }
    goto LABEL_65;
  }
LABEL_66:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100090A90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10006F03C((uint64_t *)&unk_10029FCE8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100090B88(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100090C30(uint64_t a1)
{
  return sub_100090A90(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_100090C44(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029FCB8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100090F58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100072E70(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000910B4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100090C44(v15, a4 & 1);
  v21 = sub_100072E70(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void *sub_1000910B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10006F03C(&qword_10029FCB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100091268(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000916F0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100091414(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006F03C(&qword_10029FC88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1000916F0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100091414(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100091888();
      goto LABEL_22;
    }
    sub_100091A38(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_100091888()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006F03C(&qword_10029FC88);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100091A38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006F03C(&qword_10029FC88);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void (*sub_100091CE4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100091D64(v6, a2, a3);
  return sub_100091D38;
}

void sub_100091D38(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_100091D64(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100091DD0;
  }
  __break(1u);
  return result;
}

void sub_100091DD0(id *a1)
{

}

uint64_t sub_100091DD8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100097360((unint64_t *)&qword_10029FCE0, &qword_10029F838, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006F03C(&qword_10029F838);
          v13 = sub_100091CE4(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10006D6DC(0, (unint64_t *)&qword_10029FFC0, KTOptInState_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100091FF4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100092008(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v26;

  v3 = v1[2];
  v2 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  v6 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  v7 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1002149F0;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v9 = sub_10008189C();
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v2;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 72) = v5;
  *(_QWORD *)(v8 + 80) = v4;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v8 + 136) = &type metadata for String;
  *(_QWORD *)(v8 + 144) = v9;
  *(_QWORD *)(v8 + 112) = 0x646574656C6564;
  *(_QWORD *)(v8 + 120) = 0xE700000000000000;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  v10 = (void *)NSPredicate.init(format:_:)(0xD00000000000002FLL, 0x80000001001DF620, v8);
  objc_msgSend(v6, "setPredicate:", v10);

  v26 = 0;
  v11 = objc_msgSend(v6, "execute:", &v26);
  v12 = v26;
  if (!v11)
  {
    v21 = v26;
    v22 = _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    swift_errorRelease(v22);

    v20 = 0;
    goto LABEL_14;
  }
  v13 = v11;
  v14 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  v16 = v12;

  if (!((unint64_t)v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease(v15);

    v20 = 0;
    goto LABEL_14;
  }
  if (v15 < 0)
    v23 = v15;
  else
    v23 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v15);
  if (!v24)
    goto LABEL_13;
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(v15 + 32);
LABEL_7:
    v18 = v17;
    swift_bridgeObjectRelease(v15);
    v19 = v18;
    v20 = sub_1000840D0();

LABEL_14:
    *a1 = v20;
    return;
  }
  __break(1u);
}

uint64_t sub_100092298@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  v8 = v5;
  swift_bridgeObjectRetain(v3);
  v9 = (void *)NSPredicate.init(format:_:)(0xD000000000000010, 0x80000001001DF550, v7);
  objc_msgSend(v5, "setPredicate:", v9);

  v36 = 0;
  v10 = objc_msgSend(v5, "execute:", &v36);
  v11 = (id)v36;
  if (!v10)
  {
    v33 = (id)v36;
    v34 = _convertNSErrorToError(_:)(v11);

    swift_willThrow();
    result = swift_errorRelease(v34);
    v32 = 0;
LABEL_30:
    *a1 = v32;
    return result;
  }
  v12 = v10;
  v13 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  v15 = v11;

  v36 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v35 = v14;
    else
      v35 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v14, 2);
    v16 = _CocoaArrayWrapper.endIndex.getter(v35);
    result = swift_bridgeObjectRelease(v14);
    if (v16)
      goto LABEL_4;
    goto LABEL_28;
  }
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v14);
  if (!v16)
  {
LABEL_28:
    swift_bridgeObjectRelease(v14);
    v32 = _swiftEmptyArrayStorage;
LABEL_29:

    result = swift_bridgeObjectRelease(v14);
    goto LABEL_30;
  }
LABEL_4:
  if (v16 >= 1)
  {
    v18 = 0;
    while (1)
    {
      v19 = (v14 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14)
          : *(id *)(v14 + 8 * v18 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "ckstate");
      if (!v21)
        break;
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      if (!v25)
        break;
      if (v23 == 0x646574656C6564 && v25 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease(0xE700000000000000);
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, 0x646574656C6564, 0xE700000000000000, 0);
        swift_bridgeObjectRelease(v25);
        if ((v27 & 1) == 0)
          break;
      }

LABEL_8:
      if (v16 == ++v18)
      {
        swift_bridgeObjectRelease(v14);
        v32 = (_QWORD *)v36;
        goto LABEL_29;
      }
    }
    v28 = sub_1000840D0();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v30 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v29 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v30 >= v29 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
    specialized Array._endMutation()(v31);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_100092618(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  id v14;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  v14 = 0;
  v5 = objc_msgSend(v4, "execute:", &v14);
  v6 = v14;
  if (v5)
  {
    v7 = v5;
    v8 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);
    v10 = v6;

    swift_retain(v2);
    v11 = sub_100096F9C(v9, v2);
    swift_release(v2);

    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v12 = v14;
    v13 = _convertNSErrorToError(_:)(v6);

    swift_willThrow();
    swift_errorRelease(v13);

    v11 = _swiftEmptyArrayStorage;
  }
  *a1 = v11;
}

void sub_100092748()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned __int8 v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;

  v2 = v0[2];
  v1 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v31 = v0[6];
  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  if (v1)
  {
    v7 = swift_allocObject(v6, 112, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100214630;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    v8 = sub_10008189C();
    *(_QWORD *)(v7 + 32) = v2;
    *(_QWORD *)(v7 + 40) = v1;
    *(_QWORD *)(v7 + 96) = &type metadata for String;
    *(_QWORD *)(v7 + 104) = v8;
    *(_QWORD *)(v7 + 64) = v8;
    *(_QWORD *)(v7 + 72) = v4;
    *(_QWORD *)(v7 + 80) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v1);
    v9 = 0xD00000000000001DLL;
    v10 = 0x80000001001DF3F0;
    v11 = v7;
  }
  else
  {
    v12 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1002143C0;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_10008189C();
    *(_QWORD *)(v12 + 32) = v4;
    *(_QWORD *)(v12 + 40) = v3;
    swift_bridgeObjectRetain(v3);
    v10 = 0x80000001001DF550;
    v9 = 0xD000000000000010;
    v11 = v12;
  }
  v13 = (void *)NSPredicate.init(format:_:)(v9, v10, v11);
  objc_msgSend(v5, "setPredicate:", v13);

  v32 = 0;
  v14 = objc_msgSend(v5, "execute:", &v32);
  v15 = v32;
  if (!v14)
    goto LABEL_19;
  v16 = v14;
  v17 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
  v19 = v15;

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v25 = v18;
    else
      v25 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v18, 2);
    v20 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v18);
    if (!v20)
      goto LABEL_17;
  }
  else
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    if (!v20)
      goto LABEL_17;
  }
  if (v20 >= 1)
  {
    v21 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      else
        v22 = *(id *)(v18 + 8 * v21 + 32);
      v23 = v22;
      ++v21;
      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setCkstate:", v24);

    }
    while (v20 != v21);
LABEL_17:
    v26 = swift_bridgeObjectRelease_n(v18, 2);
    v27 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 152))(v26);
    v32 = 0;
    v28 = objc_msgSend(v27, "save:", &v32);

    v15 = v32;
    if ((v28 & 1) != 0)
    {
      v29 = v32;
LABEL_20:

      return;
    }
LABEL_19:
    v30 = v15;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    goto LABEL_20;
  }
  __break(1u);
}

void sub_100092A88(uint64_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  NSString v28;
  NSString v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  NSObject *v38;
  uint8_t *v39;
  void *v40;
  Swift::Int integerLiteral;
  int v42;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  integerLiteral = *(unsigned __int8 *)(v1 + 40);
  v42 = *(unsigned __int8 *)(v1 + 41);
  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214630;
  v9 = v2[11];
  v8 = v2[12];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v10 = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 64) = v10;
  *(_QWORD *)(v7 + 72) = v3;
  *(_QWORD *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v4);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001001DF3F0, v7);
  objc_msgSend(v5, "setPredicate:", v11);

  v46 = 0;
  v12 = objc_msgSend(v5, "execute:", &v46);
  v13 = v46;
  if (!v12)
  {
    v20 = v46;
    v21 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    swift_errorRelease(v21);
    goto LABEL_14;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_13;
  }
  if (v16 < 0)
    v22 = v16;
  else
    v22 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v16);
  if (!v23)
  {
LABEL_13:
    swift_bridgeObjectRelease(v16);
LABEL_14:
    v24 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v2 + 240))(v9, v8, v3, v4);
    if (v24)
    {
      v25 = (void *)v24;
      v26 = (void *)(*(uint64_t (**)(void))(*v2 + 152))();
      v27 = objc_msgSend(objc_allocWithZone((Class)CloudOptIn), "initWithContext:", v26);

      v19 = v27;
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "setApplication:", v28);

      v29 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "setUri:", v29);

      v30 = objc_msgSend(v25, "recordName");
      if (!v30)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v32 = v31;
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v32);
      }
      objc_msgSend(v19, "setRecordID:", v30);

      goto LABEL_18;
    }
    if (qword_1002A54A0 == -1)
    {
LABEL_22:
      v35 = type metadata accessor for Logger(0);
      sub_10006F07C(v35, (uint64_t)qword_1002A54A8);
      v36 = static os_log_type_t.error.getter();
      v37 = swift_retain(v2);
      v38 = Logger.logObject.getter(v37);
      if (os_log_type_enabled(v38, v36))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = (void *)swift_slowAlloc(32, -1);
        v46 = v40;
        *(_DWORD *)v39 = 136315138;
        swift_bridgeObjectRetain(v8);
        v44 = sub_10006C790(v9, v8, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease(v8);
        swift_release(v2);
        _os_log_impl((void *)&_mh_execute_header, v38, v36, "failed to create recordID %s", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {
        swift_release(v2);
      }

      v34 = 0;
      goto LABEL_26;
    }
LABEL_29:
    swift_once(&qword_1002A54A0, sub_100084070);
    goto LABEL_22;
  }
LABEL_4:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }
  v18 = *(id *)(v16 + 32);
LABEL_7:
  v19 = v18;
  swift_bridgeObjectRelease(v16);
LABEL_18:
  sub_10006D6DC(0, (unint64_t *)&unk_10029F740, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(integerLiteral).super.super.isa;
  objc_msgSend(v19, "setState:", isa);

  if (v42)
    objc_msgSend(v19, "setCkrecord:", 0);
  v34 = (*(uint64_t (**)(id))(*v2 + 432))(v19);

LABEL_26:
  *a1 = v34;
}

void sub_100092FC8(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v3 = (_QWORD *)v1[2];
  v2 = v1[3];
  v4 = v1[4];
  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214630;
  v8 = v3[11];
  v9 = v3[12];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v10 = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v9;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 64) = v10;
  *(_QWORD *)(v7 + 72) = v2;
  *(_QWORD *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v4);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001001DF3F0, v7);
  objc_msgSend(v5, "setPredicate:", v11);

  v38 = 0;
  v12 = objc_msgSend(v5, "execute:", &v38);
  v13 = v38;
  if (!v12)
  {
    v28 = v38;
    v29 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    swift_errorRelease(v29);
    v30 = 0;
LABEL_19:
    *a1 = v30;
    return;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v17 = v13;

  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v18 = type metadata accessor for Logger(0);
  sub_10006F07C(v18, (uint64_t)qword_1002A54A8);
  v19 = swift_bridgeObjectRetain_n(v16, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (void *)swift_slowAlloc(32, -1);
    v38 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = swift_bridgeObjectRetain(v16);
    v25 = Array.description.getter(v24, v15);
    v27 = v26;
    swift_bridgeObjectRelease(v16);
    v36 = sub_10006C790(v25, v27, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v16, 2);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "found records: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }

  if (!((unint64_t)v16 >> 62))
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_10;
LABEL_18:
    swift_bridgeObjectRelease(v16);

    v30 = 0;
    goto LABEL_19;
  }
  if (v16 < 0)
    v33 = v16;
  else
    v33 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v16);
  if (!v34)
    goto LABEL_18;
LABEL_10:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(id *)(v16 + 32);
LABEL_13:
    v32 = v31;
    swift_bridgeObjectRelease(v16);
    v30 = (*(uint64_t (**)(void *))(*v3 + 440))(v32);

    goto LABEL_19;
  }
  __break(1u);
}

void sub_1000933D4(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  NSString v21;
  void *v22;
  unsigned int v23;
  id v24;
  uint64_t (*v25)(id);
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v36;

  v2 = (_QWORD *)v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214630;
  v8 = v2[11];
  v9 = v2[12];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v10 = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v9;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 64) = v10;
  *(_QWORD *)(v7 + 72) = v3;
  *(_QWORD *)(v7 + 80) = v4;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v4);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001001DF3F0, v7);
  objc_msgSend(v5, "setPredicate:", v11);

  v36 = 0;
  v12 = objc_msgSend(v5, "execute:", &v36);
  v13 = v36;
  if (!v12)
  {
    v28 = v36;
    v29 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    v30 = v29;
    goto LABEL_11;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v17 = v13;

  if (!((unint64_t)v16 >> 62))
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease(v16);

    v27 = 0;
    goto LABEL_17;
  }
  if (v16 < 0)
    v33 = v16;
  else
    v33 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v16);
  if (!v34)
    goto LABEL_16;
LABEL_4:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(id *)(v16 + 32);
LABEL_7:
    v19 = v18;
    swift_bridgeObjectRelease(v16);
    v20 = v19;
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setCkstate:", v21);

    v22 = (void *)(*(uint64_t (**)(void))(*v2 + 152))();
    v36 = 0;
    v23 = objc_msgSend(v22, "save:", &v36);

    v24 = v36;
    if (v23)
    {
      v25 = *(uint64_t (**)(id))(*v2 + 432);
      v26 = v36;
      v27 = v25(v20);

LABEL_17:
      *a1 = v27;
      return;
    }
    v31 = v36;

    v32 = _convertNSErrorToError(_:)(v24);
    swift_willThrow();

    v30 = v32;
LABEL_11:
    swift_errorRelease(v30);
    v27 = 0;
    goto LABEL_17;
  }
  __break(1u);
}

void sub_1000936FC(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  v7 = *(void **)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v8 = type metadata accessor for Logger(0);
  sub_10006F07C(v8, (uint64_t)qword_1002A54A8);
  swift_bridgeObjectRetain_n(v3, 2);
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v29 = a1;
    v12 = swift_slowAlloc(28, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(32, -1);
    v31 = v27;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v3);
    v30 = sub_10006C790(v4, v3, &v31);
    v28 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v12 + 12) = 1024;
    LODWORD(v30) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v12 + 14, v12 + 18);
    *(_WORD *)(v12 + 18) = 2112;
    v30 = (uint64_t)v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 20, v12 + 28);
    *v13 = v9;

    v6 = v28;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "store optin intent for %s to %{BOOL}d - %@", (uint8_t *)v12, 0x1Cu);
    v15 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v16 = v12;
    a1 = v29;
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v3, 2);

  }
  v17 = objc_msgSend(v9, "error");
  if (v17)
  {
    v18 = v17;
    v19 = (void *)_convertErrorToNSError(_:)(v17);
    objc_msgSend(a1, "setError:", v19);

LABEL_18:
    return;
  }
  v20 = (*(uint64_t (**)(void))((swift_isaMask & *v9) + 0x80))();
  v21 = v20;
  if (!((unint64_t)v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_10;
LABEL_17:
    swift_bridgeObjectRelease(v21);
    v23 = type metadata accessor for KTError(0);
    v24 = sub_10006F284((unint64_t *)&qword_10029FCB0, type metadata accessor for KTError, (uint64_t)&unk_10021578C);
    v25 = swift_allocError(v23, v24, 0, 0);
    swift_storeEnumTagMultiPayload(v26, v23, 14);
    v19 = (void *)_convertErrorToNSError(_:)(v25);
    swift_errorRelease(v25);
    objc_msgSend(a1, "setError:", v19);
    goto LABEL_18;
  }
  if (v20 >= 0)
    v20 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v20))
    goto LABEL_17;
LABEL_10:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v22 = *(id *)(v21 + 32);
LABEL_13:
    v19 = v22;
    swift_bridgeObjectRelease(v21);
    (*(void (**)(void *))(*(_QWORD *)v6 + 368))(v19);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_100093AC8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100093B04(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(void **)(v1 + 40);
  v6 = *(void **)(v1 + 48);
  v7 = objc_msgSend(*(id *)(v1 + 16), "error");
  if (v7)
  {
    v8 = v7;
    if (qword_1002A54A0 != -1)
      swift_once(&qword_1002A54A0, sub_100084070);
    v9 = type metadata accessor for Logger(0);
    sub_10006F07C(v9, (uint64_t)qword_1002A54A8);
    swift_bridgeObjectRetain_n(v5, 2);
    v10 = v8;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      v35 = a1;
      v15 = swift_slowAlloc(32, -1);
      v38 = v15;
      *(_DWORD *)v13 = 136315394;
      swift_bridgeObjectRetain(v5);
      v37 = sub_10006C790(v3, v5, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      *(_WORD *)(v13 + 12) = 2112;
      v16 = v10;
      v17 = _swift_stdlib_bridgeErrorToNSError(v16);
      v37 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 14, v13 + 22);
      *v14 = v17;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "delete of intent failed %s - %@", (uint8_t *)v13, 0x16u);
      v18 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v14, 1, v18);
      swift_slowDealloc(v14, -1, -1);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      v19 = v15;
      a1 = v35;
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v5, 2);

    }
    v33 = (void *)_convertErrorToNSError(_:)(v10);
    objc_msgSend(a1, "setError:", v33);

  }
  else
  {
    if (qword_1002A54A0 != -1)
      swift_once(&qword_1002A54A0, sub_100084070);
    v20 = type metadata accessor for Logger(0);
    sub_10006F07C(v20, (uint64_t)qword_1002A54A8);
    swift_bridgeObjectRetain_n(v5, 2);
    v21 = a1;
    v22 = v4;
    v23 = v21;
    v24 = v22;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(32, -1);
      v36 = v6;
      v28 = (_QWORD *)swift_slowAlloc(16, -1);
      v34 = swift_slowAlloc(32, -1);
      v38 = v34;
      *(_DWORD *)v27 = 136315650;
      swift_bridgeObjectRetain(v5);
      v37 = sub_10006C790(v3, v5, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      *(_WORD *)(v27 + 12) = 2112;
      v37 = (uint64_t)v23;
      v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14, v27 + 22);
      *v28 = v23;

      *(_WORD *)(v27 + 22) = 2112;
      v37 = (uint64_t)v24;
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 24, v27 + 32);
      v28[1] = v24;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "delete optin intent for in local database %s - %@ - %@", (uint8_t *)v27, 0x20u);
      v31 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v28, 2, v31);
      v32 = v28;
      v6 = v36;
      swift_slowDealloc(v32, -1, -1);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v5, 2);

    }
    objc_msgSend(v6, "deleteRecordIDWithCkrecordID:", v24);
  }
}

void sub_100093FDC()
{
  uint64_t v0;

  sub_100088128(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(_QWORD **)(v0 + 56));
}

uint64_t sub_100094000()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100094024()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v3 = type metadata accessor for Logger(0);
  sub_10006F07C(v3, (uint64_t)qword_1002A54A8);
  v4 = swift_bridgeObjectRetain_n(v1, 2);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = swift_slowAlloc(18, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = type metadata accessor for Date(0);
    v9 = Dictionary.description.getter(v1, &type metadata for String, v8, &protocol witness table for String);
    v11 = v10;
    v13 = sub_10006C790(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v1, 2);
    *(_WORD *)(v6 + 12) = 1024;
    LODWORD(v13) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 4, v6 + 14, v6 + 18);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "storeOptIn finished writing to CK %s:%{BOOL}d", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);

  }
}

uint64_t sub_100094218()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10009424C(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(id);
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  v6 = *(void **)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  if (qword_1002A54A0 != -1)
    swift_once(&qword_1002A54A0, sub_100084070);
  v8 = type metadata accessor for Logger(0);
  sub_10006F07C(v8, (uint64_t)qword_1002A54A8);
  v9 = v6;
  swift_bridgeObjectRetain_n(v3, 2);
  v10 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v46 = a1;
    v48 = v7;
    v13 = swift_slowAlloc(38, -1);
    v14 = (_QWORD *)swift_slowAlloc(8, -1);
    v44 = swift_slowAlloc(32, -1);
    v50 = v44;
    *(_DWORD *)v13 = 136315906;
    swift_bridgeObjectRetain(v3);
    v49 = sub_10006C790(v4, v3, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v49) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4, v13 + 14, v13 + 18);
    *(_WORD *)(v13 + 18) = 2112;
    v49 = (uint64_t)v10;
    v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 20, v13 + 28);
    *v14 = v10;

    *(_WORD *)(v13 + 28) = 2048;
    v16 = (*(uint64_t (**)(void))((swift_isaMask & *v15) + 0x80))();
    v17 = v16;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 >= 0)
        v16 &= 0xFFFFFFFFFFFFFF8uLL;
      v18 = _CocoaArrayWrapper.endIndex.getter(v16);
    }
    else
    {
      v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v17);

    v49 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v13 + 30, v13 + 38);

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "store optin for %s to %{BOOL}d - %@ records: %ld", (uint8_t *)v13, 0x26u);
    v19 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v14, 1, v19);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    a1 = v46;
    v7 = v48;
  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  v20 = objc_msgSend(v10, "error");
  if (v20)
  {
    v21 = v20;
    v22 = (void *)_convertErrorToNSError(_:)(v20);
    objc_msgSend(a1, "setError:", v22);

    return;
  }
  v23 = (*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x80))();
  v24 = v23;
  if (!((unint64_t)v23 >> 62))
  {
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (v25)
      goto LABEL_12;
LABEL_28:
    swift_bridgeObjectRelease_n(v24, 2);
    return;
  }
  if (v23 < 0)
    v42 = v23;
  else
    v42 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v25 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v25)
    goto LABEL_28;
LABEL_12:
  if (v25 >= 1)
  {
    v26 = 0;
    v27 = v24 & 0xC000000000000001;
    v28 = *(void (**)(id))(*(_QWORD *)v7 + 368);
    v47 = v25;
    v43 = v24;
    v45 = v24 & 0xC000000000000001;
    do
    {
      if (v27)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
      else
        v29 = *(id *)(v24 + 8 * v26 + 32);
      v30 = v29;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v50 = v34;
        *(_DWORD *)v33 = 136315138;
        v35 = objc_msgSend(v30, "recordID");
        v36 = objc_msgSend(v35, "recordName");

        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        v40 = v37;
        v24 = v43;
        v27 = v45;
        *(_QWORD *)(v33 + 4) = sub_10006C790(v40, v39, &v50);
        swift_bridgeObjectRelease(v39);

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "updating optIn record: %s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v41 = v34;
        v25 = v47;
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {

      }
      ++v26;
      v28(v30);

    }
    while (v25 != v26);
    goto LABEL_28;
  }
  __break(1u);
}

void sub_1000947B4()
{
  uint64_t v0;

  sub_100089980(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (_QWORD *)*(unsigned __int8 *)(v0 + 48));
}

void sub_1000947D4()
{
  uint64_t v0;

  sub_10008AE20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32), *(void (**)(char *, uint64_t, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
}

void sub_1000947F8(char *a1@<X8>)
{
  uint64_t v1;

  sub_10008C85C(*(void **)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_100094810()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10009483C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD);
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject **v36;
  uint64_t v37;
  NSObject **v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned __int8 v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t (*v65)(_QWORD, _QWORD);
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002143C0;
  v6 = objc_msgSend(v1, "recordName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10008189C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v10 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v5);
  objc_msgSend(v3, "setPredicate:", v10);

  v70 = 0;
  v11 = objc_msgSend(v3, "execute:", &v70);
  v12 = v70;
  if (!v11)
  {
    v40 = v70;
    v41 = _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    v42 = v41;
LABEL_25:
    swift_errorRelease(v42);
    return;
  }
  v13 = v11;
  v14 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
  v16 = v12;

  v63 = v1;
  v64 = v3;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v43 = v15;
    else
      v43 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v17 = _CocoaArrayWrapper.endIndex.getter(v43);
    v18 = &qword_1002A5000;
    if (!v17)
      goto LABEL_20;
  }
  else
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    v18 = &qword_1002A5000;
    if (!v17)
      goto LABEL_20;
  }
  if (v17 < 1)
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_1002A54A0, sub_100084070);
    goto LABEL_23;
  }
  v19 = 0;
  v20 = v15 & 0xC000000000000001;
  v21 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v2 + 152);
  v65 = v21;
  v66 = v2;
  do
  {
    if (v20)
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
    else
      v26 = *(id *)(v15 + 8 * v19 + 32);
    v27 = v26;
    if (v18[148] != -1)
      swift_once(&qword_1002A54A0, sub_100084070);
    v28 = type metadata accessor for Logger(0);
    sub_10006F07C(v28, (uint64_t)qword_1002A54A8);
    v29 = v27;
    v22 = Logger.logObject.getter(v29);
    v30 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v30))
    {
      v31 = swift_slowAlloc(12, -1);
      v32 = v20;
      v33 = v15;
      v34 = v17;
      v35 = v18;
      v36 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 138412290;
      *(_QWORD *)(v31 + 4) = v29;
      *v36 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, v30, "deleting record: %@", (uint8_t *)v31, 0xCu);
      v37 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v36, 1, v37);
      v38 = v36;
      v18 = v35;
      v17 = v34;
      v15 = v33;
      v20 = v32;
      v21 = v65;
      swift_slowDealloc(v38, -1, -1);
      v39 = v31;
      v2 = v66;
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {

      v22 = v29;
    }

    ++v19;
    v25 = (void *)v21(v23, v24);
    objc_msgSend(v25, "deleteObject:", v29, v63, v64);

  }
  while (v17 != v19);
LABEL_20:
  v44 = swift_bridgeObjectRelease_n(v15, 2);
  v45 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v44);
  v70 = 0;
  v46 = objc_msgSend(v45, "save:", &v70);

  v47 = v70;
  if ((v46 & 1) != 0)
  {
    v48 = v70;

    return;
  }
  v49 = v70;
  v15 = _convertNSErrorToError(_:)(v47);

  swift_willThrow();
  if (v18[148] != -1)
    goto LABEL_28;
LABEL_23:
  v50 = type metadata accessor for Logger(0);
  sub_10006F07C(v50, (uint64_t)qword_1002A54A8);
  swift_errorRetain(v15);
  v51 = v63;
  swift_errorRetain(v15);
  v52 = v51;
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.info.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = (uint64_t *)swift_slowAlloc(8, -1);
    v67 = (void *)swift_slowAlloc(32, -1);
    v70 = v67;
    *(_DWORD *)v55 = 136315394;
    v57 = objc_msgSend(v52, "recordName");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v68 = sub_10006C790(v58, v60, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease(v60);

    *(_WORD *)(v55 + 12) = 2112;
    swift_errorRetain(v15);
    v61 = _swift_stdlib_bridgeErrorToNSError(v15);
    v68 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v55 + 14, v55 + 22);
    *v56 = v61;
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "delete of record %s failed %@", (uint8_t *)v55, 0x16u);
    v62 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v56, 1, v62);
    swift_slowDealloc(v56, -1, -1);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    v42 = v15;
    goto LABEL_25;
  }

  swift_errorRelease(v15);
  swift_errorRelease(v15);
  swift_errorRelease(v15);

}

uint64_t sub_100094EB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094EC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094EE8()
{
  return sub_100094F28(0x676E696F6774756FLL, 0xE800000000000000);
}

uint64_t sub_100094F00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094F10()
{
  return sub_100094F28(0x646574656C6564, 0xE700000000000000);
}

uint64_t sub_100094F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v20;
  uint64_t v21;
  id v22;

  v6 = *(uint64_t **)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  v8 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1002143C0;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10008189C();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  v10 = (void *)NSPredicate.init(format:_:)(0x2065746174736B63, 0xEC0000004025203DLL, v9);
  objc_msgSend(v7, "setPredicate:", v10);

  v22 = 0;
  v11 = objc_msgSend(v7, "execute:", &v22);
  v12 = v22;
  if (v11)
  {
    v13 = v11;
    v14 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);
    v16 = v12;

    swift_retain(v5);
    v17 = sub_1000818E0(v15, v5);
    swift_release(v5);

    swift_bridgeObjectRelease(v15);
    v18 = *v6;
    *v6 = (uint64_t)v17;
    return swift_bridgeObjectRelease(v18);
  }
  else
  {
    v20 = v22;
    v21 = _convertNSErrorToError(_:)(v12);

    swift_willThrow();
    return swift_errorRelease(v21);
  }
}

uint64_t sub_1000950F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100095108()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10009512C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE **)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100214630;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v6 = sub_10008189C();
  *(_QWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 32) = 0x676E696F6774756FLL;
  *(_QWORD *)(v5 + 40) = 0xE800000000000000;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 72) = 0x646574656C6564;
  *(_QWORD *)(v5 + 80) = 0xE700000000000000;
  v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x80000001001DF290, v5);
  objc_msgSend(v3, "setPredicate:", v7);

  v10 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  v8 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1)
    *v2 = 1;
}

uint64_t sub_1000952EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000952FC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

id sub_100095330()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned __int8 v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v1 = v0[3];
  v2 = v0[4];
  v56 = v0[5];
  v58 = v0[2];
  if ((unint64_t)v58 >> 62)
    goto LABEL_37;
  v3 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (id)swift_bridgeObjectRetain(v58);
  if (v3)
  {
    do
    {
      if (v3 < 1)
      {
        __break(1u);
        return result;
      }
      v5 = 0;
      v60 = v3;
      v57 = v2;
      while (1)
      {
        if ((v58 & 0xC000000000000001) != 0)
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v58);
        else
          v6 = *(id *)(v58 + 32 + 8 * v5);
        v7 = v6;
        v61 = v5;
        if (qword_1002A54A0 != -1)
          swift_once(&qword_1002A54A0, sub_100084070);
        v8 = type metadata accessor for Logger(0);
        v9 = sub_10006F07C(v8, (uint64_t)qword_1002A54A8);
        v10 = static os_log_type_t.info.getter(v9);
        v11 = v7;
        swift_bridgeObjectRetain_n(v2, 2);
        v12 = v11;
        v13 = Logger.logObject.getter(v12);
        v14 = v10;
        if (os_log_type_enabled(v13, v10))
        {
          v15 = swift_slowAlloc(22, -1);
          v16 = (_QWORD *)swift_slowAlloc(8, -1);
          v59 = swift_slowAlloc(32, -1);
          v63 = (uint64_t)v12;
          v64 = v59;
          *(_DWORD *)v15 = 138412546;
          v17 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v15 + 4, v15 + 12);
          *v16 = v12;
          v18 = v16;
          v2 = v57;

          *(_WORD *)(v15 + 12) = 2080;
          swift_bridgeObjectRetain(v57);
          v63 = sub_10006C790(v1, v57, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v15 + 14, v15 + 22);
          swift_bridgeObjectRelease_n(v57, 3);
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "updating state record.ID %@ newState %s", (uint8_t *)v15, 0x16u);
          v19 = sub_10006F03C(&qword_10029F6B0);
          swift_arrayDestroy(v18, 1, v19);
          swift_slowDealloc(v18, -1, -1);
          swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1, -1);
          swift_slowDealloc(v15, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v2, 2);
        }
        v20 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
        sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
        v21 = sub_10006F03C((uint64_t *)&unk_10029F390);
        v22 = swift_allocObject(v21, 72, 7);
        *(_OWORD *)(v22 + 16) = xmmword_1002143C0;
        v23 = objc_msgSend(v12, "recordName");
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        *(_QWORD *)(v22 + 56) = &type metadata for String;
        *(_QWORD *)(v22 + 64) = sub_10008189C();
        *(_QWORD *)(v22 + 32) = v24;
        *(_QWORD *)(v22 + 40) = v26;
        v27 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v22);
        objc_msgSend(v20, "setPredicate:", v27);

        v64 = 0;
        v28 = objc_msgSend(v20, "execute:", &v64);
        v29 = (id)v64;
        if (!v28)
        {
          v42 = (id)v64;
          v43 = _convertNSErrorToError(_:)(v29);

          swift_willThrow();
          swift_errorRelease(v43);
          goto LABEL_6;
        }
        v30 = v28;
        v31 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
        v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
        v33 = v29;

        v34 = sub_10006F03C(&qword_10029F328);
        v35 = swift_allocObject(v34, 64, 7);
        *(_OWORD *)(v35 + 16) = xmmword_1002143C0;
        v64 = 0x3A7364726F636572;
        v65 = 0xE900000000000020;
        if ((unint64_t)v32 >> 62)
        {
          v49 = v32 < 0 ? v32 : v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v32);
          v36 = _CocoaArrayWrapper.endIndex.getter(v49);
          swift_bridgeObjectRelease(v32);
        }
        else
        {
          v36 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v63 = v36;
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v37._object;
        String.append(_:)(v37);
        swift_bridgeObjectRelease(object);
        v39 = v64;
        v40 = v65;
        *(_QWORD *)(v35 + 56) = &type metadata for String;
        *(_QWORD *)(v35 + 32) = v39;
        *(_QWORD *)(v35 + 40) = v40;
        print(_:separator:terminator:)(v35, 32, 0xE100000000000000, 10, 0xE100000000000000);
        swift_bridgeObjectRelease(v35);
        if ((unint64_t)v32 >> 62)
          break;
        v41 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v32);
        if (v41)
          goto LABEL_26;
LABEL_5:

        swift_bridgeObjectRelease_n(v32, 2);
LABEL_6:
        v5 = v61 + 1;

        if (v61 + 1 == v60)
          goto LABEL_41;
      }
      if (v32 < 0)
        v44 = v32;
      else
        v44 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
      v41 = _CocoaArrayWrapper.endIndex.getter(v44);
      if (!v41)
        goto LABEL_5;
LABEL_26:
      if (v41 >= 1)
      {
        v45 = 0;
        do
        {
          if ((v32 & 0xC000000000000001) != 0)
            v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v32);
          else
            v46 = *(id *)(v32 + 8 * v45 + 32);
          v47 = v46;
          ++v45;
          v48 = String._bridgeToObjectiveC()();
          objc_msgSend(v47, "setCkstate:", v48);

        }
        while (v41 != v45);
        goto LABEL_5;
      }
      __break(1u);
LABEL_37:
      if (v58 < 0)
        v50 = v58;
      else
        v50 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      result = (id)_CocoaArrayWrapper.endIndex.getter(v50);
      v3 = (uint64_t)result;
    }
    while (result);
  }
LABEL_41:
  v51 = swift_bridgeObjectRelease(v58);
  v52 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 152))(v51);
  v64 = 0;
  v53 = objc_msgSend(v52, "save:", &v64);

  if ((v53 & 1) != 0)
    return (id)v64;
  v62 = v64;
  v54 = (id)v64;
  v55 = _convertNSErrorToError(_:)(v62);

  swift_willThrow();
  return (id)swift_errorRelease(v55);
}

uint64_t sub_100095A00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100095A10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100095A3C()
{
  _QWORD *v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t (*v23)(void *, id);
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  os_log_type_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v1 = v0[2];
  v2 = (id *)v0[3];
  v3 = v0[4];
  v4 = objc_msgSend((id)objc_opt_self(CloudOptIn), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v5 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1002143C0;
  v7 = objc_msgSend((id)v1, "recordName");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10008189C();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v6);
  objc_msgSend(v4, "setPredicate:", v11);

  v55 = 0;
  v12 = objc_msgSend(v4, "execute:", &v55);
  v13 = v55;
  if (!v12)
  {
    v29 = v55;
    v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    swift_errorRelease(v30);
    if (qword_1002A54A0 == -1)
    {
LABEL_12:
      v31 = type metadata accessor for Logger(0);
      sub_10006F07C(v31, (uint64_t)qword_1002A54A8);
      v32 = static os_log_type_t.error.getter();
      v33 = (id)v1;
      v34 = Logger.logObject.getter(v33);
      v35 = v32;
      if (!os_log_type_enabled(v34, v32))
      {

LABEL_26:
        return;
      }
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v55 = v33;
      v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 4, v36 + 12);
      *v37 = v33;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "record not found %@", v36, 0xCu);
      v39 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v37, 1, v39);
      v40 = v37;
LABEL_24:
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v36, -1, -1);
      goto LABEL_26;
    }
LABEL_29:
    swift_once(&qword_1002A54A0, sub_100084070);
    goto LABEL_12;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_10029F868, off_100238D60);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    v17 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002A54A0 != -1)
      swift_once(&qword_1002A54A0, sub_100084070);
    v44 = type metadata accessor for Logger(0);
    sub_10006F07C(v44, (uint64_t)qword_1002A54A8);
    v45 = static os_log_type_t.error.getter();
    v46 = swift_bridgeObjectRetain(v1);
    v34 = Logger.logObject.getter(v46);
    v47 = v45;
    if (!os_log_type_enabled(v34, v45))
    {
      swift_bridgeObjectRelease_n(v1, 2);
      goto LABEL_26;
    }
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (void *)swift_slowAlloc(32, -1);
    v55 = v48;
    *(_DWORD *)v36 = 136315138;
    v49 = swift_bridgeObjectRetain(v1);
    v50 = Array.description.getter(v49, v15);
    v52 = v51;
    swift_bridgeObjectRelease(v1);
    v53 = sub_10006C790(v50, v52, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v34, v47, "no response %s", v36, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    v40 = v48;
    goto LABEL_24;
  }
  if (v1 < 0)
    v43 = v1;
  else
    v43 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v43))
    goto LABEL_20;
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }
  v18 = *(id *)(v1 + 32);
LABEL_7:
  v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2);
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 432))(v19);
  v21 = *v2;
  *v2 = (id)v20;

  v22 = *v2;
  v23 = *(uint64_t (**)(void *, id))(*(_QWORD *)v3 + 448);
  v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }
  v25 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 152))();
  v55 = 0;
  v26 = objc_msgSend(v25, "save:", &v55);

  v27 = v55;
  if (v26)
  {
    v28 = v55;
    goto LABEL_10;
  }
  v41 = v55;
  v42 = _convertNSErrorToError(_:)(v27);

  swift_willThrow();
  swift_errorRelease(v42);
}

uint64_t sub_100095FF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100096004(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 6910581 && a2 == 0xE300000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(6910581, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x73656D6954746D73 && a2 == 0xEC000000706D6174
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73656D6954746D73, 0xEC000000706D6174, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 0x6C6169726573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6169726573, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void sub_1000962F0()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t (*v5)(void);
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;

  v1 = objc_allocWithZone((Class)NSFetchRequest);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithEntityName:", v2);

  v4 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v3);
  v5 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 152);
  v6 = (void *)v5();
  v19 = 0;
  v7 = objc_msgSend(v6, "executeRequest:error:", v4, &v19);

  v8 = v19;
  if (v7)
  {
    v9 = v19;

  }
  else
  {
    v11 = v19;
    v12 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    v10 = swift_errorRelease(v12);
  }
  v13 = (void *)((uint64_t (*)(uint64_t))v5)(v10);
  v19 = 0;
  v14 = objc_msgSend(v13, "save:", &v19);

  v15 = v19;
  if (v14)
  {
    v16 = v19;

  }
  else
  {
    v17 = v19;
    v18 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    swift_errorRelease(v18);
    v3 = v4;
  }

}

uint64_t sub_10009646C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_10009647C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[6];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v12 = a3[8];
    __dst = (void *)(a1 + v12);
    v13 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 32) = v9;
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    if (v16(v13, 1, v14))
    {
      v17 = sub_10006F03C((uint64_t *)&unk_10029EE40);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    v19 = a3[9];
    v20 = a3[10];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)((char *)v4 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
  }
  return v4;
}

uint64_t sub_1000965F4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[8];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10] + 8));
}

uint64_t sub_100096698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = a3[8];
  __dst = (void *)(a1 + v11);
  v12 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 32) = v8;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (v15(v12, 1, v13))
  {
    v16 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v17 = a3[9];
  v18 = a3[10];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(a1 + v18);
  v23 = (_QWORD *)(a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_1000967E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = a3[9];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1000969BC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_100096AB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_100096C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100096C48);
}

uint64_t sub_100096C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100096CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100096CD4);
}

uint64_t sub_100096CD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_100096D4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100214A90;
  v4[1] = &unk_100214A90;
  v4[2] = &unk_100214A90;
  v4[3] = &unk_100214AA8;
  sub_1000815E4(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_100214AC0;
    v4[6] = &unk_100214AC0;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for KTCloudOptIn()
{
  return objc_opt_self(_TtC13transparencyd12KTCloudOptIn);
}

uint64_t storeEnumTagSinglePayload for CloudOptInData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100096E44 + 4 * byte_100214A05[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100096E78 + 4 * byte_100214A00[v4]))();
}

uint64_t sub_100096E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100096E88);
  return result;
}

uint64_t sub_100096E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100096E9CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100096EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudOptInData.CodingKeys()
{
  return &type metadata for CloudOptInData.CodingKeys;
}

unint64_t sub_100096EC8()
{
  unint64_t result;

  result = qword_1002A56E0[0];
  if (!qword_1002A56E0[0])
  {
    result = swift_getWitnessTable(&unk_100214BCC, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, qword_1002A56E0);
  }
  return result;
}

unint64_t sub_100096F10()
{
  unint64_t result;

  result = qword_1002A57F0;
  if (!qword_1002A57F0)
  {
    result = swift_getWitnessTable(&unk_100214B3C, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A57F0);
  }
  return result;
}

unint64_t sub_100096F58()
{
  unint64_t result;

  result = qword_1002A57F8[0];
  if (!qword_1002A57F8[0])
  {
    result = swift_getWitnessTable(&unk_100214B64, &type metadata for CloudOptInData.CodingKeys);
    atomic_store(result, qword_1002A57F8);
  }
  return result;
}

_QWORD *sub_100096F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  if ((unint64_t)a1 >> 62)
    goto LABEL_34;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v31 = a1 & 0xC000000000000001;
    v5 = 4;
    while (1)
    {
      v7 = v31 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      v8 = v7;
      v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v10 = objc_msgSend(v7, "ckstate");
      if (v10)
      {
        v11 = v10;
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v14 = v13;

        if (v14)
        {
          if (v12 == 0x646574656C6564 && v14 == 0xE700000000000000)
          {
            v26 = 0xE700000000000000;
            goto LABEL_26;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x646574656C6564, 0xE700000000000000, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
            goto LABEL_27;
        }
      }
      v17 = objc_msgSend(v8, "uri", v31);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(_QWORD *)(a2 + 96);
      if (v18 == v21 && v20 == v22)
      {
        v26 = v20;
LABEL_26:
        swift_bridgeObjectRelease(v26);
        goto LABEL_27;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
      swift_bridgeObjectRelease(v20);
      if ((v24 & 1) == 0)
      {
        v25 = sub_1000840D0();
        if (v32)
          goto LABEL_31;
        goto LABEL_28;
      }
LABEL_27:
      v25 = 0;
      if (v32)
      {
LABEL_31:
        swift_bridgeObjectRelease(a1);

        return (_QWORD *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      }
LABEL_28:

      if (v25)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v28 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v28 >= v27 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
        specialized Array._endMutation()(v6);
      }
      ++v5;
      if (v9 == v4)
        goto LABEL_38;
    }
    __break(1u);
LABEL_34:
    if (a1 < 0)
      v30 = a1;
    else
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v30);
  }
LABEL_38:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100097224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudOptInData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000972B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10006F03C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_OWORD *sub_1000972F4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100097304(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for KTOptIn()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10029FCF8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100241E58);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10029FCF8);
  }
}

uint64_t sub_100097360(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10006FD6C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009741C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A5988);
  sub_10006F07C(v0, (uint64_t)qword_1002A5988);
  return Logger.init(transparencyCategory:)(0xD000000000000017, 0x8000000100214D30);
}

id sub_10009747C()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps);
}

uint64_t sub_10009748C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application + 8));
  return v1;
}

uint64_t sub_1000974C4()
{
  return sub_1000977B4(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris);
}

uint64_t sub_1000974D0(uint64_t a1)
{
  return sub_100097890(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris);
}

uint64_t (*sub_1000974DC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris, a1, 33, 0);
  return j_j__swift_endAccess;
}

unint64_t variable initialization expression of PeerValidationOperation.verifierInfo()
{
  return sub_100097544((uint64_t)_swiftEmptyArrayStorage, &qword_10029FE38);
}

unint64_t sub_100097544(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_100072E70(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100097658()
{
  return sub_1000977B4(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo);
}

uint64_t sub_100097664(uint64_t a1)
{
  return sub_100097890(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo);
}

uint64_t (*sub_100097670(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000976B4()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier);
}

id sub_1000976C4()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp);
}

uint64_t sub_1000976D4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient));
}

id sub_1000976E4()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue);
}

unint64_t variable initialization expression of PeerValidationOperation.result()
{
  return sub_100097544((uint64_t)_swiftEmptyArrayStorage, &qword_10029FDF8);
}

uint64_t PeerValidationOperation.result.getter()
{
  return sub_1000977B4(&OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result);
}

uint64_t sub_1000977B4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t PeerValidationOperation.result.setter(uint64_t a1)
{
  return sub_100097890(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result);
}

uint64_t sub_100097890(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*PeerValidationOperation.result.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result, a1, 33, 0);
  return j_j__swift_endAccess;
}

id PeerValidationOperation.__allocating_init(deps:application:uris:logClient:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v11;
  id v12;

  v11 = objc_allocWithZone(v5);
  v12 = sub_10009A21C(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease(a5);
  return v12;
}

id PeerValidationOperation.init(deps:application:uris:logClient:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;

  v7 = sub_10009A21C(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease(a5);
  return v7;
}

_QWORD *sub_1000979D4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = a1;
  sub_100099058(0, v1, 0);
  result = (_QWORD *)sub_100099FA8(v2);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = v2 + 64;
  v27 = v2 + 80;
  v28 = v1;
  v30 = v2 + 64;
  v31 = v2;
  v29 = v4;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v2 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v2 + 36) != v4)
      goto LABEL_26;
    v33 = v6;
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v13);
    v15 = v14;
    v34 = v12;
    swift_bridgeObjectRetain(v13);
    v16._countAndFlagsBits = 58;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    objc_msgSend(v15, "succeed");
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    if (v32)
    {
      swift_release(_swiftEmptyArrayStorage);

      swift_bridgeObjectRelease(v13);
      return _swiftEmptyArrayStorage;
    }

    result = (_QWORD *)swift_bridgeObjectRelease(v13);
    v20 = _swiftEmptyArrayStorage[2];
    v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1)
      result = (_QWORD *)sub_100099058(v19 > 1, v20 + 1, 1);
    _swiftEmptyArrayStorage[2] = v20 + 1;
    v21 = &_swiftEmptyArrayStorage[2 * v20];
    v21[4] = v34;
    v21[5] = v13;
    v2 = v31;
    v8 = 1 << *(_BYTE *)(v31 + 32);
    if (v5 >= v8)
      goto LABEL_27;
    v7 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v10);
    if ((v22 & (1 << v5)) == 0)
      goto LABEL_28;
    v4 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_29;
    v23 = v22 & (-2 << (v5 & 0x3F));
    if (v23)
    {
      v8 = __clz(__rbit64(v23)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v28;
    }
    else
    {
      v24 = v10 + 1;
      v25 = (unint64_t)(v8 + 63) >> 6;
      v9 = v28;
      if (v10 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_21:
          v8 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v10)
          {
            v26 = *(_QWORD *)(v27 + 8 * v10++);
            if (v26)
            {
              v24 = v10 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    v6 = v33 + 1;
    v5 = v8;
    if (v33 + 1 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PeerValidationOperation.groupStart()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v0, "dependOnBeforeGroupFinished:", *(_QWORD *)&v0[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp]);
  if (qword_1002A5980 != -1)
    swift_once(&qword_1002A5980, sub_10009741C);
  v5 = sub_10006F07C(v1, (uint64_t)qword_1002A5988);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  v6 = v0;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    v23 = v9;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v25 = v11;
    *(_DWORD *)v10 = 136315138;
    v27 = v11;
    v12 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v6) + 0x98))();
    v26 = v12;
    v22 = v10 + 4;
    v13 = sub_10006F03C(&qword_10029FD48);
    v14 = sub_100097360((unint64_t *)&unk_10029FD50, &qword_10029FD48, (uint64_t)&protocol conformance descriptor for Set<A>);
    v24 = v2;
    v15 = v14;
    v16 = sub_10007E948();
    v17 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v13, v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease(v12);
    v26 = sub_10006C790(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22, v10 + 12);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v23, "Starting fetch of uri data for: %s", v10, 0xCu);
    v20 = v25;
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v21 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v4, v1);
  }
  else
  {

    v21 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *(_QWORD *)v6) + 0xE8))(v21);
}

void sub_10009801C()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;

  v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98);
  v2 = v1();
  v3 = v0;
  sub_10009A770(v2, v3);
  swift_bridgeObjectRelease(v2);

  v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xC8))();
  v5 = v3;
  sub_10009AC48(v4, v5);
  swift_bridgeObjectRelease(v4);

  v6 = v1();
  v7 = *(_QWORD *)(v6 + 16);
  v8 = swift_bridgeObjectRelease(v6);
  if (v7)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xF0))(v8);
  }
  else
  {
    if (qword_1002A5980 != -1)
      swift_once(&qword_1002A5980, sub_10009741C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10006F07C(v9, (uint64_t)qword_1002A5988);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "got all entries from cache", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = objc_msgSend(v5, "operationQueue");
    objc_msgSend(v14, "addOperation:", *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp));

  }
}

void sub_1000981F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  Class isa;
  NSString v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[5];
  uint64_t v12;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
  v2 = v0;
  v3 = sub_10009A568(v1);
  swift_bridgeObjectRelease(v1);

  v4 = objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps), "idsOperations");
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v6 = String._bridgeToObjectiveC()();
  v7 = swift_allocObject(&unk_100241F50, 24, 7);
  *(_QWORD *)(v7 + 16) = v2;
  v11[4] = sub_10009AE48;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100098A08;
  v11[3] = &unk_100241F68;
  v8 = _Block_copy(v11);
  v9 = v12;
  v10 = v2;
  swift_release(v9);
  objc_msgSend(v4, "fetchPeerVerificationInfos:application:completionBlock:", isa, v6, v8);
  _Block_release(v8);
  swift_unknownObjectRelease(v4);

}

void sub_100098364(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(__n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void *v48;
  id v49;
  NSString v50;
  id v51;
  void *v52;
  id v53;
  _QWORD *v54;
  void **aBlock;
  _QWORD v56[4];
  uint64_t v57;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1002A5980 != -1)
      swift_once(&qword_1002A5980, sub_10009741C);
    v14 = type metadata accessor for Logger(0);
    sub_10006F07C(v14, (uint64_t)qword_1002A5988);
    swift_errorRetain(a2);
    v15 = swift_errorRetain(a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      swift_errorRetain(a2);
      v20 = _swift_stdlib_bridgeErrorToNSError(a2);
      aBlock = (void **)v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v56, v18 + 4, v18 + 12);
      *v19 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "IDS failed with %@", v18, 0xCu);
      v21 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v35 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(a3, "setError:", v35);

    v36 = objc_msgSend(a3, "operationQueue");
    objc_msgSend(v36, "addOperation:", *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp));

    swift_errorRelease(a2);
  }
  else
  {
    if (a1)
    {
      v22 = *(uint64_t (**)(__n128))((swift_isaMask & *a3) + 0xB8);
      v23 = swift_bridgeObjectRetain(a1);
      v24 = v22(v23);
      v25 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v24);
      v26 = *(_QWORD *)(v25 + 16);
      v27 = swift_bridgeObjectRelease(v25);
      v28 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0x98))(v27);
      v29 = *(_QWORD *)(v28 + 16);
      swift_bridgeObjectRelease(v28);
      if (v26 == v29)
      {
        v53 = *(id *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue);
        v30 = swift_allocObject(&unk_100242040, 24, 7);
        *(_QWORD *)(v30 + 16) = a3;
        v56[3] = sub_10009B598;
        v57 = v30;
        aBlock = _NSConcreteStackBlock;
        v56[0] = 1107296256;
        v56[1] = sub_10008EDF8;
        v56[2] = &unk_100242058;
        v31 = _Block_copy(&aBlock);
        static DispatchQoS.unspecified.getter(a3);
        v54 = _swiftEmptyArrayStorage;
        v32 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v33 = sub_10006F03C(&qword_10029FE08);
        v34 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v33, v34, v6, v32);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v31);
        _Block_release(v31);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        swift_release(v57);
        return;
      }
      if (qword_1002A5980 != -1)
        swift_once(&qword_1002A5980, sub_10009741C);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_10006F07C(v43, (uint64_t)qword_1002A5988);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.info.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "IDS didn't return all answers in peer query", v47, 2u);
        swift_slowDealloc(v47, -1, -1);
      }

      v48 = (void *)objc_opt_self(TransparencyError);
      v49 = kTransparencyErrorInternal;
      v50 = String._bridgeToObjectiveC()();
      v51 = objc_msgSend(v48, "errorWithDomain:code:underlyingError:userinfo:description:", v49, -353, 0, 0, v50);

      v52 = (void *)_convertErrorToNSError(_:)(v51);
      objc_msgSend(a3, "setError:", v52);

      v42 = objc_msgSend(a3, "operationQueue");
    }
    else
    {
      if (qword_1002A5980 != -1)
        swift_once(&qword_1002A5980, sub_10009741C);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_10006F07C(v37, (uint64_t)qword_1002A5988);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "No results from IDS", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v42 = objc_msgSend(a3, "operationQueue");
    }
    v53 = v42;
    objc_msgSend(v53, "addOperation:", *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp));

  }
}

uint64_t sub_100098A08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10006D6DC(0, &qword_10029FD60, KTVerificationInfo_ptr);
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String, v7, &protocol witness table for String);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

void sub_100098AA4()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  Class isa;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[5];
  uint64_t v12;

  v1 = objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps), "contextStore");
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
  v3 = sub_100099B44(v2);
  swift_bridgeObjectRelease(v2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v3);
  v5 = String._bridgeToObjectiveC()();
  v6 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  v7 = swift_allocObject(&unk_100241FA0, 24, 7);
  *(_QWORD *)(v7 + 16) = v0;
  v11[4] = sub_10009AE68;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100098C1C;
  v11[3] = &unk_100241FB8;
  v8 = _Block_copy(v11);
  v9 = v12;
  v10 = v0;
  swift_release(v9);
  objc_msgSend(v1, "queryForUris:application:logClient:userInitiated:cachedYoungerThan:completionHandler:", isa, v5, v6, 1, 0, v8);
  _Block_release(v8);
  swift_unknownObjectRelease(v1);

}

void sub_100098C1C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100098C70()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))();
  v2 = sub_1000979D4(v1);
  swift_bridgeObjectRelease(v1);
  v3 = sub_10006F03C((uint64_t *)&unk_10029F350);
  v4 = sub_100097360((unint64_t *)&qword_1002A0340, (uint64_t *)&unk_10029F350, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v3, v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

void sub_100098D30()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Class isa;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[5];
  uint64_t v11;

  v1 = objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps), "contextStore");
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB0))();
  sub_10006D6DC(0, &qword_10029FD60, KTVerificationInfo_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v4 = String._bridgeToObjectiveC()();
  v5 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  v6 = swift_allocObject(&unk_100241FF0, 24, 7);
  *(_QWORD *)(v6 + 16) = v0;
  v10[4] = sub_10009B0A4;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100098EB8;
  v10[3] = &unk_100242008;
  v7 = _Block_copy(v10);
  v8 = v11;
  v9 = v0;
  swift_release(v8);
  objc_msgSend(v1, "validatePeers:application:fetchNow:logClient:completionBlock:", isa, v4, 1, v5, v7);
  _Block_release(v7);
  swift_unknownObjectRelease(v1);

}

uint64_t sub_100098EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10006D6DC(0, &qword_10029FDF0, KTVerifierResult_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

void PeerValidationOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.PeerValidationOperation", 37, "init()", 6, 0);
  __break(1u);
}

id PeerValidationOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeerValidationOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100099058(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100099074(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100099074(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10006F03C((uint64_t *)&unk_10029F880);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1000991DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029FDF8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1000994E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100072E70(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100099644();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000991DC(v15, a4 & 1);
  v20 = sub_100072E70(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

id sub_100099644()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10006F03C(&qword_10029FDF8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000997F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100091888();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100099980(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t sub_100099980(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

_QWORD *sub_100099B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10006F03C((uint64_t *)&unk_10029F880);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_100099DAC((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100097304(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_100099C28(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_100099CC8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100099DAC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100099FA8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_10009A030(uint64_t a1)
{
  int64_t v1;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100099058(0, v1, 0);
    v3 = (void *)objc_opt_self(TransparencyApplication);
    v4 = (_QWORD *)(a1 + 40);
    do
    {
      v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      v6 = String._bridgeToObjectiveC()();
      v7 = String._bridgeToObjectiveC()();
      v8 = objc_msgSend(v3, "addApplicationPrefixForIdentifier:uri:", v6, v7);

      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;
      swift_bridgeObjectRelease(v5);

      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        sub_100099058(v12 > 1, v13 + 1, 1);
      v4 += 2;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v9;
      v14[5] = v11;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10009A188(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100091268(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_10009A21C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  objc_class *v35;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  _QWORD *v43;

  v38 = a5;
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0);
  __chkstk_darwin(v12);
  v37 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo;
  v18 = v5;
  *(_QWORD *)&v5[v17] = sub_100097544((uint64_t)_swiftEmptyArrayStorage, &qword_10029FE38);
  v19 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result;
  *(_QWORD *)&v18[v19] = sub_100097544((uint64_t)_swiftEmptyArrayStorage, &qword_10029FDF8);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps] = a1;
  v20 = &v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application];
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = a3;
  swift_bridgeObjectRetain(a3);
  v21 = a1;
  v22 = sub_10009A030(a4);
  swift_bridgeObjectRelease(a4);
  v23 = sub_10009A188((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris] = v23;
  v24 = objc_allocWithZone((Class)KTVerifier);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v26 = objc_msgSend(v24, "initWithApplication:", v25);

  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier] = v26;
  v27 = objc_msgSend(objc_allocWithZone((Class)KTResultOperation), "init");
  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp] = v27;
  v28 = v38;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient] = v38;
  sub_10006D6DC(0, &qword_10029FE18, OS_dispatch_queue_serial_ptr);
  v29 = swift_unknownObjectRetain(v28);
  static DispatchQoS.unspecified.getter(v29);
  v43 = _swiftEmptyArrayStorage;
  v30 = sub_10006F284(&qword_10029FE20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  v31 = sub_10006F03C(&qword_10029FE28);
  v32 = sub_100097360(&qword_10029FE30, &qword_10029FE28, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v31, v32, v12, v30);
  v34 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v41);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000011, 0x80000001001DF790, v16, v33, v34, 0);

  v35 = (objc_class *)type metadata accessor for PeerValidationOperation();
  v42.receiver = v18;
  v42.super_class = v35;
  return objc_msgSendSuper2(&v42, "init");
}

_QWORD *sub_10009A568(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = a1;
  sub_100099058(0, v1, 0);
  v3 = sub_100099C28(v2);
  v5 = v4;
  v7 = v6 & 1;
  v23 = v2 + 56;
  result = (_QWORD *)objc_opt_self(TransparencyApplication);
  v22 = result;
  v21 = v2;
  while ((v3 & 0x8000000000000000) == 0 && v3 < 1 << *(_BYTE *)(v2 + 32))
  {
    if (((*(_QWORD *)(v23 + (((unint64_t)v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(v2 + 36) != v5)
      goto LABEL_14;
    v24 = v7;
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v3 + 8);
    swift_bridgeObjectRetain(v9);
    v10 = String._bridgeToObjectiveC()();
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v22, "stripApplicationPrefixForIdentifier:uri:", v10, v11);

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;
    swift_bridgeObjectRelease(v9);

    v17 = _swiftEmptyArrayStorage[2];
    v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1)
      sub_100099058(v16 > 1, v17 + 1, 1);
    _swiftEmptyArrayStorage[2] = v17 + 1;
    v18 = &_swiftEmptyArrayStorage[2 * v17];
    v18[4] = v13;
    v18[5] = v15;
    v2 = v21;
    result = (_QWORD *)sub_100099CC8(v3, v5, v24 & 1, v21);
    v3 = (int64_t)result;
    v5 = v19;
    v7 = v20 & 1;
    if (!--v1)
    {
      sub_10009B5D0((uint64_t)result, v19, v20 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void sub_10009A770(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  char **v8;
  unint64_t i;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t *, __n128);
  id v31;
  __n128 v32;
  void (*v33)(uint64_t *, _QWORD);
  uint64_t *v34;
  uint64_t *v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v44;
  int64_t v45;
  uint64_t v46[4];
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v39 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v40 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = &selRef_smManager;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v44 = (v6 - 1) & v6;
  v45 = v7;
  for (i = __clz(__rbit64(v6)) | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = objc_msgSend(*(id *)((char *)a2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps), "dataStore", swift_bridgeObjectRetain(v15).n128_f64[0]);
    v18 = String._bridgeToObjectiveC()();
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v17, "verifierResultForPeer:application:", v18, v19);

    if (qword_1002A5980 != -1)
      swift_once(&qword_1002A5980, sub_10009741C);
    v21 = type metadata accessor for Logger(0);
    sub_10006F07C(v21, (uint64_t)qword_1002A5988);
    v22 = v20;
    swift_bridgeObjectRetain_n(v15, 2);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v41 = v3;
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v46[0] = v27;
      *(_DWORD *)v26 = 134218242;
      v28 = objc_msgSend(v23, v8[88]);

      v47 = (uint64_t)v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 4, v26 + 12);

      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(v15);
      v47 = sub_10006C790(v16, v15, v46);
      v8 = &selRef_smManager;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(v15, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cached response %lu for uri %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v29 = v26;
      v3 = v41;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
    }

    if (objc_msgSend(v23, v8[88]) != (id)2)
    {
      v30 = *(uint64_t (**)(uint64_t *, __n128))((swift_isaMask & *a2) + 0xD8);
      v31 = v23;
      v32 = swift_bridgeObjectRetain(v15);
      v33 = (void (*)(uint64_t *, _QWORD))v30(v46, v32);
      v35 = v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
      v47 = *v35;
      *v35 = 0x8000000000000000;
      sub_1000994E8((uint64_t)v31, v16, v15, isUniquelyReferenced_nonNull_native);
      v37 = *v35;
      *v35 = v47;
      v8 = &selRef_smManager;
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v15);
      v33(v46, 0);
    }

    if (v3)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v15);
      return;
    }
    swift_bridgeObjectRelease(v15);
    v6 = v44;
    v7 = v45;
    if (v44)
      goto LABEL_4;
LABEL_5:
    v10 = __OFADD__(v7, 1);
    v11 = v7 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v11 >= v40)
      goto LABEL_33;
    v12 = *(_QWORD *)(v39 + 8 * v11);
    if (!v12)
    {
      v13 = v11 + 1;
      if (v11 + 1 >= v40)
        goto LABEL_33;
      v12 = *(_QWORD *)(v39 + 8 * v13);
      if (v12)
        goto LABEL_14;
      v13 = v11 + 2;
      if (v11 + 2 >= v40)
        goto LABEL_33;
      v12 = *(_QWORD *)(v39 + 8 * v13);
      if (v12)
        goto LABEL_14;
      v13 = v11 + 3;
      if (v11 + 3 >= v40)
        goto LABEL_33;
      v12 = *(_QWORD *)(v39 + 8 * v13);
      if (v12)
      {
LABEL_14:
        v11 = v13;
        goto LABEL_15;
      }
      v38 = v11 + 4;
      if (v11 + 4 >= v40)
      {
LABEL_33:
        swift_release(a1);
        return;
      }
      v12 = *(_QWORD *)(v39 + 8 * v38);
      v11 += 4;
      if (!v12)
        break;
    }
LABEL_15:
    v44 = (v12 - 1) & v12;
    v45 = v11;
  }
  while (1)
  {
    v11 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v11 >= v40)
      goto LABEL_33;
    v12 = *(_QWORD *)(v39 + 8 * v11);
    ++v38;
    if (v12)
      goto LABEL_15;
  }
LABEL_35:
  __break(1u);
}

void sub_10009AC48(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, __n128);
  __n128 v15;
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _BYTE v21[32];
  uint64_t v22;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v7)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v7)
        goto LABEL_23;
      v19 = *(_QWORD *)(v22 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v7)
          goto LABEL_23;
        v19 = *(_QWORD *)(v22 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v7)
            goto LABEL_23;
          v19 = *(_QWORD *)(v22 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(uint64_t (**)(_BYTE *, __n128))((swift_isaMask & *a2) + 0xA8);
    v15 = swift_bridgeObjectRetain(v13);
    v16 = (void (*)(_BYTE *, _QWORD))v14(v21, v15);
    sub_1000997F4(v12, v13);
    swift_bridgeObjectRelease(v17);
    v16(v21, 0);
    swift_bridgeObjectRelease(v13);
  }
  v20 = v18 + 4;
  if (v20 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v7)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10009AE24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10009AE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100098364(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_10009AE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009AE60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009AE68(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD **)(v1 + 16);
  if (!a1)
    return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x108))();
  swift_errorRetain(a1);
  if (qword_1002A5980 != -1)
    swift_once(&qword_1002A5980, sub_10009741C);
  v4 = type metadata accessor for Logger(0);
  sub_10006F07C(v4, (uint64_t)qword_1002A5988);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(a1);
    v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "KT query(forUris:) failed with %@", v8, 0xCu);
    v11 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v13 = (void *)_convertErrorToNSError(_:)(a1);
  objc_msgSend(v2, "setError:", v13);

  v14 = objc_msgSend(v2, "operationQueue");
  objc_msgSend(v14, "addOperation:", *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp));

  return swift_errorRelease(a1);
}

void sub_10009B0A4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t *v21;
  uint64_t *v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t *);
  id v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[4];

  v2 = a1;
  v54 = *(_QWORD **)(v1 + 16);
  if (a1 >> 62)
  {
LABEL_31:
    if (v2 < 0)
      v48 = v2;
    else
      v48 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  if (v3)
  {
    v4 = objc_opt_self(TransparencyApplication);
    v51 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v54) + 0xD8);
    v52 = (id)v4;
    v53 = v2 & 0xC000000000000001;
    v5 = 4;
    v49 = v3;
    v50 = v2;
    do
    {
      if (v53)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
      else
        v9 = *(id *)(v2 + 8 * v5);
      v10 = v9;
      if (__OFADD__(v5 - 4, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v55 = v5 - 3;
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v10, "uri");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v14 = v13;

      v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      v16 = objc_msgSend(v52, "addApplicationPrefixForIdentifier:uri:", v11, v15);

      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v18 = v17;

      v19 = v10;
      v20 = (void (*)(uint64_t *, _QWORD))v51(v57);
      v22 = v21;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
      v56 = *v22;
      v24 = v56;
      *v22 = 0x8000000000000000;
      v26 = sub_100072E70(v2, v18);
      v27 = *(_QWORD *)(v24 + 16);
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_29;
      v30 = v25;
      if (*(_QWORD *)(v24 + 24) >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v33 = (_QWORD *)v56;
          if ((v25 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_100099644();
          v33 = (_QWORD *)v56;
          if ((v30 & 1) != 0)
            goto LABEL_5;
        }
      }
      else
      {
        sub_1000991DC(v29, isUniquelyReferenced_nonNull_native);
        v31 = sub_100072E70(v2, v18);
        if ((v30 & 1) != (v32 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return;
        }
        v26 = v31;
        v33 = (_QWORD *)v56;
        if ((v30 & 1) != 0)
        {
LABEL_5:
          v6 = v33[7];
          v7 = 8 * v26;

          *(_QWORD *)(v6 + v7) = v19;
          goto LABEL_6;
        }
      }
      v33[(v26 >> 6) + 8] |= 1 << v26;
      v34 = (uint64_t *)(v33[6] + 16 * v26);
      *v34 = v2;
      v34[1] = v18;
      *(_QWORD *)(v33[7] + 8 * v26) = v19;
      v35 = v33[2];
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_30;
      v33[2] = v37;
      swift_bridgeObjectRetain(v18);
LABEL_6:
      v8 = *v22;
      *v22 = (uint64_t)v33;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v18);
      v20(v57, 0);

      ++v5;
      v2 = v50;
    }
    while (v55 != v49);
  }
  swift_bridgeObjectRelease(v2);
  if (qword_1002A5980 != -1)
    swift_once(&qword_1002A5980, sub_10009741C);
  v38 = type metadata accessor for Logger(0);
  sub_10006F07C(v38, (uint64_t)qword_1002A5988);
  v39 = v54;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    *(_DWORD *)v42 = 136315138;
    v57[0] = v43;
    v44 = (*(uint64_t (**)(void))((swift_isaMask & *v39) + 0x100))();
    v46 = v45;
    v56 = sub_10006C790(v44, v45, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v46);

    _os_log_impl((void *)&_mh_execute_header, v40, v41, "KT query validate peer completed %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {

  }
  v47 = objc_msgSend(v39, "operationQueue");
  objc_msgSend(v47, "addOperation:", *(_QWORD *)((char *)v39 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp));

}

uint64_t type metadata accessor for PeerValidationOperation()
{
  return objc_opt_self(_TtC13transparencyd23PeerValidationOperation);
}

uint64_t sub_10009B598()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xF8))();
}

uint64_t sub_10009B5D0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10009B600()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A59A8);
  sub_10006F07C(v0, (uint64_t)qword_1002A59A8);
  return Logger.init(transparencyCategory:)(0x6461526F54706174, 0xEA00000000007261);
}

id sub_10009B660()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
}

id sub_10009B670()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag);
}

id KTTapToRadar.__allocating_init(dataStore:configBag:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id KTTapToRadar.init(dataStore:configBag:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_super v4;

  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for KTTapToRadar();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for KTTapToRadar()
{
  return objc_opt_self(_TtC13transparencyd12KTTapToRadar);
}

id sub_10009B7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSURL *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  v5 = sub_10006F03C(&qword_10029FF00);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  result = objc_msgSend((id)objc_opt_self(TransparencyAnalytics), "hasInternalDiagnostics");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag), "tapToRadarEnabled");
    if ((_DWORD)result)
    {
      if (qword_1002A59A0 != -1)
        swift_once(&qword_1002A59A0, sub_10009B600);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10006F07C(v12, (uint64_t)qword_1002A59A8);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "User tapped on 'Tap-to-Radar'... Attempting to open Tap-to-Radar.", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

      v17 = sub_10006F03C((uint64_t *)&unk_10029F390);
      v18 = swift_allocObject(v17, 192, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100214D80;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kTUITapToRadarURL);
      v21 = v20;
      *(_QWORD *)(v18 + 56) = &type metadata for String;
      v22 = sub_10008189C();
      *(_QWORD *)(v18 + 32) = v19;
      *(_QWORD *)(v18 + 40) = v21;
      *(_QWORD *)(v18 + 96) = &type metadata for String;
      *(_QWORD *)(v18 + 104) = v22;
      *(_QWORD *)(v18 + 64) = v22;
      *(_QWORD *)(v18 + 72) = 0x656C746954;
      *(_QWORD *)(v18 + 80) = 0xE500000000000000;
      *(_QWORD *)(v18 + 136) = &type metadata for String;
      *(_QWORD *)(v18 + 144) = v22;
      *(_QWORD *)(v18 + 112) = a1;
      *(_QWORD *)(v18 + 120) = a2;
      *(_QWORD *)(v18 + 176) = &type metadata for String;
      *(_QWORD *)(v18 + 184) = v22;
      *(_QWORD *)(v18 + 152) = 0x65746164696C6156;
      *(_QWORD *)(v18 + 160) = 0xE800000000000000;
      v23 = swift_bridgeObjectRetain(a2);
      v24 = String.init(format:_:)(0x255B3D4025264025, 0xED00005D40252D40, v18, v23);
      v26 = v25;
      URL.init(string:)(v24);
      swift_bridgeObjectRelease(v26);
      result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
      if (result)
      {
        v27 = result;
        sub_10009C678((uint64_t)v10, (uint64_t)v8, &qword_10029FF00);
        v28 = type metadata accessor for URL(0);
        v29 = *(_QWORD *)(v28 - 8);
        v31 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1, v28) != 1)
        {
          URL._bridgeToObjectiveC()(v30);
          v31 = v32;
          (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
        }
        objc_msgSend(v27, "openSensitiveURL:withOptions:", v31, 0);

        return (id)sub_100081AB0((uint64_t)v10, &qword_10029FF00);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall KTTapToRadar.hasRecentlyFiledTTR(tapToRadarType:)(Swift::String tapToRadarType)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v23;
  Swift::Bool v24;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v32 = (char *)&v31 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - v9;
  v11 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v31 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v31 - v18;
  v20 = *(void **)(v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "getTapToRadarDate:", v21);

  if (v22)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, v23, 1, v2);
  sub_100075A9C((uint64_t)v17, (uint64_t)v19);
  sub_10009C678((uint64_t)v19, (uint64_t)v14, (uint64_t *)&unk_10029EE40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
  {
    sub_100081AB0((uint64_t)v19, (uint64_t *)&unk_10029EE40);
    v24 = 0;
    v19 = v14;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v14, v2);
    v25 = kTapToRadarExpiry;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    v26 = v32;
    v27 = Date.init(timeInterval:since:)(v6, v25);
    static Date.now.getter(v27);
    v28 = Date.compare(_:)(v26);
    v29 = *(void (**)(char *, uint64_t))(v3 + 8);
    v29(v6, v2);
    v24 = v28 == -1;
    v29(v26, v2);
    v29(v10, v2);
  }
  sub_100081AB0((uint64_t)v19, (uint64_t *)&unk_10029EE40);
  return v24;
}

Swift::Void __swiftcall KTTapToRadar.presentTapToRadarError(withType:)(Swift::String withType)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  Class isa;
  NSString v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  unint64_t v18;
  const __CFDictionary *v19;
  __CFUserNotification *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  SInt32 v26;
  SInt32 error;
  CFOptionFlags responseFlags[3];
  _BYTE v29[152];

  object = withType._object;
  countAndFlagsBits = withType._countAndFlagsBits;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(TransparencyAnalytics), "hasInternalDiagnostics"))
    return;
  if (!objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag), "tapToRadarEnabled"))return;
  v8 = (*(uint64_t (**)(uint64_t, void *))((swift_isaMask & *v1) + 0x70))(countAndFlagsBits, object);
  if ((v8 & 1) != 0)
    return;
  v9 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  static Date.now.getter(v8);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "storeTTR:withType:", isa, v11);

  if ((objc_msgSend((id)objc_opt_self(TransparencyAuthentication), "isVirtualMachine") & 1) != 0)
    return;
  error = 0;
  v12 = sub_10006F03C(&qword_10029FE58);
  inited = swift_initStackObject(v12, v29);
  *(_OWORD *)(inited + 16) = xmmword_1002149F0;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_19;
  }
  v14 = inited;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  *(_QWORD *)(inited + 40) = 0xD000000000000029;
  *(_QWORD *)(inited + 48) = 0x80000001001DF800;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 72) = kCFUserNotificationDefaultButtonTitleKey;
  strcpy((char *)(inited + 80), "Tap-to-Radar");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  if (!kCFUserNotificationAlternateButtonTitleKey)
  {
LABEL_20:
    __break(1u);
    return;
  }
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 112) = kCFUserNotificationAlternateButtonTitleKey;
  *(_QWORD *)(inited + 120) = 27471;
  *(_QWORD *)(inited + 128) = 0xE200000000000000;
  v15 = (id)kCFUserNotificationAlertHeaderKey;
  v16 = (id)kCFUserNotificationDefaultButtonTitleKey;
  v17 = (id)kCFUserNotificationAlternateButtonTitleKey;
  v18 = sub_10009C1F4(v14);
  type metadata accessor for CFString();
  sub_10009C6BC(&qword_10029FE60, (uint64_t)&unk_100214E34);
  v19 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v20 = CFUserNotificationCreate(kCFAllocatorSystemDefault, 0.0, 3uLL, &error, v19);

  if (v20)
  {
    responseFlags[0] = 0;
    CFUserNotificationReceiveResponse(v20, 0.0, responseFlags);
    if ((responseFlags[0] & 3) == 0)
      sub_10009B7BC(countAndFlagsBits, (uint64_t)object);

  }
  else
  {
    if (qword_1002A59A0 != -1)
      swift_once(&qword_1002A59A0, sub_10009B600);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10006F07C(v21, (uint64_t)qword_1002A59A8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 67109120;
      swift_beginAccess(&error, responseFlags, 0, 0);
      v26 = error;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &error, v25 + 4, v25 + 8);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to create notification %%@ %d", v25, 8u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

unint64_t sub_10009C1F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_10029FF08);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10009C678(v7, (uint64_t)&v14, &qword_10029FF10);
    v8 = v14;
    result = sub_10009C5F8(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000972F4(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void KTTapToRadar.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTTapToRadar", 26, "init()", 6, 0);
  __break(1u);
}

id KTTapToRadar.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTTapToRadar();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void type metadata accessor for CFString()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10029FEF0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100242090);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10029FEF0);
  }
}

uint64_t sub_10009C488(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100214E08, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10009C4C4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100214E08, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10009C50C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_100214E08, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10009C564(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100214E08, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10009C5B0()
{
  return sub_10009C6BC(&qword_10029FE60, (uint64_t)&unk_100214E34);
}

uint64_t sub_10009C5D4()
{
  return sub_10009C6BC(&qword_10029FEF8, (uint64_t)&unk_100214DDC);
}

unint64_t sub_10009C5F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString();
  v3 = v2;
  v4 = sub_10009C6BC(&qword_10029FF18, (uint64_t)&unk_100214E08);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_10009C6FC(a1, v5);
}

uint64_t sub_10009C678(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10006F03C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009C6BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009C6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString();
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_10009C6BC(&qword_10029FF18, (uint64_t)&unk_100214E08);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_10009C834()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A5B48);
  sub_10006F07C(v0, (uint64_t)qword_1002A5B48);
  return Logger.init(transparencyCategory:)(0x63657264756F6C63, 0xEC0000007364726FLL);
}

uint64_t *sub_10009C898()
{
  return &qword_10029FF20;
}

uint64_t sub_10009C8A4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_10029FF20, v2, 0, 0);
  v0 = qword_10029FF20;
  swift_bridgeObjectRetain(off_10029FF28);
  return v0;
}

uint64_t sub_10009C8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_10029FF20, v6, 1, 0);
  v4 = off_10029FF28;
  qword_10029FF20 = a1;
  off_10029FF28 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10009C94C(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_10029FF20, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10009C98C()
{
  return 1;
}

void sub_10009C994()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10009C9B8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_10009C9F8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10009CA34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A43E8();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10009CA5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A43E8();
  return Error<>._code.getter(a1, v2);
}

unint64_t variable initialization expression of KTCloudRecords.types()
{
  return sub_10009CAA8((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10009CAA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_10006F03C(&qword_1002A00E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v17 = a1;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10009C678(v7, (uint64_t)&v18, &qword_1002A0118);
    v8 = v18;
    v9 = v19;
    result = sub_1000A2C14(v18, v19, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_100073F04(&v20, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10009CBF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_10006F03C(&qword_10029FCC8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v17 = a1;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10009C678(v7, (uint64_t)&v18, &qword_1002A0110);
    v8 = v18;
    v9 = v19;
    result = sub_1000A2C14(v18, v19, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000972F4(&v20, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10009CD48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C((uint64_t *)&unk_1002A00D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    sub_10006F1A0(v7, v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1000A2C14(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10009CE8C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice));
}

uint64_t sub_10009CE9C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn));
}

id sub_10009CEAC()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
}

uint64_t sub_10009CEBC()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo));
}

uint64_t sub_10009CECC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10009CF14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_10009CF6C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_10009CFDC;
}

void sub_10009CFDC(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

id sub_10009D048()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context);
}

id sub_10009D058()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database);
}

_QWORD *KTCloudRecords.__allocating_init(context:zone:database:hostInfo:delegate:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return KTCloudRecords.init(context:zone:database:hostInfo:delegate:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *KTCloudRecords.init(context:zone:database:hostInfo:delegate:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  void (*v34)(_QWORD *);
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  objc_super v44;
  char v45[24];

  v12 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types;
  v13 = v6;
  *(_QWORD *)&v6[v12] = sub_10009CAA8((uint64_t)_swiftEmptyArrayStorage);
  v40 = &v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate];
  swift_unknownObjectWeakInit(&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate], 0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v15 = v14;
  v16 = objc_allocWithZone((Class)CKRecordZoneID);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v19 = objc_msgSend(v16, "initWithZoneName:ownerName:databaseScope:", v17, v18, 2);

  v39 = type metadata accessor for KTCloudDevice();
  swift_unknownObjectRetain(a6);
  v20 = a1;
  v21 = v19;
  swift_unknownObjectRetain(a5);
  v22 = sub_100075FCC((uint64_t)v20, (uint64_t)v21, a5, a6);
  v38 = type metadata accessor for KTCloudOptIn();
  v23 = v20;
  v24 = v21;
  swift_unknownObjectRetain(a5);
  swift_unknownObjectRetain(a6);
  v25 = a4;
  v26 = sub_100084558(v23, v24, v25, a5, a6);
  v37 = type metadata accessor for KTCloudStaticKey();
  v27 = v23;
  v28 = v24;
  swift_unknownObjectRetain(a6);
  v29 = sub_1000AC0F4((uint64_t)v27, (uint64_t)v28, a6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context] = v27;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID] = v28;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo] = a5;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice] = v22;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn] = v26;
  swift_beginAccess(v40, v45, 1, 0);
  swift_unknownObjectWeakAssign(v40, a6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database] = v25;
  v30 = v27;
  v31 = v28;
  swift_unknownObjectRetain(a5);
  v32 = v25;
  swift_retain(v22);
  swift_retain(v26);

  v44.receiver = v13;
  v44.super_class = (Class)type metadata accessor for KTCloudRecords();
  v33 = objc_msgSendSuper2(&v44, "init");
  v42 = v39;
  v43 = &off_10029F3C0;
  v41[0] = v22;
  v34 = *(void (**)(_QWORD *))((swift_isaMask & *v33) + 0x188);
  swift_retain(v22);
  v35 = v33;
  v34(v41);
  sub_10006F0F8(v41);
  v42 = v38;
  v43 = &off_10029F898;
  v41[0] = v26;
  swift_retain(v26);
  v34(v41);
  sub_10006F0F8(v41);
  v42 = v37;
  v43 = &off_1002A0370;
  v41[0] = v29;
  swift_retain(v29);
  v34(v41);
  swift_release(v29);
  swift_release(v26);
  swift_release(v22);

  swift_unknownObjectRelease(a5);
  swift_unknownObjectRelease(a6);
  sub_10006F0F8(v41);
  return v35;
}

uint64_t type metadata accessor for KTCloudRecords()
{
  return objc_opt_self(_TtC13transparencyd14KTCloudRecords);
}

uint64_t KTCloudRecords.disableKTSyncabledKVSStore.getter()
{
  char v0;
  _QWORD v2[5];

  v2[3] = &type metadata for TransparencyFeatureFlags;
  v2[4] = sub_10009D5C0();
  LOBYTE(v2[0]) = 0;
  v0 = isFeatureEnabled(_:)(v2);
  sub_10006F0F8(v2);
  return v0 & 1;
}

unint64_t sub_10009D5C0()
{
  unint64_t result;

  result = qword_10029FF70;
  if (!qword_10029FF70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyFeatureFlags, &type metadata for TransparencyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10029FF70);
  }
  return result;
}

unint64_t KTCloudRecords.sysdiagnose()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 280))();
  v2 = sub_10006F03C(&qword_10029FF78);
  inited = swift_initStackObject(v2, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1002143C0;
  *(_QWORD *)(inited + 32) = 0x6E4974706FLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = sub_10006F03C(&qword_10029FF80);
  *(_QWORD *)(inited + 48) = v1;
  return sub_10009CBF8(inited);
}

uint64_t KTCloudRecords.updateSelfCloudDevice(withPushToken:tbsRegistrationData:applications:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 248))();
}

uint64_t KTCloudRecords.cloudDeviceNeedUpdate(withPushToken:tbsRegistrationData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = v4;
  v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice);
  v11 = *(void **)(v5 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo);
  if (v11)
  {
    v12 = objc_msgSend(v11, "osVersion");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 256))(a1, a2, a3, a4, v13, v15);
  swift_bridgeObjectRelease(v15);
  return v16 & 1;
}

uint64_t KTCloudRecords.fetchSyncedLoggableData(withPushToken:tbsRegistrationData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 264))();
}

uint64_t KTCloudRecords.cloudKTDevices()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 272))();
}

uint64_t KTCloudRecords.cloudDevices()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 280))();
}

uint64_t KTCloudRecords.addDevice(_:clientData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009E67C(a1, a2, a3, a4, &OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice);
}

uint64_t KTCloudRecords.removeDevice(_:clientData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 296))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.setOptInStateWithURIs(_:application:state:)(Swift::OpaquePointer _, Swift::String application, Swift::Bool state)
{
  uint64_t v3;

  (*(void (**)(void *, uint64_t, void *, Swift::Bool))(**(_QWORD **)(v3
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 352))(_._rawValue, application._countAndFlagsBits, application._object, state);
}

uint64_t KTCloudRecords.addOptInState(withURI:smtTimestamp:application:state:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 360))();
}

uint64_t KTCloudRecords.getOptInState(withUri:application:)()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 248))();
  if (!result)
  {
    v2 = sub_10009E280();
    swift_allocError(&type metadata for KTCloudRecordsError, v2, 0, 0);
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_10009E280()
{
  unint64_t result;

  result = qword_10029FF88;
  if (!qword_10029FF88)
  {
    result = swift_getWitnessTable(&unk_100214F08, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_10029FF88);
  }
  return result;
}

uint64_t KTCloudRecords.getAggregateOptInState(forApplication:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 264))();
  if (!result)
  {
    v2 = type metadata accessor for KTError(0);
    v3 = sub_10006F284((unint64_t *)&qword_10029FCB0, type metadata accessor for KTError, (uint64_t)&unk_10021578C);
    swift_allocError(v2, v3, 0, 0);
    v5 = swift_storeEnumTagMultiPayload(v4, v2, 10);
    return swift_willThrow(v5);
  }
  return result;
}

uint64_t KTCloudRecords.getAllOptInStates()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 272))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.clearOptInState(forURI:application:)(Swift::String_optional forURI, Swift::String application)
{
  sub_10009E67C(forURI.value._countAndFlagsBits, (uint64_t)forURI.value._object, application._countAndFlagsBits, (uint64_t)application._object, &OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn);
}

uint64_t sub_10009E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v5 + *a5) + 288))();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptInIntent(forApplication:state:overwrite:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::Bool state, Swift::Bool overwrite)
{
  uint64_t v4;

  (*(void (**)(uint64_t, void *, Swift::Bool, Swift::Bool))(**(_QWORD **)(v4
                                                                                  + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                                    + 328))(forApplication._countAndFlagsBits, forApplication._object, state, overwrite);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.deleteOptInIntent(forApplication:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication)
{
  uint64_t v2;

  (*(void (**)(uint64_t, void *))(**(_QWORD **)(v2 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                          + 336))(forApplication._countAndFlagsBits, forApplication._object);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptIn(forApplication:uris:state:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::OpaquePointer uris, Swift::Bool state)
{
  uint64_t v4;

  (*(void (**)(uint64_t, void *, void *, Swift::Bool))(**(_QWORD **)(v4
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 344))(forApplication._countAndFlagsBits, forApplication._object, uris._rawValue, state);
}

Swift::Void __swiftcall KTCloudRecords.clearDataStore(_:)(Swift::Bool a1)
{
  uint64_t v1;
  _BOOL8 v2;

  v2 = a1;
  (*(void (**)(void))(**(_QWORD **)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 456))();
  (*(void (**)(_BOOL8))(**(_QWORD **)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice)
                                 + 392))(v2);
}

Swift::Void __swiftcall KTCloudRecords.clearLocalCloudState()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  (*(void (**)(_QWORD))((swift_isaMask & *v0) + 0x158))(0);
  type metadata accessor for KTCKZone();
  v2 = sub_1000A56EC((uint64_t)*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context));
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID), "zoneName"));
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 128))(v4, v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
}

Swift::Bool __swiftcall KTCloudRecords.havePendingRecords()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Bool result;
  int64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, __n128);
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  _BYTE v33[32];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v33, 0, 0);
  v2 = *v1;
  v21 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v22 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(v2, 2);
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v22)
      goto LABEL_25;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_25;
      v19 = *(_QWORD *)(v21 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_25;
        v19 = *(_QWORD *)(v21 + 8 * v7);
        if (!v19)
        {
          v7 = v18 + 3;
          if (v18 + 3 >= v22)
            goto LABEL_25;
          v19 = *(_QWORD *)(v21 + 8 * v7);
          if (!v19)
          {
            v7 = v18 + 4;
            if (v18 + 4 >= v22)
              goto LABEL_25;
            v19 = *(_QWORD *)(v21 + 8 * v7);
            if (!v19)
              break;
          }
        }
      }
    }
LABEL_24:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_100072ED4(*(_QWORD *)(v2 + 56) + 40 * v10, (uint64_t)v31);
    *(_QWORD *)&v30 = v13;
    *((_QWORD *)&v30 + 1) = v12;
    v27 = v30;
    v28[0] = v31[0];
    v28[1] = v31[1];
    v29 = v32;
    sub_100072ED4((uint64_t)v28, (uint64_t)v23);
    sub_100073F04(v23, (uint64_t)v24);
    v14 = v25;
    v15 = v26;
    sub_1000754FC(v24, v25);
    v16 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 56);
    v17 = swift_bridgeObjectRetain(v12);
    v8 |= v16(v14, v15, v17);
    sub_10006F0F8(v24);
    result = sub_100081AB0((uint64_t)&v27, (uint64_t *)&unk_10029FF98);
  }
  v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_25:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return v8 & 1;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v22)
      goto LABEL_25;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_10009EFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    sub_100072ED4(*(_QWORD *)(a2 + 56) + 40 * i, (uint64_t)v21);
    *(_QWORD *)&v20 = v17;
    *((_QWORD *)&v20 + 1) = v16;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    v19 = v22;
    swift_bridgeObjectRetain(v16);
    sub_10009F62C((uint64_t)&v23, (uint64_t)v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v23);
      sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
      swift_release(a2);
      return;
    }
    sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
    if (v7)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v8)
      goto LABEL_26;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (!v13)
      break;
LABEL_17:
    v7 = (v13 - 1) & v13;
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 2;
  if (v9 + 2 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 3;
  if (v9 + 3 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 4;
  if (v9 + 4 >= v8)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_26;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

void sub_10009F1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    sub_100072ED4(*(_QWORD *)(a2 + 56) + 40 * i, (uint64_t)v21);
    *(_QWORD *)&v20 = v16;
    *((_QWORD *)&v20 + 1) = v17;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    v19 = v22;
    swift_bridgeObjectRetain(v17);
    sub_10009FDF4((uint64_t)&v23, (uint64_t)v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v23);
      sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
      swift_release(a2);
      return;
    }
    sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
    if (v7)
      goto LABEL_4;
LABEL_5:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v8)
      goto LABEL_25;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_25;
      v13 = *(_QWORD *)(v4 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_25;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v8)
            goto LABEL_25;
          v13 = *(_QWORD *)(v4 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v8)
  {
LABEL_25:
    swift_release(a2);
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_25;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

uint64_t KTCloudRecords.pendingRecords()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  char v24[32];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v24, 0, 0);
  v2 = *v1;
  v23 = _swiftEmptyArrayStorage;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n(v2, 2);
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    sub_100072ED4(*(_QWORD *)(v2 + 56) + 40 * i, (uint64_t)v21);
    *(_QWORD *)&v20 = v16;
    *((_QWORD *)&v20 + 1) = v15;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    v19 = v22;
    swift_bridgeObjectRetain(v15);
    sub_10009F62C((uint64_t)&v23, (uint64_t)v18);
    sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    if (!v12)
      break;
LABEL_17:
    v6 = (v12 - 1) & v12;
  }
  v13 = v8 + 1;
  if (v8 + 1 >= v7)
    goto LABEL_24;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 2;
  if (v8 + 2 >= v7)
    goto LABEL_24;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 3;
  if (v8 + 3 >= v7)
    goto LABEL_24;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 4;
  if (v8 + 4 >= v7)
  {
LABEL_24:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v23;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v8 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  swift_bridgeObjectRelease(v23);
  sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
  result = swift_release(v2);
  __break(1u);
  return result;
}

uint64_t sub_10009F62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[4];
  uint64_t v19;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100072ED4(a2 + 16, (uint64_t)v20);
  sub_100073F04(v20, (uint64_t)v21);
  v2 = v22;
  v3 = v23;
  sub_1000754FC(v21, v22);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  v18[2] = v21;
  v5 = sub_10009F888((void (*)(uint64_t *__return_ptr, id *))sub_1000A442C, (uint64_t)v18, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  sub_10009FA20(v6, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000A3A60);
  if (qword_1002A5B40 != -1)
    swift_once(&qword_1002A5B40, sub_10009C834);
  v7 = type metadata accessor for Logger(0);
  sub_10006F07C(v7, (uint64_t)qword_1002A5B48);
  swift_bridgeObjectRetain(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v14 = Array.description.getter(v5, v13);
    v16 = v15;
    v24 = sub_10006C790(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "prepare pending records %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  return sub_10006F0F8(v21);
}

void *sub_10009F888(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v18;
  id v19;
  unint64_t v20;

  v4 = v3;
  v20 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v14 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10009FA20(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t KTCloudRecords.deletedRecords()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _BYTE v24[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v24, 0, 0);
  v2 = *v1;
  v23 = _swiftEmptyArrayStorage;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(v2, 2);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7)
      goto LABEL_23;
    v16 = *(_QWORD *)(v3 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v7)
        goto LABEL_23;
      v16 = *(_QWORD *)(v3 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v7)
          goto LABEL_23;
        v16 = *(_QWORD *)(v3 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v7)
            goto LABEL_23;
          v16 = *(_QWORD *)(v3 + 8 * v9);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v11);
    v14 = *v12;
    v13 = v12[1];
    sub_100072ED4(*(_QWORD *)(v2 + 56) + 40 * v11, (uint64_t)v21);
    *(_QWORD *)&v20 = v14;
    *((_QWORD *)&v20 + 1) = v13;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    v19 = v22;
    swift_bridgeObjectRetain(v13);
    sub_10009FDF4((uint64_t)&v23, (uint64_t)v18);
    result = sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
  }
  v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v23;
  }
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v7)
      goto LABEL_23;
    v16 = *(_QWORD *)(v3 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10009FDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18[2];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  sub_100072ED4(a2 + 16, (uint64_t)v19);
  sub_100073F04(v19, (uint64_t)v20);
  v2 = v21;
  v3 = v22;
  sub_1000754FC(v20, v21);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  swift_bridgeObjectRetain(v4);
  sub_10009FA20(v5, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000A3C74);
  if (qword_1002A5B40 != -1)
    swift_once(&qword_1002A5B40, sub_10009C834);
  v6 = type metadata accessor for Logger(0);
  sub_10006F07C(v6, (uint64_t)qword_1002A5B48);
  swift_bridgeObjectRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
    v13 = Array.description.getter(v4, v12);
    v15 = v14;
    v17 = sub_10006C790(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "prepare deleted records %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  return sub_10006F0F8(v20);
}

Class sub_1000A0028(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, __n128), unint64_t *a4, _QWORD *a5)
{
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  Class isa;
  char v16[24];

  v9 = &a1[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types];
  swift_beginAccess(&a1[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types], v16, 0, 0);
  v10 = *(_QWORD *)v9;
  v11 = a1;
  v12 = swift_bridgeObjectRetain(v10);
  v13 = a3(_swiftEmptyArrayStorage, v10, v12);

  swift_bridgeObjectRelease(v10);
  sub_10006D6DC(0, a4, a5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  return isa;
}

uint64_t KTCloudRecords.cloudKitZones()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  v1 = sub_10006F03C(&qword_10029F870);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100214910;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
  *(_QWORD *)(v2 + 32) = v3;
  v6 = v2;
  specialized Array._endMutation()(v2);
  v4 = v3;
  return v6;
}

uint64_t sub_1000A020C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE v11[40];

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_1000754FC(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v8 = v7;
  sub_100072ED4((uint64_t)a1, (uint64_t)v11);
  swift_beginAccess(v2 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types, v10, 33, 0);
  sub_1000A02B4((uint64_t)v11, v6, v8);
  return swift_endAccess(v10);
}

uint64_t sub_1000A02B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  __int128 v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100073F04((__int128 *)a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000A33F0(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_100081AB0(a1, &qword_10029FFA8);
    sub_1000A2CBC(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_100081AB0((uint64_t)v11, &qword_10029FFA8);
  }
}

uint64_t sub_1000A0388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[24];

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  result = swift_beginAccess(v7, v12, 0, 0);
  v9 = *v7;
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v9);
    v10 = sub_1000A2C14(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
    if ((v11 & 1) != 0)
    {
      sub_100072ED4(*(_QWORD *)(v9 + 56) + 40 * v10, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

Swift::Bool __swiftcall KTCloudRecords.updatedRecord(withCkrecord:)(CKRecord withCkrecord)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;

  v3 = CKRecord.recordType.getter(withCkrecord.super.isa);
  v5 = v4;
  (*(void (**)(__int128 *__return_ptr))((swift_isaMask & *v1) + 0x190))(&v16);
  if (v17)
  {
    swift_bridgeObjectRelease(v5);
    sub_100073F04(&v16, (uint64_t)v18);
    v6 = v19;
    v7 = v20;
    sub_1000754FC(v18, v19);
    v8 = (*(uint64_t (**)(Class, uint64_t, uint64_t))(v7 + 24))(withCkrecord.super.isa, v6, v7);
    sub_10006F0F8(v18);
  }
  else
  {
    sub_100081AB0((uint64_t)&v16, &qword_10029FFA8);
    if (qword_1002A5B40 != -1)
      swift_once(&qword_1002A5B40, sub_10009C834);
    v9 = type metadata accessor for Logger(0);
    sub_10006F07C(v9, (uint64_t)qword_1002A5B48);
    swift_bridgeObjectRetain(v5);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v18[0] = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(v5);
      *(_QWORD *)&v16 = sub_10006C790(v3, v5, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, (char *)&v16 + 8, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "no store for ck record of type %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v5, 2);
    }
    v8 = 0;
  }
  return v8 & 1;
}

Swift::Void __swiftcall KTCloudRecords.deleteRecord(withCkrecord:)(CKRecord withCkrecord)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = CKRecord.recordType.getter(withCkrecord.super.isa);
  v5 = v4;
  (*(void (**)(__int128 *__return_ptr, uint64_t))((swift_isaMask & *v1) + 0x190))(&v8, v3);
  swift_bridgeObjectRelease(v5);
  if (v9)
  {
    sub_100073F04(&v8, (uint64_t)v10);
    v6 = v10[4];
    sub_1000754FC(v10, v10[3]);
    v7 = -[objc_class recordID](withCkrecord.super.isa, "recordID");
    (*(void (**)(void))(v6 + 32))();

    sub_10006F0F8(v10);
  }
  else
  {
    sub_100081AB0((uint64_t)&v8, &qword_10029FFA8);
  }
}

Swift::Void __swiftcall KTCloudRecords.deleteRecordID(withCkrecordID:)(CKRecordID withCkrecordID)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess(v2, v5, 0, 0);
  v3 = *v2;
  swift_bridgeObjectRetain(v3);
  sub_1000A3FA0(v4, (void (*)(uint64_t, uint64_t, _BYTE *, __n128))sub_1000A2C10);
  swift_bridgeObjectRelease(v3);
}

Swift::Void __swiftcall KTCloudRecords.recordUpdateCloudState(withType:records:newState:)(Swift::String withType, Swift::OpaquePointer records, Swift::String newState)
{
  _QWORD *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  object = newState._object;
  countAndFlagsBits = newState._countAndFlagsBits;
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *))((swift_isaMask & *v3) + 0x190))(&v9, withType._countAndFlagsBits, withType._object);
  if (v10)
  {
    sub_100073F04(&v9, (uint64_t)v11);
    v7 = v12;
    v8 = v13;
    sub_1000754FC(v11, v12);
    (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(v8 + 64))(records._rawValue, countAndFlagsBits, object, v7, v8);
    sub_10006F0F8(v11);
  }
  else
  {
    sub_100081AB0((uint64_t)&v9, &qword_10029FFA8);
  }
}

uint64_t sub_1000A0B14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = 0;
  if (a2 >> 60 != 15)
  {
    sub_10006D6DC(0, (unint64_t *)&unk_10029FFB0, NSKeyedUnarchiver_ptr);
    v5 = sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    sub_10006F1A0(a1, a2);
    v2 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v5, a1, a2, v5);
    sub_10006F218(a1, a2);
  }
  return v2;
}

uint64_t sub_1000A0BD8(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v10;

  if (!a1)
    return 0;
  v2 = (void *)objc_opt_self(NSKeyedArchiver);
  v10 = 0;
  v3 = a1;
  v4 = objc_msgSend(v2, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v10);
  v5 = v10;
  if (!v4)
  {
    v7 = v5;
    v8 = _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    swift_errorRelease(v8);
    return 0;
  }
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

_QWORD *KTCloudRecords.evaluateKTLogData(_:application:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v3;
  v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x130))();
  if (!v4)
  {
    v10 = v9;
    if (qword_1002A5B40 != -1)
      swift_once(&qword_1002A5B40, sub_10009C834);
    v11 = type metadata accessor for Logger(0);
    sub_10006F07C(v11, (uint64_t)qword_1002A5B48);
    swift_bridgeObjectRetain_n(v10, 2);
    v12 = swift_bridgeObjectRetain_n(a1, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v36 = a2;
      v15 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v40 = v35;
      *(_DWORD *)v15 = 136315394;
      v37 = a3;
      v16 = sub_10006D6DC(0, (unint64_t *)&qword_10029FFC0, KTOptInState_ptr);
      swift_bridgeObjectRetain(v10);
      type = v14;
      v18 = Array.description.getter(v17, v16);
      v20 = v19;
      swift_bridgeObjectRelease(v10);
      v38 = sub_10006C790(v18, v20, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(v10, 2);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(a1);
      v21 = sub_10006F03C(&qword_10029FFC8);
      v22 = Dictionary.description.getter(a1, &type metadata for String, v21, &protocol witness table for String);
      v24 = v23;
      swift_bridgeObjectRelease(a1);
      v38 = sub_10006C790(v22, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease_n(a1, 2);
      v25 = v24;
      a3 = v37;
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v13, type, "KTCloudRecords: evaluateKTLogData: optInRecords: %s uriToSMT: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      v26 = v15;
      a2 = v36;
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease_n(v10, 2);
    }
    type metadata accessor for KTOptIOValidator();
    swift_bridgeObjectRetain(a1);
    v27 = KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(v10, a1);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)((char *)v5
                                                                    + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                      + 312))(a2, a3);
    if (v28 != 2)
    {
      v29 = v28 & 1;
      v30 = Logger.logObject.getter(v28);
      v31 = static os_log_type_t.info.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v32 = 67109120;
        LODWORD(v40) = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v32 + 4, v32 + 8);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "KTCloudRecords: intented state %{BOOL}d", v32, 8u);
        swift_slowDealloc(v32, -1, -1);
      }

      v28 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v27) + 0xA0))(v29);
    }
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v27) + 0xB8))(v28);

  }
  return v3;
}

BOOL KTCloudRecords.enforceCKOptInRecords.getter()
{
  char v0;
  _QWORD v2[5];

  v2[3] = &type metadata for TransparencyFeatureFlags;
  v2[4] = sub_10009D5C0();
  LOBYTE(v2[0]) = 1;
  v0 = isFeatureEnabled(_:)(v2);
  sub_10006F0F8(v2);
  return (v0 & 1) == 0;
}

void KTCloudRecords.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTCloudRecords", 28, "init()", 6, 0);
  __break(1u);
}

id KTCloudRecords.__deallocating_deinit()
{
  return sub_1000A2B94(type metadata accessor for KTCloudRecords);
}

void sub_1000A1394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1000A1418()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;

  sub_10006F1A0(v3, v1);
  sub_10006F1A0(v3, v1);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v3, v1, (int)v3);
  sub_10006F22C(v3, v1);
  v5 = sub_10006F284((unint64_t *)&unk_10029FFD0, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 81) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
    *(_OWORD *)(v4 - 128) = xmmword_1002143C0;
    do
    {
      v8 = *(_BYTE *)(v4 - 82);
      v9 = sub_10006F03C((uint64_t *)&unk_10029F390);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 128);
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(1479684133, 0xE400000000000000, v10);
      v13 = v12;
      *(_QWORD *)(v4 - 104) = v6;
      *(_QWORD *)(v4 - 96) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);
      v6 = *(_QWORD *)(v4 - 104);
      v7 = *(_QWORD *)(v4 - 96);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
    }
    while (*(_BYTE *)(v4 - 81) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v2, v0);
  return v6;
}

uint64_t sub_1000A159C()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records));
}

uint64_t sub_1000A15AC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries, v3, 0, 0);
  return *v1;
}

uint64_t sub_1000A15F0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_1000A1638(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t variable initialization expression of KTCloudRecordsCache.uriVRFHash()
{
  return 0;
}

uint64_t sub_1000A1688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash, v4, 0, 0);
  v2 = *(_QWORD *)v1;
  sub_10006F18C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_1000A16E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_10006F218(v6, v7);
}

uint64_t (*sub_1000A173C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000A1780()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000A17C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000A1818(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash, a1, 33, 0);
  return j_j__swift_endAccess;
}

id KTCloudRecordsCache.__allocating_init(records:)(uint64_t a1)
{
  objc_class *v1;
  _BYTE *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  id v8;
  objc_super v10;
  _BYTE v11[24];

  v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  v4 = &v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)v4 = xmmword_100214E80;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess(v4, v11, 1, 0);
  v5 = *(_QWORD *)v4;
  v6 = *((_QWORD *)v4 + 1);
  *(_OWORD *)v4 = xmmword_100214E80;
  v7 = v3;
  swift_unknownObjectRetain(a1);
  sub_10006F218(v5, v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_10009CD48((uint64_t)_swiftEmptyArrayStorage);

  v10.receiver = v7;
  v10.super_class = v1;
  v8 = objc_msgSendSuper2(&v10, "init");
  swift_unknownObjectRelease(a1);
  return v8;
}

id KTCloudRecordsCache.init(records:)(uint64_t a1)
{
  id v2;

  v2 = sub_1000A4168(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t KTCloudRecordsCache.setWithUriVRFHash(_:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  void (*v5)(uint64_t, unint64_t);
  unint64_t v6;

  v5 = *(void (**)(uint64_t, unint64_t))((swift_isaMask & *v2) + 0x90);
  sub_10006F1A0(a1, a2);
  v5(a1, a2);
  v6 = sub_10009CD48((uint64_t)_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(unint64_t))((swift_isaMask & *v2) + 0xA8))(v6);
}

id KTCloudRecordsCache.disableKTSyncabledKVSStore.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records), "disableKTSyncabledKVSStore");
}

id KTCloudRecordsCache.fetchSyncedLoggableData(byPushToken:registrationData:)()
{
  uint64_t v0;
  void *v1;
  Class isa;
  Class v3;
  id v4;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = Data._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v1, "fetchSyncedLoggableDataWithPushToken:tbsRegistrationData:", isa, v3);

  return v4;
}

void KTCloudRecordsCache.fetchSyncedLoggableData(byDeviceIdHash:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t i;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;

  v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
  v6 = sub_10006F1A0(a1, a2);
  v7 = v5(v6);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = sub_1000A2C14(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454);
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8));
      v10 = v7;
LABEL_26:
      swift_bridgeObjectRelease(v10);
      sub_10006F22C(a1, a2);
      return;
    }
  }
  swift_bridgeObjectRelease(v7);
  v11 = sub_10006F22C(a1, a2);
  if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70))(v11) & 1) == 0)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x78))(1);
    if (qword_1002A5B40 != -1)
      swift_once(&qword_1002A5B40, sub_10009C834);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10006F07C(v17, (uint64_t)qword_1002A5B48);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "pulling all devices from CloudRecords for this account", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records), "cloudKTDevices");
    v23 = sub_10006D6DC(0, &qword_1002A0000, KTLoggableData_ptr);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0)
        v34 = v24;
      else
        v34 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      v25 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v24);
      if (v25)
        goto LABEL_16;
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v25)
      {
LABEL_16:
        if (v25 < 1)
        {
          __break(1u);
          return;
        }
        v26 = *(void (**)(void))((swift_isaMask & *v2) + 0xE0);
        swift_bridgeObjectRetain(v24);
        for (i = 0; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001) != 0)
            v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
          else
            v28 = *(id *)(v24 + 8 * i + 32);
          v29 = v28;
          v26();

        }
        swift_bridgeObjectRelease_n(v24, 2);
        goto LABEL_23;
      }
    }
    v35 = swift_bridgeObjectRelease(v24);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "no records", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    return;
  }
  if (qword_1002A5B40 != -1)
    swift_once(&qword_1002A5B40, sub_10009C834);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10006F07C(v12, (uint64_t)qword_1002A5B48);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "already cached, skipping refetch", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

LABEL_23:
  v30 = sub_10006F1A0(a1, a2);
  v31 = v5(v30);
  if (*(_QWORD *)(v31 + 16))
  {
    v32 = sub_1000A2C14(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454);
    if ((v33 & 1) != 0)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32));
      v10 = v31;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease(v31);
  sub_10006F22C(a1, a2);
}

id sub_1000A21CC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id result;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  int v20;
  _DWORD *v21;
  _BYTE v22[16];
  uint64_t v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  _DWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;

  v29 = type metadata accessor for Data.Iterator(0);
  v3 = *(_QWORD *)(v29 - 8);
  v4 = __chkstk_darwin(v29);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = objc_msgSend(a1, "deviceID");
  if (result)
  {
    v12 = result;
    v28 = v6;
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v15 = v14;

    (*(void (**)(void *))((swift_isaMask & *v1) + 0xE8))(a1);
    if (qword_1002A5B40 != -1)
      swift_once(&qword_1002A5B40, sub_10009C834);
    v16 = sub_10006F07C(v7, (uint64_t)qword_1002A5B48);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
    sub_10006F1A0(v13, v15);
    v17 = a1;
    sub_10006F1A0(v13, v15);
    v18 = v17;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      v25 = v3;
      v26 = v19;
      v24 = v20;
      v21 = (_DWORD *)swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v30 = v23;
      v27 = v21;
      *v21 = 136315394;
      __asm { BR              X9 }
    }
    sub_10006F22C(v13, v15);
    sub_10006F22C(v13, v15);
    sub_10006F22C(v13, v15);

    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t sub_1000A28C0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *);
  void (*v26)(_BYTE *, _QWORD);
  uint64_t *v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  uint64_t v33;

  v2 = v1;
  result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88))();
  if (v5 >> 60 != 15)
  {
    v6 = result;
    v7 = v5;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "computeHashesForSalt:", isa);

    v9 = objc_msgSend(a1, "deviceIdHash");
    if (v9)
    {
      v10 = v9;
      v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

      v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
      v15 = sub_10006F1A0(v11, v13);
      v16 = v14(v15);
      if (*(_QWORD *)(v16 + 16)
        && (v17 = sub_1000A2C14(v11, v13, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454), (v18 & 1) != 0))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain(v19);
      }
      else
      {
        v19 = (unint64_t)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v16);
      sub_10006F22C(v11, v13);
      v33 = v19;
      v20 = a1;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v22 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v21 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v21 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23);
      v24 = v33;
      v25 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v2) + 0xB0);
      sub_10006F1A0(v11, v13);
      v26 = (void (*)(_BYTE *, _QWORD))v25(v32);
      v28 = v27;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
      v31 = *v28;
      *v28 = 0x8000000000000000;
      sub_1000A3544(v24, v11, v13, isUniquelyReferenced_nonNull_native);
      v30 = *v28;
      *v28 = v31;
      swift_bridgeObjectRelease(v30);
      sub_10006F22C(v11, v13);
      v26(v32, 0);
      sub_10006F218(v6, v7);
      return sub_10006F22C(v11, v13);
    }
    else
    {
      return sub_10006F218(v6, v7);
    }
  }
  return result;
}

void KTCloudRecordsCache.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTCloudRecordsCache", 33, "init()", 6, 0);
  __break(1u);
}

id KTCloudRecordsCache.__deallocating_deinit()
{
  return sub_1000A2B94(type metadata accessor for KTCloudRecordsCache);
}

id sub_1000A2B94(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000A2C14(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

double sub_1000A2CBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1000A2C14(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000A36C4();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100073F04((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_10007458C(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

Swift::Int sub_1000A2DC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_1002A00E0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100073F04(v26, (uint64_t)v40);
    }
    else
    {
      sub_100072ED4((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100073F04(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000A30E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C((uint64_t *)&unk_1002A00D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v35 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v35 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v35 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    v36 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_10006F1A0(v36, v32);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v37);
    Data.hash(into:)(v37, v36, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v20 = v36;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v20 = v36;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19) = v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1000A33F0(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1000A2C14(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        sub_10006F0F8(v19);
        sub_100073F04(a1, (uint64_t)v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000A36C4();
      goto LABEL_7;
    }
    sub_1000A2DC4(v15, a4 & 1);
    v20 = sub_1000A2C14(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100073D2C);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100074A40(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000A3544(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000A2C14(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000A38AC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return sub_10006F1A0(a2, a3);
    }
    goto LABEL_14;
  }
  sub_1000A30E8(v15, a4 & 1);
  v21 = sub_1000A2C14(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10007D454);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

void sub_1000A36C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_10006F03C(&qword_1002A00E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_100072ED4(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100073F04(v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000A38AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006F03C((uint64_t *)&unk_1002A00D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_10006F1A0(v19, *((unint64_t *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000A3A60(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A4498((unint64_t *)&unk_1002A0100, &qword_1002A00F8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006F03C(&qword_1002A00F8);
          v13 = sub_1000A3E88(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000A3C74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A4498(&qword_1002A00F0, &qword_1002A00E8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006F03C(&qword_1002A00E8);
          v13 = sub_1000A3EE0(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000A3E88(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000A3F34(v6, a2, a3);
  return sub_1000A3EDC;
}

void (*sub_1000A3EE0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100091D64(v6, a2, a3);
  return sub_1000A3EDC;
}

void (*sub_1000A3F34(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000A44DC;
  }
  __break(1u);
  return result;
}

void sub_1000A3FA0(uint64_t a1, void (*a2)(uint64_t, uint64_t, _BYTE *, __n128))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD v18[2];
  _BYTE v19[40];
  uint64_t v20;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7)
      goto LABEL_23;
    v16 = *(_QWORD *)(v20 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v7)
        goto LABEL_23;
      v16 = *(_QWORD *)(v20 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v7)
          goto LABEL_23;
        v16 = *(_QWORD *)(v20 + 8 * v8);
        if (!v16)
        {
          v8 = v15 + 3;
          if (v15 + 3 >= v7)
            goto LABEL_23;
          v16 = *(_QWORD *)(v20 + 8 * v8);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v16 - 1) & v16;
    v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    sub_100072ED4(*(_QWORD *)(a1 + 56) + 40 * v10, (uint64_t)v19);
    v18[0] = v12;
    v18[1] = v13;
    v14 = swift_bridgeObjectRetain(v13);
    a2(v12, v13, v19, v14);
    sub_100081AB0((uint64_t)v18, (uint64_t *)&unk_10029FF98);
  }
  v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v20 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v7)
      goto LABEL_23;
    v16 = *(_QWORD *)(v20 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

id sub_1000A4168(uint64_t a1)
{
  _BYTE *v1;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  objc_super v8;
  _BYTE v9[24];

  v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  v3 = &v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)v3 = xmmword_100214E80;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess(v3, v9, 1, 0);
  v4 = *(_QWORD *)v3;
  v5 = *((_QWORD *)v3 + 1);
  *(_OWORD *)v3 = xmmword_100214E80;
  v6 = v1;
  swift_unknownObjectRetain(a1);
  sub_10006F218(v4, v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_10009CD48((uint64_t)_swiftEmptyArrayStorage);

  v8.receiver = v6;
  v8.super_class = (Class)type metadata accessor for KTCloudRecordsCache();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t type metadata accessor for KTCloudRecordsCache()
{
  return objc_opt_self(_TtC13transparencyd19KTCloudRecordsCache);
}

unint64_t sub_1000A4264()
{
  unint64_t result;

  result = qword_1002A0008;
  if (!qword_1002A0008)
  {
    result = swift_getWitnessTable(&unk_100214EA0, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_1002A0008);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KTCloudRecordsError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for KTCloudRecordsError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000A4340 + 4 * byte_100214E94[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000A4360 + 4 * byte_100214E99[v4]))();
}

_BYTE *sub_1000A4340(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000A4360(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A4368(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A4370(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A4378(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A4380(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KTCloudRecordsError()
{
  return &type metadata for KTCloudRecordsError;
}

uint64_t sub_1000A439C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = a3[3];
  v6 = a3[4];
  sub_1000754FC(a3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v6);
}

unint64_t sub_1000A43E8()
{
  unint64_t result;

  result = qword_1002A00C8;
  if (!qword_1002A00C8)
  {
    result = swift_getWitnessTable(&unk_100214F90, &type metadata for KTCloudRecordsError);
    atomic_store(result, (unint64_t *)&qword_1002A00C8);
  }
  return result;
}

uint64_t sub_1000A442C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD **)(v2 + 16);
  v5 = *a1;
  v6 = v4[3];
  v7 = v4[4];
  sub_1000754FC(v4, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 72))(v5, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_1000A4498(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10006FD6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000A44E0()
{
  return &qword_1002A0120;
}

uint64_t sub_1000A44EC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_1002A0120, v2, 0, 0);
  v0 = qword_1002A0120;
  swift_bridgeObjectRetain(off_1002A0128);
  return v0;
}

uint64_t sub_1000A45A0(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_1002A0120, v6, 1, 0);
  v4 = off_1002A0128;
  qword_1002A0120 = a1;
  off_1002A0128 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000A4658(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_1002A0120, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000A4698()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps);
}

uint64_t sub_1000A46A8()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  Class isa;
  Class v4;
  id v5;

  result = (uint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps), "cloudRecords");
  if (result)
  {
    v2 = (void *)result;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v4 = Data._bridgeToObjectiveC()().super.isa;
    v5 = objc_msgSend(v2, "fetchSyncedLoggableDataWithPushToken:tbsRegistrationData:", isa, v4);
    swift_unknownObjectRelease(v2);

    if (v5)
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1000A4770()
{
  char *v0;
  id v1;
  uint64_t v2;
  char *v3;
  NSString v4;
  void *v5;
  _QWORD v7[5];
  uint64_t v8;

  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps], "cloudRecords");
  swift_unknownObjectRelease(v1);
  if (v1)
  {
    v2 = swift_allocObject(&unk_100242250, 24, 7);
    *(_QWORD *)(v2 + 16) = v0;
    v3 = v0;
    v4 = String._bridgeToObjectiveC()();
    v7[4] = sub_1000A48B0;
    v8 = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100087804;
    v7[3] = &unk_100242268;
    v5 = _Block_copy(v7);
    v1 = objc_msgSend((id)objc_opt_self(KTResultOperation), "named:withBlockTakingSelf:", v4, v5);

    _Block_release(v5);
    swift_release(v8);
  }
  return v1;
}

uint64_t sub_1000A488C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A48B0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = *(char **)(v0 + 16);
  v2 = swift_allocObject(&unk_1002422A0, 24, 7);
  *(_QWORD *)(v2 + 16) = sub_10007B020((uint64_t)_swiftEmptyArrayStorage);
  v3 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps], "smDataStore");
  v4 = swift_allocObject(&unk_1002422C8, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  aBlock[4] = sub_1000A4FC0;
  v13 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A4D08;
  aBlock[3] = &unk_1002422E0;
  v5 = _Block_copy(aBlock);
  v6 = v13;
  v7 = v1;
  swift_retain(v2);
  swift_release(v6);
  objc_msgSend(v3, "fetchDeviceSignature:complete:", 0, v5);
  _Block_release(v5);
  swift_unknownObjectRelease(v3);
  swift_beginAccess(v2 + 16, aBlock, 0, 0);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = v7;
  swift_bridgeObjectRetain(v8);
  sub_1000A5348(v10, (uint64_t)v9);

  swift_bridgeObjectRelease(v8);
  return swift_release(v2);
}

void sub_1000A4A1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t i;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v30 = a1;
  v12 = *(_QWORD *)(a1 + 64);
  v11 = a1 + 64;
  v10 = v12;
  v31 = _swiftEmptyArrayStorage;
  v13 = 1 << *(_BYTE *)(v11 - 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v10;
  v28 = v11;
  v29 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v10) != 0)
    goto LABEL_27;
LABEL_6:
  v16 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v16 < v29)
    {
      v17 = *(_QWORD *)(v28 + 8 * v16);
      ++v9;
      if (v17)
        goto LABEL_21;
      v9 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_28;
      v17 = *(_QWORD *)(v28 + 8 * v9);
      if (v17)
        goto LABEL_21;
      v9 = v16 + 2;
      if (v16 + 2 >= v29)
        goto LABEL_28;
      v17 = *(_QWORD *)(v28 + 8 * v9);
      if (v17)
        goto LABEL_21;
      v9 = v16 + 3;
      if (v16 + 3 >= v29)
        goto LABEL_28;
      v17 = *(_QWORD *)(v28 + 8 * v9);
      if (v17)
      {
LABEL_21:
        v15 = (v17 - 1) & v17;
        for (i = __clz(__rbit64(v17)) + (v9 << 6); ; i = v26 | (v9 << 6))
        {
          v20 = *(id *)(*(_QWORD *)(v30 + 56) + 8 * i);
          v21 = objc_msgSend(v20, "uploadedAt");
          if (v21)
          {
            v22 = v21;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

            (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
            {
              sub_1000A5638((uint64_t)v8);

              if (!v15)
                goto LABEL_6;
              goto LABEL_27;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
          }
          v23 = sub_1000A5638((uint64_t)v8);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
          v24 = v31[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
          v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v20);
          specialized ContiguousArray._endMutation()(v25);
          if (!v15)
            goto LABEL_6;
LABEL_27:
          v26 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
        }
      }
      v18 = v16 + 4;
      if (v18 < v29)
      {
        v17 = *(_QWORD *)(v28 + 8 * v18);
        if (v17)
        {
          v9 = v18;
          goto LABEL_21;
        }
        while (1)
        {
          v9 = v18 + 1;
          if (__OFADD__(v18, 1))
            goto LABEL_30;
          if (v9 >= v29)
            break;
          v17 = *(_QWORD *)(v28 + 8 * v9);
          ++v18;
          if (v17)
            goto LABEL_21;
        }
      }
    }
LABEL_28:
    swift_release(v30);
    return;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_1000A4D08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  unint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_1000A55FC();
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String, v7, &protocol witness table for String);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000A4D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A4DA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000A4DDC(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000A4E28(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for KTFixupRegistrationUpload()
{
  return objc_opt_self(_TtC13transparencyd25KTFixupRegistrationUpload);
}

void sub_1000A4ED8()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTFixupRegistrationUpload", 39, "init()", 6, 0);
  __break(1u);
}

id sub_1000A4F30()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A4F70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A4F94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4FC0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[32];

  if (result)
  {
    v2 = *(_QWORD **)(v1 + 16);
    v3 = *(_QWORD **)(v1 + 24);
    swift_bridgeObjectRetain(result);
    sub_1000A4A1C(v4);
    v6 = v5;
    v44 = v2;
    if (v5 >> 62)
    {
LABEL_29:
      if (v6 < 0)
        v40 = v6;
      else
        v40 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v6, 2);
      v7 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v6);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v5);
      if (v7)
      {
LABEL_4:
        v41 = v6;
        v42 = v3 + 2;
        v46 = v6 & 0xC000000000000001;
        v8 = 4;
        v43 = v7;
        do
        {
          if (v46)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
          else
            v9 = *(id *)(v6 + 8 * v8);
          v10 = v9;
          v11 = v8 - 3;
          if (__OFADD__(v8 - 4, 1))
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          v12 = objc_msgSend(v9, "tbsKTIDSRegistrationData");
          v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
          v15 = v14;

          v16 = objc_msgSend(v10, "pushToken");
          if (v16)
          {
            v17 = v16;
            v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
            v20 = v19;

            v3 = v44;
            if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))((swift_isaMask & *v44)
                                                                                                  + 0x58))(v18, v20, v13, v15) & 1) != 0)
            {
              swift_beginAccess(v42, v47, 33, 0);
              sub_10006F1A0(v18, v20);
              v45 = v15;
              sub_10006F1A0(v13, v15);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v42);
              v3 = (_QWORD *)*v42;
              *v42 = 0x8000000000000000;
              v23 = sub_10007D3F0(v18, v20);
              v24 = v3[2];
              v25 = (v22 & 1) == 0;
              v26 = v24 + v25;
              if (__OFADD__(v24, v25))
                goto LABEL_27;
              v6 = v22;
              if (v3[3] >= v26)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  v29 = v41;
                  if ((v22 & 1) == 0)
                    goto LABEL_23;
                }
                else
                {
                  sub_10007E0D0();
                  v29 = v41;
                  if ((v6 & 1) == 0)
                    goto LABEL_23;
                }
              }
              else
              {
                sub_10007DDE4(v26, isUniquelyReferenced_nonNull_native);
                v27 = sub_10007D3F0(v18, v20);
                if ((v6 & 1) != (v28 & 1))
                {
                  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
                  __break(1u);
                  return result;
                }
                v23 = v27;
                v29 = v41;
                if ((v6 & 1) == 0)
                {
LABEL_23:
                  v3[(v23 >> 6) + 8] |= 1 << v23;
                  v34 = (uint64_t *)(v3[6] + 16 * v23);
                  *v34 = v18;
                  v34[1] = v20;
                  v35 = (uint64_t *)(v3[7] + 16 * v23);
                  *v35 = v13;
                  v35[1] = v45;
                  v36 = v3[2];
                  v37 = __OFADD__(v36, 1);
                  v38 = v36 + 1;
                  if (v37)
                    goto LABEL_28;
                  v3[2] = v38;
                  sub_10006F1A0(v18, v20);
                  v33 = v45;
                  goto LABEL_25;
                }
              }
              v30 = (uint64_t *)(v3[7] + 16 * v23);
              v31 = *v30;
              v32 = v30[1];
              v33 = v45;
              *v30 = v13;
              v30[1] = v45;
              sub_10006F22C(v31, v32);
LABEL_25:
              v39 = *v42;
              *v42 = v3;
              swift_bridgeObjectRelease(v39);
              sub_10006F22C(v18, v20);
              swift_endAccess(v47);
              sub_10006F22C(v13, v33);
              sub_10006F22C(v18, v20);
              v7 = v43;
              v6 = v29;
              goto LABEL_6;
            }
            sub_10006F22C(v13, v15);
            sub_10006F22C(v18, v20);
            v7 = v43;
          }
          else
          {
            sub_10006F22C(v13, v15);
          }
LABEL_6:

          ++v8;
        }
        while (v11 != v7);
      }
    }
    return swift_bridgeObjectRelease_n(v6, 2);
  }
  return result;
}

void sub_1000A5348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t i;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  Class isa;
  Class v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v29;
  _QWORD aBlock[6];

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps;
  v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v29)
  {
    if (v4)
    {
      v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v29 = i;
      v7 = v6 | (i << 6);
      goto LABEL_5;
    }
    v20 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    v22 = i + 1;
    if (!v21)
    {
      v22 = i + 2;
      if (i + 2 >= v25)
        goto LABEL_23;
      v21 = *(_QWORD *)(v24 + 8 * v22);
      if (!v21)
      {
        v22 = i + 3;
        if (i + 3 >= v25)
          goto LABEL_23;
        v21 = *(_QWORD *)(v24 + 8 * v22);
        if (!v21)
        {
          v22 = i + 4;
          if (i + 4 >= v25)
            goto LABEL_23;
          v21 = *(_QWORD *)(v24 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v21 - 1) & v21;
    v29 = v22;
    v7 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_5:
    v8 = 16 * v7;
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v8);
    v11 = *v9;
    v10 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v8);
    v14 = *v12;
    v13 = v12[1];
    v15 = *(void **)(a2 + v26);
    sub_10006F1A0(*v9, v10);
    sub_10006F1A0(v14, v13);
    v16 = objc_msgSend(v15, "smDataStore");
    isa = Data._bridgeToObjectiveC()().super.isa;
    v18 = Data._bridgeToObjectiveC()().super.isa;
    aBlock[4] = KTNetworkBucketFeedback.rawValue.getter;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100098C1C;
    aBlock[3] = &unk_100242308;
    v19 = _Block_copy(aBlock);
    objc_msgSend(v16, "uploadedDeviceSignature:tbs:complete:", isa, v18, v19);
    _Block_release(v19);
    swift_unknownObjectRelease(v16);

    sub_10006F22C(v11, v10);
    sub_10006F22C(v14, v13);
  }
  v23 = i + 5;
  if (i + 5 >= v25)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v21 = *(_QWORD *)(v24 + 8 * v23);
  if (v21)
  {
    v22 = i + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

unint64_t sub_1000A55FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A01C0;
  if (!qword_1002A01C0)
  {
    v1 = objc_opt_self(TransparencyIDSRegistrationData);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002A01C0);
  }
  return result;
}

uint64_t sub_1000A5638(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A5688()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A5DE8);
  sub_10006F07C(v0, (uint64_t)qword_1002A5DE8);
  return Logger.init(transparencyCategory:)(0x656E6F5A4B43544BLL, 0xE800000000000000);
}

id sub_1000A56E4()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1000A56EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_1000A571C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void *sub_1000A5728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t (*)(void *), uint64_t);
  void *v7;
  id v8;
  _BYTE v10[24];

  v5 = swift_allocObject(&unk_100242340, 24, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), uint64_t))(*(_QWORD *)v2 + 120);
  swift_retain(v5);
  v6(a1, a2, sub_1000A57F8, v5);
  swift_release(v5);
  swift_beginAccess(v5 + 16, v10, 0, 0);
  v7 = *(void **)(v5 + 16);
  v8 = v7;
  swift_release(v5);
  return v7;
}

uint64_t sub_1000A57D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A57F8(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  if (a1)
  {
    v2 = objc_msgSend(a1, "serverChangeToken");
    if (v2)
    {
      v3 = v2;
      v4 = (void **)(v1 + 16);
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v7 = v6;

      sub_10006D6DC(0, (unint64_t *)&unk_10029FFB0, NSKeyedUnarchiver_ptr);
      v8 = sub_10006D6DC(0, &qword_1002A0318, CKServerChangeToken_ptr);
      v9 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v8, v5, v7, v8);
      sub_10006F22C(v5, v7);
      swift_beginAccess(v4, &v12, 1, 0);
      v10 = *v4;
      *v4 = (void *)v9;

    }
  }
  return 0;
}

uint64_t sub_1000A58EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t (*)(id), uint64_t);
  id v9;

  v7 = swift_allocObject(&unk_100242368, 24, 7);
  *(_QWORD *)(v7 + 16) = a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(id), uint64_t))(*(_QWORD *)v3 + 120);
  v9 = a3;
  v8(a1, a2, sub_1000A5964, v7);
  return swift_release(v7);
}

uint64_t sub_1000A5964(id a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v16;

  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    v4 = (void *)objc_opt_self(NSKeyedArchiver);
    v16 = 0;
    v5 = v3;
    v6 = objc_msgSend(v4, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v16);
    v7 = v16;
    if (!v6)
    {
      v12 = v7;
      v13 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v14);
      swift_errorRelease(v13);
      return 0;
    }
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

    if (a1)
    {
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a1, "setServerChangeToken:", isa);

      sub_10006F22C(v8, v10);
    }
    else
    {

      sub_10006F22C(v8, v10);
    }
  }
  else if (a1)
  {
    objc_msgSend(a1, "setServerChangeToken:", 0);
  }
  return 1;
}

uint64_t sub_1000A5AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[5];
  uint64_t v16;

  v9 = *(void **)(v4 + 16);
  v10 = (_QWORD *)swift_allocObject(&unk_100242390, 48, 7);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v11 = swift_allocObject(&unk_1002423B8, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1000A6338;
  *(_QWORD *)(v11 + 24) = v10;
  v15[4] = sub_10007025C;
  v16 = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10007027C;
  v15[3] = &unk_1002423D0;
  v12 = _Block_copy(v15);
  v13 = v16;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  swift_retain(v11);
  swift_release(v13);
  objc_msgSend(v9, "performBlockAndWait:", v12);
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 122, 49, 32, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

void sub_1000A5BF0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(_QWORD);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(CloudZone), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v13 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v14 = swift_allocObject(v13, 72, 7);
  v69 = xmmword_1002143C0;
  *(_OWORD *)(v14 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10008189C();
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v15 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040, v14);
  objc_msgSend(v12, "setPredicate:", v15);

  v72 = 0;
  v68 = v12;
  v16 = objc_msgSend(v12, "execute:", &v72);
  v17 = (id)v72;
  if (!v16)
  {
    v36 = (id)v72;
    v37 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v38);
    swift_errorRelease(v37);
    v22 = 0;
    goto LABEL_21;
  }
  v18 = v16;
  v19 = sub_10006D6DC(0, &qword_1002A0310, &off_100238D78);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
  v21 = v17;

  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v39 = v20;
    else
      v39 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v20, 2);
    v22 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v20);
    if (v22)
    {
LABEL_4:
      if (v22 < 1)
      {
        __break(1u);
      }
      else
      {
        v64 = v11;
        v65 = v9;
        v66 = v8;
        v67 = a4;
        v63 = a3;
        v23 = 0;
        v24 = v20 & 0xC000000000000001;
        do
        {
          if (v24)
            v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v20);
          else
            v25 = *(id *)(v20 + 8 * v23 + 32);
          v26 = v25;
          v27 = sub_10006F03C(&qword_10029F328);
          v28 = swift_allocObject(v27, 64, 7);
          *(_OWORD *)(v28 + 16) = v69;
          ++v23;
          v72 = 0x203A73656E6F7ALL;
          v73 = 0xE700000000000000;
          v29 = objc_msgSend(v26, "description");
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v32 = v31;

          v33._countAndFlagsBits = v30;
          v33._object = v32;
          String.append(_:)(v33);
          swift_bridgeObjectRelease(v32);
          v34 = v72;
          v35 = v73;
          *(_QWORD *)(v28 + 56) = &type metadata for String;
          *(_QWORD *)(v28 + 32) = v34;
          *(_QWORD *)(v28 + 40) = v35;
          print(_:separator:terminator:)(v28, 32, 0xE100000000000000, 10, 0xE100000000000000);

          swift_bridgeObjectRelease(v28);
        }
        while (v22 != v23);
        swift_bridgeObjectRelease(v20);
        v8 = v66;
        a4 = v67;
        v9 = v65;
        if (v24)
        {
          v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
          a3 = v63;
          v11 = v64;
LABEL_15:
          swift_bridgeObjectRelease(v20);
          goto LABEL_21;
        }
        v11 = v64;
        if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v22 = (uint64_t)*(id *)(v20 + 32);
          a3 = v63;
          goto LABEL_15;
        }
      }
      __break(1u);
    }
  }
  else
  {
    v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v20);
    if (v22)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease_n(v20, 2);
LABEL_21:
  if (qword_1002A5DE0 != -1)
    swift_once(&qword_1002A5DE0, sub_1000A5688);
  v40 = sub_10006F07C(v8, (uint64_t)qword_1002A5DE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v40, v8);
  v41 = (id)v22;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, (os_log_type_t)v43))
  {
    v64 = v11;
    v65 = v9;
    v66 = v8;
    v67 = a4;
    v44 = swift_slowAlloc(32, -1);
    v45 = swift_slowAlloc(96, -1);
    v72 = v45;
    *(_DWORD *)v44 = 136315650;
    v63 = a3;
    *(_QWORD *)&v69 = v45;
    v62 = v43;
    if (v22 && (v46 = objc_msgSend(v41, "name")) != 0)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

    }
    else
    {
      v50 = 0xE100000000000000;
      v48 = 45;
    }
    v70 = sub_10006C790(v48, v50, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 4, v44 + 12);

    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v44 + 12) = 2080;
    if (v22)
    {
      v52 = objc_msgSend(v41, "zoneCreated");
      v53 = v52 == 0;
      if (v52)
        v54 = 1702195828;
      else
        v54 = 0x65736C6166;
      if (v53)
        v55 = 0xE500000000000000;
      else
        v55 = 0xE400000000000000;
    }
    else
    {
      v55 = 0xE100000000000000;
      v54 = 45;
    }
    v70 = sub_10006C790(v54, v55, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 14, v44 + 22);

    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v44 + 22) = 2080;
    if (v22)
    {
      v56 = objc_msgSend(v41, "zoneSubscribed");
      v57 = v56 == 0;
      if (v56)
        v58 = 1702195828;
      else
        v58 = 0x65736C6166;
      if (v57)
        v59 = 0xE500000000000000;
      else
        v59 = 0xE400000000000000;
    }
    else
    {
      v59 = 0xE100000000000000;
      v58 = 45;
    }
    a3 = v63;
    v51 = v68;
    v70 = sub_10006C790(v58, v59, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v44 + 24, v44 + 32);

    swift_bridgeObjectRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v62, "fetched zone: %s %s %s", (uint8_t *)v44, 0x20u);
    v60 = v69;
    swift_arrayDestroy(v69, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v51 = v68;
  }
  a3(v22);

}

uint64_t sub_1000A630C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000A6338()
{
  uint64_t v0;

  sub_1000A5BF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000A6344()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A6354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A6364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A636C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v5 = v4;
  v10 = *(void **)(v5 + 16);
  v11 = (_QWORD *)swift_allocObject(&unk_100242408, 56, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v5;
  v11[5] = a3;
  v11[6] = a4;
  v12 = swift_allocObject(&unk_100242430, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1000A6500;
  *(_QWORD *)(v12 + 24) = v11;
  v16[4] = sub_100074EF4;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10007027C;
  v16[3] = &unk_100242448;
  v13 = _Block_copy(v16);
  v14 = v17;
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  swift_retain(a4);
  swift_retain(v12);
  swift_release(v14);
  objc_msgSend(v10, "performBlockAndWait:", v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 122, 65, 32, 1);
  swift_release(v11);
  result = swift_release(v12);
  if ((v10 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000A64CC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000A6500()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;

  v1 = (id)v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = (void (*)(void))v0[5];
  v5 = objc_msgSend((id)objc_opt_self(CloudZone), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v6 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10008189C();
  *(_QWORD *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 40) = v2;
  swift_bridgeObjectRetain(v2);
  v8 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040, v7);
  -[NSObject setPredicate:](v5, "setPredicate:", v8);

  v41 = 0;
  v9 = -[NSObject execute:](v5, "execute:", &v41);
  v10 = v41;
  if (!v9)
  {
    v17 = v3;
    v18 = v41;
    v19 = _convertNSErrorToError(_:)(v10);

    v3 = v17;
    swift_willThrow(v20);
    swift_errorRelease(v19);
LABEL_14:
    v22 = objc_msgSend(objc_allocWithZone((Class)CloudZone), "initWithContext:", *(_QWORD *)(v3 + 16));
    if (!v22)
    {
      v4();
      goto LABEL_26;
    }
    v15 = v22;
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setName:", v23);

    goto LABEL_16;
  }
  v11 = v9;
  v12 = sub_10006D6DC(0, &qword_1002A0310, &off_100238D78);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);
  v14 = v10;

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v21 = v13;
    else
      v21 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v15 = (id)_CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v13);
    if (v15)
      goto LABEL_4;
    goto LABEL_13;
  }
  v15 = *(id *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
  {
LABEL_13:
    swift_bridgeObjectRelease(v13);
    goto LABEL_14;
  }
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
  }
  else
  {
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_29:
      swift_once(&qword_1002A5DE0, sub_1000A5688);
      goto LABEL_18;
    }
    v16 = *(id *)(v13 + 32);
  }
  v15 = v16;
  swift_bridgeObjectRelease(v13);
LABEL_16:
  v1 = v15;
  v24 = ((uint64_t (*)(id))v4)(v15);

  if ((v24 & 1) == 0)
  {

    goto LABEL_26;
  }
  if (qword_1002A5DE0 != -1)
    goto LABEL_29;
LABEL_18:
  v25 = type metadata accessor for Logger(0);
  sub_10006F07C(v25, (uint64_t)qword_1002A5DE8);
  v26 = v1;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v40 = v3;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v29 = 138412290;
    v41 = v26;
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 4, v29 + 12);
    *v39 = v15;

    v3 = v40;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "saving zone: %@", v29, 0xCu);
    v31 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v39, 1, v31);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {

    v27 = v26;
  }

  v32 = *(void **)(v3 + 16);
  v41 = 0;
  v33 = objc_msgSend(v32, "save:", &v41);
  v34 = v41;
  if (v33)
  {
    v35 = v41;

  }
  else
  {
    v36 = v41;
    v37 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v38);
    swift_errorRelease(v37);
    v5 = v26;
  }
LABEL_26:

}

uint64_t sub_1000A6984()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A6994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v3 = v2;
  v6 = *(void **)(v3 + 16);
  v7 = (_QWORD *)swift_allocObject(&unk_100242480, 40, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v3;
  v8 = swift_allocObject(&unk_1002424A8, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_1000A6B0C;
  *(_QWORD *)(v8 + 24) = v7;
  v12[4] = sub_100074EF4;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10007027C;
  v12[3] = &unk_1002424C0;
  v9 = _Block_copy(v12);
  v10 = v13;
  swift_bridgeObjectRetain(a2);
  swift_retain(v3);
  swift_retain(v8);
  swift_release(v10);
  objc_msgSend(v6, "performBlockAndWait:", v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 122, 88, 32, 1);
  swift_release(v7);
  result = swift_release(v8);
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000A6AE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000A6B0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = objc_allocWithZone((Class)NSFetchRequest);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithEntityName:", v5);

  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v7 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1002143C0;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10008189C();
  *(_QWORD *)(v8 + 32) = v2;
  *(_QWORD *)(v8 + 40) = v1;
  swift_bridgeObjectRetain(v1);
  v9 = (void *)NSPredicate.init(format:_:)(0x25203D20656D616ELL, 0xE900000000000040, v8);
  objc_msgSend(v6, "setPredicate:", v9);

  v10 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v6);
  v11 = *(void **)(v3 + 16);
  v25 = 0;
  v12 = objc_msgSend(v11, "executeRequest:error:", v10, &v25);
  v13 = v25;
  if (v12)
  {
    v14 = v12;
    v15 = v25;

  }
  else
  {
    v16 = v25;
    v17 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v18);
    swift_errorRelease(v17);
  }
  v25 = 0;
  v19 = objc_msgSend(v11, "save:", &v25);
  v20 = v25;
  if (v19)
  {
    v21 = v25;

  }
  else
  {
    v22 = v25;
    v23 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v24);
    swift_errorRelease(v23);
    v6 = v10;
  }

}

uint64_t sub_1000A6D20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A6D30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000A6D4C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000A6D70()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate));
}

uint64_t sub_1000A6D80()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler));
}

void *sub_1000A6D90()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase);
  v2 = v1;
  return v1;
}

id sub_1000A6DBC()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics);
}

uint64_t KTZoneSetup.initialFetch.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch, v3, 0, 0);
  return *v1;
}

uint64_t KTZoneSetup.initialFetch.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*KTZoneSetup.initialFetch.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch, a1, 33, 0);
  return j__swift_endAccess;
}

void *sub_1000A6F28(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

void *sub_1000A6F4C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  return a2;
}

uint64_t variable initialization expression of KTOptIOValidator.intendedState()
{
  return 2;
}

uint64_t sub_1000A6F78(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000A6F80(uint64_t a1, uint64_t a2, __int16 a3)
{
  return HIBYTE(a3);
}

uint64_t sub_1000A6F88(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*sub_1000A6F90())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

void *variable initialization expression of KTStoreOptInOperation.storedRecords()
{
  return &_swiftEmptyArrayStorage;
}

id KTZoneSetup.__allocating_init(ckdatabase:analytics:context:zoneCreate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  v10 = type metadata accessor for KTCKZone();
  v11 = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v11;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, "init");
}

id KTZoneSetup.init(ckdatabase:analytics:context:zoneCreate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  v6 = type metadata accessor for KTCKZone();
  v7 = swift_allocObject(v6, 24, 7);
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v7;
  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for KTZoneSetup();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for KTCKZone()
{
  return objc_opt_self(_TtC13transparencyd8KTCKZone);
}

uint64_t type metadata accessor for KTZoneSetup()
{
  return objc_opt_self(_TtC13transparencyd11KTZoneSetup);
}

Swift::Void __swiftcall KTZoneSetup.groupStart()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  void *v41;
  uint8_t *v42;
  uint64_t v43;
  Class isa;
  uint64_t v45;
  id v46;
  Class v47;
  objc_class *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  void *v54;
  CKModifySubscriptionsOperation v55;
  uint64_t v56;
  id v57;
  objc_class *v58;
  uint64_t v59;
  id v60;
  Class v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  id v69;
  char **p_attr;
  void **v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  objc_class *v75;
  void **v76;
  uint64_t v77;
  objc_class *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  objc_class *v82;
  uint64_t v83;
  _QWORD *v84;
  objc_class **v85;
  id v86;
  id v87;
  unint64_t v88;
  CKModifySubscriptionsOperation *v89;
  void (*v90)(uint64_t, uint64_t, void (*)(void *), _QWORD *);
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  void **aBlock;
  _QWORD v96[4];
  _QWORD *v97;
  char v98[24];
  Swift::OpaquePointer_optional v99;
  Swift::OpaquePointer_optional v100;
  Swift::OpaquePointer_optional v101;
  Swift::OpaquePointer_optional v102;

  v3 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase];
  if (v3)
  {
    v93 = swift_allocObject(&unk_1002424F8, 24, 7);
    v86 = v3;
    *(_QWORD *)(v93 + 16) = sub_1000A7DEC((uint64_t)_swiftEmptyArrayStorage);
    v84 = (_QWORD *)(v93 + 16);
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate];
    v91 = v0;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v17 = *(_QWORD *)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate];
      else
        v17 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v4, 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v5)
        goto LABEL_14;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v4, 2);
      if (!v5)
        goto LABEL_14;
    }
    if (v5 < 1)
    {
      __break(1u);
      goto LABEL_28;
    }
    v6 = 0;
    v88 = v4 & 0xC000000000000001;
    v90 = *(void (**)(uint64_t, uint64_t, void (*)(void *), _QWORD *))(**(_QWORD **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler]
                                                                                         + 112);
    v7 = v4;
    do
    {
      if (v88)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      else
        v8 = *(id *)(v4 + 8 * v6 + 32);
      v9 = v8;
      ++v6;
      v10 = objc_msgSend(v8, "zoneName");
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v14 = (_QWORD *)swift_allocObject(&unk_100242520, 56, 7);
      v14[2] = v11;
      v14[3] = v13;
      v14[4] = v0;
      v14[5] = v93;
      v14[6] = v9;
      swift_bridgeObjectRetain(v13);
      v15 = v0;
      swift_retain(v93);
      v16 = v9;
      v90(v11, v13, sub_1000A7F70, v14);

      swift_bridgeObjectRelease(v13);
      swift_release(v14);
      v4 = v7;
    }
    while (v5 != v6);
LABEL_14:
    swift_bridgeObjectRelease_n(v4, 2);
    swift_beginAccess(v84, v98, 0, 0);
    if (!*(_QWORD *)(*v84 + 16))
    {
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_10006F07C(v37, (uint64_t)qword_1002A5DE8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.info.getter(v39);
      v41 = v86;
      if (os_log_type_enabled(v39, v40))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "no zones to create", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }
      swift_release(v93);
      goto LABEL_56;
    }
    v5 = (uint64_t)v0;
    v87 = objc_msgSend(objc_allocWithZone((Class)KTResultOperation), "init");
    objc_msgSend(v0, "dependOnBeforeGroupFinished:");
    v18 = *v84;
    swift_bridgeObjectRetain(*v84);
    v1 = (uint64_t)sub_1000A8938(v19);
    swift_bridgeObjectRelease(v18);
    v20 = *v84;
    swift_bridgeObjectRetain(*v84);
    v2 = (uint64_t)sub_1000A8B04(v21);
    swift_bridgeObjectRelease(v20);
    if (qword_1002A5DE0 == -1)
    {
LABEL_16:
      v22 = type metadata accessor for Logger(0);
      sub_10006F07C(v22, (uint64_t)qword_1002A5DE8);
      swift_bridgeObjectRetain_n(v1, 2);
      v23 = swift_bridgeObjectRetain_n(v2, 2);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc(22, -1);
        v27 = (void **)swift_slowAlloc(64, -1);
        aBlock = v27;
        *(_DWORD *)v26 = 136315394;
        v28 = sub_10006D6DC(0, &qword_1002A0208, CKRecordZone_ptr);
        v29 = Array.description.getter(v1, v28);
        v31 = v30;
        v94 = sub_10006C790(v29, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &aBlock, v26 + 4, v26 + 12);
        swift_bridgeObjectRelease_n(v1, 2);
        swift_bridgeObjectRelease(v31);
        *(_WORD *)(v26 + 12) = 2080;
        v32 = sub_10006D6DC(0, &qword_1002A0210, CKRecordZoneSubscription_ptr);
        v33 = Array.description.getter(v2, v32);
        v35 = v34;
        v94 = sub_10006C790(v33, v34, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &aBlock, v26 + 14, v26 + 22);
        swift_bridgeObjectRelease_n(v2, 2);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "KTZoneSetup create %s subscribe: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        v36 = v26;
        v5 = (uint64_t)v91;
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v2, 2);
        swift_bridgeObjectRelease_n(v1, 2);
      }
      v43 = v93;
      if ((unint64_t)v1 >> 62)
      {
        if (v1 < 0)
          v51 = v1;
        else
          v51 = v1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v1);
        v52 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v1);
        if (v52)
          goto LABEL_26;
      }
      else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_26:
        sub_10006D6DC(0, &qword_1002A01F0, CKModifyRecordZonesOperation_ptr);
        v99.value._rawValue = (void *)v1;
        v99.is_nil = 0;
        isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v99, v101).super.super.super.super.isa;
        -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
        v45 = swift_allocObject(&unk_100242548, 32, 7);
        *(_QWORD *)(v45 + 16) = v5;
        *(_QWORD *)(v45 + 24) = v93;
        v46 = (id)v5;
        swift_retain(v93);
        v47 = isa;
        v48 = isa;
        CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter(sub_1000A960C, v45);
        v49 = swift_allocObject(&unk_100242570, 24, 7);
        *(_QWORD *)(v49 + 16) = v46;
        v50 = v46;
        CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_1000A9618, v49);

        goto LABEL_34;
      }
      swift_bridgeObjectRelease(v1);
      v47 = 0;
LABEL_34:
      v41 = v86;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0)
          v62 = v2;
        else
          v62 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v2);
        v63 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_bridgeObjectRelease(v2);
        if (v63)
        {
          v64 = sub_10006D6DC(0, &qword_1002A01F8, CKSubscription_ptr);
          v65 = swift_bridgeObjectRetain(v2);
          v54 = (void *)_bridgeCocoaArray<A>(_:)(v62, v64, v65);
          swift_bridgeObjectRelease_n(v2, 2);
          goto LABEL_37;
        }
      }
      else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v53 = swift_bridgeObjectRetain(v2);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v53);
        sub_10006D6DC(0, &qword_1002A01F8, CKSubscription_ptr);
        swift_bridgeObjectRelease(v2);
        v54 = (void *)v2;
LABEL_37:
        sub_10006D6DC(0, &qword_1002A0200, CKModifySubscriptionsOperation_ptr);
        v100.value._rawValue = v54;
        v100.is_nil = 0;
        v55.super.super.super.super.isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v100, v102).super.super.super.super.isa;
        -[objc_class setQualityOfService:](v55.super.super.super.super.isa, "setQualityOfService:", 25);
        v56 = swift_allocObject(&unk_100242598, 32, 7);
        *(_QWORD *)(v56 + 16) = v5;
        *(_QWORD *)(v56 + 24) = v93;
        v57 = (id)v5;
        swift_retain(v93);
        v58 = v55.super.super.super.super.isa;
        CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter(sub_1000AA3D0, v56);
        v59 = swift_allocObject(&unk_1002425C0, 24, 7);
        *(_QWORD *)(v59 + 16) = v57;
        v60 = v57;
        CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_1000AA3DC, v59);
        v61 = v47;
        -[objc_class addNullableDependency:](v58, "addNullableDependency:", v47);

LABEL_44:
        v66 = (_QWORD *)swift_allocObject(&unk_1002425E8, 40, 7);
        v66[2] = v93;
        v66[3] = v5;
        v66[4] = v87;
        v96[3] = sub_1000AA6F0;
        v97 = v66;
        aBlock = _NSConcreteStackBlock;
        v96[0] = 1107296256;
        v96[1] = sub_10008EDF8;
        v96[2] = &unk_100242600;
        v67 = _Block_copy(&aBlock);
        v68 = (void *)objc_opt_self(NSBlockOperation);
        v69 = (id)v5;
        swift_retain(v93);
        v92 = v87;
        v39 = objc_msgSend(v68, "blockOperationWithBlock:", v67);
        _Block_release(v67);
        swift_release(v97);
        -[NSObject addNullableDependency:](v39, "addNullableDependency:", v61);
        -[NSObject addNullableDependency:](v39, "addNullableDependency:", v55.super.super.super.super.isa);
        objc_msgSend(v69, "runBeforeGroupFinished:", v39);
        p_attr = &stru_10028CFF8.attr;
        if (v61)
        {
          v71 = v61;
          v72 = Logger.logObject.getter(v71);
          v73 = static os_log_type_t.info.getter(v72);
          if (os_log_type_enabled(v72, v73))
          {
            v74 = (uint8_t *)swift_slowAlloc(12, -1);
            v85 = (objc_class **)swift_slowAlloc(8, -1);
            *(_DWORD *)v74 = 138412290;
            aBlock = v71;
            v75 = v61;
            v76 = v71;
            v41 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, v74 + 4, v74 + 12);
            *v85 = v75;

            v61 = v75;
            p_attr = (char **)(&stru_10028CFF8 + 8);
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "create zone op %@", v74, 0xCu);
            v77 = sub_10006F03C(&qword_10029F6B0);
            swift_arrayDestroy(v85, 1, v77);
            swift_slowDealloc(v85, -1, -1);
            swift_slowDealloc(v74, -1, -1);
          }
          else
          {

            v72 = v71;
          }

          objc_msgSend(v41, p_attr[340], v71);
          v43 = v93;
        }
        if (v55.super.super.super.super.isa)
        {
          v78 = v55.super.super.super.super.isa;
          v79 = Logger.logObject.getter(v78);
          v80 = static os_log_type_t.info.getter(v79);
          if (os_log_type_enabled(v79, v80))
          {
            v81 = (uint8_t *)swift_slowAlloc(12, -1);
            v89 = (CKModifySubscriptionsOperation *)swift_slowAlloc(8, -1);
            *(_DWORD *)v81 = 138412290;
            aBlock = (void **)v78;
            v82 = v78;
            v41 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, v81 + 4, v81 + 12);
            v89->super.super.super.super.isa = v55.super.super.super.super.isa;

            v43 = v93;
            _os_log_impl((void *)&_mh_execute_header, v79, v80, "subscribe zone op %@", v81, 0xCu);
            v83 = sub_10006F03C(&qword_10029F6B0);
            swift_arrayDestroy(v89, 1, v83);
            swift_slowDealloc(v89, -1, -1);
            swift_slowDealloc(v81, -1, -1);
          }
          else
          {

            v79 = v78;
          }

          objc_msgSend(v41, "addOperation:", v78);
          swift_release(v43);

        }
        else
        {
          swift_release(v43);

        }
LABEL_56:

        return;
      }
      swift_bridgeObjectRelease(v2);
      v55.super.super.super.super.isa = 0;
      v61 = v47;
      goto LABEL_44;
    }
LABEL_28:
    swift_once(&qword_1002A5DE0, sub_1000A5688);
    goto LABEL_16;
  }
}

uint64_t sub_1000A7DC8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000A7DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  char v12;
  id v13;
  id v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_1002A0308);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v22 = v1;
  v6 = (char *)(v1 + 65);
  while (1)
  {
    v7 = *(_QWORD *)(v6 - 33);
    v8 = *(_QWORD *)(v6 - 25);
    v9 = *(void **)(v6 - 17);
    v10 = *(void **)(v6 - 9);
    v11 = *(v6 - 1);
    v12 = *v6;
    v13 = v10;
    swift_bridgeObjectRetain(v8);
    v14 = v9;
    result = sub_100072E70(v7, v8);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = (uint64_t *)(v4[6] + 16 * result);
    *v17 = v7;
    v17[1] = v8;
    v18 = v4[7] + 24 * result;
    *(_QWORD *)v18 = v9;
    *(_QWORD *)(v18 + 8) = v10;
    *(_BYTE *)(v18 + 16) = v11;
    *(_BYTE *)(v18 + 17) = v12;
    v19 = v4[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v6 += 40;
    v4[2] = v21;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v22;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A7F34()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000A7F70(void *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  Class *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  id v27;
  id v28;
  Swift::String v29;
  Class v30;
  char v31;
  Class v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Class v52;
  objc_class *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  Class v58;
  objc_class *v59;
  Class v60;
  id v61;
  char isUniquelyReferenced_nonNull_native;
  Class v63;
  uint64_t v64;
  id v65;
  id v66;
  void *v67;
  char v68[24];
  char v69[24];
  objc_class *v70;
  _BYTE v71[24];
  Class v72;
  _BYTE v73[16];
  Class isa;
  id v75;
  uint64_t v76[4];

  v3 = v1[2];
  v2 = (void *)v1[3];
  v4 = (_QWORD *)v1[4];
  v5 = (void *)v1[6];
  v6 = (Class *)(v1[5] + 16);
  if (a1)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, "serverChangeToken");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      sub_10006F22C(v10, v12);
    }
    else
    {
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v20 = type metadata accessor for Logger(0);
      sub_10006F07C(v20, (uint64_t)qword_1002A5DE8);
      v21 = swift_bridgeObjectRetain_n(v2, 2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.info.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v65 = v7;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v76[0] = v25;
        *(_DWORD *)v24 = 136315138;
        swift_bridgeObjectRetain(v2);
        v72 = (Class)sub_10006C790(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v24 + 4, v24 + 12);
        swift_bridgeObjectRelease_n(v2, 3);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "initial fetch of zone %s (no serverChangeToken)", v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        v26 = v24;
        v7 = v65;
        swift_slowDealloc(v26, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v2, 2);
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80))(1);
    }
    v75 = 0;
    if ((objc_msgSend(v7, "zoneCreated") & 1) != 0)
    {
      v33 = 1;
    }
    else
    {
      v75 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v5);
      v33 = v75 == 0;
    }
    isa = 0;
    if (objc_msgSend(v7, "zoneSubscribed") && v33)
    {
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v34 = type metadata accessor for Logger(0);
      sub_10006F07C(v34, (uint64_t)qword_1002A5DE8);
      v35 = swift_bridgeObjectRetain_n(v2, 2);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.info.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v76[0] = v39;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain(v2);
        v72 = (Class)sub_10006C790(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease_n(v2, 3);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "zone already created/subscribed %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v2, 2);
      }

    }
    else
    {
      sub_10006D6DC(0, &qword_1002A0210, CKRecordZoneSubscription_ptr);
      swift_bridgeObjectRetain(v2);
      v40 = v5;
      v41._countAndFlagsBits = v3;
      v41._object = v2;
      isa = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v40, v41).super.super.isa;
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v42 = type metadata accessor for Logger(0);
      sub_10006F07C(v42, (uint64_t)qword_1002A5DE8);
      v43 = swift_bridgeObjectRetain_n(v2, 2);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v66 = v7;
        v46 = swift_slowAlloc(32, -1);
        v47 = (_QWORD *)swift_slowAlloc(16, -1);
        v64 = swift_slowAlloc(32, -1);
        v76[0] = v64;
        *(_DWORD *)v46 = 136315650;
        swift_bridgeObjectRetain(v2);
        v72 = (Class)sub_10006C790(v3, (unint64_t)v2, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease_n(v2, 3);
        *(_WORD *)(v46 + 12) = 2112;
        swift_beginAccess(&v75, v69, 0, 0);
        v48 = v75;
        if (v75)
        {
          v72 = (Class)v75;
          v49 = v75;
          v50 = v46 + 14;
          v51 = v46 + 22;
        }
        else
        {
          v51 = v46 + 22;
          v72 = 0;
          v50 = v46 + 14;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v50, v51);
        *v47 = v48;
        *(_WORD *)(v46 + 22) = 2112;
        swift_beginAccess(&isa, v68, 0, 0);
        v52 = isa;
        if (isa)
        {
          v72 = isa;
          v53 = isa;
          v54 = v46 + 24;
          v55 = v46 + 32;
        }
        else
        {
          v55 = v46 + 32;
          v72 = 0;
          v54 = v46 + 24;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v54, v55);
        v47[1] = v52;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "zone %s pending created %@ subscribed %@", (uint8_t *)v46, 0x20u);
        v56 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v47, 2, v56);
        swift_slowDealloc(v47, -1, -1);
        swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        v7 = v66;
      }
      else
      {
        swift_bridgeObjectRelease_n(v2, 2);

      }
      swift_beginAccess(&v75, v76, 0, 0);
      v57 = v75;
      swift_beginAccess(&isa, &v72, 0, 0);
      v58 = isa;
      swift_beginAccess(v6, v71, 33, 0);
      v59 = v58;
      v60 = *v6;
      swift_bridgeObjectRetain(v2);
      v61 = v57;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
      v70 = *v6;
      *v6 = (Class)0x8000000000000000;
      sub_1000AB330((uint64_t)v57, (uint64_t)v58, 514, v3, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
      v63 = *v6;
      *v6 = v70;
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v2);
      swift_endAccess(v71);

    }
  }
  else
  {
    if (qword_1002A5DE0 != -1)
      swift_once(&qword_1002A5DE0, sub_1000A5688);
    v13 = type metadata accessor for Logger(0);
    sub_10006F07C(v13, (uint64_t)qword_1002A5DE8);
    v14 = swift_bridgeObjectRetain_n(v2, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v67 = v5;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v76[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(v2);
      v72 = (Class)sub_10006C790(v3, (unint64_t)v2, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v2, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "initial fetch of zone %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v19 = v17;
      v5 = v67;
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80))(1);
    v27 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v5, swift_bridgeObjectRetain(v2).n128_f64[0]);
    sub_10006D6DC(0, &qword_1002A0210, CKRecordZoneSubscription_ptr);
    swift_bridgeObjectRetain(v2);
    v28 = v5;
    v29._countAndFlagsBits = v3;
    v29._object = v2;
    v30 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v28, v29).super.super.isa;
    swift_beginAccess(v6, v76, 33, 0);
    v31 = swift_isUniquelyReferenced_nonNull_native(*v6);
    v72 = *v6;
    *v6 = (Class)0x8000000000000000;
    sub_1000AB330((uint64_t)v27, (uint64_t)v30, 514, v3, (uint64_t)v2, v31);
    v32 = *v6;
    *v6 = v72;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v2);
    swift_endAccess(v76);
  }
}

void *sub_1000A8938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (void *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = *(void **)(*(_QWORD *)(a1 + 56) + 24 * v10);
    if (v14)
    {
      v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v17 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      result = (void *)specialized Array._endMutation()(v18);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A8B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (void *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = *(void **)(*(_QWORD *)(a1 + 56) + 24 * v10 + 8);
    if (v14)
    {
      v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v17 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      result = (void *)specialized Array._endMutation()(v18);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000A8CD0(void *a1, void *a2, char a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  void *v26;
  __int16 v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void *v55;
  NSString v56;
  id v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  char v90;
  char v91;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v55 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain(a2);
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v55, "logResultForEvent:hardFailure:result:", v56, 0, 0);

    if (qword_1002A5DE0 != -1)
      swift_once(&qword_1002A5DE0, sub_1000A5688);
    sub_10006F07C(v10, (uint64_t)qword_1002A5DE8);
    sub_10006F0E0(a2, 1);
    v57 = a1;
    sub_10006F0E0(a2, 1);
    v58 = v57;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(22, -1);
      v82 = (_QWORD *)swift_slowAlloc(8, -1);
      v83 = swift_slowAlloc(32, -1);
      v86 = v83;
      *(_DWORD *)v61 = 136315394;
      v62 = objc_msgSend(v58, "zoneName");
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      v88 = (id)sub_10006C790(v63, v65, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v61 + 4, v61 + 12);

      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v61 + 12) = 2112;
      swift_errorRetain(a2);
      v66 = (void *)_swift_stdlib_bridgeErrorToNSError(a2);
      v88 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v61 + 14, v61 + 22);
      v67 = v82;
      *v82 = v66;
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "ModifyRecordZones perRecordZoneSaveBlock failed with %s: %@", (uint8_t *)v61, 0x16u);
      v68 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v67, 1, v68);
      swift_slowDealloc(v67, -1, -1);
      v69 = v83;
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {

      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
    }

    v79 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(a4, "setError:", v79);

    sub_10006F0EC(a2, 1);
  }
  else
  {
    v14 = (_QWORD *)(a5 + 16);
    v15 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "logResultForEvent:hardFailure:result:", v16, 0, 0);

    v17 = objc_msgSend(a1, "zoneName");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    swift_beginAccess(v14, &v86, 32, 0);
    v21 = *v14;
    if (*(_QWORD *)(*v14 + 16) && (v22 = sub_100072E70(v18, v20), (v23 & 1) != 0))
    {
      v83 = v11;
      v24 = *(_QWORD *)(v21 + 56) + 24 * v22;
      v26 = *(void **)(v24 + 8);
      v27 = *(unsigned __int8 *)(v24 + 17);
      v88 = *(id *)v24;
      v25 = v88;
      v89 = v26;
      v91 = v27;
      swift_endAccess(&v86);
      v82 = v26;
      v28 = v25;
      swift_bridgeObjectRelease(v20);
      v90 = 1;
      v29 = objc_msgSend(a1, "zoneName");
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v31 = v30;

      swift_beginAccess(v14, &v86, 33, 0);
      v32 = v28;
      v33 = v82;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      v85 = (_QWORD *)*v14;
      *v14 = 0x8000000000000000;
      sub_1000AB330((uint64_t)v25, (uint64_t)v26, (v27 << 8) | 1, v81, v31, isUniquelyReferenced_nonNull_native);
      v35 = *v14;
      *v14 = v85;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v35);
      swift_endAccess(&v86);
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v36 = sub_10006F07C(v10, (uint64_t)qword_1002A5DE8);
      v37 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v13, v36, v10);
      v38 = a1;
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.info.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(32, -1);
        v82 = (_QWORD *)swift_slowAlloc(96, -1);
        v85 = v82;
        *(_DWORD *)v41 = 136315650;
        v42 = objc_msgSend(v38, "zoneName");
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v86 = sub_10006C790(v43, v45, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 4, v41 + 12);

        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2080;
        swift_beginAccess(&v88, &v86, 0, 0);
        v46 = 1702195828;
        if ((v90 & 1) != 0)
        {
          v47 = 0xE400000000000000;
        }
        else
        {
          v46 = 0x65736C6166;
          v47 = 0xE500000000000000;
        }
        if (v90 == 2)
          v48 = 45;
        else
          v48 = v46;
        if (v90 == 2)
          v49 = 0xE100000000000000;
        else
          v49 = v47;
        v84 = sub_10006C790(v48, v49, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease(v49);
        *(_WORD *)(v41 + 22) = 2080;
        v50 = 0x65736C6166;
        if ((v91 & 1) != 0)
        {
          v50 = 1702195828;
          v51 = 0xE400000000000000;
        }
        else
        {
          v51 = 0xE500000000000000;
        }
        if (v91 == 2)
          v52 = 0;
        else
          v52 = v50;
        if (v91 == 2)
          v53 = 0xE000000000000000;
        else
          v53 = v51;
        v84 = sub_10006C790(v52, v53, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v41 + 24, v41 + 32);
        swift_bridgeObjectRelease(v53);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "sub action %s: created: %s subscribed: %s", (uint8_t *)v41, 0x20u);
        v54 = v82;
        swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        (*(void (**)(char *, uint64_t))(v83 + 8))(v13, v10);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v10);
      }

    }
    else
    {
      swift_bridgeObjectRelease(v20);
      swift_endAccess(&v86);
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      sub_10006F07C(v10, (uint64_t)qword_1002A5DE8);
      v70 = a1;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(12, -1);
        v74 = swift_slowAlloc(32, -1);
        v86 = v74;
        *(_DWORD *)v73 = 136315138;
        v75 = objc_msgSend(v70, "zoneName");
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

        v88 = (id)sub_10006C790(v76, v78, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v73 + 4, v73 + 12);

        swift_bridgeObjectRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "ModifyRecordZones perRecordZoneSaveBlock not found %s", v73, 0xCu);
        swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v73, -1, -1);

      }
      else
      {

      }
    }
  }
}

void sub_1000A960C(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_1000A8CD0(a1, a2, a3 & 1, *(char **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_1000A9618(uint64_t a1, char a2)
{
  sub_1000AA3F8(a1, a2, "ModifyRecordZones modifyRecordZonesResultBlock failed with %@", (uint64_t (*)(void))&static os_log_type_t.default.getter, "ModifyRecordZones modifyRecordZonesResultBlock success");
}

void sub_1000A9634(uint64_t a1, unint64_t a2, void *a3, char a4, char *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  NSString v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  _QWORD *v64;
  id v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  __int16 v87;
  uint64_t *v88;
  id v89;
  uint64_t v90;
  id v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  os_log_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  __int16 v118;

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)(a6 + 16);
  if ((a4 & 1) != 0)
  {
    v33 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain(a3);
    v34 = String._bridgeToObjectiveC()();
    v35 = (void *)_convertErrorToNSError(_:)(a3);
    objc_msgSend(v33, "logResultForEvent:hardFailure:result:", v34, 1, v35);

    if (qword_1002A5DE0 != -1)
      swift_once(&qword_1002A5DE0, sub_1000A5688);
    sub_10006F07C(v12, (uint64_t)qword_1002A5DE8);
    sub_10006F0E0(a3, 1);
    swift_bridgeObjectRetain(a2);
    sub_10006F0E0(a3, 1);
    swift_bridgeObjectRetain(a2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v109 = (_QWORD *)swift_slowAlloc(8, -1);
      v110 = swift_slowAlloc(32, -1);
      v114 = v110;
      *(_DWORD *)v39 = 136315394;
      v111 = (uint64_t)v16;
      swift_bridgeObjectRetain(a2);
      v116 = (id)sub_10006C790(a1, a2, &v114);
      v108 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain(a3);
      v40 = a5;
      v41 = a2;
      v42 = a1;
      v43 = (void *)_swift_stdlib_bridgeErrorToNSError(a3);
      v116 = v43;
      v16 = (_QWORD *)v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v39 + 14, v39 + 22);
      v44 = v109;
      *v109 = v43;
      a1 = v42;
      a2 = v41;
      a5 = v40;
      sub_10006F0EC(a3, 1);
      sub_10006F0EC(a3, 1);
      v45 = v108;
      _os_log_impl((void *)&_mh_execute_header, v108, v38, "ModifySubscriptions perSubscriptionSaveBlock %s failed with %@", (uint8_t *)v39, 0x16u);
      v46 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v44, 1, v46);
      swift_slowDealloc(v44, -1, -1);
      v47 = v110;
      swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      sub_10006F0EC(a3, 1);
      sub_10006F0EC(a3, 1);

    }
    v114 = (uint64_t)a3;
    swift_errorRetain(a3);
    v48 = sub_10006F03C(&qword_10029EE58);
    type metadata accessor for CKError(0);
    v50 = v49;
    if ((swift_dynamicCast(&v116, &v114, v48, v49, 6) & 1) == 0)
      goto LABEL_56;
    v51 = v116;
    v114 = (uint64_t)v116;
    v52 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
    _BridgedStoredNSError.code.getter(&v116, v50, v52);
    if (v116 != (id)26)
    {
      v111 = (uint64_t)a5;
      swift_bridgeObjectRetain_n(a2, 2);
      v75 = v51;
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = a1;
        v79 = swift_slowAlloc(22, -1);
        v80 = (uint64_t *)swift_slowAlloc(8, -1);
        v81 = swift_slowAlloc(32, -1);
        v114 = v81;
        *(_DWORD *)v79 = 136315394;
        swift_bridgeObjectRetain(a2);
        v113 = sub_10006C790(v78, a2, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v79 + 12) = 2112;
        v82 = v75;
        v83 = _swift_stdlib_bridgeErrorToNSError(v82);
        v113 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v79 + 14, v79 + 22);
        *v80 = v83;

        _os_log_impl((void *)&_mh_execute_header, v76, v77, "ModifySubscriptions unhandled ckerror %s: %@", (uint8_t *)v79, 0x16u);
        v84 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v80, 1, v84);
        swift_slowDealloc(v80, -1, -1);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v79, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      a5 = (char *)v111;
      goto LABEL_56;
    }
    swift_beginAccess(v16, &v114, 32, 0);
    v53 = *v16;
    if (*(_QWORD *)(*v16 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v54 = sub_100072E70(a1, a2);
      if ((v55 & 1) != 0)
      {
        v56 = *(_QWORD *)(v53 + 56) + 24 * v54;
        v57 = *(void **)v56;
        v58 = *(void **)(v56 + 8);
        swift_endAccess(&v114);
        v59 = v58;
        v60 = v57;
        v111 = (uint64_t)a5;
        v61 = a1;
        v62 = v60;
        swift_bridgeObjectRelease(a2);
        swift_beginAccess(v16, &v114, 33, 0);
        swift_bridgeObjectRetain(a2);
        v63 = v62;
        v64 = v16;
        v65 = v59;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v64);
        v113 = *v64;
        *v64 = 0x8000000000000000;
        v67 = v61;
        a5 = (char *)v111;
        sub_1000AB330((uint64_t)v57, (uint64_t)v58, 0, v67, a2, isUniquelyReferenced_nonNull_native);
        v68 = *v64;
        *v64 = v113;
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v68);
        swift_endAccess(&v114);

        v51 = v63;
LABEL_55:

LABEL_56:
        v107 = (void *)_convertErrorToNSError(_:)(a3);
        objc_msgSend(a5, "setError:", v107);

        sub_10006F0EC(a3, 1);
        return;
      }
      swift_bridgeObjectRelease(a2);
    }
    swift_endAccess(&v114);
    goto LABEL_55;
  }
  v17 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "logResultForEvent:hardFailure:result:", v18, 0, 0);

  swift_beginAccess(v16, &v114, 32, 0);
  v19 = *v16;
  if (*(_QWORD *)(*v16 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v20 = sub_100072E70(a1, a2);
    if ((v21 & 1) != 0)
    {
      v111 = (uint64_t)v16;
      v22 = *(_QWORD *)(v19 + 56) + 24 * v20;
      v23 = *(void **)v22;
      v24 = *(void **)(v22 + 8);
      LOWORD(v22) = *(_WORD *)(v22 + 16);
      v116 = v23;
      v117 = v24;
      v118 = v22;
      swift_endAccess(&v114);
      v25 = v24;
      v26 = v23;
      swift_bridgeObjectRelease(a2);
      if (qword_1002A5DE0 != -1)
        swift_once(&qword_1002A5DE0, sub_1000A5688);
      v110 = a1;
      v27 = sub_10006F07C(v12, (uint64_t)qword_1002A5DE8);
      v28 = swift_bridgeObjectRetain_n(a2, 2);
      v109 = (_QWORD *)v27;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v114 = v32;
        *(_DWORD *)v31 = 136315138;
        swift_bridgeObjectRetain(a2);
        v113 = sub_10006C790(v110, a2, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ModifySubscriptions zone subscribed with %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      HIBYTE(v118) = 1;
      v85 = v116;
      v86 = v117;
      v87 = v118;
      v88 = (uint64_t *)v111;
      swift_beginAccess(v111, &v114, 33, 0);
      v89 = v86;
      v90 = *v88;
      swift_bridgeObjectRetain(a2);
      v91 = v85;
      v92 = swift_isUniquelyReferenced_nonNull_native(v90);
      v113 = *v88;
      *v88 = 0x8000000000000000;
      sub_1000AB330((uint64_t)v85, (uint64_t)v86, v87 | 0x100, v110, a2, v92);
      v93 = *v88;
      *v88 = v113;
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v93);
      swift_endAccess(&v114);
      (*(void (**)(char *, _QWORD *, uint64_t))(v13 + 16))(v15, v109, v12);
      v94 = swift_bridgeObjectRetain_n(a2, 2);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.info.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        v97 = swift_slowAlloc(32, -1);
        v111 = swift_slowAlloc(96, -1);
        v113 = v111;
        *(_DWORD *)v97 = 136315650;
        swift_bridgeObjectRetain(a2);
        v114 = sub_10006C790(v110, a2, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v97 + 4, v97 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v97 + 12) = 2080;
        swift_beginAccess(&v116, &v114, 0, 0);
        v98 = 1702195828;
        if ((v118 & 1) == 0)
          v98 = 0x65736C6166;
        v99 = 0xE400000000000000;
        if ((v118 & 1) == 0)
          v99 = 0xE500000000000000;
        if (v118 == 2)
          v100 = 45;
        else
          v100 = v98;
        if (v118 == 2)
          v101 = 0xE100000000000000;
        else
          v101 = v99;
        v112 = sub_10006C790(v100, v101, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v97 + 14, v97 + 22);
        swift_bridgeObjectRelease(v101);
        *(_WORD *)(v97 + 22) = 2080;
        v102 = 0x65736C6166;
        if ((v118 & 0x100) != 0)
          v102 = 1702195828;
        v103 = 0xE500000000000000;
        if ((v118 & 0x100) != 0)
          v103 = 0xE400000000000000;
        if (HIBYTE(v118) == 2)
          v104 = 45;
        else
          v104 = v102;
        if (HIBYTE(v118) == 2)
          v105 = 0xE100000000000000;
        else
          v105 = v103;
        v112 = sub_10006C790(v104, v105, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v97 + 24, v97 + 32);
        swift_bridgeObjectRelease(v105);
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "sub action %s: created: %s subscribed: %s", (uint8_t *)v97, 0x20u);
        v106 = v111;
        swift_arrayDestroy(v111, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v97, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

      return;
    }
    swift_bridgeObjectRelease(a2);
  }
  swift_endAccess(&v114);
  if (qword_1002A5DE0 != -1)
    swift_once(&qword_1002A5DE0, sub_1000A5688);
  sub_10006F07C(v12, (uint64_t)qword_1002A5DE8);
  v69 = swift_bridgeObjectRetain_n(a2, 2);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = a1;
    v74 = swift_slowAlloc(32, -1);
    v114 = v74;
    *(_DWORD *)v72 = 136315138;
    swift_bridgeObjectRetain(a2);
    v116 = (id)sub_10006C790(v73, a2, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v72 + 4, v72 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "ModifySubscriptions zone not found %s", v72, 0xCu);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v72, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

uint64_t sub_1000AA3A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000AA3D0(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  uint64_t v4;

  sub_1000A9634(a1, a2, a3, a4 & 1, *(char **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

void sub_1000AA3DC(uint64_t a1, char a2)
{
  sub_1000AA3F8(a1, a2, "ModifySubscriptions modifySubscriptionsResultBlock failed with %@", (uint64_t (*)(void))&static os_log_type_t.info.getter, "ModifySubscriptions success");
}

void sub_1000AA3F8(uint64_t a1, char a2, const char *a3, uint64_t (*a4)(void), const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *oslog;
  uint64_t v25;
  uint64_t v26;

  if ((a2 & 1) != 0)
  {
    v14 = *(void **)(v5 + 16);
    swift_errorRetain(a1);
    if (qword_1002A5DE0 != -1)
      swift_once(&qword_1002A5DE0, sub_1000A5688);
    v15 = type metadata accessor for Logger(0);
    sub_10006F07C(v15, (uint64_t)qword_1002A5DE8);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a1);
      v21 = _swift_stdlib_bridgeErrorToNSError(a1);
      v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
      *v20 = v21;
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, a3, v19, 0xCu);
      v22 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
    }

    v23 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v14, "setError:", v23);

    sub_10006F094(a1, 1);
  }
  else
  {
    if (qword_1002A5DE0 != -1)
      swift_once(&qword_1002A5DE0, sub_1000A5688);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10006F07C(v8, (uint64_t)qword_1002A5DE8);
    oslog = Logger.logObject.getter(v9);
    v10 = a4();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, a5, v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

  }
}

uint64_t sub_1000AA6BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000AA6F0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[24];

  v2 = v0[2];
  v1 = (void *)v0[3];
  v3 = v0[4];
  swift_beginAccess(v2 + 16, v14, 0, 0);
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v4);
  sub_1000AB6BC(v5, (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))sub_1000AAFE4);
  swift_bridgeObjectRelease(v4);
  if (qword_1002A5DE0 != -1)
    swift_once(&qword_1002A5DE0, sub_1000A5688);
  v6 = type metadata accessor for Logger(0);
  sub_10006F07C(v6, (uint64_t)qword_1002A5DE8);
  v7 = swift_retain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    swift_beginAccess(v2 + 16, v13, 0, 0);
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v10 + 4, v10 + 12);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "zones updates %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release(v2);
  }

  v11 = objc_msgSend(v1, "operationQueue");
  objc_msgSend(v11, "addOperation:", v3);

}

uint64_t sub_1000AA8C0(uint64_t a1, unint64_t a2, void *a3, void *a4, __int16 a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, unint64_t, uint64_t (*)(id), uint64_t, __n128);
  id v45;
  id v46;
  __n128 v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;

  v57 = a6;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A5DE0 != -1)
    swift_once(&qword_1002A5DE0, sub_1000A5688);
  v15 = sub_10006F07C(v11, (uint64_t)qword_1002A5DE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  v16 = a4;
  v56 = v11;
  v17 = v16;
  v58 = a3;
  v18 = a3;
  v19 = v17;
  v20 = v18;
  v21 = v19;
  swift_bridgeObjectRetain_n(a2, 2);
  v22 = v20;
  v23 = v21;
  v24 = v22;
  v25 = v12;
  v26 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.info.getter(v26);
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v50 = HIBYTE(a5);
    v55 = a1;
    v29 = swift_slowAlloc(32, -1);
    v52 = v28;
    v30 = v29;
    v51 = swift_slowAlloc(96, -1);
    v60 = v51;
    *(_DWORD *)v30 = 136315650;
    v54 = a4;
    v31 = a5;
    swift_bridgeObjectRetain(a2);
    v59 = sub_10006C790(v55, a2, &v60);
    v53 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v30 + 12) = 2080;
    v32 = 1702195828;
    if ((a5 & 1) == 0)
      v32 = 0x65736C6166;
    v33 = 0xE400000000000000;
    if ((a5 & 1) == 0)
      v33 = 0xE500000000000000;
    if (a5 == 2)
      v34 = 45;
    else
      v34 = v32;
    if (a5 == 2)
      v35 = 0xE100000000000000;
    else
      v35 = v33;
    v59 = sub_10006C790(v34, v35, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 14, v30 + 22);

    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v30 + 22) = 2080;
    v36 = 0x65736C6166;
    if ((v31 & 0x100) != 0)
      v36 = 1702195828;
    v37 = 0xE500000000000000;
    if ((v31 & 0x100) != 0)
      v37 = 0xE400000000000000;
    if (v50 == 2)
      v38 = 45;
    else
      v38 = v36;
    if (v50 == 2)
      v39 = 0xE100000000000000;
    else
      v39 = v37;
    v59 = sub_10006C790(v38, v39, &v60);
    a1 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 24, v30 + 32);

    v40 = v39;
    a5 = v31;
    a4 = v54;
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v52, "updating zone %s: created: %s subscribed: %s", (uint8_t *)v30, 0x20u);
    v41 = v51;
    swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v56);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v56);
  }
  v42 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler);
  v43 = swift_allocObject(&unk_1002426C0, 56, 7);
  *(_QWORD *)(v43 + 16) = v58;
  *(_QWORD *)(v43 + 24) = a4;
  *(_WORD *)(v43 + 32) = a5;
  *(_QWORD *)(v43 + 40) = a1;
  *(_QWORD *)(v43 + 48) = a2;
  v44 = *(void (**)(uint64_t, unint64_t, uint64_t (*)(id), uint64_t, __n128))(*(_QWORD *)v42 + 120);
  v45 = v24;
  v46 = v23;
  v47 = swift_bridgeObjectRetain(a2);
  v44(a1, a2, sub_1000AB8F0, v43, v47);
  return swift_release(v43);
}

void KTZoneSetup.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTZoneSetup", 25, "init()", 6, 0);
  __break(1u);
}

id KTZoneSetup.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTZoneSetup();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void destroy for KTZoneSetup.ZoneAction(id *a1)
{

}

uint64_t _s13transparencyd11KTZoneSetupC10ZoneActionVwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for KTZoneSetup.ZoneAction(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTZoneSetup.ZoneAction(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 18))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KTZoneSetup.ZoneAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTZoneSetup.ZoneAction()
{
  return &type metadata for KTZoneSetup.ZoneAction;
}

uint64_t sub_1000AAFE4(uint64_t a1, unint64_t a2, void *a3, void *a4, __int16 a5)
{
  uint64_t v5;

  return sub_1000AA8C0(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

Swift::Int sub_1000AAFEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  char v45;
  char v46;
  _QWORD v47[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_1002A0308);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v5);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v42)
              goto LABEL_36;
            v25 = v43[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v36 = *(void **)v34;
    v35 = *(void **)(v34 + 8);
    v37 = *(_BYTE *)(v34 + 16);
    v46 = *(_BYTE *)(v34 + 17);
    if ((v45 & 1) == 0)
    {
      v38 = v35;
      swift_bridgeObjectRetain(v32);
      v39 = v36;
    }
    Hasher.init(_seed:)(v47);
    String.hash(into:)(v47, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_QWORD *)v20 = v36;
    *(_QWORD *)(v20 + 8) = v35;
    *(_BYTE *)(v20 + 16) = v37;
    *(_BYTE *)(v20 + 17) = v46;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1000AB330(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  char v26;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_100072E70(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 24 * v16;
        v24 = *(void **)(v23 + 8);

        *(_QWORD *)v23 = a1;
        *(_QWORD *)(v23 + 8) = a2;
        *(_WORD *)(v23 + 16) = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_1000AB4E8();
      goto LABEL_7;
    }
    sub_1000AAFEC(v19, a6 & 1);
    v25 = sub_100072E70(a4, a5);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000AB48C(v16, a4, a5, a1, a2, a3, v22);
      swift_bridgeObjectRetain(a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t sub_1000AB48C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a7[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(_WORD *)(v8 + 16) = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

id sub_1000AB4E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_10006F03C(&qword_1002A0308);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v23 = *(void **)v21;
    v22 = *(void **)(v21 + 8);
    LOWORD(v21) = *(_WORD *)(v21 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = v18;
    v24[1] = v19;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v23;
    *(_QWORD *)(v25 + 8) = v22;
    *(_WORD *)(v25 + 16) = v21;
    v26 = v22;
    swift_bridgeObjectRetain(v19);
    result = v23;
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000AB6BC(uint64_t a1, void (*a2)(uint64_t, uint64_t, void *, void *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t i;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v26;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v26)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v26 = i;
      v8 = v7 | (i << 6);
      goto LABEL_5;
    }
    v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      return swift_release(a1);
    v19 = *(_QWORD *)(v22 + 8 * v18);
    v20 = i + 1;
    if (!v19)
    {
      v20 = i + 2;
      if (i + 2 >= v23)
        return swift_release(a1);
      v19 = *(_QWORD *)(v22 + 8 * v20);
      if (!v19)
      {
        v20 = i + 3;
        if (i + 3 >= v23)
          return swift_release(a1);
        v19 = *(_QWORD *)(v22 + 8 * v20);
        if (!v19)
        {
          v20 = i + 4;
          if (i + 4 >= v23)
            return swift_release(a1);
          v19 = *(_QWORD *)(v22 + 8 * v20);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v19 - 1) & v19;
    v26 = v20;
    v8 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_5:
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(a1 + 56) + 24 * v8;
    v13 = *(void **)v12;
    v14 = *(void **)(v12 + 8);
    v15 = *(unsigned __int16 *)(v12 + 16);
    swift_bridgeObjectRetain(v11);
    v16 = v13;
    v17 = v14;
    a2(v10, v11, v13, v14, v15);

    result = swift_bridgeObjectRelease(v11);
  }
  v21 = i + 5;
  if (i + 5 >= v23)
    return swift_release(a1);
  v19 = *(_QWORD *)(v22 + 8 * v21);
  if (v19)
  {
    v20 = i + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v23)
      return swift_release(a1);
    v19 = *(_QWORD *)(v22 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000AB8BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AB8F0(id a1)
{
  uint64_t v1;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned __int8 *)(v1 + 32);
  v4 = *(unsigned __int8 *)(v1 + 33);
  v6 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  if (v3 != 2)
    objc_msgSend(a1, "setZoneCreated:", v3 & 1);
  if (v4 != 2)
    objc_msgSend(a1, "setZoneSubscribed:", v4 & 1);
  if (qword_1002A5DE0 != -1)
    swift_once(&qword_1002A5DE0, sub_1000A5688);
  v7 = type metadata accessor for Logger(0);
  sub_10006F07C(v7, (uint64_t)qword_1002A5DE8);
  v8 = a1;
  swift_bridgeObjectRetain_n(v5, 2);
  v9 = v8;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(v5);
    v18 = sub_10006C790(v6, v5, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    *(_WORD *)(v12 + 12) = 2112;
    if (a1)
    {
      v18 = (uint64_t)v9;
      v15 = v9;
    }
    else
    {
      v18 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 14, v12 + 22);
    *v13 = a1;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "zone final status %s %@", (uint8_t *)v12, 0x16u);
    v16 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v13, 1, v16);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v5, 2);

  }
  return 1;
}

uint64_t sub_1000ABB8C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000ABB94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_1000ABBC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t sub_1000ABBEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000ABC28 + 4 * byte_100215130[a1]))(0xD000000000000012, 0x80000001001DFD30);
}

uint64_t sub_1000ABC28()
{
  return 0x644963696C627570;
}

unint64_t sub_1000ABC4C()
{
  return 0xD000000000000011;
}

uint64_t sub_1000ABC68()
{
  return 0x746E656449736469;
}

uint64_t sub_1000ABC8C()
{
  unsigned __int8 *v0;

  return sub_1000ABBEC(*v0);
}

uint64_t sub_1000ABC94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B0328(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000ABCB8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000ABCC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABEB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ABCEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABEB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ABD14(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;

  v3 = v1;
  v5 = sub_10006F03C((uint64_t *)&unk_1002A0320);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000754FC(a1, v9);
  v11 = sub_1000ABEB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for StaticKeyData.CodingKeys, &type metadata for StaticKeyData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v26, v5);
  if (!v2)
  {
    v25 = v3[2];
    v24 = 1;
    v14 = sub_10006F03C((uint64_t *)&unk_10029F350);
    v15 = sub_100075AE4((unint64_t *)&unk_1002A0330, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, v14, v15);
    v16 = v3[3];
    v17 = v3[4];
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    v18 = v3[5];
    v19 = v3[6];
    v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000ABEB4()
{
  unint64_t result;

  result = qword_1002A62B0[0];
  if (!qword_1002A62B0[0])
  {
    result = swift_getWitnessTable(&unk_1002152C4, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002A62B0);
  }
  return result;
}

double sub_1000ABEF8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000B04F8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000ABF44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_1000ABF58(_QWORD *a1)
{
  return sub_1000ABD14(a1);
}

void sub_1000ABF6C()
{
  qword_1002A7EA8 = 1635017060;
  unk_1002A7EB0 = 0xE400000000000000;
}

uint64_t *sub_1000ABF88()
{
  if (qword_1002A6280 != -1)
    swift_once(&qword_1002A6280, sub_1000ABF6C);
  return &qword_1002A7EA8;
}

void sub_1000ABFC8()
{
  qword_1002A7EB8 = 0x654B636974617453;
  unk_1002A7EC0 = 0xE900000000000079;
}

uint64_t *sub_1000ABFF0()
{
  if (qword_1002A6288 != -1)
    swift_once(&qword_1002A6288, sub_1000ABFC8);
  return &qword_1002A7EB8;
}

uint64_t sub_1000AC030()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A6298);
  sub_10006F07C(v0, (uint64_t)qword_1002A6298);
  return Logger.init(transparencyCategory:)(0x61747364756F6C63, 0xEE0079656B636974);
}

uint64_t sub_1000AC098()
{
  uint64_t v0;

  if (qword_1002A6288 != -1)
    swift_once(&qword_1002A6288, sub_1000ABFC8);
  v0 = qword_1002A7EB8;
  swift_bridgeObjectRetain(unk_1002A7EC0);
  return v0;
}

_QWORD *sub_1000AC0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v4 = v3;
  v8 = (_QWORD *)swift_allocObject(v4, 56, 7);
  if (qword_1002A6288 != -1)
    swift_once(&qword_1002A6288, sub_1000ABFC8);
  v9 = unk_1002A7EC0;
  v8[2] = qword_1002A7EB8;
  v8[3] = v9;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  swift_bridgeObjectRetain(v9);
  return v8;
}

_QWORD *sub_1000AC180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;

  if (qword_1002A6288 != -1)
    swift_once(&qword_1002A6288, sub_1000ABFC8);
  v7 = unk_1002A7EC0;
  v3[2] = qword_1002A7EB8;
  v3[3] = v7;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  swift_bridgeObjectRetain(v7);
  return v3;
}

uint64_t sub_1000AC1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[6];

  v4 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for SHA256Digest(0);
  v18[3] = *(_QWORD *)(v5 - 8);
  v18[4] = v5;
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v18[2] = (char *)v18 - v7;
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v18[5] = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v14 >> 60 != 15)
  {
    v15 = sub_10006F284((unint64_t *)&unk_10029F380, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v4, v15);
    v16 = (char *)&loc_1000AC37C + *((int *)qword_1000AC740 + (v14 >> 62));
    v18[0] = v14;
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000AC750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  void *v38;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    v3 = swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v2, v3);
    v5 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    v6 = sub_1000B0BEC();
    isUniquelyReferenced_nonNull_native = (char *)Set.Iterator.init(_cocoa:)(v37, v4, v5, v6);
    v1 = v37[0];
    v35 = v37[1];
    v9 = v37[2];
    v8 = v37[3];
    v10 = v37[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v32 = v9;
  v34 = (unint64_t)(v9 + 64) >> 6;
  v33 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v14 = v8;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v17 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v17)
      goto LABEL_41;
    v18 = v17;
    v36 = v17;
    v19 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v38;
    swift_unknownObjectRelease(v18);
    if (!v20)
      goto LABEL_41;
LABEL_34:
    v24 = objc_msgSend(v20, "uri", v32);
    if (v24)
    {
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v33);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = sub_10007BA1C(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
        v33 = isUniquelyReferenced_nonNull_native;
      }
      v30 = *((_QWORD *)v33 + 2);
      v29 = *((_QWORD *)v33 + 3);
      if (v30 >= v29 >> 1)
      {
        isUniquelyReferenced_nonNull_native = sub_10007BA1C((char *)(v29 > 1), v30 + 1, 1, v33);
        v33 = isUniquelyReferenced_nonNull_native;
      }
      *((_QWORD *)v33 + 2) = v30 + 1;
      v31 = &v33[16 * v30];
      *((_QWORD *)v31 + 4) = v26;
      *((_QWORD *)v31 + 5) = v28;
    }
    else
    {

    }
  }
  if (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v8 << 6);
LABEL_33:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_41;
    goto LABEL_34;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v34)
      goto LABEL_41;
    v22 = *(_QWORD *)(v35 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v34)
        goto LABEL_41;
      v22 = *(_QWORD *)(v35 + 8 * v8);
      if (!v22)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v34)
          goto LABEL_41;
        v22 = *(_QWORD *)(v35 + 8 * v8);
        if (!v22)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v34)
            goto LABEL_41;
          v22 = *(_QWORD *)(v35 + 8 * v8);
          if (!v22)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v34)
              goto LABEL_41;
            v22 = *(_QWORD *)(v35 + 8 * v8);
            if (!v22)
            {
              v23 = v14 + 6;
              while (v34 != v23)
              {
                v22 = *(_QWORD *)(v35 + 8 * v23++);
                if (v22)
                {
                  v8 = v23 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              sub_100097304(v1);
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v10 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v8 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

id sub_1000ACABC(void *a1)
{
  uint64_t v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(a1, "publicId");
  if (result)
  {
    v3 = result;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v6 = v5;

    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 168))(v4, v6);
    swift_bridgeObjectRelease(v6);
    return (id)v7;
  }
  return result;
}

uint64_t sub_1000ACB2C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v2 = v1;
  if (qword_1002A6290 != -1)
    swift_once(&qword_1002A6290, sub_1000AC030);
  v4 = type metadata accessor for Logger(0);
  sub_10006F07C(v4, (uint64_t)qword_1002A6298);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void *)swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "recordID");
    v11 = objc_msgSend(v10, "recordName");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v21 = sub_10006C790(v12, v14, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud static key: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v23 = &_swiftEmptySetSingleton;
  v15 = (void *)(*(uint64_t (**)(void))(*v2 + 136))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000B07F0);

  v16 = v21;
  v17 = v23;
  if (*((_QWORD *)v23 + 2) && (v18 = (void *)v2[6]) != 0)
  {
    swift_bridgeObjectRetain(v23);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v18, "uriNeedsUpdate:", isa);
    swift_bridgeObjectRelease(v17);

  }
  else
  {
    swift_bridgeObjectRelease(v23);
  }
  return v16;
}

void sub_1000ACDFC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  unsigned int v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSString v75;
  NSString v76;
  NSString v77;
  id v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Class isa;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  void *v97;
  id v98;
  NSString v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSSet v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(__n128);
  __n128 v123;
  void *v124;
  id v125;
  NSString v126;
  id v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  void *v132;
  id v133;
  NSSet v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  int64_t v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  char *v150;
  void *i;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v152 = a3;
  v153 = a2;
  v140 = a4;
  v141 = type metadata accessor for Logger(0);
  v142 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v150 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(CloudStaticKey), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v7 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1002143C0;
  v145 = a1;
  v9 = objc_msgSend(a1, "recordID");
  v10 = objc_msgSend(v9, "recordName");

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10008189C();
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  v14 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v8);
  objc_msgSend(v6, "setPredicate:", v14);

  v156 = 0;
  v139 = v6;
  v15 = objc_msgSend(v6, "execute:", &v156);
  v16 = v156;
  if (!v15)
  {
    v23 = v156;
    v24 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v25);
    v26 = swift_errorRelease(v24);
    v149 = 0;
LABEL_14:
    v29 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 136))(v26);
    v30 = objc_msgSend(objc_allocWithZone((Class)CloudStaticKey), "initWithContext:", v29);

    if (!v30)
    {
      v62 = 0;
      goto LABEL_36;
    }
    v22 = v30;
    v31 = objc_msgSend(v145, "recordID");
    v32 = objc_msgSend(v31, "recordName");

    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v34 = v33;
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
    }
    objc_msgSend(v22, "setRecordID:", v32);

    goto LABEL_18;
  }
  v17 = v15;
  v18 = sub_10006D6DC(0, &qword_1002A0528, off_100238D68);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);
  v20 = v16;

  if (!((unint64_t)v19 >> 62))
  {
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_13;
  }
  if (v19 < 0)
    v27 = v19;
  else
    v27 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v19);
  if (!v28)
  {
LABEL_13:
    v26 = swift_bridgeObjectRelease(v19);
    goto LABEL_14;
  }
LABEL_4:
  if ((v19 & 0xC000000000000001) != 0)
    goto LABEL_97;
  if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    __break(1u);
  v21 = *(id *)(v19 + 32);
LABEL_7:
  v22 = v21;
  swift_bridgeObjectRelease(v19);
LABEL_18:
  v35 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = v22;
  v138 = JSONDecoder.init()();
  v19 = (uint64_t)objc_msgSend(v145, "encryptedValues");
  if (qword_1002A6280 != -1)
    goto LABEL_95;
  while (1)
  {
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend((id)v19, "objectForKeyedSubscript:", v37);
    swift_unknownObjectRelease(v19);

    v39 = v142;
    if (!v38)
      break;
    v154 = (uint64_t)v38;
    v40 = sub_10006F03C(&qword_10029F728);
    v41 = swift_dynamicCast(&v156, &v154, v40, &type metadata for Data, 6);
    v42 = v150;
    if ((v41 & 1) == 0)
      goto LABEL_24;
    v43 = (uint64_t)v156;
    v44 = v157;
    v45 = sub_1000B20DC();
    v46 = v149;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for StaticKeyData, v43, v44, &type metadata for StaticKeyData, v45);
    if (v46)
    {
      sub_10006F22C(v43, v44);
      swift_errorRelease(v46);
      v149 = 0;
      v39 = v142;
      goto LABEL_24;
    }
    v149 = 0;
    v72 = v158;
    v73 = v159;
    v74 = v160;
    v146 = v157;
    v75 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "setPublicId:", v75);

    if (v74)
    {
      swift_bridgeObjectRetain(v74);
      v76 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v74);
    }
    else
    {
      v76 = 0;
    }
    objc_msgSend(v36, "setContactIdentifier:", v76);

    if (v73)
    {
      swift_bridgeObjectRetain(v73);
      v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v73);
    }
    else
    {
      v77 = 0;
    }
    objc_msgSend(v36, "setContactExternalURI:", v77);

    v78 = objc_msgSend(v36, "uris");
    if (v78)
    {
      v79 = v78;
      v80 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
      v81 = sub_1000B0BEC();
      v82 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v79, v80, v81);

      v83 = v149;
      sub_1000AC750(v82);
      v19 = v84;
      v149 = v83;
      swift_bridgeObjectRelease(v82);
    }
    else
    {
      v19 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v85 = sub_10009A188(v19);
    swift_bridgeObjectRelease(v19);
    v154 = v85;
    v86 = v72;
    v87 = *(_QWORD *)(v72 + 16);
    v147 = v44;
    v148 = v36;
    v143 = v43;
    if (v87)
    {
      v144 = v86;
      v136 = v73;
      v137 = v74;
      isa = (Class)objc_msgSend(v36, "uris");
      if (!isa)
      {
        sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
        sub_1000B0BEC();
        isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v36, "setUris:", isa);
      }

      v89 = v144;
      swift_bridgeObjectRetain_n(v144, 2);
      v90 = (uint64_t *)(v89 + 40);
      do
      {
        v92 = *(v90 - 1);
        v93 = *v90;
        v94 = v154;
        swift_bridgeObjectRetain(*v90);
        swift_bridgeObjectRetain(v94);
        v95 = sub_1000ADD14(v92, v93, v94);
        v96 = swift_bridgeObjectRelease(v94);
        if ((v95 & 1) != 0)
        {
          sub_1000997F4(v92, v93);
          v19 = v91;
        }
        else
        {
          v97 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 136))(v96);
          v98 = objc_msgSend(objc_allocWithZone((Class)CloudStaticKeyURI), "initWithContext:", v97);

          v99 = String._bridgeToObjectiveC()();
          objc_msgSend(v98, "setUri:", v99);

          v100 = objc_msgSend(v36, "uris");
          if (v100)
          {
            v101 = v100;
            v102 = v98;
            v103 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
            v104 = sub_1000B0BEC();
            v105 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v101, v103, v104);

            v155 = v105;
            i = v102;
            sub_1000AF0CC((Swift::Int *)&v156, v102);
            v106 = v155;
            if (v155)
            {
              v107.super.isa = Set._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v106);
            }
            else
            {
              v107.super.isa = 0;
            }
            v36 = v148;
            objc_msgSend(v148, "setUris:", v107.super.isa);

            v44 = v147;
            v98 = i;
          }
          else
          {
            objc_msgSend(v36, "setUris:", 0);
          }
          sub_1000997F4(v92, v93);
          swift_bridgeObjectRelease(v108);
          swift_bridgeObjectRetain(v93);
          sub_100091268((uint64_t *)&v156, v92, v93);

          v19 = v157;
        }
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v19);
        v90 += 2;
        --v87;
      }
      while (v87);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease_n(v144, 3);
      swift_bridgeObjectRelease(v136);
      swift_bridgeObjectRelease(v137);
      v85 = v154;
      v43 = v143;
    }
    else
    {
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v74);
    }
    v109 = *(_QWORD *)(v85 + 56);
    v144 = v85 + 56;
    v110 = 1 << *(_BYTE *)(v85 + 32);
    v111 = -1;
    if (v110 < 64)
      v111 = ~(-1 << v110);
    v112 = v111 & v109;
    v146 = (unint64_t)(v110 + 63) >> 6;
    swift_bridgeObjectRetain(v85);
    v113 = 0;
    for (i = (void *)v85; ; v85 = (uint64_t)i)
    {
      if (v112)
      {
        v114 = __clz(__rbit64(v112));
        v112 &= v112 - 1;
        v115 = v114 | (v113 << 6);
        goto LABEL_82;
      }
      if (__OFADD__(v113++, 1))
        break;
      if (v113 >= v146)
      {
        v39 = v142;
        v42 = v150;
LABEL_93:
        swift_release(v85);
        v47 = String._bridgeToObjectiveC()();
        objc_msgSend(v36, "setCkstate:", v47);
        sub_10006F22C(v43, v44);
        swift_bridgeObjectRelease(v85);
        goto LABEL_25;
      }
      v117 = *(_QWORD *)(v144 + 8 * v113);
      v42 = v150;
      if (!v117)
      {
        v118 = v113 + 1;
        if (v113 + 1 >= v146)
          goto LABEL_92;
        v117 = *(_QWORD *)(v144 + 8 * v118);
        if (!v117)
        {
          v118 = v113 + 2;
          if (v113 + 2 >= v146)
            goto LABEL_92;
          v117 = *(_QWORD *)(v144 + 8 * v118);
          if (!v117)
          {
            v118 = v113 + 3;
            if (v113 + 3 >= v146)
            {
LABEL_92:
              v39 = v142;
              goto LABEL_93;
            }
            v117 = *(_QWORD *)(v144 + 8 * v118);
            if (!v117)
            {
              while (1)
              {
                v113 = v118 + 1;
                if (__OFADD__(v118, 1))
                  break;
                if (v113 >= v146)
                  goto LABEL_92;
                v117 = *(_QWORD *)(v144 + 8 * v113);
                ++v118;
                if (v117)
                  goto LABEL_81;
              }
              __break(1u);
LABEL_97:
              v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
              goto LABEL_7;
            }
          }
        }
        v113 = v118;
      }
LABEL_81:
      v112 = (v117 - 1) & v117;
      v115 = __clz(__rbit64(v117)) + (v113 << 6);
LABEL_82:
      v119 = (uint64_t *)(*(_QWORD *)(v85 + 48) + 16 * v115);
      v121 = *v119;
      v120 = v119[1];
      v122 = *(uint64_t (**)(__n128))(*(_QWORD *)v153 + 136);
      v123 = swift_bridgeObjectRetain(v120);
      v124 = (void *)v122(v123);
      v125 = objc_msgSend(objc_allocWithZone((Class)CloudStaticKeyURI), "initWithContext:", v124);

      v126 = String._bridgeToObjectiveC()();
      objc_msgSend(v125, "setUri:", v126);

      v127 = objc_msgSend(v36, "uris");
      if (v127)
      {
        v128 = v127;
        v129 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
        v130 = sub_1000B0BEC();
        v131 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v128, v129, v130);

        v156 = v131;
        v132 = (void *)sub_1000AF368(v125);
        v133 = v156;
        if (v156)
        {
          v134.super.isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v133);
        }
        else
        {
          v134.super.isa = 0;
        }
        v36 = v148;
        objc_msgSend(v148, "setUris:", v134.super.isa);

        v43 = v143;
        v44 = v147;
      }
      else
      {
        objc_msgSend(v36, "setUris:", 0);
      }
      v19 = v152;
      sub_100091268((uint64_t *)&v156, v121, v120);

      swift_bridgeObjectRelease(v157);
    }
    __break(1u);
LABEL_95:
    swift_once(&qword_1002A6280, sub_1000ABF6C);
  }
  v42 = v150;
LABEL_24:
  v47 = String._bridgeToObjectiveC()();
  objc_msgSend(v36, "setCkstate:", v47);
LABEL_25:

  v48 = v141;
  if (qword_1002A6290 != -1)
    swift_once(&qword_1002A6290, sub_1000AC030);
  v49 = sub_10006F07C(v48, (uint64_t)qword_1002A6298);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v49, v48);
  v50 = v36;
  v51 = v39;
  v52 = v50;
  v53 = Logger.logObject.getter(v50);
  v54 = static os_log_type_t.info.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = (void *)swift_slowAlloc(32, -1);
    v156 = v56;
    *(_DWORD *)v55 = 136315138;
    v57 = objc_msgSend(v52, "publicId");
    if (v57)
    {
      v58 = v57;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v61 = v60;

    }
    else
    {
      v61 = 0xE100000000000000;
      v59 = 45;
    }
    v154 = sub_10006C790(v59, v61, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v55 + 4, v55 + 12);

    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "merged cloud device: %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    (*(void (**)(char *, uint64_t))(v142 + 8))(v150, v141);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v48);
  }
  v63 = v153;
  v64 = (*(uint64_t (**)(id, id))(*(_QWORD *)v153 + 248))(v52, v145);
  v65 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 136))(v64);
  v156 = 0;
  v66 = objc_msgSend(v65, "save:", &v156);

  v67 = v156;
  if (v66)
  {
    v68 = v156;
    swift_release(v138);

    v62 = 1;
LABEL_36:
    v52 = v139;
  }
  else
  {
    v69 = v156;
    v70 = _convertNSErrorToError(_:)(v67);

    swift_willThrow(v71);
    swift_release(v138);

    swift_errorRelease(v70);
    v149 = 0;
    v62 = 1;
  }

  *v140 = v62;
}

uint64_t sub_1000ADD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_1000ADE48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  _QWORD v33[5];
  uint64_t v34;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    v3 = swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v2, v3);
    v5 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    v6 = sub_1000B0BEC();
    v7 = Set.Iterator.init(_cocoa:)(v33, v4, v5, v6);
    v1 = v33[0];
    v31 = v33[1];
    v8 = v33[2];
    v9 = v33[3];
    v10 = v33[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v30 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v7);
    if (!v17)
      goto LABEL_38;
    v18 = v17;
    v34 = v17;
    v19 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(v32, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = (id)v32[0];
    swift_unknownObjectRelease(v18);
    v16 = v9;
    v14 = v10;
    if (!v20)
      goto LABEL_38;
LABEL_36:
    v24 = objc_msgSend(v20, "uri");
    if (v24)
    {
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      sub_100091268(v32, v26, v28);
      v29 = v32[1];

      v7 = (_QWORD *)swift_bridgeObjectRelease(v29);
    }
    else
    {

    }
    v9 = v16;
    v10 = v14;
  }
  if (v10)
  {
    v14 = (v10 - 1) & v10;
    v15 = __clz(__rbit64(v10)) | (v9 << 6);
    v16 = v9;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_38;
    goto LABEL_36;
  }
  v21 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v21 >= v30)
      goto LABEL_38;
    v22 = *(_QWORD *)(v31 + 8 * v21);
    v16 = v9 + 1;
    if (!v22)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v30)
        goto LABEL_38;
      v22 = *(_QWORD *)(v31 + 8 * v16);
      if (!v22)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v30)
          goto LABEL_38;
        v22 = *(_QWORD *)(v31 + 8 * v16);
        if (!v22)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v30)
            goto LABEL_38;
          v22 = *(_QWORD *)(v31 + 8 * v16);
          if (!v22)
          {
            v16 = v9 + 5;
            if (v9 + 5 >= v30)
              goto LABEL_38;
            v22 = *(_QWORD *)(v31 + 8 * v16);
            if (!v22)
            {
              v23 = v9 + 6;
              while (v30 != v23)
              {
                v22 = *(_QWORD *)(v31 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_38:
              sub_100097304(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_1000AE160(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  _QWORD *v10;
  void *v11;
  Class isa;
  _QWORD aBlock[5];
  uint64_t v14;
  _QWORD *v15;

  v15 = &_swiftEmptySetSingleton;
  v3 = (*(uint64_t (**)(void))(*v1 + 136))();
  v4 = (_QWORD *)swift_allocObject(&unk_100242818, 40, 7);
  v4[2] = a1;
  v4[3] = &v15;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_100242840, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1000B0810;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_10007025C;
  v14 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100242858;
  v6 = _Block_copy(aBlock);
  v7 = v14;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend((id)v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 123, 162, 32, 1);
  result = swift_release(v5);
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v15;
    if (v15[2])
    {
      v11 = (void *)v1[6];
      if (v11)
      {
        swift_bridgeObjectRetain(v15);
        isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v10);
        objc_msgSend(v11, "uriNeedsUpdate:", isa);

        v10 = v15;
      }
    }
    swift_release(v4);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

Class sub_1000AE320(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Class isa;
  Swift::String v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t ObjectType;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;

  v3 = objc_msgSend(a1, "ckrecord");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  v8 = type metadata accessor for KTCloudRecords();
  isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v8 + 440))(v5, v7);
  sub_10006F218(v5, v7);
  if (!isa)
  {
    isa = (Class)(*(uint64_t (**)(void *))(*(_QWORD *)v1 + 176))(a1);
    if (!isa)
      return isa;
    sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v10._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
    isa = CKRecord.init(recordType:recordID:)(v10, (CKRecordID)isa).super.isa;
  }
  v11 = objc_msgSend(a1, "publicId");
  if (v11)
  {
    v12 = v11;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = objc_msgSend(a1, "uris");
    if (v15)
    {
      v16 = v15;
      v17 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
      v18 = sub_1000B0BEC();
      v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

      sub_1000AC750(v19);
      v21 = v20;
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = objc_msgSend(a1, "contactExternalURI");
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0;
    }
    v27 = objc_msgSend(a1, "contactIdentifier");
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = JSONEncoder.init()();
    v44 = v43;
    v45 = v14;
    v46 = v21;
    v47 = (_QWORD *)v24;
    v48 = v26;
    v49 = v29;
    v50 = v31;
    v34 = sub_1000B0BA8();
    v35 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v44, &type metadata for StaticKeyData, v34);
    v37 = v36;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v31);
    v38 = -[objc_class encryptedValues](isa, "encryptedValues");
    ObjectType = swift_getObjectType();
    if (qword_1002A6280 != -1)
      swift_once(&qword_1002A6280, sub_1000ABF6C);
    v40 = qword_1002A7EA8;
    v41 = unk_1002A7EB0;
    v47 = &type metadata for Data;
    v48 = &protocol witness table for Data;
    v44 = v35;
    v45 = v37;
    swift_bridgeObjectRetain(unk_1002A7EB0);
    sub_10006F1A0(v35, v37);
    CKRecordKeyValueSetting.subscript.setter(&v44, v40, v41, ObjectType);
    sub_10006F22C(v35, v37);
    swift_release(v33);
    swift_unknownObjectRelease(v38);
  }
  else
  {

    return 0;
  }
  return isa;
}

uint64_t sub_1000AE6C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  unsigned __int8 v11;

  v11 = 0;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = swift_allocObject(&unk_100242890, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_1002428B8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000B0C68;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_1002428D0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123, 211, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000AE810()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = swift_allocObject(&unk_100242908, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_100242930, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007EB80;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100242948;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123, 225, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1000AE964()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = swift_allocObject(&unk_100242980, 32, 7);
  *(_QWORD *)(v2 + 16) = &v11;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject(&unk_1002429A8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10007EBA8;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100074EF4;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_1002429C0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v1, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123, 243, 32, 1);
  result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1000AEAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v14[5];
  uint64_t v15;

  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 136))();
  v8 = (_QWORD *)swift_allocObject(&unk_1002429F8, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = v3;
  v9 = swift_allocObject(&unk_100242A20, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1000B0EB0;
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = sub_100074EF4;
  v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10007027C;
  v14[3] = &unk_100242A38;
  v10 = _Block_copy(v14);
  v11 = v15;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v3);
  swift_retain(v9);
  swift_release(v11);
  objc_msgSend(v7, "performBlockAndWait:", v10);

  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 123, 260, 32, 1);
  swift_release(v8);
  result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000AEC1C(void *a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  v4 = (_QWORD *)swift_allocObject(&unk_100242A70, 40, 7);
  v4[2] = a1;
  v4[3] = &v14;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_100242A98, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1000B14C8;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100074EF4;
  v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007027C;
  aBlock[3] = &unk_100242AB0;
  v6 = _Block_copy(aBlock);
  v7 = v13;
  v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 123, 282, 32, 1);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = v14;
    swift_release(v4);
    return v11;
  }
  return result;
}

uint64_t sub_1000AED7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = swift_allocObject(&unk_100242AE8, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1000B1A90;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_100074EF4;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10007027C;
  v6[3] = &unk_100242B00;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  objc_msgSend((id)v1, "performBlockAndWait:", v3);

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 123, 317, 32, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000AEE9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t sub_1000AEED0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_1000AEF0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_1000AEF34()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))() & 1;
}

uint64_t sub_1000AEF60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t sub_1000AEF88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t sub_1000AEFB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
}

uint64_t sub_1000AEFD8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))() & 1;
}

uint64_t sub_1000AF004()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t sub_1000AF02C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t sub_1000AF054()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t sub_1000AF07C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t sub_1000AF0A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t sub_1000AF0CC(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000AF53C(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_1000AF730(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_1000AF9CC((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1000AFA4C((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000AF368(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_1000AFFF0(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000AFBD0();
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_1000B0188(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

Swift::Int sub_1000AF53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    sub_10006F03C((uint64_t *)&unk_1002A0538);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v24 = v4;
    v6 = __CocoaSet.makeIterator()(a1, v5);
    v7 = __CocoaSet.Iterator.next()(v6);
    if (v7)
    {
      v8 = v7;
      v9 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
      do
      {
        v22 = v8;
        swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v4 = v24;
        v17 = *(_QWORD *)(v24 + 16);
        if (*(_QWORD *)(v24 + 24) <= v17)
        {
          sub_1000AF730(v17 + 1);
          v4 = v24;
        }
        v10 = v23;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v12 = v4 + 56;
        v13 = -1 << *(_BYTE *)(v4 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16) = v10;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaSet.Iterator.next()(result);
      }
      while (v8);
    }
    swift_release(v6);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000AF730(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006F03C((uint64_t *)&unk_1002A0538);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_1000AF9CC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1000AFA4C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000AF730(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000AFBD0();
      goto LABEL_14;
    }
    sub_1000AFD78(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

id sub_1000AFBD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10006F03C((uint64_t *)&unk_1002A0538);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1000AFD78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006F03C((uint64_t *)&unk_1002A0538);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000AFFF0(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000AF53C(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_1000B0188(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_1000B0188(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000B0328(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 0x644963696C627570 && a2 == 0xEE00797469746E65;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x644963696C627570, 0xEE00797469746E65, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x746E656449736469 && a2 == 0xED00007265696669
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656449736469, 0xED00007265696669, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001001DFD30)
  {
    v6 = 0x80000001001DFD30;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001DFD30, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_16;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001001DFD50)
  {
    swift_bridgeObjectRelease(0x80000001001DFD50);
    return 3;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001DFD50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000B04F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = sub_10006F03C(&qword_1002A0548);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000754FC(a1, v9);
  v11 = sub_1000ABEB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StaticKeyData.CodingKeys, &type metadata for StaticKeyData.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10006F0F8(a1);
  v36 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  v14 = v13;
  v31 = v12;
  v15 = sub_10006F03C((uint64_t *)&unk_10029F350);
  v35 = 1;
  v16 = sub_100075AE4((unint64_t *)&unk_1002A0550, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v17 = swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v15, &v35, v5, v15, v16, v17);
  v34 = 2;
  v30 = v32;
  swift_bridgeObjectRetain(v32);
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
  v29 = v18;
  v33 = 3;
  swift_bridgeObjectRetain(v18);
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
  v21 = v20;
  v22 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v21);
  sub_10006F0F8(a1);
  swift_bridgeObjectRelease(v21);
  v23 = v29;
  swift_bridgeObjectRelease(v29);
  v24 = v30;
  swift_bridgeObjectRelease(v30);
  result = swift_bridgeObjectRelease(v14);
  *a2 = v31;
  a2[1] = v14;
  v26 = v28;
  a2[2] = v24;
  a2[3] = v26;
  a2[4] = v23;
  a2[5] = v22;
  a2[6] = v21;
  return result;
}

void sub_1000B07F0(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000ACDFC(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_1000B0810()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v1 = *(void **)(v0 + 16);
  v35 = *(_QWORD *)(v0 + 32);
  v2 = objc_msgSend((id)objc_opt_self(CloudStaticKey), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v3 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002143C0;
  v5 = objc_msgSend(v1, "recordName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10008189C();
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  v9 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v4);
  objc_msgSend(v2, "setPredicate:", v9);

  v36 = 0;
  v10 = objc_msgSend(v2, "execute:", &v36);
  v11 = v36;
  if (!v10)
  {
LABEL_19:
    v32 = v36;
    v33 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v34);
    swift_errorRelease(v33);
    return;
  }
  v12 = v10;
  v13 = sub_10006D6DC(0, &qword_1002A0528, off_100238D68);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  v15 = v11;

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v27 = v14;
    else
      v27 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v16 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (!v16)
      goto LABEL_17;
  }
  else
  {
    v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v14);
    if (!v16)
      goto LABEL_17;
  }
  if (v16 >= 1)
  {
    v17 = 0;
    v18 = *(uint64_t (**)(void))(*(_QWORD *)v35 + 136);
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      else
        v20 = *(id *)(v14 + 8 * v17 + 32);
      v21 = v20;
      v22 = objc_msgSend(v20, "uris");
      if (v22)
      {
        v23 = v22;
        v24 = sub_10006D6DC(0, &qword_1002A0360, off_100238D70);
        v25 = sub_1000B0BEC();
        v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, v25);

        sub_1000ADE48(v26);
        swift_bridgeObjectRelease(v26);
      }
      ++v17;
      v19 = (void *)v18();
      objc_msgSend(v19, "deleteObject:", v21);

    }
    while (v16 != v17);
LABEL_17:
    v28 = swift_bridgeObjectRelease_n(v14, 2);
    v29 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 136))(v28);
    v36 = 0;
    v30 = objc_msgSend(v29, "save:", &v36);

    v11 = v36;
    if ((v30 & 1) != 0)
    {
      v31 = v36;

      return;
    }
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_1000B0B80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B0BA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000B0BA8()
{
  unint64_t result;

  result = qword_1002A0358;
  if (!qword_1002A0358)
  {
    result = swift_getWitnessTable(&unk_100215168, &type metadata for StaticKeyData);
    atomic_store(result, (unint64_t *)&qword_1002A0358);
  }
  return result;
}

unint64_t sub_1000B0BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A0368;
  if (!qword_1002A0368)
  {
    v1 = sub_10006D6DC(255, &qword_1002A0360, off_100238D70);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002A0368);
  }
  return result;
}

uint64_t sub_1000B0C44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B0C68()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE **)(v0 + 24);
  v3 = objc_msgSend((id)objc_opt_self(CloudDevice), "fetchRequest");
  v4 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100214630;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v6 = sub_10008189C();
  *(_QWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 32) = 0x676E696F6774756FLL;
  *(_QWORD *)(v5 + 40) = 0xE800000000000000;
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 72) = 0x646574656C6564;
  *(_QWORD *)(v5 + 80) = 0xE700000000000000;
  v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x80000001001DF290, v5);
  objc_msgSend(v3, "setPredicate:", v7);

  v10 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  v8 = sub_10006D6DC(0, (unint64_t *)&unk_10029F6A0, off_100238D58);
  v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1)
    *v2 = 1;
}

uint64_t sub_1000B0E28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0E38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0E5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0E6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0E7C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B0EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned __int8 v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *log;
  os_log_type_t type;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  if ((unint64_t)v1 >> 62)
    goto LABEL_32;
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  while (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      return;
    }
    v49 = v2;
    v4 = 0;
    v55 = v1 & 0xC000000000000001;
    v52 = v1 + 32;
    v53 = v3;
    v54 = v1;
    while (1)
    {
      if (v55)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v7 = *(id *)(v52 + 8 * v4);
      v8 = v7;
      v9 = objc_msgSend((id)objc_opt_self(CloudStaticKey), "fetchRequest");
      sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
      v10 = sub_10006F03C((uint64_t *)&unk_10029F390);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = xmmword_1002143C0;
      v57 = v8;
      v12 = objc_msgSend(v8, "recordName");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      *(_QWORD *)(v11 + 56) = &type metadata for String;
      *(_QWORD *)(v11 + 64) = sub_10008189C();
      *(_QWORD *)(v11 + 32) = v13;
      *(_QWORD *)(v11 + 40) = v15;
      v16 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v11);
      objc_msgSend(v9, "setPredicate:", v16);

      v59 = 0;
      v56 = v9;
      v17 = objc_msgSend(v9, "execute:", &v59);
      v18 = v59;
      if (!v17)
      {
        v26 = v59;
        v27 = _convertNSErrorToError(_:)(v18);

        swift_willThrow(v28);
        if (qword_1002A6290 != -1)
          swift_once(&qword_1002A6290, sub_1000AC030);
        v29 = type metadata accessor for Logger(0);
        sub_10006F07C(v29, (uint64_t)qword_1002A6298);
        v6 = v57;
        v30 = v57;
        swift_errorRetain(v27);
        v31 = v30;
        v32 = swift_errorRetain(v27);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = swift_slowAlloc(22, -1);
          v36 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v35 = 138412546;
          type = v34;
          v59 = v31;
          log = v33;
          v37 = v31;
          v6 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 4, v35 + 12);
          *v36 = v31;

          *(_WORD *)(v35 + 12) = 2112;
          swift_errorRetain(v27);
          v38 = (void *)_swift_stdlib_bridgeErrorToNSError(v27);
          v59 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 14, v35 + 22);
          v36[1] = v38;
          swift_errorRelease(v27);
          swift_errorRelease(v27);
          _os_log_impl((void *)&_mh_execute_header, log, type, "record to update not found %@: %@", (uint8_t *)v35, 0x16u);
          v39 = sub_10006F03C(&qword_10029F6B0);
          swift_arrayDestroy(v36, 2, v39);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);

          swift_errorRelease(v27);
        }
        else
        {

          swift_errorRelease(v27);
          swift_errorRelease(v27);
          swift_errorRelease(v27);

        }
        v5 = v53;
        v1 = v54;
        goto LABEL_6;
      }
      v19 = v17;
      v20 = sub_10006D6DC(0, &qword_1002A0528, off_100238D68);
      v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
      v21 = v18;

      if ((unint64_t)v2 >> 62)
        break;
      v1 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v2);
      if (v1)
        goto LABEL_13;
LABEL_5:

      swift_bridgeObjectRelease_n(v2, 2);
      v5 = v53;
      v1 = v54;
      v6 = v57;
LABEL_6:
      ++v4;

      if (v4 == v5)
      {
        v41 = swift_bridgeObjectRelease(v1);
        v2 = v49;
        goto LABEL_37;
      }
    }
    if (v2 < 0)
      v40 = v2;
    else
      v40 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v1 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (!v1)
      goto LABEL_5;
LABEL_13:
    if (v1 >= 1)
    {
      v22 = 0;
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
          v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v2);
        else
          v23 = *(id *)(v2 + 8 * v22 + 32);
        v24 = v23;
        ++v22;
        v25 = String._bridgeToObjectiveC()();
        objc_msgSend(v24, "setCkstate:", v25);

      }
      while (v1 != v22);
      goto LABEL_5;
    }
    __break(1u);
LABEL_32:
    if (v1 < 0)
      v42 = v1;
    else
      v42 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v42);
  }
  v41 = swift_bridgeObjectRelease(v1);
LABEL_37:
  v43 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v41);
  v59 = 0;
  v44 = objc_msgSend(v43, "save:", &v59);

  if ((v44 & 1) != 0)
  {
    v45 = v59;
  }
  else
  {
    v58 = v59;
    v46 = v59;
    v47 = _convertNSErrorToError(_:)(v58);

    swift_willThrow(v48);
    swift_errorRelease(v47);
  }
}

uint64_t sub_1000B1488()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B149C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B14C8()
{
  _QWORD *v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t (*v23)(void *, id);
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  os_log_type_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  v1 = v0[2];
  v2 = (id *)v0[3];
  v3 = v0[4];
  v4 = objc_msgSend((id)objc_opt_self(CloudStaticKey), "fetchRequest");
  sub_10006D6DC(0, &qword_1002A0520, NSPredicate_ptr);
  v5 = sub_10006F03C((uint64_t *)&unk_10029F390);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1002143C0;
  v7 = objc_msgSend((id)v1, "recordName");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10008189C();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572, 0xED00004025203D20, v6);
  objc_msgSend(v4, "setPredicate:", v11);

  v57 = 0;
  v12 = objc_msgSend(v4, "execute:", &v57);
  v13 = v57;
  if (!v12)
  {
    v29 = v57;
    v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v31);
    swift_errorRelease(v30);
    if (qword_1002A6290 == -1)
    {
LABEL_12:
      v32 = type metadata accessor for Logger(0);
      sub_10006F07C(v32, (uint64_t)qword_1002A6298);
      v33 = static os_log_type_t.error.getter();
      v34 = (id)v1;
      v35 = Logger.logObject.getter(v34);
      v36 = v33;
      if (!os_log_type_enabled(v35, v33))
      {

LABEL_26:
        return;
      }
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      v57 = v34;
      v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v37 + 4, v37 + 12);
      *v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "record not found %@", v37, 0xCu);
      v40 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v38, 1, v40);
      v41 = v38;
LABEL_24:
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v37, -1, -1);
      goto LABEL_26;
    }
LABEL_29:
    swift_once(&qword_1002A6290, sub_1000AC030);
    goto LABEL_12;
  }
  v14 = v12;
  v15 = sub_10006D6DC(0, &qword_1002A0528, off_100238D68);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v16 = v13;

  if (!((unint64_t)v1 >> 62))
  {
    v17 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v17)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease(v1);
    if (qword_1002A6290 != -1)
      swift_once(&qword_1002A6290, sub_1000AC030);
    v46 = type metadata accessor for Logger(0);
    sub_10006F07C(v46, (uint64_t)qword_1002A6298);
    v47 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain(v1);
    v35 = Logger.logObject.getter(v48);
    v49 = v47;
    if (!os_log_type_enabled(v35, v47))
    {
      swift_bridgeObjectRelease_n(v1, 2);
      goto LABEL_26;
    }
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (void *)swift_slowAlloc(32, -1);
    v57 = v50;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain(v1);
    v52 = Array.description.getter(v51, v15);
    v54 = v53;
    swift_bridgeObjectRelease(v1);
    v55 = sub_10006C790(v52, v54, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v35, v49, "no response %s", v37, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    v41 = v50;
    goto LABEL_24;
  }
  if (v1 < 0)
    v45 = v1;
  else
    v45 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  if (!_CocoaArrayWrapper.endIndex.getter(v45))
    goto LABEL_20;
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_29;
  }
  v18 = *(id *)(v1 + 32);
LABEL_7:
  v19 = v18;
  swift_bridgeObjectRelease_n(v1, 2);
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 200))(v19);
  v21 = *v2;
  *v2 = (id)v20;

  v22 = *v2;
  v23 = *(uint64_t (**)(void *, id))(*(_QWORD *)v3 + 248);
  v24 = *v2;
  LOBYTE(v22) = v23(v19, v22);

  if ((v22 & 1) == 0)
  {
LABEL_10:

    return;
  }
  v25 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 136))();
  v57 = 0;
  v26 = objc_msgSend(v25, "save:", &v57);

  v27 = v57;
  if (v26)
  {
    v28 = v57;
    goto LABEL_10;
  }
  v42 = v57;
  v43 = _convertNSErrorToError(_:)(v27);

  swift_willThrow(v44);
  swift_errorRelease(v43);
}

uint64_t sub_1000B1A80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B1A90()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t (*v5)(void);
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;

  v1 = objc_allocWithZone((Class)NSFetchRequest);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithEntityName:", v2);

  v4 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v3);
  v5 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 136);
  v6 = (void *)v5();
  v19 = 0;
  v7 = objc_msgSend(v6, "executeRequest:error:", v4, &v19);

  v8 = v19;
  if (v7)
  {
    v9 = v19;

  }
  else
  {
    v11 = v19;
    v12 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    v10 = swift_errorRelease(v12);
  }
  v13 = (void *)((uint64_t (*)(uint64_t))v5)(v10);
  v19 = 0;
  v14 = objc_msgSend(v13, "save:", &v19);

  v15 = v19;
  if (v14)
  {
    v16 = v19;

  }
  else
  {
    v17 = v19;
    v18 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    swift_errorRelease(v18);
    v3 = v4;
  }

}

uint64_t sub_1000B1C14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for StaticKeyData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

_QWORD *initializeWithCopy for StaticKeyData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v7 = a2[4];
  v6 = a2[5];
  a1[4] = v7;
  a1[5] = v6;
  v8 = a2[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for StaticKeyData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for StaticKeyData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for StaticKeyData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = a1[6];
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticKeyData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticKeyData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticKeyData()
{
  return &type metadata for StaticKeyData;
}

uint64_t type metadata accessor for KTCloudStaticKey()
{
  return objc_opt_self(_TtC13transparencyd16KTCloudStaticKey);
}

uint64_t getEnumTagSinglePayload for StaticKeyData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticKeyData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000B1F84 + 4 * byte_100215139[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000B1FB8 + 4 * byte_100215134[v4]))();
}

uint64_t sub_1000B1FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B1FC8);
  return result;
}

uint64_t sub_1000B1FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B1FDCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000B1FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StaticKeyData.CodingKeys()
{
  return &type metadata for StaticKeyData.CodingKeys;
}

unint64_t sub_1000B2008()
{
  unint64_t result;

  result = qword_1002A64C0[0];
  if (!qword_1002A64C0[0])
  {
    result = swift_getWitnessTable(&unk_10021529C, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002A64C0);
  }
  return result;
}

unint64_t sub_1000B2050()
{
  unint64_t result;

  result = qword_1002A65D0;
  if (!qword_1002A65D0)
  {
    result = swift_getWitnessTable(&unk_10021520C, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A65D0);
  }
  return result;
}

unint64_t sub_1000B2098()
{
  unint64_t result;

  result = qword_1002A65D8[0];
  if (!qword_1002A65D8[0])
  {
    result = swift_getWitnessTable(&unk_100215234, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002A65D8);
  }
  return result;
}

unint64_t sub_1000B20DC()
{
  unint64_t result;

  result = qword_1002A0530;
  if (!qword_1002A0530)
  {
    result = swift_getWitnessTable(&unk_100215140, &type metadata for StaticKeyData);
    atomic_store(result, (unint64_t *)&qword_1002A0530);
  }
  return result;
}

double sub_1000B2154()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(double *)(v0 + 16);
}

uint64_t sub_1000B2184(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(double *)(v1 + 16) = a1;
  return result;
}

double sub_1000B21C0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(double *)(v0 + 24);
}

uint64_t sub_1000B21F0(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 24, v4, 1, 0);
  *(double *)(v1 + 24) = a1;
  return result;
}

double sub_1000B222C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(double *)(v0 + 32);
}

uint64_t sub_1000B225C(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 32, v4, 1, 0);
  *(double *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_1000B2298@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000B22FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000B2368(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, a1, 33, 0);
  return j_j__swift_endAccess;
}

double *KTBucket.__allocating_init(fillrate:maxTokens:)(double a1, double a2)
{
  uint64_t v2;
  double *v5;

  v5 = (double *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5[3] = a1;
  v5[4] = a2;
  v5[2] = a2;
  Date.init()();
  return v5;
}

double *KTBucket.init(fillrate:maxTokens:)(double a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[3] = a1;
  v2[4] = a2;
  v2[2] = a2;
  Date.init()(v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))((uint64_t)v2 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v5);
  return v2;
}

uint64_t KTBucket.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v6[2];

  (*(void (**)(void))(*(_QWORD *)v0 + 240))();
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  (*(void (**)(void))(*(_QWORD *)v0 + 112))();
  Double.write<A>(to:)(v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 47;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  (*(void (**)(void))(*(_QWORD *)v0 + 160))();
  Double.write<A>(to:)(v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  (*(void (**)(void))(*(_QWORD *)v0 + 136))();
  Double.write<A>(to:)(v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 23870;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return v6[0];
}

BOOL sub_1000B2594(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 240))();
  return (*(double (**)(uint64_t))(*(_QWORD *)v1 + 112))(v3) >= a1;
}

uint64_t sub_1000B25D0(double a1)
{
  uint64_t v1;
  char v3;
  void (*v4)(_BYTE *, _QWORD);
  double *v5;
  _BYTE v7[32];

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  if ((v3 & 1) != 0)
  {
    v4 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 128))(v7);
    *v5 = *v5 - a1;
    v4(v7, 0);
  }
  return v3 & 1;
}

uint64_t sub_1000B2640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  double v13;
  double v14;
  __n128 v15;
  uint64_t v17;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v17 - v7;
  v9 = Date.init()(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 184))(v9);
  v10 = Date.timeIntervalSince(_:)(v5);
  v11 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v12 = v11(v5, v1);
  v13 = v10 * (*(double (**)(uint64_t))(*(_QWORD *)v0 + 136))(v12);
  v14 = v13 + (*(double (**)(void))(*(_QWORD *)v0 + 112))();
  v15.n128_f64[0] = (*(double (**)(void))(*(_QWORD *)v0 + 160))();
  if (v15.n128_f64[0] >= v14)
    v15.n128_f64[0] = v14;
  (*(void (**)(__n128))(*(_QWORD *)v0 + 120))(v15);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
  (*(void (**)(char *))(*(_QWORD *)v0 + 192))(v5);
  return v11(v8, v1);
}

uint64_t sub_1000B2780()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 160))();
  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void sub_1000B27A4(double a1)
{
  uint64_t v1;

  if (a1 - (*(double (**)(void))(*(_QWORD *)v1 + 112))() > 0.0)
    (*(double (**)(double))(*(_QWORD *)v1 + 136))(0.0);
}

uint64_t KTBucket.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t KTBucket.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

unint64_t KTNetworkBucketFeedback.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

Swift::Int sub_1000B2890()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000B28D4()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000B28FC()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_1000B293C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

id sub_1000B2958()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  qword_1002A6668 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B2988()
{
  return sub_1000B29F0(&OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart);
}

uint64_t sub_1000B2994(uint64_t a1)
{
  return sub_1000B2A40(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart);
}

uint64_t (*sub_1000B29A0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000B29E4()
{
  return sub_1000B29F0(&OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout);
}

uint64_t sub_1000B29F0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_retain(*v2);
}

uint64_t sub_1000B2A34(uint64_t a1)
{
  return sub_1000B2A40(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout);
}

uint64_t sub_1000B2A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_release(v5);
}

uint64_t (*sub_1000B2A8C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000B2AD0()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
}

void *sub_1000B2AE0()
{
  return &unk_100215330;
}

double sub_1000B2AEC()
{
  return 1.0;
}

void *sub_1000B2AF4()
{
  return &unk_100215338;
}

void *sub_1000B2B00()
{
  return &unk_100215340;
}

double sub_1000B2B0C()
{
  return 3600.0;
}

void *sub_1000B2B1C()
{
  return &unk_100215348;
}

void *sub_1000B2B28()
{
  return &unk_100215350;
}

double sub_1000B2B34()
{
  return 1200.0;
}

void *sub_1000B2B44()
{
  return &unk_100215358;
}

double sub_1000B2B50()
{
  return 900.0;
}

id KTNetworkTimeoutBucket.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, char *, uint64_t);
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  objc_class *v24;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  _QWORD *v34;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  __chkstk_darwin(v1);
  v30 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v29);
  v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v27 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency] = 0;
  v11 = type metadata accessor for KTBucket(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v12 + 32) = 0x40AC200000000000;
  v26 = xmmword_100215320;
  *(_OWORD *)(v12 + 16) = xmmword_100215320;
  v13 = v0;
  Date.init()(v13);
  v14 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v14(v12 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart] = v12;
  v15 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v15 + 32) = 0x40AC200000000000;
  *(_OWORD *)(v15 + 16) = v26;
  Date.init()(v15);
  v14(v15 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout] = v15;
  v16 = *(void **)&v0[v10];
  *(_QWORD *)&v0[v10] = 0;

  v17 = sub_10006FC9C();
  v18 = v27;
  static DispatchQoS.unspecified.getter(v17);
  v34 = _swiftEmptyArrayStorage;
  v19 = sub_10006F284((unint64_t *)&qword_1002A0850, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10006F03C(&qword_10029F058);
  v21 = sub_10006FD20();
  v22 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v20, v21, v29, v19);
  v23 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v30, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x8000000100215340, v18, v22, v23, 0);

  v24 = (objc_class *)type metadata accessor for KTNetworkTimeoutBucket();
  v33.receiver = v13;
  v33.super_class = v24;
  return objc_msgSendSuper2(&v33, "init");
}

uint64_t type metadata accessor for KTBucket(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A6870;
  if (!qword_1002A6870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTBucket);
  return result;
}

uint64_t type metadata accessor for KTNetworkTimeoutBucket()
{
  return objc_opt_self(_TtC13transparencyd22KTNetworkTimeoutBucket);
}

uint64_t KTNetworkTimeoutBucket.sysdiagnose.getter()
{
  uint64_t v1;
  uint64_t v2;

  OS_dispatch_queue.sync<A>(execute:)(&v2, sub_1000B3130, &v1, &type metadata for String);
  return v2;
}

void sub_1000B2FA4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  _QWORD v17[2];

  _StringGuts.grow(_:)(28);
  v4 = swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v17, "Bucket[tokens:");
  HIBYTE(v17[1]) = -18;
  v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x88))(v4);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 216))();
  object = v6._object;
  String.append(_:)(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0x3A6B636975717CLL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70))();
  v10._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 216))();
  v11 = v10._object;
  String.append(_:)(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v11);
  if (*(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency))
    v12 = 0x64656B636F6C627CLL;
  else
    v12 = 0;
  if (*(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency))
    v13 = 0xE800000000000000;
  else
    v13 = 0xE000000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v17[1];
  *a2 = v17[0];
  a2[1] = v16;
}

void sub_1000B3130(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000B2FA4(*(_QWORD **)(v1 + 16), a1);
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.networkTimeoutOperation()()
{
  uint64_t v0;
  Swift::Bool v1;
  objc_class *v2;
  uint64_t v3;
  objc_class *v4;
  NSOperation_optional result;

  v0 = sub_10006F03C(&qword_1002A0580);
  OS_dispatch_queue.sync<A>(execute:)(&v4, sub_1000B31C0, &v3, v0);
  v2 = v4;
  result.value.super.isa = v2;
  result.is_nil = v1;
  return result;
}

uint64_t sub_1000B31C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B3D08(a1);
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.onQueueNetworkTimeoutOperation()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char v19;
  objc_class *v20;
  Swift::Bool v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  NSOperation_optional result;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType(0);
  v48 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v47 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  v20 = (objc_class *)(*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v42 = v11;
  v22 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
  v23 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  v24 = v23;
  if (!v23)
  {
    v25 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88);
    v26 = ((uint64_t (*)(objc_class *))v25)(v20);
    v27 = (*(unsigned __int8 (**)(uint64_t, double))(*(_QWORD *)v26 + 224))(v26, 900.0);
    swift_release(v26);
    if ((v27 & 1) != 0)
    {
      v24 = 0;
      goto LABEL_9;
    }
    v24 = objc_msgSend(objc_allocWithZone((Class)NSOperation), "init");
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setName:", v28);

    v29 = v25();
    v30 = (*(double (**)(uint64_t, double))(*(_QWORD *)v29 + 256))(v29, 900.0);
    swift_release(v29);
    v31 = v30 * 1000.0;
    v49 = v18;
    v20 = (objc_class *)static DispatchTime.now()(v18);
    if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) != 0)
    {
      if (v31 > -9.22337204e18)
      {
        if (v31 < 9.22337204e18)
        {
          *v4 = (uint64_t)v31;
          v33 = v45;
          v32 = v46;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v45 + 104))(v4, enum case for DispatchTimeInterval.milliseconds(_:), v46);
          + infix(_:_:)(v8, v4);
          (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v4, v32);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v44);
          v34 = v47;
          OS_dispatch_queue.SchedulerTimeType.init(_:)(v10);
          v35 = swift_allocObject(&unk_100242D08, 24, 7);
          *(_QWORD *)(v35 + 16) = v1;
          v36 = sub_10006FC9C();
          v37 = sub_10006F284(&qword_1002A0588, (uint64_t (*)(uint64_t))sub_10006FC9C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
          v38 = v1;
          Scheduler.schedule(after:_:)(v34, sub_1000B3670, v35, v36, v37);
          swift_release(v35);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v42);

          v39 = *(void **)((char *)v1 + v22);
          *(_QWORD *)((char *)v1 + v22) = v24;
          v40 = v24;

          goto LABEL_9;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_9:
  v41 = v23;
  v20 = (objc_class *)v24;
LABEL_14:
  result.value.super.isa = v20;
  result.is_nil = v21;
  return result;
}

uint64_t sub_1000B364C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B3670()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xD0))();
}

void sub_1000B36D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, _QWORD *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_1002A6660, sub_1000B2958);
    goto LABEL_4;
  }
  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  if (!v1)
    return;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency) = 0;
  if (qword_1002A6660 != -1)
    goto LABEL_7;
LABEL_4:
  objc_msgSend((id)qword_1002A6668, "addOperation:", v1);

}

uint64_t KTNetworkTimeoutBucket.network(feedback:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v5 = *(NSObject **)&v2[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue];
  v6 = (_QWORD *)swift_allocObject(&unk_100242D30, 40, 7);
  v6[2] = a1;
  v6[3] = v2;
  v6[4] = ObjectType;
  v7 = swift_allocObject(&unk_100242D58, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000B394C;
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = sub_10007025C;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10007027C;
  v12[3] = &unk_100242D70;
  v8 = _Block_copy(v12);
  v9 = v13;
  v10 = v2;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 102, 151, 25, 1);
  swift_release(v6);
  result = swift_release(v7);
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000B3928()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(uint64_t **)(v0 + 24);
  if (v1 != 2)
  {
    if (v1 == 1)
    {
      v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 232))(v3, 900.0);
      return swift_release(v3);
    }
    if (v1)
    {
      v14 = *(_QWORD *)(v0 + 16);
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for KTNetworkBucketFeedback, &v14, &type metadata for KTNetworkBucketFeedback, &type metadata for Int);
      __break(1u);
      return result;
    }
    v11 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 248))(v11);
    v12 = swift_release(v11);
    v13 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 248))(v13);
    result = swift_release(v13);
    v9 = *v2;
    v10 = swift_isaMask;
    return (*(uint64_t (**)(uint64_t))((v10 & v9) + 0xD0))(result);
  }
  if (*(uint64_t *)((char *)v2 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency)
    || (v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))(),
        v6 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v5 + 224))(v5, 900.0),
        result = swift_release(v5),
        (v6 & 1) == 0))
  {
    v7 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x70))();
    v8 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v7 + 232))(v7, 1200.0);
    result = swift_release(v7);
    if ((v8 & 1) != 0)
    {
      v9 = *v2;
      v10 = swift_isaMask;
      return (*(uint64_t (**)(uint64_t))((v10 & v9) + 0xD0))(result);
    }
  }
  return result;
}

uint64_t sub_1000B3B38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B3B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B3B58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id KTNetworkTimeoutBucket.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTNetworkTimeoutBucket();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1000B3C2C()
{
  unint64_t result;

  result = qword_1002A0590;
  if (!qword_1002A0590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KTNetworkBucketFeedback, &type metadata for KTNetworkBucketFeedback);
    atomic_store(result, (unint64_t *)&qword_1002A0590);
  }
  return result;
}

uint64_t sub_1000B3C70()
{
  return type metadata accessor for KTBucket(0);
}

uint64_t sub_1000B3C78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTNetworkBucketFeedback()
{
  return &type metadata for KTNetworkBucketFeedback;
}

uint64_t sub_1000B3D08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v1 + 16)) + 0xC8))();
  *a1 = result;
  return result;
}

void sub_1000B3D58(_QWORD *a1@<X8>)
{
  sub_1000B3130(a1);
}

uint64_t sub_1000B3D6C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A6888);
  sub_10006F07C(v0, (uint64_t)qword_1002A6888);
  return Logger.init(transparencyCategory:)(0xD00000000000001BLL, 0x80000001001DFFC0);
}

void sub_1000B3DCC()
{
  byte_1002A68A8 = 1;
  qword_1002A68B0 = 0xEE00657461647055;
}

id KTUpdateCloudStorageOperation.__allocating_init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  objc_super v9;

  v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

id KTUpdateCloudStorageOperation.init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  objc_super v5;

  v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for KTUpdateCloudStorageOperation()
{
  return objc_opt_self(_TtC13transparencyd29KTUpdateCloudStorageOperation);
}

Swift::Void __swiftcall KTUpdateCloudStorageOperation.groupStart()()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  NSObject *v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  Swift::OpaquePointer_optional v31;
  Swift::OpaquePointer_optional v32;

  v1 = v0;
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps], "ckdatabase");
  if (v2)
  {
    v30 = v2;
    v3 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
    v4 = objc_msgSend(v3, "pendingRecords");
    v5 = sub_10006D6DC(0, &qword_1002A0350, CKRecord_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    v7 = objc_msgSend(v3, "deletedRecords");
    v8 = sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v21 = v6;
      else
        v21 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v6);
      if (v22)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v32.value._rawValue = (void *)sub_10006D6DC(0, (unint64_t *)&qword_10029F770, CKModifyRecordsOperation_ptr);
      v31.value._rawValue = (void *)v6;
      v31.is_nil = v9;
      isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v31, v32).super.super.super.super.isa;
      -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
      v11 = isa;
      v12 = String._bridgeToObjectiveC()();
      -[NSObject setName:](v11, "setName:", v12);

      v13 = objc_msgSend(objc_allocWithZone((Class)NSBlockOperation), "init");
      objc_msgSend(v1, "dependOnBeforeGroupFinished:", v13);
      v14 = swift_allocObject(&unk_100242E30, 24, 7);
      *(_QWORD *)(v14 + 16) = v1;
      v15 = v1;
      CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1000B4374, v14);
      v16 = swift_allocObject(&unk_100242E58, 24, 7);
      *(_QWORD *)(v16 + 16) = v15;
      v17 = v15;
      CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1000B55D0, v16);
      v18 = swift_allocObject(&unk_100242E80, 32, 7);
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = v13;
      v19 = v17;
      v20 = v13;
      CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000B59C4, v18);
      objc_msgSend(v30, "addOperation:", v11);

      v30 = v20;
LABEL_7:

      return;
    }
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v23 = v9;
      else
        v23 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v24 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v9);
      if (v24)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v6);
    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10006F07C(v25, (uint64_t)qword_1002A6888);
    v27 = static os_log_type_t.info.getter(v26);
    v28 = v27;
    v11 = Logger.logObject.getter(v27);
    if (os_log_type_enabled(v11, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v28, "KTUpdateCloudStorageOperation:perRecordSaveBlock: no records to upload/delete", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    goto LABEL_7;
  }
}

uint64_t sub_1000B4350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B4374(void *a1, void *a2, char a3)
{
  uint64_t v3;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  id v14;
  NSObject *v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  id v21;
  NSString v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  Class isa;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSString v90;
  id v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  id v104;
  id v105;
  NSObject *v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  id v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  NSString v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  NSArray v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  NSString v133;
  os_log_type_t type;
  os_log_type_t typea[8];
  void *v136;
  NSObject *v137;
  char *v138;
  id v139;
  uint64_t v140;
  id v141;
  id v142;
  uint64_t v143;

  v138 = *(char **)(v3 + 16);
  v5 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    v136 = v5;
    v21 = objc_msgSend(v5, "logger");
    if (qword_1002A68A0 != -1)
      swift_once(&qword_1002A68A0, sub_1000B3DCC);
    v22 = String._bridgeToObjectiveC()();
    v23 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v21, "logResultForEvent:hardFailure:result:", v22, 1, v23);

    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v24 = type metadata accessor for Logger(0);
    sub_10006F07C(v24, (uint64_t)qword_1002A6888);
    sub_10006F0E0(a2, 1);
    v25 = a1;
    sub_10006F0E0(a2, 1);
    v26 = v25;
    v27 = Logger.logObject.getter(v26);
    v28 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v29 = 138412546;
      v142 = v26;
      v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v29 + 4, v29 + 12);
      *v30 = v26;

      *(_WORD *)(v29 + 12) = 2112;
      swift_errorRetain(a2);
      v32 = _swift_stdlib_bridgeErrorToNSError(a2);
      v142 = (id)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v29 + 14, v29 + 22);
      v30[1] = v32;
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v29, 0x16u);
      v33 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v30, 2, v33);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
    }

    v142 = a2;
    swift_errorRetain(a2);
    v44 = sub_10006F03C(&qword_10029EE58);
    type metadata accessor for CKError(0);
    v46 = v45;
    if ((swift_dynamicCast(&v141, &v142, v44, v45, 6) & 1) == 0)
    {
      sub_10006F0E0(a2, 1);
      v61 = v26;
      sub_10006F0E0(a2, 1);
      v62 = v61;
      v63 = Logger.logObject.getter(v62);
      v64 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc(22, -1);
        v66 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v65 = 138412546;
        v142 = v62;
        v67 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v65 + 4, v65 + 12);
        *v66 = v62;

        *(_WORD *)(v65 + 12) = 2112;
        swift_errorRetain(a2);
        v68 = _swift_stdlib_bridgeErrorToNSError(a2);
        v142 = (id)v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v65 + 14, v65 + 22);
        v66[1] = v68;
        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v65, 0x16u);
        v69 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v66, 2, v69);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {

        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
      }

      v70 = (void *)_convertErrorToNSError(_:)(a2);
      objc_msgSend(v138, "setError:", v70);
      sub_10006F0EC(a2, 1);

      return;
    }
    v47 = v141;
    v48 = sub_10006F284(&qword_10029EE60, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100214280);
    v49 = _BridgedStoredNSError.code.getter(&v142, v46, v48);
    if (v142 == (id)11)
    {
      sub_10006F0E0(a2, 1);
      v71 = v26;
      sub_10006F0E0(a2, 1);
      v72 = v71;
      v73 = Logger.logObject.getter(v72);
      v74 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc(22, -1);
        v76 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v75 = 138412546;
        v141 = v72;
        v77 = v47;
        v78 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v75 + 4, v75 + 12);
        *v76 = v72;

        v47 = v77;
        *(_WORD *)(v75 + 12) = 2112;
        swift_errorRetain(a2);
        v79 = _swift_stdlib_bridgeErrorToNSError(a2);
        v141 = (id)v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v75 + 14, v75 + 22);
        v76[1] = v79;
        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "KTUpdateCloudStorageOperation:perRecordSaveBlock: deleted: %@ %@", (uint8_t *)v75, 0x16u);
        v80 = sub_10006F03C(&qword_10029F6B0);
        swift_arrayDestroy(v76, 2, v80);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v75, -1, -1);
      }
      else
      {

        sub_10006F0EC(a2, 1);
        sub_10006F0EC(a2, 1);
      }

      v113 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v47);
      if (v113)
      {
        v114 = (void *)v113;
        objc_msgSend(*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source], "deleteRecordWithCkrecord:", v113);
        sub_10006F0EC(a2, 1);

LABEL_50:
        return;
      }
      objc_msgSend(*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source], "deleteRecordIDWithCkrecordID:", v72);
    }
    else
    {
      if (v142 == (id)26)
      {
        type metadata accessor for KTCKZone();
        v81 = sub_1000A56EC((uint64_t)*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context]);
        v82 = objc_msgSend(v26, "zoneID");
        v83 = objc_msgSend(v82, "zoneName");

        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        v86 = v85;

        v139 = (id)v81;
        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), _QWORD))(*(_QWORD *)v81 + 120))(v84, v86, sub_10006C270, 0);
        swift_bridgeObjectRelease(v86);
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CloudKitZoneRecreate"));
        v88 = v87;
        v89 = objc_allocWithZone((Class)KTPendingFlag);
        v90 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v88);
        v91 = objc_msgSend(v89, "initWithFlag:delayInSeconds:", v90, 0.1);

        v92 = v26;
        v93 = Logger.logObject.getter(v92);
        v94 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
        if (os_log_type_enabled(v93, v94))
        {
          v95 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_QWORD *)typea = v47;
          v96 = swift_slowAlloc(32, -1);
          v141 = (id)v96;
          *(_DWORD *)v95 = 136315138;
          v97 = objc_msgSend(v92, "zoneID");
          v98 = objc_msgSend(v97, "zoneName");

          v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
          v101 = v100;

          v140 = sub_10006C790(v99, v101, (uint64_t *)&v141);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v95 + 4, v95 + 12);
          swift_bridgeObjectRelease(v101);

          _os_log_impl((void *)&_mh_execute_header, v93, v94, "will recreate the zone %s", v95, 0xCu);
          swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
          v102 = v96;
          v47 = *(void **)typea;
          swift_slowDealloc(v102, -1, -1);
          swift_slowDealloc(v95, -1, -1);
        }
        else
        {

        }
        v115 = objc_msgSend(v136, "flagHandler");
        if (v115)
        {
          v116 = v115;
          objc_msgSend(v115, "handlePendingFlag:", v91);
          sub_10006F0EC(a2, 1);

          swift_unknownObjectRelease(v116);
        }
        else
        {
          sub_10006F0EC(a2, 1);

        }
        swift_release(v139);
        return;
      }
      if (v142 == (id)14)
      {
        v50 = related decl 'e' for CKErrorCode.serverRecord.getter(v47);
        if (v50)
        {
          v51 = (void *)v50;
          sub_10006F0E0(a2, 1);
          v52 = v26;
          sub_10006F0E0(a2, 1);
          v53 = v52;
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.error.getter(v54);
          if (os_log_type_enabled(v54, v55))
          {
            v56 = swift_slowAlloc(22, -1);
            v57 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v56 = 138412546;
            type = v55;
            v141 = v53;
            v137 = v54;
            v58 = v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v56 + 4, v56 + 12);
            *v57 = v53;

            *(_WORD *)(v56 + 12) = 2112;
            swift_errorRetain(a2);
            v59 = _swift_stdlib_bridgeErrorToNSError(a2);
            v141 = (id)v59;
            v54 = v137;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v56 + 14, v56 + 22);
            v57[1] = v59;
            sub_10006F0EC(a2, 1);
            sub_10006F0EC(a2, 1);
            _os_log_impl((void *)&_mh_execute_header, v137, type, "KTUpdateCloudStorageOperation:perRecordSaveBlock: serverRecord: %@ %@", (uint8_t *)v56, 0x16u);
            v60 = sub_10006F03C(&qword_10029F6B0);
            swift_arrayDestroy(v57, 2, v60);
            swift_slowDealloc(v57, -1, -1);
            swift_slowDealloc(v56, -1, -1);
          }
          else
          {

            sub_10006F0EC(a2, 1);
            sub_10006F0EC(a2, 1);
          }

          v118 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          CKRecord.recordType.getter(objc_msgSend(v118, "updatedRecordWithCkrecord:", v51));
          v128 = v127;
          v121 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v128);
          v129 = sub_10006F03C(&qword_10029F870);
          v130 = swift_allocObject(v129, 40, 7);
          *(_OWORD *)(v130 + 16) = xmmword_100214910;
          v131 = objc_msgSend(v51, "recordID");
          *(_QWORD *)(v130 + 32) = v131;
          v141 = (id)v130;
          specialized Array._endMutation()(v131);
          v132 = (uint64_t)v141;
          sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
          v126.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v132);
          goto LABEL_49;
        }
      }
      else
      {
        v103 = static os_log_type_t.error.getter(v49);
        sub_10006F0E0(a2, 1);
        v104 = v26;
        sub_10006F0E0(a2, 1);
        v105 = v104;
        v106 = Logger.logObject.getter(v105);
        if (os_log_type_enabled(v106, v103))
        {
          v107 = swift_slowAlloc(22, -1);
          v108 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v107 = 138412546;
          v141 = v105;
          v109 = v47;
          v110 = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v107 + 4, v107 + 12);
          *v108 = v105;

          v47 = v109;
          *(_WORD *)(v107 + 12) = 2112;
          swift_errorRetain(a2);
          v111 = _swift_stdlib_bridgeErrorToNSError(a2);
          v141 = (id)v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v107 + 14, v107 + 22);
          v108[1] = v111;
          sub_10006F0EC(a2, 1);
          sub_10006F0EC(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v106, v103, "KTUpdateCloudStorageOperation:perRecordSaveBlock: ck fail: %@ %@", (uint8_t *)v107, 0x16u);
          v112 = sub_10006F03C(&qword_10029F6B0);
          swift_arrayDestroy(v108, 2, v112);
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v107, -1, -1);
        }
        else
        {

          sub_10006F0EC(a2, 1);
          sub_10006F0EC(a2, 1);
        }

        v117 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v47);
        if (v117)
        {
          v51 = (void *)v117;
          v118 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          CKRecord.recordType.getter(v117);
          v120 = v119;
          v121 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v120);
          v122 = sub_10006F03C(&qword_10029F870);
          v123 = swift_allocObject(v122, 40, 7);
          *(_OWORD *)(v123 + 16) = xmmword_100214910;
          v124 = objc_msgSend(v51, "recordID");
          *(_QWORD *)(v123 + 32) = v124;
          v141 = (id)v123;
          specialized Array._endMutation()(v124);
          v125 = (uint64_t)v141;
          sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
          v126.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v125);
LABEL_49:
          v133 = String._bridgeToObjectiveC()();
          objc_msgSend(v118, "recordUpdateCloudStateWithType:records:newState:", v121, v126.super.isa, v133);
          sub_10006F0EC(a2, 1);

          goto LABEL_50;
        }
      }
    }
    sub_10006F0EC(a2, 1);
    goto LABEL_50;
  }
  v6 = a2;
  v7 = v5;
  v8 = v6;
  v9 = objc_msgSend(v7, "logger");
  if (qword_1002A68A0 != -1)
    swift_once(&qword_1002A68A0, sub_1000B3DCC);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "logResultForEvent:hardFailure:result:", v10, 0, 0);

  if (qword_1002A6880 != -1)
    swift_once(&qword_1002A6880, sub_1000B3D6C);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10006F07C(v11, (uint64_t)qword_1002A6888);
  v13 = static os_log_type_t.info.getter(v12);
  v14 = v8;
  v15 = Logger.logObject.getter(v14);
  if (os_log_type_enabled(v15, v13))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 138412290;
    v142 = v14;
    v18 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v16 + 4, v16 + 12);
    *v17 = a2;
    sub_10006F0EC(a2, 0);
    sub_10006F0EC(a2, 0);
    _os_log_impl((void *)&_mh_execute_header, v15, v13, "KTUpdateCloudStorageOperation:perRecordSaveBlock: success: %@", v16, 0xCu);
    v19 = sub_10006F03C(&qword_10029F6B0);
    swift_arrayDestroy(v17, 1, v19);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_10006F0EC(a2, 0);
    sub_10006F0EC(a2, 0);
  }

  v34 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
  CKRecord.recordType.getter(objc_msgSend(v34, "updatedRecordWithCkrecord:", v14));
  v36 = v35;
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  v38 = sub_10006F03C(&qword_10029F870);
  v39 = swift_allocObject(v38, 40, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100214910;
  v40 = objc_msgSend(v14, "recordID");
  *(_QWORD *)(v39 + 32) = v40;
  v142 = (id)v39;
  specialized Array._endMutation()(v40);
  v41 = v142;
  sub_10006D6DC(0, (unint64_t *)&unk_10029F3A0, CKRecordID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  v43 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "recordUpdateCloudStateWithType:records:newState:", v37, isa, v43);

  sub_10006F0EC(a2, 0);
}

void sub_1000B55D0(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  id v18;
  id v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  uint64_t v28;
  uint64_t v29;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10006F07C(v15, (uint64_t)qword_1002A6888);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = a1;
    sub_1000B5EDC(a2, 1);
    v19 = v18;
    v20 = sub_1000B5EDC(a2, 1);
    v21 = v17;
    log = Logger.logObject.getter(v20);
    if (os_log_type_enabled(log, v17))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v22 = 138412546;
      v28 = (uint64_t)v19;
      v24 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 4, v22 + 12);
      *v23 = v19;

      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain(a2);
      v25 = _swift_stdlib_bridgeErrorToNSError(a2);
      v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 14, v22 + 22);
      v23[1] = v25;
      sub_10006F094(a2, 1);
      sub_10006F094(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v21, "KTUpdateCloudStorageOperation:perRecordDeleteBlock: fail: %@ %@", (uint8_t *)v22, 0x16u);
      v26 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v23, 2, v26);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      sub_10006F094(a2, 1);
    }
    else
    {
      sub_10006F094(a2, 1);

      sub_10006F094(a2, 1);
      sub_10006F094(a2, 1);

    }
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v6 = type metadata accessor for Logger(0);
    sub_10006F07C(v6, (uint64_t)qword_1002A6888);
    v7 = a1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v28 = (uint64_t)v7;
      v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 4, v10 + 12);
      *v11 = v7;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "KTUpdateCloudStorageOperation:perRecordDeleteBlock: success: %@", v10, 0xCu);
      v13 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {

    }
    objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source), "deleteRecordIDWithCkrecordID:", v7);
  }
}

uint64_t sub_1000B5998()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B59C4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  id v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(char **)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v13 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v4, "setError:", v13);

    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10006F07C(v14, (uint64_t)qword_1002A6888);
    v16 = static os_log_type_t.error.getter(v15);
    swift_errorRetain(a1);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = v16;
    if (os_log_type_enabled(v18, v16))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(a1);
      v22 = _swift_stdlib_bridgeErrorToNSError(a1);
      v35 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
      *v21 = v22;
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: fail: %@", v20, 0xCu);
      v23 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_10006F094(a1, 1);
      sub_10006F094(a1, 1);
    }

    v24 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
    v25 = objc_msgSend(v24, "reachabilityTracker");
    v26 = (void *)_convertErrorToNSError(_:)(a1);
    v27 = objc_msgSend(v25, "isNetworkError:", v26);

    if (v27)
      v28 = 2;
    else
      v28 = 0;
    v29 = objc_allocWithZone((Class)KTPendingFlag);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "initWithFlag:conditions:delayInSeconds:", v30, v28, 0.2);

    v32 = objc_msgSend(v24, "flagHandler");
    if (v32)
    {
      v33 = v32;
      objc_msgSend(v32, "handlePendingFlag:", v31);
      sub_10006F094(a1, 1);
      swift_unknownObjectRelease(v33);
    }
    else
    {
      sub_10006F094(a1, 1);
    }

  }
  else
  {
    if (qword_1002A6880 != -1)
      swift_once(&qword_1002A6880, sub_1000B3D6C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10006F07C(v5, (uint64_t)qword_1002A6888);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = v7;
    v9 = Logger.logObject.getter(v7);
    if (os_log_type_enabled(v9, v8))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v8, "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: success", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps], "networkTimeout");
    objc_msgSend(v11, "networkWithFeedback:", 0);
    swift_unknownObjectRelease(v11);
  }
  v34 = objc_msgSend(v4, "operationQueue");
  objc_msgSend(v34, "addOperation:", v3);

}

void KTUpdateCloudStorageOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTUpdateCloudStorageOperation", 43, "init()", 6, 0);
  __break(1u);
}

id KTUpdateCloudStorageOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000B5EDC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRetain();
  return result;
}

uint64_t sub_1000B5EEC()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000B5F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000B5F84(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000B5FC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000B602C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000B6098(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t (*sub_1000B60DC())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

id sub_1000B60F4()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
}

id sub_1000B6104()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
}

uint64_t sub_1000B6114()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer, v3, 0, 0);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_1000B615C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_unknownObjectRelease(v4);
}

uint64_t (*sub_1000B61AC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000B61F0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep));
}

id KTWatchdog.__allocating_init(control:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1000B8ACC(a1);
  swift_unknownObjectRelease(a1);
  return v4;
}

id KTWatchdog.init(control:)(uint64_t a1)
{
  id v2;

  v2 = sub_1000B8ACC(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

unint64_t sub_1000B6270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006F03C(&qword_1002A0838);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((_QWORD *)&v15 + 1));
    result = sub_100072E70(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t KTWatchdog.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  v10 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
  v1 = sub_10006F03C(&qword_1002A0768);
  v2 = sub_100097360((unint64_t *)&unk_1002A0770, &qword_1002A0768, (uint64_t)&protocol conformance descriptor for [A : B].Keys);
  v3 = sub_10007E948();
  v4 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v1, v2, v3);
  v6 = v5;
  swift_bridgeObjectRelease(v10);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0x446863746157544BLL;
}

id sub_1000B6614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t ObjectType;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  id result;
  double v32;
  double v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(_QWORD *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  double v42;
  double v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t);
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  _QWORD aBlock[5];
  uint64_t v65;

  v63 = type metadata accessor for DispatchTimeInterval(0);
  v53 = *(_QWORD *)(v63 - 8);
  v1 = __chkstk_darwin(v63);
  v51 = (_QWORD **)((char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  v61 = (_QWORD **)((char *)&v51 - v3);
  v54 = type metadata accessor for DispatchTime(0);
  v52 = *(_QWORD *)(v54 - 8);
  v4 = __chkstk_darwin(v54);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v62 = (char *)&v51 - v6;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(uint64_t (**)(char *, uint64_t))(v7 - 8);
  v60 = (_QWORD *)v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006D6DC(0, &qword_1002A0780, OS_dispatch_source_ptr);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_10006F284(&qword_1002A0788, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v19 = sub_10006F03C(&qword_1002A0790);
  v20 = sub_100097360((unint64_t *)&unk_1002A0798, &qword_1002A0790, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v13, v18);
  v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v16, v17);
  v22 = v13;
  v23 = v56;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v22);
  ObjectType = swift_getObjectType(v21);
  v25 = swift_allocObject(&unk_100242FD8, 24, 7);
  v26 = v55;
  *(_QWORD *)(v25 + 16) = v55;
  aBlock[4] = sub_1000B9218;
  v65 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EDF8;
  aBlock[3] = &unk_100242FF0;
  v27 = _Block_copy(aBlock);
  v28 = v26;
  static DispatchQoS.unspecified.getter(v28);
  sub_1000B6B5C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v12, v9, v27, ObjectType);
  _Block_release(v27);
  (*((void (**)(char *, _QWORD *))v59 + 1))(v9, v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
  v29 = swift_release(v65);
  static DispatchTime.now()(v29);
  v30 = *(void **)((char *)v28 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
  result = objc_msgSend(v30, "watchdogInterval");
  v33 = v32 * 1000.0;
  if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v33 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v60 = v28;
  v34 = v61;
  *v61 = (uint64_t)v33;
  v35 = enum case for DispatchTimeInterval.milliseconds(_:);
  v36 = v53;
  v37 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v53 + 104);
  v38 = v63;
  v37(v34, enum case for DispatchTimeInterval.milliseconds(_:), v63);
  + infix(_:_:)(v23, v34);
  v39 = *(void (**)(_QWORD *, uint64_t))(v36 + 8);
  v39(v34, v38);
  v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  v41 = v54;
  v40(v23, v54);
  result = objc_msgSend(v30, "watchdogInterval");
  v43 = v42 * 1000.0;
  if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v43 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v43 < 9.22337204e18)
  {
    v44 = v61;
    *v61 = (uint64_t)v43;
    v45 = v63;
    v37(v44, v35, v63);
    v59 = (uint64_t (*)(char *, uint64_t))v40;
    v46 = ObjectType;
    v47 = v51;
    *v51 = 100;
    v37(v47, v35, v45);
    v48 = v62;
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v62, v44, v47, v46);
    v39(v47, v45);
    v39(v44, v45);
    OS_dispatch_source.resume()();
    v49 = *(void (**)(uint64_t))((swift_isaMask & *v60) + 0xC0);
    v50 = swift_unknownObjectRetain(v21);
    v49(v50);
    swift_unknownObjectRelease(v21);
    return (id)v59(v48, v41);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1000B6B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10006F03C(&qword_10029FE08);
  v3 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

Swift::Void __swiftcall KTWatchdog.resume()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  swift_unknownObjectRelease(v1);
  if (!v1)
    (*(void (**)(void))((swift_isaMask & *v0) + 0xD8))();
}

uint64_t KTWatchdog.add(named:watcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue];
  v16 = (_QWORD *)swift_allocObject(&unk_100243028, 56, 7);
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_1000B929C;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EDF8;
  aBlock[3] = &unk_100243040;
  v17 = _Block_copy(aBlock);
  v18 = v4;
  swift_bridgeObjectRetain(a2);
  v19 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10006F03C(&qword_10029FE08);
  v22 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

uint64_t sub_1000B6FA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x88))(result);
    v9 = v0;
    sub_1000B938C((uint64_t)_swiftEmptyArrayStorage, v8, v9);
    v11 = v10;
    swift_bridgeObjectRelease(v8);

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B70B4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *(*v12)(uint64_t *__return_ptr, __n128);
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a2;
  v10 = a2[1];
  v12 = (_QWORD *(*)(uint64_t *__return_ptr, __n128))a2[2];
  v13 = a2[3];
  swift_retain_n(v13, 2);
  v14 = swift_bridgeObjectRetain(v10);
  v15 = v12(&v34, v14);
  if ((v34 & 1) != 0)
  {
    swift_release_n(v13, 2);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v32 = v11;
    (*(void (**)(_QWORD *))((swift_isaMask & *a3) + 0xA0))(v15);
    v17 = swift_bridgeObjectRetain_n(v10, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v31 = a1;
      v22 = v21;
      v34 = v21;
      *(_DWORD *)v20 = 136315138;
      v30 = v20 + 4;
      swift_bridgeObjectRetain(v10);
      v33 = sub_10006C790(v32, v10, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v30, v20 + 12);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "watcher %s failed", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v23 = v22;
      a1 = v31;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release_n(v13, 2);
    v24 = *a1;
    result = swift_isUniquelyReferenced_nonNull_native(*a1);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_10007BA1C(0, *(_QWORD *)(v24 + 16) + 1, 1, (char *)v24);
      v24 = result;
    }
    v25 = v32;
    v27 = *(_QWORD *)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
    if (v27 >= v26 >> 1)
    {
      result = (uint64_t)sub_10007BA1C((char *)(v26 > 1), v27 + 1, 1, (char *)v24);
      v24 = result;
    }
    *(_QWORD *)(v24 + 16) = v27 + 1;
    v28 = v24 + 16 * v27;
    *(_QWORD *)(v28 + 32) = v25;
    *(_QWORD *)(v28 + 40) = v10;
    *a1 = v24;
  }
  return result;
}

Swift::Void __swiftcall KTWatchdog.shutdown(reason:)(Swift::String reason)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  double v26;
  double v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t countAndFlagsBits;
  void *object;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[2];
  Swift::String v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD aBlock[5];
  _QWORD *v53;

  v2 = v1;
  v43 = reason;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  __chkstk_darwin(v3);
  v48 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  __chkstk_darwin(v5);
  v45 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTimeInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v44 - 8);
  v12 = __chkstk_darwin(v44);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v42 - v16;
  v18 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v1) + 0xB8);
  v19 = ((uint64_t (*)(uint64_t))v18)(v15);
  if (!v19
    || (v20 = v19,
        ObjectType = swift_getObjectType(v19),
        v22 = OS_dispatch_source.isCancelled.getter(ObjectType),
        swift_unknownObjectRelease(v20),
        (v22 & 1) == 0))
  {
    v23 = v18();
    if (v23)
    {
      v24 = v23;
      swift_getObjectType(v23);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v24);
    }
    v25 = *(void **)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep];
    static DispatchTime.now()(objc_msgSend(v25, "watchdogNiceExit"));
    objc_msgSend(v25, "watchdogNiceWaitTime");
    v27 = v26 * 1000.0;
    if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) != 0)
    {
      if (v27 > -9.22337204e18)
      {
        if (v27 < 9.22337204e18)
        {
          *v10 = (uint64_t)v27;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchTimeInterval.milliseconds(_:), v7);
          + infix(_:_:)(v14, v10);
          (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
          v28 = *(void (**)(char *, uint64_t))(v11 + 8);
          v29 = v44;
          v28(v14, v44);
          v42[1] = *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue];
          v30 = (_QWORD *)swift_allocObject(&unk_100243078, 40, 7);
          countAndFlagsBits = v43._countAndFlagsBits;
          object = v43._object;
          v30[2] = v2;
          v30[3] = countAndFlagsBits;
          v30[4] = object;
          aBlock[4] = sub_1000B95A4;
          v53 = v30;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10008EDF8;
          aBlock[3] = &unk_100243090;
          v33 = _Block_copy(aBlock);
          v34 = v2;
          swift_bridgeObjectRetain(object);
          v35 = v45;
          static DispatchQoS.unspecified.getter(v36);
          v51 = _swiftEmptyArrayStorage;
          v37 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v38 = sub_10006F03C(&qword_10029FE08);
          v39 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
          v40 = v48;
          v41 = v50;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v38, v39, v50, v37);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v35, v40, v33);
          _Block_release(v33);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
          v28(v17, v29);
          swift_release(v53);
          return;
        }
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

void sub_1000B78A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v35 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    v20 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
    if ((objc_msgSend(v20, "watchdogDisableDebuggerCheck") & 1) != 0
      || (_s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0() & 1) == 0)
    {
      if ((*((_BYTE *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) & 1) != 0)
      {
        v30 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
        v31 = Logger.logObject.getter(v30);
        v32 = static os_log_type_t.error.getter(v31);
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "watch is still pending, shuting down", v33, 2u);
          swift_slowDealloc(v33, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
        if (objc_msgSend(v20, "watchDogFastRudeExit"))
        {
          v34 = String._bridgeToObjectiveC()();
          objc_msgSend(v20, "watchdogRudeExitWithReason:", v34);

        }
        else
        {
          (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *v1) + 0xF8))(0x676E69646E6570, 0xE700000000000000);
        }
      }
      else
      {
        *((_BYTE *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 1;
        v25 = swift_allocObject(&unk_1002430C8, 24, 7);
        *(_QWORD *)(v25 + 16) = v1;
        aBlock[4] = sub_1000B95F8;
        v42 = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10008EDF8;
        aBlock[3] = &unk_1002430E0;
        v26 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v1);
        v40 = _swiftEmptyArrayStorage;
        v27 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v28 = sub_10006F03C(&qword_10029FE08);
        v29 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v2, v27);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v2);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v36);
        swift_release(v42);
      }
    }
    else
    {
      v21 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "skipping watchdog since we are in debugger", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000B7D78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0))(v8);
  *((_BYTE *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 0;
  v18 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  v12 = swift_allocObject(&unk_100243140, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000B9780;
  v21 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008EDF8;
  aBlock[3] = &unk_100243158;
  v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a1);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_10006F284(&qword_10029FE00, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10006F03C(&qword_10029FE08);
  v16 = sub_100097360(&qword_10029FE10, &qword_10029FE08, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release(v21);
}

uint64_t sub_1000B7F94(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  Swift::String v13;
  void *object;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xA0))(result);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "watchdog failed, shuting down", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v16 = 0x3A72656863746177;
    v17 = 0xE900000000000020;
    v13._countAndFlagsBits = Array.description.getter(a1, &type metadata for String);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    v15 = v17;
    (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *a2) + 0xF8))(v16, v17);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

uint64_t sub_1000B815C()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  if (result)
  {
    v2 = result;
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void KTWatchdog.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTWatchdog", 24, "init()", 6, 0);
  __break(1u);
}

id KTWatchdog.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTWatchdog(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_1000B8370(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10006F03C((uint64_t *)&unk_1002A0840);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000B8E6C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000B847C(_QWORD *a1)
{
  return sub_1000B8370(0, a1[2], 0, a1);
}

Swift::Int sub_1000B8490(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_1002A0838);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_retain(*((_QWORD *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

void sub_1000B8798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100072E70(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000B890C();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_release(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1000B8490(v17, a5 & 1);
  v22 = sub_100072E70(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void *sub_1000B890C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10006F03C(&qword_1002A0838);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(*((_QWORD *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000B8ACC(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  objc_class *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  objc_super v38;
  _QWORD v39[3];

  v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep] = a1;
  v15 = v1;
  v34 = v15;
  swift_unknownObjectRetain(a1);
  *(_QWORD *)&v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers] = sub_1000B6270((uint64_t)_swiftEmptyArrayStorage);
  Logger.init(transparencyCategory:)(0x676F646863746177, 0xE800000000000000);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_log], v14, v11);
  v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending] = 0;
  v16 = sub_10006D6DC(0, (unint64_t *)&qword_10029F050, OS_dispatch_queue_ptr);
  v17 = v10;
  static DispatchQoS.unspecified.getter(v16);
  v39[0] = _swiftEmptyArrayStorage;
  v18 = sub_10006F284((unint64_t *)&qword_1002A0850, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v32 = v18;
  v19 = sub_10006F03C(&qword_10029F058);
  v31 = v19;
  v33 = sub_100097360((unint64_t *)&qword_1002A0860, &qword_10029F058, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v19, v33, v5, v18);
  v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v23 = v35;
  v24 = v36;
  v22(v35, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x676F446863746157, 0xED00006575657551, v17, v20, v23, 0);
  v26 = v34;
  *(_QWORD *)&v34[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue] = v25;
  static DispatchQoS.unspecified.getter(v25);
  v39[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v31, v33, v5, v32);
  v22(v23, v21, v24);
  *(_QWORD *)&v26[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000011, 0x80000001001E00E0, v17, v20, v23, 0);
  v27 = v37;
  swift_beginAccess(v37, v39, 1, 0);
  v28 = *(_QWORD *)v27;
  *(_QWORD *)v27 = 0;

  swift_unknownObjectRelease(v28);
  v29 = (objc_class *)type metadata accessor for KTWatchdog(0);
  v38.receiver = v26;
  v38.super_class = v29;
  return objc_msgSendSuper2(&v38, "init");
}

char *sub_1000B8E6C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0()
{
  id v0;
  unsigned int v1;
  _QWORD *v2;
  size_t v3;
  int64_t v4;
  uint64_t result;
  char v6[16];
  size_t v7;
  size_t v8;
  _BYTE v9[37];
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  _BYTE v28[28];
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[28];
  uint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;

  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v11 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v25 = 0;
  v38 = 0;
  v39 = 0;
  v44 = 0;
  v51 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v23 = 0;
  v24 = 0;
  v22 = 0u;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  v29 = 0u;
  v26 = 0;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v45 = 0u;
  v47 = 0;
  v46 = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v52 = 0u;
  v54 = 0;
  v53 = 0;
  v55 = 0u;
  v56 = 0u;
  v8 = 648;
  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "processIdentifier");

  v7 = 12;
  v2 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(12, &type metadata for Int32);
  v2[2] = 12;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)v6 = xmmword_100215550;
  sysctlnametomib(v6, (int *)v2 + 8, &v7);
  v3 = v7;
  v4 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= 12)
    {
      swift_bridgeObjectRelease(v2);
      return 0;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) != 0)
    {
      if ((v3 & 0x8000000000000000) == 0)
        goto LABEL_5;
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
    }
  }
  v2 = sub_1000B847C(v2);
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_12;
LABEL_5:
  if (v3 >= v2[2])
    goto LABEL_13;
  *((_DWORD *)v2 + v3 + 8) = v1;
  v7 = v4;
  if (v4 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    sysctl((int *)v2 + 8, v4, v9, &v8, 0, 0);
    swift_bridgeObjectRelease(v2);
    return (v9[33] >> 3) & 1;
  }
  return result;
}

uint64_t sub_1000B91F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B9218()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0x100))();
}

uint64_t sub_1000B9250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B9260(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B9268()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B929C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_BYTE *);
  uint64_t (*v8)(_BYTE *, _QWORD);
  uint64_t *v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[32];

  v1 = (_QWORD *)v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = swift_allocObject(&unk_100243190, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v1) + 0x98);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  v8 = (uint64_t (*)(_BYTE *, _QWORD))v7(v15);
  v10 = v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v14 = *v10;
  *v10 = 0x8000000000000000;
  sub_1000B8798((uint64_t)sub_1000B97AC, v6, v2, v3, isUniquelyReferenced_nonNull_native);
  v12 = *v10;
  *v10 = v14;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v3);
  return v8(v15, 0);
}

void sub_1000B938C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  __int128 v24;
  uint64_t v25;

  v25 = a1;
  v6 = a2 + 64;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 16 * i;
    v18 = *(_QWORD *)(a2 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + v17);
    v20 = v19[1];
    v23[0] = *v19;
    v23[1] = v20;
    v24 = *(_OWORD *)(v18 + v17);
    v22 = *((_QWORD *)&v24 + 1);
    swift_bridgeObjectRetain(v20);
    swift_retain(v22);
    sub_1000B70B4(&v25, v23, a3);
    if (v3)
    {
      v21 = v25;
      swift_release(a2);
      swift_release(v22);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v21);
      return;
    }
    swift_release(v22);
    swift_bridgeObjectRelease(v20);
    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_25;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v10)
            goto LABEL_25;
          v15 = *(_QWORD *)(v6 + 8 * v11);
          if (!v15)
            break;
        }
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_25:
    swift_release(a2);
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1000B9578()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B95A4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "watchdogRudeExitWithReason:", v2);

}

uint64_t sub_1000B95F8()
{
  uint64_t v0;

  return sub_1000B7D78(*(_QWORD **)(v0 + 16));
}

uint64_t type metadata accessor for KTWatchdog(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A6D40;
  if (!qword_1002A6D40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTWatchdog);
  return result;
}

uint64_t sub_1000B963C()
{
  return type metadata accessor for KTWatchdog(0);
}

uint64_t sub_1000B9644(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100215580;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_100215598;
    v4[6] = &unk_1002155B0;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

char *sub_1000B96EC()
{
  if (&swift_runtimeSupportsNoncopyableTypes)
    return (char *)sub_10006F03C(&qword_1002A07A8);
  else
    return (char *)&type metadata for () + 8;
}

uint64_t sub_1000B9714()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B9738()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000B9754()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9780()
{
  uint64_t v0;

  return sub_1000B7F94(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1000B9788()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B97AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t *sub_1000B97FC()
{
  return &qword_1002A08D0;
}

uint64_t sub_1000B9808()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_1002A08D0, v2, 0, 0);
  v0 = qword_1002A08D0;
  swift_bridgeObjectRetain(off_1002A08D8);
  return v0;
}

uint64_t sub_1000B98BC(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_1002A08D0, v6, 1, 0);
  v4 = off_1002A08D8;
  qword_1002A08D0 = a1;
  off_1002A08D8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000B9974(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_1002A08D0, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000B99B4()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps);
}

id sub_1000B99CC(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000B9A18(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for KTFixupRemoveMacAppSupportFiles()
{
  return objc_opt_self(_TtC13transparencyd31KTFixupRemoveMacAppSupportFiles);
}

void sub_1000B9AC8()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTFixupRemoveMacAppSupportFiles", 45, "init()", 6, 0);
  __break(1u);
}

id sub_1000B9B20()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t Logger.init(transparencyCategory:)(uint64_t a1, uint64_t a2)
{
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001001E0270, a1, a2);
}

const char *TransparencyFeatureFlags.domain.getter()
{
  return "Transparency";
}

const char *TransparencyFeatureFlags.feature.getter(char a1)
{
  if ((a1 & 1) != 0)
    return "KTUseKVSOptInRecords";
  else
    return "KTDisableKVSSyncedData";
}

BOOL static TransparencyFeatureFlags.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TransparencyFeatureFlags.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int TransparencyFeatureFlags.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_1000B9C3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

const char *sub_1000B9C54()
{
  _BYTE *v0;

  if (*v0)
    return "KTUseKVSOptInRecords";
  else
    return "KTDisableKVSSyncedData";
}

uint64_t sub_1000B9C84(uint64_t a1)
{
  return sub_1000BB104(a1);
}

uint64_t sub_1000B9C9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_1000BB104(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000B9CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;

  v4 = type metadata accessor for KTError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = a1 - 1;
  v9 = 5;
  switch(v8)
  {
    case 0:
      goto LABEL_17;
    case 2:
      v10 = sub_10006F03C(&qword_1002A0920);
      v11 = (char *)v7 + *(int *)(v10 + 48);
      v12 = (char *)v7 + *(int *)(v10 + 64);
      *v7 = 0;
      v7[1] = 0xE000000000000000;
      v13 = type metadata accessor for Date(0);
      v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v9 = 1;
      v14(v11, 1, 1, v13);
      v14(v12, 1, 1, v13);
      goto LABEL_17;
    case 3:
      v9 = 6;
      goto LABEL_17;
    case 4:
      v9 = 7;
      goto LABEL_17;
    case 5:
      v9 = 8;
      goto LABEL_17;
    case 6:
      *v7 = _swiftEmptyArrayStorage;
      v9 = 2;
      goto LABEL_17;
    case 7:
      v9 = 9;
      goto LABEL_17;
    case 8:
      v9 = 10;
      goto LABEL_17;
    case 9:
      v9 = 11;
      goto LABEL_17;
    case 10:
      v9 = 12;
      goto LABEL_17;
    case 11:
      v9 = 13;
      goto LABEL_17;
    case 12:
      v9 = 14;
      goto LABEL_17;
    case 13:
      v9 = 15;
      goto LABEL_17;
    case 14:
      *v7 = 0;
      v7[1] = 0xE000000000000000;
      v9 = 3;
      goto LABEL_17;
    case 15:
      *v7 = 0;
      v7[1] = 0xE000000000000000;
      v9 = 4;
LABEL_17:
      swift_storeEnumTagMultiPayload(v7, v4, v9);
      sub_1000BB154((uint64_t)v7, a2);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
      break;
    default:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
      break;
  }
  return result;
}

void sub_1000B9EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for KTError(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BB198(v0, (uint64_t)v3);
  v4 = (char *)sub_1000B9F44 + 4 * byte_100215620[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000B9F44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  return 2;
}

uint64_t *sub_1000BA02C()
{
  return &qword_1002A0910;
}

uint64_t sub_1000BA038()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_1002A0910, v2, 0, 0);
  v0 = qword_1002A0910;
  swift_bridgeObjectRetain(off_1002A0918);
  return v0;
}

uint64_t sub_1000BA088(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_1002A0910, v6, 1, 0);
  v4 = off_1002A0918;
  qword_1002A0910 = a1;
  off_1002A0918 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000BA0E0(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_1002A0910, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_1000BA120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_BYTE *, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  unint64_t v48;
  char v49;
  _BYTE v51[80];
  unint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;

  v1 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v2 = __chkstk_darwin(v1);
  v4 = &v51[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __chkstk_darwin(v2);
  v7 = &v51[-v6];
  v8 = __chkstk_darwin(v5);
  v10 = &v51[-v9];
  __chkstk_darwin(v8);
  v12 = &v51[-v11];
  v13 = type metadata accessor for KTError(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)&v51[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000BB198(v0, (uint64_t)v15);
  switch(swift_getEnumCaseMultiPayload(v15, v13))
  {
    case 1u:
      v16 = *v15;
      v17 = v15[1];
      v18 = sub_10006F03C(&qword_1002A0920);
      v19 = (uint64_t)v15 + *(int *)(v18 + 64);
      sub_100075A9C((uint64_t)v15 + *(int *)(v18 + 48), (uint64_t)v12);
      sub_100075A9C(v19, (uint64_t)v10);
      v20 = sub_10009CBF8((uint64_t)_swiftEmptyArrayStorage);
      v55 = &type metadata for String;
      *(_QWORD *)&v54 = v16;
      *((_QWORD *)&v54 + 1) = v17;
      sub_1000972F4(&v54, v53);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      v52 = v20;
      sub_1000BAD88(v53, 6910581, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
      v56 = v52;
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10009C678((uint64_t)v12, (uint64_t)v7, (uint64_t *)&unk_10029EE40);
      v22 = type metadata accessor for Date(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48);
      if (v24(v7, 1, v22) == 1)
      {
        sub_100081AB0((uint64_t)v7, (uint64_t *)&unk_10029EE40);
        sub_1000BA7C8(0x73656D6954746D73, 0xEC000000706D6174, &v54);
        sub_100081AB0((uint64_t)&v54, &qword_1002A0928);
      }
      else
      {
        v55 = (void *)v22;
        v44 = sub_1000BB218(&v54);
        (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v23 + 32))(v44, v7, v22);
        sub_1000972F4(&v54, v53);
        v45 = v56;
        v46 = swift_isUniquelyReferenced_nonNull_native(v56);
        v52 = v45;
        sub_1000BAD88(v53, 0x73656D6954746D73, 0xEC000000706D6174, v46);
        v56 = v52;
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      sub_10009C678((uint64_t)v10, (uint64_t)v4, (uint64_t *)&unk_10029EE40);
      if (v24(v4, 1, v22) == 1)
      {
        sub_100081AB0((uint64_t)v4, (uint64_t *)&unk_10029EE40);
        sub_1000BA7C8(0x63655264756F6C63, 0xEB0000000064726FLL, &v54);
        sub_100081AB0((uint64_t)&v54, &qword_1002A0928);
        v25 = v56;
      }
      else
      {
        v55 = (void *)v22;
        v47 = sub_1000BB218(&v54);
        (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v23 + 32))(v47, v4, v22);
        sub_1000972F4(&v54, v53);
        v48 = v56;
        v49 = swift_isUniquelyReferenced_nonNull_native(v56);
        v52 = v48;
        sub_1000BAD88(v53, 0x63655264756F6C63, 0xEB0000000064726FLL, v49);
        v25 = v52;
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      sub_100081AB0((uint64_t)v10, (uint64_t *)&unk_10029EE40);
      sub_100081AB0((uint64_t)v12, (uint64_t *)&unk_10029EE40);
      return v25;
    case 2u:
      v26 = *v15;
      v27 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v54 = _swiftEmptyArrayStorage;
      v28 = *(_QWORD *)(v26 + 16);
      if (v28)
      {
        swift_bridgeObjectRetain(v26);
        for (i = 0; i != v28; ++i)
        {
          v30 = *(_QWORD *)(v26 + 8 * i + 32);
          swift_errorRetain(v30);
          v31 = _convertErrorToNSError(_:)(v30);
          v32 = swift_errorRelease(v30);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v34 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v33 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v34 >= v33 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v31);
          specialized Array._endMutation()(v35);
        }
        swift_bridgeObjectRelease(v26);
        v27 = (_QWORD *)v54;
      }
      swift_bridgeObjectRelease(v26);
      v41 = sub_10006F03C(&qword_10029FF78);
      inited = swift_initStackObject(v41, v51);
      *(_OWORD *)(inited + 16) = xmmword_1002143C0;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMultipleUnderlyingErrorsKey);
      *(_QWORD *)(inited + 40) = v43;
      *(_QWORD *)(inited + 72) = sub_10006F03C(&qword_1002A0930);
      *(_QWORD *)(inited + 48) = v27;
      v40 = inited;
      goto LABEL_15;
    case 3u:
      v36 = *v15;
      v37 = v15[1];
      v38 = sub_10006F03C(&qword_10029FF78);
      v39 = &v57;
      goto LABEL_13;
    case 4u:
      v36 = *v15;
      v37 = v15[1];
      v38 = sub_10006F03C(&qword_10029FF78);
      v39 = (uint64_t *)&v58;
LABEL_13:
      v40 = swift_initStackObject(v38, v39);
      *(_OWORD *)(v40 + 16) = xmmword_1002143C0;
      *(_QWORD *)(v40 + 32) = 6910581;
      *(_QWORD *)(v40 + 40) = 0xE300000000000000;
      *(_QWORD *)(v40 + 72) = &type metadata for String;
      *(_QWORD *)(v40 + 48) = v36;
      *(_QWORD *)(v40 + 56) = v37;
LABEL_15:
      v25 = sub_10009CBF8(v40);
      break;
    default:
      v25 = sub_10009CBF8((uint64_t)_swiftEmptyArrayStorage);
      sub_1000BB1DC((uint64_t)v15);
      break;
  }
  return v25;
}

uint64_t sub_1000BA6A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BC068(&qword_1002A09E8, (uint64_t)&unk_1002157CC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000BA6DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_1000BC068(&qword_1002A09E8, (uint64_t)&unk_1002157CC);
  v3 = sub_1000BC068(&qword_1002A09E0, (uint64_t)&unk_10021580C);
  v4 = sub_10006F454();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_1000BA744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = sub_1000BC068(&qword_1002A09E0, (uint64_t)&unk_10021580C);
  v5 = sub_10006F454();
  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_1000BA79C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B9CCC(*a1, a2);
}

void sub_1000BA7A4(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_1000B9EC0();
  *a1 = v2;
}

double sub_1000BA7C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100072E70(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000BAF20();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1000972F4((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1000BABB4(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1000BA8B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006F03C(&qword_10029FCC8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1000972F4(v25, v38);
      }
      else
      {
        sub_10006F118((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1000972F4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_1000BABB4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000BAD88(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100072E70(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10006F0F8(v19);
        sub_1000972F4(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000BAF20();
      goto LABEL_7;
    }
    sub_1000BA8B8(v15, a4 & 1);
    v20 = sub_100072E70(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BAEB8(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_1000BAEB8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000972F4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void sub_1000BAF20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10006F03C(&qword_10029FCC8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10006F118(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000972F4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_1000BB104(uint64_t result)
{
  if ((unint64_t)(result - 17) < 0xFFFFFFFFFFFFFFF0)
    return 0;
  return result;
}

uint64_t type metadata accessor for KTError(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A71D0;
  if (!qword_1002A71D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTError);
  return result;
}

uint64_t sub_1000BB154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KTError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KTError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB1DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KTError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1000BB218(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_1000BB258()
{
  unint64_t result;

  result = qword_1002A0938;
  if (!qword_1002A0938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyFeatureFlags, &type metadata for TransparencyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1002A0938);
  }
  return result;
}

unint64_t sub_1000BB2A0()
{
  unint64_t result;

  result = qword_1002A0940;
  if (!qword_1002A0940)
  {
    result = swift_getWitnessTable(&unk_1002156EC, &type metadata for KTErrorOBJC);
    atomic_store(result, (unint64_t *)&qword_1002A0940);
  }
  return result;
}

uint64_t sub_1000BB2E4()
{
  return sub_1000BC068((unint64_t *)&qword_10029FCB0, (uint64_t)&unk_10021578C);
}

uint64_t getEnumTagSinglePayload for TransparencyFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TransparencyFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000BB3E4 + 4 * byte_100215639[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BB418 + 4 * byte_100215634[v4]))();
}

uint64_t sub_1000BB418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BB428);
  return result;
}

uint64_t sub_1000BB434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BB43CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000BB440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000BB454(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyFeatureFlags()
{
  return &type metadata for TransparencyFeatureFlags;
}

ValueMetadata *type metadata accessor for KTErrorOBJC()
{
  return &type metadata for KTErrorOBJC;
}

_QWORD *sub_1000BB480(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain(v11);
        v12 = sub_10006F03C(&qword_1002A0920);
        v13 = *(int *)(v12 + 48);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for Date(0);
        v17 = *(_QWORD *)(v16 - 8);
        v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        if (v18(v15, 1, v16))
        {
          v19 = sub_10006F03C((uint64_t *)&unk_10029EE40);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        v23 = *(int *)(v12 + 64);
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        if (v18(v25, 1, v16))
        {
          v26 = sub_10006F03C((uint64_t *)&unk_10029EE40);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v25, v16);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v24, 0, 1, v16);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v20 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        swift_bridgeObjectRetain(v22);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000BB6E0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
      v4 = a1[1];
      goto LABEL_8;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      v5 = sub_10006F03C(&qword_1002A0920);
      v6 = (char *)a1 + *(int *)(v5 + 48);
      v7 = type metadata accessor for Date(0);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (!v9(v6, 1, v7))
        (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
      v10 = (char *)a1 + *(int *)(v5 + 64);
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v9)(v10, 1, v7);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      break;
    case 2:
      v4 = *a1;
LABEL_8:
      result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_1000BB7E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_14;
    case 1u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v11 = sub_10006F03C(&qword_1002A0920);
      v12 = *(int *)(v11 + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (v17(v14, 1, v15))
      {
        v18 = sub_10006F03C((uint64_t *)&unk_10029EE40);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v22 = *(int *)(v11 + 64);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      if (v17(v24, 1, v15))
      {
        v25 = sub_10006F03C((uint64_t *)&unk_10029EE40);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
      }
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_14;
    case 2u:
      v19 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v19);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_14;
    case 3u:
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      swift_bridgeObjectRetain(v20);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_14;
    case 4u:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      swift_bridgeObjectRetain(v21);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_14:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_1000BBA10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_1000BB1DC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_15;
      case 1u:
        *a1 = *a2;
        v10 = a2[1];
        a1[1] = v10;
        swift_bridgeObjectRetain(v10);
        v11 = sub_10006F03C(&qword_1002A0920);
        v12 = *(int *)(v11 + 48);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for Date(0);
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        if (v17(v14, 1, v15))
        {
          v18 = sub_10006F03C((uint64_t *)&unk_10029EE40);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v22 = *(int *)(v11 + 64);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        if (v17(v24, 1, v15))
        {
          v25 = sub_10006F03C((uint64_t *)&unk_10029EE40);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
        }
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_15;
      case 2u:
        v19 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v19);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_15;
      case 3u:
        *a1 = *a2;
        v20 = a2[1];
        a1[1] = v20;
        swift_bridgeObjectRetain(v20);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_15;
      case 4u:
        *a1 = *a2;
        v21 = a2[1];
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_15:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_1000BBC68(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = sub_10006F03C(&qword_1002A0920);
    v7 = *(int *)(v6 + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = sub_10006F03C((uint64_t *)&unk_10029EE40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(v6 + 64);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    if (v12(v16, 1, v10))
    {
      v17 = sub_10006F03C((uint64_t *)&unk_10029EE40);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1000BBDF8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_1000BB1DC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = sub_10006F03C(&qword_1002A0920);
      v7 = *(int *)(v6 + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v12(v9, 1, v10))
      {
        v13 = sub_10006F03C((uint64_t *)&unk_10029EE40);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v14 = *(int *)(v6 + 64);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      if (v12(v16, 1, v10))
      {
        v17 = sub_10006F03C((uint64_t *)&unk_10029EE40);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000BBF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000BBFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000BBFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_1000BBFC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[5];

  v5[0] = &unk_100215890;
  sub_1000815E4(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, &unk_1002158A8, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v2 - 8) + 64);
    v5[1] = v4;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = &unk_1002158A8;
    v5[4] = &unk_1002158A8;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v5);
  }
}

uint64_t sub_1000BC068(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for KTError(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BC0A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10006F0A0(v0, qword_1002A71E8);
  sub_10006F07C(v0, (uint64_t)qword_1002A71E8);
  return Logger.init(transparencyCategory:)(0x74704F65726F7453, 0xEA00000000006E49);
}

uint64_t KTStoreOptInOperation.storedRecords.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t KTStoreOptInOperation.storedRecords.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*KTStoreOptInOperation.storedRecords.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords, a1, 33, 0);
  return j__swift_endAccess;
}

id KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  objc_class *v6;
  _BYTE *v13;
  _QWORD *v14;
  objc_super v16;

  v13 = objc_allocWithZone(v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  v14 = &v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  *v14 = a4;
  v14[1] = a5;
  v16.receiver = v13;
  v16.super_class = v6;
  return objc_msgSendSuper2(&v16, "init");
}

id KTStoreOptInOperation.init(database:context:records:type:overwrite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _BYTE *v6;
  _QWORD *v7;
  objc_super v9;

  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  v7 = &v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  *v7 = a4;
  v7[1] = a5;
  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for KTStoreOptInOperation();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for KTStoreOptInOperation()
{
  return objc_opt_self(_TtC13transparencyd21KTStoreOptInOperation);
}

Swift::Void __swiftcall KTStoreOptInOperation.groupStart()()
{
  char *v0;
  _BYTE *v1;
  id v2;
  _QWORD *v3;
  CKModifyRecordsOperation v4;
  Class isa;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  NSString v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  id v14;
  objc_class *v15;
  Swift::OpaquePointer_optional v16;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)NSBlockOperation), "init");
  objc_msgSend(v0, "dependOnBeforeGroupFinished:", v2);
  sub_1000BC540();
  swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records]);
  v3 = _swiftEmptyArrayStorage;
  v4.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(*(Swift::OpaquePointer_optional *)(&v3 - 1), v16).super.super.super.super.isa;
  isa = v4.super.super.super.super.isa;
  if (v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] == 1)
    -[objc_class setSavePolicy:](v4.super.super.super.super.isa, "setSavePolicy:", 2);
  -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  v7 = *(void **)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type + 8];
  v15 = isa;
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEC0000002D65726FLL);
  -[objc_class setName:](v15, "setName:", v9);

  v10 = swift_allocObject(&unk_100243328, 24, 7);
  *(_QWORD *)(v10 + 16) = v1;
  v11 = v1;
  CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1000BC5A0, v10);
  v12 = swift_allocObject(&unk_100243350, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v2;
  v13 = v11;
  v14 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000BC864, v12);
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database], "addOperation:", v15);

}

unint64_t sub_1000BC540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029F770;
  if (!qword_10029F770)
  {
    v1 = objc_opt_self(CKModifyRecordsOperation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10029F770);
  }
  return result;
}

uint64_t sub_1000BC57C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BC5A0(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t *);
  id v7;
  void (*v8)(uint64_t *, _QWORD);
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD **)(v3 + 16);
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    v14 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v5, "setError:", v14);

    if (qword_1002A71E0 != -1)
      swift_once(&qword_1002A71E0, sub_1000BC0A8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10006F07C(v15, (uint64_t)qword_1002A71E8);
    v17 = static os_log_type_t.error.getter(v16);
    swift_errorRetain(a2);
    v18 = swift_errorRetain(a2);
    log = Logger.logObject.getter(v18);
    if (os_log_type_enabled(log, v17))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a2);
      v21 = _swift_stdlib_bridgeErrorToNSError(a2);
      v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4, v19 + 12);
      *v20 = v21;
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v17, "KTStoreOptInOperation:perRecordSaveBlock: fail: %@", v19, 0xCu);
      v22 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      sub_10006F0EC(a2, 1);
    }
    else
    {
      sub_10006F0EC(a2, 1);
      sub_10006F0EC(a2, 1);
      swift_errorRelease(a2);

    }
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v5) + 0x90);
    v7 = a2;
    v8 = (void (*)(uint64_t *, _QWORD))v6(&v24);
    v10 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
    v12 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v7);
    specialized Array._endMutation()(v13);
    v8(&v24, 0);
  }
}

uint64_t sub_1000BC838()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000BC864(uint64_t a1, char a2)
{
  sub_1000BCF7C(a1, a2, "KTStoreOptInOperation:modifyRecordsResultBlock: fail: %@", "KTStoreOptInOperation:modifyRecordsResultBlock: success");
}

void KTStoreOptInOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTStoreOptInOperation", 35, "init()", 6, 0);
  __break(1u);
}

id KTStoreOptInOperation.__deallocating_deinit()
{
  return sub_1000A2B94(type metadata accessor for KTStoreOptInOperation);
}

void *KTDeleteOptInOperation.deletedRecordID.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void KTDeleteOptInOperation.deletedRecordID.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*KTDeleteOptInOperation.deletedRecordID.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID, a1, 33, 0);
  return j_j__swift_endAccess;
}

id KTDeleteOptInOperation.__allocating_init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  objc_super v9;

  v7 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

id KTDeleteOptInOperation.init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_super v5;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTDeleteOptInOperation();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for KTDeleteOptInOperation()
{
  return objc_opt_self(_TtC13transparencyd22KTDeleteOptInOperation);
}

Swift::Void __swiftcall KTDeleteOptInOperation.groupStart()()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;
  NSString v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char *v12;
  id v13;
  objc_class *v14;
  Swift::Bool v15;
  Swift::OpaquePointer_optional v16;
  Swift::OpaquePointer_optional v17;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)NSBlockOperation), "init");
  objc_msgSend(v0, "dependOnBeforeGroupFinished:", v2);
  sub_1000BC540();
  v3 = sub_10006F03C(&qword_10029F870);
  v4 = swift_allocObject(v3, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100214910;
  v5 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID];
  *(_QWORD *)(v4 + 32) = v5;
  v15 = v4;
  specialized Array._endMutation()(v4);
  v6 = v5;
  v16.value._rawValue = _swiftEmptyArrayStorage;
  v16.is_nil = v15;
  isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v16, v17).super.super.super.super.isa;
  -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
  v14 = isa;
  v8 = String._bridgeToObjectiveC()();
  -[objc_class setName:](v14, "setName:", v8);

  v9 = swift_allocObject(&unk_100243378, 24, 7);
  *(_QWORD *)(v9 + 16) = v1;
  v10 = v1;
  CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1000BCD24, v9);
  v11 = swift_allocObject(&unk_1002433A0, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v2;
  v12 = (char *)v10;
  v13 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000BCF68, v11);
  objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database], "addOperation:", v14);

}

void sub_1000BCD24(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  void (*v6)(void *);
  id v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *log;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD **)(v3 + 16);
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    v9 = (void *)_convertErrorToNSError(_:)(a2);
    objc_msgSend(v4, "setError:", v9);

    if (qword_1002A71E0 != -1)
      swift_once(&qword_1002A71E0, sub_1000BC0A8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10006F07C(v10, (uint64_t)qword_1002A71E8);
    v12 = static os_log_type_t.error.getter(v11);
    swift_errorRetain(a2);
    v13 = swift_errorRetain(a2);
    log = Logger.logObject.getter(v13);
    if (os_log_type_enabled(log, v12))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      swift_errorRetain(a2);
      v16 = _swift_stdlib_bridgeErrorToNSError(a2);
      v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      *v15 = v16;
      sub_10006F094(a2, 1);
      sub_10006F094(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v12, "KTDeleteOptInOperation:perRecordSaveBlock: fail: %@", v14, 0xCu);
      v17 = sub_10006F03C(&qword_10029F6B0);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      sub_10006F094(a2, 1);
    }
    else
    {
      sub_10006F094(a2, 1);
      sub_10006F094(a2, 1);
      swift_errorRelease(a2);

    }
  }
  else
  {
    v6 = *(void (**)(void *))((swift_isaMask & *v4) + 0x78);
    v7 = a1;
    v6(a1);
  }
}

void sub_1000BCF68(uint64_t a1, char a2)
{
  sub_1000BCF7C(a1, a2, "KTDeleteOptInOperation:modifyRecordsResultBlock: fail: %@", "KTDeleteOptInOperation:modifyRecordsResultBlock: success");
}

void sub_1000BCF7C(uint64_t a1, char a2, const char *a3, const char *a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(void **)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  if ((a2 & 1) == 0)
  {
    if (qword_1002A71E0 != -1)
      swift_once(&qword_1002A71E0, sub_1000BC0A8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10006F07C(v8, (uint64_t)qword_1002A71E8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    goto LABEL_11;
  }
  swift_errorRetain(a1);
  v15 = (void *)_convertErrorToNSError(_:)(a1);
  objc_msgSend(v5, "setError:", v15);

  if (qword_1002A71E0 != -1)
    swift_once(&qword_1002A71E0, sub_1000BC0A8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10006F07C(v16, (uint64_t)qword_1002A71E8);
  v18 = static os_log_type_t.error.getter(v17);
  swift_errorRetain(a1);
  v19 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v19);
  v20 = v18;
  if (!os_log_type_enabled(v10, v18))
  {
    sub_10006F094(a1, 1);
    sub_10006F094(a1, 1);
    swift_errorRelease(a1);
LABEL_11:

    goto LABEL_12;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v27 = v6;
  v22 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v21 = 138412290;
  swift_errorRetain(a1);
  v23 = _swift_stdlib_bridgeErrorToNSError(a1);
  v28 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
  *v22 = v23;
  sub_10006F094(a1, 1);
  sub_10006F094(a1, 1);
  _os_log_impl((void *)&_mh_execute_header, v10, v20, a3, v21, 0xCu);
  v24 = sub_10006F03C(&qword_10029F6B0);
  swift_arrayDestroy(v22, 1, v24);
  v25 = v22;
  v6 = v27;
  swift_slowDealloc(v25, -1, -1);
  swift_slowDealloc(v21, -1, -1);

  sub_10006F094(a1, 1);
LABEL_12:
  v26 = objc_msgSend(v5, "operationQueue", v27);
  objc_msgSend(v26, "addOperation:", v6);

}

void KTDeleteOptInOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTDeleteOptInOperation", 36, "init()", 6, 0);
  __break(1u);
}

id KTDeleteOptInOperation.__deallocating_deinit()
{
  return sub_1000A2B94(type metadata accessor for KTDeleteOptInOperation);
}

BOOL sub_1000BD358(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1000BD364()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000BD3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000BD3FC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000BD440()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT));
}

uint64_t sub_1000BD450()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState, v3, 0, 0);
  return *v1;
}

uint64_t sub_1000BD494(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_1000BD4DC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000BD520()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1000BD52C(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1000BD540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  return sub_10009C678(v1 + *(int *)(v3 + 20), a1, (uint64_t *)&unk_10029EE40);
}

uint64_t sub_1000BD57C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0) + 20);
  return sub_100097268(a1, v3);
}

uint64_t (*sub_1000BD5AC())()
{
  type metadata accessor for KTOptIOValidator.OptInResult(0);
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000BD5D4()
{
  return 0;
}

uint64_t sub_1000BD5E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000BD61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0) + 24));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000BD660())()
{
  type metadata accessor for KTOptIOValidator.OptInResult(0);
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000BD688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v2 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)(a1 + *(int *)(v2 + 24));
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_1000BD6FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_1000BD738@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  *(_QWORD *)a6 = a1;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  v10 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  result = sub_100075A9C(a3, a6 + *(int *)(v10 + 20));
  v12 = (_QWORD *)(a6 + *(int *)(v10 + 24));
  *v12 = a4;
  v12[1] = a5;
  return result;
}

id KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;
  char v9[24];

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  *v6 = 2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess(v6, v9, 1, 0);
  *v6 = 2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, "init");
}

id KTOptIOValidator.init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;
  char v6[24];

  v3 = &v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  *v3 = 2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess(v3, v6, 1, 0);
  *v3 = 2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return objc_msgSendSuper2(&v5, "init");
}

Swift::Void __swiftcall KTOptIOValidator.setIntendedState(state:)(Swift::Bool state)
{
  _QWORD *v1;

  (*(void (**)(Swift::Bool))((swift_isaMask & *v1) + 0x88))(state);
}

void sub_1000BDA14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;

  v3 = v2;
  v6 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  __chkstk_darwin(v6);
  v40 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)type metadata accessor for Date(0);
  v9 = *(v8 - 1);
  __chkstk_darwin(v8);
  v42 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = _swiftEmptyArrayStorage;
  v41 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    if (v14)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease(v41);
    v28 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v14)
    goto LABEL_19;
LABEL_3:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  v37 = v3;
  v38 = v6;
  v39 = a2;
  v15 = 0;
  v16 = v41;
  v43 = v41 & 0xC000000000000001;
  do
  {
    if (v43)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v16);
    else
      v17 = *(id *)(v16 + 8 * v15 + 32);
    v18 = v17;
    v19 = objc_msgSend(v17, "smtTimestamp");
    if (!v19)
    {
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v9 + 56))(v13, 1, 1, v8);
LABEL_6:
      sub_1000A5638((uint64_t)v13);

      goto LABEL_7;
    }
    v20 = v19;
    v21 = v14;
    v22 = v42;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v23 = v22;
    v14 = v21;
    (*(void (**)(char *, char *, _QWORD *))(v9 + 32))(v13, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v9 + 56))(v13, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v9 + 48))(v13, 1, v8) == 1)
      goto LABEL_6;
    v24 = sub_1000A5638((uint64_t)v13);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
    v25 = v44[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
    v26 = v25;
    v16 = v41;
    v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v18);
    specialized ContiguousArray._endMutation()(v27);
LABEL_7:
    ++v15;
  }
  while (v14 != v15);
  swift_bridgeObjectRelease(v16);
  v28 = (unint64_t)v44;
  v6 = v38;
  a2 = v39;
  v3 = v37;
LABEL_20:
  swift_bridgeObjectRetain(v28);
  v30 = (uint64_t)v40;
  if ((v28 & 0x8000000000000000) != 0)
    goto LABEL_34;
  v31 = (_QWORD *)v28;
  if ((v28 & 0x4000000000000000) != 0)
    goto LABEL_34;
  while (1)
  {
    v44 = v31;
    sub_1000C02D8((uint64_t *)&v44);
    if (v3)
      break;
    swift_release(v28);
    v28 = (unint64_t)v44;
    *(_QWORD *)v30 = 0;
    *(_BYTE *)(v30 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v9 + 56))(v30 + *(int *)(v6 + 20), 1, 1, v8);
    v32 = (_QWORD *)(v30 + *(int *)(v6 + 24));
    *v32 = 0;
    v32[1] = 0;
    if ((v28 & 0x8000000000000000) != 0 || (v28 & 0x4000000000000000) != 0)
    {
      v35 = swift_retain(v28);
      v3 = _CocoaArrayWrapper.endIndex.getter(v35);
      if (!v3)
      {
LABEL_32:
        swift_release(v28);
        sub_1000C2838(v30, a2);
        swift_release(v28);
        return;
      }
    }
    else
    {
      v3 = *(_QWORD *)(v28 + 16);
      swift_retain(v28);
      if (!v3)
        goto LABEL_32;
    }
    v6 = v28 & 0xC000000000000001;
    v9 = 4;
    while (1)
    {
      v33 = v6
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v28)
          : *(id *)(v28 + 8 * v9);
      v8 = v33;
      v34 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v44 = v33;
      sub_1000BDE20(v30, (id *)&v44);

      ++v9;
      if (v34 == v3)
        goto LABEL_32;
    }
    __break(1u);
LABEL_34:
    v31 = sub_10008EEC4(v28);
    swift_release(v28);
  }
LABEL_38:
  swift_release(v44);
  __break(1u);
}

id sub_1000BDE20(uint64_t a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id result;
  id v20;
  id v21;
  char v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  id v29;
  char v30;
  id v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v3 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v48 - v7;
  v48 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v48 - 8);
  v10 = __chkstk_darwin(v48);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v48 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v48 - v16;
  v18 = *a2;
  result = objc_msgSend(*a2, "state");
  v20 = result;
  if (!result)
  {
    v29 = *(id *)v49;
    v30 = *(_BYTE *)(v49 + 8);
    result = objc_msgSend(v18, "state");
    if ((v30 & 1) == 0 && v29 == result)
      goto LABEL_13;
    v31 = objc_msgSend(v18, "smtTimestamp");
    if (v31)
    {
      v32 = v31;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v33 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v34 = v48;
      v33(v6, v15, v48);
      v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56);
      v35(v6, 0, 1, v34);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v34) != 1)
      {
        v33(v12, v6, v34);
        v36 = v49 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0) + 20);
        sub_1000A5638(v36);
        v33((char *)v36, v12, v34);
        result = (id)((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v35)(v36, 0, 1, v34);
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v48);
    }
    sub_1000A5638((uint64_t)v6);
    v44 = type metadata accessor for KTError(0);
    v45 = sub_1000C287C();
    swift_allocError(v44, v45, 0, 0);
    v41 = v46;
    v42 = v44;
    v43 = 5;
    goto LABEL_19;
  }
  if (result != (id)1)
    return result;
  v21 = *(id *)v49;
  v22 = *(_BYTE *)(v49 + 8);
  result = objc_msgSend(v18, "state");
  if ((v22 & 1) != 0 || v21 != result)
  {
    v23 = objc_msgSend(v18, "smtTimestamp");
    if (v23)
    {
      v24 = v23;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v25 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v26 = v48;
      v25(v8, v15, v48);
      v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56);
      v27(v8, 0, 1, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v26) != 1)
      {
        v25(v17, v8, v26);
        v28 = v49 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0) + 20);
        sub_1000A5638(v28);
        v25((char *)v28, v17, v26);
        result = (id)((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v27)(v28, 0, 1, v26);
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v48);
    }
    sub_1000A5638((uint64_t)v8);
    v38 = type metadata accessor for KTError(0);
    v39 = sub_1000C287C();
    swift_allocError(v38, v39, 0, 0);
    v41 = v40;
    v42 = v38;
    v43 = 9;
LABEL_19:
    v47 = swift_storeEnumTagMultiPayload(v41, v42, v43);
    return (id)swift_willThrow(v47);
  }
LABEL_13:
  v37 = v49;
  *(_QWORD *)v49 = v20;
  *(_BYTE *)(v37 + 8) = 0;
  return result;
}

void *sub_1000BE200(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v6 = 4;
    while (1)
    {
      v7 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4)
         : *(id *)(v4 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v10 = objc_msgSend(v7, "uri");
      if (v10)
      {
        v11 = v10;
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          v17 = v4;
          v4 = a3;
          swift_bridgeObjectRelease(v17);
LABEL_17:
          swift_bridgeObjectRelease(v4);
          return v8;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
        swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
          goto LABEL_17;
      }

      ++v6;
      if (v9 == v5)
        goto LABEL_23;
    }
    __break(1u);
LABEL_19:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
  }
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return 0;
}

void KTOptIOValidator.evaluateLogData()()
{
  _QWORD *v0;
  int64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(__n128);
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  int v76;
  int v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  id v85;
  void *v86;
  int *v87;
  uint64_t v88;
  int *v89;
  char *v90;
  char *v91;
  unsigned int v92;
  id v93;
  char *v94;
  void (*v95)(char *, int *);
  char *v96;
  int *v97;
  unsigned int v98;
  void *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, uint64_t, uint64_t, int *);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  _QWORD *v118;
  char v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  Class isa;
  id v132;
  unint64_t v133;
  id v134;
  unint64_t v135;
  Class v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, char *, int *);
  void (*v146)(char *, char *, int *);
  void (*v147)(char *, int *);
  unsigned int (*v148)(uint64_t, uint64_t, int *);
  void (*v149)(char *, uint64_t, uint64_t, int *);
  int v150;
  id v151;
  int *v152;
  int64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  id v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  _QWORD *v168;
  unint64_t v169;
  int *v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  int64_t v174;
  uint64_t v175;
  uint64_t (*v176)(__n128);
  _QWORD *v177;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Date(0);
  v171 = *(_QWORD *)(v4 - 8);
  v172 = (int *)v4;
  v5 = __chkstk_darwin(v4);
  v158 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v160 = (char *)&v142 - v8;
  v9 = __chkstk_darwin(v7);
  v166 = (char *)&v142 - v10;
  v11 = __chkstk_darwin(v9);
  v164 = (char *)&v142 - v12;
  v13 = __chkstk_darwin(v11);
  v165 = (char *)&v142 - v14;
  v15 = __chkstk_darwin(v13);
  v163 = (char *)&v142 - v16;
  __chkstk_darwin(v15);
  v18 = (unint64_t)&v142 - v17;
  v19 = (int *)type metadata accessor for KTOptIOValidator.OptInResult(0);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (uint64_t)&v142 - v23;
  v25 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v26 = __chkstk_darwin(v25);
  v170 = (int *)((char *)&v142 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __chkstk_darwin(v26);
  v156 = (char *)&v142 - v29;
  v30 = __chkstk_darwin(v28);
  v157 = (char *)&v142 - v31;
  v32 = __chkstk_darwin(v30);
  v161 = (char *)&v142 - v33;
  v34 = __chkstk_darwin(v32);
  v159 = (char *)&v142 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (int **)((char *)&v142 - v37);
  v39 = __chkstk_darwin(v36);
  v167 = (char *)&v142 - v40;
  v176 = *(uint64_t (**)(__n128))((swift_isaMask & *v0) + 0x68);
  v41 = ((uint64_t (*)(uint64_t))v176)(v39);
  if ((unint64_t)v41 >> 62)
  {
LABEL_114:
    if (v41 < 0)
      v141 = v41;
    else
      v141 = v41 & 0xFFFFFFFFFFFFFF8;
    v42 = _CocoaArrayWrapper.endIndex.getter(v141);
  }
  else
  {
    v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v43 = swift_bridgeObjectRelease(v41);
  if (v42)
  {
    v44 = ((uint64_t (*)(uint64_t))v176)(v43);
    (*(void (**)(void))((swift_isaMask & *v3) + 0xA8))();
    swift_bridgeObjectRelease(v44);
    if (v2)
      return;
    sub_1000C2838(v22, v24);
    if ((*(_BYTE *)(v24 + 8) & 1) != 0)
    {
      v45 = type metadata accessor for KTError(0);
      v46 = sub_1000C287C();
      swift_allocError(v45, v46, 0, 0);
      v48 = v47;
      v49 = v45;
      v50 = 7;
LABEL_15:
      v62 = swift_storeEnumTagMultiPayload(v48, v49, v50);
      swift_willThrow(v62);
      sub_1000C27FC(v24);
      return;
    }
    v169 = *(_QWORD *)v24;
    if (v169 > 1)
    {
      v59 = type metadata accessor for KTError(0);
      v60 = sub_1000C287C();
      swift_allocError(v59, v60, 0, 0);
      v48 = v61;
      v49 = v59;
      v50 = 6;
      goto LABEL_15;
    }
    sub_10009C678(v24 + v19[5], (uint64_t)v38, (uint64_t *)&unk_10029EE40);
    v55 = v171;
    v19 = v172;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v171 + 48))(v38, 1, v172) == 1)
    {
      sub_1000A5638((uint64_t)v38);
      v56 = type metadata accessor for KTError(0);
      v57 = sub_1000C287C();
      swift_allocError(v56, v57, 0, 0);
      v48 = v58;
      v49 = v56;
      v50 = 8;
      goto LABEL_15;
    }
    (*(void (**)(unint64_t, _QWORD *, int *))(v55 + 32))(v18, v38, v19);
    v41 = (uint64_t)v167;
    (*(void (**)(char *, unint64_t, int *))(v55 + 16))(v167, v18, v19);
    v149 = *(void (**)(char *, uint64_t, uint64_t, int *))(v55 + 56);
    v149((char *)v41, 0, 1, v19);
    if (v169 == 1
      && !*(_QWORD *)(*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT) + 16))
    {
      v137 = type metadata accessor for KTError(0);
      v138 = sub_1000C287C();
      swift_allocError(v137, v138, 0, 0);
      v140 = swift_storeEnumTagMultiPayload(v139, v137, 11);
      swift_willThrow(v140);
      (*(void (**)(unint64_t, int *))(v55 + 8))(v18, v19);
      sub_1000C27FC(v24);
LABEL_105:
      sub_1000A5638((uint64_t)v167);
      return;
    }
    v153 = 0;
    (*(void (**)(unint64_t, int *))(v55 + 8))(v18, v19);
    sub_1000C27FC(v24);
  }
  else
  {
    v153 = v2;
    v149 = *(void (**)(char *, uint64_t, uint64_t, int *))(v171 + 56);
    v149(v167, 1, 1, v172);
    v169 = 0;
  }
  v168 = _swiftEmptyArrayStorage;
  v154 = sub_1000BF5D0((uint64_t)_swiftEmptyArrayStorage);
  v51 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT);
  v52 = *(_QWORD *)(v51 + 64);
  v173 = v51 + 64;
  v53 = 1 << *(_BYTE *)(v51 + 32);
  v54 = -1;
  if (v53 < 64)
    v54 = ~(-1 << v53);
  v22 = v54 & v52;
  v174 = (unint64_t)(v53 + 63) >> 6;
  v175 = v51;
  swift_bridgeObjectRetain(v51);
  v150 = 0;
  v2 = 0;
  while (1)
  {
    while (1)
    {
LABEL_24:
      v64 = v176;
      if (v22)
      {
        v65 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v66 = v65 | (v2 << 6);
        goto LABEL_37;
      }
      v67 = __OFADD__(v2++, 1);
      if (v67)
      {
        __break(1u);
        goto LABEL_113;
      }
      if (v2 >= v174)
      {
        swift_release(v175);
        v24 = v171;
        v18 = (unint64_t)v172;
        v19 = v170;
        goto LABEL_103;
      }
      v18 = (unint64_t)v172;
      v68 = *(_QWORD *)(v173 + 8 * v2);
      v19 = v170;
      v24 = v171;
      v22 = (uint64_t)&swift_isaMask;
      if (!v68)
      {
        v69 = v2 + 1;
        if (v2 + 1 >= v174)
          goto LABEL_102;
        v68 = *(_QWORD *)(v173 + 8 * v69);
        if (v68)
          goto LABEL_35;
        v69 = v2 + 2;
        if (v2 + 2 >= v174)
          goto LABEL_102;
        v68 = *(_QWORD *)(v173 + 8 * v69);
        if (v68)
          goto LABEL_35;
        v69 = v2 + 3;
        if (v2 + 3 < v174)
        {
          v68 = *(_QWORD *)(v173 + 8 * v69);
          if (v68)
          {
LABEL_35:
            v2 = v69;
            goto LABEL_36;
          }
          while (1)
          {
            v2 = v69 + 1;
            if (__OFADD__(v69, 1))
              break;
            if (v2 >= v174)
              goto LABEL_102;
            v68 = *(_QWORD *)(v173 + 8 * v2);
            ++v69;
            if (v68)
              goto LABEL_36;
          }
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
LABEL_102:
        swift_release(v175);
LABEL_103:
        if (v168[2])
        {
          v126 = v168;
          swift_bridgeObjectRelease(v154);
          v127 = type metadata accessor for KTError(0);
          v128 = sub_1000C287C();
          swift_allocError(v127, v128, 0, 0);
          *v129 = v126;
          v130 = swift_storeEnumTagMultiPayload(v129, v127, 2);
          swift_willThrow(v130);
          goto LABEL_105;
        }
        swift_bridgeObjectRelease(v168);
        sub_10009C678((uint64_t)v167, (uint64_t)v19, (uint64_t *)&unk_10029EE40);
        if ((*(unsigned int (**)(int *, uint64_t, unint64_t))(v24 + 48))(v19, 1, v18) == 1)
        {
          isa = 0;
        }
        else
        {
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(int *, unint64_t))(v24 + 8))(v19, v18);
        }
        v132 = objc_allocWithZone((Class)KTOptIOValidatorResult);
        v133 = v169;
        v134 = objc_msgSend(v132, "initWithState:timestamp:", v169, isa);

        (*(void (**)(unint64_t, id))((swift_isaMask & *v3) + 0xC8))(v133, v134);
        v135 = v154;
        v136 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v135);
        objc_msgSend(v134, "setUriNeedsOptInChange:", v136);

        objc_msgSend(v134, "setUsedIntendedState:", v150 & 1);
        sub_1000A5638((uint64_t)v167);
        return;
      }
LABEL_36:
      v22 = (v68 - 1) & v68;
      v66 = __clz(__rbit64(v68)) + (v2 << 6);
LABEL_37:
      v70 = *(_QWORD *)(v175 + 48) + 16 * v66;
      v38 = *(_QWORD **)v70;
      v71 = *(_QWORD *)(v70 + 8);
      v24 = *(_QWORD *)(*(_QWORD *)(v175 + 56) + 8 * v66);
      swift_bridgeObjectRetain(v71);
      v72 = swift_bridgeObjectRetain(v24);
      v41 = (uint64_t)v3;
      v73 = v64(v72);
      v19 = (int *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))((swift_isaMask & *v3) + 0xB0))(v73, v38, v71);
      swift_bridgeObjectRelease(v73);
      if ((unint64_t)v24 >> 62)
        break;
      v18 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v18)
        goto LABEL_39;
LABEL_23:
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v71);

    }
    if (v24 < 0)
      v63 = v24;
    else
      v63 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v18 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v24);
    if (!v18)
      goto LABEL_23;
LABEL_39:
    v74 = v18 - 1;
    if (__OFSUB__(v18, 1))
      break;
    v155 = v24 & 0xC000000000000001;
    if ((v24 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(v24);
      v125 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 1, v24);
      swift_bridgeObjectRelease(v24);
      v75 = (id)v125;
    }
    else
    {
      if ((v74 & 0x8000000000000000) != 0)
        goto LABEL_119;
      if (v74 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_120;
      v75 = *(id *)(v24 + 8 * v74 + 32);
    }
    v76 = v169 == 1;
    v162 = v75;
    if (v76 == objc_msgSend(v75, "optIn"))
    {
LABEL_60:
      if (v19)
      {
        v142 = v19;
        v85 = objc_msgSend(v142, "smtTimestamp");
        if (v85)
        {
          v86 = v85;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v85);

          v87 = v172;
          v145 = *(void (**)(uint64_t, char *, int *))(v171 + 32);
          v145((uint64_t)v159, v165, v172);
          v149(v159, 0, 1, v87);
          v148 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v171 + 48);
          if (v148((uint64_t)v159, 1, v87) != 1)
          {
            v145((uint64_t)v163, v159, v87);
            v144 = v24 & 0xFFFFFFFFFFFFFF8;
            v143 = v24 + 32;
            v88 = (uint64_t)v161;
            while (1)
            {
              v67 = __OFSUB__(v18--, 1);
              if (v67)
                goto LABEL_121;
              if (v155)
              {
                v89 = (int *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v24);
              }
              else
              {
                if ((v18 & 0x8000000000000000) != 0)
                  goto LABEL_122;
                if (v18 >= *(_QWORD *)(v144 + 16))
                  goto LABEL_123;
                v89 = (int *)*(id *)(v143 + 8 * v18);
              }
              v19 = v89;
              sub_10009C678((uint64_t)v167, v88, (uint64_t *)&unk_10029EE40);
              if (v148(v88, 1, v172) == 1)
              {
                sub_1000A5638(v88);
              }
              else
              {
                v145((uint64_t)v164, (char *)v88, v172);
                v151 = objc_msgSend(v19, "smtTimestamp");
                v90 = v165;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v151);

                LODWORD(v151) = static Date.> infix(_:_:)(v164, v90);
                v91 = v90;
                v41 = *(_QWORD *)(v171 + 8);
                ((void (*)(char *, int *))v41)(v91, v172);
                ((void (*)(char *, int *))v41)(v164, v172);
                if ((v151 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v24);

                  v24 = (uint64_t)v142;
                  swift_bridgeObjectRelease(v71);
                  goto LABEL_87;
                }
              }
              LODWORD(v151) = v169 == 1;
              v92 = objc_msgSend(v19, "optIn");
              v146 = *(void (**)(char *, char *, int *))(v171 + 16);
              v146(v166, v163, v172);
              v152 = v19;
              if ((_DWORD)v151 == v92)
              {
                v147 = *(void (**)(char *, int *))(v171 + 8);
                v147(v166, v172);
              }
              else
              {
                v93 = objc_msgSend(v19, "smtTimestamp");
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v93);

                v94 = v160;
                Date.addingTimeInterval(_:)(1.0);
                LODWORD(v151) = static Date.> infix(_:_:)(v165, v94);
                v95 = *(void (**)(char *, int *))(v171 + 8);
                v96 = v94;
                v97 = v172;
                v95(v96, v172);
                v95(v165, v97);
                v147 = v95;
                v95(v166, v97);
                if ((v151 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v24);
                  v99 = (void *)type metadata accessor for KTError(0);
                  v151 = v99;
                  v100 = sub_1000C287C();
                  v155 = swift_allocError(v99, v100, 0, 0);
                  v102 = v101;
                  v103 = sub_10006F03C(&qword_1002A0920);
                  v104 = (char *)v102 + *(int *)(v103 + 48);
                  v105 = (char *)v102 + *(int *)(v103 + 64);
                  *v102 = v38;
                  v102[1] = v71;
                  v38 = objc_msgSend(v152, "smtTimestamp");
                  v106 = v158;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

                  v107 = v106;
                  v19 = v172;
                  v145((uint64_t)v104, v107, v172);
                  v108 = v104;
                  v109 = v149;
                  v149(v108, 0, 1, v19);
                  v146(v105, v163, v19);
                  v109(v105, 0, 1, v19);
                  swift_storeEnumTagMultiPayload(v102, v151, 1);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v168);
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v168 = sub_1000C26DC(0, v168[2] + 1, 1, v168);
                  v111 = v168;
                  v113 = v168[2];
                  v112 = v168[3];
                  v18 = (unint64_t)v152;
                  if (v113 >= v112 >> 1)
                    v111 = sub_1000C26DC((_QWORD *)(v112 > 1), v113 + 1, 1, v168);
                  v111[2] = v113 + 1;
                  v168 = v111;
                  v111[v113 + 4] = v155;

                  v24 = (uint64_t)v142;
LABEL_86:
                  v41 = (uint64_t)v147;
LABEL_87:
                  ((void (*)(char *, int *))v41)(v163, v172);
                  goto LABEL_24;
                }
              }
              LODWORD(v151) = v169 == 1;
              v19 = v152;
              v98 = objc_msgSend(v152, "optIn");

              if ((_DWORD)v151 == v98)
              {
                v88 = (uint64_t)v161;
                if (v18)
                  continue;
              }
              swift_bridgeObjectRelease(v24);
              v24 = (uint64_t)v142;

              swift_bridgeObjectRelease(v71);
              goto LABEL_86;
            }
          }
        }
        else
        {
          v149(v159, 1, 1, v172);
        }
        swift_bridgeObjectRelease(v24);

        sub_1000A5638((uint64_t)v159);
      }
      else
      {
        swift_bridgeObjectRelease(v24);
      }
      v114 = objc_msgSend(v162, "smtTimestamp");
      v115 = (uint64_t)v157;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v114);

      v116 = v172;
      v149((char *)v115, 0, 1, v172);
      v117 = v171;
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v171 + 48))(v115, 1, v116) == 1)
      {
        sub_1000A5638(v115);
        v118 = (_QWORD *)v154;
        swift_bridgeObjectRetain(v154);
        v24 = sub_100072E70((uint64_t)v38, v71);
        v120 = v119;
        swift_bridgeObjectRelease(v118);
        if ((v120 & 1) != 0)
        {
          v121 = swift_isUniquelyReferenced_nonNull_native(v118);
          v177 = v118;
          v18 = (unint64_t)v156;
          v38 = v118;
          if (!v121)
          {
            sub_1000C2480();
            v38 = v177;
          }
          swift_bridgeObjectRelease(*(_QWORD *)(v38[6] + 16 * v24 + 8));
          v41 = (uint64_t)v172;
          (*(void (**)(unint64_t, uint64_t, int *))(v171 + 32))(v18, v38[7] + *(_QWORD *)(v171 + 72) * v24, v172);
          v154 = (unint64_t)v38;
          sub_1000C20B8(v24, (uint64_t)v38);
          swift_bridgeObjectRelease(0x8000000000000000);
          v122 = 0;
        }
        else
        {
          v122 = 1;
          v41 = (uint64_t)v172;
          v18 = (unint64_t)v156;
        }
        v149((char *)v18, v122, 1, (int *)v41);
        swift_bridgeObjectRelease(v71);
        sub_1000A5638(v18);

      }
      else
      {
        v123 = v115;
        v18 = (unint64_t)v165;
        (*(void (**)(char *, uint64_t, int *))(v117 + 32))(v165, v123, v116);
        v24 = v154;
        v124 = swift_isUniquelyReferenced_nonNull_native(v154);
        v177 = (_QWORD *)v24;
        v41 = (uint64_t)&v177;
        sub_1000C22B4(v18, (uint64_t)v38, v71, v124);
        v154 = (unint64_t)v177;

        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(0x8000000000000000);

      }
    }
    else
    {
      v77 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x80))();
      if (v77 != 2)
      {
        v78 = v77;
        if (((v77 ^ objc_msgSend(v162, "optIn")) & 1) == 0)
        {
          v169 = v78 & 1;
          v150 = 1;
          goto LABEL_60;
        }
      }
      swift_bridgeObjectRelease(v24);
      v79 = type metadata accessor for KTError(0);
      v80 = sub_1000C287C();
      v24 = swift_allocError(v79, v80, 0, 0);
      *v81 = v38;
      v81[1] = v71;
      if (v169 == 1)
        v82 = 3;
      else
        v82 = 4;
      swift_storeEnumTagMultiPayload(v81, v79, v82);
      if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) != 0)
        v83 = v168;
      else
        v83 = sub_1000C26DC(0, v168[2] + 1, 1, v168);
      v18 = v83[2];
      v84 = v83[3];
      v41 = v18 + 1;
      if (v18 >= v84 >> 1)
        v83 = sub_1000C26DC((_QWORD *)(v84 > 1), v18 + 1, 1, v83);
      v83[2] = v41;
      v168 = v83;
      v83[v18 + 4] = v24;

    }
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
}

unint64_t sub_1000BF5D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10006F03C(&qword_1002A0B68);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10006F03C(&qword_1002A0B58);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10009C678(v13, (uint64_t)v5, &qword_1002A0B68);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100072E70(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Date(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *KTOptIOValidator.evaluateCloudData()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, _QWORD *);
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Class isa;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v1 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v2 = __chkstk_darwin(v1);
  v36 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - v4;
  v6 = (_QWORD *)type metadata accessor for Date(0);
  v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x68))(v11);
  v15 = v0;
  v16 = v37;
  (*(void (**)(void))((swift_isaMask & *v0) + 0xA8))();
  swift_bridgeObjectRelease(v14);
  if (!v16)
  {
    v17 = (uint64_t)v5;
    v18 = v36;
    v19 = (uint64_t)v13;
    if ((v13[8] & 1) != 0)
    {
      v20 = type metadata accessor for KTError(0);
      v21 = sub_1000C287C();
      swift_allocError(v20, v21, 0, 0);
      v23 = swift_storeEnumTagMultiPayload(v22, v20, 7);
LABEL_6:
      swift_willThrow(v23);
      sub_1000C27FC(v19);
      return v6;
    }
    v35 = 0;
    v24 = *(_QWORD *)v13;
    v25 = *(int *)(v10 + 20);
    v37 = v19;
    v26 = v17;
    sub_10009C678(v19 + v25, v17, (uint64_t *)&unk_10029EE40);
    v27 = v7;
    v28 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v7 + 48);
    v29 = v6;
    if (v28(v26, 1, v6) == 1)
    {
      sub_1000A5638(v26);
      v30 = type metadata accessor for KTError(0);
      v31 = sub_1000C287C();
      swift_allocError(v30, v31, 0, 0);
      v23 = swift_storeEnumTagMultiPayload(v32, v30, 8);
      v19 = v37;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t, _QWORD *))(v27 + 32))(v9, v26, v6);
    (*(void (**)(char *, char *, _QWORD *))(v27 + 16))(v18, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v27 + 56))(v18, 0, 1, v6);
    if (v28((uint64_t)v18, 1, v6) == 1)
    {
      isa = 0;
    }
    else
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, _QWORD *))(v27 + 8))(v18, v6);
    }
    v6 = objc_msgSend(objc_allocWithZone((Class)KTOptIOValidatorResult), "initWithState:timestamp:", v24, isa);

    (*(void (**)(uint64_t, _QWORD *))((swift_isaMask & *v15) + 0xC8))(v24, v6);
    (*(void (**)(char *, _QWORD *))(v27 + 8))(v9, v29);
    sub_1000C27FC(v37);
  }
  return v6;
}

id sub_1000BFAD4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  void *v6;

  v5 = a1;
  v6 = (void *)a4();

  return v6;
}

void sub_1000BFB68(id a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  Class isa;

  v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x68))();
  v6 = v5;
  if (!((unint64_t)v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v6);
    v28 = a2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_18;
  }
  if (v5 >= 0)
    v5 &= 0xFFFFFFFFFFFFFF8uLL;
  v7 = _CocoaArrayWrapper.endIndex.getter(v5);
  if (!v7)
    goto LABEL_17;
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    else
      v11 = *(id *)(v6 + 8 * i + 32);
    v12 = v11;
    v13 = objc_msgSend(v11, "state");
    if (v13 == a1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v12);
      specialized ContiguousArray._endMutation()(v10);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v6);
  v28 = a2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_33;
LABEL_18:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v14 = _swiftEmptyArrayStorage[2];
    swift_retain(_swiftEmptyArrayStorage);
    if (!v14)
    {
LABEL_34:
      v16 = (char *)_swiftEmptyArrayStorage;
LABEL_35:
      swift_release_n(_swiftEmptyArrayStorage, 2);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v16);
      objc_msgSend(v28, "setUris:", isa);

      return;
    }
    goto LABEL_20;
  }
LABEL_33:
  v27 = swift_retain(_swiftEmptyArrayStorage);
  v14 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v14)
    goto LABEL_34;
LABEL_20:
  if (v14 >= 1)
  {
    v15 = 0;
    v16 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, _swiftEmptyArrayStorage);
      else
        v17 = (id)_swiftEmptyArrayStorage[v15 + 4];
      v18 = v17;
      v19 = objc_msgSend(v17, "uri");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = sub_10007BA1C(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
        v25 = *((_QWORD *)v16 + 2);
        v24 = *((_QWORD *)v16 + 3);
        if (v25 >= v24 >> 1)
          v16 = sub_10007BA1C((char *)(v24 > 1), v25 + 1, 1, v16);
        *((_QWORD *)v16 + 2) = v25 + 1;
        v26 = &v16[16 * v25];
        *((_QWORD *)v26 + 4) = v21;
        *((_QWORD *)v26 + 5) = v23;
      }
      else
      {

      }
      ++v15;
    }
    while (v14 != v15);
    goto LABEL_35;
  }
LABEL_37:
  __break(1u);
}

uint64_t KTOptIOValidator.urisNeedOptIn()()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;

  v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC0))();
  if (v1)
    return (uint64_t)v2;
  v4 = v3;
  if (objc_msgSend(v3, "state") == (id)1)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }
  result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))();
  v6 = result;
  if (!((unint64_t)result >> 62))
  {
    v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_6;
LABEL_20:
    swift_bridgeObjectRelease(v6);
    v27 = v4;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_36;
    goto LABEL_21;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v7 = result;
  if (!result)
    goto LABEL_20;
LABEL_6:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_41;
  }
  v8 = v4;
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    else
      v12 = *(id *)(v6 + 8 * i + 32);
    v13 = v12;
    if (objc_msgSend(v12, "state"))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(0);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v13);
      specialized ContiguousArray._endMutation()(v11);
    }
  }
  swift_bridgeObjectRelease(v6);
  v27 = v8;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_36;
LABEL_21:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v14 = _swiftEmptyArrayStorage[2];
    result = swift_retain(_swiftEmptyArrayStorage);
    if (!v14)
    {
LABEL_37:
      v2 = (char *)_swiftEmptyArrayStorage;
LABEL_38:

      swift_release_n(_swiftEmptyArrayStorage, 2);
      return (uint64_t)v2;
    }
    goto LABEL_23;
  }
LABEL_36:
  v26 = swift_retain(_swiftEmptyArrayStorage);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  v14 = result;
  if (!result)
    goto LABEL_37;
LABEL_23:
  if (v14 >= 1)
  {
    v15 = 0;
    v2 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, _swiftEmptyArrayStorage);
      else
        v16 = (id)_swiftEmptyArrayStorage[v15 + 4];
      v17 = v16;
      v18 = objc_msgSend(v16, "uri", v27);
      if (v18)
      {
        v19 = v18;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
          v2 = sub_10007BA1C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
        v24 = *((_QWORD *)v2 + 2);
        v23 = *((_QWORD *)v2 + 3);
        if (v24 >= v23 >> 1)
          v2 = sub_10007BA1C((char *)(v23 > 1), v24 + 1, 1, v2);
        *((_QWORD *)v2 + 2) = v24 + 1;
        v25 = &v2[16 * v24];
        *((_QWORD *)v25 + 4) = v20;
        *((_QWORD *)v25 + 5) = v22;
      }
      else
      {

      }
      ++v15;
    }
    while (v14 != v15);
    goto LABEL_38;
  }
LABEL_41:
  __break(1u);
  return result;
}

void KTOptIOValidator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTOptIOValidator", 30, "init()", 6, 0);
  __break(1u);
}

id KTOptIOValidator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for KTOptIOValidator.OptInResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A7200;
  if (!qword_1002A7200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTOptIOValidator.OptInResult);
  return result;
}

uint64_t type metadata accessor for KTOptIOValidator()
{
  return objc_opt_self(_TtC13transparencyd16KTOptIOValidator);
}

uint64_t sub_1000C02D8(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100091FF4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000C0350(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000C0350(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  unint64_t v44;
  Swift::Int v45;
  void *v46;
  char *v47;
  char *v48;
  id v49;
  void *v50;
  char *v51;
  _QWORD *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  void *v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  id *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  char *v77;
  _QWORD *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  char *v84;
  _QWORD *v85;
  void (*v86)(uint64_t, char *, uint64_t);
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  char *v94;
  int v95;
  void (*v96)(char *, uint64_t);
  Swift::Int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  void *v104;
  char *v105;
  void (*v106)(char *, uint64_t);
  void *v107;
  uint64_t (*v108)(char *, uint64_t, uint64_t, uint64_t);
  id v109;
  id v110;
  void *v111;
  char *v112;
  _QWORD *v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v117;
  id v118;
  char *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  id v124;
  _QWORD *v125;
  char *v126;
  void (*v127)(uint64_t, char *, uint64_t);
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  char *v130;
  char v131;
  void (*v132)(char *, uint64_t);
  void *v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  char v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  Swift::Int v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  Swift::Int v211;
  void (*v212)(char *, uint64_t);
  char *v213;
  void **v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t (*v222)(char *, uint64_t, uint64_t, uint64_t);
  char *v223;
  _QWORD *v224;
  uint64_t v225;

  v2 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v3 = __chkstk_darwin(v2);
  v218 = (char *)&v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v196 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v196 - v9;
  v11 = __chkstk_darwin(v8);
  v209 = (char *)&v196 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v196 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v196 - v16;
  v18 = type metadata accessor for Date(0);
  v224 = *(_QWORD **)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v217 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v223 = (char *)&v196 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v196 - v24;
  v26 = __chkstk_darwin(v23);
  v213 = (char *)&v196 - v27;
  v28 = __chkstk_darwin(v26);
  v204 = (char *)&v196 - v29;
  v30 = __chkstk_darwin(v28);
  v221 = (char *)&v196 - v31;
  __chkstk_darwin(v30);
  v205 = (char *)&v196 - v32;
  v33 = a1[1];
  v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0)
      goto LABEL_167;
    if (v33)
      sub_1000C1228(0, v33, 1, a1);
    return;
  }
  if (v33 >= 0)
    v35 = v33;
  else
    v35 = v33 + 1;
  if (v33 < -1)
    goto LABEL_166;
  v208 = v25;
  v202 = v17;
  v203 = v15;
  v211 = v33;
  v201 = v34;
  v197 = a1;
  if (v33 <= 1)
  {
    v40 = (char *)_swiftEmptyArrayStorage;
    v225 = (uint64_t)_swiftEmptyArrayStorage;
    v214 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    v39 = v10;
    if (v33 != 1)
    {
      v44 = _swiftEmptyArrayStorage[2];
LABEL_133:
      v188 = v215;
      if (v44 >= 2)
      {
        v189 = *v197;
        do
        {
          v190 = v44 - 2;
          if (v44 < 2)
            goto LABEL_161;
          if (!v189)
            goto LABEL_174;
          v191 = *(_QWORD *)&v40[16 * v190 + 32];
          v192 = *(_QWORD *)&v40[16 * v44 + 24];
          sub_1000C15AC((void **)(v189 + 8 * v191), (void **)(v189 + 8 * *(_QWORD *)&v40[16 * v44 + 16]), (void **)(v189 + 8 * v192), v214);
          if (v188)
            break;
          if (v192 < v191)
            goto LABEL_162;
          if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
            v40 = sub_100090C30((uint64_t)v40);
          if (v190 >= *((_QWORD *)v40 + 2))
            goto LABEL_163;
          v193 = &v40[16 * v190 + 32];
          *(_QWORD *)v193 = v191;
          *((_QWORD *)v193 + 1) = v192;
          v194 = *((_QWORD *)v40 + 2);
          if (v44 > v194)
            goto LABEL_164;
          memmove(&v40[16 * v44 + 16], &v40[16 * v44 + 32], 16 * (v194 - v44));
          *((_QWORD *)v40 + 2) = v194 - 1;
          v44 = v194 - 1;
        }
        while (v194 > 2);
      }
LABEL_144:
      v195 = swift_bridgeObjectRelease(v40);
      *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v195);
      swift_bridgeObjectRelease(v225);
      return;
    }
  }
  else
  {
    v36 = v35 >> 1;
    v37 = sub_1000C3058();
    v38 = static Array._allocateBufferUninitialized(minimumCapacity:)(v36, v37);
    *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) = v36;
    v214 = (void **)((v38 & 0xFFFFFFFFFFFFFF8) + 32);
    v225 = v38;
    v39 = v10;
  }
  v41 = *a1;
  v42 = 0;
  v199 = *a1 + 16;
  v198 = v41 - 8;
  v40 = (char *)_swiftEmptyArrayStorage;
  v216 = v7;
  v207 = (uint64_t)v39;
  v43 = v211;
  v220 = v41;
  while (2)
  {
    v45 = v42 + 1;
    v210 = v42;
    if (v42 + 1 >= v43)
    {
      v57 = (char *)v211;
      v56 = (uint64_t)v218;
      goto LABEL_54;
    }
    v46 = *(void **)(v41 + 8 * v42);
    v47 = (char *)*(id *)(v41 + 8 * v45);
    v48 = v46;
    v49 = objc_msgSend(v47, "smtTimestamp");
    v206 = v47;
    if (!v49)
    {
      v54 = (uint64_t)v202;
      v222 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v224[7];
      v55 = v222(v202, 1, 1, v18);
      v56 = (uint64_t)v218;
      goto LABEL_21;
    }
    v50 = v49;
    v219 = v48;
    v51 = v221;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v52 = v224;
    v53 = (void (*)(char *, char *, uint64_t))v224[4];
    v54 = (uint64_t)v202;
    v53(v202, v51, v18);
    v222 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v52[7];
    v222((char *)v54, 0, 1, v18);
    v55 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v52[6])(v54, 1, v18);
    if ((_DWORD)v55 == 1)
    {
      v56 = (uint64_t)v218;
      v48 = v219;
LABEL_21:
      static Date.distantPast.getter(v55);
      sub_1000A5638(v54);
      goto LABEL_23;
    }
    v53(v205, (char *)v54, v18);
    v56 = (uint64_t)v218;
    v48 = v219;
LABEL_23:
    v58 = objc_msgSend(v48, "smtTimestamp");
    if (!v58)
    {
      v63 = (uint64_t)v203;
      v65 = v222(v203, 1, 1, v18);
      goto LABEL_27;
    }
    v59 = v58;
    v60 = v221;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v61 = v48;
    v62 = v224;
    v63 = (uint64_t)v203;
    v219 = (char *)v224[4];
    ((void (*)(char *, char *, uint64_t))v219)(v203, v60, v18);
    v222((char *)v63, 0, 1, v18);
    v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62[6];
    v48 = v61;
    v65 = v64(v63, 1, v18);
    if ((_DWORD)v65 == 1)
    {
LABEL_27:
      v66 = v204;
      static Date.distantPast.getter(v65);
      sub_1000A5638(v63);
      goto LABEL_28;
    }
    v66 = v204;
    ((void (*)(char *, uint64_t, uint64_t))v219)(v204, v63, v18);
LABEL_28:
    v67 = v205;
    LODWORD(v219) = static Date.< infix(_:_:)(v205, v66);
    v68 = (void (*)(char *, uint64_t))v224[1];
    v68(v66, v18);
    v212 = v68;
    v68(v67, v18);

    if (v42 + 2 >= v211)
    {
      v45 = v42 + 2;
      v57 = (char *)v211;
      goto LABEL_46;
    }
    v69 = v42;
    v70 = v42 + 2;
    v200 = v40;
    v71 = (id *)(v199 + 8 * v69);
    while (1)
    {
      v72 = *(v71 - 1);
      v73 = *v71;
      v74 = v72;
      v75 = objc_msgSend(v73, "smtTimestamp");
      if (v75)
      {
        v76 = v75;
        v77 = v221;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        v78 = v224;
        v79 = (void (*)(char *, char *, uint64_t))v224[4];
        v80 = (uint64_t)v209;
        v79(v209, v77, v18);
        v222((char *)v80, 0, 1, v18);
        v81 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v78[6])(v80, 1, v18);
        if ((_DWORD)v81 != 1)
        {
          v79(v213, (char *)v80, v18);
          goto LABEL_35;
        }
      }
      else
      {
        v80 = (uint64_t)v209;
        v81 = v222(v209, 1, 1, v18);
      }
      static Date.distantPast.getter(v81);
      sub_1000A5638(v80);
LABEL_35:
      v82 = objc_msgSend(v74, "smtTimestamp");
      if (v82)
      {
        v83 = v82;
        v84 = v221;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

        v85 = v224;
        v86 = (void (*)(uint64_t, char *, uint64_t))v224[4];
        v87 = v207;
        v86(v207, v84, v18);
        v222((char *)v87, 0, 1, v18);
        v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v85[6];
        v89 = v87;
        v90 = v88(v87, 1, v18);
        if ((_DWORD)v90 != 1)
        {
          v91 = v208;
          v86((uint64_t)v208, (char *)v89, v18);
          goto LABEL_40;
        }
      }
      else
      {
        v89 = v207;
        v90 = v222((char *)v207, 1, 1, v18);
      }
      v91 = v208;
      static Date.distantPast.getter(v90);
      sub_1000A5638(v89);
LABEL_40:
      v92 = v213;
      v93 = static Date.< infix(_:_:)(v213, v91);
      v94 = v91;
      v95 = v93;
      v96 = v212;
      v212(v94, v18);
      v96(v92, v18);

      if (((v219 ^ v95) & 1) != 0)
        break;
      ++v71;
      if (v211 == ++v70)
      {
        v57 = (char *)v211;
        v45 = v211;
        v40 = v200;
        v56 = (uint64_t)v218;
        goto LABEL_45;
      }
    }
    v40 = v200;
    v57 = (char *)v211;
    v56 = (uint64_t)v218;
    v45 = v70;
LABEL_45:
    v42 = v210;
LABEL_46:
    v41 = v220;
    if ((v219 & 1) != 0)
    {
      if (v45 < v42)
        goto LABEL_168;
      v97 = v45;
      if (v42 < v45)
      {
        v98 = (uint64_t *)(v198 + 8 * v45);
        v99 = v42;
        v100 = (uint64_t *)(v220 + 8 * v42);
        do
        {
          if (v99 != --v97)
          {
            if (!v41)
              goto LABEL_173;
            v101 = *v100;
            *v100 = *v98;
            *v98 = v101;
          }
          ++v99;
          --v98;
          ++v100;
        }
        while (v99 < v97);
      }
    }
LABEL_54:
    if (v45 >= (uint64_t)v57)
      goto LABEL_81;
    if (__OFSUB__(v45, v42))
      goto LABEL_165;
    if (v45 - v42 >= v201)
    {
LABEL_81:
      if (v45 < v42)
        goto LABEL_160;
      goto LABEL_82;
    }
    if (__OFADD__(v42, v201))
      goto LABEL_169;
    if (v42 + v201 >= (uint64_t)v57)
      v102 = v57;
    else
      v102 = (char *)(v42 + v201);
    if ((uint64_t)v102 >= v42)
    {
      if ((char *)v45 == v102)
        goto LABEL_81;
      v200 = v40;
      v103 = (void (*)(char *, uint64_t))(v198 + 8 * v45);
      v206 = v102;
      while (2)
      {
        v219 = (char *)v45;
        v104 = *(void **)(v41 + 8 * v45);
        v105 = (char *)v42;
        v212 = v103;
        v106 = (char *)v103;
        while (2)
        {
          v107 = *(void **)v106;
          v108 = v104;
          v109 = v107;
          v222 = v108;
          v110 = objc_msgSend(v108, "smtTimestamp");
          if (v110)
          {
            v111 = v110;
            v112 = v221;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

            v113 = v224;
            v114 = (void (*)(char *, char *, uint64_t))v224[4];
            v115 = (uint64_t)v216;
            v114(v216, v112, v18);
            v116 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v113[7];
            v116(v115, 0, 1, v18);
            v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v113[6])(v115, 1, v18);
            if ((_DWORD)v117 != 1)
            {
              v114(v223, (char *)v115, v18);
              goto LABEL_72;
            }
          }
          else
          {
            v116 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v224[7];
            v115 = (uint64_t)v216;
            v117 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v116)(v216, 1, 1, v18);
          }
          static Date.distantPast.getter(v117);
          sub_1000A5638(v115);
LABEL_72:
          v118 = objc_msgSend(v109, "smtTimestamp");
          v119 = v217;
          if (v118)
          {
            v120 = v118;
            v121 = v18;
            v122 = v221;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v118);

            v123 = v105;
            v124 = v109;
            v125 = v224;
            v126 = v122;
            v18 = v121;
            v127 = (void (*)(uint64_t, char *, uint64_t))v224[4];
            v127(v56, v126, v18);
            v116(v56, 0, 1, v18);
            v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v125[6];
            v109 = v124;
            v105 = v123;
            v129 = v128(v56, 1, v18);
            if ((_DWORD)v129 != 1)
            {
              v127((uint64_t)v119, (char *)v56, v18);
              goto LABEL_77;
            }
          }
          else
          {
            v129 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v116)(v56, 1, 1, v18);
          }
          static Date.distantPast.getter(v129);
          sub_1000A5638(v56);
LABEL_77:
          v130 = v223;
          v131 = static Date.< infix(_:_:)(v223, v119);
          v132 = (void (*)(char *, uint64_t))v224[1];
          v132(v119, v18);
          v132(v130, v18);

          if ((v131 & 1) != 0)
          {
            v41 = v220;
            if (!v220)
              goto LABEL_171;
            v133 = *(void **)v106;
            v104 = (void *)*((_QWORD *)v106 + 1);
            *(_QWORD *)v106 = v104;
            *((_QWORD *)v106 + 1) = v133;
            v106 -= 8;
            ++v105;
            v56 = (uint64_t)v218;
            if (v219 == v105)
              goto LABEL_65;
            continue;
          }
          break;
        }
        v56 = (uint64_t)v218;
        v41 = v220;
LABEL_65:
        v45 = (Swift::Int)(v219 + 1);
        v103 = (void (*)(char *, uint64_t))((char *)v212 + 8);
        v42 = v210;
        if (v219 + 1 != v206)
          continue;
        break;
      }
      v45 = (Swift::Int)v206;
      v40 = v200;
      if ((uint64_t)v206 < v210)
        goto LABEL_160;
LABEL_82:
      v219 = (char *)v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        v40 = sub_100090A90(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
      v135 = *((_QWORD *)v40 + 2);
      v134 = *((_QWORD *)v40 + 3);
      v44 = v135 + 1;
      v41 = v220;
      if (v135 >= v134 >> 1)
      {
        v187 = sub_100090A90((char *)(v134 > 1), v135 + 1, 1, v40);
        v41 = v220;
        v40 = v187;
      }
      *((_QWORD *)v40 + 2) = v44;
      v136 = v40 + 32;
      v137 = &v40[16 * v135 + 32];
      v138 = v219;
      *(_QWORD *)v137 = v42;
      *((_QWORD *)v137 + 1) = v138;
      if (v135)
      {
        while (2)
        {
          v139 = v44 - 1;
          if (v44 >= 4)
          {
            v144 = &v136[16 * v44];
            v145 = *((_QWORD *)v144 - 8);
            v146 = *((_QWORD *)v144 - 7);
            v150 = __OFSUB__(v146, v145);
            v147 = v146 - v145;
            if (v150)
              goto LABEL_149;
            v149 = *((_QWORD *)v144 - 6);
            v148 = *((_QWORD *)v144 - 5);
            v150 = __OFSUB__(v148, v149);
            v142 = v148 - v149;
            v143 = v150;
            if (v150)
              goto LABEL_150;
            v151 = v44 - 2;
            v152 = &v136[16 * v44 - 32];
            v154 = *(_QWORD *)v152;
            v153 = *((_QWORD *)v152 + 1);
            v150 = __OFSUB__(v153, v154);
            v155 = v153 - v154;
            if (v150)
              goto LABEL_151;
            v150 = __OFADD__(v142, v155);
            v156 = v142 + v155;
            if (v150)
              goto LABEL_153;
            if (v156 >= v147)
            {
              v174 = &v136[16 * v139];
              v176 = *(_QWORD *)v174;
              v175 = *((_QWORD *)v174 + 1);
              v150 = __OFSUB__(v175, v176);
              v177 = v175 - v176;
              if (v150)
                goto LABEL_159;
              v167 = v142 < v177;
            }
            else
            {
LABEL_100:
              if ((v143 & 1) != 0)
                goto LABEL_152;
              v151 = v44 - 2;
              v157 = &v136[16 * v44 - 32];
              v159 = *(_QWORD *)v157;
              v158 = *((_QWORD *)v157 + 1);
              v160 = __OFSUB__(v158, v159);
              v161 = v158 - v159;
              v162 = v160;
              if (v160)
                goto LABEL_154;
              v163 = &v136[16 * v139];
              v165 = *(_QWORD *)v163;
              v164 = *((_QWORD *)v163 + 1);
              v150 = __OFSUB__(v164, v165);
              v166 = v164 - v165;
              if (v150)
                goto LABEL_156;
              if (__OFADD__(v161, v166))
                goto LABEL_158;
              if (v161 + v166 < v142)
                goto LABEL_112;
              v167 = v142 < v166;
            }
            if (v167)
              v139 = v151;
          }
          else
          {
            if (v44 == 3)
            {
              v141 = *((_QWORD *)v40 + 4);
              v140 = *((_QWORD *)v40 + 5);
              v150 = __OFSUB__(v140, v141);
              v142 = v140 - v141;
              v143 = v150;
              goto LABEL_100;
            }
            v168 = *((_QWORD *)v40 + 4);
            v169 = *((_QWORD *)v40 + 5);
            v150 = __OFSUB__(v169, v168);
            v161 = v169 - v168;
            v162 = v150;
LABEL_112:
            if ((v162 & 1) != 0)
              goto LABEL_155;
            v170 = &v136[16 * v139];
            v172 = *(_QWORD *)v170;
            v171 = *((_QWORD *)v170 + 1);
            v150 = __OFSUB__(v171, v172);
            v173 = v171 - v172;
            if (v150)
              goto LABEL_157;
            if (v173 < v161)
              goto LABEL_14;
          }
          v178 = v139 - 1;
          if (v139 - 1 >= v44)
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
            goto LABEL_170;
          }
          if (!v41)
            goto LABEL_172;
          v179 = v40;
          v180 = &v136[16 * v178];
          v181 = *(_QWORD *)v180;
          v182 = v136;
          v183 = &v136[16 * v139];
          v184 = *((_QWORD *)v183 + 1);
          v185 = v215;
          sub_1000C15AC((void **)(v41 + 8 * *(_QWORD *)v180), (void **)(v41 + 8 * *(_QWORD *)v183), (void **)(v41 + 8 * v184), v214);
          v215 = v185;
          if (v185)
          {
            v40 = v179;
            goto LABEL_144;
          }
          if (v184 < v181)
            goto LABEL_146;
          if (v139 > *((_QWORD *)v179 + 2))
            goto LABEL_147;
          *(_QWORD *)v180 = v181;
          *(_QWORD *)&v182[16 * v178 + 8] = v184;
          v186 = *((_QWORD *)v179 + 2);
          if (v139 >= v186)
            goto LABEL_148;
          v40 = v179;
          v44 = v186 - 1;
          memmove(v183, v183 + 16, 16 * (v186 - 1 - v139));
          v136 = v182;
          *((_QWORD *)v179 + 2) = v186 - 1;
          v41 = v220;
          if (v186 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v44 = 1;
LABEL_14:
      v43 = v211;
      v42 = (uint64_t)v219;
      if ((uint64_t)v219 >= v211)
        goto LABEL_133;
      continue;
    }
    break;
  }
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
}

void sub_1000C1228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  char *v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  char *v57;
  _QWORD *v58;

  v48 = a1;
  v7 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v8 = __chkstk_darwin(v7);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for Date(0);
  v58 = *(_QWORD **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v55 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  v57 = (char *)&v46 - v18;
  v47 = a2;
  if (a3 != a2)
  {
    v53 = *a4;
    v19 = v53 + 8 * a3 - 8;
    v50 = v11;
    v51 = v15;
LABEL_5:
    v20 = *(void **)(v53 + 8 * a3);
    v21 = v48;
    v49 = v19;
    v54 = a3;
    while (1)
    {
      v22 = *(void **)v19;
      v23 = v20;
      v24 = v22;
      v56 = v23;
      v25 = objc_msgSend(v23, "smtTimestamp");
      if (v25)
      {
        v26 = v25;
        v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        v28 = v58;
        v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0, 1, v12);
        v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }
      else
      {
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        v31 = v30(v11, 1, 1, v12);
      }
      static Date.distantPast.getter(v31);
      sub_1000A5638((uint64_t)v11);
LABEL_11:
      v32 = v24;
      v33 = objc_msgSend(v24, "smtTimestamp");
      if (v33)
      {
        v34 = v33;
        v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = v58;
        v37 = (void (*)(char *, char *, uint64_t))v58[4];
        v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0, 1, v12);
        v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1, v12);
        if ((_DWORD)v39 != 1)
        {
          v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }
      else
      {
        v38 = (uint64_t)v52;
        v39 = v30(v52, 1, 1, v12);
      }
      v40 = v51;
      static Date.distantPast.getter(v39);
      sub_1000A5638(v38);
LABEL_16:
      v41 = v57;
      v42 = static Date.< infix(_:_:)(v57, v40);
      v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      v44 = v54;
      v11 = v50;
      if ((v42 & 1) == 0)
        goto LABEL_4;
      if (!v53)
      {
        __break(1u);
        return;
      }
      v45 = *(void **)v19;
      v20 = *(void **)(v19 + 8);
      *(_QWORD *)v19 = v20;
      *(_QWORD *)(v19 + 8) = v45;
      v19 -= 8;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        v19 = v49 + 8;
        if (a3 == v47)
          return;
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_1000C15AC(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  id *v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  void *v39;
  char *v40;
  _QWORD *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  id v46;
  void *v47;
  _QWORD *v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  void **v56;
  void **v57;
  BOOL v58;
  void **v59;
  char *v60;
  char *v61;
  void **v62;
  void **v63;
  void *v64;
  char *v65;
  id v66;
  void *v67;
  char *v68;
  _QWORD *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  id v75;
  void *v76;
  char *v77;
  _QWORD *v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  void (*v85)(char *, uint64_t);
  uint64_t v87;
  void **v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  void **v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  void **v98;
  _QWORD *v99;

  v8 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v9 = __chkstk_darwin(v8);
  v95 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v89 = (char *)&v87 - v12;
  v13 = __chkstk_darwin(v11);
  v92 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v91 = (char *)&v87 - v15;
  v16 = type metadata accessor for Date(0);
  v99 = *(_QWORD **)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v90 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v94 = (char *)&v87 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v87 - v22;
  v24 = __chkstk_darwin(v21);
  v96 = (char *)&v87 - v25;
  __chkstk_darwin(v24);
  v97 = (char *)&v87 - v26;
  v27 = (char *)a2 - (char *)a1;
  v28 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v28 = (char *)a2 - (char *)a1;
  v29 = v28 >> 3;
  v93 = a3;
  v30 = (char *)a3 - (char *)a2;
  v31 = v30 / 8;
  if (v28 >> 3 < v30 / 8)
  {
    v32 = a1;
    if (a4 != a1 || &a1[v29] <= a4)
      memmove(a4, a1, 8 * v29);
    v33 = &a4[v29];
    if (v27 >= 8)
    {
      v34 = a2;
      if (a2 < v93)
      {
        v94 = v23;
        while (1)
        {
          v98 = v32;
          v35 = *a4;
          v36 = (char *)*v34;
          v37 = v35;
          v95 = v36;
          v38 = objc_msgSend(v36, "smtTimestamp");
          if (!v38)
            break;
          v39 = v38;
          v40 = v96;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

          v41 = v99;
          v42 = (void (*)(char *, char *, uint64_t))v99[4];
          v43 = v91;
          v42(v91, v40, v16);
          v44 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v41[7];
          v44(v43, 0, 1, v16);
          v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41[6])(v43, 1, v16);
          if ((_DWORD)v45 == 1)
          {
            v23 = v94;
LABEL_14:
            static Date.distantPast.getter(v45);
            sub_1000A5638((uint64_t)v43);
            goto LABEL_16;
          }
          v42(v97, v43, v16);
          v23 = v94;
LABEL_16:
          v46 = objc_msgSend(v37, "smtTimestamp");
          if (v46)
          {
            v47 = v46;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

            v48 = v99;
            v49 = (void (*)(void))v99[4];
            v50 = (uint64_t)v92;
            v49();
            v44((char *)v50, 0, 1, v16);
            v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48[6];
            v23 = v94;
            v52 = v51(v50, 1, v16);
            if ((_DWORD)v52 != 1)
            {
              ((void (*)(char *, uint64_t, uint64_t))v49)(v23, v50, v16);
              goto LABEL_21;
            }
          }
          else
          {
            v50 = (uint64_t)v92;
            v52 = v44(v92, 1, 1, v16);
          }
          static Date.distantPast.getter(v52);
          sub_1000A5638(v50);
LABEL_21:
          v53 = v97;
          v54 = static Date.< infix(_:_:)(v97, v23);
          v55 = (void (*)(char *, uint64_t))v99[1];
          v55(v23, v16);
          v55(v53, v16);

          if ((v54 & 1) == 0)
          {
            v56 = a4;
            v57 = v98;
            v58 = v98 == a4++;
            if (v58)
              goto LABEL_27;
LABEL_26:
            *v57 = *v56;
            goto LABEL_27;
          }
          v56 = v34;
          v57 = v98;
          v58 = v98 == v34++;
          if (!v58)
            goto LABEL_26;
LABEL_27:
          v32 = v57 + 1;
          if (a4 >= v33 || v34 >= v93)
            goto LABEL_29;
        }
        v44 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v99[7];
        v43 = v91;
        v45 = v44(v91, 1, 1, v16);
        goto LABEL_14;
      }
    }
LABEL_29:
    v59 = v32;
    goto LABEL_59;
  }
  v98 = a1;
  if (a4 != a2 || &a2[v31] <= a4)
    memmove(a4, a2, 8 * v31);
  v33 = &a4[v31];
  v60 = v90;
  if (v30 < 8)
  {
    v59 = a2;
    goto LABEL_59;
  }
  v59 = a2;
  if (v98 < a2)
  {
    v61 = (char *)(v93 - 1);
    v88 = a4;
    while (1)
    {
      v92 = (char *)v33;
      v93 = v59;
      v62 = v33 - 1;
      v63 = v59 - 1;
      v64 = *(v59 - 1);
      v65 = *(v33 - 1);
      v97 = v64;
      v91 = v65;
      v66 = objc_msgSend(v65, "smtTimestamp");
      if (!v66)
        break;
      v67 = v66;
      v68 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

      v69 = v99;
      v70 = (void (*)(char *, char *, uint64_t))v99[4];
      v71 = (uint64_t)v89;
      v70(v89, v68, v16);
      v72 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v69[7];
      v72((char *)v71, 0, 1, v16);
      v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v69[6])(v71, 1, v16);
      v74 = v95;
      if ((_DWORD)v73 == 1)
      {
        v60 = v90;
LABEL_40:
        static Date.distantPast.getter(v73);
        sub_1000A5638(v71);
        goto LABEL_42;
      }
      v70(v94, (char *)v71, v16);
      v60 = v90;
LABEL_42:
      v75 = objc_msgSend(v97, "smtTimestamp");
      if (v75)
      {
        v76 = v75;
        v77 = v96;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        v78 = v99;
        v79 = (void (*)(char *, char *, uint64_t))v99[4];
        v80 = v77;
        v60 = v90;
        v74 = v95;
        v79(v95, v80, v16);
        v72(v74, 0, 1, v16);
        v81 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78[6])(v74, 1, v16);
        if ((_DWORD)v81 != 1)
        {
          v79(v60, v74, v16);
          goto LABEL_47;
        }
      }
      else
      {
        v81 = v72(v74, 1, 1, v16);
      }
      static Date.distantPast.getter(v81);
      sub_1000A5638((uint64_t)v74);
LABEL_47:
      v82 = v61 + 8;
      v83 = v94;
      v84 = static Date.< infix(_:_:)(v94, v60);
      v85 = (void (*)(char *, uint64_t))v99[1];
      v85(v60, v16);
      v85(v83, v16);

      if ((v84 & 1) != 0)
      {
        v33 = (void **)v92;
        a4 = v88;
        if (v82 == (char *)v93)
        {
          v59 = v63;
          if (v61 < (char *)v93)
            goto LABEL_57;
        }
        else
        {
          v59 = v63;
        }
      }
      else
      {
        a4 = v88;
        v63 = v62;
        if (v82 == v92)
        {
          v33 = v62;
          v59 = v93;
          if (v61 < v92)
            goto LABEL_57;
        }
        else
        {
          v33 = v62;
          v59 = v93;
        }
      }
      *(_QWORD *)v61 = *v63;
LABEL_57:
      if (v33 > a4)
      {
        v61 -= 8;
        if (v59 > v98)
          continue;
      }
      goto LABEL_59;
    }
    v72 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v99[7];
    v71 = (uint64_t)v89;
    v73 = v72(v89, 1, 1, v16);
    v74 = v95;
    goto LABEL_40;
  }
LABEL_59:
  if (v59 != a4
    || v59 >= (void **)((char *)a4
                      + (((char *)v33 - (char *)a4 + ((char *)v33 - (char *)a4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(v59, a4, 8 * (v33 - a4));
  }
  return 1;
}

Swift::Int sub_1000C1D50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10006F03C(&qword_1002A0B58);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47);
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

unint64_t sub_1000C20B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v29);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000C22B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100072E70(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Date(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000C2480();
      goto LABEL_7;
    }
    sub_1000C1D50(v15, a4 & 1);
    v21 = sub_100072E70(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000C23F0(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000C23F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void sub_1000C2480()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006F03C(&qword_1002A0B58);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

_QWORD *sub_1000C26DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10006F03C(&qword_1002A0B60);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10006F03C(&qword_10029EE58);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000C27FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C2838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KTOptIOValidator.OptInResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C287C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029FCB0;
  if (!qword_10029FCB0)
  {
    v1 = type metadata accessor for KTError(255);
    result = swift_getWitnessTable(&unk_10021578C, v1);
    atomic_store(result, (unint64_t *)&qword_10029FCB0);
  }
  return result;
}

_QWORD *sub_1000C28C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 20);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10006F03C((uint64_t *)&unk_10029EE40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(a3 + 24);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return v4;
}

uint64_t sub_1000C29DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1000C2A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1000C2B44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000C2C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000C2D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_10006F03C((uint64_t *)&unk_10029EE40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000C2EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C2EB8);
}

uint64_t sub_1000C2EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000C2F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2F58);
}

uint64_t sub_1000C2F58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10006F03C((uint64_t *)&unk_10029EE40);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

void sub_1000C2FDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  sub_1000815E4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100215968;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

unint64_t sub_1000C3058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029FFC0;
  if (!qword_10029FFC0)
  {
    v1 = objc_opt_self(KTOptInState);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10029FFC0);
  }
  return result;
}

unint64_t sub_1000C3094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10029FCE0;
  if (!qword_10029FCE0)
  {
    v1 = sub_10006FD6C(&qword_10029F838);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10029FCE0);
  }
  return result;
}

uint64_t sub_1000C30E0()
{
  uint64_t v0;
  int v2;

  v2 = -1;
  v0 = ccrng(&v2);
  sub_1000D2AAC(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  sub_1000D2AAC(v2 == 0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t sub_1000C314C(uint64_t a1, unsigned int a2)
{
  unsigned int (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  _BOOL8 v6;

  v4 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))sub_1000D6908();
  v5 = sub_1000D6908();
  v6 = v4(v5, a2, a1) == 0;
  return sub_1000D2AAC(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t sub_1000C31A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, _QWORD *a7, unint64_t *a8)
{
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD __s[4];

  v42 = a1;
  v43 = a3;
  memset(__s, 0, sizeof(__s));
  v14 = (_QWORD *)ccaes_cbc_encrypt_mode();
  __chkstk_darwin(v14);
  v44 = (uint64_t)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - v17;
  bzero((char *)&v37 - v17, v17);
  v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6) || (a6 - 40) < 0xFFFFFFE0)
    goto LABEL_30;
  v40 = &v37;
  v41 = a8;
  v39 = a7;
  if (!a4)
  {
    v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }
    v38 = a6 + 8;
    cccbc_init(v14, v44, a2, v42);
    goto LABEL_15;
  }
  if (a8)
  {
    v20 = *v41;
    v38 = a6 + 8;
    if (v20 >= a6 + 8)
    {
LABEL_15:
      v22 = 0;
      v23 = a6 >> 3;
      if (a6 >> 3 <= 1)
        v24 = 1;
      else
        v24 = v23;
      do
      {
        v25 = *a5++;
        *((_QWORD *)&__s[v22++] + 1) = v25;
      }
      while (v24 != v22);
      v26 = 0;
      *(_QWORD *)&__s[0] = v43;
      v27 = 1;
      v42 = v23;
      do
      {
        v43 = v26;
        v28 = 0;
        v29 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1, &unk_1002A7F10, v29, v29, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_1000D348C((uint64_t)v14, v44, (uint64_t)v18, 0x10uLL);
          }
          v30 = *v29;
          v29 += 2;
          v31 = v30 ^ bswap64(v27 + v28++);
          *(_QWORD *)&__s[v28 % v23] = v31;
        }
        while (v24 != v28);
        v26 = v43 + 1;
        v27 += v42;
      }
      while (v43 != 5);
      v32 = v39;
      *v39 = *(_QWORD *)&__s[0];
      v33 = v32 + 1;
      v34 = (uint64_t *)__s + 1;
      do
      {
        v35 = *v34;
        v34 += 2;
        *v33++ = v35;
        --v24;
      }
      while (v24);
      v19 = 0;
      *v41 = v38 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4)
        return v19;
LABEL_31:
      cc_clear(*v14, v44);
      return v19;
    }
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000C34AC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  unint64_t v11;

  v11 = *a8;
  v9 = sub_1000C31A0(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000D2AAC(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_1000C3514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unint64_t a6, _QWORD *a7, _QWORD *a8)
{
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t *v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD __s[4];

  v46 = a5;
  v44 = a1;
  memset(__s, 0, sizeof(__s));
  v14 = (_QWORD *)ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6))
    goto LABEL_33;
  v40 = a3;
  v20 = a6 >> 3;
  if ((a6 >> 3) - 6 < 0xFFFFFFFC)
    goto LABEL_33;
  v41 = &v38;
  v42 = a8;
  v39 = a7;
  v45 = a6;
  if (!a4)
  {
    v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }
    cccbc_init(v14, v47, a2, v44);
    goto LABEL_15;
  }
  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(_QWORD *)&__s[0] = *v46;
    v22 = v20 - 1;
    if (v20 != 1)
    {
      v23 = (_QWORD *)__s + 1;
      v24 = v46 + 1;
      v25 = v20 - 1;
      do
      {
        v26 = *v24++;
        *v23 = v26;
        v23 += 2;
        --v25;
      }
      while (v25);
    }
    v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    v28 = 5;
    v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        v29 = v43;
        v30 = v22;
        v31 = v27;
        do
        {
          *v29 = *(_QWORD *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0, &unk_1002A7F10, v29, v29, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_1000D348C((uint64_t)v14, v47, (uint64_t)v18, 0x10uLL);
          }
          --v31;
          v29 -= 2;
          v32 = __OFSUB__(v30--, 1);
        }
        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }
      v28 = (_DWORD)v46 - 1;
      v27 += v44;
    }
    while ((_DWORD)v46);
    if (*(_QWORD *)&__s[0] == v40)
    {
      v33 = v39;
      if ((_DWORD)v22)
      {
        v34 = (uint64_t *)__s + 1;
        v35 = v22;
        do
        {
          v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }
        while (v35);
      }
      v19 = 0;
      *v42 = (8 * v22);
    }
    else
    {
      v19 = 0xFFFFFFFFLL;
    }
LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4)
      return v19;
LABEL_34:
    cc_clear(*v14, v47);
    return v19;
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000C3870(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *a8;
  v9 = sub_1000C3514(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000D2AAC(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_1000C38D8(unsigned int a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;

  v2 = a1 + 15;
  v3 = v2 << 31 >> 31;
  v4 = v3 != v2 || v3 < 0;
  v5 = v4;
  if (!v4)
    *a2 = v3 & 0xFFFFFFF8;
  return v5 ^ 1u;
}

uint64_t sub_1000C3904(unint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  v2 = a1 >= 0xFFFFFFFFFFFFFFF1;
  v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  v4 = v3;
  if (!v3)
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  return v4 ^ 1u;
}

BOOL sub_1000C3934(unsigned int a1, unsigned int *a2)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL sub_1000C3948(unint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t sub_1000C395C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  size_t v19;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v22[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v18 = __s;
  *((_QWORD *)&v18 + 1) = v22;
  v19 = 4096;
  v12 = 3758097090;
  if (a4 && a5)
  {
    v13 = sub_1000C3BBC();
    if (!v13)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_vek", ":", 179, "", 0, "", "");
      v12 = 3758097084;
      goto LABEL_16;
    }
    v14 = v13;
    if (!ccder_blob_encode_body_tl(&v18, 4, 16, a4)
      || !sub_1000D51B4(&v18, a3)
      || !sub_1000D51B4(&v18, a2)
      || !sub_1000D52CC(&v18, a1)
      || !ccder_blob_encode_tl(&v18, 0x2000000000000010, (char *)v22 - *((_QWORD *)&v18 + 1)))
    {
      goto LABEL_14;
    }
    input[0] = *((_QWORD *)&v18 + 1);
    input[1] = (uint64_t)v22 - *((_QWORD *)&v18 + 1);
    v15 = IOConnectCallMethod(v14, 0x4Au, input, 2u, 0, 0, 0, 0, __s, &v19);
    if ((_DWORD)v15)
    {
      v12 = v15;
      goto LABEL_16;
    }
    *(_QWORD *)&v17 = __s;
    *((_QWORD *)&v17 + 1) = &__s[v19];
    if (!ccder_blob_decode_range(&v17, 0x2000000000000010, &v17)
      || !sub_1000D5220(&v17, 0, a5))
    {
      goto LABEL_14;
    }
    if (!a6)
    {
      v12 = 0;
      goto LABEL_16;
    }
    v12 = 0;
    if ((sub_1000D5018(&v17, 0, a6) & 1) == 0)
LABEL_14:
      v12 = 3758097098;
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}

uint64_t sub_1000C3BBC()
{
  uint64_t result;

  if (qword_1002A7320 != -1)
    dispatch_once(&qword_1002A7320, &stru_1002449E0);
  dispatch_sync((dispatch_queue_t)qword_1002A7328, &stru_100244960);
  result = dword_1002A7310;
  if (!dword_1002A7310)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_1002A7310;
  }
  return result;
}

unint64_t sub_1000C3C44(char *a1, const void *a2, size_t a3)
{
  unint64_t v3;
  int v6;
  int v7;
  ssize_t v8;
  int *v10;
  char *v11;
  int *v12;
  char *v13;

  v3 = (unint64_t)a1;
  if (a1)
  {
    v6 = open_dprotected_np(a1, 1793, 4, 0, 384);
    if (v6 == -1)
    {
      v10 = __error();
      v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0;
    }
    else
    {
      v7 = v6;
      v8 = write(v6, a2, a3);
      v3 = v8 != -1;
      if (v8 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }
      close(v7);
    }
  }
  return v3;
}

const char *sub_1000C3D14(char *a1, _QWORD *a2, off_t *a3)
{
  const char *v3;
  off_t st_size;
  int v7;
  int v8;
  void *v9;
  void *v10;
  int *v12;
  char *v13;
  stat v14;

  v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      st_size = v14.st_size;
      v7 = open(v3, 0);
      if (v7 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }
      else
      {
        v8 = v7;
        v9 = calloc(st_size, 1uLL);
        v3 = (const char *)(v9 != 0);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }
        v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }
        close(v8);
        free(v10);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t sub_1000C3E1C(unsigned int a1, const void *a2)
{
  mach_port_t v3;
  uint64_t input;

  input = a1;
  v3 = sub_1000C3BBC();
  if (v3)
    return IOConnectCallMethod(v3, 0x6Cu, &input, 1u, a2, 0x10uLL, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_delete_xart_leak", ":", 268, "", 0, "", "");
  return 3758097084;
}

char *sub_1000C3F00(char *result, uint64_t a2, uint64_t a3)
{
  FTS *v5;
  FTSENT *v6;
  FTSENT *v7;
  int fts_info;
  char *v9[2];

  if (result)
  {
    v9[0] = result;
    v9[1] = 0;
    result = (char *)fts_open(v9, 84, 0);
    if (result)
    {
      v5 = (FTS *)result;
      v6 = fts_read((FTS *)result);
      if (v6)
      {
        v7 = v6;
        do
        {
          fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
                if (((*(uint64_t (**)(uint64_t, FTSENT *))(a2 + 16))(a2, v7) & 1) == 0)
                  fts_set(v5, v7, 4);
              }
            }
            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }
          v7 = fts_read(v5);
        }
        while (v7);
      }
      return (char *)fts_close(v5);
    }
  }
  return result;
}

char *sub_1000C3FFC(char *result, int a2)
{
  const char *v3;
  _QWORD v4[4];
  int v5;
  _QWORD v6[4];
  int v7;
  char v8[1024];

  if (result)
  {
    v3 = result;
    bzero(v8, 0x400uLL);
    result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 0x40000000;
      v6[2] = sub_1000C40D8;
      v6[3] = &unk_1002448A0;
      v7 = a2;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_1000C4188;
      v4[3] = &unk_1002448C0;
      v5 = a2;
      return sub_1000C3F00(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_1000C40D8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = sub_1000C4130(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || v4 == v5)
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), v4);
  return 1;
}

uint64_t sub_1000C4130(const char *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1)
    return 0xFFFFFFFFLL;
  v2 = v1;
  v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return v3;
}

uint64_t sub_1000C4188(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = sub_1000C4130(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5)
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  return result;
}

uint64_t sub_1000C41DC()
{
  io_registry_entry_t v0;
  io_object_t v1;
  CFTypeRef CFProperty;
  _BOOL4 v3;
  unsigned int v4;
  size_t __len;
  char __big[1024];

  v0 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    v1 = v0;
    CFProperty = IORegistryEntryCreateCFProperty(v0, CFSTR("e-apfs"), kCFAllocatorDefault, 0);
    v3 = CFProperty != 0;
    if (CFProperty)
      CFRelease(CFProperty);
    IOObjectRelease(v1);
  }
  else
  {
    v3 = 0;
  }
  __len = 1023;
  bzero(__big, 0x400uLL);
  if ((byte_1002A7318 & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "-apfs_shared_datavolume", __len))
      byte_1002A7319 = 1;
    byte_1002A7318 = 1;
  }
  v4 = byte_1002A7319;
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n", "aks", "", "", "", "aks_fs_supports_enhanced_apfs", ":", 437, "", 0, "", v3, byte_1002A7319, "");
  return v3 | v4;
}

uint64_t sub_1000C435C(const char *a1)
{
  char __str[1024];
  char v4[1024];

  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    sub_1000C442C(v4, (uint64_t)&off_100243480, 35);
    if ((sub_1000C41DC() & 1) == 0)
      sub_1000C442C(__str, (uint64_t)&off_100243B10, 72);
  }
  return 0;
}

void sub_1000C442C(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  stat v7;
  char __str[1024];

  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }
      else
      {
        sub_1000C4130(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }
      v6 += 48;
      --a3;
    }
    while (a3);
  }
}

uint64_t sub_1000C456C(const char *a1)
{
  char v3[1024];

  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3))
    sub_1000C442C(v3, (uint64_t)&off_100243B10, 72);
  return 0;
}

const char *sub_1000C45F0()
{
  puts("shared allow list:");
  sub_1000C4644("<var>", (uint64_t)&off_100243480, 35);
  puts("user allow list:");
  return sub_1000C4644("<user>", (uint64_t)&off_100243B10, 72);
}

const char *sub_1000C4644(const char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  const char **v5;
  const char **v6;
  char v7;

  if (a3)
  {
    v3 = a3;
    v4 = result;
    v5 = (const char **)(a2 + 16);
    v6 = (const char **)(a2 + 16);
    do
    {
      v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0)
        result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      v5 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1000C46AC(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  size_t v17;
  uint64_t input[3];
  _BYTE __s[4096];
  uint64_t v20;

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v16 = __s;
  *((_QWORD *)&v16 + 1) = &v20;
  v17 = 4096;
  v10 = 3758097090;
  if (a4 && a5)
  {
    v11 = sub_1000C3BBC();
    if (v11)
    {
      v12 = v11;
      if (!ccder_blob_encode_body_tl(&v16, 4, 16, a4)
        || !sub_1000D51B4(&v16, a3)
        || !sub_1000D52CC(&v16, a1)
        || !ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v20 - *((_QWORD *)&v16 + 1)))
      {
        goto LABEL_10;
      }
      input[0] = a2;
      input[1] = *((_QWORD *)&v16 + 1);
      input[2] = (uint64_t)&v20 - *((_QWORD *)&v16 + 1);
      v13 = IOConnectCallMethod(v12, 0x4Cu, input, 3u, 0, 0, 0, 0, __s, &v17);
      if ((_DWORD)v13)
      {
        v10 = v13;
        goto LABEL_12;
      }
      *(_QWORD *)&v15 = __s;
      *((_QWORD *)&v15 + 1) = &__s[v17];
      if (!ccder_blob_decode_range(&v15, 0x2000000000000010, &v15)
        || (v10 = 0, (sub_1000D5220(&v15, 0, a5) & 1) == 0))
      {
LABEL_10:
        v10 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_kek", ":", 508, "", 0, "", "");
      v10 = 3758097084;
    }
  }
LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_1000C48E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  size_t v17;
  uint64_t input[2];
  _BYTE __s[4096];
  uint64_t v20;

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v16 = __s;
  *((_QWORD *)&v16 + 1) = &v20;
  v17 = 4096;
  v10 = 3758097090;
  if (a3 && a4)
  {
    v11 = sub_1000C3BBC();
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_sibling_vek", ":", 543, "", 0, "", "");
      v10 = 3758097084;
      goto LABEL_15;
    }
    v12 = v11;
    if (!ccder_blob_encode_body_tl(&v16, 4, 16, a3)
      || !sub_1000D51B4(&v16, a2)
      || !sub_1000D52CC(&v16, a1)
      || !ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v20 - *((_QWORD *)&v16 + 1)))
    {
      goto LABEL_13;
    }
    input[0] = *((_QWORD *)&v16 + 1);
    input[1] = (uint64_t)&v20 - *((_QWORD *)&v16 + 1);
    v13 = IOConnectCallMethod(v12, 0x63u, input, 2u, 0, 0, 0, 0, __s, &v17);
    if ((_DWORD)v13)
    {
      v10 = v13;
      goto LABEL_15;
    }
    *(_QWORD *)&v15 = __s;
    *((_QWORD *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range(&v15, 0x2000000000000010, &v15)
      || !sub_1000D5220(&v15, 0, a4))
    {
      goto LABEL_13;
    }
    if (!a5)
    {
      v10 = 0;
      goto LABEL_15;
    }
    v10 = 0;
    if ((sub_1000D5018(&v15, 0, a5) & 1) == 0)
LABEL_13:
      v10 = 3758097098;
  }
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_1000C4B30(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  size_t v19;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v22[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v18 = __s;
  *((_QWORD *)&v18 + 1) = v22;
  v19 = 4096;
  v12 = 3758097090;
  if (a3 && a4 && a5 && a6)
  {
    v13 = sub_1000C3BBC();
    if (v13)
    {
      v14 = v13;
      if (!sub_1000D51B4(&v18, a5)
        || !ccder_blob_encode_body_tl(&v18, 4, 16, a4)
        || !sub_1000D51B4(&v18, a3)
        || !sub_1000D51B4(&v18, a2)
        || !sub_1000D52CC(&v18, a1)
        || !ccder_blob_encode_tl(&v18, 0x2000000000000010, (char *)v22 - *((_QWORD *)&v18 + 1)))
      {
        goto LABEL_14;
      }
      input[0] = *((_QWORD *)&v18 + 1);
      input[1] = (uint64_t)v22 - *((_QWORD *)&v18 + 1);
      v15 = IOConnectCallMethod(v14, 0x4Du, input, 2u, 0, 0, 0, 0, __s, &v19);
      if ((_DWORD)v15)
      {
        v12 = v15;
        goto LABEL_16;
      }
      *(_QWORD *)&v17 = __s;
      *((_QWORD *)&v17 + 1) = &__s[v19];
      if (!ccder_blob_decode_range(&v17, 0x2000000000000010, &v17)
        || (v12 = 0, (sub_1000D5220(&v17, 0, a6) & 1) == 0))
      {
LABEL_14:
        v12 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_rewrap_kek", ":", 582, "", 0, "", "");
      v12 = 3758097084;
    }
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}

uint64_t sub_1000C4D8C(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v13;
  mach_port_t v14;
  mach_port_t v15;
  uint64_t v16;
  __int128 v19;
  __int128 v20;
  size_t v21;
  uint64_t input[4];
  _BYTE __s[4096];
  _QWORD v24[2];

  v13 = 3758097098;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v20 = __s;
  *((_QWORD *)&v20 + 1) = v24;
  v21 = 4096;
  v14 = sub_1000C3BBC();
  if (!v14)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_set_protection", ":", 616, "", 0, "", "");
    v13 = 3758097084;
    goto LABEL_14;
  }
  v15 = v14;
  if (sub_1000D51B4(&v20, a6)
    && sub_1000D51B4(&v20, a5)
    && sub_1000D51B4(&v20, a4)
    && sub_1000D52CC(&v20, a1)
    && ccder_blob_encode_tl(&v20, 0x2000000000000010, (char *)v24 - *((_QWORD *)&v20 + 1)))
  {
    input[0] = a2;
    input[1] = a3;
    input[2] = *((_QWORD *)&v20 + 1);
    input[3] = (uint64_t)v24 - *((_QWORD *)&v20 + 1);
    v16 = IOConnectCallMethod(v15, 0x54u, input, 4u, 0, 0, 0, 0, __s, &v21);
    if ((_DWORD)v16)
    {
      v13 = v16;
      goto LABEL_14;
    }
    *(_QWORD *)&v19 = __s;
    *((_QWORD *)&v19 + 1) = &__s[v21];
    if (!v21)
      goto LABEL_13;
    if (!ccder_blob_decode_range(&v19, 0x2000000000000010, &v19))
      goto LABEL_14;
    if (!a7)
    {
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
    v13 = 0;
    if ((sub_1000D5220(&v19, 0, a7) & 1) == 0)
      v13 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_1000C4FD4(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  mach_port_t v14;
  mach_port_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  size_t v21;
  uint64_t input[3];
  _BYTE __s[4096];
  _QWORD v24[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v20 = __s;
  *((_QWORD *)&v20 + 1) = v24;
  v21 = 4096;
  if (!a5)
  {
    v17 = 3758097090;
    goto LABEL_15;
  }
  v14 = sub_1000C3BBC();
  if (!v14)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_unwrap_vek_with_acm", ":", 653, "", 0, "", "");
    v17 = 3758097084;
    goto LABEL_15;
  }
  v15 = v14;
  if (!sub_1000D51B4(&v20, a6)
    || !sub_1000D51B4(&v20, a5)
    || !sub_1000D51B4(&v20, a4)
    || !sub_1000D51B4(&v20, a3)
    || !sub_1000D52CC(&v20, a1)
    || !ccder_blob_encode_tl(&v20, 0x2000000000000010, (char *)v24 - *((_QWORD *)&v20 + 1)))
  {
    goto LABEL_13;
  }
  input[0] = *((_QWORD *)&v20 + 1);
  input[1] = (uint64_t)v24 - *((_QWORD *)&v20 + 1);
  input[2] = a2;
  v16 = IOConnectCallMethod(v15, 0x4Bu, input, 3u, 0, 0, 0, 0, __s, &v21);
  if ((_DWORD)v16)
  {
    v17 = v16;
    goto LABEL_15;
  }
  *(_QWORD *)&v19 = __s;
  *((_QWORD *)&v19 + 1) = &__s[v21];
  if (!ccder_blob_decode_range(&v19, 0x2000000000000010, &v19))
    goto LABEL_13;
  if (!a7)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v17 = 0;
  if ((sub_1000D5018(&v19, 0, a7) & 1) == 0)
LABEL_13:
    v17 = 3758097098;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v17;
}

uint64_t sub_1000C523C(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  return sub_1000C4FD4(a1, a2, a3, a4, a5, 0, a6);
}

void sub_1000C5248(const char *a1, char a2)
{
  char *v4;
  char *v5;
  uint64_t i;
  char *v7;
  uint64_t k;
  char *v9;
  uint64_t j;
  _QWORD v11[5];
  char v12[1024];
  statfs v13;

  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 0x40000000;
      v11[2] = sub_1000C54B4;
      v11[3] = &unk_100244920;
      v11[4] = v4;
      sub_1000C3F00(v12, (uint64_t)&stru_100244900, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0)
          printf("Free Blocks:%lld blocks of size:%d\n");
        else
          printf("%lld,%d\n");
      }
      v5 = v4 + 340;
      for (i = 1; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          v9 = &v4[296 * i];
          printf("%s:\n\tNum files:\t%u,\n\tNum hardlinks:\t%u,\n\tNum compressed:\t%u,\n\tTotal Size:\t%lld,\n\tMin File Size:\t%lld,\n\tMax File Size:\t%lld,\n", off_1002A0B70[i], *(_DWORD *)v9, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (j = 0; j != 252; j += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }
        else
        {
          v7 = &v4[296 * i];
          printf("%i,%u,%u,%u,%lld,%lld,%lld,", i, *(_DWORD *)v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 1), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), *((_QWORD *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (k = 0; k != 252; k += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }
        putchar(10);
        v5 += 296;
      }
      free(v4);
    }
  }
}

BOOL sub_1000C54AC(id a1, _ftsent *a2)
{
  return 1;
}

uint64_t sub_1000C54B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t *v9;
  int64_t v10;
  uint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  unint64_t v16;

  result = sub_1000C4130(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    v5 = *(_QWORD *)(a2 + 96);
    v6 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296 * result);
    if (*(unsigned __int16 *)(v5 + 6) >= 2u)
      ++*(_DWORD *)(v7 + 296 * result + 8);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0)
      ++*(_DWORD *)(v7 + 296 * result + 4);
    v8 = v7 + 296 * result;
    v10 = *(_QWORD *)(v8 + 32);
    v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10)
      *v9 = v6;
    v11 = v7 + 296 * result;
    v14 = *(_QWORD *)(v11 + 24);
    v12 = (int64_t *)(v11 + 24);
    v13 = v14;
    if (v14)
      v15 = v6 < v13;
    else
      v15 = 1;
    if (v15)
      *v12 = v6;
    if (v6)
      v16 = v7 + 296 * result + 4 * (63 - __clz(v6));
    else
      v16 = v7 + 296 * result;
    ++*(_DWORD *)(v16 + 40);
  }
  return result;
}

uint64_t sub_1000C55BC(unsigned int a1, uint64_t a2)
{
  mach_port_t v2;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[0] = 1;
  input[1] = a1;
  input[2] = a2;
  output = 0;
  outputCnt = 1;
  v2 = sub_1000C3BBC();
  if (v2)
    return IOConnectCallMethod(v2, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_set_options", ":", 820, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000C56A4(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  mach_port_t v4;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  v2 = 3758097084;
  if (!a2)
    return 3758097090;
  input[0] = 0;
  input[1] = a1;
  input[2] = 0;
  output = 0;
  outputCnt = 1;
  v4 = sub_1000C3BBC();
  if (v4)
  {
    v2 = IOConnectCallMethod(v4, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)v2)
      *a2 = output;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_get_options", ":", 841, "", 0, "", "");
  }
  return v2;
}

uint64_t sub_1000C57B8()
{
  mach_port_t v0;

  v0 = sub_1000C3BBC();
  if (v0)
    return IOConnectCallMethod(v0, 0x10u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_internal_state", ":", 857, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000C585C(unsigned int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x86u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_run_internal_test", ":", 871, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C5940(int a1, unsigned int a2, uint64_t a3, int a4, const void *a5, int a6, _QWORD *a7, _DWORD *a8)
{
  mach_port_t v16;
  uint64_t v17;
  void *v18;
  size_t __count;
  uint64_t input[4];
  _BYTE __src[32768];

  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v16 = sub_1000C3BBC();
  if (v16)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    if (!a2 || (v17 = 3758097090, a7) && a8)
    {
      v17 = IOConnectCallMethod(v16, 0x36u, input, 4u, a5, a6, 0, 0, __src, &__count);
      if (!(_DWORD)v17 && a2)
      {
        v18 = calloc(__count, 1uLL);
        *a7 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          v17 = 0;
          *a8 = __count;
        }
        else
        {
          v17 = 3758097085;
        }
      }
    }
  }
  else
  {
    v17 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_escrow", ":", 890, "", 0, "", "");
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v17;
}

void sub_1000C5B18(id a1)
{
  if (!dword_1002A7310)
    dword_1002A7310 = sub_1000C65F0("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
}

uint64_t sub_1000C5B54()
{
  uint64_t result;

  if (qword_1002A7320 != -1)
    dispatch_once(&qword_1002A7320, &stru_1002449E0);
  dispatch_sync((dispatch_queue_t)qword_1002A7328, &stru_1002449A0);
  result = dword_1002A7314;
  if (!dword_1002A7314)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return dword_1002A7314;
  }
  return result;
}

void sub_1000C5BDC(id a1)
{
  if (!dword_1002A7314)
    dword_1002A7314 = sub_1000C65F0("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
}

uint64_t sub_1000C5C18(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v19;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t input[2];

  input[0] = a4;
  input[1] = a3;
  output = 0;
  outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  v19 = 1024;
  v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11)
    return v11;
  v17 = 3758097084;
  if (outputCnt == 1)
  {
    *a7 = output;
    if (sub_1000D7380(outputStruct, v19, 3u, v12, v13, v14, v15, v16, a5))
      return 3758097084;
    else
      return 0;
  }
  return v17;
}

uint64_t sub_1000C5D4C(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v26;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t v30;
  uint64_t v31;
  uint64_t input[2];

  input[0] = a4;
  input[1] = a3;
  output = 0;
  v30 = 0;
  v31 = 0;
  outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  v26 = 1024;
  v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17)
    return v17;
  v23 = 3758097084;
  if (outputCnt == 3)
  {
    v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    if (sub_1000D7380(outputStruct, v26, 5u, v18, v19, v20, v21, v22, a5))
      return 3758097084;
    else
      return 0;
  }
  return v23;
}

uint64_t sub_1000C5EA4(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t v11;
  unsigned int inputStructCnt[3];
  uint64_t input;

  input = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  v11 = IOConnectCallMethod(a1, 0x14u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_1000C5F60(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  uint64_t v16;
  uint64_t v17;
  uint32_t outputCnt;
  unsigned int inputStructCnt[3];
  uint64_t output;
  uint64_t input[4];

  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  input[3] = a12;
  output = 0;
  outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  v16 = IOConnectCallMethod(a1, 0x15u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, outputStruct, a14);
  if ((_DWORD)v16)
  {
    v17 = v16;
  }
  else if (outputCnt == 1)
  {
    v17 = 0;
    *a15 = output;
  }
  else
  {
    v17 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_1000C6070(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t outputStructCnt;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[2];

  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  outputStructCnt = 1024;
  sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  v15 = IOConnectCallMethod(a1, 0x10u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &outputStructCnt);
  if ((_DWORD)v15)
  {
    v21 = v15;
  }
  else if (sub_1000D7380(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    v21 = 3758097084;
  }
  else
  {
    v21 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t sub_1000C61A8(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[3];

  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  v25 = 1024;
  sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  v17 = IOConnectCallMethod(a1, 0x17u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
  if ((_DWORD)v17)
  {
    v23 = v17;
  }
  else if (sub_1000D7380(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    v23 = 3758097084;
  }
  else
  {
    v23 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t sub_1000C62F0(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input;

  input = a3;
  return IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x10uLL, 0, 0, 0, 0);
}

uint64_t sub_1000C6360(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int inputStructCnt[3];
  uint64_t input;

  input = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  v9 = IOConnectCallMethod(a1, 0x12u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1000C640C(int a1, const void *a2, _QWORD *a3, size_t *a4)
{
  mach_port_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  size_t __count;
  _BYTE __src[32768];
  uint64_t input;

  input = a1;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v7 = sub_1000C3BBC();
  if (v7)
  {
    if (a2)
      v8 = 18;
    else
      v8 = 0;
    v9 = IOConnectCallMethod(v7, 0x5Du, &input, 1u, a2, v8, 0, 0, __src, &__count);
    v10 = __count;
    if ((_DWORD)v9)
    {
      v12 = v9;
    }
    else if (__count - 32769 < 0xFFFFFFFFFFFF8000)
    {
      v12 = 3758097090;
    }
    else
    {
      v11 = calloc(__count, 1uLL);
      *a3 = v11;
      v10 = __count;
      if (v11)
      {
        *a4 = __count;
        memcpy(v11, __src, v10);
        v12 = 0;
        v10 = __count;
      }
      else
      {
        v12 = 3758097085;
      }
    }
  }
  else
  {
    v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_info_for_key", ":", 1246, "", 0, "", "");
    v10 = 0x8000;
  }
  memset_s(__src, v10, 0, v10);
  return v12;
}

void sub_1000C65C8(id a1)
{
  qword_1002A7328 = (uint64_t)dispatch_queue_create("aks-client-queue", 0);
}

uint64_t sub_1000C65F0(char *path, const char *a2)
{
  io_service_t v3;
  io_object_t v4;
  kern_return_t v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;

  connect = 0;
  v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }
  result = connect;
  if (connect)
  {
    v10 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C66E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = ccder_sizeof_implicit_uint64(0x8000000000000004, a1[10]);
  v3 = ccder_sizeof_raw_octet_string(16);
  v4 = ccder_sizeof_raw_octet_string(40);
  v5 = v4 + v2 + 2 * v3 + ccder_sizeof_implicit_uint64(0x8000000000000000, *a1);
  return ccder_sizeof(0x2000000000000010, v5);
}

uint64_t sub_1000C6754(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 + a3;
  v7 = a2;
  v8 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000004, a1[10])
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000003, 16, a1 + 8)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000002, 40, a1 + 3)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000001, 16, a1 + 1)
    || !ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000000, *a1))
  {
    return 4294967273;
  }
  v5 = ccder_blob_encode_tl(&v7, 0x2000000000000010, v4 - v8);
  result = 4294967273;
  if (v5)
  {
    if (v7 == v8)
      return 0;
    else
      return 4294967273;
  }
  return result;
}

uint64_t sub_1000C6834(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  __int128 v6;

  *(_QWORD *)&v6 = a1;
  *((_QWORD *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range(&v6, 0x2000000000000010, &v6)
    || !sub_1000D664C(&v6, 0x8000000000000000, a3)
    || !sub_1000D3E7C(&v6, 0x8000000000000001, a3 + 1, 16)
    || !sub_1000D3E7C(&v6, 0x8000000000000002, a3 + 3, 40)
    || !sub_1000D3E7C(&v6, 0x8000000000000003, a3 + 8, 16))
  {
    return 4294967277;
  }
  v4 = sub_1000D664C(&v6, 0x8000000000000004, a3 + 10);
  result = 4294967277;
  if (v4)
  {
    if ((_QWORD)v6 == *((_QWORD *)&v6 + 1))
      return 0;
    else
      return 4294967277;
  }
  return result;
}

uint64_t sub_1000C6910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  v13 = 40;
  *(_QWORD *)a4 = 0;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(_QWORD *)(a4 + 80) = 1;
  v8 = sub_1000D6964(a4 + 64, 0x10u);
  v9 = ccsha256_di(v8);
  if (j__ccpbkdf2_hmac(v9, a3, a2, 16, a4 + 64, *(_QWORD *)(a4 + 80), 32, __s))
  {
    v11 = 4294967286;
  }
  else
  {
    v10 = sub_1000C34AC((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (uint64_t *)a1, 0x20u, (_QWORD *)(a4 + 24), &v13);
    if ((_DWORD)v10)
    {
      v11 = v10;
    }
    else if (v13 == 40)
    {
      v11 = 0;
    }
    else
    {
      v11 = 4294967286;
    }
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v11;
}

uint64_t sub_1000C6A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  v12 = 32;
  if (*(_QWORD *)a1)
  {
    v10 = 4294967284;
  }
  else
  {
    v8 = ccsha256_di(a1);
    if (j__ccpbkdf2_hmac(v8, a3, a2, 16, a1 + 64, *(_QWORD *)(a1 + 80), 32, __s))
      goto LABEL_9;
    v9 = sub_1000C3870((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (_QWORD *)(a1 + 24), 0x28u, (_QWORD *)a4, &v12);
    if ((_DWORD)v9)
    {
      v10 = v9;
      goto LABEL_8;
    }
    if (v12 != 32)
    {
LABEL_9:
      v10 = 4294967286;
    }
    else
    {
      cccurve25519_make_pub(a4 + 32, a4);
      if (uuid_compare((const unsigned __int8 *)(a1 + 8), (const unsigned __int8 *)(a4 + 32)))
        v10 = 4294967272;
      else
        v10 = 0;
    }
  }
LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t sub_1000C6B7C(int a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  __int128 v16;
  uint64_t input[7];
  _BYTE v18[4096];
  uint64_t v19;

  v12 = 3758097098;
  bzero(v18, 0x1000uLL);
  *(_QWORD *)&v16 = v18;
  *((_QWORD *)&v16 + 1) = &v19;
  v13 = sub_1000C3BBC();
  if (v13)
  {
    v14 = v13;
    if (sub_1000D51B4(&v16, a6)
      && ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v19 - *((_QWORD *)&v16 + 1)))
    {
      input[0] = a1;
      input[1] = a2;
      input[2] = a4;
      input[3] = a5;
      input[4] = a3;
      input[5] = *((_QWORD *)&v16 + 1);
      input[6] = (uint64_t)&v19 - *((_QWORD *)&v16 + 1);
      return IOConnectCallMethod(v14, 0x21u, input, 7u, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_create_for_bag_and_kek", ":", 50, "", 0, "", "");
    return 3758097084;
  }
  return v12;
}

uint64_t sub_1000C6D24(int a1, unsigned int a2, uint64_t a3, int a4)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  return sub_1000C6B7C(a1, a2, 0, a3, a4, v5);
}

uint64_t sub_1000C6D54(int a1)
{
  return sub_1000C6D60(a1, 0, 0);
}

uint64_t sub_1000C6D60(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t v6;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  v6 = sub_1000C3BBC();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(v6, 0x22u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)result)
    {
      result = 0;
      if (a3)
        *a3 = output != 0;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_stash_load", ":", 77, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000C6E80(int a1, _BYTE *a2)
{
  uint64_t result;
  BOOL v4;

  v4 = 0;
  if (!a2)
    return sub_1000C6D60(a1, 1u, &v4);
  *a2 = 0;
  result = sub_1000C6D60(a1, 1u, &v4);
  if (!(_DWORD)result)
    *a2 = v4;
  return result;
}

uint64_t sub_1000C6ED8()
{
  mach_port_t v0;

  v0 = sub_1000C3BBC();
  if (v0)
    return IOConnectCallMethod(v0, 0x25u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_destroy", ":", 125, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000C6F7C(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x24u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_commit", ":", 138, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C7060(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x33u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_enable", ":", 154, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C7144(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x35u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_persist", ":", 170, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C7228(void **a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 != 1634431856)
    return 0xFFFFFFFFLL;
  free(a1[1]);
  free(a1);
  return 0;
}

uint64_t sub_1000C7280(int a1, uint64_t a2, unint64_t a3, int a4, _QWORD *a5)
{
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void **v14;

  v14 = 0;
  if (!a2 && a3)
    return 0xFFFFFFFFLL;
  if (sub_1000C7384(a4, &v14) || (v9 = calloc(0x20uLL, 1uLL)) == 0)
  {
    v12 = 0xFFFFFFFFLL;
  }
  else
  {
    v10 = v9;
    v11 = sub_1000C7464((uint64_t)v14, a2, a3, (uint64_t)v9);
    v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE && !v11 && !sub_1000C7504(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      v12 = 0;
      if (a5)
      {
        *a5 = v14;
        v14 = 0;
      }
    }
    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }
  if (v14)
    sub_1000C7228(v14);
  return v12;
}

uint64_t sub_1000C7384(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  int v9;
  void *v10;

  if ((a1 - 1) > 2 || a2 == 0)
    return 0xFFFFFFFFLL;
  v6 = calloc(0x20uLL, 1uLL);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = v6;
  *((_QWORD *)v6 + 2) = 20;
  v8 = calloc(0x14uLL, 1uLL);
  *((_QWORD *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }
  *v7 = 1634431856;
  v7[6] = a1;
  result = CCRandomCopyBytes(kCCRandomDefault, v8, *((_QWORD *)v7 + 2));
  if ((_DWORD)result)
  {
    v10 = (void *)*((_QWORD *)v7 + 1);
    if (v10)
      free(v10);
    goto LABEL_19;
  }
  if (a1 == 3)
    v9 = 2000;
  else
    v9 = 10000000;
  if (a1 == 2)
    v9 = 1000;
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_1000C7464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 != 1634431856 || !a2 && a3)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a4 && (*(_DWORD *)(a1 + 24) - 4) >= 0xFFFFFFFD)
  {
    v9 = ccsha256_di(0xFFFFFFFFLL);
    if (ccpbkdf2_hmac(v9, a3, a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 4), 32, a4))return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1000C7504(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  void *v14;
  rsize_t __n;
  void *__s;
  uint64_t input[3];

  __n = 0;
  __s = 0;
  v10 = 3758097090;
  v14 = 0;
  if ((a2 || !a3) && a4 && a5)
  {
    v11 = sub_1000C3BBC();
    if (v11)
    {
      v12 = v11;
      if (!sub_1000D4624(&v14, (uint64_t)off_1002A0F38, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16))
        && !sub_1000D4624(&v14, (uint64_t)off_1002A0F30, a4, 32)
        && !sub_1000D49E0(&v14, (uint64_t)off_1002A0F40, *(unsigned int *)(a5 + 4))
        && !sub_1000D49E0(&v14, (uint64_t)off_1002A0F48, *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !sub_1000D4624(&v14, (uint64_t)off_1002A0C00, a2, a3))
        && !sub_1000D4F04(&v14)
        && !sub_1000D42E4(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        input[2] = __n;
        v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_set_prederived_configuration", ":", 218, "", 0, "", "");
      v10 = 3758097084;
    }
  }
  sub_1000D3C14(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v10;
}

uint64_t sub_1000C772C(int a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  mach_port_t v6;
  mach_port_t v7;
  CFMutableDictionaryRef Mutable;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  size_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t input;
  _BYTE outputStruct[32768];

  if (!a2)
    return 0;
  result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result)
    return result;
  v5 = result;
  *(_DWORD *)result = 1634431856;
  v6 = sub_1000C3BBC();
  if (!v6)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_prederived_configuration", ":", 384, "", 0, "", "");
LABEL_16:
    sub_1000C7228((void **)v5);
    return 0;
  }
  v7 = v6;
  bzero(outputStruct, 0x8000uLL);
  v19 = 0x8000;
  input = a1;
  if (IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, &v19) || v19 > 0x8000)
    goto LABEL_16;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v9 = &outputStruct[v19];
  v22 = 0u;
  v24 = 0u;
  v25 = 0;
  v21 = 0u;
  v27 = 0u;
  v28 = 0u;
  v20 = off_1002A0F38;
  v23 = (unint64_t)off_1002A0F40;
  v26 = off_1002A0F48;
  v16 = xmmword_100216790;
  v17 = 0;
  v18 = &v20;
  sub_1000D3708((uint64_t)outputStruct, (uint64_t)&outputStruct[v19], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D3540, (uint64_t)&v16);
  v10 = *((_QWORD *)&v23 + 1);
  v11 = v27;
  v12 = ccder_decode_tl(4, v5 + 16, v21, v9);
  if (v12)
  {
    v13 = (const void *)v12;
    v14 = calloc(*(_QWORD *)(v5 + 16), 1uLL);
    *(_QWORD *)(v5 + 8) = v14;
    if (!v14)
    {
      v15 = 0;
      if (!Mutable)
        goto LABEL_11;
      goto LABEL_10;
    }
    memcpy(v14, v13, *(_QWORD *)(v5 + 16));
    *(_DWORD *)(v5 + 4) = sub_1000D3920(v10, (uint64_t)v9);
    *(_DWORD *)(v5 + 24) = sub_1000D3920(v11, (uint64_t)v9);
  }
  v15 = 1;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
LABEL_11:
  if (!v15 || !*(_QWORD *)(v5 + 16))
    goto LABEL_16;
  *a2 = v5;
  return 1;
}

uint64_t sub_1000C79EC(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  _OWORD v9[2];

  memset(v9, 0, sizeof(v9));
  if (a3)
    v4 = a2 == 0;
  else
    v4 = 0;
  v5 = v4 || a4 == 0;
  if (v5 || *a4 != 1634431856 || sub_1000C7464((uint64_t)a4, a2, a3, (uint64_t)v9))
    v7 = 0xFFFFFFFFLL;
  else
    v7 = sub_1000C7AB4(a1, (uint64_t)v9, 32);
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_1000C7AB4(int a1, uint64_t a2, int a3)
{
  mach_port_t v6;
  uint64_t input[3];

  v6 = sub_1000C3BBC();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_bag", ":", 807, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C7BB0(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  int v11;
  void **v12;
  int v13;
  uint64_t v14;
  void **v16;
  _OWORD v17[2];
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  if (!a6)
    goto LABEL_17;
  v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3)
    goto LABEL_17;
  if (!a4 && a5 || sub_1000C7464(*a6, a2, a3, (uint64_t)__s))
    goto LABEL_17;
  v11 = sub_1000C7384(*(_DWORD *)(v7 + 24), &v16);
  v12 = v16;
  if (v11 || (v13 = sub_1000C7464((uint64_t)v16, a4, a5, (uint64_t)v17), v12 = v16, v13))
  {
LABEL_15:
    if (v12)
      sub_1000C7228(v12);
LABEL_17:
    v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (sub_1000C7504(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    v12 = v16;
    goto LABEL_15;
  }
  sub_1000C7228((void **)v7);
  v14 = 0;
  *a6 = (uint64_t)v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t sub_1000C7D10(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return sub_1000C7D28(a1, a2, 0, 0, a3, -1, a4);
}

uint64_t sub_1000C7D28(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t v15;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[6];

  v14 = 3758097084;
  v15 = sub_1000C3BBC();
  if (v15)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      input[2] = a1;
      input[3] = a2;
      input[4] = a3;
      input[5] = a4;
      output = 0;
      outputCnt = 1;
      v14 = IOConnectCallMethod(v15, 2u, input, 6u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v14)
        *a7 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_create_bag", ":", 187, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000C7E7C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000C7D28(a1, a2, 0, 0, 2u, a3, a4);
}

uint64_t sub_1000C7E94(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000C7D28(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t sub_1000C7EBC(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000C7D28(a1, a2, 0, 0, 0x8000002u, a3, a4);
}

uint64_t sub_1000C7ED8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000C7D28(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t sub_1000C7F04()
{
  mach_port_t v0;

  v0 = sub_1000C3BBC();
  if (v0)
    return IOConnectCallMethod(v0, 0x42u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_sync_bags", ":", 544, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000C7FA8(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t input[3];

  v10 = 3758097084;
  v11 = sub_1000C3BBC();
  if (v11)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      input[2] = a4;
      return IOConnectCallMethod(v11, 0x43u, input, 3u, a1, a2, 0, 0, 0, 0);
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_with_sync_bag", ":", 557, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_1000C80C8(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  mach_port_t v7;
  uint32_t outputCnt;
  uint64_t output;

  v6 = 3758097084;
  v7 = sub_1000C3BBC();
  if (v7)
  {
    v6 = 3758097090;
    if (a1)
    {
      if (a3)
      {
        output = 0;
        outputCnt = 1;
        v6 = IOConnectCallMethod(v7, 6u, 0, 0, a1, a2, &output, &outputCnt, 0, 0);
        if (!(_DWORD)v6)
          *a3 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_load_bag", ":", 574, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_1000C81E0(const void *a1, int a2)
{
  uint64_t v4;
  mach_port_t v5;

  v4 = 3758097084;
  v5 = sub_1000C3BBC();
  if (v5)
  {
    if (a1)
      return IOConnectCallMethod(v5, 0x57u, 0, 0, a1, a2, 0, 0, 0, 0);
    return 3758097090;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_bag", ":", 596, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000C82AC(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_bag", ":", 612, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C8390(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x37u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_session_bags", ":", 629, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C8474(int a1, _QWORD *a2, _DWORD *a3)
{
  mach_port_t v6;
  mach_port_t v7;
  uint64_t result;
  void *v9;
  size_t __count;
  uint64_t input;
  _BYTE __src[32768];

  v6 = sub_1000C3BBC();
  if (v6)
  {
    v7 = v6;
    result = 3758097090;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input = a1;
        result = IOConnectCallMethod(v7, 3u, &input, 1u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          v9 = calloc(__count, 1uLL);
          *a2 = v9;
          if (v9)
          {
            memcpy(v9, __src, __count);
            result = 0;
            *a3 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_save_bag", ":", 646, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000C85FC(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t v21;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[12];

  v21 = sub_1000C3BBC();
  if (v21)
  {
    input[0] = a1;
    input[1] = a11;
    input[2] = a10;
    input[3] = a2;
    input[4] = a3;
    input[5] = a4;
    input[6] = a5;
    input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(v21, 0xFu, input, 0xCu, 0, 0, &output, &outputCnt, 0, 0);
    if (a13)
    {
      if (!(_DWORD)result)
        *a13 = output;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_opts", ":", 678, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000C876C(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return sub_1000C85FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sub_1000C8790(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return sub_1000C85FC(a1, a2, a3, a4, a5, 0, 0, 0, 0, 0xFFu, a6, 0, a7);
}

uint64_t sub_1000C87CC(int a1, _OWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  size_t v7;
  uint64_t input;
  __int128 outputStruct;

  v4 = 3758097084;
  v7 = 16;
  v5 = sub_1000C3BBC();
  if (v5)
  {
    if (a2)
    {
      outputStruct = 0uLL;
      input = a1;
      v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v7);
      if (!(_DWORD)v4)
        *a2 = outputStruct;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_bag_uuid", ":", 729, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000C88F0(int a1, _QWORD *a2, size_t *a3)
{
  return sub_1000C8904(a1, (uint64_t)&unk_1002167E0, a2, a3);
}

uint64_t sub_1000C8904(int a1, uint64_t a2, _QWORD *a3, size_t *a4)
{
  mach_port_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  void *v17;
  unsigned int inputStructCnt[3];
  size_t __count;
  uint64_t input;
  _OWORD __src[2];
  __int16 v23;

  v23 = 0;
  memset(__src, 0, sizeof(__src));
  __count = 34;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v8 = sub_1000C3BBC();
  if (v8)
  {
    v14 = 3758097090;
    if (a3 && a4)
    {
      v15 = v8;
      input = a1;
      sub_1000D72A4((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(_QWORD *)&inputStructCnt[1])
      {
        v16 = IOConnectCallMethod(v15, 0x44u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if ((_DWORD)v16)
        {
          v14 = v16;
        }
        else
        {
          v17 = calloc(__count, 1uLL);
          *a3 = v17;
          v14 = 3758097085;
          if (v17)
          {
            memcpy(v17, __src, __count);
            v14 = 0;
            *a4 = __count;
          }
        }
      }
      else
      {
        v14 = 3758097085;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_copy_volume_cookie_persona", ":", 760, "", 0, "", "");
    v14 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t sub_1000C8AB0(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_1000C3BBC();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0xDu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_bag", ":", 790, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000C8B94(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_1000C3BBC();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_lock_state", ":", 824, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000C8CAC(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  size_t v18;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  v14 = 3758097084;
  v15 = sub_1000C3BBC();
  if (v15)
  {
    v14 = 3758097090;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      output = 0;
      outputCnt = 1;
      v18 = *a6;
      v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }
      else
      {
        *a6 = v18;
        v14 = 0;
        if (a7)
          *a7 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_wrap_key", ":", 848, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000C8E14(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12;
  mach_port_t v13;
  size_t v15;
  uint64_t input[2];

  v12 = 3758097084;
  v13 = sub_1000C3BBC();
  if (v13)
  {
    v12 = 3758097090;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          v15 = *a6;
          v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0, 0, a5, &v15);
          if (!(_DWORD)v12)
            *a6 = v15;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unwrap_key", ":", 877, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000C8F58(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14;
  mach_port_t v15;
  size_t v17;
  uint64_t input[4];

  v14 = 3758097084;
  v15 = sub_1000C3BBC();
  if (v15)
  {
    v14 = 3758097090;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      input[2] = a5;
      input[3] = a6;
      v17 = 108;
      return IOConnectCallMethod(v15, 0x18u, input, 4u, a1, a2, 0, 0, a7, &v17);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_rewrap_key_for_backup", ":", 901, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1000C9098(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_1000C3BBC();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_system", ":", 922, "", 0, "", "");
  }
  return v4;
}

