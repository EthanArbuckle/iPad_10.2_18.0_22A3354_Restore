int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010012D7F0, 0x69746E6564657243, 0xEB00000000736C61);
  setDefaultLogger(_:)(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  byte_100178C90 = isInternalBuild()();
  qword_100178C98 = 0;
  v7 = objc_autoreleasePoolPush();
  v8 = type metadata accessor for DaemonInitializer();
  swift_allocObject(v8, 56, 7);
  v9 = sub_1000EB02C();
  v10 = qword_100178C98;
  qword_100178C98 = (uint64_t)v9;
  swift_release(v10);
  objc_autoreleasePoolPop(v7);
  v11 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v11, "run");

  exit(0);
}

void type metadata accessor for DCPresentmentType(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174478, (uint64_t)&unk_100167288);
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174480, (uint64_t)&unk_1001672A8);
}

void type metadata accessor for DCPresentmentMessageEncodingFormat(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174488, (uint64_t)&unk_1001672D8);
}

void type metadata accessor for DCCredentialPayloadFormat(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174490, (uint64_t)&unk_1001672F8);
}

void type metadata accessor for DCCredentialPayloadProtectionType(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174498, (uint64_t)&unk_100167318);
}

void type metadata accessor for DCCredentialCryptoKeyType(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744A0, (uint64_t)&unk_100167338);
}

void type metadata accessor for DCCredentialCryptoKeyUsage(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744A8, (uint64_t)&unk_100167358);
}

void type metadata accessor for DCCredentialPayloadProtectionPolicy(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744B0, (uint64_t)&unk_100167378);
}

void type metadata accessor for DCCredentialPresentmentAuthPolicy(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744B8, (uint64_t)&unk_100167398);
}

void type metadata accessor for DCCredentialReaderAuthenticationPolicy(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744C0, (uint64_t)&unk_1001673B8);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001744C8, (uint64_t)&unk_1001673D8);
}

Swift::Int sub_100005428()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000546C()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100005494(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1000054D4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_1000054E8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000054F8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_100005504@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100005510(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100005518@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10000552C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100005540@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_100005554@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100005580@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000055A4(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000055B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1000055CC(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000055E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000055F4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100005608(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10000561C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100005630()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100005640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100005658(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_10000566C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

uint64_t sub_10000569C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000598C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void type metadata accessor for DCCredentialAuthenticationTokenStatus(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174530, (uint64_t)&unk_100167408);
}

void type metadata accessor for DCPresentmentTransportKeySpecification(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174538, (uint64_t)&unk_100167428);
}

void type metadata accessor for DCPresentmentResponseStatus(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174540, (uint64_t)&unk_100167450);
}

void type metadata accessor for SecTrust(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174548, (uint64_t)&unk_100167470);
}

void type metadata accessor for COSEAlgorithm(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174550, (uint64_t)&unk_1001674A0);
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174558, (uint64_t)&unk_1001674C0);
}

void type metadata accessor for COSEKeyKTYType(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174560, (uint64_t)&unk_1001674E0);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174568, (uint64_t)&unk_100167500);
}

void type metadata accessor for DCCredentialAuthACLType(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174570, (uint64_t)&unk_100167530);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174578, (uint64_t)&unk_100167550);
}

void type metadata accessor for DCCredentialState(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174580, (uint64_t)&unk_100167580);
}

void type metadata accessor for DCCredentialCompletenessResult(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174588, (uint64_t)&unk_1001675A0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174590, (uint64_t)&unk_1001675C8);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_10000582C(a1, &qword_100174598, (uint64_t)&unk_1001675F0);
}

void type metadata accessor for DCPresentmentElementFallbackMode(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001745A0, (uint64_t)&unk_100167620);
}

void type metadata accessor for DCPresentmentSessionResponseEncryptionMode(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001745A8, (uint64_t)&unk_100167648);
}

void type metadata accessor for DCPresentmentSessionEncryptionMode(uint64_t a1)
{
  sub_10000582C(a1, &qword_1001745B0, (uint64_t)&unk_100167668);
}

void sub_10000582C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005870()
{
  return sub_1000058C8(&qword_1001745B8, (uint64_t (*)(uint64_t))type metadata accessor for DCCredentialCompletenessResult, (uint64_t)&unk_10012A220);
}

uint64_t sub_10000589C()
{
  return sub_1000058C8(&qword_1001745C0, (uint64_t (*)(uint64_t))type metadata accessor for DCCredentialCompletenessResult, (uint64_t)&unk_10012A1EC);
}

uint64_t sub_1000058C8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005908()
{
  return sub_1000058C8(&qword_1001745C8, (uint64_t (*)(uint64_t))type metadata accessor for DCCredentialCompletenessResult, (uint64_t)&unk_10012A24C);
}

uint64_t sub_100005934()
{
  return sub_1000058C8(&qword_1001745D0, (uint64_t (*)(uint64_t))type metadata accessor for DCCredentialCompletenessResult, (uint64_t)&unk_10012A288);
}

uint64_t sub_100005960()
{
  return sub_1000058C8(&qword_1001745D8, (uint64_t (*)(uint64_t))type metadata accessor for DCCredentialState, (uint64_t)&unk_10012A3D4);
}

uint64_t sub_10000598C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t GenericPasswordKeychainWrapper.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SELegacyKeystore()
{
  return objc_opt_self(_TtC7idcredd16SELegacyKeystore);
}

uint64_t initializeBufferWithCopyOfBuffer for SELegacyKeystore.KeyCreationResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_100005A38(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for SELegacyKeystore.KeyCreationResult(uint64_t a1)
{
  sub_100005AB0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_100005AB0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return sub_100005AB0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_100005AB0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *initializeWithCopy for SELegacyKeystore.KeyCreationResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_100005A38(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = a2[3];
  v7 = a2[4];
  sub_100005A38(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v9 = a2[5];
  v8 = a2[6];
  sub_100005A38(v9, v8);
  a1[5] = v9;
  a1[6] = v8;
  return a1;
}

_QWORD *assignWithCopy for SELegacyKeystore.KeyCreationResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_100005A38(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_100005AB0(v6, v7);
  v8 = a2[3];
  v9 = a2[4];
  sub_100005A38(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_100005AB0(v10, v11);
  v13 = a2[5];
  v12 = a2[6];
  sub_100005A38(v13, v12);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v13;
  a1[6] = v12;
  sub_100005AB0(v14, v15);
  return a1;
}

__n128 initializeWithTake for SELegacyKeystore.KeyCreationResult(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SELegacyKeystore.KeyCreationResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005AB0(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100005AB0(v6, v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v8;
  sub_100005AB0(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SELegacyKeystore.KeyCreationResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SELegacyKeystore.KeyCreationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SELegacyKeystore.KeyCreationResult()
{
  return &type metadata for SELegacyKeystore.KeyCreationResult;
}

uint64_t sub_100005D28(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_100006528(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100005E20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100006648(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100005FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008E84(&qword_100174768);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_10000624C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008E84(&qword_100174770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100006528(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100005FCC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000067E0();
      goto LABEL_14;
    }
    sub_100006B24(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void sub_100006648(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10000624C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100006974();
      goto LABEL_22;
    }
    sub_100006D84(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void *sub_1000067E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008E84(&qword_100174768);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100006974()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008E84(&qword_100174770);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_100006B24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008E84(&qword_100174768);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100006D84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008E84(&qword_100174770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100007030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(char *, uint64_t);
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t);
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD v45[3];
  char v46[8];
  uint64_t v47;
  uint64_t v48;

  v2 = type metadata accessor for DIPError.Code(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v37 - v10;
  v12 = defaultLogger()(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v15 = 134349056;
    v47 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v15 + 4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "SELegacyKeystore deleteKey keySlot = %{public}ld", v15, 0xCu);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v11, v4);
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1);
  v18 = (id)SESLegacyKeyDelete();
  if (v18)
  {
    v19 = v18;
    v40 = v4;
    v20 = v18;
    defaultLogger()(v20);
    v21 = v20;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v39 = v17;
      v26 = v25;
      v47 = v25;
      v38 = v16;
      *(_DWORD *)v24 = 136315138;
      v37 = v24 + 4;
      swift_getErrorValue(v21, v46, v45);
      v27 = Error.localizedDescription.getter(v45[1], v45[2]);
      v29 = v28;
      v44 = sub_10003FA80(v27, v28, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v37);

      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error from SESLegacyKeyDelete: %s", v24, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v30 = v26;
      v17 = v39;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      v38(v8, v40);
    }
    else
    {

      v16(v8, v40);
    }
    v31 = v43;
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, enum case for DIPError.Code.sesLegacyKeyDeleteError(_:), v42);
    v32 = v21;
    v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_10000745C();
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010012D830, v19, v31, 0, v33, 0xD000000000000053, 0x800000010012D850, 0x654B6574656C6564, 0xED0000293A5F2879, 139);
    swift_willThrow(v36);

  }
  else
  {

  }
}

unint64_t sub_10000745C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100174E20;
  if (!qword_100174E20)
  {
    v1 = type metadata accessor for DIPError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DIPError, v1);
    atomic_store(result, (unint64_t *)&qword_100174E20);
  }
  return result;
}

unint64_t sub_1000074A4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  os_log_t v35;
  void *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  Class isa;
  Class v44;
  id v45;
  Class v46;
  Class v47;
  id v48;
  id v49;
  char *v50;
  unint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint8_t *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  id v65;
  id v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint8_t *v75;
  void *v76;
  Swift::String v77;
  id v78;
  char *v79;
  uint64_t v80;
  char *v81;
  id v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  os_log_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint8_t *v101;
  id v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  id v105;
  id v106;
  uint64_t v107;
  id v108;

  v105 = a3;
  v12 = type metadata accessor for DIPError.Code(0);
  v97 = *(_QWORD *)(v12 - 8);
  v98 = v12;
  __chkstk_darwin(v12);
  v99 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v103 = *(void (**)(char *, uint64_t))(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v95 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v104 = (char *)&v92 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v92 - v20;
  defaultLogger()(v19);
  sub_100005A38(a1, a2);
  sub_100005A38(a4, a5);
  v106 = a6;
  v22 = a6;
  sub_100005A38(a1, a2);
  sub_100005A38(a4, a5);
  v102 = v22;
  v23 = Logger.logObject.getter(v102);
  v24 = static os_log_type_t.debug.getter();
  v96 = v24;
  v25 = os_log_type_enabled(v23, v24);
  v100 = v14;
  v101 = (uint8_t *)a5;
  v94 = v6;
  if (v25)
  {
    v26 = swift_slowAlloc(42, -1);
    v93 = (void *)swift_slowAlloc(96, -1);
    v108 = v93;
    *(_DWORD *)v26 = 136315906;
    v92 = v23;
    v27 = Data.base16EncodedString()();
    v107 = sub_10003FA80(v27._countAndFlagsBits, (unint64_t)v27._object, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v26 + 4);
    swift_bridgeObjectRelease(v27._object);
    sub_100005AB0(a1, a2);
    sub_100005AB0(a1, a2);
    *(_WORD *)(v26 + 12) = 2050;
    v107 = (uint64_t)v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v26 + 14);
    *(_WORD *)(v26 + 22) = 2080;
    v28 = Data.base16EncodedString()();
    v107 = sub_10003FA80(v28._countAndFlagsBits, (unint64_t)v28._object, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v26 + 24);
    swift_bridgeObjectRelease(v28._object);
    sub_100005AB0(a4, a5);
    sub_100005AB0(a4, a5);
    *(_WORD *)(v26 + 32) = 2080;
    v107 = (uint64_t)v106;
    v29 = sub_100008E84(&qword_100174778);
    v30 = Optional.debugDescription.getter(v29);
    v32 = v31;
    v107 = sub_10003FA80(v30, v31, (uint64_t *)&v108);
    v33 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v26 + 34);
    v34 = v102;

    swift_bridgeObjectRelease(v32);
    v35 = v92;
    _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v96, "SELegacyKeystore signDigest digest = %s, keySlot = %{public}ld, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v26, 0x2Au);
    v36 = v93;
    swift_arrayDestroy(v93, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v37 = (void (*)(char *, uint64_t))*((_QWORD *)v103 + 1);
    v38 = v21;
    v14 = v33;
    v39 = v33;
  }
  else
  {
    sub_100005AB0(a1, a2);
    sub_100005AB0(a1, a2);
    sub_100005AB0(a4, a5);
    sub_100005AB0(a4, a5);

    v34 = v102;
    v37 = (void (*)(char *, uint64_t))*((_QWORD *)v103 + 1);
    v38 = v21;
    v39 = v14;
  }
  v103 = v37;
  v37(v38, v39);
  v40 = objc_allocWithZone((Class)NSNumber);
  v41 = objc_msgSend(v40, "initWithInteger:", v105);
  if (v106)
  {
    v42 = v34;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v44 = Data._bridgeToObjectiveC()().super.isa;
    v108 = 0;
    v45 = (id)SESLegacyKeySignPrecomputedDigestWithListenerEndpoint(v42, isa, v41, v44, &v108);

  }
  else
  {
    v46 = Data._bridgeToObjectiveC()().super.isa;
    v47 = Data._bridgeToObjectiveC()().super.isa;
    v108 = 0;
    v45 = (id)SESLegacyKeySignPrecomputedDigest(v46, v41, v47, &v108);

  }
  v48 = v41;
  v49 = v108;
  v50 = v104;
  if (v49)
  {
    v51 = (unint64_t)v49;
    v106 = v45;
    v52 = v49;
    defaultLogger()(v52);
    v53 = v52;
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(12, -1);
      v105 = v41;
      v57 = (uint8_t *)v56;
      v102 = (id)swift_slowAlloc(32, -1);
      v108 = v102;
      *(_DWORD *)v57 = 136446210;
      v101 = v57 + 4;
      v58 = objc_msgSend(v53, "debugDescription");
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      v107 = sub_10003FA80(v59, v61, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v101);

      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Error from SESLegacyKeySignPrecomputedDigest: %{public}s", v57, 0xCu);
      v62 = v102;
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      v48 = v105;
      swift_slowDealloc(v57, -1, -1);

      v63 = v104;
      v64 = v100;
    }
    else
    {

      v63 = v50;
      v64 = v14;
    }
    v103(v63, v64);
    v81 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v99, enum case for DIPError.Code.sesLegacyKeySignError(_:), v98);
    v82 = v53;
    v83 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v84 = type metadata accessor for DIPError(0);
    v85 = sub_10000745C();
    swift_allocError(v84, v85, 0, 0);
    v86 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010012D9F0, v51, v81, 0, v83, 0xD000000000000053, 0x800000010012D850, 0xD00000000000003DLL, 0x800000010012D9B0, 174);
    swift_willThrow(v86);

    v48 = v106;
    goto LABEL_15;
  }
  if (!v45)
  {
    v87 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v99, enum case for DIPError.Code.sesLegacyKeySignError(_:), v98);
    v51 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v88 = type metadata accessor for DIPError(0);
    v89 = sub_10000745C();
    swift_allocError(v88, v89, 0, 0);
    v90 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000047, 0x800000010012D960, 0, v87, 0, v51, 0xD000000000000053, 0x800000010012D850, 0xD00000000000003DLL, 0x800000010012D9B0, 177);
    swift_willThrow(v90);
LABEL_15:

    return v51;
  }
  v65 = v45;
  v66 = objc_msgSend(v65, "signature");
  v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
  v68 = v67;

  v69 = v95;
  defaultLogger()(v70);
  sub_100005A38(v51, v68);
  v71 = sub_100005A38(v51, v68);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v106 = v65;
    v74 = swift_slowAlloc(12, -1);
    v105 = v48;
    v75 = (uint8_t *)v74;
    v76 = (void *)swift_slowAlloc(32, -1);
    v108 = v76;
    *(_DWORD *)v75 = 136315138;
    v77 = Data.base16EncodedString()();
    v107 = sub_10003FA80(v77._countAndFlagsBits, (unint64_t)v77._object, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v75 + 4);
    swift_bridgeObjectRelease(v77._object);
    sub_100005AB0(v51, v68);
    sub_100005AB0(v51, v68);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "SESLegacyKeySignPrecomputedDigest signature %s", v75, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    v78 = v106;
    v79 = v95;
    v80 = v100;
  }
  else
  {

    sub_100005AB0(v51, v68);
    sub_100005AB0(v51, v68);

    v79 = v69;
    v80 = v14;
  }
  v103(v79, v80);
  return v51;
}

unint64_t sub_100007EB8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  Class isa;
  Class v42;
  id v43;
  id v44;
  id v45;
  char *v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  void *v70;
  void *v71;
  Swift::String v72;
  id v73;
  char *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v84;
  os_log_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  uint8_t *v89;
  void *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  uint64_t v99;
  id v100;

  v97 = a3;
  v12 = type metadata accessor for DIPError.Code(0);
  v92 = *(_QWORD *)(v12 - 8);
  v93 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v96 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v88 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v95 = (char *)&v84 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v84 - v21;
  defaultLogger()(v20);
  sub_100005A38(a1, a2);
  sub_100005A38(a4, a5);
  v90 = a6;
  v23 = a6;
  sub_100005A38(a1, a2);
  sub_100005A38(a4, a5);
  v98 = v23;
  v24 = Logger.logObject.getter(v98);
  v25 = static os_log_type_t.debug.getter();
  LODWORD(v89) = v25;
  v26 = os_log_type_enabled(v24, v25);
  v94 = v15;
  v87 = v6;
  if (v26)
  {
    v27 = swift_slowAlloc(42, -1);
    v91 = v14;
    v28 = v27;
    v86 = (void *)swift_slowAlloc(96, -1);
    v100 = v86;
    *(_DWORD *)v28 = 136315906;
    v85 = v24;
    v29 = Data.base16EncodedString()();
    v99 = sub_10003FA80(v29._countAndFlagsBits, (unint64_t)v29._object, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v28 + 4);
    swift_bridgeObjectRelease(v29._object);
    sub_100005AB0(a1, a2);
    sub_100005AB0(a1, a2);
    *(_WORD *)(v28 + 12) = 2050;
    v99 = (uint64_t)v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v28 + 14);
    *(_WORD *)(v28 + 22) = 2080;
    v30 = Data.base16EncodedString()();
    v99 = sub_10003FA80(v30._countAndFlagsBits, (unint64_t)v30._object, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v28 + 24);
    swift_bridgeObjectRelease(v30._object);
    sub_100005AB0(a4, a5);
    sub_100005AB0(a4, a5);
    *(_WORD *)(v28 + 32) = 2080;
    v99 = (uint64_t)v90;
    v31 = sub_100008E84(&qword_100174778);
    v32 = Optional.debugDescription.getter(v31);
    v34 = v33;
    v99 = sub_10003FA80(v32, v33, (uint64_t *)&v100);
    v15 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v28 + 34);
    v35 = v98;

    swift_bridgeObjectRelease(v34);
    v36 = v85;
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v89, "SELegacyKeystore signDigestSidv digest = %s, keySlot = %{public}ld, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v28, 0x2Au);
    v37 = v86;
    swift_arrayDestroy(v86, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v28;
    v14 = v91;
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    sub_100005AB0(a1, a2);
    sub_100005AB0(a1, a2);
    sub_100005AB0(a4, a5);
    sub_100005AB0(a4, a5);

    v36 = v98;
  }

  v96 = *(_QWORD *)(v96 + 8);
  ((void (*)(char *, uint64_t))v96)(v22, v15);
  v39 = objc_allocWithZone((Class)NSNumber);
  v40 = objc_msgSend(v39, "initWithInteger:", v97);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v42 = Data._bridgeToObjectiveC()().super.isa;
  v100 = 0;
  v43 = (id)SESLegacyKeySignPrecomputedWithIDV(v98, isa, v40, v42, &v100);

  v44 = v100;
  if (v100)
  {
    v98 = v40;
    v45 = v100;
    v46 = v95;
    defaultLogger()(v45);
    v47 = v45;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = (void *)swift_slowAlloc(32, -1);
      v100 = v90;
      v97 = v43;
      *(_DWORD *)v50 = 136446210;
      v89 = v50 + 4;
      v51 = objc_msgSend(v47, "debugDescription");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v91 = v14;
      v54 = v53;

      v99 = sub_10003FA80(v52, v54, (uint64_t *)&v100);
      v43 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v89);

      v55 = v54;
      v14 = v91;
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error from SESLegacyKeySignPrecomputedWithIDV: %{public}s", v50, 0xCu);
      v56 = v90;
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v58 = v94;
      v57 = v95;
    }
    else
    {

      v57 = v46;
      v58 = v15;
    }
    ((void (*)(char *, uint64_t))v96)(v57, v58);
    (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v14, enum case for DIPError.Code.sesLegacyKeySignError(_:), v93);
    v76 = v47;
    v61 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v77 = type metadata accessor for DIPError(0);
    v78 = sub_10000745C();
    swift_allocError(v77, v78, 0, 0);
    v79 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x800000010012DAC0, v44, v14, 0, v61, 0xD000000000000053, 0x800000010012D850, 0xD000000000000041, 0x800000010012DA70, 200);
    swift_willThrow(v79);

    goto LABEL_12;
  }
  if (!v43)
  {
    v98 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v14, enum case for DIPError.Code.sesLegacyKeySignError(_:), v93);
    v61 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v80 = type metadata accessor for DIPError(0);
    v81 = sub_10000745C();
    swift_allocError(v80, v81, 0, 0);
    v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x800000010012DA20, 0, v14, 0, v61, 0xD000000000000053, 0x800000010012D850, 0xD000000000000041, 0x800000010012DA70, 203);
    swift_willThrow(v82);
LABEL_12:

    return v61;
  }
  v59 = v43;
  v60 = objc_msgSend(v59, "signature");
  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v63 = v62;

  v64 = v88;
  defaultLogger()(v65);
  sub_100005A38(v61, v63);
  v66 = sub_100005A38(v61, v63);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v98 = v40;
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = (void *)swift_slowAlloc(32, -1);
    v97 = v59;
    v71 = v70;
    v100 = v70;
    *(_DWORD *)v69 = 136315138;
    v72 = Data.base16EncodedString()();
    v99 = sub_10003FA80(v72._countAndFlagsBits, (unint64_t)v72._object, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v69 + 4);
    swift_bridgeObjectRelease(v72._object);
    sub_100005AB0(v61, v63);
    sub_100005AB0(v61, v63);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "SESLegacyKeySignPrecomputedWithIDV signature %s", v69, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v69, -1, -1);

    v73 = v97;
    v74 = v88;
    v75 = v94;
  }
  else
  {

    sub_100005AB0(v61, v63);
    sub_100005AB0(v61, v63);

    v74 = v64;
    v75 = v15;
  }
  ((void (*)(char *, uint64_t))v96)(v74, v75);
  return v61;
}

void sub_100008854(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  id v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint8_t *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  __chkstk_darwin(v7);
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v53 - v9;
  v60 = v1;
  v61 = v11;
  if (a1)
  {
    v12 = (char *)&v53 - v9;
    v63 = 0;
    v13 = a1;
    v14 = (id)SESLegacyKeyGetOccupiedSlotsWithListenerEndpoint();
    v15 = v63;
    if (v14)
    {
      v16 = v14;
      v17 = sub_100008E48();
      v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
      v19 = v15;

      v10 = v12;
      if (!v19)
        goto LABEL_14;
    }
    else
    {
      v19 = v63;

      v18 = 0;
      if (!v19)
        goto LABEL_14;
    }
  }
  else
  {
    v63 = 0;
    v20 = (id)SESLegacyKeyGetOccupiedSlots(&v63);
    v21 = v63;
    if (v20)
    {
      v22 = v20;
      v23 = sub_100008E48();
      v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);
      v19 = v21;

      if (!v19)
      {
LABEL_14:
        if (!v18)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.sesLegacyKeyGetOccupiedSlotsError(_:), v3);
          v48 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v49 = type metadata accessor for DIPError(0);
          v50 = sub_10000745C();
          swift_allocError(v49, v50, 0, 0);
          v51 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000040, 0x800000010012D8B0, 0, v6, 0, v48, 0xD000000000000053, 0x800000010012D850, 0xD000000000000023, 0x800000010012D900, 233);
          swift_willThrow(v51);
          return;
        }
        v63 = &_swiftEmptySetSingleton;
        if ((unint64_t)v18 >> 62)
        {
          if (v18 >= 0)
            v52 = v18 & 0xFFFFFFFFFFFFFF8;
          else
            v52 = v18;
          swift_bridgeObjectRetain(v18);
          v44 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(v18);
          if (v44)
            goto LABEL_17;
        }
        else
        {
          v44 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v44)
          {
LABEL_17:
            if (v44 < 1)
              __break(1u);
            for (i = 0; i != v44; ++i)
            {
              if ((v18 & 0xC000000000000001) != 0)
                v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
              else
                v46 = *(id *)(v18 + 8 * i + 32);
              v47 = v46;
              sub_100005D28(&v62, (uint64_t)objc_msgSend(v46, "integerValue"));

            }
          }
        }
        swift_bridgeObjectRelease(v18);
        return;
      }
    }
    else
    {
      v19 = v63;
      v18 = 0;
      if (!v19)
        goto LABEL_14;
    }
  }
  v58 = v7;
  v59 = v4;
  v60 = v19;
  v24 = v19;
  v25 = swift_bridgeObjectRelease(v18);
  defaultLogger()(v25);
  v26 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = (void *)swift_slowAlloc(32, -1);
    v63 = v56;
    v57 = v10;
    *(_DWORD *)v29 = 136446210;
    v54 = v29 + 4;
    v55 = v29;
    v30 = v6;
    v31 = objc_msgSend(v26, "debugDescription");
    v32 = v3;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

    v6 = v30;
    v36 = v33;
    v3 = v32;
    v62 = sub_10003FA80(v36, v35, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v54);

    swift_bridgeObjectRelease(v35);
    v37 = v55;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error from SESLegacyKeyGetOccupiedSlots: %{public}s", v55, 0xCu);
    v38 = v56;
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v57, v58);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v58);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v6, enum case for DIPError.Code.sesLegacyKeyGetOccupiedSlotsError(_:), v3);
  v39 = v26;
  v40 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v41 = type metadata accessor for DIPError(0);
  v42 = sub_10000745C();
  swift_allocError(v41, v42, 0, 0);
  v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x800000010012D930, v60, v6, 0, v40, 0xD000000000000053, 0x800000010012D850, 0xD000000000000023, 0x800000010012D900, 230);
  swift_willThrow(v43);

}

unint64_t sub_100008E48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100174760;
  if (!qword_100174760)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100174760);
  }
  return result;
}

uint64_t sub_100008E84(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100008EC4()
{
  os_unfair_lock_s *v0;
  uint64_t *v1;
  os_unfair_lock_s *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[7];

  if (qword_1001743C0 != -1)
    swift_once(&qword_1001743C0, sub_10001647C);
  v0 = *(os_unfair_lock_s **)(qword_100178CB0 + 16);
  v1 = (uint64_t *)&v0[4];
  v2 = v0 + 18;
  os_unfair_lock_lock(v0 + 18);
  sub_1000164DC(v1, v13);
  os_unfair_lock_unlock(v2);
  v3 = (uint64_t (*)(uint64_t))v13[1];
  v4 = v13[2];
  v5 = v13[3];
  v6 = v13[4];
  v7 = v13[5];
  v8 = v13[6];
  swift_release(v13[0]);
  sub_100008FC0(v5, v6);
  v9 = sub_100008FC0(v7, v8);
  if (v3)
  {
    v10 = v3(v9);
    sub_100008FC0((uint64_t)v3, v4);
    return v10;
  }
  else
  {
    v12 = type metadata accessor for SELegacyKeystore();
    return swift_allocObject(v12, 16, 7);
  }
}

uint64_t sub_100008FC0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100008FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100009038, 0, 0);
}

uint64_t sub_100009038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[9];
  v2 = v0[5];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)swift_allocObject(&unk_100167850, 40, 7);
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v1, v6, v7);
  v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v3);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[11] = v9;
  *v9 = v0;
  v9[1] = sub_100009118;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0[2], v0[9], sub_1000093C8, v5, v0[5]);
}

uint64_t sub_100009118()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v6 = *(_QWORD *)(*v1 + 56);
  v7 = *v1;
  *(_QWORD *)(v7 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    return swift_task_switch(sub_1000091C4, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v7 + 72));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000091C4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000091F8()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v5;
  id v6;

  v1 = *(void **)(v0 + 16);
  v6 = 0;
  v2 = objc_msgSend(v1, "save:", &v6);
  v3 = v6;
  if (v2)
    return v6;
  v5 = v6;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow();
}

uint64_t sub_10000929C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for IDCSAsyncDataContext()
{
  return objc_opt_self(_TtC7idcredd20IDCSAsyncDataContext);
}

uint64_t sub_1000092E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10017482C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10000935C;
  return sub_100008FD0(a1, a2, a3, a4);
}

uint64_t sub_10000935C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000093A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000093C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

void *sub_1000093E8(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v4 = v3;
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)sub_10011A590(a1, a2);
  if (!v3)
  {
    v4 = v11;
    if (!v11)
    {
      v38 = 0;
      v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v39);
      v38 = 0xD000000000000019;
      v39 = 0x800000010012DB40;
      v18._countAndFlagsBits = a1;
      v18._object = a2;
      String.append(_:)(v18);
      v4 = (void *)v38;
      v19 = v39;
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.idcsUnknownCredential(_:), v7);
      v20 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v21 = type metadata accessor for DIPError(0);
      v22 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v21, v22, 0, 0);
      v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v4, v19, 0, v10, 0, v20, 0xD00000000000005DLL, 0x800000010012DB60, 0xD000000000000032, 0x800000010012DBC0, 26);
      swift_willThrow(v23);
      return v4;
    }
    v13 = objc_msgSend(v11, "partition");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      if (byte_100178C90 == 1 && (sub_1000097C4(42, 0xE100000000000000, *(_QWORD *)(v2 + 16)) & 1) != 0)
      {
        swift_bridgeObjectRelease(v17);
        return v4;
      }
      v24 = sub_1000097C4(v15, v17, *(_QWORD *)(v2 + 16));
      swift_bridgeObjectRelease(v17);
      if ((v24 & 1) != 0)
        return v4;
    }
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v39);
    v38 = 0x6F69746974726170;
    v39 = 0xEA0000000000206ELL;
    v25 = objc_msgSend(v4, "partition");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v28;

    }
    else
    {
      v29 = (void *)0xE500000000000000;
      v27 = 0x3E6C696E3CLL;
    }
    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v29);
    v31._countAndFlagsBits = 0xD000000000000023;
    v31._object = (void *)0x800000010012DC00;
    String.append(_:)(v31);
    v32 = v38;
    v33 = v39;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v7);
    v34 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v35, v36, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v32, v33, 0, v10, 0, v34, 0xD00000000000005DLL, 0x800000010012DB60, 0xD000000000000032, 0x800000010012DBC0, 29);
    swift_willThrow(v37);

  }
  return v4;
}

uint64_t sub_1000097C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v18, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_1000098F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000099C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  unint64_t j;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[9];

  if (byte_100178C90 == 1 && (sub_1000097C4(42, 0xE100000000000000, *(_QWORD *)(v1 + 16)) & 1) != 0)
    return 1;
  v3 = a1[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v4 + 16))
    {
      v29 = a1;
      v30 = a1 + 4;
      v6 = a1[4];
      v5 = (_QWORD *)a1[5];
      v7 = v4 + 56;
      swift_bridgeObjectRetain(a1);
      for (i = 1; ; ++i)
      {
        swift_bridgeObjectRetain(v5);
        Hasher.init(_seed:)(v31, *(_QWORD *)(v4 + 40));
        String.hash(into:)(v31, v6, v5);
        v9 = Hasher._finalize()();
        v10 = -1 << *(_BYTE *)(v4 + 32);
        v11 = v9 & ~v10;
        if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          goto LABEL_29;
        v12 = *(_QWORD *)(v4 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = (_QWORD *)v13[1];
        v15 = *v13 == v6 && v14 == v5;
        if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v6, v5, 0) & 1) == 0)
        {
          v16 = ~v10;
          v17 = (v11 + 1) & ~v10;
          if (((*(_QWORD *)(v7 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
            goto LABEL_29;
          v18 = (_QWORD *)(v12 + 16 * v17);
          v19 = (_QWORD *)v18[1];
          v20 = *v18 == v6 && v19 == v5;
          if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v6, v5, 0) & 1) == 0)
          {
            for (j = v17 + 1; ; j = v23 + 1)
            {
              v23 = j & v16;
              if (((*(_QWORD *)(v7 + (((j & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v16)) & 1) == 0)
                break;
              v24 = (_QWORD *)(v12 + 16 * v23);
              v25 = (_QWORD *)v24[1];
              v26 = *v24 == v6 && v25 == v5;
              if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v6, v5, 0) & 1) != 0)
                goto LABEL_18;
            }
LABEL_29:
            swift_bridgeObjectRelease(v29);
            v27 = v5;
            goto LABEL_33;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease(v5);
        if (i == v3)
        {
          swift_bridgeObjectRelease(v29);
          return 1;
        }
        if (!*(_QWORD *)(v4 + 16))
          break;
        v21 = &v30[2 * i];
        v6 = *v21;
        v5 = (_QWORD *)v21[1];
      }
      v27 = v29;
LABEL_33:
      swift_bridgeObjectRelease(v27);
    }
  }
  return 0;
}

uint64_t sub_100009BC0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend(a1, "state");
  if (result < 0)
  {
    v11 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v11, 3451, 0);
    __break(1u);
  }
  else if (result != 2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsIncorrectCredentialState(_:), v2);
    v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v8, v9, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010012DC30, 0, v5, 0, v7, 0xD00000000000005DLL, 0x800000010012DB60, 0xD00000000000001FLL, 0x800000010012DC60, 37);
    return swift_willThrow(v10);
  }
  return result;
}

uint64_t sub_100009D80(Swift::UInt a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v4 = sub_100008E84(&qword_100174830);
  inited = swift_initStackObject(v4, &v13);
  *(_OWORD *)(inited + 16) = xmmword_10012A5D0;
  *(_QWORD *)(inited + 32) = 2;
  *(_QWORD *)(inited + 40) = &off_100166EC0;
  *(_QWORD *)(inited + 48) = 3;
  *(_QWORD *)(inited + 56) = &off_100166EF0;
  v6 = sub_10004005C((_QWORD *)inited);
  swift_setDeallocating(inited);
  v7 = sub_100008E84(&qword_100174838);
  swift_arrayDestroy(inited + 32, 2, v7);
  if (*(_QWORD *)(v6 + 16) && (v8 = sub_1000FBABC(a1), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v6);
    v11 = sub_1000D9BD0(a2, v10);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v11 = 0;
  }
  return v11 & 1;
}

unint64_t sub_100009E8C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t);
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  char v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  char *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;

  v107 = a2;
  v106 = a3;
  v3 = type metadata accessor for DIPError.Code(0);
  v100 = *(_QWORD *)(v3 - 8);
  v101 = v3;
  __chkstk_darwin(v3);
  v105 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_100174840);
  __chkstk_darwin(v5);
  v104 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CredentialKeyUsage(0);
  v102 = *(_QWORD *)(v7 - 8);
  v103 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v96 - v11;
  v113 = type metadata accessor for Logger(0);
  v108 = *(_QWORD *)(v113 - 8);
  v13 = __chkstk_darwin(v113);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v96 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v96 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v96 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v96 - v25;
  v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v28._countAndFlagsBits = 0xD00000000000001ELL;
  v28._object = (void *)0x800000010012DCD0;
  v29 = NSUserDefaults.internalBool(forKey:)(v28);

  if (v29)
  {
    v31 = defaultLogger()(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Treating payload as accessible due to internal defaults setting", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    goto LABEL_12;
  }
  v35 = v24;
  v98 = v21;
  v99 = v10;
  v36 = v102;
  v37 = v103;
  v38 = (uint64_t)v104;
  v97 = v18;
  v40 = v105;
  v39 = v106;
  v41 = v107;
  v42 = sub_10011A138((unint64_t)v107);
  if ((v42 & 1) == 0)
  {
    v26 = v35;
    v52 = defaultLogger()(v42);
    v32 = Logger.logObject.getter(v52);
    v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v32, v53))
    {
LABEL_12:

      (*(void (**)(char *, uint64_t))(v108 + 8))(v26, v113);
      LOBYTE(v61) = 1;
      return v61 & 1;
    }
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v106 = v26;
    v56 = v55;
    v111 = v55;
    *(_DWORD *)v54 = 136315138;
    v57 = (id)DCCredentialPayloadFormatToString(v41);
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v109 = sub_10003FA80(v58, v60, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v54 + 4);
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v32, v53, "Payload format %s does not require decryption, can proceed with processing", v54, 0xCu);
    LOBYTE(v61) = 1;
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v54, -1, -1);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v113);
    return v61 & 1;
  }
  if (!v39)
  {
    v63 = v15;
    v64 = defaultLogger()(v42);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Decryption key required but not available, can't proceed with processing", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v108 + 8))(v63, v113);
    v111 = 0;
    v112 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v112);
    v111 = 0xD000000000000014;
    v112 = 0x800000010012DCF0;
    v68 = (id)DCCredentialPayloadFormatToString(v41);
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v71 = v70;

    v72._countAndFlagsBits = v69;
    v72._object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(v71);
    v73 = v111;
    v74 = v112;
    (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v40, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v101);
    v61 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v75, v76, 0, 0);
    v77 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v73, v74, 0, v40, 0, v61, 0xD00000000000005DLL, 0x800000010012DB60, 0xD000000000000042, 0x800000010012DD10, 115);
    swift_willThrow(v77);
    return v61 & 1;
  }
  v107 = v39;
  v43 = objc_msgSend(v107, "usage");
  v44 = v37;
  v45 = v36;
  v46 = v12;
  if (!v43)
    goto LABEL_9;
  v47 = v43;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v50 = v49;

  CredentialKeyUsage.init(rawValue:)(v48, v50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v38, 1, v44) == 1)
  {
    sub_10000A764(v38);
LABEL_9:
    v51 = *(void (**)(char *, _QWORD, uint64_t))(v45 + 104);
    v51(v46, enum case for CredentialKeyUsage.invalid(_:), v44);
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v46, v38, v44);
  v51 = *(void (**)(char *, _QWORD, uint64_t))(v45 + 104);
LABEL_18:
  v78 = v99;
  v51(v99, enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:), v44);
  v79 = sub_1000058C8(&qword_100174848, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialKeyUsage, (uint64_t)&protocol conformance descriptor for CredentialKeyUsage);
  dispatch thunk of RawRepresentable.rawValue.getter(&v111, v44, v79);
  dispatch thunk of RawRepresentable.rawValue.getter(&v109, v44, v79);
  v80 = v112;
  v81 = v110;
  if (v111 == v109 && v112 == v110)
  {
    swift_bridgeObjectRelease_n(v112, 2);
    v82 = *(void (**)(char *, uint64_t))(v45 + 8);
    v82(v78, v44);
    v83 = ((uint64_t (*)(char *, uint64_t))v82)(v46, v44);
LABEL_22:
    v86 = v98;
    v87 = defaultLogger()(v83);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Credential decryption key requires auth, can't proceed with processing", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v108 + 8))(v86, v113);
    LOBYTE(v61) = 0;
    return v61 & 1;
  }
  v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, v109, v110, 0);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v81);
  v85 = *(void (**)(char *, uint64_t))(v45 + 8);
  v85(v78, v44);
  v83 = ((uint64_t (*)(char *, uint64_t))v85)(v46, v44);
  if ((v84 & 1) != 0)
    goto LABEL_22;
  v91 = v97;
  v92 = defaultLogger()(v83);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Credential decryption key does not require auth, can proceed with processing", v95, 2u);
    swift_slowDealloc(v95, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v113);
  LOBYTE(v61) = 1;
  return v61 & 1;
}

uint64_t sub_10000A764(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_100174840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10000A7A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD v13[13];
  uint64_t v14;

  v4 = type metadata accessor for Logger(0);
  v13[11] = *(_QWORD *)(v4 - 8);
  v13[12] = v4;
  v5 = __chkstk_darwin(v4);
  v13[2] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v13[6] = (char *)v13 - v8;
  __chkstk_darwin(v7);
  v13[1] = (char *)v13 - v9;
  v10 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v10);
  v14 = type metadata accessor for SHA256Digest(0);
  v13[9] = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v11 = sub_1000C4E40();
  sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v10);
  v12 = (char *)&loc_10000A91C + dword_10000B154[a3 >> 62];
  v13[10] = v11;
  __asm { BR              X10 }
}

uint64_t sub_10000A930()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;

  *(_QWORD *)(v8 - 120) = v1;
  *(_WORD *)(v8 - 112) = v0;
  *(_BYTE *)(v8 - 110) = BYTE2(v0);
  *(_BYTE *)(v8 - 109) = BYTE3(v0);
  *(_BYTE *)(v8 - 108) = BYTE4(v0);
  *(_BYTE *)(v8 - 107) = BYTE5(v0);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 120, v8 - 120 + BYTE6(v0), v4, v2);
  sub_100005AB0(v1, v0);
  v9 = *(_QWORD *)(v8 - 136);
  v10 = *(_QWORD *)(v8 - 168);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v4, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  v11 = sub_1000058C8(&qword_100174858, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v12 = ((uint64_t (*)(uint64_t, uint64_t))Digest.data.getter)(v9, v11);
  v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v9);
  if ((unint64_t)v5 >> 62)
  {
LABEL_23:
    if (v5 < 0)
      v56 = v5;
    else
      v56 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v16 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease(v5);
    v17 = *(_QWORD *)(v8 - 192);
    if (v16)
      goto LABEL_3;
  }
  else
  {
    v16 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)(v8 - 192);
    if (v16)
    {
LABEL_3:
      *(_QWORD *)(v8 - 168) = v5 & 0xC000000000000001;
      v18 = 4;
      *(_QWORD *)&v15 = 136315394;
      *(_OWORD *)(v8 - 208) = v15;
      *(_QWORD *)(v8 - 216) = (char *)&type metadata for Any + 8;
      *(_QWORD *)(v8 - 184) = v16;
      *(_QWORD *)(v8 - 176) = v14;
      do
      {
        if (*(_QWORD *)(v8 - 168))
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v5);
        else
          v19 = *(id *)(v5 + 8 * v18);
        v20 = v19;
        v21 = v18 - 3;
        if (__OFADD__(v18 - 4, 1))
        {
          __break(1u);
          goto LABEL_23;
        }
        v22 = objc_msgSend(v19, "ingestionHash");
        *(_QWORD *)(v8 - 136) = v20;
        if (v22)
        {
          v23 = v22;
          v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v26 = v25;

          sub_100005A38(v24, v26);
          sub_100005A38(v12, v14);
          sub_1001044DC(v24, v26);
          LOBYTE(v23) = v27;
          sub_100005AB0(v12, v14);
          v28 = sub_100005AB0(v24, v26);
          if ((v23 & 1) != 0)
          {
            v43 = swift_bridgeObjectRelease(v5);
            v44 = *(_QWORD *)(v8 - 232);
            defaultLogger()(v43);
            sub_100005A38(v24, v26);
            v45 = sub_100005A38(v24, v26);
            v46 = Logger.logObject.getter(v45);
            v47 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v46, v47))
            {
              v49 = (uint8_t *)swift_slowAlloc(12, -1);
              v50 = swift_slowAlloc(32, -1);
              *(_QWORD *)(v8 - 104) = v50;
              *(_DWORD *)v49 = 136315138;
              *(_QWORD *)(v8 - 160) = v49 + 4;
              *(Swift::String *)(v8 - 120) = Data.base16EncodedString()();
              v51 = sub_100008E84(&qword_100174860);
              v52 = ((uint64_t (*)(uint64_t, uint64_t))String.init<A>(describing:))(v8 - 120, v51);
              v54 = v53;
              *(_QWORD *)(v8 - 120) = sub_10003FA80(v52, v53, (uint64_t *)(v8 - 104));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 120, v8 - 112, *(_QWORD *)(v8 - 160));
              swift_bridgeObjectRelease(v54);
              sub_100005AB0(v24, v26);
              sub_100005AB0(v24, v26);
              _os_log_impl((void *)&_mh_execute_header, v46, v47, "doesPayloadDataMatchIngestionHash -> new payload hash matches stored payload hash %s", v49, 0xCu);
              v55 = 1;
              ((void (*)(uint64_t, uint64_t, char *))swift_arrayDestroy)(v50, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v50, -1, -1);
              swift_slowDealloc(v49, -1, -1);

              sub_100005AB0(v24, v26);
              sub_100005AB0(v12, *(_QWORD *)(v8 - 176));
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v44, *(_QWORD *)(v8 - 144));
            }
            else
            {
              sub_100005AB0(v12, v14);
              sub_100005AB0(v24, v26);
              sub_100005AB0(v24, v26);
              sub_100005AB0(v24, v26);

              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v44, *(_QWORD *)(v8 - 144));
              return 1;
            }
            return v55;
          }
        }
        else
        {
          sub_100005A38(v12, v14);
          v26 = 0xF000000000000000;
          sub_10000B164(0, 0xF000000000000000);
          v28 = sub_10000B164(v12, v14);
          v24 = 0;
        }
        defaultLogger()(v28);
        sub_100005A38(v12, v14);
        sub_10000B178(v24, v26);
        sub_100005A38(v12, v14);
        v29 = sub_10000B178(v24, v26);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = swift_slowAlloc(22, -1);
          v33 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v8 - 104) = v33;
          *(_DWORD *)v32 = *(_OWORD *)(v8 - 208);
          v34 = Data.base16EncodedString()();
          *(_QWORD *)(v32 + 4) = sub_10003FA80(v34._countAndFlagsBits, (unint64_t)v34._object, (uint64_t *)(v8 - 104));
          v35 = *(_QWORD *)(v8 - 176);
          swift_bridgeObjectRelease(v34._object);
          sub_100005AB0(v12, v35);
          sub_100005AB0(v12, v35);
          *(_WORD *)(v32 + 12) = 2080;
          if (v26 >> 60 == 15)
          {
            countAndFlagsBits = 0;
            object = 0;
          }
          else
          {
            v38 = Data.base16EncodedString()();
            object = v38._object;
            countAndFlagsBits = v38._countAndFlagsBits;
          }
          *(_QWORD *)(v8 - 120) = countAndFlagsBits;
          *(_QWORD *)(v8 - 112) = object;
          v39 = sub_100008E84(&qword_100174860);
          v40 = ((uint64_t (*)(uint64_t, uint64_t))String.init<A>(describing:))(v8 - 120, v39);
          v42 = v41;
          *(_QWORD *)(v32 + 14) = sub_10003FA80(v40, v41, (uint64_t *)(v8 - 104));
          swift_bridgeObjectRelease(v42);
          sub_10000B164(v24, v26);
          sub_10000B164(v24, v26);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "doesPayloadDataMatchIngestionHash -> new payload hash %s does not match stored payload hash %s", (uint8_t *)v32, 0x16u);
          ((void (*)(uint64_t, uint64_t, _QWORD))swift_arrayDestroy)(v33, 2, *(_QWORD *)(v8 - 216));
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v32, -1, -1);

          sub_10000B164(v24, v26);
          v17 = *(_QWORD *)(v8 - 192);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v17, *(_QWORD *)(v8 - 144));
          v14 = *(_QWORD *)(v8 - 176);
        }
        else
        {
          sub_10000B164(v24, v26);

          sub_100005AB0(v12, v14);
          sub_100005AB0(v12, v14);
          sub_10000B164(v24, v26);
          sub_10000B164(v24, v26);

          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v17, *(_QWORD *)(v8 - 144));
        }
        v5 = *(_QWORD *)(v8 - 160);
        ++v18;
      }
      while (v21 != *(_QWORD *)(v8 - 184));
    }
  }
  v57 = swift_bridgeObjectRelease(v5);
  v58 = *(_QWORD *)(v8 - 224);
  v59 = defaultLogger()(v57);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "doesPayloadDataMatchIngestionHash -> the new payload hash does not match any of stored payload hash.", v62, 2u);
    swift_slowDealloc(v62, -1, -1);

    sub_100005AB0(v12, v14);
  }
  else
  {
    sub_100005AB0(v12, v14);

  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v58, *(_QWORD *)(v8 - 144));
  return 0;
}

uint64_t sub_10000B164(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100005AB0(a1, a2);
  return a1;
}

uint64_t sub_10000B178(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100005A38(result, a2);
  return result;
}

uint64_t sub_10000B18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint8_t *v77;
  unint64_t v78;
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v7 = type metadata accessor for DIPError(0);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v104 = (char *)v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v105 = *(_QWORD *)(v9 - 8);
  v106 = v9;
  __chkstk_darwin(v9);
  v107 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SHA256(0);
  v111 = *(_QWORD *)(v11 - 8);
  v112 = v11;
  __chkstk_darwin(v11);
  v114 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SHA256Digest(0);
  v109 = *(_QWORD *)(v13 - 8);
  v110 = v13;
  __chkstk_darwin(v13);
  v108 = (char *)v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v113 = (char *)v90 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)v90 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)v90 - v26;
  v28 = __chkstk_darwin(v25);
  v33 = (char *)v90 - v32;
  if (a4 == 1)
  {
    v99 = v31;
    v102 = v30;
    v95 = v29;
    v41 = defaultLogger()(v28);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "CredentialDecryptionKeyFinder finding ECv3 key", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v38 = *(void (**)(char *, uint64_t))(v16 + 8);
    v38(v27, v15);
    v39 = sub_10000C834(a2, a3);
    goto LABEL_9;
  }
  if (a4 == 2)
  {
    v99 = v31;
    v102 = v30;
    v95 = v29;
    v34 = defaultLogger()(v28);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "CredentialDecryptionKeyFinder finding HPKE key", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = *(void (**)(char *, uint64_t))(v16 + 8);
    v38(v33, v15);
    v39 = (unint64_t)sub_10000C2D0(a2, a3);
LABEL_9:
    v45 = v39;
    v46 = v40;
    v47 = (uint64_t)sub_1000C4FBC();
    v63 = v47;
    v90[0] = v7;
    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0)
        v89 = v47;
      else
        v89 = v47 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v47);
      v64 = _CocoaArrayWrapper.endIndex.getter(v89);
      swift_bridgeObjectRelease(v63);
    }
    else
    {
      v64 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v98 = v45;
    if (v64)
    {
      v97 = v63 & 0xC000000000000001;
      *(_QWORD *)&v48 = 136315394;
      v91 = v48;
      v90[1] = (char *)&type metadata for Any + 8;
      v96 = v15;
      v94 = v46;
      v93 = v63;
      v92 = v64;
      if ((v63 & 0xC000000000000001) != 0)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v63);
      else
        v65 = *(id *)(v63 + 32);
      v66 = v65;
      v67 = objc_msgSend(v65, "publicKey");
      if (v67)
      {
        v68 = v67;
        v100 = 1;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v70 = v69;

        sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
        dispatch thunk of HashFunction.init()(v112);
        v71 = (char *)&loc_10000B86C + *((int *)qword_10000C2C0 + (v70 >> 62));
        v101 = v66;
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease(v63);
      v83 = v107;
      (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v107, enum case for DIPError.Code.invalidStoredData(_:), v106);
      v84 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v85 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v86 = v90[0];
      v87 = swift_allocError(v90[0], v85, 0, 0);
      v88 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010012DE30, 0, v83, 0, v84, 0xD000000000000060, 0x800000010012DD60, 0xD000000000000029, 0x800000010012DDD0, 56);
      swift_willThrow(v88);
      sub_100005AB0(v45, v46);

      v49 = v103;
      v50 = v107;
      (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v107, enum case for DIPError.Code.internalError(_:), v106);
      swift_errorRetain(v87);
      v51 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v52 = v104;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v87, v50, 0, v51, 0xD000000000000060, 0x800000010012DD60, 0xD000000000000029, 0x800000010012DDD0, 76);
      v53 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v54 = swift_allocError(v86, v53, 0, 0);
      v56 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 16))(v55, v52, v86);
      v57 = v102;
      defaultLogger()(v56);
      DIPLogError(_:message:log:)(v54, 0xD000000000000022, 0x800000010012DE00, v57);
      swift_errorRelease(v87);
      v38(v57, v15);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v86);
      swift_errorRelease(v54);
    }
    else
    {
      v72 = swift_bridgeObjectRelease(v63);
      v73 = v99;
      defaultLogger()(v72);
      sub_100005A38(v45, v46);
      v74 = sub_100005A38(v45, v46);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v75, (os_log_type_t)v76))
      {
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v78 = v46;
        v79 = swift_slowAlloc(32, -1);
        v117 = v79;
        v99 = v73;
        *(_DWORD *)v77 = 136315138;
        v80 = Data.base16EncodedString()();
        v115 = sub_10003FA80(v80._countAndFlagsBits, (unint64_t)v80._object, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v77 + 4);
        swift_bridgeObjectRelease(v80._object);
        v81 = v98;
        sub_100005AB0(v98, v78);
        sub_100005AB0(v81, v78);
        _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v76, "CredentialDecryptionKeyFinder could not find key with matching HPKE fingerprint %s)", v77, 0xCu);
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v77, -1, -1);

        sub_100005AB0(v81, v78);
        v82 = v99;
      }
      else
      {
        sub_100005AB0(v45, v46);
        sub_100005AB0(v45, v46);
        sub_100005AB0(v45, v46);

        v82 = v73;
      }
      v38(v82, v15);
    }
    return 0;
  }
  v58 = defaultLogger()(v28);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "CredentialDecryptionKeyFinder payload does not require a decryption key; skipping key search",
      v61,
      2u);
    swift_slowDealloc(v61, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
  return 0;
}

char *sub_10000C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (**v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  Swift::String v42;
  uint8_t *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a2;
  v47 = a1;
  v45 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v46 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash(0);
  v9 = *(uint64_t (***)(char *, char *, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for JSONDecoder(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v17 = JSONDecoder.init()(v16);
  v18 = sub_1000058C8(&qword_100174868, (uint64_t (*)(uint64_t))&type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash, (uint64_t)&protocol conformance descriptor for HPKEEnvelopeEncryptedMessagePKRHash);
  v19 = v48;
  v48 = v8;
  v20 = v49;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v8, v47, v19, v8, v18);
  if (v20)
  {
    swift_release(v17);
    v21 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v46, enum case for DIPError.Code.jsonDecodingFailed(_:), v45);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000042, 0x800000010012DE50, 0, v21, 0, v22, 0xD000000000000060, 0x800000010012DD60, 0xD00000000000001BLL, 0x800000010012DEA0, 99);
    swift_willThrow(v25);
    swift_errorRelease(v20);
  }
  else
  {
    v47 = v5;
    v49 = v4;
    swift_release(v17);
    v26 = v9[4](v14, v12, v48);
    v27 = HPKEEnvelopeEncryptedMessagePKRHash.pkRHash.getter(v26);
    v29 = v14;
    if (v28 >> 60 == 15)
    {
      v12 = v46;
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v46, enum case for DIPError.Code.hpkeFailureMissingPkRHash(_:), v45);
      v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010012DEC0, 0, v12, 0, v30, 0xD000000000000060, 0x800000010012DD60, 0xD00000000000001BLL, 0x800000010012DEA0, 103);
      swift_willThrow(v33);
      ((void (*)(char *, uint64_t))v9[1])(v29, v48);
    }
    else
    {
      v12 = (char *)v27;
      v35 = v28;
      v46 = (char *)v9;
      defaultLogger()(v27);
      sub_100005A38((uint64_t)v12, v35);
      v36 = sub_100005A38((uint64_t)v12, v35);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(12, -1);
        v45 = (uint64_t)v14;
        v40 = (uint8_t *)v39;
        v41 = swift_slowAlloc(32, -1);
        v52 = v41;
        v44 = v7;
        *(_DWORD *)v40 = 136315138;
        v43 = v40 + 4;
        v42 = Data.base16EncodedString()();
        v50 = sub_10003FA80(v42._countAndFlagsBits, (unint64_t)v42._object, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v43);
        swift_bridgeObjectRelease(v42._object);
        sub_10000B164((uint64_t)v12, v35);
        sub_10000B164((uint64_t)v12, v35);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "HPKE payload containers pkRHash %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v49);
        (*((void (**)(uint64_t, uint64_t))v46 + 1))(v45, v48);
      }
      else
      {

        sub_10000B164((uint64_t)v12, v35);
        sub_10000B164((uint64_t)v12, v35);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v49);
        (*((void (**)(char *, uint64_t))v46 + 1))(v14, v48);
      }
    }
  }
  return v12;
}

unint64_t sub_10000C834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, _QWORD, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v66 = a1;
  v67 = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v65 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v64 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5);
  v63 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyAgreementParams(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EncryptionParams(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EncryptedDataContainerParamsOnly(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  v20 = type metadata accessor for JSONDecoder(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = JSONDecoder.init()(v21);
  v23 = sub_1000058C8(&qword_100174870, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedDataContainerParamsOnly, (uint64_t)&protocol conformance descriptor for EncryptedDataContainerParamsOnly);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v13, v66, v67, v13, v23);
  if (v2)
  {
    swift_release(v22);
    v24 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for DIPError.Code.jsonDecodingFailed(_:), v3);
    swift_errorRetain(v2);
    v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010012DF00, v2, v24, 0, v25, 0xD000000000000060, 0x800000010012DD60, 0xD00000000000001BLL, 0x800000010012DF20, 116);
    swift_willThrow(v28);
    swift_errorRelease(v2);
  }
  else
  {
    v55 = 0;
    v67 = v3;
    swift_release(v22);
    v66 = v14;
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v19, v17, v13);
    v56 = v19;
    v30 = EncryptedDataContainerParamsOnly.params.getter(v29);
    EncryptionParams.keyAgreement.getter(v30);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v12, v58);
    v32 = KeyAgreementParams.recipientFingerprint.getter(v31);
    v34 = v33;
    v35 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v9, v60);
    defaultLogger()(v35);
    v36 = swift_bridgeObjectRetain_n(v34, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = v65;
    if (v39)
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v60 = v13;
      v43 = v42;
      v70 = v42;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain(v34);
      v68 = sub_10003FA80(v32, v34, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v41 + 4);
      swift_bridgeObjectRelease_n(v34, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "ECv3 payload contains recipient fingerprint %s", v41, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      v13 = v60;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v34, 2);
    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
    v44 = v67;
    v25 = Data.init(base64Encoded:options:)(v32, v34, 0);
    v46 = v45;
    swift_bridgeObjectRelease(v34);
    v47 = v66;
    v48 = v56;
    if (v46 >> 60 == 15)
    {
      v49 = *(void (**)(char *, _QWORD, uint64_t))(v40 + 104);
      v50 = v64;
      v49(v64, enum case for DIPError.Code.jsonDecodingFailed(_:), v44);
      v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v51 = type metadata accessor for DIPError(0);
      v52 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v51, v52, 0, 0);
      v53 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012DF40, 0, v50, 0, v25, 0xD000000000000060, 0x800000010012DD60, 0xD00000000000001BLL, 0x800000010012DF20, 123);
      swift_willThrow(v53);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v13);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v13);
    }
  }
  return v25;
}

uint64_t sub_10000CE40(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for CredentialDecryptionKeyFinder(_QWORD *a1, _QWORD *a2)
{
  sub_10000CEBC(a1, a2);
  return a1;
}

_QWORD *sub_10000CEBC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CredentialDecryptionKeyFinder(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  sub_10000CE40((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialDecryptionKeyFinder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialDecryptionKeyFinder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialDecryptionKeyFinder()
{
  return &type metadata for CredentialDecryptionKeyFinder;
}

ValueMetadata *type metadata accessor for CredentialDecryptionKeyIdentifierProvider()
{
  return &type metadata for CredentialDecryptionKeyIdentifierProvider;
}

uint64_t sub_10000D120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v15;
  int v17;
  void (*v18)(char *, uint64_t);
  int v19;
  uint64_t v20;

  v4 = sub_100008E84((uint64_t *)&unk_100177B40);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v20 - v12;
  DIPError.Code.init(rawValue:)(a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000D63C((uint64_t)v6);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v15 == enum case for DIPError.Code.missingEntitlement(_:))
    goto LABEL_7;
  if (v15 == enum case for DIPError.Code.invalidStoredData(_:))
    goto LABEL_15;
  if (v15 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5002;
  }
  if (v15 == enum case for DIPError.Code.idcsInvalidPayload(_:)
    || v15 == enum case for DIPError.Code.idcsMissingPresentmentKey(_:))
  {
    goto LABEL_15;
  }
  if (v15 == enum case for DIPError.Code.idcsPreconditionNotMet(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5003;
  }
  if (v15 == enum case for DIPError.Code.idcsInvalidPresentmentKey(_:))
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5004;
  }
  else if (v15 == enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionEstablishment(_:)
         || v15 == enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:)
         || v15 == enum case for DIPError.Code.idcsInvalidReaderRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5101;
  }
  else if (v15 == enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:)
         || v15 == enum case for DIPError.Code.idcsPresentmentRequestDecryptionFailed(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5103;
  }
  else if (v15 == enum case for DIPError.Code.idcsUnsupportedReaderRequestVersion(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5102;
  }
  else if (v15 == enum case for DIPError.Code.idcsMissingReaderAuth(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5104;
  }
  else if (v15 == enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:)
         || v15 == enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:)
         || v15 == enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:)
         || v15 == enum case for DIPError.Code.idcsMissingReaderCommonName(_:)
         || v15 == enum case for DIPError.Code.idcsMissingReaderOrganization(_:)
         || v15 == enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:)
         || v15 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
         || v15 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5105;
  }
  else if (v15 == enum case for DIPError.Code.idcsInvalidPresentmentSelection(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5106;
  }
  else
  {
    v17 = enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:);
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19 = v15;
    v18(v13, v7);
    if (v19 != v17)
    {
      v18(v11, v7);
      return -5000;
    }
    return -5107;
  }
}

uint64_t sub_10000D63C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84((uint64_t *)&unk_100177B40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000D67C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Class isa;
  void *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  unint64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPSignpost(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersForPublicKeyIdentifier.getter(v5);
  DIPSignpost.init(_:)(v2);
  v8 = type metadata accessor for StoredCryptoKey(0);
  v9 = static StoredCryptoKey.fetchRequest()();
  sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v10 = sub_100008E84(&qword_100174878);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10012A6D0;
  v12 = (void *)v9;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v11 + 56) = sub_10000DA34(0, &qword_100174880, NSData_ptr);
  *(_QWORD *)(v11 + 64) = sub_10000DA6C();
  *(_QWORD *)(v11 + 32) = isa;
  v14 = (void *)NSPredicate.init(format:_:)(0xD000000000000018, 0x800000010012E080, v11);
  objc_msgSend(v12, "setPredicate:", v14);

  v15 = v43;
  result = NSManagedObjectContext.fetch<A>(_:)(v12, v8);
  if (v15)
  {

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return (uint64_t)v7;
  }
  v17 = result;
  v38 = v12;
  v39 = v7;
  v40 = v4;
  v41 = v3;
  if (!((unint64_t)result >> 62))
  {
    v18 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v37 = 0;
    if (v18)
      goto LABEL_5;
LABEL_22:
    v7 = (char *)_swiftEmptyArrayStorage;
LABEL_23:

    swift_bridgeObjectRelease(v17);
    v36 = v39;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v41);
    return (uint64_t)v7;
  }
  if (result < 0)
    v35 = result;
  else
    v35 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v18 = _CocoaArrayWrapper.endIndex.getter(v35);
  result = swift_bridgeObjectRelease(v17);
  v37 = 0;
  if (!v18)
    goto LABEL_22;
LABEL_5:
  if (v18 >= 1)
  {
    v19 = 0;
    v20 = v17 & 0xC000000000000001;
    v7 = (char *)_swiftEmptyArrayStorage;
    v21 = &selRef_generateDeviceEncryptionKeyForCredential_completion_;
    v43 = v17;
    v42 = v18;
    do
    {
      if (v20)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      else
        v23 = *(id *)(v17 + 8 * v19 + 32);
      v24 = v23;
      v25 = objc_msgSend(v23, v21[40], v37, v38);
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend(v25, "credentialIdentifier");

        if (v27)
        {
          v28 = v20;
          v29 = v21;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v32 = v31;

          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
            v7 = sub_1000A73AC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
          v34 = *((_QWORD *)v7 + 2);
          v33 = *((_QWORD *)v7 + 3);
          if (v34 >= v33 >> 1)
            v7 = sub_1000A73AC((char *)(v33 > 1), v34 + 1, 1, v7);
          *((_QWORD *)v7 + 2) = v34 + 1;
          v22 = &v7[16 * v34];
          *((_QWORD *)v22 + 4) = v30;
          *((_QWORD *)v22 + 5) = v32;
          v17 = v43;
          v21 = v29;
          v20 = v28;
          v18 = v42;
        }
      }
      ++v19;

    }
    while (v18 != v19);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000DA34(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10000DA6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100174888;
  if (!qword_100174888)
  {
    v1 = sub_10000DA34(255, &qword_100174880, NSData_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100174888);
  }
  return result;
}

uint64_t sub_10000DAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;

  v3 = type metadata accessor for StoredCryptoKey(0);
  v4 = (void *)static StoredCryptoKey.fetchRequest()();
  sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v5 = sub_100008E84(&qword_100174878);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10012A5D0;
  v7 = CredentialKeyType.rawValue.getter();
  v9 = v8;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v10 = sub_10000EA3C();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  *(_QWORD *)(v6 + 96) = &type metadata for UInt;
  *(_QWORD *)(v6 + 104) = &protocol witness table for UInt;
  *(_QWORD *)(v6 + 64) = v10;
  *(_QWORD *)(v6 + 72) = a2;
  v11 = (void *)NSPredicate.init(format:_:)(0xD000000000000040, 0x800000010012E150, v6);
  objc_msgSend(v4, "setPredicate:", v11);

  v12 = NSManagedObjectContext.fetch<A>(_:)(v4, v3);
  return v12;
}

uint64_t sub_10000DC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  Class isa;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v0 = type metadata accessor for CredentialKeyType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllInactivePresentmentKeys.getter(v8);
  v45 = v10;
  DIPSignpost.init(_:)(v6);
  v44 = type metadata accessor for StoredCryptoKey(0);
  v43 = static StoredCryptoKey.fetchRequest()();
  v42 = sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v11 = sub_100008E84(&qword_100174878);
  v12 = swift_allocObject(v11, 72, 7);
  v41 = xmmword_10012A6D0;
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v14 = v13(v3, enum case for CredentialKeyType.legacySE(_:), v0);
  v15 = CredentialKeyType.rawValue.getter(v14);
  v17 = v16;
  v40 = *(void (**)(char *, uint64_t))(v1 + 8);
  v40(v3, v0);
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v18 = sub_10000EA3C();
  *(_QWORD *)(v12 + 64) = v18;
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  v19 = (void *)NSPredicate.init(format:_:)(0xD00000000000001ELL, 0x800000010012E1E0, v12);
  v20 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v20 + 16) = v41;
  v21 = v13(v3, enum case for CredentialKeyType.ses(_:), v0);
  v22 = CredentialKeyType.rawValue.getter(v21);
  v24 = v23;
  v40(v3, v0);
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = v18;
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  v25 = (void *)NSPredicate.init(format:_:)(0xD00000000000001ELL, 0x800000010012E1E0, v20);
  v26 = sub_100008E84(&qword_1001748A8);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10012A6E0;
  *(_QWORD *)(v27 + 32) = v19;
  *(_QWORD *)(v27 + 40) = v25;
  v48 = v27;
  specialized Array._endMutation()(v27);
  v28 = v48;
  v29 = objc_allocWithZone((Class)NSCompoundPredicate);
  v30 = v19;
  v31 = v25;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  v33 = v29;
  v34 = (void *)v43;
  v35 = objc_msgSend(v33, "initWithType:subpredicates:", 2, isa);

  objc_msgSend(v34, "setPredicate:", v35);
  v36 = NSManagedObjectContext.fetch<A>(_:)(v34, v44);

  v37 = v45;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v47);
  return v36;
}

uint64_t sub_10000DF7C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v33 = type metadata accessor for CredentialKeyType(0);
  v0 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v2 = (char *)v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CredentialKeyUsage(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllInactiveDeviceEncryptionKeys.getter(v11);
  v34 = v13;
  DIPSignpost.init(_:)(v9);
  v32 = type metadata accessor for StoredCryptoKey(0);
  v14 = (void *)static StoredCryptoKey.fetchRequest()();
  v31[1] = sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v15 = sub_100008E84(&qword_100174878);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10012A5D0;
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for CredentialKeyUsage.deviceEncryption(_:), v3);
  v18 = CredentialKeyUsage.rawValue.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10000EA3C();
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  v22 = v33;
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for CredentialKeyType.sep(_:), v33);
  v24 = CredentialKeyType.rawValue.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v22);
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 72) = v24;
  *(_QWORD *)(v16 + 80) = v26;
  v27 = (void *)NSPredicate.init(format:_:)(0xD00000000000001BLL, 0x800000010012E1A0, v16);
  objc_msgSend(v14, "setPredicate:", v27);

  v28 = NSManagedObjectContext.fetch<A>(_:)(v14, v32);
  v29 = v34;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v29, v36);
  return v28;
}

uint64_t sub_10000E244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t i;
  id v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v0 = type metadata accessor for CredentialKeyType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost(0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllSEKeySlots.getter(v8);
  DIPSignpost.init(_:)(v6);
  v35 = type metadata accessor for StoredCryptoKey(0);
  v11 = (void *)static StoredCryptoKey.fetchRequest()();
  v12 = sub_100008E84(&qword_1001748A0);
  v13 = swift_allocObject(v12, 64, 7);
  v34 = xmmword_10012A6D0;
  *(_OWORD *)(v13 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 32) = 0x746F6C5379656BLL;
  *(_QWORD *)(v13 + 40) = 0xE700000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v11, "setPropertiesToFetch:", isa);

  sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v15 = sub_100008E84(&qword_100174878);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = v34;
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for CredentialKeyType.legacySE(_:), v0);
  v18 = CredentialKeyType.rawValue.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10000EA3C();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  v21 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x800000010012E1C0, v16);
  objc_msgSend(v11, "setPredicate:", v21);

  v22 = v36;
  result = NSManagedObjectContext.fetch<A>(_:)(v11, v35);
  if (v22)
  {

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
    return (uint64_t)v10;
  }
  v24 = result;
  v36 = v10;
  v40 = (char *)&_swiftEmptySetSingleton;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v33 = result;
    else
      v33 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v25 = _CocoaArrayWrapper.endIndex.getter(v33);
    result = swift_bridgeObjectRelease(v24);
  }
  else
  {
    v25 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v27 = v37;
  v26 = v38;
  v28 = v36;
  if (!v25)
  {

    swift_bridgeObjectRelease(v24);
    v10 = (char *)&_swiftEmptySetSingleton;
LABEL_14:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v26);
    return (uint64_t)v10;
  }
  if (v25 >= 1)
  {
    v29 = v11;
    for (i = 0; i != v25; ++i)
    {
      if ((v24 & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
      else
        v31 = *(id *)(v24 + 8 * i + 32);
      v32 = v31;
      sub_100005D28(&v39, (uint64_t)objc_msgSend(v31, "keySlot"));

    }
    swift_bridgeObjectRelease(v24);
    v10 = v40;
    v27 = v37;
    v26 = v38;
    v28 = v36;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000E618(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[3];
  char v44[8];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v41 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredCryptoKey(0);
  v8 = (void *)static StoredCryptoKey.fetchRequest()();
  objc_msgSend(v8, "setFetchLimit:", 1);
  sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v9 = sub_100008E84(&qword_100174878);
  v10 = swift_allocObject(v9, 72, 7);
  v40 = xmmword_10012A6D0;
  *(_OWORD *)(v10 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10000EA3C();
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0x696669746E656469, 0xEF4025203D207265, v10);
  objc_msgSend(v8, "setPredicate:", v11);

  result = NSManagedObjectContext.fetch<A>(_:)(v8, v7);
  if (v2)
  {

    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v13._object = (void *)0x800000010012E0A0;
    v13._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1;
    v14._object = a2;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 8250;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    v47 = v2;
    v16 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v47, &v45, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v17 = v45;
    v18 = v46;
    v19 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v42, enum case for DIPError.Code.coreDataError(_:), v41);
    v20 = sub_100008E84((uint64_t *)&unk_100178A30);
    v21 = sub_100008E84(&qword_100174898);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(_QWORD *)(v22 + 72);
    v24 = *(unsigned __int8 *)(v22 + 80);
    v25 = (v24 + 32) & ~v24;
    v26 = swift_allocObject(v20, v25 + v23, v24 | 7);
    *(_OWORD *)(v26 + 16) = v40;
    v27 = (uint64_t *)(v26 + v25 + *(int *)(v21 + 48));
    v28 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v29 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v26 + v25, v28, v29);
    swift_getErrorValue(v2, v44, v43);
    v30 = v43[1];
    v31 = v43[2];
    swift_errorRetain(v2);
    v32 = dispatch thunk of Error._code.getter(v30, v31);
    v27[3] = (uint64_t)&type metadata for Int;
    *v27 = v32;
    v33 = sub_10003E0A8(v26);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_10000745C();
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v17, v18, v2, v19, 0, v33, 0xD000000000000069, 0x800000010012E0C0, 0xD00000000000001BLL, 0x800000010012E130, 108);
    swift_willThrow(v36);
    swift_errorRelease(v2);
    return v34;
  }
  v37 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v39 = result;
    else
      v39 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v34 = _CocoaArrayWrapper.endIndex.getter(v39);
    result = swift_bridgeObjectRelease(v37);
    if (!v34)
      goto LABEL_9;
  }
  else
  {
    v34 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
    {
LABEL_9:

      swift_bridgeObjectRelease(v37);
      return v34;
    }
  }
  if ((v37 & 0xC000000000000001) != 0)
  {
    v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v38 = *(id *)(v37 + 32);
LABEL_8:
    v34 = (uint64_t)v38;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_10000EA3C()
{
  unint64_t result;

  result = qword_100178A20;
  if (!qword_100178A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100178A20);
  }
  return result;
}

uint64_t type metadata accessor for MockSESKeystore(uint64_t a1)
{
  return sub_1000147F0(a1, (uint64_t *)&unk_1001748D0, (uint64_t)&nominal type descriptor for MockSESKeystore);
}

uint64_t sub_10000EA94(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + qword_100178CA0);
}

BOOL sub_10000EAE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000EAF8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000EB3C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000EB64(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10000EBA4(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  char **v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char **v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  char *v45;

  v4 = v2;
  v6 = (char **)&v2[qword_1001748B8];
  swift_beginAccess(&v2[qword_1001748B8], &v43, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v45 = *v6;
  v8 = v45;
  *v6 = (char *)0x8000000000000000;
  v10 = sub_1000FBB14(0);
  v11 = *((_QWORD *)v8 + 2);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_19;
  }
  v3 = v9;
  if (*((_QWORD *)v8 + 3) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10007D518();
      v8 = v45;
    }
LABEL_7:
    v16 = *v6;
    *v6 = v8;
    swift_bridgeObjectRelease(v16);
    v8 = *v6;
    if ((v3 & 1) == 0)
      sub_10011F1C0(v10, 0, 0, *v6);
    v17 = *((_QWORD *)v8 + 7);
    v18 = *(_QWORD *)(v17 + 8 * v10);
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v1 = 0xD000000000000017;
      *(_QWORD *)(v17 + 8 * v10) = v20;
      swift_endAccess(&v43);
      v21 = &v4[qword_1001748B0];
      swift_beginAccess(&v4[qword_1001748B0], &v43, 32, 0);
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)(v22 + 16))
      {
        v23 = sub_1000FBB14(0);
        if ((v24 & 1) != 0)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
          swift_endAccess(&v43);
          v26 = sub_100008E84(&qword_1001748A0);
          v27 = swift_allocObject(v26, 64, 7);
          *(_OWORD *)(v27 + 16) = xmmword_10012A6D0;
          *(_QWORD *)(v27 + 56) = &type metadata for String;
          *(_QWORD *)(v27 + 32) = 0xD000000000000017;
          *(_QWORD *)(v27 + 40) = 0x800000010012E260;
          swift_errorRetain(v25);
          print(_:separator:terminator:)(v27, 32, 0xE100000000000000, 10, 0xE100000000000000);
          v28 = swift_bridgeObjectRelease(v27);
          swift_willThrow(v28);
          return a1;
        }
      }
      v29 = swift_endAccess(&v43);
      v10 = SecAccessControlRef.constraintsData.getter(v29);
      v3 = v30;
      a1 = randomData(numBytes:)(100);
      v6 = v31;
      v8 = &v4[qword_1001748C0];
      swift_beginAccess(&v4[qword_1001748C0], &v43, 33, 0);
      v4 = *(char **)v8;
      sub_100005A38(a1, (unint64_t)v6);
      sub_10000B178(v10, v3);
      v32 = swift_isUniquelyReferenced_nonNull_native(v4);
      *(_QWORD *)v8 = v4;
      if ((v32 & 1) != 0)
      {
LABEL_14:
        v34 = *((_QWORD *)v4 + 2);
        v33 = *((_QWORD *)v4 + 3);
        if (v34 >= v33 >> 1)
        {
          v4 = sub_1000A74B8((char *)(v33 > 1), v34 + 1, 1, v4);
          *(_QWORD *)v8 = v4;
        }
        *((_QWORD *)v4 + 2) = v34 + 1;
        v35 = &v4[32 * v34];
        *((_QWORD *)v35 + 4) = a1;
        *((_QWORD *)v35 + 5) = v6;
        *((_QWORD *)v35 + 6) = v10;
        *((_QWORD *)v35 + 7) = v3;
        swift_endAccess(&v43);
        v36 = sub_100008E84(&qword_1001748A0);
        v37 = swift_allocObject(v36, 64, 7);
        *(_OWORD *)(v37 + 16) = xmmword_10012A6D0;
        v43 = 0;
        v44 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease(v44);
        v43 = v1 + 5;
        v44 = 0x800000010012E5A0;
        v38 = Data.base16EncodedString()();
        object = v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
        v40 = v43;
        v41 = v44;
        *(_QWORD *)(v37 + 56) = &type metadata for String;
        *(_QWORD *)(v37 + 32) = v40;
        *(_QWORD *)(v37 + 40) = v41;
        print(_:separator:terminator:)(v37, 32, 0xE100000000000000, 10, 0xE100000000000000);
        swift_bridgeObjectRelease(v37);
        sub_10000B164(v10, v3);
        return a1;
      }
LABEL_20:
      v4 = sub_1000A74B8(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      *(_QWORD *)v8 = v4;
      goto LABEL_14;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10007B1C8(v13, isUniquelyReferenced_nonNull_native);
  v8 = v45;
  v14 = sub_1000FBB14(0);
  if ((v3 & 1) == (v15 & 1))
  {
    v10 = v14;
    goto LABEL_7;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
  __break(1u);
  return result;
}

uint64_t sub_10000EF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  void *object;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  Swift::String v43;
  void *v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD v58[2];
  uint64_t v59;

  v4 = v2;
  v7 = type metadata accessor for DIPError.Code(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v57 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)(v2 + qword_1001748B8);
  swift_beginAccess(v2 + qword_1001748B8, v58, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v59 = *v9;
  v11 = v59;
  *v9 = 0x8000000000000000;
  v13 = sub_1000FBB14(1u);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v12;
  if (*(_QWORD *)(v11 + 24) >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    sub_10007B1C8(v16, isUniquelyReferenced_nonNull_native);
    v11 = v59;
    v17 = sub_1000FBB14(1u);
    if ((v3 & 1) != (v18 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      return result;
    }
    v13 = v17;
  }
  while (1)
  {
    v19 = *v9;
    *v9 = v11;
    swift_bridgeObjectRelease(v19);
    v20 = *v9;
    if ((v3 & 1) == 0)
      sub_10011F1C0(v13, 1, 0, (_QWORD *)*v9);
    v21 = *(_QWORD *)(v20 + 56);
    v22 = *(_QWORD *)(v21 + 8 * v13);
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    sub_10007D518();
    v11 = v59;
  }
  *(_QWORD *)(v21 + 8 * v13) = v24;
  swift_endAccess(v58);
  v25 = (uint64_t *)(v4 + qword_1001748B0);
  swift_beginAccess(v4 + qword_1001748B0, v58, 32, 0);
  v26 = *v25;
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = sub_1000FBB14(1u);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      swift_endAccess(v58);
      v30 = sub_100008E84(&qword_1001748A0);
      v31 = swift_allocObject(v30, 64, 7);
      *(_OWORD *)(v31 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v31 + 56) = &type metadata for String;
      *(_QWORD *)(v31 + 32) = 0xD000000000000017;
      *(_QWORD *)(v31 + 40) = 0x800000010012E260;
      swift_errorRetain(v29);
      print(_:separator:terminator:)(v31, 32, 0xE100000000000000, 10, 0xE100000000000000);
      v32 = swift_bridgeObjectRelease(v31);
      return swift_willThrow(v32);
    }
  }
  swift_endAccess(v58);
  v33 = sub_100008E84(&qword_1001748A0);
  v34 = swift_allocObject(v33, 64, 7);
  *(_OWORD *)(v34 + 16) = xmmword_10012A6D0;
  *(_QWORD *)&v58[0] = 0;
  *((_QWORD *)&v58[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(*((_QWORD *)&v58[0] + 1));
  *(_QWORD *)&v58[0] = 0xD000000000000026;
  *((_QWORD *)&v58[0] + 1) = 0x800000010012E550;
  v35 = Data.base16EncodedString()();
  object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(object);
  v37 = v58[0];
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  *(_OWORD *)(v34 + 32) = v37;
  print(_:separator:terminator:)(v34, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v34);
  v38 = sub_10000F42C();
  v40 = v39;
  sub_100015168(v38, v39, v41, v42);
  if (v40 >> 60 == 15)
  {
    *(_QWORD *)&v58[0] = 0;
    *((_QWORD *)&v58[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(*((_QWORD *)&v58[0] + 1));
    *(_QWORD *)&v58[0] = 0xD00000000000002BLL;
    *((_QWORD *)&v58[0] + 1) = 0x800000010012E2E0;
    v43 = Data.base16EncodedString()();
    v44 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v44);
    v45 = v58[0];
    v46 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v57, enum case for DIPError.Code.internalError(_:), v56);
    v47 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v48 = type metadata accessor for DIPError(0);
    v49 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v48, v49, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v45, *((_QWORD *)&v45 + 1), 0, v46, 0, v47, 0xD000000000000053, 0x800000010012E310, 0xD000000000000011, 0x800000010012E580, 71);
    return swift_willThrow(v32);
  }
  v58[0] = xmmword_10012A6F0;
  Data._Representation.append(contentsOf:)(&unk_100166F40, &unk_100166F41);
  v51 = Data.subdata(in:)(0, 64, a1, a2);
  v53 = v52;
  Data.append(_:)();
  sub_100005AB0(v51, v53);
  return *(_QWORD *)&v58[0];
}

uint64_t sub_10000F42C()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  _BYTE v4[24];

  v1 = (_QWORD *)(v0 + qword_1001748C0);
  swift_beginAccess(v0 + qword_1001748C0, v4, 0, 0);
  if (*(_QWORD *)(*v1 + 16))
  {
    v2 = (char *)&loc_10000F514 + *((int *)qword_10000FE80 + (*(_QWORD *)(swift_bridgeObjectRetain(*v1) + 40) >> 62));
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_10000FEB0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[24];
  uint64_t v29;

  v2 = v0;
  v3 = (_QWORD *)(v0 + qword_1001748B8);
  swift_beginAccess(v0 + qword_1001748B8, v28, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v29 = *v3;
  v5 = v29;
  *v3 = 0x8000000000000000;
  v7 = sub_1000FBB14(2u);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = (v6 & 1) == 0;
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_14;
  }
  v1 = v6;
  if (*(_QWORD *)(v5 + 24) >= v10)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    sub_10007B1C8(v10, isUniquelyReferenced_nonNull_native);
    v5 = v29;
    v11 = sub_1000FBB14(2u);
    if ((v1 & 1) != (v12 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      return result;
    }
    v7 = v11;
  }
  while (1)
  {
    v13 = *v3;
    *v3 = v5;
    swift_bridgeObjectRelease(v13);
    v14 = *v3;
    if ((v1 & 1) == 0)
      sub_10011F1C0(v7, 2, 0, (_QWORD *)*v3);
    v15 = *(_QWORD *)(v14 + 56);
    v16 = *(_QWORD *)(v15 + 8 * v7);
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (!v17)
      break;
LABEL_14:
    __break(1u);
LABEL_15:
    sub_10007D518();
    v5 = v29;
  }
  *(_QWORD *)(v15 + 8 * v7) = v18;
  swift_endAccess(v28);
  v19 = (uint64_t *)(v2 + qword_1001748B0);
  swift_beginAccess(v2 + qword_1001748B0, v28, 32, 0);
  v20 = *v19;
  if (*(_QWORD *)(v20 + 16) && (v21 = sub_1000FBB14(2u), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_endAccess(v28);
    v24 = sub_100008E84(&qword_1001748A0);
    v25 = swift_allocObject(v24, 64, 7);
    *(_OWORD *)(v25 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 32) = 0xD000000000000017;
    *(_QWORD *)(v25 + 40) = 0x800000010012E260;
    swift_errorRetain(v23);
    print(_:separator:terminator:)(v25, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v26 = swift_bridgeObjectRelease(v25);
    return swift_willThrow(v26);
  }
  else
  {
    swift_endAccess(v28);
    return randomData(numBytes:)(20);
  }
}

uint64_t sub_1000100DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *object;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + qword_1001748B8);
  swift_beginAccess(v0 + qword_1001748B8, &v55, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v57 = *v5;
  v7 = v57;
  *v5 = 0x8000000000000000;
  v9 = sub_1000FBB14(3u);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_21;
  }
  v1 = v8;
  if (*(_QWORD *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_22;
    while (1)
    {
LABEL_6:
      v15 = *v5;
      *v5 = v7;
      swift_bridgeObjectRelease(v15);
      v16 = *v5;
      if ((v1 & 1) == 0)
        sub_10011F1C0(v9, 3, 0, (_QWORD *)*v5);
      v17 = *(_QWORD *)(v16 + 56);
      v18 = *(_QWORD *)(v17 + 8 * v9);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (!v19)
        break;
LABEL_21:
      __break(1u);
LABEL_22:
      sub_10007D518();
      v7 = v57;
    }
    v21 = 0xD00000000000002BLL;
    *(_QWORD *)(v17 + 8 * v9) = v20;
    swift_endAccess(&v55);
    v22 = (uint64_t *)(v2 + qword_1001748B0);
    swift_beginAccess(v2 + qword_1001748B0, &v55, 32, 0);
    v23 = *v22;
    if (*(_QWORD *)(v23 + 16) && (v24 = sub_1000FBB14(3u), (v25 & 1) != 0))
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_endAccess(&v55);
      v27 = sub_100008E84(&qword_1001748A0);
      v28 = swift_allocObject(v27, 64, 7);
      *(_OWORD *)(v28 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v28 + 56) = &type metadata for String;
      *(_QWORD *)(v28 + 32) = 0xD000000000000017;
      *(_QWORD *)(v28 + 40) = 0x800000010012E260;
      swift_errorRetain(v26);
      print(_:separator:terminator:)(v28, 32, 0xE100000000000000, 10, 0xE100000000000000);
      v29 = swift_bridgeObjectRelease(v28);
    }
    else
    {
      swift_endAccess(&v55);
      v30 = sub_100008E84(&qword_1001748A0);
      v31 = swift_allocObject(v30, 64, 7);
      *(_OWORD *)(v31 + 16) = xmmword_10012A6D0;
      v55 = 0;
      v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease(v56);
      v55 = 0xD00000000000002BLL;
      v56 = 0x800000010012E500;
      v32 = Data.base16EncodedString()();
      object = v32._object;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(object);
      v34 = v55;
      v35 = v56;
      *(_QWORD *)(v31 + 56) = &type metadata for String;
      *(_QWORD *)(v31 + 32) = v34;
      *(_QWORD *)(v31 + 40) = v35;
      print(_:separator:terminator:)(v31, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease(v31);
      v36 = sub_10000F42C();
      if (v37 >> 60 != 15)
      {
        v47 = v36;
        v48 = v37;
        v49 = v38;
        v50 = v39;
        if (v39 >> 60 == 15)
        {
          v21 = 0;
        }
        else
        {
          sub_10000B178(v38, v39);
          v21 = v49;
        }
        sub_100015168(v47, v48, v49, v50);
        return v21;
      }
      v55 = 0;
      v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease(v56);
      v55 = 0xD00000000000002BLL;
      v56 = 0x800000010012E2E0;
      v40 = Data.base16EncodedString()();
      v41 = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v41);
      v42 = v55;
      v43 = v56;
      v44 = v54;
      (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.internalError(_:), v53);
      v21 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v45 = type metadata accessor for DIPError(0);
      v46 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v45, v46, 0, 0);
      v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v42, v43, 0, v44, 0, v21, 0xD000000000000053, 0x800000010012E310, 0xD000000000000016, 0x800000010012E530, 96);
    }
    swift_willThrow(v29);
    return v21;
  }
  sub_10007B1C8(v12, isUniquelyReferenced_nonNull_native);
  v7 = v57;
  v13 = sub_1000FBB14(3u);
  if ((v1 & 1) == (v14 & 1))
  {
    v9 = v13;
    goto LABEL_6;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
  __break(1u);
  return result;
}

uint64_t sub_100010598()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *object;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  __chkstk_darwin(v3);
  v51 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + qword_1001748B8);
  swift_beginAccess(v0 + qword_1001748B8, &v52, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v54 = *v5;
  v7 = v54;
  *v5 = 0x8000000000000000;
  v9 = sub_1000FBB14(4u);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  v1 = v8;
  if (*(_QWORD *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    sub_10007B1C8(v12, isUniquelyReferenced_nonNull_native);
    v7 = v54;
    v13 = sub_1000FBB14(4u);
    if ((v1 & 1) != (v14 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      return result;
    }
    v9 = v13;
  }
  while (1)
  {
    v15 = *v5;
    *v5 = v7;
    swift_bridgeObjectRelease(v15);
    v16 = *v5;
    if ((v1 & 1) == 0)
      sub_10011F1C0(v9, 4, 0, (_QWORD *)*v5);
    v17 = *(_QWORD *)(v16 + 56);
    v18 = *(_QWORD *)(v17 + 8 * v9);
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    sub_10007D518();
    v7 = v54;
  }
  *(_QWORD *)(v17 + 8 * v9) = v20;
  swift_endAccess(&v52);
  v21 = (uint64_t *)(v2 + qword_1001748B0);
  swift_beginAccess(v2 + qword_1001748B0, &v52, 32, 0);
  v22 = *v21;
  if (*(_QWORD *)(v22 + 16))
  {
    v23 = sub_1000FBB14(4u);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_endAccess(&v52);
      v26 = sub_100008E84(&qword_1001748A0);
      v27 = swift_allocObject(v26, 64, 7);
      *(_OWORD *)(v27 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 32) = 0xD000000000000017;
      *(_QWORD *)(v27 + 40) = 0x800000010012E260;
      swift_errorRetain(v25);
      print(_:separator:terminator:)(v27, 32, 0xE100000000000000, 10, 0xE100000000000000);
      v28 = swift_bridgeObjectRelease(v27);
      return swift_willThrow(v28);
    }
  }
  swift_endAccess(&v52);
  v29 = sub_100008E84(&qword_1001748A0);
  v30 = swift_allocObject(v29, 64, 7);
  *(_OWORD *)(v30 + 16) = xmmword_10012A6D0;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v53);
  v52 = 0xD000000000000027;
  v53 = 0x800000010012E4A0;
  v31 = Data.base16EncodedString()();
  object = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  v33 = v52;
  v34 = v53;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 32) = v33;
  *(_QWORD *)(v30 + 40) = v34;
  print(_:separator:terminator:)(v30, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v30);
  v35 = sub_10000F42C();
  v37 = v36;
  sub_100015168(v35, v36, v38, v39);
  if (v37 >> 60 == 15)
  {
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(v53);
    v52 = 0xD00000000000002BLL;
    v53 = 0x800000010012E2E0;
    v40 = Data.base16EncodedString()();
    v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42 = v52;
    v43 = v53;
    v44 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v51, enum case for DIPError.Code.internalError(_:), v50);
    v45 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v47 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v46, v47, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v42, v43, 0, v44, 0, v45, 0xD000000000000053, 0x800000010012E310, 0xD00000000000002BLL, 0x800000010012E4D0, 111);
    return swift_willThrow(v28);
  }
  return randomData(numBytes:)(40);
}

uint64_t sub_1000109FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *object;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  Swift::String v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v4 = v2;
  v57 = a1;
  v58 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v56 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v2 + qword_1001748B8);
  swift_beginAccess(v2 + qword_1001748B8, &v59, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v61 = *v7;
  v9 = v61;
  *v7 = 0x8000000000000000;
  v11 = sub_1000FBB14(5u);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v10;
  if (*(_QWORD *)(v9 + 24) >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    sub_10007B1C8(v14, isUniquelyReferenced_nonNull_native);
    v9 = v61;
    v15 = sub_1000FBB14(5u);
    if ((v3 & 1) != (v16 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      return result;
    }
    v11 = v15;
  }
  while (1)
  {
    v17 = *v7;
    *v7 = v9;
    swift_bridgeObjectRelease(v17);
    v18 = *v7;
    if ((v3 & 1) == 0)
      sub_10011F1C0(v11, 5, 0, (_QWORD *)*v7);
    v19 = *(_QWORD *)(v18 + 56);
    v20 = *(_QWORD *)(v19 + 8 * v11);
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    sub_10007D518();
    v9 = v61;
  }
  *(_QWORD *)(v19 + 8 * v11) = v22;
  swift_endAccess(&v59);
  v23 = (uint64_t *)(v4 + qword_1001748B0);
  swift_beginAccess(v4 + qword_1001748B0, &v59, 32, 0);
  v24 = *v23;
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = sub_1000FBB14(5u);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_endAccess(&v59);
      v28 = sub_100008E84(&qword_1001748A0);
      v29 = swift_allocObject(v28, 64, 7);
      *(_OWORD *)(v29 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 32) = 0xD000000000000017;
      *(_QWORD *)(v29 + 40) = 0x800000010012E260;
      swift_errorRetain(v27);
      print(_:separator:terminator:)(v29, 32, 0xE100000000000000, 10, 0xE100000000000000);
      v30 = swift_bridgeObjectRelease(v29);
      return swift_willThrow(v30);
    }
  }
  swift_endAccess(&v59);
  v31 = sub_100008E84(&qword_1001748A0);
  v32 = swift_allocObject(v31, 64, 7);
  *(_OWORD *)(v32 + 16) = xmmword_10012A6D0;
  v59 = 0;
  v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v60);
  v59 = 0xD00000000000001FLL;
  v60 = 0x800000010012E430;
  v33 = Data.base16EncodedString()();
  object = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(object);
  v35._countAndFlagsBits = 0x206874697720;
  v35._object = (void *)0xE600000000000000;
  String.append(_:)(v35);
  v36 = Data.base16EncodedString()();
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38 = v59;
  v39 = v60;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 32) = v38;
  *(_QWORD *)(v32 + 40) = v39;
  print(_:separator:terminator:)(v32, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v32);
  v40 = sub_10000F42C();
  v42 = v41;
  sub_100015168(v40, v41, v43, v44);
  if (v42 >> 60 == 15)
  {
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(v60);
    v59 = 0xD00000000000002BLL;
    v60 = 0x800000010012E2E0;
    v45 = Data.base16EncodedString()();
    v46 = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v46);
    v47 = v59;
    v48 = v60;
    v49 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v56, enum case for DIPError.Code.internalError(_:), v55);
    v50 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v51 = type metadata accessor for DIPError(0);
    v52 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v51, v52, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v47, v48, 0, v49, 0, v50, 0xD000000000000053, 0x800000010012E310, 0xD00000000000004ALL, 0x800000010012E450, 128);
    return swift_willThrow(v30);
  }
  return randomData(numBytes:)(8);
}

uint64_t sub_100010E94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t __s1;
  unint64_t v36;
  _QWORD v37[3];

  v1 = v0;
  v2 = (_QWORD *)(v0 + qword_1001748B8);
  swift_beginAccess(v0 + qword_1001748B8, &__s1, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v37[0] = *v2;
  v4 = v37[0];
  *v2 = 0x8000000000000000;
  v6 = sub_1000FBB14(6u);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = (v5 & 1) == 0;
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_17;
  }
  v10 = v5;
  if (*(_QWORD *)(v4 + 24) >= v9)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10007D518();
      v4 = v37[0];
    }
  }
  else
  {
    sub_10007B1C8(v9, isUniquelyReferenced_nonNull_native);
    v4 = v37[0];
    v11 = sub_1000FBB14(6u);
    if ((v10 & 1) != (v12 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      JUMPOUT(0x100011AECLL);
    }
    v6 = v11;
  }
  v13 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v13);
  v14 = *v2;
  if ((v10 & 1) == 0)
    sub_10011F1C0(v6, 6, 0, (_QWORD *)*v2);
  v15 = *(_QWORD *)(v14 + 56);
  v16 = *(_QWORD *)(v15 + 8 * v6);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x100011A3CLL);
  }
  *(_QWORD *)(v15 + 8 * v6) = v18;
  swift_endAccess(&__s1);
  v19 = (uint64_t *)(v1 + qword_1001748B0);
  swift_beginAccess(v1 + qword_1001748B0, &__s1, 32, 0);
  v20 = *v19;
  if (*(_QWORD *)(v20 + 16) && (v21 = sub_1000FBB14(6u), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_endAccess(&__s1);
    v24 = sub_100008E84(&qword_1001748A0);
    v25 = swift_allocObject(v24, 64, 7);
    *(_OWORD *)(v25 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 32) = 0xD000000000000017;
    *(_QWORD *)(v25 + 40) = 0x800000010012E260;
    swift_errorRetain(v23);
    print(_:separator:terminator:)(v25, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v26 = swift_bridgeObjectRelease(v25);
    return swift_willThrow(v26);
  }
  else
  {
    swift_endAccess(&__s1);
    v28 = sub_100008E84(&qword_1001748A0);
    v29 = swift_allocObject(v28, 64, 7);
    *(_OWORD *)(v29 + 16) = xmmword_10012A6D0;
    __s1 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v36);
    __s1 = 0xD00000000000001DLL;
    v36 = 0x800000010012E410;
    v30 = Data.base16EncodedString()();
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32 = __s1;
    v33 = v36;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 32) = v32;
    *(_QWORD *)(v29 + 40) = v33;
    print(_:separator:terminator:)(v29, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v29);
    v34 = v1 + qword_1001748C0;
    result = swift_beginAccess(v34, v37, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v34 + 16))
      __asm { BR              X8 }
  }
  return result;
}

void *sub_100011B1C@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char **v2;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  void *result;
  char v14;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100014D64((uint64_t)v5);
  v6 = *((_QWORD *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[32 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v10 = *((_OWORD *)v7 + 3);
    v8 = v7 + 32;
    v11 = v6 - 1;
    *a2 = v9;
    a2[1] = v10;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = memmove(v8, v8 + 32, 32 * v12);
      *((_QWORD *)v5 + 2) = v11;
      *v2 = v5;
      return result;
    }
  }
  v14 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100011BF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  Swift::String v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  _QWORD v62[5];
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *__s1;
  unint64_t v82;
  uint64_t v83;

  v4 = v3;
  v76 = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v79 = *(_QWORD *)(v7 - 8);
  v80 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)(v3 + qword_1001748B8);
  swift_beginAccess(v3 + qword_1001748B8, &__s1, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v83 = *v10;
  v12 = v83;
  *v10 = 0x8000000000000000;
  v14 = sub_1000FBB14(7u);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (*(_QWORD *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10007D518();
      v12 = v83;
    }
  }
  else
  {
    sub_10007B1C8(v17, isUniquelyReferenced_nonNull_native);
    v12 = v83;
    v19 = sub_1000FBB14(7u);
    if ((v18 & 1) != (v20 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      JUMPOUT(0x100012BD4);
    }
    v14 = v19;
  }
  v21 = *v10;
  *v10 = v12;
  swift_bridgeObjectRelease(v21);
  v22 = *v10;
  if ((v18 & 1) == 0)
    sub_10011F1C0(v14, 7, 0, (_QWORD *)*v10);
  v23 = *(_QWORD *)(v22 + 56);
  v24 = *(_QWORD *)(v23 + 8 * v14);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
LABEL_26:
    __break(1u);
    JUMPOUT(0x100012B10);
  }
  *(_QWORD *)(v23 + 8 * v14) = v26;
  swift_endAccess(&__s1);
  v27 = (uint64_t *)(v4 + qword_1001748B0);
  swift_beginAccess(v4 + qword_1001748B0, &__s1, 32, 0);
  v28 = *v27;
  if (!*(_QWORD *)(v28 + 16) || (v29 = sub_1000FBB14(7u), (v30 & 1) == 0))
  {
    v78 = a3;
    swift_endAccess(&__s1);
    v34 = sub_100008E84(&qword_1001748A0);
    v35 = swift_allocObject(v34, 64, 7);
    *(_OWORD *)(v35 + 16) = xmmword_10012A6D0;
    __s1 = 0;
    v82 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v82);
    __s1 = (char *)0xD000000000000023;
    v82 = 0x800000010012E2B0;
    v36 = v76;
    v37 = Data.base16EncodedString()();
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39 = (uint64_t)__s1;
    v40 = v82;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 32) = v39;
    *(_QWORD *)(v35 + 40) = v40;
    print(_:separator:terminator:)(v35, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v35);
    v41 = sub_10000F42C();
    if (v42 >> 60 == 15)
    {
      __s1 = 0;
      v82 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease(v82);
      __s1 = (char *)0xD00000000000002BLL;
      v82 = 0x800000010012E2E0;
      v45 = Data.base16EncodedString()();
      v46 = v45._object;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(v46);
      v47 = (uint64_t)__s1;
      v48 = v82;
      (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v9, enum case for DIPError.Code.internalError(_:), v80);
      v49 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v50 = type metadata accessor for DIPError(0);
      v51 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v50, v51, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v47, v48, 0, v9, 0, v49, 0xD000000000000053, 0x800000010012E310, 0xD000000000000026, 0x800000010012E370, 156);
      goto LABEL_15;
    }
    v52 = v41;
    v53 = v42;
    v63 = v44;
    v64 = v43;
    sub_100005A38(v41, v42);
    v54 = randomData(numBytes:)(5);
    v56 = v55;
    __s1 = (char *)v52;
    v82 = v53;
    sub_100005A38(v52, v53);
    sub_100014E08(v54, v56);
    sub_100005AB0(v54, v56);
    v66 = v52;
    v65 = v53;
    sub_100005AB0(v52, v53);
    v70 = __s1;
    v69 = v82;
    v57 = sub_100005A38((uint64_t)__s1, v82);
    v68 = SecAccessControlRef.constraintsData.getter(v57);
    v67 = v58;
    v59 = v4 + qword_1001748C0;
    swift_beginAccess(v4 + qword_1001748C0, &v83, 0, 0);
    v78 = *(_QWORD *)(*(_QWORD *)v59 + 16);
    if (!v78)
    {
      v9 = v70;
      sub_100005AB0((uint64_t)v70, v69);
      sub_10000B164(v68, v67);
      sub_100015168(v66, v65, v64, v63);
      return v9;
    }
    v80 = a2 >> 62;
    v62[4] = HIDWORD(v36);
    v60 = __OFSUB__(HIDWORD(v36), (_DWORD)v36);
    v73 = v60;
    v72 = HIDWORD(v36) - (int)v36;
    v79 = BYTE6(a2);
    v75 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    v71 = (int)v36;
    v62[3] = v36 >> 32;
    v62[2] = (v36 >> 32) - (int)v36;
    v74 = a2;
    v77 = v59;
    if (*(_QWORD *)(*(_QWORD *)v59 + 16))
      __asm { BR              X8 }
    __break(1u);
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
  swift_endAccess(&__s1);
  v32 = sub_100008E84(&qword_1001748A0);
  v9 = (char *)swift_allocObject(v32, 64, 7);
  *((_OWORD *)v9 + 1) = xmmword_10012A6D0;
  *((_QWORD *)v9 + 7) = &type metadata for String;
  *((_QWORD *)v9 + 4) = 0xD000000000000017;
  *((_QWORD *)v9 + 5) = 0x800000010012E260;
  swift_errorRetain(v31);
  print(_:separator:terminator:)(v9, 32, 0xE100000000000000, 10, 0xE100000000000000);
  v33 = swift_bridgeObjectRelease(v9);
LABEL_15:
  swift_willThrow(v33);
  return v9;
}

uint64_t sub_100012C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  void *object;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD v53[6];
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;

  v67 = a3;
  v68 = a2;
  v65 = a1;
  v6 = sub_100008E84(&qword_1001749C0);
  __chkstk_darwin(v6);
  v56 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  v53[4] = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v57 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v53[3] = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v53[5] = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for SESKeystore.DesignatedKey(0);
  v55 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v63 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SHA256(0);
  v58 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v61 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SHA256Digest(0);
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v3;
  v16 = (_QWORD *)(v3 + qword_1001748B8);
  swift_beginAccess(v3 + qword_1001748B8, &v71, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v70 = *v16;
  v18 = v70;
  *v16 = 0x8000000000000000;
  v20 = sub_1000FBB14(8u);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = v19;
  if (*(_QWORD *)(v18 + 24) >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    sub_10007B1C8(v23, isUniquelyReferenced_nonNull_native);
    v18 = v70;
    v24 = sub_1000FBB14(8u);
    if ((v5 & 1) != (v25 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      JUMPOUT(0x1000134F8);
    }
    v20 = v24;
  }
  while (1)
  {
    v26 = v68;
    v27 = v69;
    v28 = *v16;
    *v16 = v18;
    swift_bridgeObjectRelease(v28);
    v29 = *v16;
    if ((v5 & 1) == 0)
      sub_10011F1C0(v20, 8, 0, (_QWORD *)*v16);
    v30 = *(_QWORD *)(v29 + 56);
    v31 = *(_QWORD *)(v30 + 8 * v20);
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (!v32)
      break;
LABEL_16:
    __break(1u);
LABEL_17:
    sub_10007D518();
    v18 = v70;
  }
  *(_QWORD *)(v30 + 8 * v20) = v33;
  swift_endAccess(&v71);
  v34 = (uint64_t *)(v27 + qword_1001748B0);
  swift_beginAccess(v27 + qword_1001748B0, &v71, 32, 0);
  v35 = *v34;
  if (*(_QWORD *)(v35 + 16) && (v36 = sub_1000FBB14(8u), (v37 & 1) != 0))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36);
    swift_endAccess(&v71);
    v39 = sub_100008E84(&qword_1001748A0);
    v40 = swift_allocObject(v39, 64, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 32) = 0xD000000000000017;
    *(_QWORD *)(v40 + 40) = 0x800000010012E260;
    swift_errorRetain(v38);
    print(_:separator:terminator:)(v40, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v41 = swift_bridgeObjectRelease(v40);
    return swift_willThrow(v41);
  }
  else
  {
    v53[2] = v15;
    swift_endAccess(&v71);
    v43 = sub_100008E84(&qword_1001748A0);
    v44 = swift_allocObject(v43, 64, 7);
    *(_OWORD *)(v44 + 16) = xmmword_10012A6D0;
    v71 = 0;
    v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(v72);
    v71 = 0xD00000000000002ELL;
    v72 = 0x800000010012E280;
    v45 = sub_1000058C8(qword_1001749C8, (uint64_t (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v66, v45);
    object = v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(object);
    v48 = v71;
    v49 = v72;
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    *(_QWORD *)(v44 + 32) = v48;
    *(_QWORD *)(v44 + 40) = v49;
    print(_:separator:terminator:)(v44, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v44);
    result = sub_10000EF7C(v65, v26);
    v62 = result;
    if (!v4)
    {
      v51 = v50;
      sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
      dispatch thunk of HashFunction.init()(v11);
      v52 = (char *)&loc_1000130CC + dword_10001350C[v51 >> 62];
      v53[1] = v51;
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t sub_10001352C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_100008E84(&qword_1001749C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_1000150E8(a1, &qword_1001749C0);
    sub_1001255D0(a2, (uint64_t)v8);
    v13 = type metadata accessor for SESKeystore.KeyDesignation(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_1000150E8((uint64_t)v8, &qword_1001749C0);
  }
  else
  {
    sub_100015124(a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_10011F9E8((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for SESKeystore.KeyDesignation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_1000136A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;

  v59 = a1;
  v4 = sub_100008E84(&qword_1001749C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v58 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v1;
  v12 = (uint64_t *)(v1 + qword_1001748B8);
  swift_beginAccess(v1 + qword_1001748B8, v61, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  v62 = *v12;
  v14 = v62;
  *v12 = 0x8000000000000000;
  v16 = sub_1000FBB14(9u);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v15;
  if (*(_QWORD *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    sub_10007B1C8(v19, isUniquelyReferenced_nonNull_native);
    v14 = v62;
    v20 = sub_1000FBB14(9u);
    if ((v3 & 1) != (v21 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
      __break(1u);
      return result;
    }
    v16 = v20;
  }
  while (1)
  {
    v22 = *v12;
    *v12 = v14;
    swift_bridgeObjectRelease(v22);
    v23 = *v12;
    if ((v3 & 1) == 0)
      sub_10011F1C0(v16, 9, 0, (_QWORD *)*v12);
    v24 = *(_QWORD *)(v23 + 56);
    v25 = *(_QWORD *)(v24 + 8 * v16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    sub_10007D518();
    v14 = v62;
  }
  *(_QWORD *)(v24 + 8 * v16) = v27;
  swift_endAccess(v61);
  v28 = (uint64_t *)(v60 + qword_1001748B0);
  swift_beginAccess(v60 + qword_1001748B0, v61, 32, 0);
  v29 = *v28;
  if (*(_QWORD *)(*v28 + 16) && (v30 = sub_1000FBB14(9u), (v31 & 1) != 0))
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
    swift_endAccess(v61);
    v33 = sub_100008E84(&qword_1001748A0);
    v34 = swift_allocObject(v33, 64, 7);
    *(_OWORD *)(v34 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 32) = 0xD000000000000017;
    *(_QWORD *)(v34 + 40) = 0x800000010012E260;
    swift_errorRetain(v32);
    print(_:separator:terminator:)(v34, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v35 = swift_bridgeObjectRelease(v34);
    return swift_willThrow(v35);
  }
  else
  {
    v37 = swift_endAccess(v61);
    v38 = v11;
    defaultLogger()(v37);
    v39 = v58;
    v40 = v55;
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v8, v59, v55);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(12, -1);
      v54 = v2;
      v45 = (uint8_t *)v44;
      v46 = v40;
      v47 = swift_slowAlloc(32, -1);
      v61[0] = v47;
      v52 = v38;
      v53 = v6;
      *(_DWORD *)v45 = 136315138;
      v48 = sub_1000058C8(qword_1001749C8, (uint64_t (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v46, v48);
      v51 = v50;
      v62 = sub_10003FA80(v49, v50, v61);
      v6 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v45 + 4);
      swift_bridgeObjectRelease(v51);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v46);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "MockSESKeystore clearKeyDesignation with designation %s", v45, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v52, v57);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
    }
    swift_beginAccess(v60 + qword_1001748C8, v61, 33, 0);
    sub_1001255D0(v59, (uint64_t)v6);
    swift_endAccess(v61);
    return sub_1000150E8((uint64_t)v6, &qword_1001749C0);
  }
}

uint64_t sub_100013B70()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t result;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  _BYTE v88[32];
  _QWORD *v89;

  v2 = v0;
  v82 = sub_100008E84(&qword_1001749B8);
  v3 = __chkstk_darwin(v82);
  v81 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v80 = (uint64_t)&v71 - v6;
  v7 = __chkstk_darwin(v5);
  v79 = (char *)&v71 - v8;
  __chkstk_darwin(v7);
  v78 = (char *)&v71 - v9;
  v10 = type metadata accessor for SESKeystore.DesignatedKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v87 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v85 = (unint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint8_t *)&v0[qword_1001748B8];
  swift_beginAccess(&v0[qword_1001748B8], v88, 33, 0);
  LODWORD(v86) = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v16);
  v89 = *(_QWORD **)v16;
  v17 = v89;
  *(_QWORD *)v16 = 0x8000000000000000;
  v19 = sub_1000FBB14(0xAu);
  v20 = v17[2];
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
    goto LABEL_46;
  LOBYTE(v1) = v18;
  if (v17[3] < v22)
  {
    sub_10007B1C8(v22, v86);
    v17 = v89;
    v23 = sub_1000FBB14(0xAu);
    if ((v1 & 1) == (v24 & 1))
    {
      v19 = v23;
      goto LABEL_6;
    }
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MockSESKeystore.Method);
    __break(1u);
    return result;
  }
  if ((v86 & 1) == 0)
    goto LABEL_48;
LABEL_6:
  v25 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v17;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)v16;
  if ((v1 & 1) == 0)
    sub_10011F1C0(v19, 10, 0, *(_QWORD **)v16);
  v27 = *(_QWORD *)(v26 + 56);
  v28 = *(_QWORD *)(v27 + 8 * v19);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
    goto LABEL_47;
  *(_QWORD *)(v27 + 8 * v19) = v30;
  swift_endAccess(v88);
  v31 = &v2[qword_1001748B0];
  swift_beginAccess(&v2[qword_1001748B0], v88, 32, 0);
  v32 = *(_QWORD **)v31;
  if (!*(_QWORD *)(*(_QWORD *)v31 + 16) || (v33 = sub_1000FBB14(0xAu), (v34 & 1) == 0))
  {
    v39 = swift_endAccess(v88);
    v40 = (char *)v85;
    v41 = defaultLogger()(v39);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "SESKeystore getDesignatedKeys", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v13);
    v44 = (uint64_t *)&v2[qword_1001748C8];
    swift_beginAccess(&v2[qword_1001748C8], v88, 0, 0);
    v13 = *v44;
    v19 = *(_QWORD *)(*v44 + 16);
    v32 = &_swiftEmptyArrayStorage;
    if (!v19)
      return (uint64_t)v32;
    v89 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v13);
    sub_10005578C(0, v19, 0);
    v1 = sub_1000ED080(v13);
    v46 = 0;
    v47 = v13 + 64;
    v48 = *(_BYTE *)(v13 + 32);
    v71 = v13 + 88;
    v76 = v11;
    v77 = v10;
    v74 = v13 + 64;
    v75 = v13;
    v72 = v19;
    v73 = v45;
    while (1)
    {
      if (v1 < 0 || v1 >= 1 << v48)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        sub_10007D518();
        v17 = v89;
        goto LABEL_6;
      }
      if ((*(_QWORD *)(v47 + 8 * ((unint64_t)v1 >> 6)) & (1 << v1)) == 0)
        goto LABEL_41;
      if (*(_DWORD *)(v13 + 36) != (_DWORD)v45)
        goto LABEL_42;
      v84 = 1 << v1;
      v85 = (unint64_t)v1 >> 6;
      v83 = v46;
      v50 = v82;
      v51 = (uint64_t)v78;
      v52 = (uint64_t)&v78[*(int *)(v82 + 48)];
      v53 = *(_QWORD *)(v13 + 48);
      v54 = type metadata accessor for SESKeystore.KeyDesignation(0);
      v86 = *(_QWORD *)(v54 - 8);
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
      v55(v51, v53 + *(_QWORD *)(v86 + 72) * v1, v54);
      v56 = *(_QWORD *)(v13 + 56);
      v14 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
      sub_100015020(v56 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v1, v52);
      v57 = (uint64_t)v79;
      v55((uint64_t)v79, v51, v54);
      sub_100015020(v52, v57 + *(int *)(v50 + 48));
      v58 = v80;
      sub_100015064(v57, v80);
      sub_1000150E8(v51, &qword_1001749B8);
      v59 = *(int *)(v50 + 48);
      v2 = v81;
      v60 = (uint64_t)&v81[v59];
      v61 = v58 + v59;
      v55((uint64_t)v81, v58, v54);
      v62 = v61;
      v11 = v76;
      v10 = v77;
      sub_100015020(v62, v60);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v87, v60 + *(int *)(v14 + 20), v10);
      sub_1000150AC(v60);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v2, v54);
      sub_1000150E8(v58, &qword_1001749B8);
      v32 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
      {
        sub_10005578C(0, v32[2] + 1, 1);
        v32 = v89;
      }
      v19 = v32[2];
      v63 = v32[3];
      v16 = (uint8_t *)(v19 + 1);
      v13 = v75;
      if (v19 >= v63 >> 1)
      {
        sub_10005578C(v63 > 1, v19 + 1, 1);
        v32 = v89;
      }
      v32[2] = v16;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v19, v87, v10);
      v89 = v32;
      v48 = *(_BYTE *)(v13 + 32);
      v49 = 1 << v48;
      if (v1 >= 1 << v48)
        goto LABEL_43;
      v47 = v74;
      v64 = v85;
      v65 = *(_QWORD *)(v74 + 8 * v85);
      if ((v65 & v84) == 0)
        goto LABEL_44;
      LODWORD(v45) = v73;
      if (*(_DWORD *)(v13 + 36) != (_DWORD)v73)
        goto LABEL_45;
      v66 = v65 & (-2 << (v1 & 0x3F));
      if (v66)
      {
        v49 = __clz(__rbit64(v66)) | v1 & 0xFFFFFFFFFFFFFFC0;
        v19 = v72;
      }
      else
      {
        v67 = (char *)(v85 + 1);
        v68 = (v49 + 63) >> 6;
        v19 = v72;
        if (v85 + 1 < v68)
        {
          v69 = *(_QWORD *)(v74 + 8 * (_QWORD)v67);
          if (!v69)
          {
            v67 = (char *)(v85 + 2);
            if (v85 + 2 >= v68)
              goto LABEL_17;
            v69 = *(_QWORD *)(v74 + 8 * (_QWORD)v67);
            if (!v69)
            {
              while (v68 - 3 != v64)
              {
                v69 = *(_QWORD *)(v71 + 8 * v64++);
                if (v69)
                {
                  v67 = (char *)(v64 + 2);
                  goto LABEL_32;
                }
              }
              goto LABEL_17;
            }
          }
LABEL_32:
          v49 = __clz(__rbit64(v69)) + ((_QWORD)v67 << 6);
        }
      }
LABEL_17:
      v46 = v83 + 1;
      v1 = v49;
      if (v83 + 1 == v19)
      {
        swift_bridgeObjectRelease(v13);
        return (uint64_t)v32;
      }
    }
  }
  v35 = *(_QWORD *)(v32[7] + 8 * v33);
  swift_endAccess(v88);
  v36 = sub_100008E84(&qword_1001748A0);
  v37 = swift_allocObject(v36, 64, 7);
  *(_OWORD *)(v37 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 32) = 0xD000000000000017;
  *(_QWORD *)(v37 + 40) = 0x800000010012E260;
  swift_errorRetain(v35);
  print(_:separator:terminator:)(v37, 32, 0xE100000000000000, 10, 0xE100000000000000);
  v38 = swift_bridgeObjectRelease(v37);
  swift_willThrow(v38);
  return (uint64_t)v32;
}

uint64_t sub_1000142B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = qword_1001748B0;
  *(_QWORD *)(v1 + v2) = sub_100040158((uint64_t)&_swiftEmptyArrayStorage);
  v3 = qword_1001748B8;
  *(_QWORD *)(v1 + v3) = sub_100040248((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + qword_1001748C0) = &_swiftEmptyArrayStorage;
  v4 = qword_1001748C8;
  swift_retain(v1);
  *(_QWORD *)(v1 + v4) = sub_10003E244((uint64_t)&_swiftEmptyArrayStorage);
  v5 = swift_release(v1);
  return SESKeystore.init()(v5);
}

uint64_t sub_10001434C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748B0));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748B8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748C0));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748C8));
}

uint64_t sub_100014398()
{
  uint64_t v0;

  v0 = SESKeystore.deinit();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748B0));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748B8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748C0));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1001748C8));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100014404()
{
  return type metadata accessor for MockSESKeystore(0);
}

uint64_t *sub_10001440C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_100005A38(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SESKeystore.DesignatedKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1000144B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100005AB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SESKeystore.DesignatedKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1000144FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_100005A38(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SESKeystore.DesignatedKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_100014574(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_100005A38(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100005AB0(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SESKeystore.DesignatedKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1000145F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for SESKeystore.DesignatedKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100014650(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100005AB0(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SESKeystore.DesignatedKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000146C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000146CC);
}

uint64_t sub_1000146CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for SESKeystore.DesignatedKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100014754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100014760);
}

char *sub_100014760(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for SESKeystore.DesignatedKey(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MockSESKeystore.MockDesignatedKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100174978, (uint64_t)&nominal type descriptor for MockSESKeystore.MockDesignatedKey);
}

uint64_t sub_1000147F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100014824(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10012A758;
  result = type metadata accessor for SESKeystore.DesignatedKey(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for MockSESKeystore.MockKey(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  result = sub_100005AB0(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_100005AB0(a1[2], v3);
  return result;
}

uint64_t initializeWithCopy for MockSESKeystore.MockKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_100005A38(*v6, v7);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for MockSESKeystore.MockKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100005AB0(v6, v7);
  v8 = a2 + 2;
  v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_100005A38(*v8, v9);
      v12 = a1[2];
      v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_100005AB0(v12, v13);
      return a1;
    }
    sub_100014A1C((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    return a1;
  }
  v10 = *v8;
  sub_100005A38(*v8, v9);
  a1[2] = v10;
  a1[3] = v9;
  return a1;
}

uint64_t sub_100014A1C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for MockSESKeystore.MockKey(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for MockSESKeystore.MockKey(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005AB0(v4, v5);
  v6 = (uint64_t *)(a2 + 16);
  v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_100005AB0(v9, v7);
      return a1;
    }
    sub_100014A1C((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for MockSESKeystore.MockKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MockSESKeystore.MockKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MockSESKeystore.MockKey()
{
  return &type metadata for MockSESKeystore.MockKey;
}

_BYTE *initializeBufferWithCopyOfBuffer for MockSESKeystore.Method(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MockSESKeystore.Method(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MockSESKeystore.Method(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100014C88 + 4 * byte_10012A705[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100014CBC + 4 * byte_10012A700[v4]))();
}

uint64_t sub_100014CBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014CC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100014CCCLL);
  return result;
}

uint64_t sub_100014CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100014CE0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100014CE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014CEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014CF8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100014D04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MockSESKeystore.Method()
{
  return &type metadata for MockSESKeystore.Method;
}

unint64_t sub_100014D20()
{
  unint64_t result;

  result = qword_1001749B0;
  if (!qword_1001749B0)
  {
    result = swift_getWitnessTable(&unk_10012A7C0, &type metadata for MockSESKeystore.Method);
    atomic_store(result, (unint64_t *)&qword_1001749B0);
  }
  return result;
}

char *sub_100014D64(uint64_t a1)
{
  return sub_1000A74B8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100014D78(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

void sub_100014E08(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_100014E6C
     + *((int *)qword_100015010 + (sub_1000151A4(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_100014E7C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_100005A38(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_10000CE40(&v11);
}

uint64_t sub_100015020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001749B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000150AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000150E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008E84(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100015124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015168(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_100005AB0(result, a2);
    return sub_10000B164(a3, a4);
  }
  return result;
}

_QWORD *sub_1000151A4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000151CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_10012A830;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100015260@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE v21[24];
  char v22[24];
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v19 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - v11;
  v13 = (uint64_t)v1 + *(_QWORD *)(v3 + 120);
  swift_beginAccess(v13, v22, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v13, v5);
  v14 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v12, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v15 = v23;
  result = sub_100015B18();
  if (!v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 88) + 16))(result);
    v17 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a1, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v4);
    v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v17, v5);
    swift_beginAccess(v13, v21, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v18, v5);
    return swift_endAccess(v21);
  }
  return result;
}

uint64_t sub_10001544C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = *v2;
  *(_QWORD *)(v3 + 32) = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000154B4, v2, 0);
}

uint64_t sub_1000154B4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_100015260(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 88) + 8);
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 80), *(_QWORD *)(v0 + 40), v1);
}

uint64_t sub_10001556C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 56);
  v2 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  v6 = *v1;
  *(_QWORD *)(v6 + 72) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_10001560C, *(_QWORD *)(v6 + 24), 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 56));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10001560C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015640(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000156A4, v1, 0);
}

uint64_t sub_1000156A4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_100015260(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 16);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_100015758;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_100015758(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  v8 = *(_QWORD *)(v5 + 40);
  if (v1)
  {
    v9 = *(_QWORD *)(v5 + 24);
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v5 + 56), v8);
    return swift_task_switch(sub_10001560C, v9, 0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v5 + 56), v8);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100015804(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015868, v1, 0);
}

uint64_t sub_100015868()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_100015260(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 32);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_10001591C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = *v2;
  v3[5] = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015984, v2, 0);
}

uint64_t sub_100015984()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_100015260(v0[8]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[5] + 88) + 8);
  v2 = *(int **)(v1 + 24);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_100015A38;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[2], v0[3], v0[6], v1);
}

uint64_t sub_100015A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *v2;
  *(_QWORD *)(v5 + 80) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(v5 + 48);
  if (v1)
  {
    v9 = *(_QWORD *)(v5 + 32);
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v5 + 64), v8);
    return swift_task_switch(sub_100015AE4, v9, 0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v5 + 64), v8);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100015AE4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015B18()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  uint64_t v36;
  char *v37;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008E84(&qword_100174AA8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = JSONDecoder.init()();
  v14 = v2[14];
  v13 = v2[15];
  v15 = sub_1000163B8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v14, v13, v7, v15);
  if (v1)
  {
    swift_release(v12);
    v24 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v37, enum case for DIPError.Code.idcsPayloadDecryptionFailureECV3(_:), v34);
    swift_errorRetain(v1);
    v25 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_10000745C();
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010012E610, v1, v24, 0, v25, 0xD00000000000006BLL, 0x800000010012E650, 0xD000000000000010, 0x800000010012E6C0, 59);
    swift_willThrow(v28);
    return swift_errorRelease(v1);
  }
  else
  {
    v30 = v8;
    swift_release(v12);
    v16 = v31;
    v17 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v32, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:), v31);
    v18 = (void *)v2[16];
    v19 = type metadata accessor for DIPECIESSessionECV3SH(0);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v20 = v18;
    v21 = DIPECIESSessionECV3SH.init(_:)(v18);
    v22 = v16;
    v35[3] = v19;
    v35[4] = &protocol witness table for DIPECIESSessionECV3;
    v35[0] = v21;
    EncryptedDataContainer.getUnencryptedData(alg:decryptor:senderSigningKey:recipientSigningKey:)(&v36, v17, v35, 0, 0xC000000000000000, 0, 0xC000000000000000, v7);
    v23 = v30;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v22);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
    sub_10000CE40(v35);
    return v36;
  }
}

uint64_t sub_100015E8C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = *v0;
  v1[3] = *v0;
  v3 = *(_QWORD *)(v2 + 80);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015EF0, v0, 0);
}

uint64_t sub_100015EF0()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_100015260(v0[6]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[3] + 88) + 8);
  v2 = *(int **)(v1 + 40);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_100015FA0;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[4], v1);
}

uint64_t sub_100015FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(*v2 + 56);
  v5 = *v2;
  *(_QWORD *)(v5 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = *(_QWORD *)(v5 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 + 40) + 8))(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 32));
    return swift_task_switch(sub_100016054, v6, 0);
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 + 40) + 8))(v8, *(_QWORD *)(v5 + 32));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100016054()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *sub_100016088()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_100005AB0(v0[14], v0[15]);

  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 120);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000160F4()
{
  uint64_t v0;

  sub_100016088();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ECv3SHPayloadProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100016448(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ECv3SHPayloadProcessor);
}

uint64_t sub_100016118()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100016124()
{
  return sub_100016118();
}

uint64_t sub_10001613C(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100174A54);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000935C;
  return sub_10001544C(a1, a2);
}

uint64_t sub_1000161A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100174A5C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000161F0;
  return sub_100015640(a1);
}

uint64_t sub_1000161F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100016244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100174A6C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016478;
  return sub_10001591C(a1, a2);
}

uint64_t sub_1000162A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100174A64);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100016474;
  return sub_100015804(a1);
}

uint64_t sub_1000162F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100174A74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100016478;
  return sub_100015E8C();
}

uint64_t sub_100016340()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_100016358, v2, 0);
}

uint64_t sub_100016358()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100015B18();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

unint64_t sub_1000163B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100174AB0;
  if (!qword_100174AB0)
  {
    v1 = sub_100016404(&qword_100174AA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for EncryptedDataContainer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100174AB0);
  }
  return result;
}

uint64_t sub_100016404(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100016448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

double sub_10001647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  double result;

  v0 = type metadata accessor for EnvironmentManager();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = sub_100008E84(&qword_100174B58);
  v3 = (_OWORD *)swift_allocObject(v2, 76, 7);
  result = 0.0;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *(_OWORD *)((char *)v3 + 60) = 0u;
  *(_QWORD *)(v1 + 16) = v3;
  qword_100178CB0 = v1;
  return result;
}

uint64_t sub_1000164DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for AsyncCoreDataStore.StoreType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  v14 = *a1;
  v15 = a1[2];
  v16 = a1[3];
  v17 = a1[4];
  v18 = a1[5];
  v19 = a1[6];
  if (*a1)
  {
    *a2 = v14;
    a2[1] = v13;
    a2[2] = v15;
    a2[3] = v16;
    a2[4] = v17;
    a2[5] = v18;
    a2[6] = v19;
  }
  else
  {
    v28 = v10;
    v29 = v5;
    v30 = v4;
    v31 = v7;
    v32 = v19;
    v33 = v18;
    v34 = v17;
    v35 = v16;
    v36 = v15;
    v37 = v13;
    v20 = defaultLogger()(v10);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No environment exists, creating new environment", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v28);
    v24 = (uint64_t)v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for AsyncCoreDataStore.StoreType.disk(_:), v30);
    v25 = type metadata accessor for IDCSCoreDataStore();
    swift_allocObject(v25, 24, 7);
    v26 = sub_1000D8E18(v24);
    *a1 = v26;
    *(_OWORD *)(a1 + 1) = 0u;
    *(_OWORD *)(a1 + 3) = 0u;
    *(_OWORD *)(a1 + 5) = 0u;
    *a2 = v26;
    *(_OWORD *)(a2 + 1) = 0u;
    *(_OWORD *)(a2 + 3) = 0u;
    *(_OWORD *)(a2 + 5) = 0u;
    swift_retain(v26);
    v15 = v36;
    v13 = v37;
    v17 = v34;
    v16 = v35;
    v19 = v32;
    v18 = v33;
  }
  return sub_100016B40(v14, v13, v15, v16, v17, v18, v19);
}

uint64_t sub_1000166D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for EnvironmentManager()
{
  return objc_opt_self(_TtC7idcredd18EnvironmentManager);
}

uint64_t destroy for Environment(_QWORD *a1)
{
  uint64_t result;

  result = swift_release(*a1);
  if (a1[1])
    result = swift_release(a1[2]);
  if (a1[3])
    result = swift_release(a1[4]);
  if (a1[5])
    return swift_release(a1[6]);
  return result;
}

_QWORD *initializeWithCopy for Environment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *a1 = *a2;
  v6 = a2 + 1;
  v5 = a2[1];
  swift_retain(v4);
  if (v5)
  {
    v7 = a2[2];
    a1[1] = v5;
    a1[2] = v7;
    swift_retain(v7);
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v6;
  }
  v8 = a2[3];
  if (v8)
  {
    v9 = a2[4];
    a1[3] = v8;
    a1[4] = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  v10 = a2[5];
  if (v10)
  {
    v11 = a2[6];
    a1[5] = v10;
    a1[6] = v11;
    swift_retain(v11);
  }
  else
  {
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  }
  return a1;
}

_QWORD *assignWithCopy for Environment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      v7 = a2[2];
      v8 = a1[2];
      a1[1] = v6;
      a1[2] = v7;
      swift_retain(v7);
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(a1[2]);
  }
  else if (v6)
  {
    v9 = a2[2];
    a1[1] = v6;
    a1[2] = v9;
    swift_retain(v9);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v10 = a2[3];
  if (a1[3])
  {
    if (v10)
    {
      v11 = a2[4];
      v12 = a1[4];
      a1[3] = v10;
      a1[4] = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_15;
    }
    swift_release(a1[4]);
  }
  else if (v10)
  {
    v13 = a2[4];
    a1[3] = v10;
    a1[4] = v13;
    swift_retain(v13);
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v14 = a2[5];
  if (!a1[5])
  {
    if (v14)
    {
      v17 = a2[6];
      a1[5] = v14;
      a1[6] = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[6]);
    goto LABEL_21;
  }
  v15 = a2[6];
  v16 = a1[6];
  a1[5] = v14;
  a1[6] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

_QWORD *assignWithTake for Environment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[1];
  if (a1[1])
  {
    if (v5)
    {
      v6 = a2[2];
      v7 = a1[2];
      a1[1] = v5;
      a1[2] = v6;
      swift_release(v7);
      goto LABEL_8;
    }
    swift_release(a1[2]);
  }
  else if (v5)
  {
    v8 = a2[2];
    a1[1] = v5;
    a1[2] = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v9 = a2[3];
  if (a1[3])
  {
    if (v9)
    {
      v10 = a2[4];
      v11 = a1[4];
      a1[3] = v9;
      a1[4] = v10;
      swift_release(v11);
      goto LABEL_15;
    }
    swift_release(a1[4]);
  }
  else if (v9)
  {
    v12 = a2[4];
    a1[3] = v9;
    a1[4] = v12;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v13 = a2[5];
  if (!a1[5])
  {
    if (v13)
    {
      v16 = a2[6];
      a1[5] = v13;
      a1[6] = v16;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  if (!v13)
  {
    swift_release(a1[6]);
    goto LABEL_21;
  }
  v14 = a2[6];
  v15 = a1[6];
  a1[5] = v13;
  a1[6] = v14;
  swift_release(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

uint64_t sub_100016B40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_retain(result);
    sub_100016BAC(a2, a3);
    sub_100016BAC(a4, a5);
    return sub_100016BAC(a6, a7);
  }
  return result;
}

uint64_t sub_100016BAC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100016BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Class isa;
  _QWORD v20[10];
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v21 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v21);
  v22 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Insecure.SHA1(0);
  v6 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v24 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Insecure.SHA1Digest(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 112);
  v13 = v25;
  dispatch thunk of SESKeystore.getPublicKey(of:)(a1, a2);
  if (!v13)
  {
    v15 = v14;
    v20[4] = v6;
    v20[5] = a1;
    v20[7] = v11;
    v20[8] = v9;
    v25 = 0;
    v20[9] = v12;
    v16 = objc_msgSend(objc_allocWithZone((Class)DCCredentialCryptoKey), "init");
    v17 = v15;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v20[6] = v16;
    objc_msgSend(v16, "setPublicKey:", isa);

    sub_1000058C8(&qword_100174BB8, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1, (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
    dispatch thunk of HashFunction.init()(v23);
    __asm { BR              X10 }
  }
  return v6;
}

uint64_t sub_10001718C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[18] = v7;
  v5[19] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for COSEKey(0);
  v5[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[21] = v9;
  v5[22] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v5[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[24] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[25] = swift_task_alloc(v12);
  v5[26] = swift_task_alloc(v12);
  v5[27] = swift_task_alloc(v12);
  v5[28] = swift_task_alloc(v12);
  return swift_task_switch(sub_10001726C, 0, 0);
}

uint64_t sub_10001726C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89[2];

  v2 = *(_QWORD *)(v1 + 104);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v82 = *(_QWORD *)(v1 + 192);
    v84 = *(_QWORD *)(v1 + 184);
    v86 = *(_QWORD *)(v1 + 224);
    v6 = *(_QWORD *)(v1 + 104);
    v7 = *(_QWORD *)(v1 + 96);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v89[0] = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 88) = sub_10003FA80(v7, v6, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Checking if the AccountKaK exists for the given accountKeyIdentifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    v10(v86, v84);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 224);
    v12 = *(_QWORD *)(v1 + 184);
    v13 = *(_QWORD *)(v1 + 192);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 104), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 232) = v10;
  v14 = *(_QWORD **)(v1 + 96);
  v15 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 112);
  v16 = sub_1000FDFE8(v14, v15);
  v18 = v16;
  v19 = v17;
  v20 = *(_QWORD *)(v1 + 104);
  if (v17 >> 60 == 15)
  {
    v85 = v17;
    defaultLogger()(v16);
    v21 = swift_bridgeObjectRetain_n(v20, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    v24 = os_log_type_enabled(v22, v23);
    v25 = *(_QWORD *)(v1 + 216);
    v26 = *(_QWORD *)(v1 + 104);
    if (v24)
    {
      v80 = *(_QWORD *)(v1 + 96);
      v83 = *(_QWORD *)(v1 + 184);
      v87 = v18;
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v89[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v1 + 80) = sub_10003FA80(v80, v26, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v27 + 4);
      swift_bridgeObjectRelease_n(v26, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "AccountKaK doesn't exist for the given accountKeyIdentifier %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v29 = v27;
      v18 = v87;
      swift_slowDealloc(v29, -1, -1);

      v30 = v25;
      v31 = v83;
    }
    else
    {
      v43 = *(_QWORD *)(v1 + 184);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 104), 2);

      v30 = v25;
      v31 = v43;
    }
    v10(v30, v31);
    v19 = v85;
    v44 = sub_1000FDC88(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
    v46 = v45;
    sub_100005A38(v44, v45);
  }
  else
  {
    v88 = v16;
    defaultLogger()(v16);
    v32 = swift_bridgeObjectRetain_n(v20, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v1 + 208);
    v37 = *(_QWORD *)(v1 + 184);
    v38 = *(_QWORD *)(v1 + 104);
    if (v35)
    {
      v79 = *(_QWORD *)(v1 + 96);
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = v37;
      v40 = swift_slowAlloc(32, -1);
      v89[0] = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v1 + 72) = sub_10003FA80(v79, v38, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v39 + 4);
      swift_bridgeObjectRelease_n(v38, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "AccountKaK exists for the given accountKeyIdentifier %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v42 = v81;
      v41 = v36;
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 104), 2);

      v41 = v36;
      v42 = v37;
    }
    v10(v41, v42);
    v18 = v88;
    v44 = v88;
    v46 = v19;
  }
  *(_QWORD *)(v1 + 248) = v44;
  *(_QWORD *)(v1 + 256) = v46;
  sub_10000B178(v18, v19);
  v47 = (void *)sub_100016BBC(v44, v46);
  *(_QWORD *)(v1 + 264) = v47;
  v58 = v47;
  v59 = objc_msgSend(v47, "casdAttestation");
  if (v59)
  {
    v60 = v59;
    v62 = *(_QWORD *)(v1 + 120);
    v61 = *(_QWORD *)(v1 + 128);
    v63 = *(_QWORD *)(v1 + 112);
    v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v66 = v65;

    *(_QWORD *)(v1 + 272) = v64;
    *(_QWORD *)(v1 + 280) = v66;
    v67 = (_QWORD *)swift_allocObject(&unk_100167D38, 40, 7);
    *(_QWORD *)(v1 + 288) = v67;
    v67[2] = v61;
    v67[3] = v63;
    v67[4] = v62;
    v68 = swift_allocObject(&unk_100167D60, 32, 7);
    *(_QWORD *)(v1 + 296) = v68;
    *(_QWORD *)(v68 + 16) = &unk_100174BA0;
    *(_QWORD *)(v68 + 24) = v67;
    v69 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
    swift_retain(v61);
    swift_bridgeObjectRetain(v62);
    swift_retain(v67);
    v70 = (_QWORD *)swift_task_alloc(v69);
    *(_QWORD *)(v1 + 304) = v70;
    v71 = sub_100008E84(&qword_100174860);
    *v70 = v1;
    v70[1] = sub_100017AE0;
    return AsyncCoreDataContainer.read<A>(_:)(v1 + 56, &unk_100174BA8, v68, v71);
  }
  else
  {
    v73 = *(_QWORD *)(v1 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 104))(v73, enum case for DIPError.Code.accountKeySigningKeyAttestationDoesntExist(_:), *(_QWORD *)(v1 + 136));
    v74 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v77 = swift_allocError(v75, v76, 0, 0);
    v78 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010012E8D0, 0, v73, 0, v74, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 79);
    swift_willThrow(v78);
    sub_10000B164(v44, v46);

    sub_100005AB0(v44, v46);
    v48 = *(_QWORD *)(v1 + 216);
    v49 = *(_QWORD *)(v1 + 224);
    v50 = *(_QWORD *)(v1 + 200);
    v51 = *(_QWORD *)(v1 + 208);
    v52 = *(_QWORD *)(v1 + 176);
    v53 = *(_QWORD *)(v1 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 104))(v53, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 136));
    swift_errorRetain(v77);
    v54 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v55 = type metadata accessor for DIPError(0);
    v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v55, v56, 0, 0);
    v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v77, v53, 0, v54, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 106);
    swift_willThrow(v57);
    swift_errorRelease(v77);
    swift_task_dealloc(v49);
    swift_task_dealloc(v48);
    swift_task_dealloc(v51);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100017AE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100017E94;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 288);
    swift_release(*(_QWORD *)(v2 + 296));
    swift_release(v5);
    *(_OWORD *)(v2 + 320) = *(_OWORD *)(v2 + 56);
    v4 = sub_100017B5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100017B5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 328);
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v0 + 336) = v2;
    *v2 = v0;
    v2[1] = sub_100017E20;
    return sub_1000FE76C(*(_QWORD *)(v0 + 320), v1, 0, 0xF000000000000000);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 272);
    v19 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 256);
    v21 = *(void **)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v6, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 136));
    v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v10 = swift_allocError(v8, v9, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v6, 0, v7, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 93);
    swift_willThrow(v11);
    sub_10000B164(v5, v4);
    sub_100005AB0(v17, v19);

    sub_100005AB0(v5, v4);
    v13 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v14, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
    swift_errorRetain(v10);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v8, v9, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v14, 0, v15, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 106);
    swift_willThrow(v16);
    swift_errorRelease(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100017E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 336);
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[41]);
  if (v1)
    v5 = sub_1000185CC;
  else
    v5 = sub_100018044;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100017E94()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(void **)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 296));
  swift_release(v1);
  sub_10000B164(v6, v4);
  sub_100005AB0(v3, v2);

  sub_100005AB0(v6, v4);
  v7 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v7);
  v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v15 = type metadata accessor for DIPError(0);
  v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v15, v16, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v7, v13, 0, v14, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 106);
  swift_willThrow(v17);
  swift_errorRelease(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 344);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 352);
    v3 = *(void **)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 160);
    v5 = type metadata accessor for CBORDecoder(0);
    v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v7 = CBORDecoder.init()(v6);
    v8 = objc_msgSend(v3, "publicKeyCOSEKey");
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = sub_1000058C8(&qword_100174BB0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v4, v9, v11, v4, v12);
    v13 = v2;
    if (!v2)
    {
      v26 = *(_QWORD *)(v0 + 176);
      sub_100005AB0(v9, v11);
      swift_release(v7);
      *(_QWORD *)(v0 + 40) = &type metadata for KeySigningKeySignatureProvider;
      *(_QWORD *)(v0 + 48) = &off_10016CA58;
      *(_QWORD *)(v0 + 16) = v1;
      swift_retain_n(v1, 2);
      v36 = sub_100110A88(v26);
      v38 = v37;
      v40 = *(_QWORD *)(v0 + 256);
      v39 = *(void **)(v0 + 264);
      v41 = *(_QWORD *)(v0 + 248);
      v50 = *(_QWORD *)(v0 + 224);
      v51 = *(_QWORD *)(v0 + 216);
      v42 = *(_QWORD *)(v0 + 200);
      v45 = *(_QWORD *)(v0 + 184);
      v46 = *(_QWORD *)(v0 + 168);
      v47 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
      v48 = *(_QWORD *)(v0 + 160);
      v49 = *(_QWORD *)(v0 + 176);
      v53 = *(_QWORD *)(v0 + 208);
      v57 = *(_QWORD *)(v0 + 152);
      defaultLogger()(v36);
      v43 = swift_task_alloc(32);
      *(_QWORD *)(v43 + 16) = v36;
      *(_QWORD *)(v43 + 24) = v38;
      Logger.sensitive(_:)(sub_100019BA4, v43);

      sub_100005AB0(v41, v40);
      swift_release_n(v1, 2);
      sub_10000B164(v41, v40);
      swift_task_dealloc(v43);
      v47(v42, v45);
      sub_100019A68(v0 + 16);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v49, v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v53);
      swift_task_dealloc(v42);
      swift_task_dealloc(v49);
      swift_task_dealloc(v57);
      return (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))(v0 + 8))(v36, v38, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
    }
    v14 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 256);
    v52 = *(_QWORD *)(v0 + 280);
    v54 = *(void **)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 248);
    sub_10000B164(v16, v15);
    sub_100005AB0(v9, v11);
    swift_release(v7);
    swift_release(v1);
    sub_100005AB0(v14, v52);

    sub_100005AB0(v16, v15);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 272);
    v17 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 256);
    v55 = *(void **)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v21, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 136));
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v13 = swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v21, 0, v22, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 93);
    swift_willThrow(v25);
    sub_10000B164(v20, v19);
    sub_100005AB0(v18, v17);

    sub_100005AB0(v20, v19);
  }
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 208);
  v56 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v31, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v13);
  v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v33 = type metadata accessor for DIPError(0);
  v34 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v33, v34, 0, 0);
  v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v13, v31, 0, v32, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 106);
  swift_willThrow(v35);
  swift_errorRelease(v13);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v29);
  swift_task_dealloc(v56);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000185CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(void **)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 248);
  sub_10000B164(v5, v3);
  sub_100005AB0(v1, v2);

  sub_100005AB0(v5, v3);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v12, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v6);
  v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v14 = type metadata accessor for DIPError(0);
  v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v14, v15, 0, 0);
  v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v12, 0, v13, 0xD00000000000006ALL, 0x800000010012E740, 0xD000000000000059, 0x800000010012E870, 106);
  swift_willThrow(v16);
  swift_errorRelease(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001876C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000187D4, 0, 0);
}

uint64_t sub_1000187D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[10];
  v1 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v6 = v0[6];
  v5 = v0[7];
  v7 = v0[5];
  v8 = (_QWORD *)swift_allocObject(&unk_100167D88, 48, 7);
  v0[12] = v8;
  v8[2] = v6;
  v8[3] = v5;
  v8[4] = v4;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100167DB0, 32, 7);
  v0[13] = v9;
  *(_QWORD *)(v9 + 16) = sub_100019C70;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_bridgeObjectRetain(v4);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[14] = v13;
  v14 = sub_100008E84(&qword_100174860);
  *v13 = v0;
  v13[1] = sub_100018914;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[11], sub_100019C84, v9, v14);
}

uint64_t sub_100018914()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 104));
    v7 = sub_100019C60;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 96);
    swift_release(*(_QWORD *)(v2 + 104));
    swift_release(v8);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v2 + 16);
    v7 = sub_100019C98;
  }
  return swift_task_switch(v7, 0, 0);
}

unint64_t sub_1000189C0()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001BLL;
}

uint64_t sub_100018A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100174B68);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for COSEKey(0);
  v5[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[19] = v10;
  v5[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100018B00, 0, 0);
}

uint64_t sub_100018B00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = v0[13];
  v2 = v0[9];
  v3 = v0[10];
  v4 = (_QWORD *)swift_allocObject(&unk_100167C98, 40, 7);
  v0[21] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = swift_allocObject(&unk_100167CC0, 32, 7);
  v0[22] = v5;
  *(_QWORD *)(v5 + 16) = &unk_100174B78;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[23] = v7;
  v8 = sub_100008E84(&qword_100174860);
  *v7 = v0;
  v7[1] = sub_100018C00;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 7, &unk_100174B88, v5, v8);
}

uint64_t sub_100018C00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100018E90;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 168);
    swift_release(*(_QWORD *)(v2 + 176));
    swift_release(v5);
    *(_OWORD *)(v2 + 200) = *(_OWORD *)(v2 + 56);
    v4 = sub_100018C7C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100018C7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 208);
  if (v1)
  {
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 112);
    v2 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v0 + 224) = v2;
    *v2 = v0;
    v2[1] = sub_100018E1C;
    return sub_1000FE76C(*(_QWORD *)(v0 + 200), v1, 0, 0xF000000000000000);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(v4, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 112));
    v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v6, v7, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v4, 0, v5, 0xD00000000000006ALL, 0x800000010012E740, 0xD00000000000003BLL, 0x800000010012E7B0, 129);
    swift_willThrow(v8);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100018E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000193EC;
  }
  else
  {
    swift_bridgeObjectRelease(v3[26]);
    v5 = sub_100018EF0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100018E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 232);
  if (!v1)
  {
    v12 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(v12, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 112));
    v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v12, 0, v13, 0xD00000000000006ALL, 0x800000010012E740, 0xD00000000000003BLL, 0x800000010012E7B0, 129);
    swift_willThrow(v16);
LABEL_8:
    v22 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  swift_retain(*(_QWORD *)(v0 + 232));
  sub_100056DE4(v4);
  swift_release(v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    sub_100019A28(*(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for DIPError.Code.coseInvalidPublicKey(_:), v6);
    v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010012E7F0, 0, v5, 0, v8, 0xD00000000000006ALL, 0x800000010012E740, 0xD00000000000003BLL, 0x800000010012E7B0, 134);
    swift_willThrow(v11);
LABEL_7:
    swift_release(v1);
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD **)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  v20 = sub_1000FDFE8(v19, v18);
  if (v17)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    goto LABEL_7;
  }
  if (v21 >> 60 == 15)
  {
    v25 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 88);
    v29 = *(void **)(v0 + 96);
    _StringGuts.grow(_:)(72);
    v31._countAndFlagsBits = 0xD000000000000046;
    v31._object = (void *)0x800000010012E820;
    String.append(_:)(v31);
    v32._countAndFlagsBits = v30;
    v32._object = v29;
    String.append(_:)(v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v26, enum case for DIPError.Code.accountKeySigningKeyDoesntExist(_:), v28);
    v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v26, 0, v33, 0xD00000000000006ALL, 0x800000010012E740, 0xD00000000000003BLL, 0x800000010012E7B0, 138);
    swift_willThrow(v36);
    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v49, v48);
    goto LABEL_8;
  }
  v37 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 40) = &type metadata for AccountKeySigningKeySignatureProvider;
  *(_QWORD *)(v0 + 48) = &off_100169778;
  *(_QWORD *)(v0 + 16) = v37;
  *(_QWORD *)(v0 + 24) = v20;
  *(_QWORD *)(v0 + 32) = v21;
  swift_retain(v37);
  v39 = sub_100110AC0(v38);
  v41 = *(_QWORD *)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 160);
  v42 = *(_QWORD *)(v0 + 144);
  v43 = v39;
  v45 = v44;
  v47 = *(_QWORD *)(v0 + 128);
  v46 = *(_QWORD *)(v0 + 136);
  swift_release(v1);
  sub_100019A68(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  swift_task_dealloc(v40);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(char *, uint64_t))(v0 + 8))(v43, v45);
}

uint64_t sub_1000193EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000194AC, 0, 0);
}

uint64_t sub_1000194AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[10];
  v1 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v6 = v0[6];
  v5 = v0[7];
  v7 = v0[5];
  v8 = (_QWORD *)swift_allocObject(&unk_100167CE8, 48, 7);
  v0[12] = v8;
  v8[2] = v6;
  v8[3] = v5;
  v8[4] = v4;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100167D10, 32, 7);
  v0[13] = v9;
  *(_QWORD *)(v9 + 16) = sub_100019AA0;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_bridgeObjectRetain(v4);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[14] = v13;
  v14 = sub_100008E84(&qword_100174860);
  *v13 = v0;
  v13[1] = sub_1000195EC;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[11], sub_100019AE0, v9, v14);
}

uint64_t sub_1000195EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 104));
    v7 = sub_1000196D8;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 96);
    swift_release(*(_QWORD *)(v2 + 104));
    swift_release(v8);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v2 + 16);
    v7 = sub_100019698;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100019698()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 128);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000196D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019718(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100174B74);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000935C;
  return sub_100019444(a1, a2, v6, v7, v8);
}

void sub_100019794(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1000093E8(a1, a2);
  if (v3)
    return;
  v6 = v5;
  v7 = (uint64_t)sub_1000C5240();
  v8 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v15 = v7;
    else
      v15 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v8);
    if (v16)
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease(v8);
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v9 = *(id *)(v8 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  v11 = objc_msgSend(v10, "identifier");

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {

    v12 = 0;
    v14 = 0;
  }
  *a3 = v12;
  a3[1] = v14;
}

uint64_t sub_1000198E0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 32) = a1;
  v4 = *a2;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 40) = v5;
  *v5 = v3;
  v5[1] = sub_100019954;
  return v7(v3 + 16, v4);
}

uint64_t sub_100019954()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    *(_OWORD *)*(_QWORD *)(v2 + 32) = *(_OWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000199A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100174B84);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100174B80 + dword_100174B80))(a1, a2, v6);
}

uint64_t sub_100019A28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_100174B68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100019A68(uint64_t a1)
{
  destroy for CredentialDecryptionKeyFinder();
  return a1;
}

void sub_100019AA0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100019794(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_100019ABC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100019AE0@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100118698(*(void (**)(__int128 *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100019AFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100019B28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100174B9C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100016474;
  return sub_10001876C(a1, a2, v6, v7, v8);
}

unint64_t sub_100019BA4()
{
  return sub_1000189C0();
}

uint64_t sub_100019BB0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100019BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100174BC8;
  if (!qword_100174BC8)
  {
    v1 = sub_100016404(&qword_100174B68);
    sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100174BC8);
  }
  return result;
}

void sub_100019C70(uint64_t *a1@<X8>)
{
  sub_100019AA0(a1);
}

double sub_100019C84@<D0>(_OWORD *a1@<X8>)
{
  return sub_100019AE0(a1);
}

char *sub_100019C9C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  NSString v9;
  id v10;
  objc_class *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_super v20;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone((Class)NSXPCListener);
  v8 = v1;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v7, "initWithMachServiceName:", v9);

  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener] = v10;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_dataContainer] = a1;
  swift_retain(a1);

  v11 = (objc_class *)type metadata accessor for BiometricStoreListener();
  v20.receiver = v8;
  v20.super_class = v11;
  v12 = (char *)objc_msgSendSuper2(&v20, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = defaultLogger()(objc_msgSend(v13, "resume"));
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Biometric store listener is started", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  swift_release(a1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_100019E6C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Biometric store listener is tearing down", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7idcredd22BiometricStoreListener_xpcListener], "invalidate");
  v11 = (objc_class *)type metadata accessor for BiometricStoreListener();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_100019FF0()
{
  return sub_10001A008("Biometric store connection invalidated");
}

uint64_t sub_100019FFC()
{
  return sub_10001A008("Biometric store connection interrupted");
}

uint64_t sub_10001A008(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t type metadata accessor for BiometricStoreListener()
{
  return objc_opt_self(_TtC7idcredd22BiometricStoreListener);
}

id sub_10001A1A0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Destroying BiometricStoreSessionProxy", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = (objc_class *)type metadata accessor for BiometricStoreSessionProxy();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_10001A31C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001A3B4, 0, 0);
}

uint64_t sub_10001A3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy bioBindingUnboundACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v18 = *(_QWORD **)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v18)
  {
    v19 = v18[6];
    v20 = v18[7];
    sub_1000151A4(v18 + 3, v19);
    swift_retain(v18);
    v28 = dispatch thunk of AppleIDVManaging.prepareBioBindingUnboundACL()(v19, v20);
    v30 = v29;
    v32 = *(_QWORD *)(v1 + 64);
    v31 = *(_QWORD *)(v1 + 72);
    v34 = *(_QWORD *)(v1 + 40);
    v33 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v28);
    v35 = swift_task_alloc(32);
    *(_QWORD *)(v35 + 16) = v28;
    *(_QWORD *)(v35 + 24) = v30;
    Logger.cryptoParam(_:)(sub_100024788, v35);
    swift_task_dealloc(v35);
    v9(v32, v33);
    swift_release(v18);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v28, v30);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v21, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v22 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v21, 0, v22, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000016, 0x800000010012F280, 91);
    v27 = swift_willThrow(v26);
    v10 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v27);
    DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v10);
    v9(v10, v12);
    sub_10002473C();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v16 = v15;
    static NSError.mapFromError(_:domain:mapper:)(v25, v14, v15, sub_1000C4B28, 0);
    v17 = swift_bridgeObjectRelease(v16);
    swift_willThrow(v17);
    swift_errorRelease(v25);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001A81C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D1C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100025998;
  return sub_10001A31C();
}

uint64_t sub_10001A87C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001A914, 0, 0);
}

uint64_t sub_10001A914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy passcodeBindingUnboundACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v18 = *(_QWORD **)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v18)
  {
    v19 = v18[6];
    v20 = v18[7];
    sub_1000151A4(v18 + 3, v19);
    swift_retain(v18);
    v28 = dispatch thunk of AppleIDVManaging.preparePasscodeBindingUnboundACL()(v19, v20);
    v30 = v29;
    v32 = *(_QWORD *)(v1 + 64);
    v31 = *(_QWORD *)(v1 + 72);
    v34 = *(_QWORD *)(v1 + 40);
    v33 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v28);
    v35 = swift_task_alloc(32);
    *(_QWORD *)(v35 + 16) = v28;
    *(_QWORD *)(v35 + 24) = v30;
    Logger.cryptoParam(_:)(sub_100024780, v35);
    swift_task_dealloc(v35);
    v9(v32, v33);
    swift_release(v18);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v28, v30);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v21, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v22 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v21, 0, v22, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001BLL, 0x800000010012F260, 108);
    v27 = swift_willThrow(v26);
    v10 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v27);
    DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v10);
    v9(v10, v12);
    sub_10002473C();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v16 = v15;
    static NSError.mapFromError(_:domain:mapper:)(v25, v14, v15, sub_1000C4B28, 0);
    v17 = swift_bridgeObjectRelease(v16);
    swift_willThrow(v17);
    swift_errorRelease(v25);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001AD7C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D24;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100025998;
  return sub_10001A87C();
}

uint64_t sub_10001ADDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v9);
  v4[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_10001AE78, 0, 0);
}

uint64_t sub_10001AE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  Swift::String v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  sub_100005A38(v2, v3);
  v4 = sub_100005A38(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v38 = *(_QWORD *)(v1 + 88);
    v39 = *(_QWORD *)(v1 + 80);
    v40 = *(_QWORD *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 32);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v41 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = Data.base64EncodedString(options:)(0);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v11._countAndFlagsBits, (unint64_t)v11._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease(v11._object);
    sub_100005AB0(v8, v7);
    sub_100005AB0(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "BiometricStoreSessionProxy setGlobalAuthACL, authACL = %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v12(v40, v39);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 104);
    v14 = *(_QWORD *)(v1 + 80);
    v15 = *(_QWORD *)(v1 + 88);
    v17 = *(_QWORD *)(v1 + 24);
    v16 = *(_QWORD *)(v1 + 32);
    sub_100005AB0(v17, v16);
    sub_100005AB0(v17, v16);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(_QWORD *)(v1 + 112) = v12;
  sub_1000244B8();
  v27 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 120) = v27;
  if (v27)
  {
    v28 = dword_100177374;
    swift_retain(v27);
    v29 = (_QWORD *)swift_task_alloc(v28);
    *(_QWORD *)(v1 + 128) = v29;
    *v29 = v1;
    v29[1] = sub_10001B268;
    return sub_100097780(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  }
  else
  {
    v31 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v31, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 56));
    v32 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_10000745C();
    v35 = swift_allocError(v33, v34, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v31, 0, v32, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000017, 0x800000010012F240, 125);
    v37 = swift_willThrow(v36);
    v19 = *(_QWORD *)(v1 + 104);
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
    v20 = *(_QWORD *)(v1 + 96);
    v22 = *(_QWORD *)(v1 + 72);
    v21 = *(_QWORD *)(v1 + 80);
    defaultLogger()(v37);
    DIPRecordError(_:message:log:)(v35, 0, 0xE000000000000000, v20);
    v18(v20, v21);
    sub_10002473C();
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v25 = v24;
    static NSError.mapFromError(_:domain:mapper:)(v35, v23, v24, sub_1000C4B28, 0);
    v26 = swift_bridgeObjectRelease(v25);
    swift_willThrow(v26);
    swift_errorRelease(v35);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001B268(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)();

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 128);
  *(_QWORD *)(*(_QWORD *)v3 + 136) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_10001B344;
  }
  else
  {
    sub_10000B164(a1, a2);
    v7 = sub_10001B2E8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10001B2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 120));
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B56C(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = a1;
  a4;
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v11 = v10;

  v4[4] = v9;
  v4[5] = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_100174D2C);
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_10001B610;
  return sub_10001ADDC(v9, v11, a2);
}

uint64_t sub_10001B610()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(v2);

  sub_100005AB0(v4, v3);
  v7 = *(_QWORD *)(v6 + 24);
  if (v0)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10001B6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v10);
  v5[14] = swift_task_alloc(v10);
  v5[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_10001B774, 0, 0);
}

uint64_t sub_10001B774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  Swift::String v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  sub_100005A38(v2, v3);
  v4 = sub_100005A38(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v39 = *(_QWORD *)(v1 + 96);
    v40 = *(_QWORD *)(v1 + 88);
    v41 = *(_QWORD *)(v1 + 120);
    v8 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 32);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v42 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = Data.base64EncodedString(options:)(0);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v11._countAndFlagsBits, (unint64_t)v11._object, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease(v11._object);
    sub_100005AB0(v8, v7);
    sub_100005AB0(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "BiometricStoreSessionProxy setModifiedGlobalAuthACL, modifiedAuthACL = %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v12(v41, v40);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 120);
    v14 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 24);
    v16 = *(_QWORD *)(v1 + 32);
    sub_100005AB0(v17, v16);
    sub_100005AB0(v17, v16);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(_QWORD *)(v1 + 128) = v12;
  sub_1000244B8();
  v28 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 136) = v28;
  if (v28)
  {
    v29 = dword_1001773D4;
    swift_retain(v28);
    v30 = (_QWORD *)swift_task_alloc(v29);
    *(_QWORD *)(v1 + 144) = v30;
    *v30 = v1;
    v30[1] = sub_10001BB74;
    return sub_100097AD8(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  }
  else
  {
    v32 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v32, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v33 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_10000745C();
    v36 = swift_allocError(v34, v35, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v32, 0, v33, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000032, 0x800000010012F200, 142);
    v38 = swift_willThrow(v37);
    v19 = *(_QWORD *)(v1 + 120);
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 128);
    v20 = *(_QWORD *)(v1 + 104);
    v21 = *(_QWORD *)(v1 + 112);
    v23 = *(_QWORD *)(v1 + 80);
    v22 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v38);
    DIPRecordError(_:message:log:)(v36, 0, 0xE000000000000000, v20);
    v18(v20, v22);
    sub_10002473C();
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v26 = v25;
    static NSError.mapFromError(_:domain:mapper:)(v36, v24, v25, sub_1000C4B28, 0);
    v27 = swift_bridgeObjectRelease(v26);
    swift_willThrow(v27);
    swift_errorRelease(v36);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001BB74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 144);
  v3 = *v1;
  *(_QWORD *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10001BEC0, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_10017723C);
  *(_QWORD *)(v3 + 160) = v5;
  *v5 = v3;
  v5[1] = sub_10001BC18;
  return sub_1000A385C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_10001BC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  v5[21] = a1;
  v5[22] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_10001BDC4;
  }
  else
  {
    v5[23] = a2;
    v7 = sub_10001BC94;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10001BC94()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 168);
  if (*(uint64_t *)(v0 + 184) < 1)
  {
    v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
    v3 = defaultLogger()(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "no bound credential present skip returning uuids", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);

    v8(v9, v10);
    swift_release(v7);
    v1 = &_swiftEmptyArrayStorage;
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 136));
  }
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void *))(v0 + 8))(v1);
}

uint64_t sub_10001BDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v8);
  sub_10002473C();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v11 = v10;
  static NSError.mapFromError(_:domain:mapper:)(v2, v9, v10, sub_1000C4B28, 0);
  v12 = swift_bridgeObjectRelease(v11);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001BEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v8);
  sub_10002473C();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v11 = v10;
  static NSError.mapFromError(_:domain:mapper:)(v2, v9, v10, sub_1000C4B28, 0);
  v12 = swift_bridgeObjectRelease(v11);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C0F4(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  a4;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;

  v4[4] = v10;
  v4[5] = v12;
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v15 = v14;

  v4[6] = v13;
  v4[7] = v15;
  v16 = (_QWORD *)swift_task_alloc(dword_100174D34);
  v4[8] = v16;
  *v16 = v4;
  v16[1] = sub_10001C1BC;
  return sub_10001B6C8(v10, v12, v13, v15);
}

uint64_t sub_10001C1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Class isa;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 56);
  v6 = *(_QWORD *)(*v2 + 64);
  v9 = *(_QWORD *)(*v2 + 40);
  v8 = *(_QWORD *)(*v2 + 48);
  v10 = *(_QWORD *)(*v2 + 32);
  v11 = *(void **)(*v2 + 16);
  v12 = *v2;
  swift_task_dealloc(v6);

  sub_100005AB0(v8, v7);
  sub_100005AB0(v10, v9);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v14 = (void *)a1;
  }
  else if (a1)
  {
    type metadata accessor for UUID(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    a1 = 0;
    v14 = isa;
  }
  else
  {
    isa = 0;
    v14 = 0;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v15)[2](v15, isa, a1);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v12 + 8))();
}

uint64_t sub_10001C2C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001C360, 0, 0);
}

uint64_t sub_10001C360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy globalAuthACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = dword_100177254;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_10001C644;
    return sub_1000A292C(0xD000000000000012, 0x800000010012D7B0);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0x75416C61626F6C67, 0xEF29284C43416874, 166);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001C644(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10001C718;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_10001C6B8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10001C718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C928(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D3C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10001C988;
  return sub_10001C2C8();
}

uint64_t sub_10001C988(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 32);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v5);

  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  if (v3)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10001CA44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001CADC, 0, 0);
}

uint64_t sub_10001CADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy deleteGlobalAuthACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = dword_1001773AC;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_10001CD9C;
    return sub_100097EE8();
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000015, 0x800000010012F1E0, 185);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_10001CD9C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10001CE74;
  }
  else
  {
    *(_BYTE *)(v4 + 112) = a1 & 1;
    v6 = sub_10001CE14;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001CE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 112));
}

uint64_t sub_10001CE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10001D088(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D44;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10001D0E8;
  return sub_10001CA44();
}

uint64_t sub_10001D0E8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);

  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10001D194()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001D22C, 0, 0);
}

uint64_t sub_10001D22C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy globalAuthACLTemplateUUIDs", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = dword_10017723C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_10001D504;
    return sub_1000A385C(0xD000000000000012, 0x800000010012D7B0);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001CLL, 0x800000010012F1C0, 203);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001D504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 96);
  *(_QWORD *)(*v3 + 104) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000259AC;
  }
  else
  {
    *(_QWORD *)(v6 + 112) = a2;
    *(_QWORD *)(v6 + 120) = a1;
    v8 = sub_10001D57C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10001D57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));
}

uint64_t sub_10001D6F8(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D4C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10001D758;
  return sub_10001D194();
}

uint64_t sub_10001D758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD);
  void *v11;
  Class isa;

  v4 = v2;
  v7 = *(_QWORD *)(*v3 + 32);
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc(v7);

  v10 = *(void (***)(_QWORD, _QWORD))(v9 + 24);
  if (v4)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    v10[2](v10, 0);

    _Block_release(v10);
  }
  else
  {
    type metadata accessor for UUID(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (*)(void (**)(_QWORD, _QWORD), Class, uint64_t, _QWORD))v10[2])(v10, isa, a2, 0);

    _Block_release(v10);
    swift_bridgeObjectRelease(a1);
  }
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10001D844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPTrustKey(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v12);
  v5[16] = swift_task_alloc(v12);
  return swift_task_switch(sub_10001D90C, 0, 0);
}

uint64_t sub_10001D90C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy generatePrearmTrustCertificate", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 112);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 136) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 144) = v20;
  if (v20)
  {
    v21 = dword_1001773A4;
    swift_retain(v20);
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v1 + 152) = v22;
    *v22 = v1;
    v22[1] = sub_10001DBE8;
    return sub_1000981E4(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  }
  else
  {
    v24 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v24, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 56));
    v25 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_10000745C();
    v28 = swift_allocError(v26, v27, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v24, 0, v25, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000034, 0x800000010012F150, 220);
    v30 = swift_willThrow(v29);
    v11 = *(_QWORD *)(v1 + 128);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 136);
    v12 = *(_QWORD *)(v1 + 120);
    v14 = *(_QWORD *)(v1 + 96);
    v13 = *(_QWORD *)(v1 + 104);
    v15 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v30);
    DIPRecordError(_:message:log:)(v28, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v18 = v17;
    static NSError.mapFromError(_:domain:mapper:)(v28, v16, v17, sub_1000C4B28, 0);
    v19 = swift_bridgeObjectRelease(v18);
    swift_willThrow(v19);
    swift_errorRelease(v28);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001DBE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10001E164, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_100177254);
  *(_QWORD *)(v3 + 168) = v5;
  *v5 = v3;
  v5[1] = sub_10001DC8C;
  return sub_1000A292C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_10001DC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10001E04C;
  else
    v5 = sub_10001DCF8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001DCF8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  Class isa;
  Class v12;
  NSString v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  if (v1)
  {
    v42 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 96);
    v40 = *(_QWORD *)(v0 + 88);
    v41 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = DIPTrustKey.keyBlob.getter();
    v37 = v6;
    v38 = v5;
    v7 = DIPTrustKey.baaCertificate.getter();
    v9 = v8;
    swift_bridgeObjectRetain(v4);
    v36 = objc_msgSend(v1, "aclType") == (id)2;
    v10 = objc_allocWithZone((Class)DCCredentialTrust);
    v39 = v2;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v12 = Data._bridgeToObjectiveC()().super.isa;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v14 = objc_msgSend(v10, "initWithCredentialKeyBlob:baaCertificate:pairingID:isAccessibilityEnabled:", isa, v12, v13, v36);
    sub_100005AB0(v7, v9);
    sub_100005AB0(v38, v37);

    swift_release(v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v3, v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v3);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(id))(v0 + 8))(v14);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 72);
    v19 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v18, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 56));
    v20 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_10000745C();
    v23 = swift_allocError(v21, v22, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010012F190, 0, v18, 0, v20, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000034, 0x800000010012F150, 226);
    swift_willThrow(v24);
    swift_release(v2);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v19);
    v27 = *(_QWORD *)(v0 + 128);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
    v28 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 72);
    defaultLogger()(v25);
    DIPRecordError(_:message:log:)(v23, 0, 0xE000000000000000, v28);
    v26(v28, v29);
    sub_10002473C();
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v34 = v33;
    static NSError.mapFromError(_:domain:mapper:)(v23, v32, v33, sub_1000C4B28, 0);
    v35 = swift_bridgeObjectRelease(v34);
    swift_willThrow(v35);
    swift_errorRelease(v23);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001E04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 144));
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 72);
  defaultLogger()(v4);
  DIPRecordError(_:message:log:)(v5, 0, 0xE000000000000000, v8);
  v6(v8, v9);
  sub_10002473C();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v14 = v13;
  static NSError.mapFromError(_:domain:mapper:)(v5, v12, v13, sub_1000C4B28, 0);
  v15 = swift_bridgeObjectRelease(v14);
  swift_willThrow(v15);
  swift_errorRelease(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = swift_release(*(_QWORD *)(v0 + 144));
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 72);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v6);
  sub_10002473C();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v11 = v10;
  static NSError.mapFromError(_:domain:mapper:)(v2, v9, v10, sub_1000C4B28, 0);
  v12 = swift_bridgeObjectRelease(v11);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E39C(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  a4;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;

  v4[4] = v10;
  v4[5] = v12;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v15 = v14;

  v4[6] = v15;
  v16 = (_QWORD *)swift_task_alloc(dword_100174D54);
  v4[7] = v16;
  *v16 = v4;
  v16[1] = sub_10001E464;
  return sub_10001D844(v10, v12, v13, v15);
}

uint64_t sub_10001E464(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v6 = *(_QWORD *)(*v2 + 48);
  v5 = *(_QWORD *)(*v2 + 56);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 24);
  sub_100005AB0(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_10001E538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_10001E5D4, 0, 0);
}

uint64_t sub_10001E5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 72);
    v7 = *(_QWORD *)(v1 + 80);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v32 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v1 + 16) = sub_10003FA80(0xD00000000000001ALL, 0x800000010012F130, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 72);
    v11 = *(_QWORD *)(v1 + 80);

    v10 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  }
  v10(v5, v6);
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000244B8();
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v21;
  if (v21)
  {
    v22 = dword_10017739C;
    swift_retain(v21);
    v23 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v1 + 120) = v23;
    *v23 = v1;
    v23[1] = sub_10001E944;
    return sub_100098A84(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v25 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v25, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v25, 0, v26, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001ALL, 0x800000010012F130, 247);
    v31 = swift_willThrow(v30);
    v13 = *(_QWORD *)(v1 + 96);
    v12 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v14 = *(_QWORD *)(v1 + 88);
    v16 = *(_QWORD *)(v1 + 64);
    v15 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v31);
    DIPRecordError(_:message:log:)(v29, 0, 0xE000000000000000, v14);
    v12(v14, v15);
    sub_10002473C();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v19 = v18;
    static NSError.mapFromError(_:domain:mapper:)(v29, v17, v18, sub_1000C4B28, 0);
    v20 = swift_bridgeObjectRelease(v19);
    swift_willThrow(v20);
    swift_errorRelease(v29);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001E944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 120);
  *(_QWORD *)(*v3 + 128) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10001EA1C;
  }
  else
  {
    *(_QWORD *)(v6 + 136) = a2;
    *(_QWORD *)(v6 + 144) = a1;
    v8 = sub_10001E9BC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10001E9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 136));
}

uint64_t sub_10001EA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EC40(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = v8;

  v3[4] = v7;
  v3[5] = v9;
  v10 = (_QWORD *)swift_task_alloc(dword_100174D5C);
  v3[6] = v10;
  *v10 = v3;
  v10[1] = sub_10001ECD4;
  return sub_10001E538(v7, v9);
}

uint64_t sub_10001ECD4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *(_QWORD *)(*v3 + 48);
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc(v7);

  sub_100005AB0(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100005AB0(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10001EDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[12] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[13] = swift_task_alloc(v11);
  v6[14] = swift_task_alloc(v11);
  return swift_task_switch(sub_10001EE50, 0, 0);
}

uint64_t sub_10001EE50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy generatePhoneToken", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 120) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 128) = v19;
  if (v19)
  {
    v20 = dword_100177394;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 136) = v21;
    *v21 = v1;
    v21[1] = sub_10001F120;
    return sub_100099068(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000002BLL, 0x800000010012F100, 264);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 112);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v12 = *(_QWORD *)(v1 + 104);
    v14 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001F120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 136);
  *(_QWORD *)(*v3 + 144) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10001F290;
  }
  else
  {
    *(_QWORD *)(v6 + 152) = a2;
    *(_QWORD *)(v6 + 160) = a1;
    v8 = sub_10001F198;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10001F198()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  NSString v9;
  id v10;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = objc_allocWithZone((Class)DCCredentialAuthorizationToken);
  swift_bridgeObjectRetain(v6);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v10 = objc_msgSend(v7, "initWithCredentialAuthorizationToken:pairingID:", isa, v9);
  sub_100005AB0(v1, v2);

  swift_release(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_10001F290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 128));
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F4D0(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v10 = a1;
  v11 = a2;
  v12 = a3;
  a5;
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v15 = v14;

  v5[5] = v13;
  v5[6] = v15;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v18 = v17;

  v5[7] = v18;
  v19 = (_QWORD *)swift_task_alloc(dword_100174D64);
  v5[8] = v19;
  *v19 = v5;
  v19[1] = sub_10001F5B0;
  return sub_10001EDB0((uint64_t)v10, v13, v15, v16, v18);
}

uint64_t sub_10001F5B0(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;

  v3 = v1;
  v6 = *(_QWORD *)(*v2 + 56);
  v5 = *(_QWORD *)(*v2 + 64);
  v8 = *(void **)(*v2 + 16);
  v7 = *(void **)(*v2 + 24);
  v9 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 + 32);
  sub_100005AB0(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48));
  if (v3)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, a1, 0);
    _Block_release(v10);

  }
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10001F688(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  return swift_task_switch(sub_10001F720, 0, 0);
}

uint64_t sub_10001F720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy establishPrearmTrustV2", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 120) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 128) = v19;
  if (v19)
  {
    v20 = dword_10017736C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 136) = v21;
    *v21 = v1;
    v21[1] = sub_10001F9E4;
    return sub_1000998CC(*(_QWORD *)(v1 + 48));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001ALL, 0x800000010012F0C0, 283);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 112);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v12 = *(_QWORD *)(v1 + 104);
    v14 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001F9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = (_QWORD *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v5 = v4[17];
  v4[18] = a2;
  v4[19] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10001FCD4;
  else
    v6 = sub_10001FA50;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001FA50()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class isa;
  id v27;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1 >> 60 == 15)
  {
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v3, enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), *(_QWORD *)(v0 + 64));
    v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v6 = sub_10000745C();
    v7 = swift_allocError(v5, v6, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x800000010012F0E0, 0, v3, 0, v4, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001ALL, 0x800000010012F0C0, 287);
    swift_willThrow(v8);
    v9 = swift_release(v2);
    v11 = *(_QWORD *)(v0 + 112);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    defaultLogger()(v9);
    DIPRecordError(_:message:log:)(v7, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v7, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v7);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 24);
    v21 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 80);
    v25 = objc_allocWithZone((Class)DCCredentialAttestation);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v27 = objc_msgSend(v25, "initWithData:type:", isa, 1);
    sub_10000B164(v20, v1);

    swift_release(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(id))(v0 + 8))(v27);
  }
}

uint64_t sub_10001FCD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 128));
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001FEF8(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_100174D6C;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_10001FF74;
  return sub_10001F688((uint64_t)v7);
}

uint64_t sub_10001FF74(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 40);
  v7 = *(void **)(*v2 + 16);
  v6 = *(void **)(*v2 + 24);
  v8 = *v2;
  swift_task_dealloc(v5);

  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 32);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_10002003C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000200D4, 0, 0);
}

uint64_t sub_1000200D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Class isa;
  id v36;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy nonceForAuthorizationToken", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v18 = *(_QWORD **)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v18)
  {
    v19 = v18[6];
    v20 = v18[7];
    sub_1000151A4(v18 + 3, v19);
    swift_retain(v18);
    v28 = dispatch thunk of AppleIDVManaging.generateNonceOnWatch()(v19, v20);
    v30 = v29;
    v32 = *(_QWORD *)(v1 + 64);
    v31 = *(_QWORD *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 40);
    v34 = objc_allocWithZone((Class)DCCredentialNonce);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v36 = objc_msgSend(v34, "initWithCredentialNonce:", isa);
    sub_100005AB0(v28, v30);

    swift_release(v18);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(id))(v1 + 8))(v36);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v21, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v22 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v21, 0, v22, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001CLL, 0x800000010012F0A0, 308);
    v27 = swift_willThrow(v26);
    v10 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v27);
    DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v10);
    v9(v10, v12);
    sub_10002473C();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v16 = v15;
    static NSError.mapFromError(_:domain:mapper:)(v25, v14, v15, sub_1000C4B28, 0);
    v17 = swift_bridgeObjectRelease(v16);
    swift_willThrow(v17);
    swift_errorRelease(v25);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100020544(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D74;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10001C988;
  return sub_10002003C();
}

uint64_t sub_1000205A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10002063C, 0, 0);
}

uint64_t sub_10002063C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy revokeCredentialAuthorizationToken", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[9];
  v7 = v1[6];
  v8 = v1[7];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v20 = *(_QWORD **)(v1[2] + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v20)
  {
    v21 = v20[6];
    v22 = v20[7];
    sub_1000151A4(v20 + 3, v21);
    swift_retain(v20);
    dispatch thunk of AppleIDVManaging.revokeCredentialAuthorizationToken()(v21, v22);
    swift_release(v20);
    v23 = v1[8];
    v24 = v1[5];
    swift_task_dealloc(v1[9]);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    v18 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    v25 = v1[5];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[4] + 104))(v25, enum case for DIPError.Code.badLogic(_:), v1[3]);
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v25, 0, v26, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000024, 0x800000010012F070, 325);
    v31 = swift_willThrow(v30);
    v10 = v1[8];
    v11 = v1[9];
    v13 = v1[5];
    v12 = v1[6];
    defaultLogger()(v31);
    DIPRecordError(_:message:log:)(v29, 0, 0xE000000000000000, v10);
    v9(v10, v12);
    sub_10002473C();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v16 = v15;
    static NSError.mapFromError(_:domain:mapper:)(v29, v14, v15, sub_1000C4B28, 0);
    v17 = swift_bridgeObjectRelease(v16);
    swift_willThrow(v17);
    swift_errorRelease(v29);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    v18 = (uint64_t (*)(void))v1[1];
  }
  return v18();
}

uint64_t sub_100020A24(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D7C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000259A4;
  return sub_1000205A4();
}

uint64_t sub_100020A84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100020B1C, 0, 0);
}

uint64_t sub_100020B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy prearmCredential", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 88) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 96) = v19;
  if (v19)
  {
    v20 = dword_10017735C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 104) = v21;
    *v21 = v1;
    v21[1] = sub_100020DE0;
    return sub_10009A358(*(_QWORD *)(v1 + 16));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000017, 0x800000010012F050, 341);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 80);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 88);
    v12 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100020DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100020EA0;
  else
    v3 = sub_100020E44;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100020E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000210C4(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_100174D84;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_100021140;
  return sub_100020A84((uint64_t)v7);
}

uint64_t sub_100021140()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(*v1 + 40);
  v4 = *(void **)(*v1 + 16);
  v3 = *(void **)(*v1 + 24);
  v5 = *v1;
  swift_task_dealloc(v2);

  v6 = *(_QWORD *)(v5 + 32);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 32), 0);
  }
  _Block_release(*(const void **)(v5 + 32));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000211E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  return swift_task_switch(sub_100021288, 0, 0);
}

uint64_t sub_100021288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy credentialAuthenticationTokenStatus", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 88);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v19)
  {
    swift_retain(*(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage));
    v20 = sub_10009AB70();
    v21 = defaultLogger()(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v24 = 134217984;
      *(_QWORD *)(v1 + 16) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v24 + 4);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Credential authentication token status: %lu", v24, 0xCu);
      swift_slowDealloc(v24, -1, -1);
    }
    swift_release(v19);

    v26 = *(_QWORD *)(v1 + 80);
    v25 = *(_QWORD *)(v1 + 88);
    v27 = *(_QWORD *)(v1 + 72);
    v28 = *(_QWORD *)(v1 + 48);
    v9(v26, *(_QWORD *)(v1 + 56));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v20);
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v31 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000025, 0x800000010012F020, 357);
    v36 = swift_willThrow(v35);
    v10 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    v12 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v12);
    v9(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v34, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v34);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100021744(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D8C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000217A4;
  return sub_1000211E4();
}

uint64_t sub_1000217A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);

  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v7 + 16))(v7);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10002184C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000218E4, 0, 0);
}

uint64_t sub_1000218E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy casdCertificate", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  sub_1000244B8();
  v18 = *(_QWORD *)(v1 + 16);
  v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  if (v19)
  {
    swift_retain(*(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage));
    v27 = sub_10009ADA4();
    v29 = v28;
    v31 = *(_QWORD *)(v1 + 64);
    v30 = *(_QWORD *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 40);
    v32 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v27);
    v34 = swift_task_alloc(32);
    *(_QWORD *)(v34 + 16) = v27;
    *(_QWORD *)(v34 + 24) = v29;
    Logger.cryptoParam(_:)(sub_100024778, v34);
    swift_release(v19);
    swift_task_dealloc(v34);
    v9(v31, v32);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v27, v29);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v20, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v21 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_10000745C();
    v24 = swift_allocError(v22, v23, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v20, 0, v21, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000011, 0x800000010012EFE0, 375);
    v26 = swift_willThrow(v25);
    v10 = *(_QWORD *)(v1 + 64);
    v11 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v26);
    DIPRecordError(_:message:log:)(v24, 0, 0xE000000000000000, v10);
    v9(v10, v12);
    sub_10002473C();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v16 = v15;
    static NSError.mapFromError(_:domain:mapper:)(v24, v14, v15, sub_1000C4B28, 0);
    v17 = swift_bridgeObjectRelease(v16);
    swift_willThrow(v17);
    swift_errorRelease(v24);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_100021C18()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base64EncodedString(options:)(0);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001DLL;
}

uint64_t sub_100021DC4(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D94;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100021E24;
  return sub_10002184C();
}

uint64_t sub_100021E24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 32);
  v9 = *(void **)(*v3 + 16);
  v10 = *v3;
  swift_task_dealloc(v8);

  if (v4)
  {
    v11 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v13 = (void *)v11;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100005AB0(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100021EF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  v1[12] = swift_task_alloc(v6);
  return swift_task_switch(sub_100021FA8, 0, 0);
}

uint64_t sub_100021FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy globalProgenitorKeyAttestation", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 104) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v21;
  if (v21)
  {
    v22 = dword_100177354;
    swift_retain(v21);
    v23 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v1 + 120) = v23;
    *v23 = v1;
    v23[1] = sub_100022288;
    return sub_10009AF20();
  }
  else
  {
    v25 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v25, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v25, 0, v26, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000020, 0x800000010012EFB0, 393);
    v31 = swift_willThrow(v30);
    v11 = *(_QWORD *)(v1 + 96);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v12 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    v14 = *(_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 48);
    v15 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v31);
    DIPRecordError(_:message:log:)(v29, 0, 0xE000000000000000, v14);
    v10(v14, v15);
    sub_10002473C();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v19 = v18;
    static NSError.mapFromError(_:domain:mapper:)(v29, v17, v18, sub_1000C4B28, 0);
    v20 = swift_bridgeObjectRelease(v19);
    swift_willThrow(v20);
    swift_errorRelease(v29);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100022288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100022634;
  else
    v6 = sub_1000222F8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000222F8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 136);
  if (v2 >> 60 == 15)
  {
    v3 = defaultLogger()(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "no progenitor key attestation available", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v7 = *(_QWORD *)(v1 + 112);
    v9 = *(_QWORD *)(v1 + 80);
    v10 = *(_QWORD *)(v1 + 56);

    swift_release(v7);
    v8(v9, v10);
    v11 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 128);
    v13 = sub_100005A38(v12, *(_QWORD *)(v1 + 136));
    defaultLogger()(v13);
    sub_100005A38(v12, v2);
    v14 = sub_100005A38(v12, v2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v1 + 128);
    v18 = *(_QWORD *)(v1 + 136);
    v20 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v21 = *(_QWORD *)(v1 + 88);
    v22 = *(_QWORD *)(v1 + 56);
    if (v17)
    {
      v36 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v37 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v1 + 16) = sub_10003FA80(v25._countAndFlagsBits, (unint64_t)v25._object, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v23 + 4);
      swift_bridgeObjectRelease(v25._object);
      sub_10000B164(v19, v18);
      sub_10000B164(v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Progenitor key attestation retrieved : %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v36(v21, v22);
    }
    else
    {
      sub_10000B164(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
      sub_10000B164(v19, v18);

      v20(v21, v22);
    }
    v27 = *(_QWORD *)(v1 + 128);
    v26 = *(_QWORD *)(v1 + 136);
    v28 = *(_QWORD *)(v1 + 112);
    v29 = objc_allocWithZone((Class)DCCredentialAttestation);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(v29, "initWithData:type:", isa, 1);
    sub_10000B164(v27, v26);

    sub_10000B164(v27, v26);
    swift_release(v28);
  }
  v31 = *(_QWORD *)(v1 + 88);
  v33 = *(_QWORD *)(v1 + 72);
  v32 = *(_QWORD *)(v1 + 80);
  v34 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(id))(v1 + 8))(v11);
}

uint64_t sub_100022634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 56);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v7);
  v3(v7, v9);
  sub_10002473C();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v12 = v11;
  static NSError.mapFromError(_:domain:mapper:)(v2, v10, v11, sub_1000C4B28, 0);
  v13 = swift_bridgeObjectRelease(v12);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022860(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174D9C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10002599C;
  return sub_100021EF8();
}

uint64_t sub_1000228C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  v1[12] = swift_task_alloc(v6);
  return swift_task_switch(sub_100022970, 0, 0);
}

uint64_t sub_100022970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy globalThirdPartyProgenitorKeyAttestation", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 104) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v21;
  if (v21)
  {
    v22 = dword_10017734C;
    swift_retain(v21);
    v23 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v1 + 120) = v23;
    *v23 = v1;
    v23[1] = sub_100022C50;
    return sub_10009B2B8();
  }
  else
  {
    v25 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v25, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v25, 0, v26, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000002ALL, 0x800000010012EF80, 421);
    v31 = swift_willThrow(v30);
    v11 = *(_QWORD *)(v1 + 96);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v12 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    v14 = *(_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 48);
    v15 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v31);
    DIPRecordError(_:message:log:)(v29, 0, 0xE000000000000000, v14);
    v10(v14, v15);
    sub_10002473C();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v19 = v18;
    static NSError.mapFromError(_:domain:mapper:)(v29, v17, v18, sub_1000C4B28, 0);
    v20 = swift_bridgeObjectRelease(v19);
    swift_willThrow(v20);
    swift_errorRelease(v29);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100022C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = (uint64_t (*)(uint64_t))sub_100025994;
  else
    v6 = sub_100022CC0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100022CC0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 136);
  if (v2 >> 60 == 15)
  {
    v3 = defaultLogger()(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "no third party progenitor key attestation available", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v7 = *(_QWORD *)(v1 + 112);
    v9 = *(_QWORD *)(v1 + 80);
    v10 = *(_QWORD *)(v1 + 56);

    swift_release(v7);
    v8(v9, v10);
    v11 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 128);
    v13 = sub_100005A38(v12, *(_QWORD *)(v1 + 136));
    defaultLogger()(v13);
    sub_100005A38(v12, v2);
    v14 = sub_100005A38(v12, v2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v1 + 128);
    v18 = *(_QWORD *)(v1 + 136);
    v20 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v21 = *(_QWORD *)(v1 + 88);
    v22 = *(_QWORD *)(v1 + 56);
    if (v17)
    {
      v36 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v37 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v1 + 16) = sub_10003FA80(v25._countAndFlagsBits, (unint64_t)v25._object, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v23 + 4);
      swift_bridgeObjectRelease(v25._object);
      sub_10000B164(v19, v18);
      sub_10000B164(v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Third party progenitor key attestation retrieved : %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v36(v21, v22);
    }
    else
    {
      sub_10000B164(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
      sub_10000B164(v19, v18);

      v20(v21, v22);
    }
    v27 = *(_QWORD *)(v1 + 128);
    v26 = *(_QWORD *)(v1 + 136);
    v28 = *(_QWORD *)(v1 + 112);
    v29 = objc_allocWithZone((Class)DCCredentialAttestation);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(v29, "initWithData:type:", isa, 1);
    sub_10000B164(v27, v26);

    sub_10000B164(v27, v26);
    swift_release(v28);
  }
  v31 = *(_QWORD *)(v1 + 88);
  v33 = *(_QWORD *)(v1 + 72);
  v32 = *(_QWORD *)(v1 + 80);
  v34 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(id))(v1 + 8))(v11);
}

uint64_t sub_100023118(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174DA4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10002599C;
  return sub_1000228C0();
}

uint64_t sub_100023178()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100023210, 0, 0);
}

uint64_t sub_100023210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy boundAppletPresentmentACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = dword_10017733C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_1000234CC;
    return sub_10009B654();
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD00000000000001BLL, 0x800000010012EF60, 449);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000234CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 96);
  *(_QWORD *)(*v3 + 104) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10001C718;
  }
  else
  {
    *(_QWORD *)(v6 + 112) = a2;
    *(_QWORD *)(v6 + 120) = a1;
    v8 = sub_10001D57C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100023660(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174DAC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100025998;
  return sub_100023178();
}

uint64_t sub_1000236C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 128) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v4 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v9);
  return swift_task_switch(sub_100023760, 0, 0);
}

uint64_t sub_100023760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy refreshProgenitorKeyDesignations", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 88);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 96) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 104) = v19;
  if (v19)
  {
    v20 = dword_100177294;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 112) = v21;
    *v21 = v1;
    v21[1] = sub_100023A30;
    return sub_10009C118(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 128));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 48) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 40));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000047, 0x800000010012EF10, 467);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 88);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 96);
    v12 = *(_QWORD *)(v1 + 80);
    v14 = *(_QWORD *)(v1 + 56);
    v13 = *(_QWORD *)(v1 + 64);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100023A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100023AF0;
  else
    v3 = sub_100023A94;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100023A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100023AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10002473C();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_1000C4B28, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100023D1C(void *a1, char a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a1)
  {
    v8 = a1;
    v9 = a4;
    a1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v11 = v10;

  }
  else
  {
    v12 = a4;
    v11 = 0xF000000000000000;
  }
  v4[4] = a1;
  v4[5] = v11;
  v13 = (_QWORD *)swift_task_alloc(dword_100174DB4);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_100023DCC;
  return sub_1000236C0((uint64_t)a1, v11, a2 & 1);
}

uint64_t sub_100023DCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(v2);

  sub_10000B164(v4, v3);
  v7 = *(_QWORD *)(v6 + 24);
  if (v0)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100023E84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100023F1C, 0, 0);
}

uint64_t sub_100023F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BiometricStoreSessionProxy clearProgenitorKeyDesignations", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_1000244B8();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = dword_10017731C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_1000241DC;
    return sub_10009C480();
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v23, 0, v24, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000020, 0x800000010012EEE0, 484);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10002473C();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCBiometricStoreErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_1000C4B28, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000241DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10001C718;
  else
    v3 = sub_100024240;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100024240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000243B8(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100174DBC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100024418;
  return sub_100023E84();
}

uint64_t sub_100024418()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_1000244B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Strong;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_connection);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7._countAndFlagsBits = 0xD000000000000022;
    v7._object = (void *)0x800000010012EE50;
    if (!NSXPCConnection.isEntitled(_:)(v7))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      v8 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v9 = type metadata accessor for DIPError(0);
      v10 = sub_10000745C();
      swift_allocError(v9, v10, 0, 0);
      v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010012EE80, 0, v4, 0, v8, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000021, 0x800000010012EE20, 504);
      swift_willThrow(v11);
    }

  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    v12 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_10000745C();
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x800000010012ED80, 0, v4, 0, v12, 0xD00000000000005CLL, 0x800000010012EDC0, 0xD000000000000021, 0x800000010012EE20, 501);
    swift_willThrow(v15);
  }
}

uint64_t type metadata accessor for BiometricStoreSessionProxy()
{
  return objc_opt_self(_TtC7idcredd26BiometricStoreSessionProxy);
}

unint64_t sub_10002473C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100175900;
  if (!qword_100175900)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100175900);
  }
  return result;
}

unint64_t sub_100024778()
{
  return sub_100021C18();
}

uint64_t sub_100024780()
{
  uint64_t v0;

  return sub_1000A4494(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100024788()
{
  uint64_t v0;

  return sub_1000A4474(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100024794()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174E3C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174E38 + dword_100174E38))(v2, v3);
}

uint64_t sub_100024800(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100177B74);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100177B70 + dword_100177B70))(a1, v4, v5, v6);
}

uint64_t sub_100024888()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = *(void **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_100174E5C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(void *, char, void *, void *))((char *)&dword_100174E58 + dword_100174E58))(v2, v3, v5, v4);
}

uint64_t sub_100024910()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174E7C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174E78 + dword_100174E78))(v2, v3);
}

uint64_t sub_100024978()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177B64);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100177B60 + dword_100177B60))(v2, v3, v4);
}

uint64_t sub_1000249F8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174E9C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174E98 + dword_100174E98))(v2, v3);
}

uint64_t sub_100024A68()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174EBC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174EB8 + dword_100174EB8))(v2, v3);
}

uint64_t sub_100024AD8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174EDC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174ED8 + dword_100174ED8))(v2, v3);
}

uint64_t sub_100024B48()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174EFC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174EF8 + dword_100174EF8))(v2, v3);
}

uint64_t sub_100024BB8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100174F1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100174F18 + dword_100174F18))(v2, v3, v4);
}

uint64_t sub_100024C30()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174F3C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174F38 + dword_100174F38))(v2, v3);
}

uint64_t sub_100024CA0()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174F5C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174F58 + dword_100174F58))(v2, v3);
}

uint64_t sub_100024D10()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100174F7C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100174F78 + dword_100174F78))(v2, v3, v4);
}

uint64_t sub_100024D84()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100024DC8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100174F9C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_100174F98 + dword_100174F98))(v2, v3, v4, v5, v6);
}

uint64_t sub_100024E54()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100024E88()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100174FBC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100174FB8 + dword_100174FB8))(v2, v3, v4);
}

uint64_t sub_100024F00()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100174FDC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100174FD8 + dword_100174FD8))(v2, v3, v5, v4);
}

uint64_t sub_100024F84()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100174FFC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100174FF8 + dword_100174FF8))(v2, v3);
}

uint64_t sub_100024FF4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10017501C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100175018 + dword_100175018))(v2, v3);
}

uint64_t sub_100025064()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10017503C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000935C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100175038 + dword_100175038))(v2, v3);
}

uint64_t sub_1000250D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100025110()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10017505C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100175058 + dword_100175058))(v2, v3, v5, v4);
}

uint64_t sub_100025194()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000251C8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10017507C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(void *, uint64_t, void *, void *))((char *)&dword_100175078 + dword_100175078))(v2, v3, v5, v4);
}

uint64_t sub_10002524C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10017509C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100175098 + dword_100175098))(v2, v3);
}

uint64_t sub_1000252BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000252E8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001750BC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001750B8 + dword_1001750B8))(v2, v3);
}

uint64_t sub_100025354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 40));
  return swift_deallocObject(v2, 48, 7);
}

id sub_100025380(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  id result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  objc_class *v28;
  char *v29;
  uint64_t v30;
  objc_super v31;
  __int128 v32[2];
  __int128 v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[6];

  v3 = v2;
  v30 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v3[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_connection];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_connection], 0);
  v10 = OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_storage] = 0;
  v11 = v3;
  v12 = defaultLogger()(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    v29 = v3;
    v16 = v10;
    v17 = v11;
    v18 = a2;
    v19 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Creating BiometricStoreSessionProxy", v15, 2u);
    v20 = v19;
    a2 = v18;
    v11 = v17;
    v10 = v16;
    v3 = v29;
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = (id)os_transaction_create("BiometricStoreSessionProxy");
  if (result)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd26BiometricStoreSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign(v9, v30);
    swift_retain(a2);
    v22 = sub_100079C04();
    v36[3] = type metadata accessor for FeatureFlagProvider(0);
    v36[4] = &protocol witness table for FeatureFlagProvider;
    sub_1000258FC(v36);
    FeatureFlagProvider.init()();
    v23 = type metadata accessor for BiometricsHelper(0);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v24 = BiometricsHelper.init()();
    v34 = type metadata accessor for DeviceInformationProvider(0);
    v35 = &protocol witness table for DeviceInformationProvider;
    sub_1000258FC(&v33);
    DeviceInformationProvider.init()();
    v25 = type metadata accessor for BiometricStorage();
    v26 = (_QWORD *)swift_allocObject(v25, 160, 7);
    v26[2] = a2;
    sub_100025938((uint64_t)v36, (uint64_t)(v26 + 8));
    v26[13] = v22;
    type metadata accessor for AppleIDVManager(0);
    sub_100112A6C((uint64_t *)v32);
    sub_10000CE40(v36);
    sub_10002597C(v32, (uint64_t)(v26 + 3));
    v26[14] = v24;
    sub_10002597C(&v33, (uint64_t)(v26 + 15));
    v27 = *(_QWORD *)&v3[v10];
    *(_QWORD *)&v3[v10] = v26;

    swift_release(v27);
    v28 = (objc_class *)type metadata accessor for BiometricStoreSessionProxy();
    v31.receiver = v11;
    v31.super_class = v28;
    return objc_msgSendSuper2(&v31, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100025608(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *Strong;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;
  _BYTE v28[8];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_unknownObjectWeakInit(v28, a1);
  defaultLogger()(v8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 67109120;
    LODWORD(aBlock) = -[NSObject processIdentifier](v9, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v12 + 4);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Biometric store listener connection received from %d", v12, 8u);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___DCBiometricStoreXPCProtocol);
  -[NSObject setExportedInterface:](v9, "setExportedInterface:", v13);

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v28);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7idcredd22BiometricStoreListener_dataContainer);
  v16 = objc_allocWithZone((Class)type metadata accessor for BiometricStoreSessionProxy());
  swift_retain(v15);
  v17 = sub_100025380((uint64_t)Strong, v15);

  swift_release(v15);
  -[NSObject setExportedObject:](v9, "setExportedObject:", v17);

  v26 = sub_100019FF0;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_1001687A0;
  v18 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v9, "setInvalidationHandler:", v18);
  _Block_release(v18);
  v26 = sub_100019FFC;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_1001687C8;
  v19 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v9, "setInterruptionHandler:", v19);
  _Block_release(v19);
  -[NSObject resume](v9, "resume");
  swift_unknownObjectWeakDestroy(v28);
  return 1;
}

uint64_t sub_1000258E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000258F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000258FC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100025938(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002597C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000259B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_1000FBC04(a1, a2), (v5 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4));
  else
    return 0;
}

uint64_t sub_1000259F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_100008E84(&qword_100175310);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1000ED080(a1);
  if ((v10 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v11 = (uint64_t)v7 + *(int *)(v4 + 48);
  v12 = sub_100074560(v11, result, v9, 0, a1);
  v14 = v13;
  *v7 = v12;
  v7[1] = v13;
  *a2 = v12;
  a2[1] = v13;
  v15 = (char *)a2 + *(int *)(v4 + 48);
  v16 = type metadata accessor for ISO18013Package.Document(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, v11, v16);
  swift_bridgeObjectRetain(v14);
  sub_1000150E8((uint64_t)v7, &qword_100175310);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_100025B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  char v44[24];
  uint64_t v45;

  v2 = v1;
  v42 = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v5 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013Package(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008E84(&qword_100175368);
  v13 = __chkstk_darwin(v12);
  v37 = (uint64_t)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v36 = (char *)&v35 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v35 - v17;
  v19 = v2 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  swift_beginAccess(v2 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload, v44, 0, 0);
  sub_10002E908(v19, (uint64_t)v18, &qword_100175368);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
  {
    sub_1000150E8((uint64_t)v18, &qword_100175368);
    v20 = type metadata accessor for CBORDecoder(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = CBORDecoder.init()();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v41);
    CBORDecoder.codingKeyFormat.setter(v7);
    v22 = *(_QWORD *)(v2 + 112);
    v23 = *(_QWORD *)(v2 + 120);
    sub_100005A38(v22, v23);
    v24 = sub_1000058C8(&qword_100175370, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013Package, (uint64_t)&protocol conformance descriptor for ISO18013Package);
    v25 = v45;
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v8, v22, v23, v8, v24);
    if (v25)
    {
      sub_100005AB0(v22, v23);
      swift_release(v21);
      v26 = v40;
      (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v40, enum case for DIPError.Code.idcsInvalidPayload(_:), v39);
      swift_errorRetain(v25);
      v27 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v28 = type metadata accessor for DIPError(0);
      v29 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v28, v29, 0, 0);
      v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v25, v26, 0, v27, 0xD000000000000074, 0x800000010012F370, 0x615065646F636564, 0xEF292864616F6C79, 69);
      swift_willThrow(v30);
      return swift_errorRelease(v25);
    }
    sub_100005AB0(v22, v23);
    swift_release(v21);
    v32 = v36;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v36, v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v32, 0, 1, v8);
    v33 = (uint64_t)v32;
    v34 = v37;
    sub_10002E94C(v33, v37, &qword_100175368);
    swift_beginAccess(v19, v43, 33, 0);
    sub_10002E990(v34, v19);
    swift_endAccess(v43);
  }
  else
  {
    v11 = v18;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v42, v11, v8);
}

uint64_t sub_100025F70@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(void);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  id v108;
  Swift::String v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t (*v120)(void);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Swift::String v160;
  void *object;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(char *, unint64_t);
  char v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t result;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint8_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t (*v205)(void);
  unint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint8_t *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (*v228)(void);
  unint64_t v229;
  uint64_t (*v230)(void);
  uint64_t v231;
  Swift::String v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  Swift::String v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  char *v265;
  uint64_t (*v266)(char *, uint64_t);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void (*v274)(uint64_t, char *, uint64_t);
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t (*v278)(uint64_t, uint64_t);
  uint64_t v279;
  NSObject *v280;
  os_log_type_t v281;
  uint8_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint8_t *v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  uint64_t (*v292)(void);
  char *v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  char *v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  void (*v310)(_QWORD *, char *, uint64_t);
  char *v311;
  uint64_t v312;
  int64_t v313;
  uint64_t (*v314)(_QWORD *, uint64_t);
  uint64_t v315;
  NSObject *v316;
  os_log_type_t v317;
  uint8_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint8_t *v324;
  uint64_t v325;
  uint64_t (*v326)(void);
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t (*v340)(void);
  char *v341;
  unint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void (*v348)(char *, uint64_t);
  unint64_t v349;
  uint64_t (*v350)(void);
  char *v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void (*v358)(char *, uint64_t);
  uint64_t v359;
  void (*v360)(char *, uint64_t);
  uint64_t v361;
  char *v362;
  uint64_t v363;
  int64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  int64_t v369;
  unint64_t i;
  BOOL v371;
  int64_t v372;
  unint64_t v373;
  int64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  char v412;
  uint64_t v413;
  char *v414;
  unint64_t v415;
  char v416;
  uint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  char *v428;
  unint64_t v429;
  uint64_t v430;
  Swift::String v431;
  void *v432;
  Swift::String v433;
  Swift::String v434;
  Swift::String v435;
  Swift::String v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  unint64_t v452;
  Swift::String v453;
  Swift::String v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void (*v464)(char *, uint64_t);
  uint64_t v465;
  void (*v466)(char *, uint64_t);
  uint64_t v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  Swift::String v472;
  Swift::String v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  unint64_t v481;
  Swift::String v482;
  void *v483;
  Swift::String v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t (*v505)(void);
  char *v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  NSObject *v513;
  os_log_type_t v514;
  uint8_t *v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  char *v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  NSObject *v532;
  os_log_type_t v533;
  uint8_t *v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t countAndFlagsBits;
  uint64_t v538;
  Swift::String v539;
  void *v540;
  char *v541;
  uint64_t v542;
  char *v543;
  unint64_t v544;
  char *v545;
  uint64_t (*v546)(void);
  char *v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  void *v554;
  uint64_t v555;
  char *v556;
  unint64_t v557;
  unint64_t v558;
  char *v559;
  unint64_t v560;
  uint64_t (*v561)(void);
  char *v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  NSObject *v573;
  os_log_type_t v574;
  uint8_t *v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  NSObject *v581;
  os_log_type_t v582;
  uint8_t *v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  unint64_t v591;
  unint64_t v592;
  void (*v593)(char *, uint64_t);
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  NSObject *v597;
  os_log_type_t v598;
  uint8_t *v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  NSObject *v606;
  os_log_type_t v607;
  uint8_t *v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  void *v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  char *v620;
  unint64_t v621;
  uint64_t v622;
  char *v623;
  char *v624;
  uint64_t v625;
  char *v626;
  uint64_t v627;
  void (*v628)(char *, uint64_t);
  uint64_t v629;
  char *v630;
  uint64_t v631;
  uint64_t v632;
  void (*v633)(char *, uint64_t);
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  char *v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int *v642;
  void (*v643)(char *, char *, uint64_t);
  char *v644;
  char *v645;
  uint64_t *v646;
  unint64_t *v647;
  void (*v648)(char *);
  char *v649;
  char *v650;
  char *v651;
  char *v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t *v658;
  char v659;
  unsigned int *v660;
  char *v661;
  uint64_t v662;
  char *v663;
  unint64_t v664;
  char *v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  void (*v671)(char *, uint64_t);
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int64_t v676;
  uint64_t v677;
  int64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  void (*v682)(char *, uint64_t);
  uint64_t v683;
  unint64_t v684;
  void (*v685)(char *, uint64_t, uint64_t);
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  char *v689;
  char *v690;
  id v691;
  char *v692;
  uint64_t v693;
  char *v694;
  char *v695;
  char *v696;
  uint64_t v697;
  uint64_t v698;
  char *v699;
  char *v700;
  uint64_t v701;
  char *v702;
  char *v703;
  char *v704;
  char *v705;
  char *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  char *v710;
  char *v711;
  char *v712;
  char *v713;
  char *v714;
  uint64_t v715;
  char *v716;
  char *v717;
  char *v718;
  char *v719;
  int64_t v720;
  char *v721;
  uint64_t v722;
  char *v723;
  char *v724;
  uint64_t v725;
  void *v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  void (*v731)(uint64_t, uint64_t);
  uint64_t v732;
  unint64_t v733;
  char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  _QWORD *v738;
  uint64_t *v739;
  uint64_t v740;
  char *v741;
  char *v742;
  uint64_t v743;
  char *v744;
  char *v745;
  uint64_t v746;
  uint64_t v747;
  char *v748;
  uint64_t v749;
  unint64_t v750;
  char *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint8_t *v755;
  char *v756;
  uint64_t v757;
  uint64_t v758;
  char *v759;
  char *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  char *v765;
  unsigned int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint8_t *v772;
  char *v773;
  unint64_t v774;
  uint64_t v775;
  char *v776;
  uint64_t (*v777)(void);
  uint64_t v778;
  char *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785[3];
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789[2];
  uint64_t __s2;
  _QWORD v791[2];
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  unint64_t v795;
  uint64_t v796;
  void *v797;

  v3 = v2;
  v769 = a1;
  v706 = (char *)a2;
  v4 = sub_100008E84((uint64_t *)&unk_100177B40);
  v5 = __chkstk_darwin(v4);
  v689 = (char *)&v674 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v693 = (uint64_t)&v674 - v7;
  v767 = type metadata accessor for IDCSAnalytics.PayloadValidationReason(0);
  v768 = *(_QWORD *)(v767 - 8);
  v8 = __chkstk_darwin(v767);
  v765 = (char *)&v674 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v705 = (char *)&v674 - v10;
  v11 = sub_100008E84(&qword_1001752B0);
  v12 = __chkstk_darwin(v11);
  v701 = (uint64_t)&v674 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v715 = (uint64_t)&v674 - v14;
  v15 = type metadata accessor for COSESignatureValidator(0);
  v697 = *(_QWORD *)(v15 - 8);
  v698 = v15;
  __chkstk_darwin(v15);
  v700 = (char *)&v674 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_100175318);
  __chkstk_darwin(v17);
  v709 = (uint64_t)&v674 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PublicKeyAlgorithm(0);
  v707 = *(_QWORD *)(v19 - 8);
  v708 = v19;
  __chkstk_darwin(v19);
  v702 = (char *)&v674 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v780 = type metadata accessor for DIPError.Code(0);
  v778 = *(_QWORD *)(v780 - 8);
  v21 = __chkstk_darwin(v780);
  v696 = (char *)&v674 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v695 = (char *)&v674 - v24;
  v25 = __chkstk_darwin(v23);
  v694 = (char *)&v674 - v26;
  __chkstk_darwin(v25);
  v779 = (char *)&v674 - v27;
  v28 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v736 = *(_QWORD *)(v28 - 8);
  v737 = v28;
  __chkstk_darwin(v28);
  v746 = (uint64_t)&v674 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v752 = sub_100008E84(&qword_1001752E8);
  v750 = *(_QWORD *)(v752 - 8);
  __chkstk_darwin(v752);
  v751 = (char *)&v674 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008E84(&qword_100175320);
  v32 = __chkstk_darwin(v31);
  v738 = (uint64_t *)((char *)&v674 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  v739 = (uint64_t *)((char *)&v674 - v34);
  v35 = type metadata accessor for COSEKey(0);
  v728 = *(_QWORD *)(v35 - 8);
  v729 = v35;
  __chkstk_darwin(v35);
  v727 = (char *)&v674 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v725 = *(_QWORD *)(v37 - 8);
  v726 = (void *)v37;
  __chkstk_darwin(v37);
  v724 = (char *)&v674 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v735 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v733 = *(_QWORD *)(v735 - 8);
  v39 = __chkstk_darwin(v735);
  v704 = (char *)&v674 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v734 = (char *)&v674 - v41;
  v743 = type metadata accessor for Date(0);
  v740 = *(_QWORD *)(v743 - 8);
  v42 = __chkstk_darwin(v743);
  v713 = (char *)&v674 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v712 = (char *)&v674 - v45;
  v46 = __chkstk_darwin(v44);
  v720 = (int64_t)&v674 - v47;
  v48 = __chkstk_darwin(v46);
  v719 = (char *)&v674 - v49;
  v50 = __chkstk_darwin(v48);
  v723 = (char *)&v674 - v51;
  v52 = __chkstk_darwin(v50);
  v722 = (uint64_t)&v674 - v53;
  v54 = __chkstk_darwin(v52);
  v745 = (char *)&v674 - v55;
  v56 = __chkstk_darwin(v54);
  v741 = (char *)&v674 - v57;
  __chkstk_darwin(v56);
  v742 = (char *)&v674 - v58;
  v59 = sub_100008E84(&qword_100175328);
  __chkstk_darwin(v59);
  v744 = (char *)&v674 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v747 = type metadata accessor for ISO18013DigestAlgorithm(0);
  v749 = *(_QWORD *)(v747 - 8);
  __chkstk_darwin(v747);
  v748 = (char *)&v674 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100008E84(&qword_100175330);
  v755 = *(uint8_t **)(v62 - 8);
  __chkstk_darwin(v62);
  v772 = (uint8_t *)&v674 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v754 = type metadata accessor for ISO18013MobileSecurityObject(0);
  v753 = *(_QWORD *)(v754 - 8);
  __chkstk_darwin(v754);
  v756 = (char *)&v674 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v758 = type metadata accessor for COSE_Sign1(0);
  v757 = *(_QWORD *)(v758 - 8);
  __chkstk_darwin(v758);
  v759 = (char *)&v674 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100008E84(&qword_100175300);
  __chkstk_darwin(v66);
  v68 = (uint64_t *)((char *)&v674 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  v762 = type metadata accessor for ISO18013Package.Document(0);
  v761 = *(_QWORD *)(v762 - 8);
  __chkstk_darwin(v762);
  v760 = (char *)&v674 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v764 = type metadata accessor for ISO18013Package(0);
  v763 = *(_QWORD *)(v764 - 8);
  __chkstk_darwin(v764);
  v783 = (uint64_t)&v674 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v771 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v770 = *(_QWORD *)(v771 - 8);
  v71 = __chkstk_darwin(v771);
  v716 = (char *)&v674 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  v74 = (char *)&v674 - v73;
  v75 = type metadata accessor for Logger(0);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = __chkstk_darwin(v75);
  v699 = (char *)&v674 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __chkstk_darwin(v77);
  v692 = (char *)&v674 - v80;
  v81 = __chkstk_darwin(v79);
  v710 = (char *)&v674 - v82;
  v83 = __chkstk_darwin(v81);
  v703 = (char *)&v674 - v84;
  v85 = __chkstk_darwin(v83);
  v714 = (char *)&v674 - v86;
  v87 = __chkstk_darwin(v85);
  v711 = (char *)&v674 - v88;
  v89 = __chkstk_darwin(v87);
  v717 = (char *)&v674 - v90;
  v91 = __chkstk_darwin(v89);
  v718 = (char *)&v674 - v92;
  v93 = __chkstk_darwin(v91);
  v721 = (char *)&v674 - v94;
  v95 = __chkstk_darwin(v93);
  v730 = (uint64_t)&v674 - v96;
  __chkstk_darwin(v95);
  v98 = (char *)&v674 - v97;
  v99 = type metadata accessor for IDCSAnalytics.PayloadValidationResult(0);
  v100 = __chkstk_darwin(v99);
  v776 = (char *)&v674 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v100);
  v781 = v102;
  v103 = *(uint64_t (**)(void))(v102 + 104);
  v773 = (char *)&v674 - v104;
  v766 = enum case for IDCSAnalytics.PayloadValidationResult.valid(_:);
  v784 = v105;
  v777 = v103;
  v106 = v103();
  defaultLogger()(v106);
  Logger.sensitive(_:)(sub_10002E8B4, v3);
  v107 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v690 = v98;
  v731 = v107;
  v732 = v75;
  v107((uint64_t)v98, v75);
  v691 = (id)objc_opt_self(NSUserDefaults);
  v108 = objc_msgSend(v691, "standardUserDefaults");
  v109._countAndFlagsBits = 0xD000000000000025;
  v109._object = (void *)0x800000010012F560;
  LOBYTE(v76) = NSUserDefaults.internalBool(forKey:)(v109);

  if ((v76 & 1) != 0)
  {
    v110 = *(_QWORD *)(v3 + 112);
    v111 = *(_QWORD *)(v3 + 120);
    sub_100005A38(v110, v111);
    sub_100052C84(v110, v111);
    sub_100005AB0(v110, v111);
  }
  v112 = type metadata accessor for CBORDecoder(0);
  swift_allocObject(v112, *(unsigned int *)(v112 + 48), *(unsigned __int16 *)(v112 + 52));
  v113 = CBORDecoder.init()();
  v114 = v3 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat;
  v115 = *(void (**)(char *, uint64_t, uint64_t))(v770 + 16);
  v115(v74, v3 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v771);
  CBORDecoder.codingKeyFormat.setter(v74);
  v116 = v782;
  v117 = sub_100025B58(v783);
  v782 = v116;
  if (v116)
  {
    swift_release(v113);
    v772 = 0;
    v118 = 0;
    v775 = 0;
    v774 = 0;
    v119 = v773;
    v120 = v777;
LABEL_13:
    v197 = v776;
    goto LABEL_14;
  }
  v686 = v114;
  v687 = v3;
  v688 = v113;
  v121 = ISO18013Package.version.getter(v117);
  v123 = v122;
  v124 = sub_100120C70(v121, v122);
  v126 = v125;
  v127 = swift_bridgeObjectRelease(v123);
  if ((v126 & 1) != 0 || v124 != (_QWORD *)1)
  {
    v156 = v773;
    v157 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    ((void (*)(char *, _QWORD, unint64_t))v777)(v156, enum case for IDCSAnalytics.PayloadValidationResult.unknownPackageVersion(_:), v157);
    v785[0] = 0;
    v785[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v158 = swift_bridgeObjectRelease(v785[1]);
    v785[0] = 0xD00000000000001CLL;
    v785[1] = 0x800000010012F5E0;
    v159 = v783;
    v160._countAndFlagsBits = ISO18013Package.version.getter(v158);
    object = v160._object;
    String.append(_:)(v160);
    swift_bridgeObjectRelease(object);
    v162 = v785[0];
    v163 = v785[1];
    v164 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v165 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v166 = type metadata accessor for DIPError(0);
    v167 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v168 = swift_allocError(v166, v167, 0, 0);
    v169 = v164;
    v119 = v156;
    v120 = v777;
    v170 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v162, v163, 0, v169, 0, v165, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 97);
    v782 = v168;
    swift_willThrow(v170);
    swift_release(v688);
    (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v159, v764);
    v772 = 0;
    v118 = 0;
    v775 = 0;
    v774 = 0;
    goto LABEL_13;
  }
  v128 = v783;
  v129 = ISO18013Package.documents.getter(v127);
  v130 = *(_QWORD *)(v129 + 16);
  v131 = swift_bridgeObjectRelease(v129);
  v132 = v130 == 1;
  v133 = v773;
  if (!v132)
  {
    v190 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    v120 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v133, enum case for IDCSAnalytics.PayloadValidationResult.invalidDocumentCount(_:), v190);
    v191 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v192 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v193 = type metadata accessor for DIPError(0);
    v194 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v195 = swift_allocError(v193, v194, 0, 0);
    v196 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010012F530, 0, v191, 0, v192, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 104);
    v782 = v195;
    swift_willThrow(v196);
    swift_release(v688);
    (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v128, v764);
    v772 = 0;
    v118 = 0;
    v775 = 0;
    v774 = 0;
    v119 = v133;
    v197 = v776;
    goto LABEL_14;
  }
  v685 = v115;
  v134 = v773;
  v135 = ISO18013Package.documents.getter(v131);
  sub_1000259F0(v135, v68);
  swift_bridgeObjectRelease(v135);
  v136 = sub_100008E84(&qword_100175310);
  v137 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 48))(v68, 1, v136);
  v197 = v776;
  if (v137 == 1)
  {
    __break(1u);
    JUMPOUT(0x10002B504);
  }
  v138 = v68[1];
  v775 = *v68;
  v139 = (char *)v68 + *(int *)(v136 + 48);
  v140 = v760;
  v141 = (*(uint64_t (**)(char *, char *, uint64_t))(v761 + 32))(v760, v139, v762);
  v142 = v759;
  v143 = ISO18013Package.Document.issuerAuth.getter(v141);
  v144 = COSE_Sign1.payload.getter(v143);
  v774 = v138;
  if (v145 >> 60 == 15)
  {
    v146 = v134;
    v147 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v134, v784);
    v148 = v134;
    v120 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v148, enum case for IDCSAnalytics.PayloadValidationResult.missingMSO(_:), v147);
    v149 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v150 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v151 = type metadata accessor for DIPError(0);
    v152 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v153 = swift_allocError(v151, v152, 0, 0);
    v154 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x800000010012F600, 0, v149, 0, v150, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 112);
    v782 = v153;
    swift_willThrow(v154);
    swift_release(v688);
    (*(void (**)(char *, uint64_t))(v757 + 8))(v142, v758);
    v155 = v140;
    v119 = v146;
    (*(void (**)(char *, uint64_t))(v761 + 8))(v155, v762);
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
    v772 = 0;
    v118 = 0;
    goto LABEL_14;
  }
  v198 = v145;
  v199 = v144;
  v200 = sub_10002E8BC();
  v201 = v772;
  v202 = v198;
  v684 = v198;
  v203 = v688;
  v204 = v782;
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v62, v199, v202, v62, v200);
  v205 = v777;
  if (v204)
  {
    v206 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v134, v784);
    ((void (*)(char *, _QWORD, unint64_t))v205)(v134, enum case for IDCSAnalytics.PayloadValidationResult.invalidMSO(_:), v206);
    v207 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.internalError(_:), v780);
    swift_errorRetain(v204);
    v208 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v209 = type metadata accessor for DIPError(0);
    v210 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v211 = swift_allocError(v209, v210, 0, 0);
    v212 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012F640, v204, v207, 0, v208, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 121);
    v782 = v211;
    swift_willThrow(v212);
    v213 = v199;
    v119 = v134;
    v120 = v205;
    sub_10000B164(v213, v684);
    swift_release(v203);
    swift_errorRelease(v204);
LABEL_22:
    (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
    (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
LABEL_23:
    (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
    v772 = 0;
    v118 = 0;
    goto LABEL_13;
  }
  v782 = 0;
  v683 = v199;
  v214 = v756;
  CBOREncodedCBOR.value.getter(v62);
  v215 = v201;
  v216 = v214;
  v217 = (*((uint64_t (**)(uint8_t *, uint64_t))v755 + 1))(v215, v62);
  v218 = ISO18013MobileSecurityObject.version.getter(v217);
  v220 = v219;
  v221 = sub_100120C70(v218, v219);
  LOBYTE(v214) = v222;
  v223 = swift_bridgeObjectRelease(v220);
  if ((v214 & 1) != 0 || v221 != (_QWORD *)1)
  {
    v229 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v134, v784);
    v230 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v134, enum case for IDCSAnalytics.PayloadValidationResult.unknownMSOVersion(_:), v229);
    v785[0] = 0;
    v785[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v231 = swift_bridgeObjectRelease(v785[1]);
    v785[0] = 0xD000000000000018;
    v785[1] = 0x800000010012F670;
    v232._countAndFlagsBits = ISO18013MobileSecurityObject.version.getter(v231);
    v233 = v232._object;
    String.append(_:)(v232);
    swift_bridgeObjectRelease(v233);
    v234 = v785[0];
    v235 = v785[1];
    v236 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v237 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v238 = type metadata accessor for DIPError(0);
    v239 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v240 = swift_allocError(v238, v239, 0, 0);
    v241 = v236;
    v119 = v134;
    v120 = v230;
    v197 = v776;
    v242 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v234, v235, 0, v241, 0, v237, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 129);
LABEL_33:
    v782 = v240;
    swift_willThrow(v242);
    sub_10000B164(v683, v684);
    swift_release(v688);
    (*(void (**)(char *, uint64_t))(v753 + 8))(v756, v754);
LABEL_34:
    (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
    (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
    goto LABEL_35;
  }
  v224 = ISO18013MobileSecurityObject.docType.getter(v223);
  v226 = v225;
  if (v224 == v775 && v225 == v138)
  {
    v227 = swift_bridgeObjectRelease(v138);
    v228 = v777;
    v197 = v776;
  }
  else
  {
    v243 = _stringCompareWithSmolCheck(_:_:expecting:)(v224, v225, v775, v138, 0);
    v227 = swift_bridgeObjectRelease(v226);
    v228 = v777;
    v244 = v688;
    v197 = v776;
    if ((v243 & 1) == 0)
    {
      v290 = v784;
      v291 = v216;
      v292 = v777;
      (*(void (**)(char *, unint64_t))(v781 + 8))(v134, v784);
      ((void (*)(char *, _QWORD, unint64_t))v228)(v134, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentDocType(_:), v290);
      v293 = v779;
      (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
      v294 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v295 = v291;
      v296 = type metadata accessor for DIPError(0);
      v297 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v298 = swift_allocError(v296, v297, 0, 0);
      v299 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010012F690, 0, v293, 0, v294, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 135);
      v782 = v298;
      swift_willThrow(v299);
      sub_10000B164(v683, v684);
      v300 = v244;
      v119 = v134;
      v120 = v292;
      swift_release(v300);
      (*(void (**)(char *, uint64_t))(v753 + 8))(v295, v754);
      goto LABEL_34;
    }
  }
  v245 = ISO18013MobileSecurityObject.digestAlgorithm.getter(v227);
  v246 = (uint64_t)v744;
  ISO18013DigestAlgorithm.init(rawValue:)(v245);
  v247 = v749;
  v248 = v747;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v749 + 48))(v246, 1, v747) == 1)
  {
    v249 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v134, v784);
    sub_1000150E8(v246, &qword_100175328);
    ((void (*)(char *, _QWORD, unint64_t))v228)(v134, enum case for IDCSAnalytics.PayloadValidationResult.unknownDigestAlgorithm(_:), v249);
    v785[0] = 0;
    v785[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v250 = swift_bridgeObjectRelease(v785[1]);
    v785[0] = 0xD00000000000001DLL;
    v785[1] = 0x800000010012F6D0;
    v251._countAndFlagsBits = ISO18013MobileSecurityObject.digestAlgorithm.getter(v250);
    v252 = v251._object;
    String.append(_:)(v251);
    swift_bridgeObjectRelease(v252);
    v253 = v785[0];
    v254 = v785[1];
    v255 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v256 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v257 = type metadata accessor for DIPError(0);
    v258 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v240 = swift_allocError(v257, v258, 0, 0);
    v259 = v255;
    v119 = v134;
    v120 = v777;
    v242 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v253, v254, 0, v259, 0, v256, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 141);
    goto LABEL_33;
  }
  v260 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v247 + 32))(v748, v246, v248);
  v261 = v742;
  v262 = Date.init()(v260);
  v263 = v734;
  v264 = ISO18013MobileSecurityObject.validityInfo.getter(v262);
  v265 = v741;
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter(v264);
  v266 = *(uint64_t (**)(char *, uint64_t))(v733 + 8);
  v267 = v735;
  v268 = v266(v263, v735);
  v269 = ISO18013MobileSecurityObject.validityInfo.getter(v268);
  v270 = v745;
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(v269);
  v682 = (void (*)(char *, uint64_t))v266;
  v266(v263, v267);
  v271 = static Date.< infix(_:_:)(v261, v265);
  if ((v271 & 1) != 0)
  {
    v272 = v730;
    defaultLogger()(v271);
    v273 = v740;
    v274 = *(void (**)(uint64_t, char *, uint64_t))(v740 + 16);
    v275 = v722;
    v276 = v743;
    v274(v722, v265, v743);
    v277 = v723;
    v274((uint64_t)v723, (char *)v275, v276);
    v278 = *(uint64_t (**)(uint64_t, uint64_t))(v273 + 8);
    v279 = v278(v275, v276);
    v280 = Logger.logObject.getter(v279);
    v281 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v280, v281))
    {
      v282 = (uint8_t *)swift_slowAlloc(12, -1);
      v283 = swift_slowAlloc(32, -1);
      v785[0] = v283;
      v772 = v282;
      *(_DWORD *)v282 = 136315138;
      v755 = v282 + 4;
      v284 = sub_1000058C8(&qword_100175358, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v285 = dispatch thunk of CustomStringConvertible.description.getter(v276, v284);
      v287 = v286;
      __s2 = sub_10003FA80(v285, v286, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v791, v755);
      swift_bridgeObjectRelease(v287);
      v278((uint64_t)v277, v276);
      v288 = v772;
      _os_log_impl((void *)&_mh_execute_header, v280, v281, "MSO is not yet valid. Valid from = %s", v772, 0xCu);
      swift_arrayDestroy(v283, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v283, -1, -1);
      swift_slowDealloc(v288, -1, -1);

      v289 = v730;
    }
    else
    {

      v278((uint64_t)v277, v276);
      v289 = v272;
    }
    v731(v289, v732);
    v303 = v773;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    v302 = v760;
    v305 = v746;
    v301 = ((uint64_t (*)(char *, _QWORD, unint64_t))v777)(v303, enum case for IDCSAnalytics.PayloadValidationResult.notYetValidMSO(_:), v784);
    goto LABEL_45;
  }
  v301 = static Date.> infix(_:_:)(v261, v270);
  v302 = v760;
  v303 = v134;
  v304 = v774;
  v305 = v746;
  v306 = v756;
  v307 = v749;
  if ((v301 & 1) != 0)
  {
    v308 = v721;
    defaultLogger()(v301);
    v309 = v740;
    v310 = *(void (**)(_QWORD *, char *, uint64_t))(v740 + 16);
    v311 = v719;
    v312 = v743;
    v310(v719, v745, v743);
    v313 = v720;
    v310((_QWORD *)v720, v311, v312);
    v314 = *(uint64_t (**)(_QWORD *, uint64_t))(v309 + 8);
    v315 = v314(v311, v312);
    v316 = Logger.logObject.getter(v315);
    v317 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v316, v317))
    {
      v318 = (uint8_t *)swift_slowAlloc(12, -1);
      v319 = swift_slowAlloc(32, -1);
      v785[0] = v319;
      v772 = v318;
      *(_DWORD *)v318 = 136315138;
      v755 = v318 + 4;
      v320 = sub_1000058C8(&qword_100175358, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v321 = dispatch thunk of CustomStringConvertible.description.getter(v312, v320);
      v323 = v322;
      __s2 = sub_10003FA80(v321, v322, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v791, v755);
      swift_bridgeObjectRelease(v323);
      v314((_QWORD *)v313, v312);
      v324 = v772;
      _os_log_impl((void *)&_mh_execute_header, v316, v317, "MSO is expired. Valid until = %s", v772, 0xCu);
      swift_arrayDestroy(v319, 1, (char *)&type metadata for Any + 8);
      v325 = v319;
      v305 = v746;
      v326 = v777;
      swift_slowDealloc(v325, -1, -1);
      swift_slowDealloc(v324, -1, -1);

      v731((uint64_t)v721, v732);
      v303 = v773;
      (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
      v302 = v760;
      v301 = ((uint64_t (*)(char *, _QWORD, unint64_t))v326)(v303, enum case for IDCSAnalytics.PayloadValidationResult.expiredMSO(_:), v784);
    }
    else
    {

      v314((_QWORD *)v313, v312);
      v731((uint64_t)v308, v732);
      v303 = v773;
      (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
      v302 = v760;
      v301 = ((uint64_t (*)(char *, _QWORD, unint64_t))v777)(v303, enum case for IDCSAnalytics.PayloadValidationResult.expiredMSO(_:), v784);
    }
LABEL_45:
    v304 = v774;
    v306 = v756;
    v307 = v749;
  }
  v327 = ISO18013Package.Document.namespaces.getter(v301);
  v328 = ((uint64_t (*)(void))ISO18013MobileSecurityObject.valueDigests.getter)();
  v329 = *(_QWORD *)(v328 + 16);
  v330 = swift_bridgeObjectRelease(v328);
  if (v329 != *(_QWORD *)(v327 + 16))
  {
    v349 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v303, v784);
    swift_bridgeObjectRelease(v327);
    v350 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v303, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentNamespaceCount(_:), v349);
    v351 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v352 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v353 = v306;
    v354 = type metadata accessor for DIPError(0);
    v355 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v356 = swift_allocError(v354, v355, 0, 0);
    v357 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x800000010012F6F0, 0, v351, 0, v352, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 164);
    v782 = v356;
    swift_willThrow(v357);
    sub_10000B164(v683, v684);
    swift_release(v688);
    v358 = *(void (**)(char *, uint64_t))(v740 + 8);
    v359 = v743;
    v358(v745, v743);
    v358(v741, v359);
    v358(v742, v359);
    v360 = *(void (**)(char *, uint64_t))(v307 + 8);
    v119 = v773;
    v120 = v350;
    v360(v748, v747);
    (*(void (**)(char *, uint64_t))(v753 + 8))(v353, v754);
    (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
    (*(void (**)(char *, uint64_t))(v761 + 8))(v302, v762);
    goto LABEL_23;
  }
  v722 = v327;
  v331 = v724;
  v332 = ISO18013MobileSecurityObject.deviceKeyInfo.getter(v330);
  v333 = v727;
  ISO18013MobileSecurityObject.DeviceKeyInfo.deviceKey.getter(v332);
  v334 = (*(uint64_t (**)(char *, void *))(v725 + 8))(v331, v726);
  v335 = COSEKey.publicKeyIdentifier.getter(v334);
  v337 = v336;
  (*(void (**)(char *, uint64_t))(v728 + 8))(v333, v729);
  v338 = v743;
  if (v337 >> 60 == 15)
  {
    v339 = v784;
    v119 = v303;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v303, v784);
    swift_bridgeObjectRelease(v722);
    v340 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v303, enum case for IDCSAnalytics.PayloadValidationResult.missingDeviceKeyIdentifier(_:), v339);
    v341 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
    v342 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v343 = v306;
    v344 = type metadata accessor for DIPError(0);
    v345 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v346 = swift_allocError(v344, v345, 0, 0);
    v347 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010012F730, 0, v341, 0, v342, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 170);
    v782 = v346;
    swift_willThrow(v347);
    sub_10000B164(v683, v684);
    v120 = v340;
    swift_release(v688);
    v348 = *(void (**)(char *, uint64_t))(v740 + 8);
    v348(v745, v338);
    v348(v741, v338);
    v348(v742, v338);
    (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
    (*(void (**)(char *, uint64_t))(v753 + 8))(v343, v754);
    goto LABEL_22;
  }
  v680 = v335;
  v681 = v337;
  v361 = v722;
  v772 = (uint8_t *)sub_10002C1BC(v775, v304, v722);
  if (!v362)
    v772 = (uint8_t *)sub_10002E068(v775, v304);
  v724 = v362;
  v363 = v782;
  v364 = 0;
  v365 = *(_QWORD *)(v361 + 64);
  v679 = v361 + 64;
  v366 = 1 << *(_BYTE *)(v361 + 32);
  if (v366 < 64)
    v367 = ~(-1 << v366);
  else
    v367 = -1;
  v368 = v367 & v365;
  v369 = (unint64_t)(v366 + 63) >> 6;
  v676 = v369;
  if (!v368)
    goto LABEL_57;
LABEL_56:
  v782 = v363;
  v677 = (v368 - 1) & v368;
  v678 = v364;
  for (i = __clz(__rbit64(v368)) | (v364 << 6); ; i = __clz(__rbit64(v373)) + (v372 << 6))
  {
    v375 = *(_QWORD *)(v361 + 56);
    v376 = (uint64_t *)(*(_QWORD *)(v361 + 48) + 16 * i);
    v378 = *v376;
    v377 = v376[1];
    v379 = *(_QWORD *)(v375 + 8 * i);
    swift_bridgeObjectRetain(v377);
    v380 = swift_bridgeObjectRetain(v379);
    v381 = ISO18013MobileSecurityObject.valueDigests.getter(v380);
    swift_bridgeObjectRetain(v377);
    v723 = (char *)v378;
    v382 = sub_1000259B0(v378, v377, v381);
    v726 = (void *)v377;
    swift_bridgeObjectRelease(v377);
    v383 = swift_bridgeObjectRelease(v381);
    v727 = (char *)v382;
    if (!v382)
    {
      v480 = v773;
      v481 = v784;
      (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
      swift_bridgeObjectRelease(v379);
      ((void (*)(char *, _QWORD, unint64_t))v777)(v480, enum case for IDCSAnalytics.PayloadValidationResult.missingNamespaceInMSO(_:), v481);
      v785[0] = 0;
      v785[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v785[1]);
      v785[0] = 0xD000000000000012;
      v785[1] = 0x800000010012F760;
      v482._countAndFlagsBits = (uint64_t)v723;
      v483 = v726;
      v482._object = v726;
      String.append(_:)(v482);
      swift_bridgeObjectRelease(v483);
      v484._countAndFlagsBits = 0x6F736D206E6920;
      v484._object = (void *)0xE700000000000000;
      String.append(_:)(v484);
      v485 = v785[0];
      v486 = v785[1];
      v487 = v779;
      (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
      v488 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v489 = type metadata accessor for DIPError(0);
      v444 = v743;
      v490 = v489;
      v491 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v492 = swift_allocError(v490, v491, 0, 0);
      v493 = v487;
      v119 = v480;
      v120 = v777;
      v494 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v485, v486, 0, v493, 0, v488, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 183);
      v782 = v492;
      swift_willThrow(v494);
      sub_10000B164(v680, v681);
      sub_10000B164(v683, v684);
      swift_release(v722);
      v479 = v688;
      goto LABEL_122;
    }
    v725 = v379;
    v386 = *(_QWORD *)(v379 + 64);
    v385 = (_QWORD *)(v379 + 64);
    v384 = v386;
    v387 = 1 << *((_BYTE *)v385 - 32);
    if (v387 < 64)
      v388 = ~(-1 << v387);
    else
      v388 = -1;
    v389 = v388 & v384;
    v719 = (char *)v385;
    v720 = (unint64_t)(v387 + 63) >> 6;
    v675 = v720 - 1;
    if (v389)
    {
      v390 = v304;
      v729 = (v389 - 1) & v389;
      v730 = 0;
      v391 = __clz(__rbit64(v389));
LABEL_75:
      v392 = *(_QWORD *)(v725 + 56);
      v393 = (_QWORD *)(*(_QWORD *)(v725 + 48) + 16 * v391);
      v394 = v393[1];
      v395 = (uint64_t)v738;
      *v738 = *v393;
      *(_QWORD *)(v395 + 8) = v394;
      v396 = v750;
      v397 = v392 + *(_QWORD *)(v750 + 72) * v391;
      v398 = sub_100008E84(&qword_100175348);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v396 + 16))(v395 + *(int *)(v398 + 48), v397, v752);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v398 - 8) + 56))(v395, 0, 1, v398);
      swift_bridgeObjectRetain(v394);
      v304 = v390;
      v305 = v746;
      v399 = v739;
      goto LABEL_81;
    }
    v400 = 1;
    v399 = v739;
    if (v720 <= 1)
    {
      v730 = 0;
    }
    else
    {
      v401 = *((_QWORD *)v719 + 1);
      if (v401)
        goto LABEL_78;
      if (v720 <= 2)
      {
        v730 = 1;
      }
      else
      {
        v401 = *((_QWORD *)v719 + 2);
        if (v401)
        {
          v400 = 2;
LABEL_78:
          v390 = v304;
          v729 = (v401 - 1) & v401;
          v730 = v400;
          v391 = __clz(__rbit64(v401)) + (v400 << 6);
          goto LABEL_75;
        }
        v730 = 2;
        v426 = v304;
        if (v720 > 3)
        {
          v401 = *((_QWORD *)v719 + 3);
          if (v401)
          {
            v400 = 3;
            goto LABEL_78;
          }
          v427 = 4;
          if (v720 > 4)
          {
            v401 = *((_QWORD *)v719 + 4);
            if (!v401)
            {
              while (1)
              {
                v400 = v427 + 1;
                if (__OFADD__(v427, 1))
                  break;
                if (v400 >= v720)
                {
                  v730 = v675;
                  v304 = v426;
                  v305 = v746;
                  v399 = v739;
                  goto LABEL_80;
                }
                v401 = *(_QWORD *)&v719[8 * v400];
                ++v427;
                v304 = v426;
                if (v401)
                  goto LABEL_78;
              }
              __break(1u);
              if (v383 == (_DWORD)v737)
              {
                v663 = v773;
                v664 = v784;
                (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
                ((void (*)(char *, _QWORD, unint64_t))v777)(v663, enum case for IDCSAnalytics.PayloadValidationResult.invalidIssuerSignature(_:), v664);
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v778 + 8))(v689, v780);
              }
              sub_1000150E8(v693, (uint64_t *)&unk_100177B40);
              v665 = v779;
              ((void (*)(char *, _QWORD, uint64_t))v782)(v779, enum case for DIPError.Code.internalError(_:), v780);
              swift_errorRetain(v377);
              v666 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
              v667 = type metadata accessor for DIPError(0);
              v668 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              v669 = swift_allocError(v667, v668, 0, 0);
              v670 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010012F890, v377, v665, 0, v666, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 273);
              v782 = v669;
              swift_willThrow(v670);
              sub_10000B164(v680, v681);
              sub_10000B164(v683, v684);

              swift_release(v688);
              sub_10000B164(v746, v750);
              sub_100005AB0(v752, (unint64_t)v755);
              swift_errorRelease(v377);
              (*(void (**)(char *, uint64_t))(v697 + 8))(v700, v698);
              (*(void (**)(char *, uint64_t))(v707 + 8))(v702, v708);
              v671 = *(void (**)(char *, uint64_t))(v740 + 8);
              v672 = v743;
              v671(v745, v743);
              v671(v741, v672);
              v671(v742, v672);
              (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
              (*(void (**)(char *, uint64_t))(v753 + 8))(v756, v754);
              (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
              (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
              (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
              goto LABEL_178;
            }
            v400 = 4;
            goto LABEL_78;
          }
          v730 = 3;
        }
        v305 = v746;
        v399 = v739;
      }
    }
LABEL_80:
    v402 = sub_100008E84(&qword_100175348);
    v395 = (uint64_t)v738;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v402 - 8) + 56))(v738, 1, 1, v402);
    v729 = 0;
LABEL_81:
    sub_10002E94C(v395, (uint64_t)v399, &qword_100175320);
    v403 = sub_100008E84(&qword_100175348);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v403 - 8) + 48))(v399, 1, v403) != 1)
    {
      v405 = *v399;
      v404 = (void *)v399[1];
      v406 = v752;
      (*(void (**)(char *, char *, uint64_t))(v750 + 32))(v751, (char *)v399 + *(int *)(v403 + 48), v752);
      v407 = CBOREncodedCBOR.value.getter(v406);
      v409 = ISO18013IssuerSignedItem.elementIdentifier.getter(v407);
      v410 = v408;
      if (v405 == v409 && v404 == v408)
      {
        v411 = swift_bridgeObjectRelease(v404);
      }
      else
      {
        v412 = _stringCompareWithSmolCheck(_:_:expecting:)(v405, v404, v409, v408, 0);
        v411 = swift_bridgeObjectRelease(v410);
        if ((v412 & 1) == 0)
        {
          v470 = v405;
          v451 = v773;
          v471 = v784;
          (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
          swift_bridgeObjectRelease(v726);
          swift_bridgeObjectRelease(v727);
          ((void (*)(char *, _QWORD, unint64_t))v777)(v451, enum case for IDCSAnalytics.PayloadValidationResult.inconsistentElementIdentifier(_:), v471);
          v785[0] = 0;
          v785[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(57);
          v472._countAndFlagsBits = 0xD000000000000037;
          v472._object = (void *)0x800000010012F780;
          String.append(_:)(v472);
          v473._countAndFlagsBits = v470;
          v473._object = v404;
          String.append(_:)(v473);
          swift_bridgeObjectRelease(v404);
          v455 = v785[0];
          v456 = v785[1];
          v457 = v779;
          (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
          v458 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
          v474 = type metadata accessor for DIPError(0);
          v444 = v743;
          v475 = v474;
          v476 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v462 = swift_allocError(v475, v476, 0, 0);
          v463 = 197;
          goto LABEL_120;
        }
      }
      v413 = ISO18013IssuerSignedItem.digestID.getter(v411);
      if ((v413 & 0x8000000000000000) == 0)
      {
        v414 = v727;
        if (*((_QWORD *)v727 + 2))
        {
          v415 = sub_1000FBC68(v413);
          if ((v416 & 1) != 0)
          {
            v721 = (char *)v405;
            v417 = (uint64_t *)(*((_QWORD *)v414 + 7) + 16 * v415);
            v418 = v417[1];
            v419 = *v417;
            sub_100005A38(*v417, v418);
            v420 = CBOREncodedCBOR.dataValue.getter(v752);
            v422 = v421;
            v423 = v782;
            v424 = computeISO18013Digest(algorithm:data:)(v748, v420, v421);
            v782 = v423;
            if (!v423)
            {
              v744 = (char *)v424;
              v755 = (uint8_t *)v425;
              v733 = v418;
              sub_100005AB0(v420, v422);
              __asm { BR              X9 }
            }
            sub_100005AB0(v420, v422);
            swift_bridgeObjectRelease(v727);
            sub_10000B164(v680, v681);
            sub_10000B164(v683, v684);
            swift_release(v688);
            sub_100005AB0(v419, v418);
            swift_bridgeObjectRelease(v726);
            swift_bridgeObjectRelease(v404);
            (*(void (**)(uint64_t, uint64_t))(v736 + 8))(v305, v737);
            (*(void (**)(char *, uint64_t))(v750 + 8))(v751, v752);
            swift_release(v722);
            swift_release(v725);
            v464 = *(void (**)(char *, uint64_t))(v740 + 8);
            v465 = v743;
            v464(v745, v743);
            v464(v741, v465);
            v464(v742, v465);
            (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
            (*(void (**)(char *, uint64_t))(v753 + 8))(v756, v754);
            (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
            (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
            (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
            v120 = v777;
            v197 = v776;
            v118 = v724;
            v119 = v773;
LABEL_14:
            v171 = v784;
            ((void (*)(char *, _QWORD, unint64_t))v120)(v197, v766, v784);
            v172 = sub_1000058C8(&qword_100175338, (uint64_t (*)(uint64_t))&type metadata accessor for IDCSAnalytics.PayloadValidationResult, (uint64_t)&protocol conformance descriptor for IDCSAnalytics.PayloadValidationResult);
            dispatch thunk of RawRepresentable.rawValue.getter(v785, v171, v172);
            dispatch thunk of RawRepresentable.rawValue.getter(&__s2, v171, v172);
            v173 = v785[1];
            v174 = v791[0];
            if (v785[0] == __s2 && v785[1] == v791[0])
            {
              swift_bridgeObjectRelease_n(v785[1], 2);
              v175 = *(void (**)(char *, unint64_t))(v781 + 8);
              v175(v197, v784);
            }
            else
            {
              v176 = _stringCompareWithSmolCheck(_:_:expecting:)(v785[0], v785[1], __s2, v791[0], 0);
              swift_bridgeObjectRelease(v173);
              swift_bridgeObjectRelease(v174);
              v175 = *(void (**)(char *, unint64_t))(v781 + 8);
              v175(v197, v784);
              if ((v176 & 1) == 0)
              {
LABEL_19:
                v178 = v768;
                v179 = v119;
                v180 = v765;
                v181 = v767;
                (*(void (**)(char *, _QWORD, uint64_t))(v768 + 104))(v765, *(unsigned int *)*(&off_1001688C8 + (char)v769), v767);
                type metadata accessor for IDCSAnalytics(0);
                v182 = v774;
                static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)(v180, v775, v774, v772, v118, v179, 0, 0, 0, 0);
                swift_bridgeObjectRelease(v182);
                swift_bridgeObjectRelease(v118);
                (*(void (**)(char *, uint64_t))(v178 + 8))(v180, v181);
                v183 = v779;
                (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.internalError(_:), v780);
                v184 = v782;
                swift_errorRetain(v782);
                v185 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
                v186 = type metadata accessor for DIPError(0);
                v187 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                swift_allocError(v186, v187, 0, 0);
                v188 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010012F590, v184, v183, 0, v185, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 356);
                swift_willThrow(v188);
                swift_errorRelease(v184);
                return ((uint64_t (*)(char *, unint64_t))v175)(v179, v784);
              }
            }
            v177 = v784;
            v175(v119, v784);
            ((void (*)(char *, _QWORD, unint64_t))v120)(v119, enum case for IDCSAnalytics.PayloadValidationResult.invalid(_:), v177);
            goto LABEL_19;
          }
        }
        v428 = v773;
        v429 = v784;
        (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
        swift_bridgeObjectRelease(v414);
        ((void (*)(char *, _QWORD, unint64_t))v777)(v428, enum case for IDCSAnalytics.PayloadValidationResult.missingDigestID(_:), v429);
        v785[0] = 0;
        v785[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(48);
        v430 = swift_bridgeObjectRelease(v785[1]);
        v785[0] = 0x20676E697373696DLL;
        v785[1] = 0xEF20747365676964;
        __s2 = ISO18013IssuerSignedItem.digestID.getter(v430);
        v431._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
        v432 = v431._object;
        String.append(_:)(v431);
        swift_bridgeObjectRelease(v432);
        v433._countAndFlagsBits = 0x656C6520726F6620;
        v433._object = (void *)0xED000020746E656DLL;
        String.append(_:)(v433);
        v434._countAndFlagsBits = v405;
        v434._object = v404;
        String.append(_:)(v434);
        swift_bridgeObjectRelease(v404);
        v435._countAndFlagsBits = 0x656D616E206E6920;
        v435._object = (void *)0xEE00206563617073;
        String.append(_:)(v435);
        v436._countAndFlagsBits = (uint64_t)v723;
        v437 = v726;
        v436._object = v726;
        String.append(_:)(v436);
        swift_bridgeObjectRelease(v437);
        v438 = v785[0];
        v439 = v785[1];
        v440 = v779;
        (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
        v441 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
        v442 = type metadata accessor for DIPError(0);
        v443 = v305;
        v444 = v743;
        v445 = v442;
        v446 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v447 = swift_allocError(v445, v446, 0, 0);
        v448 = v440;
        v119 = v428;
        v120 = v777;
        v449 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v438, v439, 0, v448, 0, v441, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 207);
        v782 = v447;
        swift_willThrow(v449);
        sub_10000B164(v680, v681);
        sub_10000B164(v683, v684);
        swift_release(v688);
        (*(void (**)(uint64_t, uint64_t))(v736 + 8))(v443, v737);
        goto LABEL_121;
      }
      v450 = v405;
      v451 = v773;
      v452 = v784;
      (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
      swift_bridgeObjectRelease(v726);
      swift_bridgeObjectRelease(v727);
      ((void (*)(char *, _QWORD, unint64_t))v777)(v451, enum case for IDCSAnalytics.PayloadValidationResult.invalidDigestID(_:), v452);
      v785[0] = 0;
      v785[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(v785[1]);
      strcpy((char *)v785, "digest ID for ");
      HIBYTE(v785[1]) = -18;
      v453._countAndFlagsBits = v450;
      v453._object = v404;
      String.append(_:)(v453);
      swift_bridgeObjectRelease(v404);
      v454._countAndFlagsBits = 0xD00000000000001BLL;
      v454._object = (void *)0x800000010012F7E0;
      String.append(_:)(v454);
      v455 = v785[0];
      v456 = v785[1];
      v457 = v779;
      (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsInvalidPayload(_:), v780);
      v458 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v459 = type metadata accessor for DIPError(0);
      v444 = v743;
      v460 = v459;
      v461 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v462 = swift_allocError(v460, v461, 0, 0);
      v463 = 203;
LABEL_120:
      v477 = v457;
      v119 = v451;
      v120 = v777;
      v478 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v455, v456, 0, v477, 0, v458, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, v463);
      v782 = v462;
      swift_willThrow(v478);
      sub_10000B164(v680, v681);
      sub_10000B164(v683, v684);
      swift_release(v688);
      (*(void (**)(uint64_t, uint64_t))(v736 + 8))(v746, v737);
LABEL_121:
      (*(void (**)(char *, uint64_t))(v750 + 8))(v751, v752);
      swift_release(v722);
      v479 = v725;
LABEL_122:
      swift_release(v479);
      v466 = *(void (**)(char *, uint64_t))(v740 + 8);
      v466(v745, v444);
      v466(v741, v444);
      v468 = v742;
      v469 = v444;
      goto LABEL_123;
    }
    swift_bridgeObjectRelease(v726);
    swift_bridgeObjectRelease(v727);
    swift_release(v725);
    v361 = v722;
    v368 = v677;
    v364 = v678;
    v369 = v676;
    v363 = v782;
    if (v677)
      goto LABEL_56;
LABEL_57:
    v371 = __OFADD__(v364, 1);
    v372 = v364 + 1;
    if (v371)
    {
      __break(1u);
      goto LABEL_201;
    }
    if (v372 >= v369)
      goto LABEL_126;
    v373 = *(_QWORD *)(v679 + 8 * v372);
    if (!v373)
      break;
LABEL_68:
    v782 = v363;
    v677 = (v373 - 1) & v373;
    v678 = v372;
  }
  if (v372 + 1 >= v369)
  {
LABEL_126:
    v495 = v361;
    goto LABEL_128;
  }
  v373 = *(_QWORD *)(v679 + 8 * (v372 + 1));
  if (v373)
  {
    ++v372;
    goto LABEL_68;
  }
  v374 = v372 + 2;
  if (v372 + 2 >= v369)
    goto LABEL_127;
  v373 = *(_QWORD *)(v679 + 8 * v374);
  if (v373)
    goto LABEL_67;
  v374 = v372 + 3;
  if (v372 + 3 >= v676)
    goto LABEL_127;
  v373 = *(_QWORD *)(v679 + 8 * v374);
  if (v373)
  {
LABEL_67:
    v372 = v374;
    v304 = v774;
    v305 = v746;
    v361 = v722;
    goto LABEL_68;
  }
  while (1)
  {
    v372 = v374 + 1;
    if (__OFADD__(v374, 1))
    {
      __break(1u);
      JUMPOUT(0x10002B564);
    }
    if (v372 >= v676)
      break;
    v373 = *(_QWORD *)(v679 + 8 * v372);
    ++v374;
    v304 = v774;
    v305 = v746;
    v361 = v722;
    if (v373)
      goto LABEL_68;
  }
LABEL_127:
  v495 = v722;
LABEL_128:
  v496 = swift_release(v495);
  v497 = (_QWORD *)COSE_Sign1.x509Chain.getter(v496);
  if (!v497)
  {
LABEL_133:
    v512 = defaultLogger()(v497);
    v513 = Logger.logObject.getter(v512);
    v514 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v513, v514))
    {
      v515 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v515 = 0;
      _os_log_impl((void *)&_mh_execute_header, v513, v514, "Package does not include an issuer certificate; skipping signature validation",
        v515,
        2u);
      swift_slowDealloc(v515, -1, -1);
    }

    v731((uint64_t)v717, v732);
    goto LABEL_136;
  }
  v498 = v497;
  if (!v497[2])
  {
    v497 = (_QWORD *)swift_bridgeObjectRelease(v497);
    goto LABEL_133;
  }
  v500 = v497[4];
  v499 = v497[5];
  sub_100005A38(v500, v499);
  swift_bridgeObjectRelease(v498);
  v752 = v500;
  v755 = (uint8_t *)v499;
  v501 = v363;
  v502 = (void *)decodeCertificate(fromDER:)(v500, v499);
  v503 = v363;
  if (v363)
  {
    v119 = v773;
    v504 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    v505 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v119, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerCertificate(_:), v504);
    v506 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v780);
    swift_errorRetain(v363);
    v507 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v508 = type metadata accessor for DIPError(0);
    v509 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v510 = swift_allocError(v508, v509, 0, 0);
    v511 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x800000010012F800, v501, v506, 1, v507, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 229);
    v782 = v510;
    swift_willThrow(v511);
    sub_10000B164(v680, v681);
    sub_10000B164(v683, v684);
    swift_release(v688);
    sub_100005AB0(v752, (unint64_t)v755);
    v120 = v505;
    swift_errorRelease(v503);
    goto LABEL_118;
  }
  v541 = v502;
  v542 = v709;
  v751 = v541;
  SecCertificateRef.publicKeyAlgorithm()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v707 + 48))(v542, 1, v708) == 1)
  {
    v543 = v773;
    v544 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    v545 = v751;

    sub_1000150E8(v709, &qword_100175318);
    v546 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v543, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerAuthPublicKey(_:), v544);
    v547 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v780);
    v548 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v549 = type metadata accessor for DIPError(0);
    v550 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v551 = v549;
    v119 = v543;
    v120 = v546;
    v552 = swift_allocError(v551, v550, 0, 0);
    v553 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010012F830, 0, v547, 0, v548, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 239);
    v782 = v552;
    swift_willThrow(v553);
    sub_10000B164(v680, v681);
    sub_10000B164(v683, v684);
    swift_release(v688);
    sub_100005AB0(v752, (unint64_t)v755);

    goto LABEL_118;
  }
  v555 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v707 + 32))(v702, v709, v708);
  v556 = v751;
  v746 = SecCertificateRef.rawECPublicKeyData()(v555);
  v558 = v557;

  v750 = v558;
  if (v558 >> 60 == 15)
  {
    v559 = v773;
    v560 = v784;
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    v561 = v777;
    ((void (*)(char *, _QWORD, unint64_t))v777)(v559, enum case for IDCSAnalytics.PayloadValidationResult.misformattedIssuerAuthPublicKey(_:), v560);
    v562 = v779;
    (*(void (**)(char *, _QWORD, uint64_t))(v778 + 104))(v779, enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:), v780);
    v563 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v564 = type metadata accessor for DIPError(0);
    v565 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v566 = v564;
    v119 = v559;
    v120 = v561;
    v567 = swift_allocError(v566, v565, 0, 0);
    v568 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010012F860, 0, v562, 0, v563, 0xD000000000000074, 0x800000010012F370, 0xD000000000000018, 0x800000010012F5C0, 243);
    v782 = v567;
    swift_willThrow(v568);
    sub_10000B164(v680, v681);
    sub_10000B164(v683, v684);

    swift_release(v688);
    sub_100005AB0(v752, (unint64_t)v755);
    (*(void (**)(char *, uint64_t))(v707 + 8))(v702, v708);
LABEL_118:
    v466 = *(void (**)(char *, uint64_t))(v740 + 8);
    v467 = v743;
    v466(v745, v743);
    v466(v741, v467);
    v468 = v742;
    v469 = v467;
LABEL_123:
    v466(v468, v469);
    (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
    (*(void (**)(char *, uint64_t))(v753 + 8))(v756, v754);
    (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
    (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
    (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
LABEL_124:
    v197 = v776;
    v118 = v724;
    goto LABEL_14;
  }
  v648 = *(void (**)(char *))(v778 + 104);
  v649 = v779;
  LODWORD(v739) = enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:);
  v648(v779);
  v650 = v694;
  LODWORD(v744) = enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:);
  v648(v694);
  v651 = v695;
  LODWORD(v738) = enum case for DIPError.Code.idcsMisformattedIssuerAuthSignature(_:);
  v648(v695);
  v652 = v696;
  LODWORD(v737) = enum case for DIPError.Code.idcsInvalidIssuerAuthSignature(_:);
  v782 = (uint64_t)v648;
  v648(v696);
  v653 = COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(v649, v650, v651, v652);
  v654 = COSE_Sign1.signature.getter(v653);
  v656 = v655;
  v657 = COSE_Sign1.algorithmIdentifier.getter();
  COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(v654, v656, v746, v750, v702, v657, v683, v684);
  v363 = 0;

  sub_100005AB0(v654, v656);
  sub_10000B164(v746, v750);
  sub_100005AB0(v752, (unint64_t)v755);
  (*(void (**)(char *, uint64_t))(v697 + 8))(v700, v698);
  (*(void (**)(char *, uint64_t))(v707 + 8))(v702, v708);
LABEL_136:
  if ((_BYTE)v769)
    goto LABEL_142;
  v516 = v774;
  swift_bridgeObjectRetain(v774);
  v517 = v715;
  ISO18013KnownDocTypes.init(rawValue:)(v775, v516);
  v518 = type metadata accessor for ISO18013KnownDocTypes(0);
  v519 = *(_QWORD *)(v518 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v519 + 48))(v517, 1, v518) == 1)
    goto LABEL_141;
  v520 = v701;
  sub_10002E908(v715, v701, &qword_1001752B0);
  v521 = (*(uint64_t (**)(uint64_t, uint64_t))(v519 + 88))(v520, v518);
  if (v521 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:)
    || v521 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    sub_1000150E8(v715, &qword_1001752B0);
    v569 = sub_10003A3F4();
    v570 = sub_10002B92C(v569);
    if (v363)
    {
      v571 = swift_bridgeObjectRelease(v569);
      defaultLogger()(v571);
      swift_errorRetain(v363);
      v572 = swift_errorRetain(v363);
      v573 = Logger.logObject.getter(v572);
      v574 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v573, v574))
      {
        v575 = (uint8_t *)swift_slowAlloc(12, -1);
        v576 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v575 = 138412290;
        swift_errorRetain(v363);
        v577 = _swift_stdlib_bridgeErrorToNSError(v363);
        v785[0] = v577;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v785, &v785[1], v575 + 4);
        *v576 = v577;
        swift_errorRelease(v363);
        swift_errorRelease(v363);
        _os_log_impl((void *)&_mh_execute_header, v573, v574, "Failed to get elements to evaluate age consistency: %@", v575, 0xCu);
        v578 = sub_100008E84(&qword_100175350);
        swift_arrayDestroy(v576, 1, v578);
        swift_slowDealloc(v576, -1, -1);
        swift_slowDealloc(v575, -1, -1);

        swift_errorRelease(v363);
      }
      else
      {
        swift_errorRelease(v363);
        swift_errorRelease(v363);
        swift_errorRelease(v363);

      }
      v731((uint64_t)v699, v732);
      v363 = 0;
      goto LABEL_142;
    }
    v658 = (uint64_t *)v570;
    swift_bridgeObjectRelease(v569);
    v659 = sub_10003A780(v658);
    swift_bridgeObjectRelease(v658);
    (*(void (**)(char *, unint64_t))(v781 + 8))(v773, v784);
    if (v659)
    {
      if (v659 == 1)
        v660 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.inconsistentAgeOver(_:);
      else
        v660 = (unsigned int *)&enum case for IDCSAnalytics.PayloadValidationResult.inconsistentAgeBirthDate(_:);
      v662 = *v660;
      v661 = v773;
    }
    else
    {
LABEL_201:
      v661 = v773;
      v662 = v766;
    }
    ((void (*)(char *, uint64_t, unint64_t))v777)(v661, v662, v784);
    goto LABEL_142;
  }
  (*(void (**)(uint64_t, uint64_t))(v519 + 8))(v701, v518);
LABEL_141:
  sub_1000150E8(v715, &qword_1001752B0);
LABEL_142:
  v522 = v716;
  v523 = v771;
  v685(v716, v686, v771);
  v524 = (*(uint64_t (**)(char *, uint64_t))(v770 + 88))(v522, v523);
  if (v524 != enum case for ISO18013CodingKeyFormat.standard(_:))
  {
    if (v524 == enum case for ISO18013CodingKeyFormat.ACWG(_:))
    {
      v782 = 4;
      goto LABEL_147;
    }
    (*(void (**)(char *, uint64_t))(v770 + 8))(v716, v771);
  }
  v782 = 0;
LABEL_147:
  v796 = 0;
  v797 = 0;
  v794 = 0;
  v795 = 0;
  sub_10002D51C(v775, v774, (uint64_t)v785);
  if (v786)
  {
    sub_100025938((uint64_t)&v787, (uint64_t)v789);
    sub_10002E83C(v785);
    sub_10002597C(v789, (uint64_t)&__s2);
    v525 = v792;
    v526 = v793;
    v527 = sub_1000151A4(&__s2, v792);
    v528 = sub_10002C974(v775, v774, (uint64_t)v527, v525, v526);
    if (v363)
    {
      sub_10000B164(v680, v681);
      sub_10000B164(v683, v684);
      swift_bridgeObjectRelease(0);
      swift_release(v688);
      goto LABEL_177;
    }
    countAndFlagsBits = v528;
    v538 = v529;
    if (v529)
    {
      v539 = String.uppercased()();
      countAndFlagsBits = v539._countAndFlagsBits;
      v540 = v539._object;
      swift_bridgeObjectRelease(v538);
    }
    else
    {
      v540 = 0;
    }
    v796 = countAndFlagsBits;
    v797 = v540;
    v579 = swift_bridgeObjectRetain(v540);
    defaultLogger()(v579);
    v580 = swift_bridgeObjectRetain(v540);
    v581 = Logger.logObject.getter(v580);
    v582 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v581, v582))
    {
      v583 = (uint8_t *)swift_slowAlloc(12, -1);
      v584 = swift_slowAlloc(32, -1);
      v771 = v584;
      *(_DWORD *)v583 = 136315138;
      v785[0] = v584;
      if (v540)
        v585 = countAndFlagsBits;
      else
        v585 = 0;
      if (v540)
        v586 = (unint64_t)v540;
      else
        v586 = 0xE000000000000000;
      swift_bridgeObjectRetain(v540);
      *(_QWORD *)&v789[0] = sub_10003FA80(v585, v586, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v789, (char *)v789 + 8, v583 + 4);
      swift_bridgeObjectRelease_n(v540, 2);
      swift_bridgeObjectRelease(v586);
      _os_log_impl((void *)&_mh_execute_header, v581, v582, "ISO18013PackagePayloadProcessor: region: %s", v583, 0xCu);
      v587 = v771;
      swift_arrayDestroy(v771, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v587, -1, -1);
      swift_slowDealloc(v583, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v540, 2);
    }
    v731((uint64_t)v711, v732);
    sub_10000CE40(&__s2);
  }
  else
  {
    v530 = sub_1000150E8((uint64_t)v785, &qword_1001752F0);
    defaultLogger()(v530);
    v531 = swift_bridgeObjectRetain_n(v774, 2);
    v532 = Logger.logObject.getter(v531);
    v533 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v532, v533))
    {
      v534 = (uint8_t *)swift_slowAlloc(12, -1);
      v535 = swift_slowAlloc(32, -1);
      v785[0] = v535;
      *(_DWORD *)v534 = 136315138;
      v536 = v774;
      swift_bridgeObjectRetain(v774);
      __s2 = sub_10003FA80(v775, v536, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v791, v534 + 4);
      swift_bridgeObjectRelease_n(v536, 3);
      _os_log_impl((void *)&_mh_execute_header, v532, v533, "ISO18013PackagePayloadProcessor: docType: %s doesnt have issuing country element identifier", v534, 0xCu);
      swift_arrayDestroy(v535, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v535, -1, -1);
      swift_slowDealloc(v534, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v774, 2);
    }
    v731((uint64_t)v714, v732);
    v796 = sub_10002E068(v775, v774);
    v797 = v554;
  }
  sub_10002D51C(v775, v774, (uint64_t)v785);
  if (v786)
  {
    sub_100025938((uint64_t)&v788, (uint64_t)v789);
    sub_10002E83C(v785);
    swift_bridgeObjectRelease(v795);
    sub_10002597C(v789, (uint64_t)&__s2);
    v588 = v792;
    v589 = v793;
    v590 = sub_1000151A4(&__s2, v792);
    v591 = sub_10002C974(v775, v774, (uint64_t)v590, v588, v589);
    if (v363)
    {
      sub_10000B164(v680, v681);
      sub_10000B164(v683, v684);
      swift_release(v688);
      swift_bridgeObjectRelease(v797);
LABEL_177:
      v593 = *(void (**)(char *, uint64_t))(v740 + 8);
      v594 = v743;
      v593(v745, v743);
      v593(v741, v594);
      v593(v742, v594);
      (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
      (*(void (**)(char *, uint64_t))(v753 + 8))(v756, v754);
      (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
      (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
      (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
      sub_10000CE40(&__s2);
      v782 = v363;
LABEL_178:
      v119 = v773;
      v120 = v777;
      goto LABEL_124;
    }
    v602 = v591;
    v603 = v592;
    v794 = v591;
    v795 = v592;
    v604 = swift_bridgeObjectRetain(v592);
    defaultLogger()(v604);
    v605 = swift_bridgeObjectRetain(v603);
    v606 = Logger.logObject.getter(v605);
    v607 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v606, v607))
    {
      v608 = (uint8_t *)swift_slowAlloc(12, -1);
      v609 = swift_slowAlloc(32, -1);
      v780 = v609;
      *(_DWORD *)v608 = 136315138;
      v785[0] = v609;
      if (v603)
        v610 = v602;
      else
        v610 = 0;
      if (v603)
        v611 = v603;
      else
        v611 = 0xE000000000000000;
      swift_bridgeObjectRetain(v603);
      *(_QWORD *)&v789[0] = sub_10003FA80(v610, v611, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v789, (char *)v789 + 8, v608 + 4);
      swift_bridgeObjectRelease_n(v603, 2);
      swift_bridgeObjectRelease(v611);
      _os_log_impl((void *)&_mh_execute_header, v606, v607, "ISO18013PackagePayloadProcessor: Issuing Jurisdiction %s", v608, 0xCu);
      v612 = v780;
      swift_arrayDestroy(v780, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v612, -1, -1);
      swift_slowDealloc(v608, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v603, 2);
    }
    v731((uint64_t)v703, v732);
    sub_10000CE40(&__s2);
  }
  else
  {
    v595 = sub_1000150E8((uint64_t)v785, &qword_1001752F0);
    defaultLogger()(v595);
    v596 = swift_bridgeObjectRetain_n(v774, 2);
    v597 = Logger.logObject.getter(v596);
    v598 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v597, v598))
    {
      v599 = (uint8_t *)swift_slowAlloc(12, -1);
      v600 = swift_slowAlloc(32, -1);
      v785[0] = v600;
      *(_DWORD *)v599 = 136315138;
      v601 = v774;
      swift_bridgeObjectRetain(v774);
      __s2 = sub_10003FA80(v775, v601, v785);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v791, v599 + 4);
      swift_bridgeObjectRelease_n(v601, 3);
      _os_log_impl((void *)&_mh_execute_header, v597, v598, "ISO18013PackagePayloadProcessor: docType: %s doesnt have issuing jurisdiction element identifier", v599, 0xCu);
      swift_arrayDestroy(v600, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v600, -1, -1);
      swift_slowDealloc(v599, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v774, 2);
    }
    v731((uint64_t)v710, v732);
  }
  v613 = v705;
  v614 = v767;
  (*(void (**)(char *, _QWORD, uint64_t))(v768 + 104))(v705, *(unsigned int *)*(&off_1001688C8 + (char)v769), v767);
  swift_beginAccess(&v796, v785, 0, 0);
  v615 = v796;
  v616 = v797;
  swift_beginAccess(&v794, &__s2, 0, 0);
  v618 = v794;
  v617 = v795;
  type metadata accessor for IDCSAnalytics(0);
  swift_bridgeObjectRetain(v617);
  v619 = v774;
  swift_bridgeObjectRetain(v774);
  swift_bridgeObjectRetain(v616);
  v673 = v618;
  v620 = v773;
  static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)(v613, v775, v619, v772, v724, v773, v615, v616, v673, v617);
  swift_bridgeObjectRelease(v619);
  swift_bridgeObjectRelease(v616);
  swift_bridgeObjectRelease(v617);
  (*(void (**)(char *, uint64_t))(v768 + 8))(v613, v614);
  v621 = *(_QWORD *)(v687 + 120);
  v780 = *(_QWORD *)(v687 + 112);
  v779 = (char *)v621;
  v622 = sub_100005A38(v780, v621);
  v623 = v734;
  v624 = v756;
  v625 = ISO18013MobileSecurityObject.validityInfo.getter(v622);
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter(v625);
  v626 = v623;
  v627 = v735;
  v628 = v682;
  v629 = ((uint64_t (*)(char *, uint64_t))v682)(v626, v735);
  v630 = v704;
  v631 = ISO18013MobileSecurityObject.validityInfo.getter(v629);
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(v631);
  sub_10000B164(v683, v684);
  swift_release(v688);
  v628(v630, v627);
  v632 = v740;
  v633 = *(void (**)(char *, uint64_t))(v740 + 8);
  v634 = v743;
  v633(v745, v743);
  v633(v741, v634);
  v633(v742, v634);
  (*(void (**)(char *, uint64_t))(v749 + 8))(v748, v747);
  (*(void (**)(char *, uint64_t))(v753 + 8))(v624, v754);
  (*(void (**)(char *, uint64_t))(v757 + 8))(v759, v758);
  (*(void (**)(char *, uint64_t))(v761 + 8))(v760, v762);
  (*(void (**)(uint64_t, uint64_t))(v763 + 8))(v783, v764);
  (*(void (**)(char *, unint64_t))(v781 + 8))(v620, v784);
  v636 = v796;
  v635 = (uint64_t)v797;
  v637 = v795;
  v784 = v794;
  v638 = v706;
  v639 = v774;
  *(_QWORD *)v706 = v775;
  *((_QWORD *)v638 + 1) = v639;
  v640 = v780;
  *((_QWORD *)v638 + 2) = v782;
  *((_QWORD *)v638 + 3) = v640;
  v641 = v680;
  *((_QWORD *)v638 + 4) = v779;
  *((_QWORD *)v638 + 5) = v641;
  *((_QWORD *)v638 + 6) = v681;
  v642 = (int *)type metadata accessor for PayloadMetadata(0);
  v643 = *(void (**)(char *, char *, uint64_t))(v632 + 32);
  v643(&v638[v642[8]], v712, v634);
  result = ((uint64_t (*)(char *, char *, uint64_t))v643)(&v638[v642[9]], v713, v634);
  v644 = &v638[v642[10]];
  v645 = v724;
  *(_QWORD *)v644 = v772;
  *((_QWORD *)v644 + 1) = v645;
  v646 = (uint64_t *)&v638[v642[11]];
  *v646 = v636;
  v646[1] = v635;
  v647 = (unint64_t *)&v638[v642[12]];
  *v647 = v784;
  v647[1] = v637;
  return result;
}

unint64_t sub_10002B87C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;

  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  sub_100005A38(v3, v2);
  v4 = Data.base16EncodedString()();
  sub_100005AB0(v3, v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v4._object);
  return 0xD00000000000001CLL;
}

uint64_t sub_10002B92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002BE28();
  v8 = v1;
  if (v1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v1);
    v10 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v11, v12, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010012F480, v1, v6, 0, v10, 0xD000000000000074, 0x800000010012F370, 0xD000000000000020, 0x800000010012F4B0, 366);
    swift_willThrow(v13);
    swift_errorRelease(v1);
  }
  else
  {
    v9 = v7;
    v8 = sub_100072BCC(a1, v7);
    swift_bridgeObjectRelease(v9);
  }
  return v8;
}

uint64_t sub_10002BAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_100175300);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ISO18013Package.Document(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013Package(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v41;
  result = sub_100025B58((uint64_t)v14);
  if (!v15)
  {
    v34[1] = 0;
    v35 = v10;
    v36 = v8;
    v37 = v11;
    v41 = v12;
    v17 = ISO18013Package.documents.getter(result);
    v18 = *(_QWORD *)(v17 + 16);
    v19 = swift_bridgeObjectRelease(v17);
    if (v18 == 1)
    {
      v20 = ISO18013Package.documents.getter(v19);
      sub_1000259F0(v20, v6);
      swift_bridgeObjectRelease(v20);
      v21 = sub_100008E84(&qword_100175310);
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v6, 1, v21);
      v22 = v41;
      if ((_DWORD)result == 1)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease(v6[1]);
        v23 = (char *)v6 + *(int *)(v21 + 48);
        v24 = v35;
        v25 = v36;
        v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v35, v23, v7);
        v27 = v38;
        ISO18013Package.Document.issuerAuth.getter(v26);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v7);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v37);
        v28 = type metadata accessor for COSE_Sign1(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
      }
    }
    else
    {
      v29 = v3;
      (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v3, enum case for DIPError.Code.idcsInvalidPayload(_:), v40);
      v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010012F530, 0, v29, 0, v30, 0xD000000000000074, 0x800000010012F370, 0x6575737349746567, 0xEF29286874754172, 379);
      swift_willThrow(v33);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v14, v37);
    }
  }
  return result;
}

uint64_t sub_10002BE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v44 = type metadata accessor for DIPError.Code(0);
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v45 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008E84(&qword_100175300);
  __chkstk_darwin(v2);
  v47 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100008E84(&qword_100175308);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ISO18013Package.Document(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013Package(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v48;
  v16 = sub_100025B58((uint64_t)v14);
  if (!v15)
  {
    v38 = v10;
    v39 = v6;
    v40 = v8;
    v41 = v7;
    v42 = 0;
    v43 = v12;
    v18 = v45;
    v17 = v46;
    v48 = v11;
    v19 = v14;
    v20 = ISO18013Package.documents.getter(v16);
    v21 = v47;
    sub_1000259F0(v20, v47);
    swift_bridgeObjectRelease(v20);
    v22 = sub_100008E84(&qword_100175310);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22) == 1)
    {
      sub_1000150E8((uint64_t)v21, &qword_100175300);
      (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v18, enum case for DIPError.Code.invalidStoredData(_:), v44);
      v23 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v24 = type metadata accessor for DIPError(0);
      v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v0 = swift_allocError(v24, v25, 0, 0);
      v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010012F500, 0, v18, 0, v23, 0xD000000000000074, 0x800000010012F370, 0x73656D614E746567, 0xEF29287365636170, 389);
      swift_willThrow(v26);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v48);
    }
    else
    {
      v27 = v21[1];
      v28 = (char *)v21 + *(int *)(v22 + 48);
      v30 = v39;
      v29 = v40;
      v31 = (char *)v39 + *(int *)(v4 + 48);
      *v39 = *v21;
      v30[1] = v27;
      v32 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v33 = v41;
      v32(v31, v28, v41);
      swift_bridgeObjectRelease(v30[1]);
      v34 = (char *)v30 + *(int *)(v4 + 48);
      v35 = v38;
      v36 = ((uint64_t (*)(char *, char *, uint64_t))v32)(v38, v34, v33);
      v0 = ISO18013Package.Document.namespaces.getter(v36);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v33);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v48);
    }
  }
  return v0;
}

unint64_t sub_10002C1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t DynamicType;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 *v60;
  unint64_t v61;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v6 = type metadata accessor for AnyCodable(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v89 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v87 = *(_QWORD *)(v9 - 8);
  v88 = v9;
  __chkstk_darwin(v9);
  v86 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008E84(&qword_1001752E0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v81 - v15;
  v17 = sub_100008E84(&qword_1001752E8);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v84 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v85 = (char *)&v81 - v21;
  sub_10002D51C(a1, a2, (uint64_t)&v101);
  if (!*((_QWORD *)&v102 + 1))
  {
    v59 = (uint64_t *)&unk_1001752F0;
    v60 = &v101;
    goto LABEL_17;
  }
  v91 = v14;
  v92 = v17;
  v82 = v7;
  v83 = v6;
  v113 = v105;
  v114 = v106;
  v115 = v107;
  v116 = v108;
  v109 = v101;
  v110 = v102;
  v111 = v103;
  v112 = v104;
  sub_100025938((uint64_t)&v114, (uint64_t)&v101);
  v22 = *((_QWORD *)&v102 + 1);
  v23 = sub_1000151A4(&v101, *((uint64_t *)&v102 + 1));
  DynamicType = swift_getDynamicType(v23, v22, 1);
  v25 = v103;
  sub_10000CE40(&v101);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v25, DynamicType, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated type descriptor for MobileDocumentElementIdentifier.NamespaceIdentifier);
  v99 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, DynamicType, AssociatedTypeWitness, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated conformance descriptor for MobileDocumentElementIdentifier.MobileDocumentElementIdentifier.NamespaceIdentifier: RawRepresentable);
  v100 = AssociatedConformanceWitness;
  sub_1000258FC(&v97);
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(DynamicType, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v95, AssociatedTypeWitness, AssociatedConformanceWitness);
  v28 = v96;
  v29 = *(_QWORD *)(a3 + 16);
  v90 = a3;
  if (v29 && (v30 = sub_1000FBC04(v95, v96), (v31 & 1) != 0))
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v30);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v28);
    v34 = *((_QWORD *)&v115 + 1);
    v33 = v116;
    sub_1000151A4(&v114, *((uint64_t *)&v115 + 1));
    dispatch thunk of RawRepresentable.rawValue.getter(&v93, v34, *(_QWORD *)(v33 + 16));
    v35 = v94;
    if (*(_QWORD *)(v32 + 16))
    {
      v36 = sub_1000FBC04(v93, v94);
      v37 = v18;
      v39 = (__int128 *)v91;
      v38 = v92;
      if ((v40 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v16, *(_QWORD *)(v32 + 56) + *(_QWORD *)(v37 + 72) * v36, v92);
        v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
        v41(v16, 0, 1, v38);
      }
      else
      {
        v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
        v41(v16, 1, 1, v92);
      }
    }
    else
    {
      v37 = v18;
      v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v38 = v92;
      v41(v16, 1, 1, v92);
      v39 = (__int128 *)v91;
    }
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v32);
    sub_10000CE40(&v97);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v16, 1, v38) != 1)
    {
      v72 = v85;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v85, v16, v38);
      v73 = v86;
      v74 = CBOREncodedCBOR.value.getter(v38);
      v75 = v89;
      ISO18013IssuerSignedItem.elementValue.getter(v74);
      v76 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v73, v88);
      v77 = AnyCodable.stringValue.getter(v76);
      v79 = v78;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v75, v83);
      if (v79)
      {
        v97 = v77;
        v98 = v79;
        v80 = sub_10002E870();
        Collection.nilIfEmpty.getter(&v101, &type metadata for String, v80);
        swift_bridgeObjectRelease(v79);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v72, v38);
        if (*((_QWORD *)&v101 + 1))
        {
          v61 = v101;
LABEL_31:
          sub_10002E83C(&v109);
          return v61;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v72, v38);
      }
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    sub_10000CE40(&v97);
    v37 = v18;
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v38 = v92;
    v41(v16, 1, 1, v92);
    v39 = (__int128 *)v91;
  }
  sub_1000150E8((uint64_t)v16, &qword_1001752E0);
LABEL_9:
  sub_100025938((uint64_t)&v109, (uint64_t)&v101);
  v42 = *((_QWORD *)&v102 + 1);
  v43 = sub_1000151A4(&v101, *((uint64_t *)&v102 + 1));
  v44 = swift_getDynamicType(v43, v42, 1);
  v45 = v103;
  sub_10000CE40(&v101);
  v46 = swift_getAssociatedTypeWitness(0, v45, v44, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated type descriptor for MobileDocumentElementIdentifier.NamespaceIdentifier);
  v99 = v46;
  v47 = swift_getAssociatedConformanceWitness(v45, v44, v46, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated conformance descriptor for MobileDocumentElementIdentifier.MobileDocumentElementIdentifier.NamespaceIdentifier: RawRepresentable);
  v100 = v47;
  sub_1000258FC(&v97);
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(v44, v45);
  dispatch thunk of RawRepresentable.rawValue.getter(&v95, v46, v47);
  v48 = v96;
  v49 = v90;
  if (*(_QWORD *)(v90 + 16) && (v50 = sub_1000FBC04(v95, v96), (v51 & 1) != 0))
  {
    v52 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRelease(v48);
    v54 = *((_QWORD *)&v110 + 1);
    v53 = v111;
    sub_1000151A4(&v109, *((uint64_t *)&v110 + 1));
    dispatch thunk of RawRepresentable.rawValue.getter(&v93, v54, *(_QWORD *)(v53 + 16));
    v55 = v94;
    if (*(_QWORD *)(v52 + 16) && (v56 = sub_1000FBC04(v93, v94), (v57 & 1) != 0))
    {
      (*(void (**)(__int128 *, unint64_t, uint64_t))(v37 + 16))(v39, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v37 + 72) * v56, v38);
      v58 = 0;
    }
    else
    {
      v58 = 1;
    }
    v41((char *)v39, v58, 1, v38);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    sub_10000CE40(&v97);
    if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) != 1)
    {
      v63 = v84;
      (*(void (**)(char *, __int128 *, uint64_t))(v37 + 32))(v84, v39, v38);
      v64 = v86;
      v65 = CBOREncodedCBOR.value.getter(v38);
      v66 = v89;
      ISO18013IssuerSignedItem.elementValue.getter(v65);
      v67 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v64, v88);
      v68 = AnyCodable.stringValue.getter(v67);
      v70 = v69;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v83);
      if (v70
        && (v97 = v68,
            v98 = v70,
            v71 = sub_10002E870(),
            Collection.nilIfEmpty.getter(&v101, &type metadata for String, v71),
            swift_bridgeObjectRelease(v70),
            *((_QWORD *)&v101 + 1)))
      {
        v61 = v101;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v63, v38);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v63, v38);
        swift_bridgeObjectRelease(0);
        v61 = 0xD00000000000001CLL;
      }
      goto LABEL_31;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v48);
    sub_10000CE40(&v97);
    v41((char *)v39, 1, 1, v38);
  }
  sub_10002E83C(&v109);
  v59 = &qword_1001752E0;
  v60 = v39;
LABEL_17:
  sub_1000150E8((uint64_t)v60, v59);
  return 0;
}

unint64_t sub_10002C974(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t AssociatedConformanceWitness;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  char v122[56];
  uint64_t v123;
  unint64_t v124[2];
  unint64_t v125;

  v110 = a2;
  v109 = a1;
  v114 = *(_QWORD *)(a4 - 8);
  v8 = __chkstk_darwin(a1);
  v108 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v104 = (char *)&v103 - v10;
  v11 = type metadata accessor for DIPError.Code(0);
  v115 = *(_QWORD *)(v11 - 8);
  v116 = (void (*)(char *, uint64_t))v11;
  __chkstk_darwin(v11);
  v117 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_1001752C0);
  __chkstk_darwin(v13);
  v106 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v15);
  v105 = (uint64_t)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for Logger(0);
  v111 = *(_QWORD *)(v118 - 8);
  v17 = __chkstk_darwin(v118);
  v113 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v107 = (char *)&v103 - v20;
  __chkstk_darwin(v19);
  v112 = (char *)&v103 - v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated type descriptor for MobileDocumentElementIdentifier.NamespaceIdentifier);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v25 = (char *)&v103 - v24;
  swift_getDynamicType(a3, a4, 0);
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(a4, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated conformance descriptor for MobileDocumentElementIdentifier.MobileDocumentElementIdentifier.NamespaceIdentifier: RawRepresentable);
  dispatch thunk of RawRepresentable.rawValue.getter(&v123, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, AssociatedTypeWitness);
  v28 = v123;
  v27 = v124[0];
  v29 = sub_100008E84(&qword_1001752D0);
  inited = swift_initStackObject(v29, v122);
  v119 = xmmword_10012A6D0;
  *(_OWORD *)(inited + 16) = xmmword_10012A6D0;
  *(_QWORD *)(inited + 32) = v28;
  *(_QWORD *)(inited + 40) = v27;
  v31 = sub_100008E84(&qword_1001752D8);
  v32 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v32 + 16) = v119;
  v33 = *(_QWORD *)(a5 + 16);
  swift_bridgeObjectRetain(v27);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v32 + 32), a4, v33);
  *(_QWORD *)(inited + 48) = v32;
  v34 = sub_10003E3FC(inited);
  v35 = v121;
  v36 = sub_10002BE28();
  if (v35)
  {
    v37 = v117;
    (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v115 + 104))(v117, enum case for DIPError.Code.internalError(_:), v116);
    swift_errorRetain(v35);
    v38 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v39, v40, 0, 0);
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010012F480, v35, v37, 0, v38, 0xD000000000000074, 0x800000010012F370, 0xD000000000000020, 0x800000010012F4B0, 366);
    swift_willThrow(v41);
    swift_errorRelease(v35);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v34);
    return v38;
  }
  v42 = v36;
  v120 = v27;
  v115 = v28;
  v103 = v33;
  v121 = a3;
  *(_QWORD *)&v119 = a4;
  v43 = v112;
  v44 = defaultLogger()(v36);
  __chkstk_darwin(v44);
  v102 = v42;
  Logger.sensitive(_:)(sub_10002E7AC, &v101);
  v45 = *(void (**)(char *, uint64_t))(v111 + 8);
  v46 = v118;
  v45(v43, v118);
  v47 = sub_10003E408((uint64_t)&_swiftEmptyArrayStorage);
  v48 = swift_bridgeObjectRelease(v47);
  v49 = defaultLogger()(v48);
  __chkstk_darwin(v49);
  v102 = v34;
  Logger.sensitive(_:)(sub_10002E7B4, &v101);
  v116 = v45;
  v45(v43, v46);
  swift_bridgeObjectRetain(v34);
  v50 = swift_bridgeObjectRetain(v42);
  v51 = sub_100074C8C(v50, v34);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRetain(v34);
  v52 = sub_10007545C(&_swiftEmptyDictionarySingleton, v51, v34);
  swift_bridgeObjectRelease(v42);
  swift_release(v51);
  swift_bridgeObjectRelease_n(v34, 2);
  v53 = *(_QWORD *)(v52 + 16);
  v117 = 0;
  if (!v53)
  {
    v68 = v120;
LABEL_9:
    swift_bridgeObjectRelease(v68);
    v69 = swift_bridgeObjectRelease(v52);
    v65 = v119;
    v70 = v114;
    v61 = v110;
    v62 = v109;
LABEL_10:
    v67 = v121;
LABEL_11:
    v71 = v113;
    defaultLogger()(v69);
    v72 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v108, v67, v65);
    v73 = swift_bridgeObjectRetain_n(v61, 2);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = swift_slowAlloc(22, -1);
      v77 = swift_slowAlloc(64, -1);
      v125 = v77;
      *(_DWORD *)v76 = 136315394;
      swift_bridgeObjectRetain(v61);
      v123 = sub_10003FA80(v62, v61, (uint64_t *)&v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v76 + 4);
      swift_bridgeObjectRelease_n(v61, 3);
      *(_WORD *)(v76 + 12) = 2080;
      dispatch thunk of RawRepresentable.rawValue.getter(&v123, v65, v103);
      v78 = v124[0];
      v123 = sub_10003FA80(v123, v124[0], (uint64_t *)&v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v76 + 14);
      swift_bridgeObjectRelease(v78);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v72, v65);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Element not found for doc Type %s and element Identifier %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);

      v79 = v113;
    }
    else
    {
      swift_bridgeObjectRelease_n(v61, 2);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v65);

      v79 = v71;
    }
    v116(v79, v118);
    return 0;
  }
  v54 = v120;
  v55 = sub_1000FBC04(v115, v120);
  if ((v56 & 1) == 0)
  {
    v68 = v54;
    goto LABEL_9;
  }
  v57 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v55);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v52);
  v58 = *(_QWORD *)(v57 + 16);
  v59 = type metadata accessor for CredentialElement(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = v110;
  v62 = v109;
  if (v58)
  {
    v63 = v106;
    sub_10002E7BC(v57 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80)), v106);
    v64 = 0;
    v65 = v119;
    v66 = v107;
    v67 = v121;
  }
  else
  {
    v64 = 1;
    v65 = v119;
    v66 = v107;
    v67 = v121;
    v63 = v106;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v63, v64, 1, v59);
  swift_bridgeObjectRelease(v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v63, 1, v59) == 1)
  {
    v69 = sub_1000150E8(v63, &qword_1001752C0);
    v70 = v114;
    goto LABEL_11;
  }
  v81 = v105;
  sub_10002E908(v63 + *(int *)(v59 + 20), v105, &qword_1001752C8);
  sub_10002E800(v63);
  v82 = type metadata accessor for AnyCodable(0);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82);
  if ((_DWORD)v84 == 1)
  {
    v69 = sub_1000150E8(v81, &qword_1001752C8);
    v70 = v114;
    goto LABEL_10;
  }
  v85 = v81;
  v38 = AnyCodable.stringValue.getter(v84);
  v87 = v86;
  v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8))(v85, v82);
  v70 = v114;
  v67 = v121;
  if (!v87)
    goto LABEL_11;
  v88 = v66;
  defaultLogger()(v69);
  v89 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v104, v67, v65);
  swift_bridgeObjectRetain_n(v61, 2);
  v90 = swift_bridgeObjectRetain_n(v87, 2);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.debug.getter();
  LODWORD(v121) = v92;
  if (os_log_type_enabled(v91, v92))
  {
    v93 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v119 = v91;
    v94 = v89;
    v95 = v62;
    v96 = v93;
    v120 = swift_slowAlloc(96, -1);
    v125 = v120;
    *(_DWORD *)v96 = 136315650;
    swift_bridgeObjectRetain(v61);
    v123 = sub_10003FA80(v95, v61, (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v96 + 4);
    swift_bridgeObjectRelease_n(v61, 3);
    *(_WORD *)(v96 + 12) = 2080;
    dispatch thunk of RawRepresentable.rawValue.getter(&v123, v65, v103);
    v97 = v124[0];
    v123 = sub_10003FA80(v123, v124[0], (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v96 + 14);
    swift_bridgeObjectRelease(v97);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v94, v65);
    *(_WORD *)(v96 + 22) = 2080;
    swift_bridgeObjectRetain(v87);
    v123 = sub_10003FA80(v38, v87, (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v96 + 24);
    swift_bridgeObjectRelease_n(v87, 3);
    v98 = (void *)v119;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v119, (os_log_type_t)v121, "Element found for doc Type %s and element Identifier %s : %s", (uint8_t *)v96, 0x20u);
    v99 = v120;
    swift_arrayDestroy(v120, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v96, -1, -1);

    v100 = v107;
  }
  else
  {
    swift_bridgeObjectRelease_n(v61, 2);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v89, v65);

    swift_bridgeObjectRelease_n(v87, 2);
    v100 = v88;
  }
  v116(v100, v118);
  return v38;
}

double sub_10002D51C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  double result;
  uint64_t v22;

  v6 = sub_100008E84(&qword_1001752B0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v22 - v10;
  swift_bridgeObjectRetain(a2);
  ISO18013KnownDocTypes.init(rawValue:)(a1, a2);
  v12 = type metadata accessor for ISO18013KnownDocTypes(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    sub_10002E908((uint64_t)v11, (uint64_t)v9, &qword_1001752B0);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v9, v12);
    if (v14 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
    {
      v15 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
      *(_QWORD *)(a3 + 24) = v15;
      v16 = sub_1000058C8(&qword_1001752B8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier);
      *(_QWORD *)(a3 + 32) = v16;
      v17 = sub_1000258FC((_QWORD *)a3);
      v18 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104);
      v18(v17, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v15);
      *(_QWORD *)(a3 + 64) = v15;
      *(_QWORD *)(a3 + 72) = v16;
      v19 = sub_1000258FC((_QWORD *)(a3 + 40));
      v18(v19, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v15);
      *(_QWORD *)(a3 + 104) = v15;
      *(_QWORD *)(a3 + 112) = v16;
      v20 = sub_1000258FC((_QWORD *)(a3 + 80));
      v18(v20, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v15);
LABEL_6:
      sub_1000150E8((uint64_t)v11, &qword_1001752B0);
      return result;
    }
    if (v14 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      *(_QWORD *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  sub_1000150E8((uint64_t)v11, &qword_1001752B0);
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t sub_10002D738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002BE28();
  v6 = v0;
  if (v0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v1);
    swift_errorRetain(v0);
    v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010012F410, v0, v4, 0, v8, 0xD000000000000074, 0x800000010012F370, 0xD000000000000022, 0x800000010012F450, 508);
    swift_willThrow(v11);
    swift_errorRelease(v0);
  }
  else
  {
    v7 = v5;
    v6 = sub_1000757BC(v5);
    swift_bridgeObjectRelease(v7);
  }
  return v6;
}

uint64_t sub_10002D8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002BE28();
  if (v2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.internalError(_:), v5);
    swift_errorRetain(v2);
    v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v11, v12, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v10, 0xD000000000000074, 0x800000010012F370, 0xD00000000000001FLL, 0x800000010012F3F0, 527);
    swift_willThrow(v13);
    return swift_errorRelease(v2);
  }
  else
  {
    v15 = v9;
    v16 = sub_1000AAB28(a1, v9, a2);
    swift_bridgeObjectRelease(v15);
    return (uint64_t)v16;
  }
}

uint64_t sub_10002DA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005AB0(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_1000150E8(v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload, &qword_100175368);
  sub_10000CE40((_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder));
  v1 = v0 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat;
  v2 = type metadata accessor for ISO18013CodingKeyFormat(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10002DAF8()
{
  return type metadata accessor for ISO18013PackagePayloadProcessor(0);
}

uint64_t type metadata accessor for ISO18013PackagePayloadProcessor(uint64_t a1)
{
  uint64_t result;

  result = qword_100175120;
  if (!qword_100175120)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ISO18013PackagePayloadProcessor);
  return result;
}

void sub_10002DB3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[1] = &unk_10012A9A8;
  sub_10002DBE0(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_10012A9C0;
    v4 = type metadata accessor for ISO18013CodingKeyFormat(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_10002DBE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100175130)
  {
    v2 = type metadata accessor for ISO18013Package(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100175130);
  }
}

uint64_t sub_10002DC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_10002DEBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002DC58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 32) = a2;
  v4 = *v2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v4;
  return swift_task_switch(sub_10002DC74, v4, 0);
}

uint64_t sub_10002DC74()
{
  uint64_t v0;

  sub_100025F70(*(unsigned __int8 *)(v0 + 32), *(char **)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DCC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10002DCDC, v3, 0);
}

uint64_t sub_10002DCDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10002B92C(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10002DD28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a1;
  v3[3] = a2;
  v4 = *v2;
  v3[4] = *v2;
  return swift_task_switch(sub_10002DD44, v4, 0);
}

uint64_t sub_10002DD44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10002D8E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10002DD94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10002DDAC, v3, 0);
}

uint64_t sub_10002DDAC()
{
  uint64_t v0;

  sub_10002BAE0(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DDF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10002DE10, v2, 0);
}

uint64_t sub_10002DE10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10002D738();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10002DE5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10002DE74, v2, 0);
}

uint64_t sub_10002DE74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 120);
  sub_100005A38(v3, v2);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v2);
}

uint64_t sub_10002DEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;
  _QWORD v18[5];

  v4 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ISO18013CodingKeyFormat.standard(_:), v4);
  v18[3] = &type metadata for PayloadProcessorAnalyticsRecorder;
  v18[4] = &off_10016C008;
  v8 = type metadata accessor for ISO18013PackagePayloadProcessor(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = sub_10002E040((uint64_t)v18, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
  __chkstk_darwin(v10);
  (*(void (**)(void))(v11 + 16))();
  v16 = &type metadata for PayloadProcessorAnalyticsRecorder;
  v17 = &off_10016C008;
  swift_defaultActor_initialize(v9);
  v12 = v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  v13 = type metadata accessor for ISO18013Package(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)(v9 + 112) = a1;
  *(_QWORD *)(v9 + 120) = a2;
  sub_10002597C(&v15, v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v7, v4);
  sub_10000CE40(v18);
  return v9;
}

uint64_t sub_10002E040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10002E068(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013KnownDocTypes(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v8);
  v13 = ISO18013KnownDocTypes.rawValue.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v13 == a1 && v15 == a2)
  {
    v18 = swift_bridgeObjectRelease(a2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v13, v15, 0);
    v18 = swift_bridgeObjectRelease(v15);
    if ((v17 & 1) == 0)
      return 0;
  }
  defaultLogger()(v18);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v26 = v4;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v28 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v27 = sub_10003FA80(a1, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "ISO18013PackagePayloadProcessor: issuerForDocTypeWithoutCorrespondingElementIdentifier docType: %s returning JP", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return 20554;
}

uint64_t sub_10002E2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  char v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[6];

  v54[0] = a6;
  v54[1] = a7;
  v60 = a4;
  v61 = a5;
  v65 = a1;
  v66 = a3;
  v64 = a2;
  v7 = type metadata accessor for AnyCodable(0);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7);
  v55 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ISO18013KnownNamespaces(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ISO18013KnownDocTypes(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v19);
  v24 = ISO18013KnownDocTypes.rawValue.getter(v23);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28 = v66;
  v29 = v22;
  v30 = v64;
  v27(v29, v19);
  if (v24 == v30 && v26 == v28)
  {
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v28, v24, v26, 0);
    swift_bridgeObjectRelease(v26);
    if ((v32 & 1) == 0)
    {
      v34 = v62;
      v33 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, v65, v63);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v33);
    }
  }
  v35 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v15);
  v36 = ISO18013KnownNamespaces.rawValue.getter(v35);
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v36 == v60 && v38 == v61)
  {
    swift_bridgeObjectRelease(v61);
    v34 = v62;
    v33 = v63;
    v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, v65, v63);
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v36, v38, 0);
    swift_bridgeObjectRelease(v38);
    v34 = v62;
    v33 = v63;
    v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, v65, v63);
    if ((v40 & 1) == 0)
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v33);
  }
  v41 = ISO18013IssuerSignedItem.elementIdentifier.getter(v39);
  v43 = v42;
  v45 = v58;
  v44 = v59;
  v46 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v58 + 104))(v11, enum case for ISO18013_5_1_ElementIdentifier.portrait(_:), v59);
  v47 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v46);
  v49 = v48;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v44);
  if (v41 == v47 && v43 == v49)
  {
    swift_bridgeObjectRelease_n(v43, 2);
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v33);
  }
  else
  {
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v47, v49, 0);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v43);
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v33);
    if ((v51 & 1) == 0)
      return result;
  }
  v52 = v55;
  v53 = ISO18013IssuerSignedItem.elementValue.getter(result);
  AnyCodable.value.getter(v68, v53);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v52, v57);
  if (!v68[3])
    return sub_1000150E8((uint64_t)v68, &qword_100175360);
  result = swift_dynamicCast(v67, v68, &type metadata for AnyHashable, &type metadata for Data, 6);
  if ((result & 1) != 0)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_10002E7AC()
{
  uint64_t v0;

  return sub_100073660(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10002E7B4()
{
  uint64_t v0;

  return sub_100073D70(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002E7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E800(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10002E83C(_QWORD *a1)
{
  sub_10000CE40(a1);
  sub_10000CE40(a1 + 5);
  sub_10000CE40(a1 + 10);
  return a1;
}

unint64_t sub_10002E870()
{
  unint64_t result;

  result = qword_1001752F8;
  if (!qword_1001752F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001752F8);
  }
  return result;
}

unint64_t sub_10002E8B4()
{
  uint64_t v0;

  return sub_10002B87C(v0);
}

unint64_t sub_10002E8BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100175340;
  if (!qword_100175340)
  {
    v1 = sub_100016404(&qword_100175330);
    result = swift_getWitnessTable(&protocol conformance descriptor for CBOREncodedCBOR<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100175340);
  }
  return result;
}

uint64_t sub_10002E908(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008E84(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002E94C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008E84(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002E990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100175368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(_QWORD *a1)
{
  sub_10000CE40(a1);
  sub_10000CE40(a1 + 5);
  return sub_10000CE40(a1 + 10);
}

_OWORD *initializeWithCopy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

_QWORD *assignWithCopy for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(_QWORD *a1, _QWORD *a2)
{
  sub_10000CEBC(a1, a2);
  sub_10000CEBC(a1 + 5, a2 + 5);
  sub_10000CEBC(a1 + 10, a2 + 10);
  return a1;
}

__n128 initializeWithTake for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  sub_10000CE40((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10000CE40((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_10000CE40((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers()
{
  return &type metadata for ISO18013PackagePayloadProcessor.IssuerElementIdentifiers;
}

uint64_t sub_10002EC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  _QWORD v19[5];

  v5 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ISO18013CodingKeyFormat.ACWG(_:), v5);
  v19[3] = &type metadata for PayloadProcessorAnalyticsRecorder;
  v19[4] = &off_10016C008;
  v9 = type metadata accessor for ISO18013PackagePayloadProcessor(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = sub_10002E040((uint64_t)v19, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
  __chkstk_darwin(v11);
  (*(void (**)(void))(v12 + 16))();
  v17 = &type metadata for PayloadProcessorAnalyticsRecorder;
  v18 = &off_10016C008;
  swift_defaultActor_initialize(v10);
  v13 = v10 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
  v14 = type metadata accessor for ISO18013Package(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)(v10 + 112) = a1;
  *(_QWORD *)(v10 + 120) = a2;
  sub_10002597C(&v16, v10 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v8, v5);
  sub_10000CE40(v19);
  *(_QWORD *)(v2 + 112) = v10;
  return v2;
}

uint64_t sub_10002EDA8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 72) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002EE0C, v2, 0);
}

uint64_t sub_10002EE0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 56) = v1;
  return swift_task_switch(sub_10002EE28, v1, 0);
}

uint64_t sub_10002EE28()
{
  uint64_t v0;

  sub_100025F70(*(unsigned __int8 *)(v0 + 72), *(char **)(v0 + 16));
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002EEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_10000745C();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000070, 0x800000010012F960, 0xD000000000000018, 0x800000010012F5C0, 30);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002EFB4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002F014, v1, 0);
}

uint64_t sub_10002F014()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 56) = v1;
  return swift_task_switch(sub_10002F030, v1, 0);
}

uint64_t sub_10002F030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10002BE28();
  v2 = sub_100072BCC(*(_QWORD *)(v0 + 16), v1);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10002F1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 64))(v4, *(unsigned int *)(v0 + 96), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v3, v2, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD000000000000070, 0x800000010012F960, 0xD000000000000020, 0x800000010012F4B0, 38);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002F328, v2, 0);
}

uint64_t sub_10002F328()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_10002F344, v1, 0);
}

uint64_t sub_10002F344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = sub_10002BE28();
  v2 = *(_QWORD *)(v0 + 56);
  v3 = sub_1000AAB28(*(_QWORD *)(v0 + 16), v1, *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
}

uint64_t sub_10002F4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 72))(v4, *(unsigned int *)(v0 + 104), *(_QWORD *)(v0 + 40));
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v3, v2, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD000000000000070, 0x800000010012F960, 0xD00000000000001FLL, 0x800000010012F3F0, 47);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F5BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002F61C, v1, 0);
}

uint64_t sub_10002F61C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 56) = v1;
  return swift_task_switch(sub_10002F638, v1, 0);
}

uint64_t sub_10002F638()
{
  uint64_t v0;

  sub_10002BAE0(*(_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_10000745C();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000070, 0x800000010012F960, 0x6575737349746567, 0xEF29286874754172, 55);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F7CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002F82C, v0, 0);
}

uint64_t sub_10002F82C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 48) = v1;
  return swift_task_switch(sub_10002F848, v1, 0);
}

uint64_t sub_10002F848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10002BE28();
  v2 = sub_1000757BC(v1);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10002F9D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 56))(v4, *(unsigned int *)(v0 + 88), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v3, v2, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD000000000000070, 0x800000010012F960, 0xD000000000000022, 0x800000010012F450, 63);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FAD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ACWGPackagePayloadProcessor()
{
  return objc_opt_self(_TtC7idcredd27ACWGPackagePayloadProcessor);
}

uint64_t sub_10002FB14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = type metadata accessor for ACWGPackagePayloadProcessor();
  v7 = swift_allocObject(v6, 120, 15);
  result = sub_10002EC10(a1, a2);
  *a3 = v7;
  return result;
}

uint64_t sub_10002FB68(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001753A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000935C;
  return sub_10002EDA8(a1, a2);
}

uint64_t sub_10002FBCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001753AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000161F0;
  return sub_10002EFB4(a1);
}

uint64_t sub_10002FC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001753B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016478;
  return sub_10002F2C4(a1, a2);
}

uint64_t sub_10002FC7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001753BC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100016474;
  return sub_10002F5BC(a1);
}

uint64_t sub_10002FCD0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001753C4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100016478;
  return sub_10002F7CC();
}

uint64_t sub_10002FD18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10002FD30, v2, 0);
}

uint64_t sub_10002FD30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_10002FD4C, v1, 0);
}

uint64_t sub_10002FD4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 120);
  sub_100005A38(v3, v2);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v2);
}

void sub_10002FD94(uint64_t a1)
{
  int64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000557E4(0, v1, 0);
    v4 = sub_1000ED080(a1);
    v5 = 0;
    v6 = a1 + 64;
    v20 = v1;
    v21 = v3;
    v22 = a1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v3)
        goto LABEL_24;
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v4);
      v11 = v10[1];
      v23 = *v10;
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v11);
      if (v13 >= v12 >> 1)
        sub_1000557E4(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v23;
      v14[5] = v11;
      v7 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = a1 + 64;
      v15 = *(_QWORD *)(v22 + 8 * v9);
      if ((v15 & (1 << v4)) == 0)
        goto LABEL_26;
      v3 = v21;
      if (*(_DWORD *)(a1 + 36) != v21)
        goto LABEL_27;
      v16 = v15 & (-2 << (v4 & 0x3F));
      if (v16)
      {
        v7 = __clz(__rbit64(v16)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v20;
      }
      else
      {
        v17 = v9 + 1;
        v18 = (unint64_t)(v7 + 63) >> 6;
        v8 = v20;
        if (v9 + 1 < v18)
        {
          v19 = *(_QWORD *)(v22 + 8 * v17);
          if (v19)
          {
LABEL_20:
            v7 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v9)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v9++);
              if (v19)
              {
                v17 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      v4 = v7;
      if (v5 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

void sub_10002FF9C()
{
  qword_1001754A8 = (uint64_t)&off_100166F98;
}

void sub_10002FFB0()
{
  externalTestRoots._rawValue = &off_100166FC8;
}

Swift::OpaquePointer *externalTestRoots.unsafeMutableAddressor()
{
  if (qword_1001743D0 != -1)
    swift_once(&qword_1001743D0, sub_10002FFB0);
  return &externalTestRoots;
}

void sub_100030004()
{
  qword_1001754B0 = (uint64_t)&off_100166FF8;
}

uint64_t sub_100030018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::Bool v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  id v35;
  NSString v36;
  unsigned int v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  NSString v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  id v58;
  Swift::String v59;
  Swift::Bool v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __n128 v74;
  _QWORD v76[4];
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[24];
  uint64_t v82[3];
  uint64_t v83;

  v1 = type metadata accessor for DIPError.Code(0);
  v76[1] = *(_QWORD *)(v1 - 8);
  v76[2] = v1;
  __chkstk_darwin(v1);
  v76[3] = (char *)v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  v4 = __chkstk_darwin(v3);
  v77 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v76 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)v76 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)v76 - v12;
  v14 = type metadata accessor for CoreIDVAssetBundle.CertificateType(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001743D8 != -1)
    swift_once(&qword_1001743D8, sub_100030004);
  v18 = (_QWORD *)qword_1001754B0;
  v83 = qword_1001754B0;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for CoreIDVAssetBundle.CertificateType.terminalAuthRoots(_:), v14);
  swift_bridgeObjectRetain_n(v18, 2);
  v19 = sub_10003090C((uint64_t)v17, v18);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v83);
  }
  else
  {
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v83);
    v83 = (uint64_t)v20;
    v21 = (void *)objc_opt_self(NSUserDefaults);
    v22 = objc_msgSend(v21, "standardUserDefaults");
    v23._countAndFlagsBits = 0xD00000000000001DLL;
    v23._object = (void *)0x800000010012FB70;
    v24 = NSUserDefaults.internalBool(forKey:)(v23);

    if (v24)
    {
      v26 = defaultLogger()(v25);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Allowing internal reader authentication test roots", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v79);
      if (qword_1001743C8 != -1)
        swift_once(&qword_1001743C8, sub_10002FF9C);
      swift_bridgeObjectRetain(qword_1001754A8);
      sub_1000AF768(v30);
    }
    v31 = objc_msgSend(v21, "standardUserDefaults");
    v32._countAndFlagsBits = 0xD00000000000001DLL;
    v32._object = (void *)0x800000010012FB70;
    v33 = NSUserDefaults.internalBool(forKey:)(v32);

    if (v33
      || (v35 = objc_msgSend(v21, "standardUserDefaults"),
          v36 = String._bridgeToObjectiveC()(),
          v37 = objc_msgSend(v35, "BOOLForKey:", v36),
          v35,
          v36,
          v37))
    {
      v38 = defaultLogger()(v34);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Allowing external reader authentication test roots", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v79);
      if (qword_1001743D0 != -1)
        swift_once(&qword_1001743D0, sub_10002FFB0);
      swift_bridgeObjectRetain(externalTestRoots._rawValue);
      sub_1000AF768(v42);
    }
    v43 = objc_msgSend(v21, "standardUserDefaults");
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v43, "stringForKey:", v44);

    if (v45)
    {
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      v50 = defaultLogger()(v49);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Reader auth root cert injected through user defaults", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v78 + 8))(v8, v79);
      v54 = (char *)v83;
      if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
        v54 = sub_1000A73AC(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
      v56 = *((_QWORD *)v54 + 2);
      v55 = *((_QWORD *)v54 + 3);
      if (v56 >= v55 >> 1)
        v54 = sub_1000A73AC((char *)(v55 > 1), v56 + 1, 1, v54);
      *((_QWORD *)v54 + 2) = v56 + 1;
      v57 = &v54[16 * v56];
      *((_QWORD *)v57 + 4) = v46;
      *((_QWORD *)v57 + 5) = v48;
      v83 = (uint64_t)v54;
    }
    v58 = objc_msgSend(v21, "standardUserDefaults");
    v59._countAndFlagsBits = 0xD00000000000001BLL;
    v59._object = (void *)0x800000010012FA10;
    v60 = NSUserDefaults.internalBool(forKey:)(v59);

    if (v60)
    {
      v62 = v77;
      v63 = defaultLogger()(v61);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v82[0] = v67;
        *(_DWORD *)v66 = 136315138;
        v76[0] = v66 + 4;
        swift_beginAccess(&v83, v81, 0, 0);
        v68 = v83;
        swift_bridgeObjectRetain(v83);
        v70 = Array.description.getter(v69, &type metadata for String);
        v72 = v71;
        swift_bridgeObjectRelease(v68);
        v80 = sub_10003FA80(v70, v72, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v76[0]);
        swift_bridgeObjectRelease(v72);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "All trusted reader roots: %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v78 + 8))(v62, v79);
      }
    }
    swift_beginAccess(&v83, v82, 0, 0);
    v73 = v83;
    v74 = swift_bridgeObjectRetain(v83);
    v14 = decodeCertificateChain(fromBase64DER:)(v74);
    swift_bridgeObjectRelease_n(v73, 2);
  }
  return v14;
}

_QWORD *sub_10003090C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  Swift::String v55;
  Swift::Bool v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  _QWORD *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  os_log_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[4];
  _QWORD *v106;

  v93 = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v89 = *(_QWORD *)(v3 - 8);
  v90 = v3;
  __chkstk_darwin(v3);
  v91 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for CoreIDVAssetBundle.CertificateType(0);
  v92 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v99 = *(_QWORD *)(v7 - 8);
  v100 = v7;
  v8 = __chkstk_darwin(v7);
  v98 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v96 = (char *)&v84 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v84 - v12;
  v14 = sub_100008E84(&qword_1001754B8);
  __chkstk_darwin(v14);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v95 = (char *)&v84 - v22;
  v106 = a2;
  v23 = (void *)objc_opt_self(NSFileManager);
  v97 = a2;
  v24 = objc_msgSend(v23, "defaultManager", swift_bridgeObjectRetain(a2).n128_f64[0]);
  v25 = 1;
  v26 = objc_msgSend(v24, "URLsForDirectory:inDomains:", 5, 1);

  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v17);
  if (*(_QWORD *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v16, v27 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v17);
    v25 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, v25, 1, v17);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1000150E8((uint64_t)v16, &qword_1001754B8);
LABEL_9:
    v43 = 0;
    v44 = 0xF000000000000000;
    v45 = v101;
    v46 = v97;
    v47 = v98;
    v48 = v96;
    goto LABEL_10;
  }
  v28 = v95;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v95, v16, v17);
  v29 = URL.appendingPathComponent(_:)(0xD00000000000002ALL, 0x800000010012FAB0);
  v30 = URL.isFileOnDisk.getter(v29);
  if ((v30 & 1) == 0)
  {
    v42 = *(void (**)(char *, uint64_t))(v18 + 8);
    v42(v21, v17);
    v42(v28, v17);
    goto LABEL_9;
  }
  defaultLogger()(v30);
  v31 = v92;
  v32 = v94;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 16))(v6, v93, v94);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  v88 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v87 = v34;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v86 = swift_slowAlloc(32, -1);
    v105[0] = v86;
    v85 = v36;
    *(_DWORD *)v36 = 136315138;
    v37 = CoreIDVAssetBundle.CertificateType.rawValue.getter();
    v39 = v38;
    v103 = sub_10003FA80(v37, v38, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v36 + 4);
    swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v94);
    v34 = v87;
    v40 = v85;
    _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v88, "Looking at mobile asset loaded certificates for type : %s", v85, 0xCu);
    v41 = v86;
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v31 + 8))(v6, v32);
  }

  (*(void (**)(char *, uint64_t))(v99 + 8))(v13, v100);
  v69 = v101;
  v70 = Data.init(contentsOf:options:)(v21, 8);
  if (v69)
  {
    v94 = 0xF000000000000000;
    v76 = v91;
    (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v91, enum case for DIPError.Code.internalError(_:), v90);
    swift_errorRetain(v69);
    v77 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v78 = type metadata accessor for DIPError(0);
    v79 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v78, v79, 0, 0);
    v80 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v69, v76, 0, v77, 0xD000000000000059, 0x800000010012FA30, 0xD00000000000002ALL, 0x800000010012FAE0, 210);
    swift_willThrow(v80);
    swift_errorRelease(v69);
    sub_10000B164(0, v94);
    v81 = *(void (**)(char *, uint64_t))(v18 + 8);
    v81(v21, v17);
    v81(v95, v17);
    return (_QWORD *)swift_bridgeObjectRelease(v106);
  }
  v72 = v70;
  v73 = v71;
  sub_100005A38(v70, v71);
  v74 = (uint64_t)v97;
  v75 = sub_100031804(v93, (uint64_t)v97, v72, v73);
  v45 = 0;
  v94 = v73;
  v82 = v75;
  v92 = v72;
  sub_100005AB0(v72, v73);
  v83 = *(void (**)(char *, uint64_t))(v18 + 8);
  v83(v21, v17);
  v83(v95, v17);
  swift_bridgeObjectRelease(v106);
  v106 = v82;
  v47 = v98;
  v48 = v96;
  v46 = (_QWORD *)v74;
  v43 = v92;
  v44 = v94;
LABEL_10:
  v49 = sub_1000322EC(v106, v46);
  if ((v49 & 1) != 0)
  {
    v50 = defaultLogger()(v49);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "No new rootCertificates from cached", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v48, v100);
  }
  v54 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v55._countAndFlagsBits = 0xD00000000000001BLL;
  v55._object = (void *)0x800000010012FA10;
  v56 = NSUserDefaults.internalBool(forKey:)(v55);

  if (v56)
  {
    v58 = defaultLogger()(v57);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v101 = v45;
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v105[0] = v62;
      v92 = v43;
      *(_DWORD *)v61 = 136315138;
      v94 = v44;
      swift_beginAccess(&v106, &v103, 0, 0);
      v63 = v106;
      swift_bridgeObjectRetain(v106);
      v65 = Array.description.getter(v64, &type metadata for String);
      v67 = v66;
      swift_bridgeObjectRelease(v63);
      v102 = sub_10003FA80(v65, v67, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v61 + 4);
      swift_bridgeObjectRelease(v67);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "logging root Certs = %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      sub_10000B164(v92, v94);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
    }
    else
    {
      sub_10000B164(v43, v44);

      (*(void (**)(char *, uint64_t))(v99 + 8))(v47, v100);
    }
  }
  else
  {
    sub_10000B164(v43, v44);
  }
  swift_beginAccess(&v106, v105, 0, 0);
  return v106;
}

char *sub_100031244()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  Swift::String v17;
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  __n128 v45;
  uint64_t v47;
  uint8_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58[3];
  _QWORD *v59;

  v53 = type metadata accessor for DIPError.Code(0);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v2 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v54 - 8);
  v4 = __chkstk_darwin(v54);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v47 - v7;
  v9 = type metadata accessor for CoreIDVAssetBundle.CertificateType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = _swiftEmptyArrayStorage;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for CoreIDVAssetBundle.CertificateType.appleIssuerRoots(_:), v9);
  v13 = sub_10003090C((uint64_t)v12, _swiftEmptyArrayStorage);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease(v59);
  }
  else
  {
    v14 = v13;
    v49 = v8;
    v50 = v6;
    v51 = v3;
    v52 = v2;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease(v59);
    v59 = v14;
    v15 = (void *)objc_opt_self(NSUserDefaults);
    v16 = objc_msgSend(v15, "standardUserDefaults");
    v17._countAndFlagsBits = 0xD000000000000023;
    v17._object = (void *)0x800000010012F9E0;
    v18 = NSUserDefaults.internalBool(forKey:)(v17);

    v20 = v54;
    if (v18)
    {
      v21 = v49;
      v22 = defaultLogger()(v19);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Adding internal reader authentication test roots as Apple issuer roots", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v51 + 8))(v21, v20);
      if (qword_1001743C8 != -1)
        swift_once(&qword_1001743C8, sub_10002FF9C);
      swift_bridgeObjectRetain(qword_1001754A8);
      sub_1000AF768(v26);
    }
    v27 = objc_msgSend(v15, "standardUserDefaults");
    v28._object = (void *)0x800000010012FA10;
    v28._countAndFlagsBits = 0xD00000000000001BLL;
    v29 = NSUserDefaults.internalBool(forKey:)(v28);

    if (v29)
    {
      v31 = v50;
      v32 = defaultLogger()(v30);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.debug.getter();
      v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        v36 = swift_slowAlloc(12, -1);
        LODWORD(v49) = v35;
        v37 = (uint8_t *)v36;
        v58[0] = swift_slowAlloc(32, -1);
        v38 = v58[0];
        *(_DWORD *)v37 = 136315138;
        v48 = v37 + 4;
        swift_beginAccess(&v59, v57, 0, 0);
        v39 = v59;
        swift_bridgeObjectRetain(v59);
        v41 = Array.description.getter(v40, &type metadata for String);
        v43 = v42;
        swift_bridgeObjectRelease(v39);
        v56 = sub_10003FA80(v41, v43, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v48);
        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v49, "All trusted apple issued reader roots: %s", v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v54);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v20);
      }
    }
    swift_beginAccess(&v59, v58, 0, 0);
    v44 = v59;
    v45 = swift_bridgeObjectRetain(v59);
    v2 = (char *)decodeCertificateChain(fromBase64DER:)(v45);
    swift_bridgeObjectRelease_n(v44, 2);
  }
  return v2;
}

id sub_100031804(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id result;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  uint64_t v119;
  unint64_t v120;
  uint64_t v121[3];
  uint64_t v122;

  v113 = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  v122 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008E84(&qword_1001754C0);
  __chkstk_darwin(v11);
  v110 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CoreIDVAssetBundle.CertificateType(0);
  v112 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v114 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100008E84(&qword_1001754C8);
  v109 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v115 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for Logger(0);
  v111 = *(void (**)(char *, uint64_t))(v117 - 8);
  v16 = __chkstk_darwin(v117);
  v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v108 = (char *)&v95 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v95 - v21;
  v23 = type metadata accessor for CoreIDVAssetBundle(0);
  v24 = __chkstk_darwin(v23);
  v25 = __chkstk_darwin(v24);
  if (a4 >> 60 == 15)
  {
    swift_bridgeObjectRetain(a2);
    return (id)a2;
  }
  v99 = v28;
  v101 = v13;
  v106 = (char *)&v95 - v26;
  v102 = v27;
  v103 = v25;
  v29 = v8;
  v100 = a2;
  v105 = v10;
  v30 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = sub_100005A38(a3, a4);
  v32 = JSONDecoder.init()(v31);
  v33 = type metadata accessor for CoreIDVAsset(0);
  v34 = sub_1000058C8(&qword_1001754D0, (uint64_t (*)(uint64_t))&type metadata accessor for CoreIDVAsset, (uint64_t)&protocol conformance descriptor for CoreIDVAsset);
  v107 = a4;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v33, a3, a4, v33, v34);
  v104 = v29;
  if (v4)
  {
    swift_release(v32);
    v35 = enum case for DIPError.Code.internalError(_:);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v37 = v4;
LABEL_5:
    a2 = (uint64_t)v105;
    v36(v105, v35, v104);
    swift_errorRetain(v37);
    v38 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v39, v40, 0, 0);
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v37, a2, 0, v38, 0xD000000000000059, 0x800000010012FA30, 0xD00000000000003BLL, 0x800000010012FB10, 255);
    swift_willThrow(v41);
    swift_errorRelease(v37);
    sub_10000B164(a3, v107);
    return (id)a2;
  }
  v42 = swift_release(v32);
  v98 = v121[0];
  v43 = CoreIDVAsset.base.getter(v42);
  result = (id)MobileGestalt_get_current_device(v43);
  if (result)
  {
    v45 = result;
    v46 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v46)
    {
      v97 = a3;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

      defaultLogger()(v51);
      v52 = swift_bridgeObjectRetain_n(v50, 2);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v121[0] = v56;
        *(_DWORD *)v55 = 136315138;
        v96 = v55 + 4;
        swift_bridgeObjectRetain(v50);
        v119 = sub_10003FA80(v48, v50, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v96);
        v57 = v48;
        v58 = v50;
        swift_bridgeObjectRelease_n(v50, 3);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "build version = %s", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);

      }
      else
      {

        v57 = v48;
        v58 = v50;
        swift_bridgeObjectRelease_n(v50, 2);
      }
      v66 = (void (*)(char *, uint64_t))*((_QWORD *)v111 + 1);
      v66(v22, v117);
      v67 = v108;
      v68 = v115;
      Regex.init(_regexString:version:)(0x7A2D615B2B645C2FLL, 0xEC0000002F243F5DLL, 1, &type metadata for Substring);
      v119 = v57;
      v120 = v58;
      v118[0] = 0;
      v118[1] = 0xE000000000000000;
      v69 = sub_100033EA8();
      v70 = sub_10002E870();
      v71 = sub_100033EEC();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)(v121, v68, v118, 0x7FFFFFFFFFFFFFFFLL, &type metadata for String, &type metadata for String, v116, v69, v70, v71);
      v72 = swift_bridgeObjectRelease(v58);
      v74 = v121[0];
      v73 = v121[1];
      defaultLogger()(v72);
      v75 = swift_bridgeObjectRetain_n(v73, 2);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = swift_slowAlloc(12, -1);
        v111 = v66;
        v79 = (uint8_t *)v78;
        v80 = swift_slowAlloc(32, -1);
        v121[0] = v80;
        *(_DWORD *)v79 = 136315138;
        v108 = (char *)(v79 + 4);
        swift_bridgeObjectRetain(v73);
        v119 = sub_10003FA80(v74, v73, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v108);
        swift_bridgeObjectRelease_n(v73, 3);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "prefix = %s", v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);

        v111(v67, v117);
      }
      else
      {

        swift_bridgeObjectRelease_n(v73, 2);
        v66(v67, v117);
      }
      v63 = v107;
      v65 = v112;
      a3 = v97;
      v81 = v99;
      sub_1000323B0(v98, v74, v73, v99);
      swift_bridgeObjectRelease(v73);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v115, v116);
      v82 = v102;
      v83 = v106;
      v84 = v103;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v106, v103);
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v83, v81, v84);
      v64 = v100;
    }
    else
    {
      v59 = defaultLogger()(v47);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "build prefix not available, using default", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      (*((void (**)(char *, uint64_t))v111 + 1))(v18, v117);
      v63 = v107;
      v64 = v100;
      v65 = v112;
    }
    v85 = v114;
    v86 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v114, v113, v101);
    v87 = (*(uint64_t (**)(char *, uint64_t))(v65 + 88))(v85, v86);
    if (v87 == enum case for CoreIDVAssetBundle.CertificateType.terminalAuthRoots(_:))
    {
      v88 = (uint64_t)v110;
      v89 = v106;
      CoreIDVAssetBundle.terminalAuthRoots.getter();
    }
    else if (v87 == enum case for CoreIDVAssetBundle.CertificateType.issuerRoots(_:))
    {
      v88 = (uint64_t)v110;
      v89 = v106;
      CoreIDVAssetBundle.issuerRoots.getter();
    }
    else
    {
      if (v87 != enum case for CoreIDVAssetBundle.CertificateType.appleIssuerRoots(_:))
      {
        v35 = enum case for DIPError.Code.internalError(_:);
        v36 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
        v90 = v105;
        v36(v105, enum case for DIPError.Code.internalError(_:), v104);
        v91 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v92 = type metadata accessor for DIPError(0);
        v93 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v37 = swift_allocError(v92, v93, 0, 0);
        v94 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x800000010012FB50, 0, v90, 0, v91, 0xD000000000000059, 0x800000010012FA30, 0xD00000000000003BLL, 0x800000010012FB10, 252);
        swift_willThrow(v94);
        swift_release(v98);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v106, v103);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v114, v101);
        goto LABEL_5;
      }
      v88 = (uint64_t)v110;
      v89 = v106;
      CoreIDVAssetBundle.appleIssuerRoots.getter();
    }
    a2 = sub_100033024(v64, v88);
    swift_release(v98);
    sub_10000B164(a3, v63);
    sub_1000150E8(v88, &qword_1001754C0);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v89, v103);
    return (id)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000322EC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000323B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  _QWORD *v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t (*v113)(uint64_t, char *, uint64_t);
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  BOOL v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167[11];

  v164 = a1;
  v7 = sub_100008E84(&qword_1001754E8);
  v8 = __chkstk_darwin(v7);
  v156 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v150 - v11;
  __chkstk_darwin(v10);
  v160 = (char *)&v150 - v13;
  v14 = type metadata accessor for CoreIDVAssetBundle(0);
  v165 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v153 = (char *)&v150 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v161 = (char *)&v150 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v150 - v19;
  v21 = type metadata accessor for Logger(0);
  v163 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v158 = (char *)&v150 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v159 = (char *)&v150 - v25;
  v26 = __chkstk_darwin(v24);
  v152 = (char *)&v150 - v27;
  v28 = __chkstk_darwin(v26);
  v154 = (char *)&v150 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v150 - v31;
  defaultLogger()(v30);
  v33 = swift_bridgeObjectRetain_n(a3, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter();
  v36 = os_log_type_enabled(v34, v35);
  v162 = a4;
  v151 = v12;
  v155 = v20;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v157 = v14;
    v39 = v38;
    v167[0] = v38;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain(a3);
    v166 = sub_10003FA80(a2, a3, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v37 + 4);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "MobileAsset trying to find asset for %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v40 = v39;
    a4 = v162;
    v14 = v157;
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v163 = *(_QWORD *)(v163 + 8);
  v41 = ((uint64_t (*)(char *, uint64_t))v163)(v32, v21);
  v42 = CoreIDVAsset.iOS.getter(v41);
  v43 = v165;
  if (!v42)
  {
    v49 = swift_arrayDestroy(&unk_100167048, 8, &type metadata for String);
    v50 = v158;
    v51 = defaultLogger()(v49);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "MobileAsset, No deviceType mapped, returning default", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    v55 = ((uint64_t (*)(char *, uint64_t))v163)(v50, v21);
    return CoreIDVAsset.base.getter(v55);
  }
  v44 = v42;
  if (*(_QWORD *)(v42 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v45 = sub_1000FBC04(a2, a3);
    if ((v46 & 1) != 0)
    {
      v47 = (uint64_t)v160;
      (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v160, *(_QWORD *)(v44 + 56) + *(_QWORD *)(v43 + 72) * v45, v14);
      v48 = 0;
    }
    else
    {
      v48 = 1;
      v47 = (uint64_t)v160;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v47, v48, 1, v14);
    swift_bridgeObjectRelease(a3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v47, 1, v14) != 1)
    {
      swift_bridgeObjectRelease(v44);
      v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 32);
      v100 = v155;
      v101 = v99(v155, v47, v14);
      v102 = v154;
      v103 = defaultLogger()(v101);
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v106 = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "MobileAsset, found an exact match", v106, 2u);
        swift_slowDealloc(v106, -1, -1);
      }

      ((void (*)(char *, uint64_t))v163)(v102, v21);
      return v99(a4, (uint64_t)v100, v14);
    }
  }
  else
  {
    v47 = (uint64_t)v160;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v160, 1, 1, v14);
  }
  v57 = sub_1000150E8(v47, &qword_1001754E8);
  v58 = *(_QWORD *)(v44 + 16);
  v150 = v21;
  if (v58 && (v57 = sub_1000FBC04(0x746C7561666564, 0xE700000000000000), (v59 & 1) != 0))
  {
    v60 = v153;
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v153, *(_QWORD *)(v44 + 56) + *(_QWORD *)(v43 + 72) * v57, v14);
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v161, v60, v14);
  }
  else
  {
    CoreIDVAsset.base.getter(v57);
  }
  swift_bridgeObjectRetain(a3);
  v61 = a2;
  v62 = sub_100034768(1, a2, a3);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  swift_bridgeObjectRelease(a3);
  v69 = static String._fromSubstring(_:)(v62, v64, v66, v68);
  v71 = v70;
  swift_bridgeObjectRelease(v68);
  v72 = HIBYTE(v71) & 0xF;
  if ((v71 & 0x2000000000000000) == 0)
    v72 = v69 & 0xFFFFFFFFFFFFLL;
  if (!v72)
    goto LABEL_36;
  swift_bridgeObjectRetain(v71);
  v73 = sub_1000333D4(v69, v71);
  if ((v74 & 1) != 0)
    goto LABEL_36;
  v75 = (char *)v73;
  if (v73 < 2)
    goto LABEL_36;
  swift_bridgeObjectRetain(a3);
  v76 = sub_100033620(v61, a3);
  v78 = v77;
  swift_bridgeObjectRelease(a3);
  if (!v78)
    goto LABEL_36;
  if ((Character.isUppercase.getter(v76, v78) & 1) == 0 || (sub_1000D9C34(v76, v78, &off_100167028) & 1) == 0)
  {
    swift_bridgeObjectRelease(v78);
LABEL_36:
    swift_bridgeObjectRelease(v71);
    v107 = swift_bridgeObjectRelease(v44);
    v108 = v159;
    v109 = defaultLogger()(v107);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v110, v111))
    {
      v112 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v112 = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "MobileAsset, system gave inconsistent buildVersion, using default", v112, 2u);
      swift_slowDealloc(v112, -1, -1);
    }

    ((void (*)(char *, uint64_t))v163)(v108, v150);
    v113 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32);
    v115 = v161;
    v114 = v162;
    return v113((uint64_t)v114, v115, v14);
  }
  v164 = v76;
  v79 = v69;
  swift_bridgeObjectRetain(v44);
  v81 = sub_100033698(v80);
  v82 = (char *)v81;
  v83 = *(_QWORD *)(v81 + 16);
  v157 = v14;
  if (v83)
  {
    v159 = (char *)v78;
    v160 = v75;
    v167[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000557E4(0, v83, 0);
    v84 = (_QWORD *)v167[0];
    v158 = v82;
    v85 = (unint64_t *)(v82 + 40);
    do
    {
      v86 = *(v85 - 1);
      v87 = *v85;
      swift_bridgeObjectRetain(*v85);
      v88 = sub_100034768(1, v86, v87);
      v90 = v89;
      v93 = static String._fromSubstring(_:)(v88, v91, v92, v89);
      v95 = v94;
      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v90);
      v167[0] = (uint64_t)v84;
      v97 = v84[2];
      v96 = v84[3];
      if (v97 >= v96 >> 1)
      {
        sub_1000557E4(v96 > 1, v97 + 1, 1);
        v84 = (_QWORD *)v167[0];
      }
      v85 += 2;
      v84[2] = v97 + 1;
      v98 = &v84[2 * v97];
      v98[4] = v93;
      v98[5] = v95;
      --v83;
    }
    while (v83);
    swift_bridgeObjectRelease(v158);
    v14 = v157;
    v43 = v165;
    v78 = (uint64_t)v159;
    v75 = v160;
  }
  else
  {
    swift_bridgeObjectRelease(v81);
    v84 = _swiftEmptyArrayStorage;
  }
  v116 = sub_10007A230((uint64_t)v84);
  swift_bridgeObjectRelease(v84);
  if ((sub_1000097C4(v79, v71, v116) & 1) != 0)
  {
    v117 = sub_1000338BC(v164, v78, &off_100167028);
    v119 = v118;
    swift_bridgeObjectRelease(v78);
    if ((v119 & 1) == 0)
    {
      v120 = v151;
      sub_1000339A0(v117, v79, v71, &off_100167028, v44, v151);
      swift_bridgeObjectRelease(v71);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v120, 1, v14) == 1)
      {
        sub_1000150E8((uint64_t)v120, &qword_1001754E8);
        goto LABEL_47;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v161, v14);
      swift_bridgeObjectRelease(v116);
      swift_bridgeObjectRelease(v44);
      swift_arrayDestroy(&unk_100167048, 8, &type metadata for String);
      v113 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32);
      v114 = v162;
      v115 = v120;
      return v113((uint64_t)v114, v115, v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v78);
  }
  swift_bridgeObjectRelease(v71);
LABEL_47:
  v121 = 0;
  v122 = (uint64_t)(v75 - 1);
  v123 = v116 + 56;
  v124 = (uint64_t)(v75 - 2);
  if ((uint64_t)(v75 - 1) >= 1)
  {
    while (1)
    {
LABEL_52:
      v167[0] = v122;
      v126 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v128 = v127;
      if (!*(_QWORD *)(v116 + 16))
        goto LABEL_50;
      v129 = v126;
      Hasher.init(_seed:)(v167, *(_QWORD *)(v116 + 40));
      String.hash(into:)(v167, v129, v128);
      v130 = Hasher._finalize()();
      v131 = -1 << *(_BYTE *)(v116 + 32);
      v132 = v130 & ~v131;
      if (((*(_QWORD *)(v123 + ((v132 >> 3) & 0xFFFFFFFFFFFFF8)) >> v132) & 1) == 0)
        goto LABEL_50;
      v133 = *(_QWORD *)(v116 + 48);
      v134 = (_QWORD *)(v133 + 16 * v132);
      v135 = v134[1];
      v136 = *v134 == v129 && v135 == v128;
      if (!v136 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v134, v135, v129, v128, 0) & 1) == 0)
        break;
LABEL_59:
      v137 = v156;
      sub_1000339A0(7, v129, v128, &off_100167028, v44, v156);
      swift_bridgeObjectRelease(v128);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v137, 1, v157) != 1)
      {
        v148 = v165;
        v149 = v157;
        (*(void (**)(char *, uint64_t))(v165 + 8))(v161, v157);
        swift_bridgeObjectRelease(v116);
        swift_bridgeObjectRelease(v44);
        swift_arrayDestroy(&unk_100167048, 8, &type metadata for String);
        return (*(uint64_t (**)(char *, char *, uint64_t))(v148 + 32))(v162, v137, v149);
      }
      sub_1000150E8((uint64_t)v137, &qword_1001754E8);
LABEL_51:
      v122 = v124;
      v125 = __OFSUB__(v124--, 1);
      if (v124 < 0 != v125)
        goto LABEL_48;
    }
    v138 = ~v131;
    while (1)
    {
      v132 = (v132 + 1) & v138;
      if (((*(_QWORD *)(v123 + ((v132 >> 3) & 0xFFFFFFFFFFFFF8)) >> v132) & 1) == 0)
        break;
      v139 = (_QWORD *)(v133 + 16 * v132);
      v140 = v139[1];
      v141 = *v139 == v129 && v140 == v128;
      if (v141 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v139, v140, v129, v128, 0) & 1) != 0)
        goto LABEL_59;
    }
LABEL_50:
    swift_bridgeObjectRelease(v128);
    goto LABEL_51;
  }
LABEL_48:
  if ((v121 & 1) == 0)
  {
    v124 = 0;
    v121 = 1;
    goto LABEL_52;
  }
  swift_bridgeObjectRelease(v116);
  v142 = swift_bridgeObjectRelease(v44);
  v143 = v152;
  v144 = defaultLogger()(v142);
  v145 = Logger.logObject.getter(v144);
  v146 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v145, v146))
  {
    v147 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v147 = 0;
    _os_log_impl((void *)&_mh_execute_header, v145, v146, "MobileAsset, exhausted trying to find a compatible version, returning default", v147, 2u);
    swift_slowDealloc(v147, -1, -1);
  }

  ((void (*)(char *, uint64_t))v163)(v143, v150);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v165 + 32))(v162, v161, v157);
}

uint64_t sub_100033024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  int v44;
  uint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001754C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CoreIDVAssetCertificates(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v40 - v16;
  sub_100034824(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000150E8((uint64_t)v10, &qword_1001754C0);
    swift_bridgeObjectRetain(a1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v19._object = (void *)0x800000010012FA10;
    v19._countAndFlagsBits = 0xD00000000000001BLL;
    v20 = NSUserDefaults.internalBool(forKey:)(v19);

    if (v20)
    {
      defaultLogger()(v21);
      v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.debug.getter();
      v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        v46 = v23;
        v26 = swift_slowAlloc(12, -1);
        v44 = v25;
        v27 = (uint8_t *)v26;
        v45 = swift_slowAlloc(32, -1);
        v50 = v45;
        v47 = v4;
        *(_DWORD *)v27 = 136315138;
        v42 = v27 + 4;
        v43 = v27;
        v28 = ((uint64_t (*)(void))CoreIDVAssetCertificates.certificates.getter)();
        v41 = Dictionary.Keys.description.getter(v28, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v30 = v29;
        swift_bridgeObjectRelease(v28);
        v48 = sub_10003FA80(v41, v30, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v42);
        swift_bridgeObjectRelease(v30);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        v31 = v46;
        v32 = v43;
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, "MobileAsset has certificates of keys: %s", v43, 0xCu);
        v33 = v45;
        swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        v21 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v47);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);

        v21 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
    }
    v34 = CoreIDVAssetCertificates.certificates.getter(v21);
    sub_10002FD94(v34);
    v36 = v35;
    v37 = swift_bridgeObjectRelease(v34);
    v50 = v36;
    if ((CoreIDVAssetCertificates.overrideDefault.getter(v37) & 1) == 0)
    {
      swift_bridgeObjectRetain(a1);
      sub_1000AF768(v38);
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return v50;
  }
  return a1;
}

uint64_t sub_1000333D4(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_100034030(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_100033F4C(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_100033620(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t sub_100033698(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v2 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != 0x746C7561666564 || v15 != 0xE700000000000000)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0x746C7561666564, 0xE700000000000000, 0);
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain(v15);
        result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((result & 1) == 0)
          result = sub_1000557E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v18 = _swiftEmptyArrayStorage[2];
        v17 = _swiftEmptyArrayStorage[3];
        v19 = v18 + 1;
        if (v18 >= v17 >> 1)
        {
          v21 = _swiftEmptyArrayStorage[2];
          v22 = v18 + 1;
          result = sub_1000557E4(v17 > 1, v18 + 1, 1);
          v18 = v21;
          v19 = v22;
        }
        _swiftEmptyArrayStorage[2] = v19;
        v20 = &_swiftEmptyArrayStorage[2 * v18];
        v20[4] = v14;
        v20[5] = v15;
      }
    }
  }
  v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v10 >= v7)
    goto LABEL_32;
  v11 = *(_QWORD *)(v3 + 8 * v10);
  ++v2;
  if (v11)
    goto LABEL_21;
  v2 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_32;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_21;
  v2 = v10 + 2;
  if (v10 + 2 >= v7)
    goto LABEL_32;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_21;
  v2 = v10 + 3;
  if (v10 + 3 >= v7)
    goto LABEL_32;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_21:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_22;
  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_32:
    swift_release(v1);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_32;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000338BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t sub_1000339A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52[2];

  v49 = a2;
  v45 = a6;
  v10 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10);
  v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008E84(&qword_1001754E8);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CoreIDVAssetBundle(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = __chkstk_darwin(v15);
  v46 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = 0;
  v50 = (uint64_t (*)(char *, char *, uint64_t))a4;
  v48 = a4 + 4;
  while (1)
  {
    if (a1 <= 0)
    {
      if ((a1 != 0) | v47 & 1)
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v45, 1, 1, v15);
      v19 = 0;
      v47 = 1;
    }
    else
    {
      v19 = a1 - 1;
    }
    if ((unint64_t)a1 >= *((_QWORD *)v50 + 2))
    {
      __break(1u);
      return result;
    }
    v20 = &v48[2 * a1];
    v21 = *v20;
    v22 = (void *)v20[1];
    v52[0] = v49;
    v52[1] = a3;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(a3);
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24 = String.init<A>(_:)(v52, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v26 = v25;
    if (!*(_QWORD *)(a5 + 16))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
      goto LABEL_3;
    }
    v27 = v24;
    swift_bridgeObjectRetain(v25);
    v28 = sub_1000FBC04(v27, v26);
    if ((v29 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v14, *(_QWORD *)(a5 + 56) + *(_QWORD *)(v16 + 72) * v28, v15);
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v30(v14, 0, 1, v15);
    }
    else
    {
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v30(v14, 1, 1, v15);
    }
    swift_bridgeObjectRelease(v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
      break;
LABEL_3:
    swift_bridgeObjectRelease(v26);
    result = sub_1000150E8((uint64_t)v14, &qword_1001754E8);
    a1 = v19;
  }
  v31 = *(uint64_t (**)(char *, char *, uint64_t))(v16 + 32);
  v32 = v31(v46, v14, v15);
  v33 = v44;
  defaultLogger()(v32);
  swift_bridgeObjectRetain(v26);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v50 = v31;
    v39 = v38;
    v52[0] = v38;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain(v26);
    v51 = sub_10003FA80(v27, v26, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v37 + 4);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "MobileAsset, choosing asset from %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v40 = v39;
    v31 = v50;
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
  }
  else
  {

    swift_bridgeObjectRelease_n(v26, 2);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v43);
  }
  v41 = v45;
  v31(v45, v46, v15);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v30)(v41, 0, 1, v15);
}

_QWORD *sub_100033DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100008E84(&qword_1001754F0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100033E30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unint64_t sub_100033EA8()
{
  unint64_t result;

  result = qword_1001754D8;
  if (!qword_1001754D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001754D8);
  }
  return result;
}

unint64_t sub_100033EEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001754E0;
  if (!qword_1001754E0)
  {
    v1 = sub_100016404(&qword_1001754C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Regex<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001754E0);
  }
  return result;
}

unsigned __int8 *sub_100033F38(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_100034030(a1, a2, a3);
}

unsigned __int8 *sub_100033F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1000342AC(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_100034030(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_100034030(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000342AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_100034328(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100034328(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10003446C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100033DCC(v12, 0);
      v5 = sub_100034558((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10003446C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100033E30(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100033E30(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100034558(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100033E30(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100033E30(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100034768(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = result;
  result = String.count.getter(a2, a3);
  if (__OFSUB__(result, v5))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v6 = (result - v5) & ~((result - v5) >> 63);
  v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v7 = a2;
  v8 = v7 << 16;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = String.index(_:offsetBy:limitedBy:)(15, v6, v9 | (unint64_t)(v7 << 16), a2, a3);
  v12 = v8 | 0xB;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) == 0)
    v12 = v8 | 7;
  if ((v11 & 1) != 0)
    v13 = v12;
  else
    v13 = v10;
  return String.subscript.getter(15, v13, a2, a3);
}

uint64_t sub_100034824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001754C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003486C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)AsyncCoreDataStore.container.getter(v5);
  if (v1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v1);
    v9 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_10000745C();
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v9, 0xD000000000000056, 0x800000010012FC40, 0x656E6961746E6F63, 0xE900000000000072, 48);
    swift_willThrow(v12);
    return swift_errorRelease(v1);
  }
  else
  {
    v14 = v8;
    v15 = objc_msgSend(v8, "newBackgroundContext");

    v16 = type metadata accessor for IDCSAsyncDataContext();
    result = swift_allocObject(v16, 24, 7);
    *(_QWORD *)(result + 16) = v15;
    *a1 = result;
  }
  return result;
}

uint64_t sub_100034A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for IDCSAsyncDataContainer()
{
  return objc_opt_self(_TtC7idcredd22IDCSAsyncDataContainer);
}

uint64_t sub_100034A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100034AB0, 0, 0);
}

uint64_t sub_100034AB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_100168A78, 40, 7);
  v0[9] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = swift_allocObject(&unk_100168AA0, 32, 7);
  v0[10] = v5;
  *(_QWORD *)(v5 + 16) = sub_100039BE4;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[11] = v7;
  v8 = sub_100008E84(&qword_1001755E8);
  *v7 = v0;
  v7[1] = sub_100034BB0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039668, v5, v8);
}

uint64_t sub_100034BB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100034C50, 0, 0);
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v3 + 80));
  swift_release(v5);
  v7 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_100034C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD00000000000005BLL, 0x800000010012FCA0, 0xD000000000000010, 0x800000010012FE30, 38);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034D78@<X0>(uint64_t a1@<X2>, void *a2@<X3>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)sub_1000093E8(a1, a2);
  if (v3)
    return result;
  v12 = (void *)result;
  v31 = v8;
  v36 = (unint64_t)_swiftEmptyArrayStorage;
  v13 = (uint64_t)sub_1000C4E40();
  v15 = v13;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 >= 0)
      v13 &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(v13);
    v16 = v10;
    if (result)
      goto LABEL_4;
LABEL_17:

    result = swift_bridgeObjectRelease(v15);
    *a3 = (unint64_t)_swiftEmptyArrayStorage;
    return result;
  }
  result = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  v16 = v10;
  if (!result)
    goto LABEL_17;
LABEL_4:
  if (result < 1)
  {
    __break(1u);
  }
  else
  {
    v24 = v12;
    v25 = a3;
    v17 = 0;
    v33 = v15 & 0xC000000000000001;
    v29 = &v35;
    *(_QWORD *)&v14 = 136315138;
    v28 = v14;
    v26 = v16;
    v27 = (char *)&type metadata for Any + 8;
    v32 = v15;
    v30 = v7;
    v34 = result;
    do
    {
      if (v33)
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
      else
        v18 = *(id *)(v15 + 8 * v17 + 32);
      v19 = v18;
      v20 = sub_1000C525C();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v22 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v21 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v21 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23);

      v15 = v32;
      ++v17;
    }
    while (v34 != v17);

    result = swift_bridgeObjectRelease(v15);
    *v25 = v36;
  }
  return result;
}

uint64_t sub_10003513C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[14] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[16] = v3;
  v1[17] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[19] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[20] = swift_task_alloc(v6);
  v1[21] = swift_task_alloc(v6);
  v1[22] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000351E0, 0, 0);
}

uint64_t sub_1000351E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if ((byte_100178C90 & 1) != 0)
  {
    sub_100008854(0);
    *(_QWORD *)(v1 + 184) = v2;
    v13 = v2;
    v14 = swift_allocObject(&unk_100168A28, 24, 7);
    *(_QWORD *)(v1 + 192) = v14;
    *(_QWORD *)(v14 + 16) = v13;
    v15 = swift_allocObject(&unk_100168A50, 32, 7);
    *(_QWORD *)(v1 + 200) = v15;
    *(_QWORD *)(v15 + 16) = sub_100039B44;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v1 + 208) = v17;
    v18 = sub_100008E84(&qword_1001755D8);
    *v17 = v1;
    v17[1] = sub_1000355BC;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 64, sub_100039B5C, v15, v18);
  }
  else
  {
    v3 = defaultLogger()(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "getLegacySESlots requires an internal build", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v1 + 176);
    v8 = *(_QWORD *)(v1 + 144);
    v9 = *(_QWORD *)(v1 + 152);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v10 = *(_QWORD *)(v1 + 168);
    v11 = *(_QWORD *)(v1 + 160);
    v12 = *(_QWORD *)(v1 + 136);
    swift_task_dealloc(*(_QWORD *)(v1 + 176));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(_QWORD *))(v1 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000355BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100035638;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 192);
    swift_release(*(_QWORD *)(v2 + 200));
    swift_release(v5);
    *(_OWORD *)(v2 + 224) = *(_OWORD *)(v2 + 64);
    v4 = sub_100035794;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100035638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_release(v1);
  swift_bridgeObjectRelease(v2);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v3 + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 120));
  swift_errorRetain(v4);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_10000745C();
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v8, 0, v9, 0xD00000000000005BLL, 0x800000010012FCA0, 0xD000000000000012, 0x800000010012FDD0, 89);
  swift_willThrow(v12);
  swift_errorRelease(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100035794(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t i;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;

  *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 224);
  v2 = (_QWORD *)(v1 + 80);
  v68 = v1 + 16;
  v3 = v1 + 88;
  v4 = *(_QWORD *)(v1 + 184);
  defaultLogger()(a1);
  v5 = swift_bridgeObjectRetain_n(v4, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  v69 = v1;
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v1 + 184);
    v62 = *(_QWORD *)(v1 + 152);
    v64 = *(_QWORD *)(v1 + 144);
    v66 = *(_QWORD *)(v1 + 168);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v70 = (_BYTE *)v10;
    *(_DWORD *)v9 = 136315138;
    v11 = swift_bridgeObjectRetain(v8);
    v12 = Set.description.getter(v11);
    v14 = v13;
    swift_bridgeObjectRelease(v8);
    v15 = v12;
    v3 = v1 + 88;
    *(_QWORD *)(v1 + 104) = sub_10003FA80(v15, v14, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v9 + 4);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Occupied slots: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v62 + 8);
    v17 = v16(v66, v64);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 168);
    v19 = *(_QWORD *)(v1 + 144);
    v20 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 184), 2);

    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v17 = v16(v18, v19);
  }
  v21 = defaultLogger()(v17);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v1 + 160);
  v26 = *(_QWORD *)(v1 + 144);
  if (v24)
  {
    v65 = (void (*)(uint64_t, uint64_t))v16;
    v67 = *(_QWORD *)(v1 + 144);
    v63 = *(_QWORD *)(v1 + 160);
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v70 = (_BYTE *)v28;
    *(_DWORD *)v27 = 136315138;
    swift_beginAccess(v3, v1 + 40, 0, 0);
    v29 = *(_QWORD *)(v1 + 88);
    v30 = swift_bridgeObjectRetain(v29);
    v31 = v3;
    v32 = Set.description.getter(v30);
    v34 = v33;
    swift_bridgeObjectRelease(v29);
    v35 = v32;
    v3 = v31;
    *(_QWORD *)(v69 + 96) = sub_10003FA80(v35, v34, (uint64_t *)&v70);
    v1 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 2, v69 + 104, v27 + 4);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Credential slots: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v65(v63, v67);
  }
  else
  {

    v16(v25, v26);
  }
  v36 = *(_QWORD *)(v1 + 184);
  swift_beginAccess(v3, v68, 0, 0);
  v37 = *(_QWORD *)(v1 + 88);
  v38 = *(_QWORD *)(v36 + 16);
  v39 = *(_QWORD *)(v1 + 184);
  if (*(_QWORD *)(v37 + 16) <= v38 >> 3)
  {
    v70 = *(_BYTE **)(v1 + 184);
    swift_bridgeObjectRetain(v37);
    sub_1000387A4(v42);
    swift_bridgeObjectRelease(v37);
    v41 = v70;
  }
  else
  {
    swift_bridgeObjectRetain(v37);
    v41 = sub_100038904(v40, v39);
    swift_bridgeObjectRelease(v37);
  }
  v43 = 0;
  v44 = v41 + 56;
  v45 = -1;
  v46 = -1 << v41[32];
  if (-v46 < 64)
    v45 = ~(-1 << -(char)v46);
  v47 = v45 & *((_QWORD *)v41 + 7);
  v48 = (unint64_t)(63 - v46) >> 6;
  if (!v47)
    goto LABEL_14;
LABEL_13:
  v49 = __clz(__rbit64(v47));
  v47 &= v47 - 1;
  for (i = v49 | (v43 << 6); ; i = __clz(__rbit64(v52)) + (v43 << 6))
  {
    v54 = objc_msgSend(objc_allocWithZone((Class)DCLegacySESlotInfo), "initWithSESlot:isMissing:", *(_QWORD *)(*((_QWORD *)v41 + 6) + 8 * i), 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
    v56 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v55 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v56 >= v55 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
    v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
    specialized Array._endMutation()(v57);

    if (v47)
      goto LABEL_13;
LABEL_14:
    v51 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v51 >= v48)
      goto LABEL_32;
    v52 = *(_QWORD *)&v44[8 * v51];
    ++v43;
    if (!v52)
    {
      v43 = v51 + 1;
      if (v51 + 1 >= v48)
        goto LABEL_32;
      v52 = *(_QWORD *)&v44[8 * v43];
      if (!v52)
      {
        v43 = v51 + 2;
        if (v51 + 2 >= v48)
          goto LABEL_32;
        v52 = *(_QWORD *)&v44[8 * v43];
        if (!v52)
          break;
      }
    }
LABEL_27:
    v47 = (v52 - 1) & v52;
  }
  v53 = v51 + 3;
  if (v53 >= v48)
  {
LABEL_32:
    swift_release(v41);
    v58 = *(_QWORD *)(v69 + 80);
    swift_bridgeObjectRelease(v37);
    v59 = *(_QWORD *)(v69 + 168);
    v60 = *(_QWORD *)(v69 + 160);
    v61 = *(_QWORD *)(v69 + 136);
    swift_task_dealloc(*(_QWORD *)(v69 + 176));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    (*(void (**)(uint64_t))(v69 + 8))(v58);
    return;
  }
  v52 = *(_QWORD *)&v44[8 * v53];
  if (v52)
  {
    v43 = v53;
    goto LABEL_27;
  }
  while (1)
  {
    v43 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v43 >= v48)
      goto LABEL_32;
    v52 = *(_QWORD *)&v44[8 * v43];
    ++v53;
    if (v52)
      goto LABEL_27;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100035D60@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v17;
  void *v18;
  _QWORD *v19;
  id v20;
  void *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  _BOOL4 v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  NSString v53;
  NSString v54;
  id v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;

  v5 = type metadata accessor for CredentialKeyUsage(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = (unint64_t)_swiftEmptyArrayStorage;
  v87 = &_swiftEmptySetSingleton;
  v9 = sub_10011AA9C();
  v76 = v2;
  if (v2)
  {
    v10 = _swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease(v10);
  }
  v78 = a1;
  v12 = v9;
  v71 = v9;
  if (v9 >> 62)
    goto LABEL_55;
  v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
  {
LABEL_59:
    result = swift_bridgeObjectRelease(v71);
    v61 = _swiftEmptyArrayStorage;
    v62 = &_swiftEmptySetSingleton;
    goto LABEL_60;
  }
LABEL_6:
  v12 = 0;
  v75 = v71 & 0xC000000000000001;
  v66 = v71 & 0xFFFFFFFFFFFFFF8;
  v65 = v71 + 32;
  v69 = enum case for CredentialKeyUsage.presentment(_:);
  v68 = xmmword_10012A5D0;
  v67 = 0x800000010012FDF0;
  v73 = v5;
  v74 = a2;
  v70 = v6;
  v79 = v8;
  v72 = v13;
  do
  {
    if (v75)
    {
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v71);
    }
    else
    {
      if ((unint64_t)v12 >= *(_QWORD *)(v66 + 16))
        goto LABEL_54;
      v14 = *(id *)(v65 + 8 * v12);
    }
    v15 = v14;
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      if (v12 < 0)
        v63 = v12;
      else
        v63 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v12);
      if (!v13)
        goto LABEL_59;
      goto LABEL_6;
    }
    v77 = v12;
    v17 = objc_msgSend(v14, "credentialIdentifier");
    v83 = v15;
    if (!v17)
      goto LABEL_18;
    v18 = v17;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    a2 = v19;

    v20 = objc_msgSend(v15, "managedObjectContext");
    if (!v20)
    {
      swift_bridgeObjectRelease(a2);
LABEL_18:
      v33 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_19;
    }
    v21 = v20;
    v85 = (id)type metadata accessor for StoredCryptoKey(0);
    v22 = v8;
    v23 = (void *)static StoredCryptoKey.fetchRequest()();
    v84 = sub_100039BA4();
    v24 = sub_100008E84(&qword_100174878);
    v25 = v5;
    v5 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v5 + 16) = v68;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    v26 = sub_10000EA3C();
    *(_QWORD *)(v5 + 64) = v26;
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = a2;
    v6 = v70;
    v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v70 + 104))(v22, v69, v25);
    v28 = CredentialKeyUsage.rawValue.getter(v27);
    a2 = v29;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v25);
    *(_QWORD *)(v5 + 96) = &type metadata for String;
    *(_QWORD *)(v5 + 104) = v26;
    *(_QWORD *)(v5 + 72) = v28;
    *(_QWORD *)(v5 + 80) = a2;
    v30 = (void *)NSPredicate.init(format:_:)(0xD000000000000035, v67, v5);
    objc_msgSend(v23, "setPredicate:", v30);

    v31 = v76;
    v32 = NSManagedObjectContext.fetch<A>(_:)(v23, v85);
    v76 = v31;
    if (v31)
    {
      swift_bridgeObjectRelease(v71);

      swift_bridgeObjectRelease(v87);
      v10 = (_QWORD *)v88;
      return swift_bridgeObjectRelease(v10);
    }
    v33 = v32;

    v8 = v79;
    v15 = v83;
LABEL_19:
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0)
        v60 = v33;
      else
        v60 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v12 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease(v33);
      if (!v12)
        goto LABEL_7;
LABEL_21:
      if (v12 >= 1)
      {
        v34 = 0;
        v80 = v33 & 0xC000000000000001;
        v81 = v12;
        v82 = v33;
        while (1)
        {
          v35 = v78;
          if (v80)
            v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v33);
          else
            v36 = *(id *)(v33 + 8 * v34 + 32);
          v37 = v36;
          v38 = objc_msgSend(v36, "keySlot");
          sub_100005D28(&v86, (uint64_t)v38);
          v39 = sub_1000098F8((uint64_t)v38, v35);
          v40 = objc_msgSend(v15, "partition");
          if (v40)
          {
            v41 = v40;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
            v43 = v42;

          }
          else
          {
            v43 = 0;
          }
          LODWORD(v84) = v39;
          v44 = objc_msgSend(v15, "credentialIdentifier");
          if (v44)
          {
            v45 = v44;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
            v47 = v46;

          }
          else
          {
            v47 = 0;
          }
          v85 = v37;
          v48 = objc_msgSend(v37, "identifier");
          if (v48)
          {
            v49 = v48;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v51 = v50;

            v8 = v79;
            if (v43)
              goto LABEL_34;
          }
          else
          {
            v51 = 0;
            v8 = v79;
            if (v43)
            {
LABEL_34:
              v52 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v43);
              if (v47)
                goto LABEL_35;
              goto LABEL_39;
            }
          }
          v52 = 0;
          if (v47)
          {
LABEL_35:
            v53 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v47);
            v6 = v84;
            if (!v51)
              goto LABEL_40;
            goto LABEL_36;
          }
LABEL_39:
          v53 = 0;
          v6 = v84;
          if (!v51)
          {
LABEL_40:
            v54 = 0;
            goto LABEL_41;
          }
LABEL_36:
          v54 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v51);
LABEL_41:
          v55 = objc_msgSend(objc_allocWithZone((Class)DCLegacySESlotInfo), "initWithSESlot:isMissing:partition:credentialIdentifier:presentmentKeyIdentifier:", v38, (v6 ^ 1) & 1, v52, v53, v54);

          v56 = v55;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
          v58 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v57 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v58 >= v57 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
          ++v34;
          v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
          specialized Array._endMutation()(v59);

          v33 = v82;
          v15 = v83;
          if (v81 == v34)
            goto LABEL_7;
        }
      }
      goto LABEL_53;
    }
    v12 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_21;
LABEL_7:

    swift_bridgeObjectRelease(v33);
    v5 = v73;
    v12 = v77;
    a2 = v74;
  }
  while (v77 != v72);
  result = swift_bridgeObjectRelease(v71);
  v61 = (_QWORD *)v88;
  v62 = v87;
LABEL_60:
  *a2 = v61;
  a2[1] = v62;
  return result;
}

uint64_t sub_1000363D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_10003646C, 0, 0);
}

uint64_t sub_10003646C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v31 = *(_QWORD *)(v1 + 80);
    v32 = *(_QWORD *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v34 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStorage clearPresentmentKeyUsage for credential %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v11 = v10(v33, v32);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 96);
    v13 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    v11 = v10(v12, v13);
  }
  if ((byte_100178C90 & 1) != 0)
  {
    v15 = *(_QWORD *)(v1 + 32);
    v16 = *(_QWORD *)(v1 + 40);
    v17 = *(_QWORD *)(v1 + 24);
    v18 = (_QWORD *)swift_allocObject(&unk_1001689D8, 40, 7);
    *(_QWORD *)(v1 + 104) = v18;
    v18[2] = v16;
    v18[3] = v17;
    v18[4] = v15;
    v19 = swift_allocObject(&unk_100168A00, 32, 7);
    *(_QWORD *)(v1 + 112) = v19;
    *(_QWORD *)(v19 + 16) = sub_100039A74;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
    swift_bridgeObjectRetain(v15);
    swift_retain(v16);
    swift_retain(v18);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 120) = v21;
    *v21 = v1;
    v21[1] = sub_1000367B0;
    return AsyncCoreDataContainer.performWrite<A>(_:)();
  }
  else
  {
    v23 = defaultLogger()(v11);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "clearPresentmentKeyUsage requires an internal build", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v1 + 88);
    v28 = *(_QWORD *)(v1 + 72);

    v10(v27, v28);
    v29 = *(_QWORD *)(v1 + 88);
    v30 = *(_QWORD *)(v1 + 64);
    swift_task_dealloc(*(_QWORD *)(v1 + 96));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000367B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10003686C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 112));
    swift_release(v5);
    v4 = sub_100036824;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100036824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003686C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v8, 0xD00000000000005BLL, 0x800000010012FCA0, 0xD00000000000001ELL, 0x800000010012FD60, 137);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000369AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000093E8(a3, a4);
  if (v4)
    return;
  v13 = v12;
  v49 = v11;
  v14 = (uint64_t)sub_1000C5D54();
  v16 = v14;
  v48 = v14;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v40 = v14;
    else
      v40 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v17 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v16);
    if (v17)
      goto LABEL_4;
LABEL_30:
    swift_bridgeObjectRelease(v48);
LABEL_31:
    sub_1000091F8();

    return;
  }
  v17 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_30;
LABEL_4:
  v41 = v13;
  v42 = 0;
  v43 = a1;
  if (v17 >= 1)
  {
    v18 = 0;
    v20 = v48;
    v19 = v49;
    v50 = v48 & 0xC000000000000001;
    *(_QWORD *)&v15 = 136315138;
    v45 = v15;
    v44 = (char *)&type metadata for Any + 8;
    v54 = v17;
    v46 = v9;
    v47 = v8;
    while (1)
    {
      if (v50)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v20);
      else
        v22 = *(id *)(v20 + 8 * v18 + 32);
      v23 = v22;
      defaultLogger()(v22);
      v24 = v23;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v52 = v28;
        *(_DWORD *)v27 = v45;
        v29 = objc_msgSend(v24, "identifier");
        if (v29)
        {
          v30 = v29;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v33 = v32;

        }
        else
        {
          v33 = 0xE500000000000000;
          v31 = 0x3E6C696E3CLL;
        }
        *(_QWORD *)(v27 + 4) = sub_10003FA80(v31, v33, (uint64_t *)&v52);

        swift_bridgeObjectRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Clearing presentment key usage for key %s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, v44);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        v9 = v46;
        v8 = v47;
        v19 = v49;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v47);
        v20 = v48;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
      }
      objc_msgSend(v24, "setTimesUsed:", 0, v41, v42);
      v34 = objc_msgSend(v24, "relyingParties");
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v34, "anyObject");

        if (v36)
        {
          _bridgeAnyObjectToAny(_:)(v51);
          swift_unknownObjectRelease(v36, v37);
        }
        else
        {
          memset(v51, 0, sizeof(v51));
        }
        sub_100039AD8((uint64_t)v51, (uint64_t)&v52);
        if (*((_QWORD *)&v53 + 1))
        {
          v38 = type metadata accessor for StoredRelyingParty(0);
          if ((swift_dynamicCast(v51, &v52, (char *)&type metadata for Any + 8, v38, 6) & 1) != 0)
          {
            v39 = *(void **)&v51[0];
            objc_msgSend(*(id *)(v43 + 16), "deleteObject:", *(_QWORD *)&v51[0]);

          }
          goto LABEL_8;
        }
      }
      else
      {
        v52 = 0u;
        v53 = 0u;
      }
      sub_1000150E8((uint64_t)&v52, &qword_1001755C8);
LABEL_8:
      ++v18;
      v21 = objc_msgSend(objc_allocWithZone((Class)NSSet), "init");
      objc_msgSend(v24, "setRelyingParties:", v21);

      if (v54 == v18)
      {
        swift_bridgeObjectRelease(v20);
        v13 = v41;
        goto LABEL_31;
      }
    }
  }
  __break(1u);
}

uint64_t sub_100036DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  return swift_task_switch(sub_100036E98, 0, 0);
}

uint64_t sub_100036E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v32 = *(_QWORD *)(v1 + 88);
    v33 = *(_QWORD *)(v1 + 80);
    v34 = *(_QWORD *)(v1 + 104);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = *(_QWORD *)(v1 + 32);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v35 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 24) = sub_10003FA80(v7, v6, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStorage keyInfo for credential %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
    v11 = v10(v34, v33);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 104);
    v13 = *(_QWORD *)(v1 + 80);
    v14 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 40), 2);

    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    v11 = v10(v12, v13);
  }
  if ((byte_100178C90 & 1) != 0)
  {
    v16 = *(_QWORD *)(v1 + 40);
    v15 = *(_QWORD *)(v1 + 48);
    v17 = *(_QWORD *)(v1 + 32);
    v18 = (_QWORD *)swift_allocObject(&unk_100168988, 40, 7);
    *(_QWORD *)(v1 + 112) = v18;
    v18[2] = v15;
    v18[3] = v17;
    v18[4] = v16;
    v19 = swift_allocObject(&unk_1001689B0, 32, 7);
    *(_QWORD *)(v1 + 120) = v19;
    *(_QWORD *)(v19 + 16) = sub_100038788;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v16);
    swift_retain(v15);
    swift_retain(v18);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 128) = v21;
    v22 = sub_100008E84(&qword_1001755A8);
    *v21 = v1;
    v21[1] = sub_1000371F4;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 16, sub_100039668, v19, v22);
  }
  else
  {
    v24 = defaultLogger()(v11);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "keyInfo requires an internal build", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = *(_QWORD *)(v1 + 96);
    v29 = *(_QWORD *)(v1 + 80);

    v10(v28, v29);
    v30 = *(_QWORD *)(v1 + 96);
    v31 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 104));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(_QWORD *))(v1 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000371F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000372A4, 0, 0);
  v5 = *(_QWORD *)(v3 + 112);
  swift_release(*(_QWORD *)(v3 + 120));
  swift_release(v5);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 72);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v6);
}

uint64_t sub_1000372A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v8, 0xD00000000000005BLL, 0x800000010012FCA0, 0x286F666E4979656BLL, 0xED0000293A726F66, 204);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000373F0(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  unint64_t v75;
  id v76;
  void *v77;
  unint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(char *, unint64_t, uint64_t);
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  char *v107;
  id v108;
  void *v109;
  uint64_t v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  char *v118;
  id v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(unint64_t, char *, uint64_t);
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  id v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  char *v145;
  uint64_t v146;
  int v147;
  id v148;
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  BOOL v168;
  unint64_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  __n128 v179;
  uint64_t *v180;
  int v181;
  uint64_t v182;
  unsigned int v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unsigned int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;

  v229 = a2;
  v214 = a5;
  v210 = type metadata accessor for DIPError.Code(0);
  v209 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v215 = (char *)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for Logger(0);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v213 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_1001755B0);
  v11 = __chkstk_darwin(v10);
  v223 = (char *)&v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v222 = (char *)&v177 - v13;
  v14 = type metadata accessor for Date(0);
  v230 = *(_QWORD **)(v14 - 8);
  v231 = v14;
  v15 = __chkstk_darwin(v14);
  v218 = (char *)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v226 = (char *)&v177 - v18;
  v19 = __chkstk_darwin(v17);
  v232 = (unint64_t)&v177 - v20;
  __chkstk_darwin(v19);
  v227 = (char *)&v177 - v21;
  v22 = sub_100008E84(&qword_100174840);
  __chkstk_darwin(v22);
  v217 = (char *)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CredentialKeyUsage(0);
  v224 = *(_QWORD *)(v24 - 8);
  v225 = v24;
  __chkstk_darwin(v24);
  v221 = (char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008E84(&qword_1001755B8);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v177 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v177 - v30;
  v32 = type metadata accessor for CredentialKeyType(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v177 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v177 - v37;
  v219 = a3;
  v220 = (uint64_t)a4;
  v39 = v228;
  v40 = sub_1000093E8(a3, a4);
  if (!v39)
  {
    v208 = (uint8_t *)a1;
    v206 = v38;
    v207 = v36;
    v228 = v33;
    v216 = v32;
    v189 = v31;
    v190 = v29;
    v236 = (unint64_t)_swiftEmptyArrayStorage;
    v41 = v40;
    v42 = sub_1000C5F8C();
    v184 = v41;
    v43 = (void *)0xD000000000000012;
    v235 = (uint64_t)v42;
    v44 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
    v45 = 0;
    v46 = v44;
    v47 = (uint64_t)v223;
    v48 = v228;
    if (v44)
    {
      v49 = objc_msgSend(v44, "progenitorKey");

      if (v49)
      {
        v50 = v49;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
        v52 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v51 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v52 >= v51 >> 1)
          goto LABEL_74;
        goto LABEL_5;
      }
    }
LABEL_6:
    v54 = (void *)sub_100122C60((uint64_t)v43 + 12, (void *)0x800000010012D7D0);
    v182 = v45;
    if (v45)
    {

      v55 = v235;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v55);
      return;
    }
    v56 = v54;
    if (v54)
    {
      v57 = objc_msgSend(v54, "progenitorKey");

      if (v57)
      {
        v58 = v57;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
        v60 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v59 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v60 >= v59 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
        specialized Array._endMutation()(v61);

      }
    }
    v45 = v235;
    if ((unint64_t)v235 >> 62)
    {
      if (v235 < 0)
        v176 = v235;
      else
        v176 = v235 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v235);
      v62 = _CocoaArrayWrapper.endIndex.getter(v176);
    }
    else
    {
      v62 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFF8) + 0x10);
      v63 = swift_bridgeObjectRetain(v235);
    }
    v64 = v214;
    v52 = v232;
    v66 = v224;
    v65 = v225;
    if (v62)
    {
      v187 = v45 & 0xC000000000000001;
      v180 = &v234;
      v67 = 4;
      v188 = enum case for CredentialKeyType.invalid(_:);
      v183 = enum case for CredentialKeyUsage.invalid(_:);
      v181 = enum case for CredentialKeyType.ses(_:);
      v63.n128_u64[0] = 136315138;
      v179 = v63;
      v178 = (char *)&type metadata for Any + 8;
      v186 = v45;
      v185 = v62;
      while (1)
      {
        v68 = v67 - 4;
        v197 = v67;
        if (v187)
          v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v67 - 4, v45);
        else
          v69 = *(id *)(v45 + 8 * v67);
        v43 = v69;
        v50 = (id)(v68 + 1);
        if (__OFADD__(v68, 1))
        {
          __break(1u);
LABEL_74:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
LABEL_5:
          v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
          specialized Array._endMutation()(v53);

          goto LABEL_6;
        }
        v70 = objc_msgSend(v69, "identifier");
        if (v70)
        {
          v71 = v70;
          v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          v204 = v72;

        }
        else
        {
          v203 = 0;
          v204 = 0xE000000000000000;
        }
        v73 = objc_msgSend(v43, "publicKey");
        if (v73)
        {
          v74 = v73;
          v200 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
          v205 = v75;

        }
        else
        {
          v200 = 0;
          v205 = 0xC000000000000000;
        }
        v76 = objc_msgSend(v43, "publicKeyIdentifier");
        if (v76)
        {
          v77 = v76;
          v198 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v199 = v78;

        }
        else
        {
          v198 = 0;
          v199 = 0xC000000000000000;
        }
        v79 = objc_msgSend(v43, "keyType");
        if (!v79)
          goto LABEL_33;
        v80 = v79;
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v83 = v82;

        v84 = (uint64_t)v189;
        CredentialKeyType.init(rawValue:)(v81, v83);
        v85 = v216;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v84, 1, v216) == 1)
          break;
        v86 = v206;
        v87 = (*(uint64_t (**)(void))(v48 + 32))();
        v52 = v232;
        v66 = v224;
        v65 = v225;
LABEL_35:
        v194 = CredentialKeyType.rawValue.getter(v87);
        v202 = v88;
        v89 = *(void (**)(char *, uint64_t))(v48 + 8);
        v89(v86, v85);
        v90 = objc_msgSend(v43, "usage");
        if (!v90)
          goto LABEL_38;
        v91 = v90;
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v94 = v93;

        v95 = (uint64_t)v217;
        v66 = v224;
        v65 = v225;
        CredentialKeyUsage.init(rawValue:)(v92, v94);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v95, 1, v65) == 1)
        {
          sub_1000150E8(v95, &qword_100174840);
          v52 = v232;
LABEL_38:
          v96 = v221;
          v97 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v66 + 104))(v221, v183, v65);
          goto LABEL_40;
        }
        v96 = v221;
        v97 = (*(uint64_t (**)(void))(v66 + 32))();
        v52 = v232;
LABEL_40:
        v193 = CredentialKeyUsage.rawValue.getter(v97);
        v201 = v98;
        (*(void (**)(char *, uint64_t))(v66 + 8))(v96, v65);
        v99 = objc_msgSend(v43, "createdAt");
        if (!v99)
        {
          v105 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v230[7];
          v104 = (uint64_t)v222;
          v106 = v105(v222, 1, 1, v231);
          v107 = v207;
LABEL_44:
          static Date.distantPast.getter(v106);
          sub_1000150E8(v104, &qword_1001755B0);
          goto LABEL_46;
        }
        v100 = v99;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v102 = v230;
        v101 = v231;
        v103 = (void (*)(char *, unint64_t, uint64_t))v230[4];
        v104 = (uint64_t)v222;
        v103(v222, v52, v231);
        v105 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v102[7];
        v105((char *)v104, 0, 1, v101);
        v106 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v102[6])(v104, 1, v101);
        v107 = v207;
        if ((_DWORD)v106 == 1)
          goto LABEL_44;
        v103(v227, v104, v101);
LABEL_46:
        v196 = v50;
        v108 = objc_msgSend(v43, "updatedAt");
        if (v108)
        {
          v109 = v108;
          v110 = v232;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v111 = v43;
          v112 = v230;
          v113 = v231;
          v114 = (void (*)(uint64_t, uint64_t, uint64_t))v230[4];
          v114(v47, v110, v231);
          v105((char *)v47, 0, 1, v113);
          v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v112[6];
          v43 = v111;
          v116 = v115(v47, 1, v113);
          v117 = v216;
          if ((_DWORD)v116 != 1)
          {
            v118 = v226;
            v114((uint64_t)v226, v47, v231);
            goto LABEL_51;
          }
        }
        else
        {
          v116 = v105((char *)v47, 1, 1, v231);
          v117 = v216;
        }
        v118 = v226;
        static Date.distantPast.getter(v116);
        sub_1000150E8(v47, &qword_1001755B0);
LABEL_51:
        v119 = objc_msgSend(v43, "timesUsed");
        v120 = objc_msgSend(v43, "keyType");
        v195 = v43;
        v192 = (uint64_t)v119;
        if (!v120)
          goto LABEL_54;
        v121 = v120;
        v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
        v124 = v123;

        v125 = (uint64_t)v190;
        CredentialKeyType.init(rawValue:)(v122, v124);
        v126 = v228;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v228 + 48))(v125, 1, v117) == 1)
        {
          sub_1000150E8(v125, &qword_1001755B8);
LABEL_54:
          (*(void (**)(char *, _QWORD, uint64_t))(v228 + 104))(v107, v188, v117);
LABEL_55:
          v89(v107, v117);
          v191 = 0;
          v208 = (uint8_t *)0xC000000000000000;
          goto LABEL_56;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v107, v125, v117);
        v147 = (*(uint64_t (**)(char *, uint64_t))(v126 + 88))(v107, v117);
        if (v147 != v181)
          goto LABEL_55;
        v148 = objc_msgSend(v43, "keyBlob");
        v149 = v230;
        if (!v148)
        {
          swift_bridgeObjectRelease(v201);
          v162 = swift_bridgeObjectRelease(v202);
          v163 = v213;
          defaultLogger()(v162);
          v164 = v204;
          swift_bridgeObjectRetain(v204);
          v166 = Logger.logObject.getter(v165);
          v167 = static os_log_type_t.error.getter();
          v168 = os_log_type_enabled(v166, v167);
          v169 = v205;
          if (v168)
          {
            v170 = (uint8_t *)swift_slowAlloc(12, -1);
            v171 = swift_slowAlloc(32, -1);
            v234 = v171;
            *(_DWORD *)v170 = v179.n128_u32[0];
            v208 = v170 + 4;
            swift_bridgeObjectRetain(v164);
            v233 = sub_10003FA80(v203, v164, &v234);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v180, v208);
            swift_bridgeObjectRelease_n(v164, 3);
            _os_log_impl((void *)&_mh_execute_header, v166, v167, "Cannot report SES presentment key %s because it has no key blob", v170, 0xCu);
            swift_arrayDestroy(v171, 1, v178);
            swift_slowDealloc(v171, -1, -1);
            swift_slowDealloc(v170, -1, -1);

            sub_100005AB0(v198, v199);
            sub_100005AB0(v200, v169);
            (*(void (**)(char *, uint64_t))(v211 + 8))(v213, v212);
            v144 = (void (*)(char *, uint64_t))v230[1];
          }
          else
          {
            swift_bridgeObjectRelease_n(v164, 2);

            sub_100005AB0(v198, v199);
            sub_100005AB0(v200, v169);
            (*(void (**)(char *, uint64_t))(v211 + 8))(v163, v212);
            v144 = (void (*)(char *, uint64_t))v149[1];
          }
          v172 = v231;
          v144(v118, v231);
          v145 = v227;
          v146 = v172;
          goto LABEL_59;
        }
        v150 = v148;
        v151 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v148);
        v153 = v152;

        v154 = v204;
        v155 = v182;
        v156 = sub_1000FF1E8(v203, v204, v151, v153, 0, 0xF000000000000000);
        v157 = v205;
        if (v155)
        {
          swift_bridgeObjectRelease(v201);
          swift_bridgeObjectRelease(v202);

          sub_100005AB0(v151, v153);
          sub_100005AB0(v198, v199);
          sub_100005AB0(v200, v157);
          swift_bridgeObjectRelease(v154);
          v174 = (void (*)(char *, uint64_t))v149[1];
          v175 = v231;
          v174(v118, v231);
          v174(v227, v175);
          swift_bridgeObjectRelease(v186);
          swift_bridgeObjectRelease(v235);
          swift_bridgeObjectRelease(v236);
          return;
        }
        v158 = v156;
        v159 = sub_1001033D8(*(_QWORD *)(v156 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob), *(_QWORD *)(v156 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob + 8));
        v182 = 0;
        v160 = (void *)v159;
        v191 = SecAccessControlRef.data.getter();
        v208 = (uint8_t *)v161;
        swift_release(v158);

        sub_100005AB0(v151, v153);
LABEL_56:
        v127 = v231;
        v128 = (void (*)(unint64_t, char *, uint64_t))v230[2];
        v128(v232, v227, v231);
        v129 = (uint64_t)v218;
        v128((unint64_t)v218, v226, v127);
        v130 = objc_allocWithZone((Class)DCCredentialCryptoKeyInfo);
        v131 = v220;
        swift_bridgeObjectRetain(v220);
        v132 = v200;
        v133 = v205;
        sub_100005A38(v200, v205);
        v134 = v198;
        v135 = v199;
        sub_100005A38(v198, v199);
        v136 = v191;
        v137 = (unint64_t)v208;
        sub_100005A38(v191, (unint64_t)v208);
        v138 = sub_1000398AC(v203, v204, v219, v131, v132, v133, v134, v135, v194, v202, v193, v201, v232, v129, v192);
        sub_100005AB0(v136, v137);
        sub_100005AB0(v134, v135);
        v139 = sub_100005AB0(v132, v133);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v139);
        v141 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v140 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v141 >= v140 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
        v142 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v141, v138);
        specialized Array._endMutation()(v142);

        sub_100005AB0(v134, v135);
        sub_100005AB0(v132, v133);
        sub_100005AB0(v136, (unint64_t)v208);
        v143 = v231;
        v144 = (void (*)(char *, uint64_t))v230[1];
        v144(v226, v231);
        v145 = v227;
        v146 = v143;
LABEL_59:
        v144(v145, v146);
        v47 = (uint64_t)v223;
        v66 = v224;
        v52 = v232;
        v48 = v228;
        v67 = v197 + 1;
        v65 = v225;
        v45 = v186;
        if (v196 == (id)v185)
        {
          swift_bridgeObjectRelease(v186);

          v45 = v235;
          v173 = (_QWORD *)v236;
          v64 = v214;
          goto LABEL_70;
        }
      }
      sub_1000150E8(v84, &qword_1001755B8);
      v52 = v232;
      v66 = v224;
      v65 = v225;
LABEL_33:
      v86 = v206;
      v85 = v216;
      v87 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v48 + 104))(v206, v188, v216);
      goto LABEL_35;
    }
    swift_bridgeObjectRelease(v45);

    v173 = _swiftEmptyArrayStorage;
LABEL_70:
    swift_bridgeObjectRelease(v45);
    *v64 = v173;
  }
}

void sub_100038788(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1000373F0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), a2);
}

void sub_1000387A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_100038CA0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void *sub_100038904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34[5];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v33[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain(a1);
                    sub_100039B9C(v31);
                    return (void *)v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = static Hasher._hash(seed:_:)(*(_QWORD *)(v2 + 40), v18);
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v6;
    v34[2] = v33[0];
    v34[3] = v4;
    v34[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    swift_bridgeObjectRetain(a1);
    if (v23 < 0x81
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v24, 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      v27 = (char *)v33 - v26;
      memcpy((char *)v33 - v26, (const void *)(v2 + 56), v24);
      v28 = sub_100038DA8((uint64_t)v27, v23, v2, v21, v34);
      swift_release(v2);
      sub_100039B9C(v34[0]);
      return (void *)v28;
    }
    else
    {
      v29 = (void *)swift_slowAlloc(v24, -1);
      memcpy(v29, (const void *)(v2 + 56), v24);
      v30 = sub_100038DA8((uint64_t)v29, v23, v2, v21, v34);
      swift_release(v2);
      sub_100039B9C(v34[0]);
      swift_slowDealloc(v29, -1, -1);
      return (void *)v30;
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_100038CA0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000067E0();
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_1000394C0(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_100038DA8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t i;
  unint64_t v31;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v16 = a5[3];
    v17 = a5[4];
    if (!v17)
      break;
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    v26 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v26);
    v27 = -1 << *(_BYTE *)(a3 + 32);
    v28 = result & ~v27;
    v12 = v28 >> 6;
    v13 = 1 << v28;
    if (((1 << v28) & *(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v29 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        v14 = v12;
        v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_33;
          if (!v10)
            return (uint64_t)&_swiftEmptySetSingleton;
        }
      }
      else
      {
        for (i = v28 + 1; ; i = v31 + 1)
        {
          v31 = i & ~v27;
          if (((*(_QWORD *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            break;
          if (*(_QWORD *)(v29 + 8 * v31) == v26)
          {
            v12 = v31 >> 6;
            v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    v21 = (unint64_t)(a5[2] + 64) >> 6;
    v22 = a5[3];
    if (v20 >= v21)
      goto LABEL_31;
    v23 = a5[1];
    v24 = *(_QWORD *)(v23 + 8 * v20);
    if (!v24)
    {
      v22 = v16 + 1;
      if (v16 + 2 >= v21)
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        v20 = v16 + 2;
      }
      else
      {
        v22 = v16 + 2;
        if (v16 + 3 >= v21)
          goto LABEL_31;
        v24 = *(_QWORD *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          v20 = v16 + 3;
        }
        else
        {
          v20 = v16 + 4;
          v22 = v16 + 3;
          if (v16 + 4 >= v21)
            goto LABEL_31;
          v24 = *(_QWORD *)(v23 + 8 * v20);
          if (!v24)
          {
            v22 = v21 - 1;
            v25 = v16 + 5;
            while (v21 != v25)
            {
              v24 = *(_QWORD *)(v23 + 8 * v25++);
              if (v24)
              {
                v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain(a3);
            return sub_100038FE8(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v20 << 6);
    v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100038FE8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (uint64_t)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100008E84(&qword_100174768);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)(v9[5], v18);
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_10003922C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100008E84(&qword_100174770);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1000394C0(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100039644(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

_QWORD *sub_100039668@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100039C00(a1, a2);
}

void sub_10003967C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((byte_100178C90 & 1) != 0)
  {
    sub_100104754(a1);
    if (v1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
      swift_errorRetain(v1);
      v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v13 = type metadata accessor for DIPError(0);
      v14 = sub_10000745C();
      swift_allocError(v13, v14, 0, 0);
      v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v12, 0xD00000000000005BLL, 0x800000010012FCA0, 0xD000000000000012, 0x800000010012FD80, 105);
      swift_willThrow(v15);
      swift_errorRelease(v1);
    }
  }
  else
  {
    v16 = defaultLogger()(v9);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "deleteLegacySESlot requires an internal build", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

id sub_1000398AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NSString v17;
  Class isa;
  Class v19;
  NSString v20;
  NSString v21;
  Class v22;
  Class v23;
  Class v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  NSString v28;
  id v29;
  id v30;

  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v19 = Data._bridgeToObjectiveC()().super.isa;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a12);
  v22 = Date._bridgeToObjectiveC()().super.isa;
  v23 = Date._bridgeToObjectiveC()().super.isa;
  v24 = Data._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v29, "initWithIdentifier:credentialIdentifier:publicKey:publicKeyIdentifier:keyType:keyUsage:createdAt:updatedAt:presentmentKeyTimesUsed:acl:", v28, v17, isa, v19, v20, v21, v22, v23, a15, v24);

  v25 = type metadata accessor for Date(0);
  v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
  v26(a14, v25);
  v26(a13, v25);
  return v30;
}

void sub_100039A74(uint64_t a1)
{
  uint64_t v1;

  sub_1000369AC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100039A90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039AB4(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100039AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001755C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039B20()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039B44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100035D60(*(_QWORD *)(v1 + 16), a1);
}

double sub_100039B5C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v6;

  (*(void (**)(__int128 *__return_ptr, _QWORD))(v2 + 16))(&v6, *a1);
  if (!v3)
  {
    result = *(double *)&v6;
    *a2 = v6;
  }
  return result;
}

uint64_t sub_100039B9C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100039BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100178A10;
  if (!qword_100178A10)
  {
    v1 = objc_opt_self(NSPredicate);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100178A10);
  }
  return result;
}

uint64_t sub_100039BE4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100034D78(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

_QWORD *sub_100039C00@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(v2 + 16))(&v6, *a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_100039C4C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[3];
  char v44[8];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v41 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredRelyingParty(0);
  v8 = (void *)static StoredRelyingParty.fetchRequest()();
  objc_msgSend(v8, "setFetchLimit:", 1);
  sub_100039BA4();
  v9 = sub_100008E84(&qword_100174878);
  v10 = swift_allocObject(v9, 72, 7);
  v40 = xmmword_10012A6D0;
  *(_OWORD *)(v10 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10000EA3C();
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001BLL, 0x800000010012FE50, v10);
  objc_msgSend(v8, "setPredicate:", v11);

  result = NSManagedObjectContext.fetch<A>(_:)(v8, v7);
  if (v2)
  {

    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v13._countAndFlagsBits = 0xD00000000000001DLL;
    v13._object = (void *)0x800000010012FE70;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1;
    v14._object = a2;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 8250;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    v47 = v2;
    v16 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v47, &v45, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v17 = v45;
    v18 = v46;
    v19 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v42, enum case for DIPError.Code.coreDataError(_:), v41);
    v20 = sub_100008E84((uint64_t *)&unk_100178A30);
    v21 = sub_100008E84(&qword_100174898);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(_QWORD *)(v22 + 72);
    v24 = *(unsigned __int8 *)(v22 + 80);
    v25 = (v24 + 32) & ~v24;
    v26 = swift_allocObject(v20, v25 + v23, v24 | 7);
    *(_OWORD *)(v26 + 16) = v40;
    v27 = (uint64_t *)(v26 + v25 + *(int *)(v21 + 48));
    v28 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v29 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v26 + v25, v28, v29);
    swift_getErrorValue(v2, v44, v43);
    v30 = v43[1];
    v31 = v43[2];
    swift_errorRetain(v2);
    v32 = dispatch thunk of Error._code.getter(v30, v31);
    v27[3] = (uint64_t)&type metadata for Int;
    *v27 = v32;
    v33 = sub_10003E0A8(v26);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_10000745C();
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v17, v18, v2, v19, 0, v33, 0xD00000000000006CLL, 0x800000010012FE90, 0xD00000000000001ELL, 0x800000010012FF00, 35);
    swift_willThrow(v36);
    swift_errorRelease(v2);
    return v34;
  }
  v37 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v39 = result;
    else
      v39 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v34 = _CocoaArrayWrapper.endIndex.getter(v39);
    result = swift_bridgeObjectRelease(v37);
    if (!v34)
      goto LABEL_9;
  }
  else
  {
    v34 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
    {
LABEL_9:

      swift_bridgeObjectRelease(v37);
      return v34;
    }
  }
  if ((v37 & 0xC000000000000001) != 0)
  {
    v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v38 = *(id *)(v37 + 32);
LABEL_8:
    v34 = (uint64_t)v38;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003A05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for ISO18013KnownNamespaces(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v0);
  v5 = ISO18013KnownNamespaces.rawValue.getter(v4);
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_100178CC0 = v5;
  qword_100178CC8 = v7;
  return result;
}

uint64_t sub_10003A104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v0 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - v5;
  v7 = sub_100008E84(&qword_1001752D8);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10012A5D0;
  v9 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v10 = v9(v6, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v0);
  v11 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v10);
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v6, v0);
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  v15 = v9(v4, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v0);
  v16 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v15);
  v18 = v17;
  result = ((uint64_t (*)(char *, uint64_t))v14)(v4, v0);
  *(_QWORD *)(v8 + 48) = v16;
  *(_QWORD *)(v8 + 56) = v18;
  qword_100178CD0 = v8;
  return result;
}

uint64_t sub_10003A230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BOOL8 v22;
  _QWORD *v23;

  v0 = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)(1);
  v2 = v1;
  v3 = &_swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v23 = &_swiftEmptyDictionarySingleton;
  v6 = sub_1000FBC68(1);
  v7 = *(&_swiftEmptyDictionarySingleton + 2);
  v8 = (v5 & 1) == 0;
  result = v7 + v8;
  if (__OFADD__(v7, v8))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    qword_100178CD8 = (uint64_t)v3;
    return result;
  }
  v10 = v5;
  v11 = 2;
  while (v3[3] >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v3 = v23;
      if ((v10 & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      sub_10007D96C();
      v3 = v23;
      if ((v10 & 1) == 0)
        goto LABEL_11;
    }
LABEL_9:
    v14 = (uint64_t *)(v3[7] + 16 * v6);
    swift_bridgeObjectRelease(v14[1]);
    *v14 = v0;
    v14[1] = v2;
LABEL_13:
    result = swift_bridgeObjectRelease(0x8000000000000000);
    if (v11 == 101)
      goto LABEL_17;
    v0 = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)(v11);
    v2 = v19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v23 = v3;
    v6 = sub_1000FBC68(v11);
    v10 = v20;
    v21 = v3[2];
    v22 = (v20 & 1) == 0;
    ++v11;
    result = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_16;
  }
  sub_10007B880(result, isUniquelyReferenced_nonNull_native & 1);
  v12 = sub_1000FBC68(v11 - 1);
  if ((v10 & 1) != (v13 & 1))
    goto LABEL_19;
  v6 = v12;
  v3 = v23;
  if ((v10 & 1) != 0)
    goto LABEL_9;
LABEL_11:
  v3[(v6 >> 6) + 8] |= 1 << v6;
  *(_QWORD *)(v3[6] + 8 * v6) = v11 - 1;
  v15 = (uint64_t *)(v3[7] + 16 * v6);
  *v15 = v0;
  v15[1] = v2;
  v16 = v3[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    v3[2] = v18;
    goto LABEL_13;
  }
  __break(1u);
LABEL_19:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

unint64_t sub_10003A3F4()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[56];

  v0 = sub_100008E84(&qword_1001752D0);
  inited = swift_initStackObject(v0, v8);
  *(_OWORD *)(inited + 16) = xmmword_10012A6D0;
  if (qword_1001743E0 != -1)
    swift_once(&qword_1001743E0, sub_10003A05C);
  v2 = qword_100178CC8;
  *(_QWORD *)(inited + 32) = qword_100178CC0;
  *(_QWORD *)(inited + 40) = v2;
  v3 = qword_1001743E8;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_1001743E8, sub_10003A104);
  v4 = qword_100178CD0;
  v5 = qword_1001743F0;
  swift_bridgeObjectRetain(qword_100178CD0);
  if (v5 != -1)
    swift_once(&qword_1001743F0, sub_10003A230);
  v6 = qword_100178CD8;
  swift_bridgeObjectRetain_n(qword_100178CD8, 2);
  swift_bridgeObjectRetain(v4);
  sub_1000AF390(v6);
  *(_QWORD *)(inited + 48) = v4;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return sub_10003E3FC(inited);
}

void *sub_10003A528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100008E84(&qword_100175600);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10003BC1C(&qword_100175608, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10003BC1C(&qword_100175610, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10003A780(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  int v118;
  unsigned int (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t result;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, uint64_t);
  void *v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t);
  void (*v172)(char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  char v175;
  char v176;
  void (*v177)(char *, uint64_t);
  void (*v178)(char *, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  unint64_t v209;
  int64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214[3];
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v2 = type metadata accessor for Logger(0);
  v206 = *(_QWORD *)(v2 - 8);
  v207 = v2;
  __chkstk_darwin(v2);
  v205 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DateComponents(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v185 = (char *)&v180 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v190 = (char *)&v180 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v180 - v10;
  v196 = type metadata accessor for Calendar.Component(0);
  v193 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v192 = (char *)&v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for Calendar(0);
  v187 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v195 = (char *)&v180 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008E84(&qword_1001755B0);
  v15 = __chkstk_darwin(v14);
  v184 = (char *)&v180 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v188 = (char *)&v180 - v18;
  __chkstk_darwin(v17);
  v201 = (char *)&v180 - v19;
  v203 = type metadata accessor for Date(0);
  v202 = *(_QWORD *)(v203 - 8);
  v20 = __chkstk_darwin(v203);
  v189 = (char *)&v180 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v191 = (char *)&v180 - v23;
  v24 = __chkstk_darwin(v22);
  v186 = (char *)&v180 - v25;
  v26 = __chkstk_darwin(v24);
  v194 = (char *)&v180 - v27;
  v28 = __chkstk_darwin(v26);
  v198 = (char *)&v180 - v29;
  __chkstk_darwin(v28);
  v199 = (char *)&v180 - v30;
  v31 = (char *)type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v209 = *((_QWORD *)v31 - 1);
  v32 = __chkstk_darwin(v31);
  v200 = (char *)&v180 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  *(_QWORD *)&v208 = (char *)&v180 - v34;
  v35 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v35);
  v37 = (unint64_t)&v180 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for CredentialElement(0);
  v38 = *(uint64_t **)(v212 - 8);
  __chkstk_darwin(v212);
  v40 = (uint64_t *)((char *)&v180 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1001743E0 != -1)
    goto LABEL_109;
  if (!a1[2])
    goto LABEL_29;
LABEL_3:
  v204 = v31;
  v41 = qword_100178CC8;
  v42 = qword_100178CC0;
  swift_bridgeObjectRetain(qword_100178CC8);
  v43 = sub_1000FBC04(v42, v41);
  if ((v44 & 1) != 0)
  {
    v183 = v5;
    v45 = *(_QWORD *)(a1[7] + 8 * v43);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v41);
    v5 = *(_QWORD *)(v45 + 16);
    if (!v5)
    {
      v38 = _swiftEmptyDictionarySingleton;
      goto LABEL_32;
    }
    v182 = v11;
    v181 = v4;
    v31 = (char *)(v45 + ((*((unsigned __int8 *)v38 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v38 + 80)));
    v211 = v38[9];
    v180 = v45;
    swift_bridgeObjectRetain(v45);
    v213 = _swiftEmptyDictionarySingleton;
    v38 = &qword_1001752C8;
    v210 = v37;
    while (1)
    {
      sub_10002E7BC((uint64_t)v31, (uint64_t)v40);
      v46 = *v40;
      v11 = (char *)v40[1];
      sub_10002E908((uint64_t)v40 + *(int *)(v212 + 20), v37, &qword_1001752C8);
      v47 = type metadata accessor for AnyCodable(0);
      v4 = *(_QWORD *)(v47 - 8);
      v48 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v37, 1, v47);
      v49 = swift_bridgeObjectRetain(v11);
      if (v48 == 1)
      {
        v50 = (uint64_t *)v37;
        v51 = &qword_1001752C8;
      }
      else
      {
        AnyCodable.value.getter(v214, v49);
        v52 = (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 8))(v37, v47);
        if (v215)
        {
          AnyHashable.base.getter(&v217, v52);
          sub_10003BBA0((uint64_t)v214);
          sub_100039AD8((uint64_t)&v217, (uint64_t)v214);
          a1 = v213;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v213);
          v216 = a1;
          v37 = sub_1000FBC04(v46, (uint64_t)v11);
          v55 = a1[2];
          v56 = (v54 & 1) == 0;
          v57 = v55 + v56;
          if (__OFADD__(v55, v56))
            goto LABEL_108;
          v58 = v54;
          if (a1[3] >= v57)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              a1 = (uint64_t *)&v216;
              sub_10007DB24();
            }
          }
          else
          {
            sub_10007BB40(v57, isUniquelyReferenced_nonNull_native);
            a1 = v216;
            v59 = sub_1000FBC04(v46, (uint64_t)v11);
            if ((v58 & 1) != (v60 & 1))
            {
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return result;
            }
            v37 = v59;
          }
          v66 = v216;
          v213 = v216;
          if ((v58 & 1) != 0)
          {
            sub_10003BBD4((uint64_t)v214, v216[7] + 32 * v37);
          }
          else
          {
            v216[(v37 >> 6) + 8] |= 1 << v37;
            v67 = (uint64_t *)(v66[6] + 16 * v37);
            *v67 = v46;
            v67[1] = (uint64_t)v11;
            sub_100039AD8((uint64_t)v214, v66[7] + 32 * v37);
            v68 = v66[2];
            v69 = __OFADD__(v68, 1);
            v70 = v68 + 1;
            if (v69)
            {
              __break(1u);
              goto LABEL_112;
            }
            v66[2] = v70;
            swift_bridgeObjectRetain(v11);
          }
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(0x8000000000000000);
          v37 = v210;
          goto LABEL_8;
        }
        v50 = v214;
        v51 = &qword_100175360;
      }
      sub_1000150E8((uint64_t)v50, v51);
      v61 = (uint64_t)v213;
      swift_bridgeObjectRetain(v213);
      v62 = sub_1000FBC04(v46, (uint64_t)v11);
      v64 = v63;
      swift_bridgeObjectRelease(v61);
      if ((v64 & 1) != 0)
      {
        v65 = swift_isUniquelyReferenced_nonNull_native(v61);
        v217 = v61;
        if ((v65 & 1) == 0)
        {
          sub_10007DB24();
          v61 = v217;
        }
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v61 + 48) + 16 * v62 + 8));
        sub_100039AD8(*(_QWORD *)(v61 + 56) + 32 * v62, (uint64_t)v214);
        v213 = (uint64_t *)v61;
        sub_10011F640(v62, v61);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        memset(v214, 0, sizeof(v214));
        v215 = 1;
      }
      swift_bridgeObjectRelease(v11);
      sub_1000150E8((uint64_t)v214, &qword_1001755F0);
LABEL_8:
      v38 = &qword_1001752C8;
      sub_10002E800((uint64_t)v40);
      v31 += v211;
      if (!--v5)
      {
        v45 = v180;
        swift_bridgeObjectRelease(v180);
        v4 = v181;
        v11 = v182;
        v38 = v213;
LABEL_32:
        swift_bridgeObjectRelease(v45);
        v5 = v183;
        v31 = v204;
        goto LABEL_33;
      }
    }
  }
  swift_bridgeObjectRelease(v41);
  v31 = v204;
LABEL_29:
  v38 = (uint64_t *)sub_10003E414((uint64_t)&_swiftEmptyArrayStorage);
LABEL_33:
  v37 = v209;
  v71 = v208;
  v212 = *(_QWORD *)(v209 + 104);
  v72 = ((uint64_t (*)(_QWORD, _QWORD, char *))v212)(v208, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v31);
  a1 = (uint64_t *)ISO18013_5_1_ElementIdentifier.rawValue.getter(v72);
  v74 = v73;
  v211 = *(_QWORD *)(v37 + 8);
  ((void (*)(uint64_t, char *))v211)(v71, v31);
  if (v38[2] && (v75 = (uint64_t)a1, a1 = v38, v76 = sub_1000FBC04(v75, v74), (v77 & 1) != 0))
  {
    sub_10002E908(v38[7] + 32 * v76, (uint64_t)&v217, &qword_1001755C8);
  }
  else
  {
    v217 = 0;
    v218 = 0;
    v219 = 0;
    v220 = 1;
  }
  swift_bridgeObjectRelease(v74);
  if (v220 == 1)
  {
    v78 = &qword_1001755F0;
    v79 = &v217;
    goto LABEL_74;
  }
  sub_100039AD8((uint64_t)&v217, (uint64_t)v214);
  if (!v215)
  {
    v78 = &qword_1001755C8;
    v79 = v214;
LABEL_74:
    v80 = sub_1000150E8((uint64_t)v79, v78);
LABEL_75:
    v95 = v205;
    defaultLogger()(v80);
    v96 = swift_bridgeObjectRetain(v38);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = swift_slowAlloc(32, -1);
      v214[0] = v100;
      *(_DWORD *)v99 = 136315138;
      swift_bridgeObjectRetain(v38);
      v101 = sub_100008E84(&qword_1001755C8);
      v102 = Dictionary.description.getter(v38, &type metadata for String, v101, &protocol witness table for String);
      v104 = v103;
      swift_bridgeObjectRelease(v38);
      v217 = sub_10003FA80(v102, v104, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v99 + 4);
      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease(v104);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Elements were not present to evaluate age data consistency: %s", v99, 0xCu);
      swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v99, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
    }
    (*(void (**)(char *, uint64_t))(v206 + 8))(v95, v207);
    return 0;
  }
  v80 = swift_dynamicCast(&v216, v214, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((v80 & 1) == 0)
    goto LABEL_75;
  v204 = v31;
  v183 = v5;
  v182 = v11;
  v181 = v4;
  v210 = (int64_t)v216;
  if (qword_1001743F0 != -1)
    goto LABEL_113;
  while (2)
  {
    v81 = qword_100178CD8;
    v11 = (char *)(qword_100178CD8 + 64);
    v82 = 1 << *(_BYTE *)(qword_100178CD8 + 32);
    v83 = -1;
    if (v82 < 64)
      v83 = ~(-1 << v82);
    v5 = v83 & *(_QWORD *)(qword_100178CD8 + 64);
    v40 = (uint64_t *)((unint64_t)(v82 + 63) >> 6);
    swift_bridgeObjectRetain(qword_100178CD8);
    v4 = 0;
    v31 = (char *)&qword_1001755F0;
    v213 = (uint64_t *)((char *)&type metadata for Any + 8);
    while (1)
    {
      if (v5)
      {
        v84 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v85 = v84 | (v4 << 6);
        if (!v38[2])
          goto LABEL_45;
        goto LABEL_64;
      }
      v86 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        swift_once(&qword_1001743E0, sub_10003A05C);
        if (a1[2])
          goto LABEL_3;
        goto LABEL_29;
      }
      if (v86 >= (uint64_t)v40)
        goto LABEL_81;
      v87 = *(_QWORD *)&v11[8 * v86];
      ++v4;
      if (!v87)
      {
        v4 = v86 + 1;
        if (v86 + 1 >= (uint64_t)v40)
          goto LABEL_81;
        v87 = *(_QWORD *)&v11[8 * v4];
        if (!v87)
        {
          v4 = v86 + 2;
          if (v86 + 2 >= (uint64_t)v40)
            goto LABEL_81;
          v87 = *(_QWORD *)&v11[8 * v4];
          if (!v87)
            break;
        }
      }
LABEL_63:
      v5 = (v87 - 1) & v87;
      v85 = __clz(__rbit64(v87)) + (v4 << 6);
      if (!v38[2])
      {
LABEL_45:
        v217 = 0;
        v218 = 0;
        v219 = 0;
        v220 = 1;
        goto LABEL_46;
      }
LABEL_64:
      v89 = *(_QWORD *)(*(_QWORD *)(v81 + 48) + 8 * v85);
      v90 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 16 * v85);
      v91 = *v90;
      v37 = v90[1];
      swift_bridgeObjectRetain(v37);
      v92 = v91;
      a1 = v38;
      v93 = sub_1000FBC04(v92, v37);
      if ((v94 & 1) != 0)
      {
        sub_10002E908(v38[7] + 32 * v93, (uint64_t)&v217, &qword_1001755C8);
      }
      else
      {
        v217 = 0;
        v218 = 0;
        v219 = 0;
        v220 = 1;
      }
      swift_bridgeObjectRelease(v37);
      if (v220 == 1)
      {
LABEL_46:
        sub_1000150E8((uint64_t)&v217, &qword_1001755F0);
      }
      else
      {
        sub_100039AD8((uint64_t)&v217, (uint64_t)v214);
        if (v215)
        {
          if ((swift_dynamicCast(&v216, v214, v213, &type metadata for Bool, 6) & 1) != 0
            && (((v210 < v89) ^ v216) & 1) == 0)
          {
            swift_bridgeObjectRelease(v38);
            swift_release(v81);
            return 1;
          }
        }
        else
        {
          sub_1000150E8((uint64_t)v214, &qword_1001755C8);
        }
      }
    }
    v88 = v86 + 3;
    if (v88 < (uint64_t)v40)
    {
      v87 = *(_QWORD *)&v11[8 * v88];
      if (!v87)
      {
        while (1)
        {
          v4 = v88 + 1;
          if (__OFADD__(v88, 1))
            break;
          if (v4 >= (uint64_t)v40)
            goto LABEL_81;
          v87 = *(_QWORD *)&v11[8 * v4];
          ++v88;
          if (v87)
            goto LABEL_63;
        }
LABEL_112:
        __break(1u);
LABEL_113:
        swift_once(&qword_1001743F0, sub_10003A230);
        continue;
      }
      v4 = v88;
      goto LABEL_63;
    }
    break;
  }
LABEL_81:
  swift_release(v81);
  v105 = v200;
  v106 = v204;
  v107 = ((uint64_t (*)(char *, _QWORD, char *))v212)(v200, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v204);
  v108 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v107);
  v110 = v109;
  ((void (*)(char *, char *))v211)(v105, v106);
  if (v38[2])
  {
    v111 = sub_1000FBC04(v108, v110);
    v112 = v202;
    v113 = (uint64_t)v201;
    if ((v114 & 1) != 0)
    {
      sub_10002E908(v38[7] + 32 * v111, (uint64_t)&v217, &qword_1001755C8);
    }
    else
    {
      v217 = 0;
      v218 = 0;
      v219 = 0;
      v220 = 1;
    }
    v115 = v203;
  }
  else
  {
    v217 = 0;
    v218 = 0;
    v219 = 0;
    v220 = 1;
    v115 = v203;
    v112 = v202;
    v113 = (uint64_t)v201;
  }
  swift_bridgeObjectRelease(v110);
  swift_bridgeObjectRelease(v38);
  if (v220 == 1)
  {
    v116 = &qword_1001755F0;
    v117 = &v217;
    goto LABEL_94;
  }
  sub_100039AD8((uint64_t)&v217, (uint64_t)v214);
  if (!v215)
  {
    v116 = &qword_1001755C8;
    v117 = v214;
LABEL_94:
    sub_1000150E8((uint64_t)v117, v116);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v113, 1, 1, v115);
LABEL_95:
    sub_1000150E8(v113, &qword_1001755B0);
    return 0;
  }
  v118 = swift_dynamicCast(v113, v214, (char *)&type metadata for Any + 8, v115, 6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v113, v118 ^ 1u, 1, v115);
  v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  if (v119(v113, 1, v115) == 1)
    goto LABEL_95;
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 32);
  v121 = v120(v199, v113, v115);
  v122 = v198;
  v123 = Date.init()(v121);
  v124 = v195;
  static Calendar.current.getter(v123);
  v125 = v193;
  v126 = *(void (**)(char *))(v193 + 104);
  v127 = v192;
  LODWORD(v209) = enum case for Calendar.Component.day(_:);
  v128 = v196;
  v212 = (uint64_t)v126;
  v126(v192);
  v129 = (uint64_t)v188;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v127, 30, v122, 0);
  v130 = v203;
  v131 = *(void (**)(char *, uint64_t))(v125 + 8);
  v131(v127, v128);
  v213 = *(uint64_t **)(v187 + 8);
  ((void (*)(char *, uint64_t))v213)(v124, v197);
  v132 = v112;
  v133 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
  v134 = v186;
  v133(v186, v122, v130);
  v135 = v119(v129, 1, v130);
  v211 = (uint64_t)v120;
  if (v135 == 1)
  {
    v120(v194, (uint64_t)v134, v130);
    v136 = sub_1000150E8(v129, &qword_1001755B0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v134, v130);
    v136 = v120(v194, v129, v130);
  }
  v138 = (uint64_t)v184;
  v139 = v195;
  static Calendar.current.getter(v136);
  v140 = v192;
  v141 = v196;
  ((void (*)(char *, _QWORD, uint64_t))v212)(v192, v209, v196);
  v142 = v198;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v140, -30, v198, 0);
  v131(v140, v141);
  ((void (*)(char *, uint64_t))v213)(v139, v197);
  v143 = v189;
  v133(v189, v142, v130);
  if (v119(v138, 1, v130) == 1)
  {
    ((void (*)(char *, char *, uint64_t))v211)(v191, v143, v130);
    v144 = sub_1000150E8(v138, &qword_1001755B0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v202 + 8))(v143, v130);
    v144 = ((uint64_t (*)(char *, uint64_t, uint64_t))v211)(v191, v138, v130);
  }
  v145 = v195;
  static Calendar.current.getter(v144);
  v211 = sub_100008E84(&qword_1001755F8);
  v146 = *(unsigned __int8 *)(v193 + 80);
  v147 = (v146 + 32) & ~v146;
  v209 = v147 + *(_QWORD *)(v193 + 72);
  v148 = v146 | 7;
  v149 = swift_allocObject(v211, v209, v146 | 7);
  v208 = xmmword_10012A6D0;
  *(_OWORD *)(v149 + 16) = xmmword_10012A6D0;
  v150 = enum case for Calendar.Component.year(_:);
  v151 = v196;
  v152 = (void (*)(uint64_t, uint64_t, uint64_t))v212;
  ((void (*)(uint64_t, _QWORD, uint64_t))v212)(v149 + v147, enum case for Calendar.Component.year(_:), v196);
  v153 = sub_10003A528(v149);
  swift_setDeallocating(v149);
  swift_arrayDestroy(v149 + v147, 1, v151);
  swift_deallocClassInstance(v149, 32, 7);
  v154 = v199;
  Calendar.dateComponents(_:from:to:)(v153, v199, v194);
  swift_bridgeObjectRelease(v153);
  v155 = v197;
  v156 = v213;
  v157 = ((uint64_t (*)(char *, uint64_t))v213)(v145, v197);
  static Calendar.current.getter(v157);
  v158 = swift_allocObject(v211, v209, v148);
  *(_OWORD *)(v158 + 16) = v208;
  v152(v158 + v147, v150, v151);
  v159 = sub_10003A528(v158);
  swift_setDeallocating(v158);
  swift_arrayDestroy(v158 + v147, 1, v151);
  swift_deallocClassInstance(v158, 32, 7);
  v160 = v190;
  v161 = v191;
  Calendar.dateComponents(_:from:to:)(v159, v154, v191);
  swift_bridgeObjectRelease(v159);
  v162 = ((uint64_t (*)(char *, uint64_t))v156)(v145, v155);
  v163 = v182;
  v164 = DateComponents.year.getter(v162);
  if ((v165 & 1) != 0)
  {
    v167 = v183;
    v168 = v185;
    v169 = v181;
    v170 = (*(uint64_t (**)(char *, char *, uint64_t))(v183 + 16))(v185, v160, v181);
  }
  else
  {
    v166 = v164;
    v167 = v183;
    v168 = v185;
    v169 = v181;
    v170 = (*(uint64_t (**)(char *, char *, uint64_t))(v183 + 16))(v185, v160, v181);
    if (v166 == v210)
    {
      v171 = *(void (**)(char *, uint64_t))(v167 + 8);
      v171(v168, v169);
      v171(v160, v169);
      v171(v163, v169);
      v172 = *(void (**)(char *, uint64_t))(v202 + 8);
      v173 = v203;
      v172(v161, v203);
      v172(v194, v173);
      v172(v198, v173);
      v172(v199, v173);
      return 0;
    }
  }
  v174 = DateComponents.year.getter(v170);
  v176 = v175;
  v177 = *(void (**)(char *, uint64_t))(v167 + 8);
  v177(v168, v169);
  v177(v160, v169);
  v177(v163, v169);
  v178 = *(void (**)(char *, uint64_t))(v202 + 8);
  v179 = v203;
  v178(v161, v203);
  v178(v194, v179);
  v178(v198, v179);
  v178(v199, v179);
  result = 2;
  if ((v176 & 1) == 0 && v174 == v210)
    return 0;
  return result;
}

uint64_t sub_10003BBA0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10003BBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001755C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BC1C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDesignationProvider()
{
  return &type metadata for KeyDesignationProvider;
}

uint64_t sub_10003BC6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v2[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v10);
  v2[14] = swift_task_alloc(v10);
  v2[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_10003BD48, 0, 0);
}

uint64_t sub_10003BD48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t **v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Clearing key designations in database", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[15];
  v7 = v1[11];
  v8 = v1[12];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[16] = (uint64_t)v9;
  v9(v6, v7);
  v10 = (uint64_t **)swift_task_alloc(dword_10017562C);
  v1[17] = (uint64_t)v10;
  *v10 = v1;
  v10[1] = (uint64_t *)sub_10003BE38;
  return sub_10003D8D0(0, (uint64_t)&off_1001670C8, v1[2]);
}

uint64_t sub_10003BE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003C1DC;
  else
    v3 = sub_10003BE9C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003BE9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Clearing key designations in SE", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[18];
  v7 = (void (*)(uint64_t, uint64_t))v1[16];
  v8 = v1[14];
  v10 = v1[10];
  v9 = v1[11];
  v11 = v1[7];
  v12 = v1[8];

  v7(v8, v9);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104);
  v13(v10, enum case for SESKeystore.KeyDesignation.progenitor(_:), v11);
  dispatch thunk of SESKeystore.clearKeyDesignation(_:)(v10);
  v14 = v6;
  v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v15(v10, v11);
  if (v6)
  {
    v19 = v1[14];
    v20 = v1[15];
    v21 = v1[13];
    v22 = v1[9];
    v23 = v1[10];
    v24 = v1[6];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[5] + 104))(v24, enum case for DIPError.Code.internalError(_:), v1[4]);
    swift_errorRetain(v6);
    v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_10000745C();
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v14, v24, 0, v25, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000001BLL, 0x800000010012FFC0, 47);
    swift_willThrow(v28);
    swift_errorRelease(v14);
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    v29 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    v16 = v1[9];
    v17 = v1[7];
    v13(v16, enum case for SESKeystore.KeyDesignation.progenitorThirdParty(_:), v17);
    dispatch thunk of SESKeystore.clearKeyDesignation(_:)(v16);
    v18 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v16, v17);
    v31 = defaultLogger()(v18);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Done clearing key designations", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    v35 = v1[15];
    v36 = (void (*)(uint64_t, uint64_t))v1[16];
    v38 = v1[13];
    v37 = v1[14];
    v40 = v1[10];
    v39 = v1[11];
    v41 = v1[9];
    v42 = v1[6];

    v36(v38, v39);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    v29 = (uint64_t (*)(void))v1[1];
  }
  return v29();
}

uint64_t sub_10003C1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000001BLL, 0x800000010012FFC0, 47);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C330(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  *(_BYTE *)(v5 + 264) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v5 + 48) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 56) = v8;
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SESKeystore.KeyDesignation(0);
  *(_QWORD *)(v5 + 72) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 80) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 88) = swift_task_alloc(v11);
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 104) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 + 112) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 120) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 144) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 152) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 160) = swift_task_alloc(v14);
  v15 = (_QWORD *)swift_task_alloc(dword_100175624);
  *(_QWORD *)(v5 + 168) = v15;
  *v15 = v5;
  v15[1] = sub_10003C468;
  return sub_10003DB6C(0xD000000000000012, 0x800000010012D7B0, a1);
}

uint64_t sub_10003C468(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v5 = *(_QWORD *)(*v4 + 168);
  v6 = *v4;
  *(_QWORD *)(v6 + 176) = a1;
  *(_QWORD *)(v6 + 184) = a2;
  *(_BYTE *)(v6 + 265) = a3;
  *(_QWORD *)(v6 + 192) = v3;
  swift_task_dealloc(v5);
  if (v3)
    return swift_task_switch(sub_10003C590, 0, 0);
  v8 = (_QWORD *)swift_task_alloc(dword_100175624);
  *(_QWORD *)(v6 + 200) = v8;
  *v8 = v6;
  v8[1] = sub_10003C51C;
  return sub_10003DB6C(0xD00000000000001ELL, 0x800000010012D7D0, *(_QWORD *)(v6 + 16));
}

uint64_t sub_10003C51C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 200);
  *(_QWORD *)(v5 + 208) = a1;
  *(_QWORD *)(v5 + 216) = a2;
  *(_BYTE *)(v5 + 266) = a3;
  *(_QWORD *)(v5 + 224) = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10003CF6C;
  else
    v7 = sub_10003C70C;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10003C590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000003ALL, 0x800000010012FF80, 102);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C70C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;

  v2 = *(unsigned __int8 *)(v1 + 265);
  if (v2 == 2)
  {
LABEL_12:
    v34 = *(_QWORD *)(v1 + 224);
    v35 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  v3 = *(unsigned __int8 *)(v1 + 264);
  v4 = sub_100005A38(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184));
  if ((v2 & 1) != 0 && v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_BYTE *)(v1 + 265);
    v11 = *(_QWORD *)(v1 + 176);
    v10 = *(_QWORD *)(v1 + 184);
    if (v8)
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Progenitor key is already designated", v12, 2u);
      swift_slowDealloc(v12, -1, -1);

      sub_10003DE30(v11, v10, v9);
    }
    else
    {
      sub_10003DE30(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 265));

    }
    a1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 112) + 8))(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 104));
    goto LABEL_12;
  }
  v13 = defaultLogger()(v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Designating progenitor key in SE", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v18 = *(_QWORD *)(v1 + 176);
  v17 = *(_QWORD *)(v1 + 184);
  v19 = *(_QWORD *)(v1 + 152);
  v21 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 112);
  v22 = *(_QWORD *)(v1 + 96);
  v24 = *(_QWORD *)(v1 + 72);
  v23 = *(_QWORD *)(v1 + 80);
  v110 = *(_QWORD *)(v1 + 224);
  v103 = *(_QWORD *)(v1 + 24);
  v105 = *(_QWORD *)(v1 + 32);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, enum case for SESKeystore.KeyDesignation.progenitor(_:), v24);
  sub_100005A38(v18, v17);
  dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)(v18, v17, v22, v103, v105);
  if (v110)
  {
    v25 = v110;
    v27 = *(_QWORD *)(v1 + 208);
    v26 = *(_QWORD *)(v1 + 216);
    v29 = *(_QWORD *)(v1 + 176);
    v28 = *(_QWORD *)(v1 + 184);
    v111 = *(_QWORD *)(v1 + 96);
    v31 = *(_QWORD *)(v1 + 72);
    v30 = *(_QWORD *)(v1 + 80);
    v32 = *(_BYTE *)(v1 + 265);
    v33 = *(_BYTE *)(v1 + 266);
    sub_10003DE30(v29, v28, v32);
    sub_10003DE30(v29, v28, v32);
    sub_10003DE30(v27, v26, v33);
    sub_10003DE30(v29, v28, v32);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v111, v31);
    goto LABEL_22;
  }
  v78 = *(_QWORD *)(v1 + 176);
  v79 = *(_QWORD *)(v1 + 184);
  v80 = *(_BYTE *)(v1 + 265);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 80) + 8))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 72));
  sub_10003DE30(v78, v79, v80);
  v35 = sub_1000A73AC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v82 = *((_QWORD *)v35 + 2);
  v81 = *((_QWORD *)v35 + 3);
  if (v82 >= v81 >> 1)
    v35 = sub_1000A73AC((char *)(v81 > 1), v82 + 1, 1, v35);
  v83 = *(_QWORD *)(v1 + 176);
  v84 = *(_QWORD *)(v1 + 184);
  v85 = *(_BYTE *)(v1 + 265);
  *((_QWORD *)v35 + 2) = v82 + 1;
  v86 = &v35[16 * v82];
  *((_QWORD *)v86 + 4) = 0xD000000000000012;
  *((_QWORD *)v86 + 5) = 0x800000010012D7B0;
  a1 = sub_10003DE30(v83, v84, v85);
  v34 = 0;
LABEL_13:
  v36 = *(unsigned __int8 *)(v1 + 266);
  if (v36 != 2)
  {
    v37 = *(unsigned __int8 *)(v1 + 264);
    v38 = sub_100005A38(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216));
    if ((v36 & 1) != 0 && v37)
    {
      v39 = defaultLogger()(v38);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      v42 = os_log_type_enabled(v40, v41);
      v43 = *(_BYTE *)(v1 + 266);
      v45 = *(_QWORD *)(v1 + 208);
      v44 = *(_QWORD *)(v1 + 216);
      if (v42)
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Progenitor third party key is already designated", v46, 2u);
        swift_slowDealloc(v46, -1, -1);

        sub_10003DE30(v45, v44, v43);
      }
      else
      {
        sub_10003DE30(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216), *(_BYTE *)(v1 + 266));

      }
      a1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 112) + 8))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 104));
      goto LABEL_33;
    }
    v107 = v34;
    v112 = v35;
    v47 = defaultLogger()(v38);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Designating progenitor third party key in SE", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }
    v52 = *(_QWORD *)(v1 + 208);
    v51 = *(_QWORD *)(v1 + 216);
    v53 = *(_QWORD *)(v1 + 136);
    v55 = *(_QWORD *)(v1 + 104);
    v54 = *(_QWORD *)(v1 + 112);
    v56 = *(_QWORD *)(v1 + 80);
    v57 = *(_QWORD *)(v1 + 88);
    v58 = *(_QWORD *)(v1 + 72);
    v104 = *(_QWORD *)(v1 + 32);
    v102 = *(_QWORD *)(v1 + 24);

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v57, enum case for SESKeystore.KeyDesignation.progenitorThirdParty(_:), v58);
    sub_100005A38(v52, v51);
    dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)(v52, v51, v57, v102, v104);
    v25 = v107;
    v59 = *(_BYTE *)(v1 + 266);
    v61 = *(_QWORD *)(v1 + 208);
    v60 = *(_QWORD *)(v1 + 216);
    if (!v107)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 80) + 8))(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 72));
      sub_10003DE30(v61, v60, v59);
      v35 = v112;
      if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
        v35 = sub_1000A73AC(0, *((_QWORD *)v112 + 2) + 1, 1, v112);
      v88 = *((_QWORD *)v35 + 2);
      v87 = *((_QWORD *)v35 + 3);
      if (v88 >= v87 >> 1)
        v35 = sub_1000A73AC((char *)(v87 > 1), v88 + 1, 1, v35);
      v89 = *(_QWORD *)(v1 + 208);
      v90 = *(_QWORD *)(v1 + 216);
      v91 = *(_BYTE *)(v1 + 266);
      *((_QWORD *)v35 + 2) = v88 + 1;
      v92 = &v35[16 * v88];
      *((_QWORD *)v92 + 4) = 0xD00000000000001ELL;
      *((_QWORD *)v92 + 5) = 0x800000010012D7D0;
      a1 = sub_10003DE30(v89, v90, v91);
      goto LABEL_33;
    }
    v63 = *(_QWORD *)(v1 + 176);
    v62 = *(_QWORD *)(v1 + 184);
    v64 = *(_QWORD *)(v1 + 80);
    v108 = *(_QWORD *)(v1 + 88);
    v65 = *(_QWORD *)(v1 + 72);
    v66 = *(_BYTE *)(v1 + 265);
    sub_10003DE30(v61, v60, v59);
    sub_10003DE30(v61, v60, v59);
    sub_100005AB0(v61, v60);
    sub_10003DE30(v63, v62, v66);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v108, v65);
    swift_bridgeObjectRelease(v112);
LABEL_22:
    v67 = *(_QWORD *)(v1 + 152);
    v68 = *(_QWORD *)(v1 + 160);
    v69 = *(_QWORD *)(v1 + 136);
    v70 = *(_QWORD *)(v1 + 144);
    v71 = *(_QWORD *)(v1 + 128);
    v106 = *(_QWORD *)(v1 + 120);
    v109 = *(_QWORD *)(v1 + 96);
    v113 = *(_QWORD *)(v1 + 88);
    v72 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v72, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 48));
    swift_errorRetain(v25);
    v73 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v74 = type metadata accessor for DIPError(0);
    v75 = sub_10000745C();
    swift_allocError(v74, v75, 0, 0);
    v76 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v25, v72, 0, v73, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000003ALL, 0x800000010012FF80, 102);
    swift_willThrow(v76);
    swift_errorRelease(v25);
    swift_task_dealloc(v68);
    swift_task_dealloc(v67);
    swift_task_dealloc(v70);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    swift_task_dealloc(v72);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
LABEL_33:
  *(_QWORD *)(v1 + 232) = v35;
  v93 = defaultLogger()(a1);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Setting key designations in the database", v96, 2u);
    swift_slowDealloc(v96, -1, -1);
  }
  v97 = *(_QWORD *)(v1 + 128);
  v98 = *(_QWORD *)(v1 + 104);
  v99 = *(_QWORD *)(v1 + 112);

  v100 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  *(_QWORD *)(v1 + 240) = v100;
  v100(v97, v98);
  v101 = (_QWORD *)swift_task_alloc(dword_10017562C);
  *(_QWORD *)(v1 + 248) = v101;
  *v101 = v1;
  v101[1] = sub_10003D0F4;
  return sub_10003D8D0(1, (uint64_t)v35, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10003CF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10003DE30(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 265));
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000003ALL, 0x800000010012FF80, 102);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D0F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10003D2E8;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 232));
    v4 = sub_10003D160;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003D160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_BYTE *)(v1 + 266);
  v8 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v1 + 216);
  v9 = *(_BYTE *)(v1 + 265);
  v11 = *(_QWORD *)(v1 + 176);
  v10 = *(_QWORD *)(v1 + 184);
  if (v5)
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done setting key designations", v12, 2u);
    swift_slowDealloc(v12, -1, -1);

    sub_10003DE30(v8, v7, v6);
    sub_10003DE30(v11, v10, v9);
  }
  else
  {
    sub_10003DE30(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 265));
    sub_10003DE30(v8, v7, v6);

  }
  v13 = *(_QWORD *)(v1 + 152);
  v14 = *(_QWORD *)(v1 + 160);
  v16 = *(_QWORD *)(v1 + 136);
  v15 = *(_QWORD *)(v1 + 144);
  v18 = *(_QWORD *)(v1 + 120);
  v17 = *(_QWORD *)(v1 + 128);
  v19 = *(_QWORD *)(v1 + 96);
  v20 = *(_QWORD *)(v1 + 88);
  v21 = *(_QWORD *)(v1 + 64);
  (*(void (**)(uint64_t, _QWORD))(v1 + 240))(v18, *(_QWORD *)(v1 + 104));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003D2E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_BYTE *)(v0 + 266);
  sub_10003DE30(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 265));
  sub_10003DE30(v3, v2, v4);
  swift_bridgeObjectRelease(v1);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v5);
  v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_10000745C();
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v11, 0, v12, 0xD00000000000005ALL, 0x800000010012FF20, 0xD00000000000003ALL, 0x800000010012FF80, 102);
  swift_willThrow(v15);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003D494(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  os_log_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  os_log_t v39;
  uint64_t v40;
  uint8_t *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  v14 = (void *)sub_100122C60(a1, a2);
  if (!v3)
  {
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, "version");
      if ((_DWORD)v16 == 1)
      {
        v17 = v15;
        v18 = defaultLogger()(v16);
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "v1 auth acls are not supported for key designation", v21, 2u);
          swift_slowDealloc(v21, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }
      else
      {
        v42 = v15;
        v22 = objc_msgSend(v15, "progenitorKey");
        if (v22)
        {
          v23 = v22;
          v24 = objc_msgSend(v22, "keyBlob");

          if (v24)
          {
            v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v27 = v26;

            v28 = v42;
            v29 = objc_msgSend(v42, "designationStatus");

            v30 = v29 == 1;
            *(_QWORD *)a3 = v25;
            *(_QWORD *)(a3 + 8) = v27;
LABEL_15:
            *(_BYTE *)(a3 + 16) = v30;
            return;
          }
        }
        defaultLogger()(v22);
        v31 = swift_bridgeObjectRetain_n(a2, 2);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v41 = (uint8_t *)swift_slowAlloc(12, -1);
          v40 = swift_slowAlloc(32, -1);
          v45 = v40;
          v39 = v32;
          v34 = v41;
          *(_DWORD *)v41 = 136315138;
          v38 = v34 + 4;
          swift_bridgeObjectRetain(a2);
          v43 = sub_10003FA80(a1, (unint64_t)a2, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v38);
          swift_bridgeObjectRelease_n(a2, 3);
          v35 = v39;
          v36 = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, v33, "Key with identifier %s doesn't have a key blob", v41, 0xCu);
          v37 = v40;
          swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v30 = 2;
    goto LABEL_15;
  }
}

id sub_10003D7F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return sub_1000091F8();
  v7 = a3 & 1;
  swift_bridgeObjectRetain(a1);
  for (i = (_QWORD *)(v8 + 40); ; i += 2)
  {
    v10 = *(i - 1);
    v11 = (void *)*i;
    swift_bridgeObjectRetain(*i);
    v12 = (void *)sub_100122C60(v10, v11);
    swift_bridgeObjectRelease(v11);
    if (v4)
      break;
    if (v12)
    {
      objc_msgSend(v12, "setDesignationStatus:", v7);

    }
    if (!--v5)
    {
      swift_bridgeObjectRelease(a1);
      return sub_1000091F8();
    }
  }
  return (id)swift_bridgeObjectRelease(a1);
}

uint64_t sub_10003D8D0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 88) = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003D934, 0, 0);
}

uint64_t sub_10003D934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v0 + 88) & 1;
  v7 = swift_allocObject(&unk_100168AF0, 33, 7);
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v4;
  *(_BYTE *)(v7 + 32) = v6;
  v8 = swift_allocObject(&unk_100168B18, 32, 7);
  *(_QWORD *)(v0 + 64) = v8;
  *(_QWORD *)(v8 + 16) = sub_10003DE70;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_bridgeObjectRetain(v5);
  swift_retain(v4);
  v10(v1, v9, v3);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = sub_10003DA58;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, *(_QWORD *)(v0 + 48), sub_10003DE8C, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_10003DA58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v5 = *(_QWORD *)(*v1 + 40);
  v4 = *(_QWORD *)(*v1 + 48);
  v6 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 64);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_10003DB30;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 56);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_10003DAFC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10003DAFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003DBD0, 0, 0);
}

uint64_t sub_10003DBD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_allocObject(&unk_100168B40, 40, 7);
  v0[11] = v7;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  v8 = swift_allocObject(&unk_100168B68, 32, 7);
  v0[12] = v8;
  *(_QWORD *)(v8 + 16) = sub_10003DED0;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 104);
  swift_retain(v4);
  v11 = swift_bridgeObjectRetain(v6);
  v10(v2, v9, v3, v11);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[13] = v13;
  v14 = sub_100008E84(&qword_100175630);
  *v13 = v0;
  v13[1] = sub_10003DD00;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[10], sub_10003DE8C, v8, v14);
}

uint64_t sub_10003DD00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 96);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_10003DDF4;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 88);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_10003DDA4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10003DDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3);
}

uint64_t sub_10003DDF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DE30(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 != 2)
    return sub_100005AB0(a1, a2);
  return a1;
}

uint64_t sub_10003DE44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

id sub_10003DE70()
{
  uint64_t v0;

  return sub_10003D7F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_10003DE8C()
{
  uint64_t v0;

  return sub_10008BBE0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10003DEA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10003DED0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10003D494(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_10003DEEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for KeyDesignationProvider.ACLKeyInfo(uint64_t a1)
{
  return sub_100005AB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _s7idcredd22KeyDesignationProviderV10ACLKeyInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100005A38(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100005A38(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100005AB0(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for KeyDesignationProvider.ACLKeyInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005AB0(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDesignationProvider.ACLKeyInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDesignationProvider.ACLKeyInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDesignationProvider.ACLKeyInfo()
{
  return &type metadata for KeyDesignationProvider.ACLKeyInfo;
}

unint64_t sub_10003E0A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100008E84(&qword_100174898);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100008E84((uint64_t *)&unk_1001757E0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E908(v13, (uint64_t)v5, &qword_100174898);
    result = sub_1000FBA24((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_100041220(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003E244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100008E84(&qword_1001757A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100008E84(&qword_1001757A8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E908(v13, (uint64_t)v5, &qword_1001757A0);
    result = sub_1000FBB6C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for SESKeystore.KeyDesignation(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
    result = sub_100041230(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003E3FC(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175718);
}

unint64_t sub_10003E408(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175750);
}

unint64_t sub_10003E414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_100175788);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002E908(v7, (uint64_t)&v16, &qword_100175790);
    v8 = v16;
    v9 = v17;
    result = sub_1000FBC04(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_100039AD8((uint64_t)&v18, v4[7] + 32 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003E548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_1001757C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002E908(v7, (uint64_t)&v16, &qword_1001757C8);
    v8 = v16;
    v9 = v17;
    result = sub_1000FBC04(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100041220(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003E67C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_100175740);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1000FBC04(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003E78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_100175708);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_100005A38(v9, v10);
    result = sub_1000FBC04(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003E8B0(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175798);
}

unint64_t sub_10003E8BC(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175748);
}

unint64_t sub_10003E8C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_100175710);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1000FBC04(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003E9E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100008E84(&qword_100175758);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100008E84(&qword_100175760);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E908(v13, (uint64_t)v5, &qword_100175758);
    v15 = *v5;
    v16 = v5[1];
    result = sub_1000FBC04(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for PresentmentProposal(0);
    result = sub_100041230(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for PresentmentProposal);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003EB88(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175780);
}

unint64_t sub_10003EB94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100008E84(&qword_100175768);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100008E84(&qword_100175770);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E908(v13, (uint64_t)v5, &qword_100175768);
    v15 = *v5;
    v16 = v5[1];
    result = sub_1000FBC04(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for AnyCodable(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003ED34(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175778);
}

unint64_t sub_10003ED40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(&qword_100175730);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002E908(v7, (uint64_t)v16, &qword_100175738);
    result = sub_1000FBC98((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100041220(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003EE80(uint64_t a1)
{
  return sub_10003EE8C(a1, &qword_100175700);
}

unint64_t sub_10003EE8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008E84(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_1000FBC04(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t KeyProtectionOptions.aclData.getter(uint64_t a1, unint64_t a2)
{
  sub_10000B178(a1, a2);
  return a1;
}

uint64_t GenericPasswordKeychainWrapper.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

uint64_t GenericPasswordKeychainWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

void GenericPasswordStore.storeKey<A>(_:label:keyProtectionOptions:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const __CFDictionary *isa;
  OSStatus v35;
  char *v36;
  CFStringRef v37;
  __CFString *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v70 = a6;
  v71 = a7;
  v72 = a5;
  v12 = type metadata accessor for DIPError.Code(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v69 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v73 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = a3;
  sub_100040514(a2, a3);
  if (!v7)
  {
    v63 = v16;
    v64 = v15;
    v65 = a1;
    v66 = a4;
    v19 = v72;
    v67 = v13;
    v68 = v12;
    defaultLogger()(v18);
    v20 = v74;
    v21 = swift_bridgeObjectRetain_n(v74, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v75 = v25;
      *(_DWORD *)v24 = 136315138;
      v62 = v24 + 4;
      swift_bridgeObjectRetain(v20);
      v77 = sub_10003FA80(a2, v74, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v62);
      swift_bridgeObjectRelease_n(v74, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Storing keychain key with label %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v73, v64);
      v26 = a2;
      v20 = v74;
      v27 = v67;
      v28 = v68;
      v29 = v70;
      v30 = v71;
      v31 = v19;
      v32 = v66;
    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v73, v64);
      v27 = v67;
      v28 = v68;
      v29 = v70;
      v30 = v71;
      v31 = v19;
      v32 = v66;
      v26 = a2;
    }
    v33 = sub_100040A80(v65, v26, v20, v32, v31, v29, v30);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    v35 = SecItemAdd(isa, 0);

    if (v35)
    {
      v36 = v69;
      v75 = 0;
      v76 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease(v76);
      v75 = 0xD00000000000002BLL;
      v76 = 0x800000010012FFE0;
      v37 = SecCopyErrorMessageString(v35, 0);
      if (v37)
      {
        v38 = (__CFString *)v37;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v41 = v40;

      }
      else
      {
        LODWORD(v77) = v35;
        v39 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v41 = v42;
      }
      v43._countAndFlagsBits = v39;
      v43._object = v41;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v41);
      v44 = v75;
      v45 = v76;
      (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v36, enum case for DIPError.Code.failedToGeneratePayloadProtectionKey(_:), v28);
      v46 = sub_100008E84((uint64_t *)&unk_100178A30);
      v47 = sub_100008E84(&qword_100174898);
      v48 = *(_QWORD *)(v47 - 8);
      v49 = *(_QWORD *)(v48 + 72);
      v50 = *(unsigned __int8 *)(v48 + 80);
      v51 = (v50 + 32) & ~v50;
      v52 = swift_allocObject(v46, v51 + v49, v50 | 7);
      *(_OWORD *)(v52 + 16) = xmmword_10012A6D0;
      v53 = v52 + v51;
      v54 = v53 + *(int *)(v47 + 48);
      v55 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v56 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v53, v55, v56);
      *(_QWORD *)(v54 + 24) = &type metadata for Int32;
      *(_DWORD *)v54 = v35;
      v57 = sub_10003E0A8(v52);
      v58 = type metadata accessor for DIPError(0);
      v59 = sub_10000745C();
      swift_allocError(v58, v59, 0, 0);
      v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, v45, 0, v36, 0, v57, 0xD000000000000057, 0x8000000100130010, 0xD000000000000027, 0x8000000100130070, 40);
      swift_willThrow(v60);
    }
  }
}

uint64_t GenericPasswordStore.readKey<A>(label:laContext:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  unint64_t v27;
  const __CFDictionary *isa;
  OSStatus v29;
  CFTypeRef v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  CFStringRef v34;
  __CFString *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  char *v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CFTypeRef v71;
  uint64_t v72;
  unint64_t v73;
  CFTypeRef result;
  uint64_t v75;

  v7 = v6;
  v65 = a5;
  v70 = a1;
  v67 = a6;
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v66 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v14 - 8);
  v69 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v15);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v61 = a3;
    v21 = swift_slowAlloc(12, -1);
    v62 = v12;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v64 = v11;
    v24 = v23;
    v72 = v23;
    v63 = a4;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a2);
    result = (CFTypeRef)sub_10003FA80(v70, a2, &v72);
    a3 = v61;
    v7 = v6;
    a4 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&result, &v75, v22 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetching keychain key with label %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    v11 = v64;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    v12 = v62;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v69);
  v27 = _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(v70, a2, a3);
  result = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v29 = SecItemCopyMatching(isa, &result);

  v30 = result;
  if (v29 == -25300)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v67, 1, 1, a4);
    v33 = v30;
  }
  else
  {
    if (v29)
    {
      v72 = 0;
      v73 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease(v73);
      v72 = 0xD000000000000028;
      v73 = 0x80000001001300A0;
      v34 = SecCopyErrorMessageString(v29, 0);
      if (v34)
      {
        v35 = (__CFString *)v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

      }
      else
      {
        LODWORD(v71) = v29;
        v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v38 = v39;
      }
      v40 = v66;
      v41._countAndFlagsBits = v36;
      v41._object = v38;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(v38);
      v42 = v72;
      v43 = v73;
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v40, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v11);
      v44 = sub_100008E84((uint64_t *)&unk_100178A30);
      v45 = sub_100008E84(&qword_100174898);
      v46 = *(_QWORD *)(v45 - 8);
      v47 = *(_QWORD *)(v46 + 72);
      v48 = *(unsigned __int8 *)(v46 + 80);
      v49 = (v48 + 32) & ~v48;
      v50 = swift_allocObject(v44, v49 + v47, v48 | 7);
      *(_OWORD *)(v50 + 16) = xmmword_10012A6D0;
      v51 = v50 + v49;
      v52 = v51 + *(int *)(v45 + 48);
      v53 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v54 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v51, v53, v54);
      *(_QWORD *)(v52 + 24) = &type metadata for Int32;
      *(_DWORD *)v52 = v29;
      v55 = sub_10003E0A8(v50);
      v56 = type metadata accessor for DIPError(0);
      v57 = sub_10000745C();
      swift_allocError(v56, v57, 0, 0);
      v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v42, v43, 0, v40, 0, v55, 0xD000000000000057, 0x8000000100130010, 0xD000000000000019, 0x80000001001300D0, 60);
      swift_willThrow(v58);
    }
    else if (result
           && (v71 = result,
               swift_unknownObjectRetain(result),
               (swift_dynamicCast(&v72, &v71, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6) & 1) != 0))
    {
      v31 = v67;
      (*(void (**)(uint64_t *, _QWORD *, void *, uint64_t))(v65 + 16))(&v72, &type metadata for Data, &protocol witness table for Data, a4);
      if (!v7)
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v31, 0, 1, a4);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v67, 1, 1, a4);
    }
    v33 = result;
  }
  return swift_unknownObjectRelease(v33, v32);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GenericPasswordStore.deleteKey(label:)(Swift::String label)
{
  sub_100040514(label._countAndFlagsBits, (unint64_t)label._object);
}

unint64_t GenericPasswordStore.createKeyQuery<A>(key:label:keyProtectionOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100040A80(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10003FA80(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10003FB50(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000412B0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000412B0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000CE40(v12);
  return v7;
}

uint64_t sub_10003FB50(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10003FD08(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003FD08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10003FD9C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10003FF10(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10003FF10(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10003FD9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100033DCC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10003FF10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_1001754F0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10004005C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_100008E84(&qword_100175720);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v5 = a1[4];
  v4 = a1[5];
  result = sub_1000FBABC(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v4);
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain(v4);
    result = sub_1000FBABC(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_100040158(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100008E84(&qword_1001757B8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1000FBB14(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    swift_errorRetain(v5);
    if (!--v1)
      return (unint64_t)v3;
    v4 = *((_BYTE *)v8 - 8);
    v5 = *v8;
    result = sub_1000FBB14(v4);
    v8 += 2;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_100040248(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008E84(&qword_1001757B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_1000FBB14(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10004031C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008E84(&qword_100175728);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1000FBC68(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_1000403F0()
{
  os_unfair_lock_s *v0;
  uint64_t *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  if (qword_1001743C0 != -1)
    swift_once(&qword_1001743C0, sub_10001647C);
  v0 = *(os_unfair_lock_s **)(qword_100178CB0 + 16);
  v1 = (uint64_t *)&v0[4];
  v2 = v0 + 18;
  os_unfair_lock_lock(v0 + 18);
  sub_1000164DC(v1, v14);
  os_unfair_lock_unlock(v2);
  v3 = v14[0];
  v4 = v14[1];
  v5 = v14[2];
  v6 = v14[3];
  v8 = v14[4];
  v7 = v15;
  v9 = v16;
  sub_100016BAC((uint64_t)v15, v16);
  swift_release(v3);
  sub_100008FC0(v4, v5);
  sub_100008FC0(v6, v8);
  v10 = sub_100008FC0((uint64_t)v7, v9);
  if (v7)
  {
    v11 = v7(v10);
    sub_100008FC0((uint64_t)v7, v9);
    return v11;
  }
  else
  {
    v13 = type metadata accessor for GenericPasswordStore();
    return swift_allocObject(v13, 16, 7);
  }
}

void sub_100040514(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  unint64_t v25;
  const __CFDictionary *isa;
  OSStatus v27;
  CFStringRef v28;
  __CFString *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62[184];
  uint64_t v63;
  uint64_t v64;

  v5 = type metadata accessor for DIPError.Code(0);
  v57 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v56 = v5;
  if (v14)
  {
    v15 = swift_slowAlloc(12, -1);
    v55 = v2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v60 = v17;
    v54 = v7;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(a2);
    v63 = sub_10003FA80(a1, a2, &v60);
    v7 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v16 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Deleting keychain key with label %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v59);
  v18 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v18, v62);
  *(_OWORD *)(inited + 16) = xmmword_10012AB20;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v20;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v21;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 88) = v22;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 1;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 136) = v23;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = a1;
  *(_QWORD *)(inited + 152) = a2;
  swift_bridgeObjectRetain(a2);
  v24 = (id)kSecClassGenericPassword;
  v25 = sub_10003E548(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  v27 = SecItemDelete(isa);

  if (v27 != -25300 && v27)
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v61);
    v60 = 0xD000000000000029;
    v61 = 0x80000001001303A0;
    v28 = SecCopyErrorMessageString(v27, 0);
    if (v28)
    {
      v29 = (__CFString *)v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v32 = v31;

    }
    else
    {
      LODWORD(v63) = v27;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v32 = v33;
    }
    v34 = v56;
    v35._countAndFlagsBits = v30;
    v35._object = v32;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v32);
    v36 = v60;
    v37 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v7, enum case for DIPError.Code.failedToDeletePayloadProtectionKey(_:), v34);
    v38 = sub_100008E84((uint64_t *)&unk_100178A30);
    v39 = sub_100008E84(&qword_100174898);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(_QWORD *)(v40 + 72);
    v42 = *(unsigned __int8 *)(v40 + 80);
    v43 = (v42 + 32) & ~v42;
    v44 = swift_allocObject(v38, v43 + v41, v42 | 7);
    *(_OWORD *)(v44 + 16) = xmmword_10012A6D0;
    v45 = v44 + v43;
    v46 = v45 + *(int *)(v39 + 48);
    v47 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v48 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v45, v47, v48);
    *(_QWORD *)(v46 + 24) = &type metadata for Int32;
    *(_DWORD *)v46 = v27;
    v49 = sub_10003E0A8(v44);
    v50 = type metadata accessor for DIPError(0);
    v51 = sub_10000745C();
    swift_allocError(v50, v51, 0, 0);
    v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v36, v37, 0, v7, 0, v49, 0xD000000000000057, 0x8000000100130010, 0xD000000000000011, 0x80000001001303D0, 74);
    swift_willThrow(v52);
  }
}

unint64_t sub_100040A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  const __CFString *v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v49 = a5;
  v50 = a6;
  v47 = a4;
  v46 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v13, &v54);
  *(_OWORD *)(inited + 16) = xmmword_10012AB30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v15;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 88) = v17;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 104) = a3;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 136) = v18;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(inited + 184) = v19;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a7 + 24);
  v21 = (id)kSecClassGenericPassword;
  v22 = swift_bridgeObjectRetain(a3);
  v23 = v49;
  v24 = v20(v50, a7, v22);
  *(_QWORD *)(inited + 216) = &type metadata for Data;
  *(_QWORD *)(inited + 192) = v24;
  *(_QWORD *)(inited + 200) = v25;
  v26 = sub_10003E548(inited);
  if (v23 >> 60 != 11)
  {
    v27 = v12;
    v28 = v46;
    v29 = v47;
    if (v23 >> 60 == 15)
    {
      sub_1000412EC(v47, v23);
    }
    else
    {
      type metadata accessor for SecAccessControl(0);
      v31 = v30;
      sub_10000B178(v29, v23);
      sub_10000B178(v29, v23);
      v32 = v48;
      v33 = static SecAccessControlRef.fromData(_:)(v29, v23);
      if (v32)
      {
        swift_bridgeObjectRelease(v26);
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v27, enum case for DIPError.Code.internalError(_:), v28);
        swift_errorRetain(v32);
        v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v35 = type metadata accessor for DIPError(0);
        v36 = sub_10000745C();
        swift_allocError(v35, v36, 0, 0);
        v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x8000000100130340, v32, v27, 0, v34, 0xD000000000000057, 0x8000000100130010, 0xD00000000000002FLL, 0x8000000100130370, 90);
        swift_willThrow(v37);
        swift_errorRelease(v32);
        v38 = v47;
        sub_1000412EC(v47, v23);
      }
      else
      {
        v39 = (void *)v33;
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessControl);
        v42 = v41;
        v53 = v31;
        *(_QWORD *)&v52 = v39;
        sub_100041220(&v52, v51);
        v43 = v39;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v55 = v26;
        sub_10011FB90(v51, v40, v42, isUniquelyReferenced_nonNull_native);
        v26 = v55;
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(0x8000000000000000);
        v38 = v47;
        sub_1000412EC(v47, v23);

      }
      sub_1000412EC(v38, v23);
    }
  }
  return v26;
}

unint64_t _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v21[2];
  __int128 v22;
  unint64_t v23;
  _BYTE v24[224];

  v6 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v6, v24);
  *(_OWORD *)(inited + 16) = xmmword_10012AB30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v8;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 88) = v10;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = a1;
  *(_QWORD *)(inited + 104) = a2;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 136) = v11;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(_QWORD *)(inited + 184) = v12;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  v13 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain(a2);
  v14 = sub_10003E548(inited);
  if (a3)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseAuthenticationContext);
    v17 = v16;
    v23 = sub_100041274();
    *(_QWORD *)&v22 = a3;
    sub_100041220(&v22, v21);
    v18 = a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011FB90(v21, v15, v17, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v14;
}

uint64_t *destroy for KeyProtectionOptions(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_100005AB0(*result, v1);
  return result;
}

uint64_t _s7idcredd20KeyProtectionOptionsVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_100005A38(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for KeyProtectionOptions(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_100005A38(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100005AB0(v7, v8);
      return a1;
    }
    sub_100014A1C((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_100005A38(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

__n128 initializeWithTake for KeyProtectionOptions(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for KeyProtectionOptions(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100005AB0(v6, v4);
      return a1;
    }
    sub_100014A1C((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyProtectionOptions(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyProtectionOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyProtectionOptions()
{
  return &type metadata for KeyProtectionOptions;
}

uint64_t type metadata accessor for GenericPasswordStore()
{
  return objc_opt_self(_TtC7idcredd20GenericPasswordStore);
}

_OWORD *sub_100041220(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100041230(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100041274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001757D8;
  if (!qword_1001757D8)
  {
    v1 = objc_opt_self(LAContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001757D8);
  }
  return result;
}

uint64_t sub_1000412B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000412EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_10000B164(a1, a2);
  return a1;
}

char *sub_100041300(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  NSString v9;
  id v10;
  objc_class *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_super v20;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone((Class)NSXPCListener);
  v8 = v1;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v7, "initWithMachServiceName:", v9);

  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener] = v10;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd19PresentmentListener_dataContainer] = a1;
  swift_retain(a1);

  v11 = (objc_class *)type metadata accessor for PresentmentListener();
  v20.receiver = v8;
  v20.super_class = v11;
  v12 = (char *)objc_msgSendSuper2(&v20, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = defaultLogger()(objc_msgSend(v13, "resume"));
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Presentment listener is started", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  swift_release(a1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_1000414D0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Presentment listener is tearing down", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7idcredd19PresentmentListener_xpcListener], "invalidate");
  v11 = (objc_class *)type metadata accessor for PresentmentListener();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_100041654()
{
  return sub_10001A008("Presentment connection invalidated");
}

uint64_t sub_100041660()
{
  return sub_10001A008("Presentment connection interrupted");
}

uint64_t type metadata accessor for PresentmentListener()
{
  return objc_opt_self(_TtC7idcredd19PresentmentListener);
}

id sub_100041714()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Destroying PresentmentSessionProxy", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = (objc_class *)type metadata accessor for PresentmentSessionProxy();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_100041A80(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = unk_1001759AC;
  v8 = (uint64_t (*)(void))((char *)&dword_1001759A8 + dword_1001759A8);
  a3;
  v6 = (_QWORD *)swift_task_alloc(v5);
  v3[4] = v6;
  *v6 = v3;
  v6[1] = sub_100021E24;
  return v8();
}

uint64_t sub_100041AFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100041B94, 0, 0);
}

uint64_t sub_100041B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentSessionProxy interpretRequest", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 88) = v9;
  v9(v6, v7);
  sub_100043404();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  *(_QWORD *)(v1 + 96) = v19;
  if (v19)
  {
    v20 = dword_100178174;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 104) = v21;
    *v21 = v1;
    v21[1] = sub_100041E68;
    return sub_1000EBB88(*(_QWORD *)(v1 + 16));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x80000001001306F0, 0, v23, 0, v24, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000014, 0x8000000100130760, 124);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 80);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 88);
    v12 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_10000D120, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100041E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100041F3C;
  }
  else
  {
    *(_QWORD *)(v4 + 120) = a1;
    v6 = sub_100041EDC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100041EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100041F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_10000D120, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042170(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_1001758DC;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1000421EC;
  return sub_100041AFC((uint64_t)v7);
}

uint64_t sub_1000421EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v7 = *(void **)(*v2 + 24);
  v9 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_10000DA34(0, &qword_100175990, DCPresentmentProposal_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000422D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100042334, 0, 0);
}

uint64_t sub_100042334(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentSessionProxy buildResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[5];
  v6 = v1[6];
  v8 = v1[4];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_1001758EC);
  v1[7] = (uint64_t)v9;
  *v9 = v1;
  v9[1] = (uint64_t *)sub_100042418;
  return sub_1000427A4(v1[2]);
}

uint64_t sub_100042418(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 48));
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 64) = a1;
    return swift_task_switch(sub_10004249C, 0, 0);
  }
}

uint64_t sub_10004249C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = objc_msgSend(v1, "responseData");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_100042650(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_1001758E4;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1000426CC;
  return sub_1000422D4((uint64_t)v7);
}

uint64_t sub_1000426CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 40);
  v10 = *(void **)(*v3 + 16);
  v9 = *(void **)(*v3 + 24);
  v11 = *v3;
  swift_task_dealloc(v8);

  if (v4)
  {
    v12 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v14 = (void *)v12;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100005AB0(a1, a2);
    v12 = 0;
    v14 = isa;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_1000427A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_10004283C, 0, 0);
}

uint64_t sub_10004283C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentSessionProxy buildCredentialResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 88) = v9;
  v9(v6, v7);
  sub_100043404();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  *(_QWORD *)(v1 + 96) = v19;
  if (v19)
  {
    v20 = dword_10017817C;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 104) = v21;
    *v21 = v1;
    v21[1] = sub_100042B10;
    return sub_1000EC410(*(_QWORD *)(v1 + 16));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x80000001001306F0, 0, v23, 0, v24, 0xD000000000000059, 0x80000001001305D0, 0xD00000000000001DLL, 0x8000000100130740, 149);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 80);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 88);
    v12 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_10000D120, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100042B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10004481C;
  }
  else
  {
    *(_QWORD *)(v4 + 120) = a1;
    v6 = sub_100044810;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100042CB4(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_1001758EC;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_10001FF74;
  return sub_1000427A4((uint64_t)v7);
}

uint64_t sub_100042D30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100042DC8, 0, 0);
}

uint64_t sub_100042DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentSessionProxy buildResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 88) = v9;
  v9(v6, v7);
  sub_100043404();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  *(_QWORD *)(v1 + 96) = v19;
  if (v19)
  {
    v20 = dword_100178184;
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 104) = v21;
    *v21 = v1;
    v21[1] = sub_10004309C;
    return sub_1000ECA78(*(_QWORD *)(v1 + 16));
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 32));
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x80000001001306F0, 0, v23, 0, v24, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000019, 0x8000000100130720, 166);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 80);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 88);
    v12 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 48);
    v13 = *(_QWORD *)(v1 + 56);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_10000D120, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10004309C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 104);
  *(_QWORD *)(*v3 + 112) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100041F3C;
  }
  else
  {
    *(_QWORD *)(v6 + 120) = a2;
    *(_QWORD *)(v6 + 128) = a1;
    v8 = sub_100043114;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100043114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

uint64_t sub_1000432A0(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_1001758F4;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_100043314;
  return sub_100042D30(a1);
}

uint64_t sub_100043314(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 32);
  v9 = *(void **)(*v3 + 16);
  v10 = *v3;
  swift_task_dealloc(v8);

  if (v4)
  {
    v11 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v13 = (void *)v11;
  }
  else if (a2 >> 60 == 15)
  {
    v11 = 0;
    isa = 0;
    v13 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

void sub_100043404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::OpaquePointer v7;
  uint64_t Strong;
  void *v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions;
  v7._rawValue = *(void **)(v0 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions);
  if (!*((_QWORD *)v7._rawValue + 2))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000011, 0x80000001001306D0, 0, v5, 0, v22, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000013, 0x8000000100130630, 187);
LABEL_11:
    swift_willThrow(v25);
    return;
  }
  if ((sub_1000D9C34(42, 0xE100000000000000, *(_QWORD **)(v0 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions)) & 1) != 0&& (byte_100178C90 & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    swift_allocError(v30, v31, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x80000001001306A0, 0, v5, 0, v29, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000013, 0x8000000100130630, 192);
    goto LABEL_11;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_connection);
  if (!Strong)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    swift_allocError(v27, v28, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x800000010012ED80, 0, v5, 0, v26, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000013, 0x8000000100130630, 197);
    goto LABEL_11;
  }
  v9 = (void *)Strong;
  swift_bridgeObjectRetain(v7._rawValue);
  v10._countAndFlagsBits = 0xD000000000000023;
  v10._object = (void *)0x8000000100130650;
  v11 = NSXPCConnection.hasArrayEntitlement(name:values:)(v10, v7);
  swift_bridgeObjectRelease(v7._rawValue);
  if (!v11)
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v33);
    v32 = 0xD00000000000001FLL;
    v33 = 0x8000000100130680;
    v12 = *(_QWORD *)(v1 + v6);
    swift_bridgeObjectRetain(v12);
    v14._countAndFlagsBits = Array.description.getter(v13, &type metadata for String);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(object);
    v16 = v32;
    v17 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_10000745C();
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v16, v17, 0, v5, 0, v18, 0xD000000000000059, 0x80000001001305D0, 0xD000000000000013, 0x8000000100130630, 200);
    swift_willThrow(v21);
  }

}

uint64_t type metadata accessor for PresentmentSessionProxy()
{
  return objc_opt_self(_TtC7idcredd23PresentmentSessionProxy);
}

uint64_t sub_10004387C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100175914);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100175910 + dword_100175910))(v2, v3, v4);
}

uint64_t sub_1000438F4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100175934);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100175930 + dword_100175930))(v2, v3, v4);
}

uint64_t sub_10004396C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100175954);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000935C;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100175950 + dword_100175950))(v2, v3, v4);
}

uint64_t sub_1000439E4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100175974);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100175970 + dword_100175970))(v2, v3, v4);
}

uint64_t sub_100043A5C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100043A88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10017599C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_100175998 + dword_100175998))(v2, v3, v4);
}

id sub_100043AFC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint8_t *v16;
  uint8_t *v17;
  id result;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;

  v3 = v2;
  v22 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v3[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_connection];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_connection], 0);
  v10 = OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow] = 0;
  v11 = v3;
  v12 = defaultLogger()(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    v21 = a2;
    v16 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Creating PresentmentSessionProxy", v15, 2u);
    v17 = v16;
    a2 = v21;
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = (id)os_transaction_create("PresentmentSessionProxy");
  if (result)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign(v9, v22);
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions] = _swiftEmptyArrayStorage;
    v19 = *(_QWORD *)&v3[v10];
    *(_QWORD *)&v3[v10] = 0;
    swift_release(v19);
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_dataContainer] = a2;
    swift_retain(a2);

    v20 = (objc_class *)type metadata accessor for PresentmentSessionProxy();
    v23.receiver = v11;
    v23.super_class = v20;
    return objc_msgSendSuper2(&v23, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100043CB4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *Strong;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;
  _BYTE v28[8];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_unknownObjectWeakInit(v28, a1);
  defaultLogger()(v8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 67109120;
    LODWORD(aBlock) = -[NSObject processIdentifier](v9, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v12 + 4);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Presentment listener connection received from %d", v12, 8u);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___DCPresentmentXPCProtocol);
  -[NSObject setExportedInterface:](v9, "setExportedInterface:", v13);

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v28);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7idcredd19PresentmentListener_dataContainer);
  v16 = objc_allocWithZone((Class)type metadata accessor for PresentmentSessionProxy());
  swift_retain(v15);
  v17 = sub_100043AFC((uint64_t)Strong, v15);

  swift_release(v15);
  -[NSObject setExportedObject:](v9, "setExportedObject:", v17);

  v26 = sub_100041654;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_100168ED8;
  v18 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v9, "setInvalidationHandler:", v18);
  _Block_release(v18);
  v26 = sub_100041660;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_100168F00;
  v19 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v9, "setInterruptionHandler:", v19);
  _Block_release(v19);
  -[NSObject resume](v9, "resume");
  swift_unknownObjectWeakDestroy(v28);
  return 1;
}

uint64_t sub_100043F90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(22, -1);
    v54 = a3;
    v20 = v19;
    v51 = swift_slowAlloc(64, -1);
    v57 = v51;
    *(_DWORD *)v20 = 136446466;
    v53 = v10;
    swift_bridgeObjectRetain(a1);
    v22 = Array.description.getter(v21, &type metadata for String);
    v52 = v11;
    v23 = v22;
    v55 = a5;
    v25 = v24;
    swift_bridgeObjectRelease(a1);
    v56 = sub_10003FA80(v23, v25, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v20 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v20 + 12) = 2082;
    v50 = v20 + 14;
    v26 = (id)DCPresentmentTypeToString(a2);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v49 = v18;
    v28 = v27;
    v29 = a4;
    v30 = a2;
    v32 = v31;

    a5 = v55;
    v56 = sub_10003FA80(v28, v32, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v50);
    v33 = v32;
    a2 = v30;
    a4 = v29;
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v49, "PresentmentSessionProxy configure with partitions %{public}s, presentment type %{public}s", (uint8_t *)v20, 0x16u);
    v34 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v35 = v20;
    a3 = v54;
    swift_slowDealloc(v35, -1, -1);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v53);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v36 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_partitions) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v36);
  v37 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_dataContainer);
  v38 = type metadata accessor for PayloadProcessorBuilder();
  v39 = swift_allocObject(v38, 16, 7);
  v40 = type metadata accessor for SESKeystore(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = a3;
  swift_retain(v37);
  swift_bridgeObjectRetain(a1);
  v43 = SESKeystore.init()(v42);
  v44 = type metadata accessor for PresentmentFlow(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  v45 = sub_1000ED234(a1, a2, (uint64_t *)a3, v37, 0, v39, v43);

  swift_release(v37);
  v46 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow) = v45;
  swift_release(v46);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a5 + 16))(a5, 0);
}

uint64_t sub_1000442FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100044394, 0, 0);
}

uint64_t sub_100044394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentSessionProxy generateTransportKey", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 80) = v9;
  v9(v6, v7);
  sub_100043404();
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7idcredd23PresentmentSessionProxy_flow);
  *(_QWORD *)(v1 + 88) = v19;
  if (v19)
  {
    v20 = unk_1001782EC;
    v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001782E8 + dword_1001782E8);
    swift_retain(v19);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v1 + 96) = v21;
    *v21 = v1;
    v21[1] = sub_10004467C;
    return v30(0, 0xF000000000000000);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 104))(v23, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 24));
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_10000745C();
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x80000001001306F0, 0, v23, 0, v24, 0xD000000000000059, 0x80000001001305D0, 0xD00000000000001ALL, 0x80000001001307B0, 107);
    v29 = swift_willThrow(v28);
    v11 = *(_QWORD *)(v1 + 72);
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 48);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v27, 0, 0xE000000000000000, v12);
    v10(v12, v13);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
    v17 = v16;
    static NSError.mapFromError(_:domain:mapper:)(v27, v15, v16, sub_10000D120, 0);
    v18 = swift_bridgeObjectRelease(v17);
    swift_willThrow(v18);
    swift_errorRelease(v27);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10004467C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 96);
  *(_QWORD *)(*v3 + 104) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000446F4;
  }
  else
  {
    *(_QWORD *)(v6 + 112) = a2;
    *(_QWORD *)(v6 + 120) = a1;
    v8 = sub_10001D57C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000446F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCPresentmentErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_10000D120, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000447F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100044808(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100044820(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58[8];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v5 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchPrearmTrustKey.getter(v11);
  DIPSignpost.init(_:)(v9);
  v14 = type metadata accessor for StoredTrustKey(0);
  v15 = (void *)static StoredTrustKey.fetchRequest()();
  objc_msgSend(v15, "setFetchLimit:", 1);
  sub_100039BA4();
  v16 = sub_100008E84(&qword_100174878);
  v17 = swift_allocObject(v16, 72, 7);
  v51 = xmmword_10012A6D0;
  *(_OWORD *)(v17 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10000EA3C();
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v18 = (void *)NSPredicate.init(format:_:)(0x49676E6972696170, 0xEE004025203D2044, v17);
  objc_msgSend(v15, "setPredicate:", v18);

  result = NSManagedObjectContext.fetch<A>(_:)(v15, v14);
  if (v2)
  {

    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v20._countAndFlagsBits = 0xD00000000000002ELL;
    v20._object = (void *)0x80000001001307F0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 8250;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v61 = v2;
    v23 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v61, &v59, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = v60;
    v50 = v59;
    v25 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.coreDataError(_:), v53);
    v26 = sub_100008E84((uint64_t *)&unk_100178A30);
    v27 = sub_100008E84(&qword_100174898);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v32 + 16) = v51;
    v33 = (uint64_t *)(v32 + v31 + *(int *)(v27 + 48));
    v34 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v35 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32 + v31, v34, v35);
    swift_getErrorValue(v2, v58, v57);
    v36 = v57[1];
    v37 = v57[2];
    swift_errorRetain(v2);
    v38 = dispatch thunk of Error._code.getter(v36, v37);
    v33[3] = (uint64_t)&type metadata for Int;
    *v33 = v38;
    v39 = sub_10003E0A8(v32);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_10000745C();
    swift_allocError(v40, v41, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v24, v2, v25, 0, v39, 0xD000000000000068, 0x8000000100130820, 0xD000000000000023, 0x8000000100130890, 33);
    swift_willThrow(v42);
    swift_errorRelease(v2);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v56);
    return v40;
  }
  v43 = result;
  v45 = v55;
  v44 = v56;
  if (!((unint64_t)result >> 62))
  {
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease(v43);

    v40 = 0;
    goto LABEL_14;
  }
  if (result < 0)
    v47 = result;
  else
    v47 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  result = swift_bridgeObjectRelease(v43);
  if (!v48)
    goto LABEL_13;
LABEL_5:
  if ((v43 & 0xC000000000000001) != 0)
  {
    v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v46 = *(id *)(v43 + 32);
LABEL_8:
    v40 = (uint64_t)v46;
    swift_bridgeObjectRelease(v43);

LABEL_14:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v44);
    return v40;
  }
  __break(1u);
  return result;
}

uint64_t sub_100044D18(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  char v48[8];
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost(0);
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseDeletePrearmTrustKey.getter(v14);
  DIPSignpost.init(_:)(v12);
  v17 = sub_100044820(a1, a2);
  if (v3)
  {
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v18._object = (void *)0x80000001001308C0;
    v18._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v18);
    v51 = v3;
    v19 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v51, &v49, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = v50;
    v44 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.coreDataError(_:), v6);
    v21 = sub_100008E84((uint64_t *)&unk_100178A30);
    v22 = sub_100008E84(&qword_100174898);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 72);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject(v21, v26 + v24, v25 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_10012A6D0;
    v28 = v27 + v26;
    v29 = (uint64_t *)(v27 + v26 + *(int *)(v22 + 48));
    v30 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v31 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v28, v30, v31);
    swift_getErrorValue(v3, v48, v47);
    v32 = v47[1];
    v33 = v47[2];
    swift_errorRetain(v3);
    v34 = dispatch thunk of Error._code.getter(v32, v33);
    v29[3] = (uint64_t)&type metadata for Int;
    *v29 = v34;
    v35 = sub_10003E0A8(v27);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_10000745C();
    swift_allocError(v36, v37, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, v20, v3, v9, 0, v35, 0xD000000000000068, 0x8000000100130820, 0xD000000000000024, 0x80000001001308F0, 48);
    swift_willThrow(v38);
    swift_errorRelease(v3);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v16, v46);
  }
  else
  {
    v40 = (void *)v17;
    v42 = v45;
    v41 = v46;
    if (v17)
    {
      objc_msgSend(*(id *)(v2 + 16), "deleteObject:", v17);

    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v16, v41);
  }
}

uint64_t sub_1000450A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v33;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v33 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v33 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v33 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  if ((*(_BYTE *)(v0 + 160) & 1) == 0)
  {
    v23 = *(_QWORD *)(v0 + 120);
    if (v23 == 3)
    {
      v28 = defaultLogger()(v15);
      v19 = Logger.logObject.getter(v28);
      v29 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v19, v29))
      {
        v22 = 3;
        v17 = v11;
        goto LABEL_19;
      }
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v29, "Presentment session is using ACWG session encryption", v21, 2u);
      v22 = 3;
      v17 = v11;
    }
    else if (v23 == 2)
    {
      v30 = defaultLogger()(v15);
      v19 = Logger.logObject.getter(v30);
      v31 = static os_log_type_t.debug.getter();
      v22 = 2;
      if (!os_log_type_enabled(v19, v31))
      {
        v17 = v14;
        goto LABEL_19;
      }
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v31, "Presentment session is using UA session encryption", v21, 2u);
      v17 = v14;
    }
    else if (v23 == 1 && ((byte_100178C90 & 1) != 0 || *(_QWORD *)(v0 + 112) == 1))
    {
      v24 = defaultLogger()(v15);
      v19 = Logger.logObject.getter(v24);
      v25 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v19, v25))
      {
        v22 = 1;
        goto LABEL_19;
      }
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v25, "Presentment session has disabled session encryption", v21, 2u);
      v22 = 1;
    }
    else
    {
      v26 = defaultLogger()(v15);
      v19 = Logger.logObject.getter(v26);
      v27 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v19, v27))
      {
        v22 = 0;
        v17 = v8;
        goto LABEL_19;
      }
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v27, "Presentment session is using default session encryption", v21, 2u);
      v22 = 0;
      v17 = v8;
    }
    goto LABEL_18;
  }
  v18 = defaultLogger()(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "No presentment options set; using default session encryption",
      v21,
      2u);
    v22 = 0;
    v17 = v5;
LABEL_18:
    swift_slowDealloc(v21, -1, -1);
    goto LABEL_19;
  }
  v22 = 0;
  v17 = v5;
LABEL_19:

  (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v1);
  return v22;
}

BOOL sub_10004544C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 4)
    return (a1 & 0xF) == 0;
  v8 = defaultLogger()(v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown session encryption mode %lu", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 1;
}

uint64_t sub_100045584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned int *v48;
  unsigned int *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD v165[2];
  _QWORD v166[2];
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;

  v6 = v5;
  v150 = a4;
  v155 = a3;
  v154 = a2;
  v157 = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  v158 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v159 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_100175A68);
  __chkstk_darwin(v10);
  v140 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for COSEKey(0);
  v138 = *(_QWORD *)(v139 - 8);
  v12 = __chkstk_darwin(v139);
  v136 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v137 = (char *)&v134 - v14;
  v15 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v15);
  v156 = (char *)&v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DIPSignpost(0);
  v153 = *(_QWORD *)(v160 - 8);
  v17 = __chkstk_darwin(v160);
  v152 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v134 - v20;
  __chkstk_darwin(v19);
  v151 = (char *)&v134 - v22;
  v149 = type metadata accessor for ISO18013SessionCryptarch.Curve(0);
  v147 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v24 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for ISO18013SessionCryptarch.Variant(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v148 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for ISO18013SessionCryptarch.Role(0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v146 = (char *)&v134 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v162 - 8);
  v28 = __chkstk_darwin(v162);
  v141 = (char *)&v134 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v134 - v31;
  v33 = defaultLogger()(v30);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    v135 = v24;
    v37 = v6;
    v38 = a5;
    v39 = v21;
    v40 = v8;
    v41 = v36;
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "PresentmentSessionCryptor decryptReaderRequest", v36, 2u);
    v42 = v41;
    v8 = v40;
    v21 = v39;
    a5 = v38;
    v6 = v37;
    v24 = v135;
    swift_slowDealloc(v42, -1, -1);
  }

  v43 = *(void (**)(char *, uint64_t))(v27 + 8);
  v44 = v162;
  v43(v32, v162);
  v45 = sub_1000450A8();
  v46 = v45;
  if ((unint64_t)(v45 - 2) < 2)
  {
    v47 = v146;
    (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v146, enum case for ISO18013SessionCryptarch.Role.device(_:), v143);
    v48 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.UA(_:);
    v49 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.ACWG(_:);
    if (v46 != 3)
      v49 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.standard(_:);
    if (v46 != 2)
      v48 = v49;
    v50 = v148;
    (*(void (**)(char *, _QWORD, uint64_t))(v144 + 104))(v148, *v48, v145);
    (*(void (**)(char *, _QWORD, uint64_t))(v147 + 104))(v24, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v149);
    v51 = type metadata accessor for ISO18013SessionCryptarch(0);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v52 = ISO18013SessionCryptarch.init(role:variant:curve:)(v47, v50, v24);
    v53 = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = v52;
    swift_retain_n(v52, 2);
    v54 = swift_release(v53);
    v55 = v156;
    static IDCSSignposts.presentmentDeriveSessionKey.getter(v54);
    v56 = v151;
    DIPSignpost.init(_:)(v55);
    v57 = v161;
    ISO18013SessionCryptarch.deriveSessionKeys(sessionTranscript:ikm:)(v154, v155, v150, a5);
    v58 = v152;
    if (v57)
    {
      swift_release(v52);
      v59 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v8);
      swift_errorRetain(v57);
      v60 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v61 = type metadata accessor for DIPError(0);
      v62 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v61, v62, 0, 0);
      v63 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100130B10, v57, v59, 0, v60, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, 106);
      swift_willThrow(v63);
      swift_release(v52);
      swift_errorRelease(v57);
      v64 = *(void (**)(char *, uint64_t))(v153 + 8);
      v65 = v56;
      v66 = v160;
LABEL_10:
      v64(v65, v66);
      return v60;
    }
    v162 = v8;
    swift_release(v52);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v82 = *(uint64_t (**)(char *, uint64_t))(v153 + 8);
    v83 = v82(v56, v160);
LABEL_19:
    static IDCSSignposts.presentmentDecryptReaderRequest.getter(v83);
    v84 = DIPSignpost.init(_:)(v55);
    v85 = ISO18013SessionEstablishment.data.getter(v84);
    v87 = v86;
    v60 = ISO18013SessionCryptarch.decrypt(data:)();
    sub_100005AB0(v85, v87);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    swift_release(v52);
    v82(v58, v160);
    return v60;
  }
  if (v45 != 1)
  {
    v73 = v21;
    v52 = *(_QWORD *)(v6 + 168);
    if (!v52)
    {
      v88 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v8);
      v60 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v89 = type metadata accessor for DIPError(0);
      v90 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v89, v90, 0, 0);
      v91 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100130970, 0, v88, 0, v60, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, 115);
      swift_willThrow(v91);
      return v60;
    }
    v162 = v8;
    v74 = swift_retain_n(v52, 2);
    v75 = (uint64_t)v140;
    ISO18013SessionEstablishment.readerKey.getter(v74);
    v76 = sub_100008E84(&qword_100175A70);
    v77 = *(_QWORD *)(v76 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76) == 1)
    {
      sub_1000150E8(v75, &qword_100175A68);
      v78 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v162);
      v60 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v79 = type metadata accessor for DIPError(0);
      v80 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v79, v80, 0, 0);
      v81 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100130A50, 0, v78, 0, v60, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, 121);
      swift_willThrow(v81);
      swift_release_n(v52, 2);
      return v60;
    }
    v92 = v136;
    CBOREncodedCBOR.value.getter(v76);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
    v93 = v138;
    v94 = v137;
    v95 = (*(uint64_t (**)(char *, char *, uint64_t))(v138 + 32))(v137, v92, v139);
    if (COSEKey.type.getter(v95) == 2)
    {
      COSEKey.ec2.getter(v165);
      sub_100046DDC((uint64_t)v165, (uint64_t)v166);
      v96 = v167;
      if (v167 >> 60 != 15)
      {
        v98 = v166[0];
        v97 = v166[1];
        v99 = v168;
        v100 = v169;
        sub_100005AB0(v170, v171);
        sub_100005AB0(v99, v100);
        v101 = sub_100005AB0(v97, v96);
        if (v98 == 1)
        {
          v102 = COSEKey.publicKeyData.getter(v101);
          if (v103 >> 60 == 15)
          {
            v104 = v159;
            (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v162);
            v60 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v105 = type metadata accessor for DIPError(0);
            v106 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v105, v106, 0, 0);
            v107 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x8000000100130AB0, 0, v104, 0, v60, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, 135);
            swift_willThrow(v107);
            swift_release_n(v52, 2);
            v64 = *(void (**)(char *, uint64_t))(v93 + 8);
          }
          else
          {
            v125 = v102;
            v60 = v103;
            v126 = v161;
            v127 = ISO18013SessionCryptarch.setRemoteKey(_:)();
            if (!v126)
            {
              v55 = v156;
              static IDCSSignposts.presentmentDeriveSessionKey.getter(v127);
              DIPSignpost.init(_:)(v55);
              ISO18013SessionCryptarch.deriveSessionKeys(sessionTranscript:ikm:)(v154, v155, 0, 0xF000000000000000);
              DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
              sub_10000B164(v125, v60);
              swift_release(v52);
              v133 = v94;
              v82 = *(uint64_t (**)(char *, uint64_t))(v153 + 8);
              v82(v73, v160);
              v83 = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v133, v139);
              v58 = v152;
              goto LABEL_19;
            }
            v128 = v159;
            (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v162);
            swift_errorRetain(v126);
            v129 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v130 = type metadata accessor for DIPError(0);
            v131 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v130, v131, 0, 0);
            v132 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100130AF0, v126, v128, 0, v129, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, 141);
            swift_willThrow(v132);
            sub_10000B164(v125, v60);
            swift_release(v52);
            swift_errorRelease(v126);
            swift_release(v52);
            v64 = *(void (**)(char *, uint64_t))(v138 + 8);
          }
          v65 = v94;
LABEL_30:
          v66 = v139;
          goto LABEL_10;
        }
      }
      v163 = 0;
      v164 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v120._countAndFlagsBits = 0xD00000000000001DLL;
      v120._object = (void *)0x8000000100130A90;
      String.append(_:)(v120);
      v172 = COSEKey.algorithm.getter();
      type metadata accessor for COSEAlgorithm(0);
      _print_unlocked<A, B>(_:_:)(&v172, &v163, v121, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v60 = v163;
      v112 = v164;
      v113 = v94;
      v114 = v93;
      v115 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v162);
      v116 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v122 = type metadata accessor for DIPError(0);
      v123 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v122, v123, 0, 0);
      v119 = 130;
    }
    else
    {
      v163 = 0;
      v164 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v109._countAndFlagsBits = 0xD000000000000018;
      v109._object = (void *)0x8000000100130A70;
      String.append(_:)(v109);
      v172 = COSEKey.type.getter(v110);
      type metadata accessor for COSEKeyKTYType(0);
      _print_unlocked<A, B>(_:_:)(&v172, &v163, v111, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v60 = v163;
      v112 = v164;
      v113 = v94;
      v114 = v93;
      v115 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v159, enum case for DIPError.Code.idcsPresentmentSessionKeyDerivationFailed(_:), v162);
      v116 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v117 = type metadata accessor for DIPError(0);
      v118 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v117, v118, 0, 0);
      v119 = 125;
    }
    v124 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v60, v112, 0, v115, 0, v116, 0xD000000000000061, 0x8000000100130990, 0xD000000000000045, 0x8000000100130A00, v119);
    swift_willThrow(v124);
    swift_release_n(v52, 2);
    v64 = *(void (**)(char *, uint64_t))(v114 + 8);
    v65 = v113;
    goto LABEL_30;
  }
  v67 = v141;
  v68 = defaultLogger()(1);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Session encryption is disabled; no need to decrypt reader request",
      v71,
      2u);
    swift_slowDealloc(v71, -1, -1);
  }

  v72 = ((uint64_t (*)(char *, uint64_t))v43)(v67, v44);
  return ISO18013SessionEstablishment.data.getter(v72);
}

NSObject *sub_10004686C(NSObject *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v49[4];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;

  v58 = a2;
  v3 = v2;
  v60 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  __chkstk_darwin(v9);
  v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v51 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v50 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v50 - v19;
  v21 = defaultLogger()(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "PresentmentSessionCryptor encryptResponsePayload", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v20, v11);
  if (sub_1000450A8() == 1)
  {
    v26 = defaultLogger()(1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    v29 = os_log_type_enabled(v27, v28);
    v22 = v60;
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Session encryption is disabled; no need to encrypt response payload",
        v30,
        2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v25(v17, v11);
    sub_100005A38((uint64_t)v22, v58);
  }
  else
  {
    static IDCSSignposts.presentmentEncryptResponse.getter();
    v31 = v57;
    DIPSignpost.init(_:)(v8);
    v32 = *(_QWORD *)(v3 + 168);
    v33 = v60;
    if (v32)
    {
      swift_retain(*(_QWORD *)(v3 + 168));
      v34 = v33;
      v35 = v59;
      v36 = ISO18013SessionCryptarch.encrypt(data:)(v34, v58);
      if (!v35)
      {
        v22 = v36;
        v45 = v37;
        v46 = v51;
        v47 = defaultLogger()(v36);
        __chkstk_darwin(v47);
        v49[2] = v22;
        v49[3] = v45;
        Logger.sensitive(_:)(sub_100046E24, v49);
        swift_release(v32);
        v25(v46, v11);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v56);
        return v22;
      }
      swift_release(v32);
    }
    else
    {
      v38 = v54;
      (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v53);
      v39 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v40 = type metadata accessor for DIPError(0);
      v41 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v40, v41, 0, 0);
      v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100130B60, 0, v38, 0, v39, 0xD000000000000061, 0x8000000100130990, 0xD00000000000001ALL, 0x8000000100130B90, 184);
      swift_willThrow(v42);
    }
    v44 = v55;
    v43 = v56;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v43);
  }
  return v22;
}

unint64_t sub_100046CFC()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000014;
}

uint64_t sub_100046D98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PresentmentSessionCryptor()
{
  return objc_opt_self(_TtC7idcredd25PresentmentSessionCryptor);
}

uint64_t sub_100046DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100175A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046E24()
{
  return sub_100046CFC();
}

unint64_t sub_100046E2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, _QWORD, uint64_t);
  unsigned int *v55;
  unsigned int *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;

  v3 = v2;
  v115 = a2;
  v107 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v116 = *(_QWORD *)(v4 - 8);
  v117 = v4;
  __chkstk_darwin(v4);
  v118 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100175A80);
  __chkstk_darwin(v6);
  v96 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v8);
  v99 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for COSEKey(0);
  v100 = *(_QWORD *)(v10 - 8);
  v101 = v10;
  __chkstk_darwin(v10);
  v97 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ISO18013SessionCryptarch.Curve(0);
  v113 = *(_QWORD *)(v12 - 8);
  v114 = v12;
  v13 = __chkstk_darwin(v12);
  v106 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v105 = (char *)&v95 - v15;
  v16 = type metadata accessor for ISO18013SessionCryptarch.Variant(0);
  v111 = *(_QWORD *)(v16 - 8);
  v112 = v16;
  v17 = __chkstk_darwin(v16);
  v103 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v104 = (char *)&v95 - v19;
  v20 = type metadata accessor for ISO18013SessionCryptarch.Role(0);
  v108 = *(_QWORD *)(v20 - 8);
  v109 = v20;
  v21 = __chkstk_darwin(v20);
  v102 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v110 = (char *)&v95 - v23;
  v24 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for DIPSignpost(0);
  v27 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v29 = (char *)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = defaultLogger()(v32);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    v98 = v27;
    v39 = v38;
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "PresentmentSessionCryptor generateTransportKey", v38, 2u);
    v40 = v39;
    v3 = v2;
    v27 = v98;
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v34, v30);
  static IDCSSignposts.presentmentGenerateTransportKey.getter(v41);
  DIPSignpost.init(_:)(v26);
  v42 = v119;
  v43 = sub_1000450A8();
  if (!sub_10004544C(v43))
  {
    v50 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v118, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v117);
    v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v51 = type metadata accessor for DIPError(0);
    v52 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v51, v52, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x8000000100130BD0, 0, v50, 0, v46, 0xD000000000000061, 0x8000000100130990, 0xD000000000000033, 0x8000000100130C10, 48);
    goto LABEL_7;
  }
  v44 = v42;
  if (*(_QWORD *)(v42 + 168))
  {
    v45 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v118, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v117);
    v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v47 = type metadata accessor for DIPError(0);
    v48 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v47, v48, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100130C50, 0, v45, 0, v46, 0xD000000000000061, 0x8000000100130990, 0xD000000000000033, 0x8000000100130C10, 53);
LABEL_7:
    swift_willThrow(v49);
    goto LABEL_8;
  }
  v54 = *(void (**)(char *, _QWORD, uint64_t))(v108 + 104);
  v55 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.standard(_:);
  if (v43 == 3)
    v55 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.ACWG(_:);
  if (v43 == 2)
    v56 = (unsigned int *)&enum case for ISO18013SessionCryptarch.Variant.UA(_:);
  else
    v56 = v55;
  v57 = v115;
  if (v115 >> 60 == 15)
  {
    v58 = v102;
    v54(v102, enum case for ISO18013SessionCryptarch.Role.device(_:), v109);
    v59 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v103, *v56, v112);
    v60 = v106;
    (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v106, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v114);
    v61 = type metadata accessor for ISO18013SessionCryptarch(0);
    swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
    v62 = ISO18013SessionCryptarch.init(role:variant:curve:)(v58, v59, v60);
  }
  else
  {
    v54(v110, enum case for ISO18013SessionCryptarch.Role.device(_:), v109);
    v63 = v104;
    (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v104, *v56, v112);
    v64 = v105;
    (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v105, enum case for ISO18013SessionCryptarch.Curve.P256(_:), v114);
    v65 = type metadata accessor for ISO18013SessionCryptarch(0);
    swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    v46 = v107;
    sub_100005A38(v107, v57);
    v62 = ISO18013SessionCryptarch.init(role:curve:variant:localKey:)(v110, v64, v63, v46, v57);
    if (v3)
      goto LABEL_8;
  }
  v66 = v62;
  v67 = ISO18013SessionCryptarch.publicKey.getter();
  if (v68 >> 60 == 15)
  {
    v69 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v118, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v117);
    v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v70, v71, 0, 0);
    v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100130C70, 0, v69, 0, v46, 0xD000000000000061, 0x8000000100130990, 0xD000000000000033, 0x8000000100130C10, 67);
    swift_willThrow(v72);
    swift_release(v66);
  }
  else
  {
    v73 = v67;
    v74 = v68;
    v75 = *(_QWORD *)(v42 + 168);
    *(_QWORD *)(v42 + 168) = v66;
    swift_retain(v66);
    swift_release(v75);
    sub_100005A38(v73, v74);
    v76 = (uint64_t)v99;
    COSEKey.init(ec2CurveIdentifier:publicKey:)(1, v73, v74);
    v115 = v66;
    v78 = v100;
    v77 = v101;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v76, 1, v101) == 1)
    {
      sub_1000150E8(v76, &qword_100174B68);
      v79 = v118;
      (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v118, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v117);
      v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v80 = type metadata accessor for DIPError(0);
      v81 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v80, v81, 0, 0);
      v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100130CA0, 0, v79, 0, v46, 0xD000000000000061, 0x8000000100130990, 0xD000000000000033, 0x8000000100130C10, 72);
      swift_willThrow(v82);
      swift_release(v115);
      sub_10000B164(v73, v74);
    }
    else
    {
      v117 = v73;
      v118 = v29;
      v98 = v27;
      v83 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v97, v76, v77);
      v84 = type metadata accessor for CBOREncoder(0);
      v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
      v86 = v77;
      v87 = CBOREncoder.init()(v85);
      v88 = *(_QWORD *)(v44 + 112);
      v46 = type metadata accessor for ISO18013PresentmentType(0);
      v89 = *(_QWORD *)(v46 - 8);
      v90 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
      if (v88 != 1)
        v90 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
      v91 = v96;
      (*(void (**)(char *, _QWORD, unint64_t))(v89 + 104))(v96, *v90, v46);
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v89 + 56))(v91, 0, 1, v46);
      CBOREncoder.presentmentType.setter(v91);
      v92 = sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
      v93 = dispatch thunk of CBOREncoder.encode<A>(_:)(v83, v86, v92);
      if (!v3)
      {
        v46 = v93;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v83, v86);
        swift_release(v115);
        sub_10000B164(v117, v74);
        swift_release(v87);
        v94 = v118;
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v94, v120);
        return v46;
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v83, v86);
      swift_release(v115);
      sub_10000B164(v117, v74);
      swift_release(v87);
      v27 = v98;
      v29 = v118;
    }
  }
LABEL_8:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v120);
  return v46;
}

uint64_t sub_100047920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[12] = v10;
  v6[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000479B0, 0, 0);
}

uint64_t sub_1000479B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore replacePayload", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[12];
  v6 = v1[13];
  v8 = v1[11];
  v9 = v1[7];
  v20 = v1[6];
  v11 = v1[4];
  v10 = v1[5];
  v13 = v1[2];
  v12 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v14._object = (void *)0x8000000100130CD0;
  v14._countAndFlagsBits = 0xD000000000000014;
  debugLogFootprint(_:)(v14);
  v15 = (_QWORD *)swift_allocObject(&unk_100168F50, 64, 7);
  v1[14] = v15;
  v15[2] = v9;
  v15[3] = v13;
  v15[4] = v12;
  v15[5] = v11;
  v15[6] = v10;
  v15[7] = v20;
  swift_retain(v9);
  swift_bridgeObjectRetain(v12);
  sub_100005A38(v11, v10);
  v16 = swift_allocObject(&unk_100168F78, 32, 7);
  v1[15] = v16;
  *(_QWORD *)(v16 + 16) = &unk_100175A98;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v15);
  v18 = (_QWORD *)swift_task_alloc(v17);
  v1[16] = v18;
  *v18 = v1;
  v18[1] = sub_100047B70;
  return AsyncCoreDataContainer.write<A>(_:)(v18, &unk_100175AA0, v16, (char *)&type metadata for () + 8);
}

uint64_t sub_100047B70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100047C44;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 112);
    swift_release(*(_QWORD *)(v2 + 120));
    swift_release(v5);
    v4 = sub_100047BE4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100047BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3._object = (void *)0x8000000100130D80;
  v3._countAndFlagsBits = 0xD000000000000012;
  debugLogFootprint(_:)(v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v7, 0xD000000000000066, 0x8000000100130CF0, 0xD00000000000001FLL, 0x8000000100130D60, 148);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v11._object = (void *)0x8000000100130D80;
  v11._countAndFlagsBits = 0xD000000000000012;
  debugLogFootprint(_:)(v11);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v8[30] = a7;
  v8[31] = a8;
  v8[28] = a5;
  v8[29] = a6;
  v8[26] = a3;
  v8[27] = a4;
  v8[25] = a2;
  v15 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v8[32] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[33] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[34] = swift_task_alloc(v17);
  v8[35] = swift_task_alloc(v17);
  v18 = type metadata accessor for PayloadMetadata(0);
  v8[36] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[37] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v8[38] = v20;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[39] = swift_task_alloc(v21);
  v8[40] = swift_task_alloc(v21);
  v8[41] = swift_task_alloc(v21);
  v8[42] = swift_task_alloc(v21);
  v8[43] = swift_task_alloc(v21);
  v22 = type metadata accessor for Logger(0);
  v8[44] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v8[45] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[46] = swift_task_alloc(v24);
  v8[47] = swift_task_alloc(v24);
  v8[48] = swift_task_alloc(v24);
  v25 = sub_100008E84(&qword_100175AA8);
  v8[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ISO18013JumboPackage(0);
  v8[50] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v8[51] = v27;
  v8[52] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (_QWORD *)swift_task_alloc(dword_100175AB4);
  v8[53] = v28;
  *v28 = v8;
  v28[1] = sub_100047F98;
  return sub_10004ACD8((uint64_t)(v8 + 14), a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100047F98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = *(_QWORD *)(v2 + 416);
    v7 = *(_QWORD *)(v2 + 384);
    v6 = *(_QWORD *)(v2 + 392);
    v9 = *(_QWORD *)(v2 + 368);
    v8 = *(_QWORD *)(v2 + 376);
    v11 = *(_QWORD *)(v2 + 336);
    v10 = *(_QWORD *)(v2 + 344);
    v12 = *(_QWORD *)(v2 + 328);
    v17 = *(_QWORD *)(v2 + 320);
    v18 = *(_QWORD *)(v2 + 312);
    v14 = v2 + 272;
    v13 = *(_QWORD *)(v2 + 272);
    v19 = *(_QWORD *)(v14 + 8);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v16 = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(v2 + 432) = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(v2 + 448) = v16;
    return swift_task_switch(sub_1000480B8, 0, 0);
  }
}

uint64_t sub_1000480B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002E94C(v0 + 112, v0 + 64, &qword_100175AB8);
  if (*(_QWORD *)(v0 + 88) == 1)
  {
    v1 = *(_QWORD *)(v0 + 384);
    v2 = *(_QWORD *)(v0 + 392);
    v4 = *(_QWORD *)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 376);
    v6 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 344);
    v8 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 312);
    v16 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v11;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    v12 = swift_allocObject(&unk_100168FA0, 32, 7);
    *(_QWORD *)(v0 + 464) = v12;
    *(_OWORD *)(v12 + 16) = xmmword_10012AC40;
    sub_10002E94C(v0 + 16, v0 + 176, &qword_100175AC0);
    sub_10002E94C(v0 + 176, v0 + 160, &qword_100175AC0);
    if ((*(_BYTE *)(v0 + 168) & 1) != 0)
      __asm { BR              X11 }
    v13 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v0 + 472) = v13;
    v14 = (_QWORD *)swift_task_alloc(dword_100175AEC);
    *(_QWORD *)(v0 + 480) = v14;
    *v14 = v0;
    v14[1] = sub_100048660;
    v15 = *(_QWORD *)(v0 + 208);
    v14[10] = v13;
    v14[11] = v15;
    return swift_task_switch(sub_10004AFEC, 0, 0);
  }
}

void sub_1000482DC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 25) & 1) == 0)
    JUMPOUT(0x1000482E4);
  JUMPOUT(0x1000485BCLL);
}

uint64_t sub_100048660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 480);
  *(_QWORD *)(*v3 + 488) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10004A26C;
  }
  else
  {
    *(_QWORD *)(v6 + 496) = a2;
    *(_QWORD *)(v6 + 504) = a1;
    v8 = sub_1000486D8;
  }
  return swift_task_switch(v8, 0, 0);
}

void sub_1000486D8()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = v0[29].i64[0];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(int8x16_t *)(v1 + 16) = vextq_s8(v0[31], v0[31], 8uLL);
  sub_10000B164(v2, v3);
  __asm { BR              X11 }
}

uint64_t sub_100048734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = BYTE6(a2);
  if ((*(_BYTE *)(v2 + 25) & 1) != 0)
  {
    *(_QWORD *)(v2 + 512) = v4;
    v43 = *(_QWORD *)(v2 + 448);
    v44 = *(_QWORD *)(v2 + 456);
    v45 = *(_QWORD *)(v2 + 432);
    v46 = *(_QWORD *)(v2 + 440);
    v48 = *(_QWORD *)(v2 + 32);
    v47 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 520) = v48;
    *(_QWORD *)(v2 + 528) = v47;
    v49 = *(_QWORD *)(v2 + 48);
    v50 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 536) = v49;
    *(_QWORD *)(v2 + 544) = v50;
    sub_1000517CC(v45, v46, v43, v44);
    v51 = (_QWORD *)swift_task_alloc(dword_100175ADC);
    *(_QWORD *)(v2 + 552) = v51;
    *v51 = v2;
    v51[1] = sub_100048AEC;
    return sub_10004B1C8(*(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 240), v48, v47, v49, v50, *(_QWORD *)(v2 + 248));
  }
  else
  {
    v5 = defaultLogger()(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Inserting biometric encrypted payload (legacy flow)", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v2 + 376);
    v10 = *(_QWORD *)(v2 + 352);
    v11 = *(_QWORD *)(v2 + 360);
    v12 = *(_QWORD *)(v2 + 288);
    v13 = *(_QWORD *)(v2 + 296);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v14 = sub_100008E84(&qword_100175AC8);
    *(_QWORD *)(v2 + 776) = swift_allocBox(v14);
    *(_QWORD *)(v2 + 784) = v15;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    *(_QWORD *)(v2 + 792) = v16;
    v16(v15, 1, 1, v12);
    if ((*(_BYTE *)(v2 + 25) & 1) != 0)
    {
      v33 = *(_QWORD *)(v2 + 208) + 72;
      v34 = *(_QWORD *)(v2 + 32);
      v35 = *(_QWORD *)(v2 + 40);
      v36 = *(_QWORD *)(v2 + 48);
      v37 = *(_QWORD *)(v2 + 56);
      sub_1000517CC(*(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 440), *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
      v38 = (_QWORD *)swift_task_alloc(dword_100175AD4);
      *(_QWORD *)(v2 + 800) = v38;
      *v38 = v2;
      v38[1] = sub_100049D5C;
      v39 = *(_QWORD *)(v2 + 312);
      v40 = *(_QWORD *)(v2 + 240);
      v41 = *(_QWORD *)(v2 + 248);
      v42 = *(_QWORD *)(v2 + 232);
      *(_QWORD *)(v3 + 16) = v37;
      return sub_10004BBE0(v39, v33, v42, v40, v41, v34, v35, v36);
    }
    else
    {
      v17 = *(_QWORD *)(v2 + 776);
      v53 = v17;
      v18 = *(_QWORD *)(v2 + 464);
      *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 272);
      v54 = *(_QWORD *)(v2 + 264);
      v55 = *(_QWORD *)(v2 + 256);
      v19 = *(_QWORD *)(v2 + 240);
      v52 = *(_QWORD *)(v2 + 248);
      v21 = *(_QWORD *)(v2 + 224);
      v20 = *(_QWORD *)(v2 + 232);
      v22 = *(_QWORD *)(v2 + 208);
      v23 = *(_QWORD *)(v2 + 216);
      v24 = *(_QWORD *)(v2 + 200);
      v25 = swift_allocObject(&unk_100168FC8, 144, 7);
      *(_QWORD *)(v2 + 824) = v25;
      *(_QWORD *)(v25 + 16) = v22;
      *(_QWORD *)(v25 + 24) = v24;
      *(_QWORD *)(v25 + 32) = v20;
      *(_QWORD *)(v25 + 40) = v19;
      *(_QWORD *)(v25 + 48) = v17;
      *(_QWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 64) = v23;
      *(_QWORD *)(v25 + 72) = v21;
      v26 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v25 + 80) = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v25 + 96) = v26;
      *(_OWORD *)(v25 + 112) = *(_OWORD *)(v2 + 48);
      *(_QWORD *)(v25 + 128) = v52;
      *(_QWORD *)(v25 + 136) = v18;
      sub_100051828((_QWORD *)(v2 + 112), sub_1000517AC);
      swift_retain(v22);
      swift_retain(v24);
      swift_bridgeObjectRetain(v21);
      sub_100005A38(v20, v19);
      v27 = swift_allocObject(&unk_100168FF0, 32, 7);
      *(_QWORD *)(v2 + 832) = v27;
      *(_QWORD *)(v27 + 16) = sub_100051770;
      *(_QWORD *)(v27 + 24) = v25;
      v28 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      v29 = *(void (**)(_QWORD, uint64_t, uint64_t))(v54 + 104);
      swift_retain(v18);
      swift_retain(v53);
      v29(*(_QWORD *)(v3 + 24), v28, v55);
      v30 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
      swift_retain(v25);
      v31 = (_QWORD *)swift_task_alloc(v30);
      *(_QWORD *)(v2 + 840) = v31;
      *v31 = v2;
      v31[1] = sub_100049FC8;
      return NSManagedObjectContext.perform<A>(schedule:_:)(v31, *(_QWORD *)(v2 + 272), sub_10003DE8C, v27, (char *)&type metadata for () + 8);
    }
  }
}

uint64_t sub_100048AEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10004A7DC;
  }
  else
  {
    sub_100051828((_QWORD *)(v2 + 112), sub_100051860);
    v4 = sub_100048B60;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100048B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 392);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_1000150E8(v3, &qword_100175AA8);
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Inserting biometric encrypted payload (legacy flow)", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v10 = *(_QWORD *)(v0 + 360);
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 296);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    v14 = sub_100008E84(&qword_100175AC8);
    *(_QWORD *)(v0 + 776) = swift_allocBox(v14);
    *(_QWORD *)(v0 + 784) = v15;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    *(_QWORD *)(v0 + 792) = v16;
    v16(v15, 1, 1, v12);
    if ((*(_BYTE *)(v0 + 25) & 1) == 0)
    {
      v17 = *(_QWORD *)(v0 + 776);
      v85 = *(_QWORD *)(v0 + 464);
      v86 = *(_QWORD *)(v0 + 264);
      v88 = *(_QWORD *)(v0 + 256);
      v90 = *(_QWORD *)(v0 + 272);
      v18 = *(_QWORD *)(v0 + 240);
      v84 = *(_QWORD *)(v0 + 248);
      v20 = *(_QWORD *)(v0 + 224);
      v19 = *(_QWORD *)(v0 + 232);
      v21 = *(_QWORD *)(v0 + 208);
      v22 = *(_QWORD *)(v0 + 216);
      v23 = *(_QWORD *)(v0 + 200);
      v24 = swift_allocObject(&unk_100168FC8, 144, 7);
      *(_QWORD *)(v0 + 824) = v24;
      *(_QWORD *)(v24 + 16) = v21;
      *(_QWORD *)(v24 + 24) = v23;
      *(_QWORD *)(v24 + 32) = v19;
      *(_QWORD *)(v24 + 40) = v18;
      *(_QWORD *)(v24 + 48) = v17;
      *(_QWORD *)(v24 + 56) = 0;
      *(_QWORD *)(v24 + 64) = v22;
      *(_QWORD *)(v24 + 72) = v20;
      v25 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v24 + 80) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v24 + 96) = v25;
      *(_OWORD *)(v24 + 112) = *(_OWORD *)(v0 + 48);
      *(_QWORD *)(v24 + 128) = v84;
      *(_QWORD *)(v24 + 136) = v85;
      sub_100051828((_QWORD *)(v0 + 112), sub_1000517AC);
      swift_retain(v21);
      swift_retain(v23);
      swift_bridgeObjectRetain(v20);
      sub_100005A38(v19, v18);
      v26 = swift_allocObject(&unk_100168FF0, 32, 7);
      *(_QWORD *)(v0 + 832) = v26;
      *(_QWORD *)(v26 + 16) = sub_100051770;
      *(_QWORD *)(v26 + 24) = v24;
      v27 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 104);
      swift_retain(v85);
      swift_retain(v17);
      v28(v90, v27, v88);
      v29 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
      swift_retain(v24);
      v30 = (_QWORD *)swift_task_alloc(v29);
      *(_QWORD *)(v0 + 840) = v30;
      *v30 = v0;
      v30[1] = sub_100049FC8;
      return NSManagedObjectContext.perform<A>(schedule:_:)(v30, *(_QWORD *)(v0 + 272), sub_10003DE8C, v26, (char *)&type metadata for () + 8);
    }
    v64 = *(_QWORD *)(v0 + 208) + 72;
    v65 = *(_QWORD *)(v0 + 32);
    v66 = *(_QWORD *)(v0 + 40);
    v67 = *(_QWORD *)(v0 + 48);
    sub_1000517CC(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456));
    v68 = (_QWORD *)swift_task_alloc(dword_100175AD4);
    *(_QWORD *)(v0 + 800) = v68;
    *v68 = v0;
    v68[1] = sub_100049D5C;
    v69 = *(_QWORD *)(v0 + 312);
    v70 = *(_QWORD *)(v0 + 240);
    v71 = *(_QWORD *)(v0 + 248);
    v72 = *(_QWORD *)(v0 + 232);
    v73 = v64;
    v74 = v65;
    v75 = v66;
    v76 = v67;
    return sub_10004BBE0(v69, v73, v72, v70, v71, v74, v75, v76);
  }
  v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 416), v3, v2);
  v33 = defaultLogger()(v32);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Inserting standard payload", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }
  v37 = *(_QWORD *)(v0 + 384);
  v38 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 360);

  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  v41 = ISO18013JumboPackage.packages.getter(v40);
  *(_QWORD *)(v0 + 568) = *(_QWORD *)(v41 + 16);
  swift_bridgeObjectRelease(v41);
  v42._countAndFlagsBits = 0xD000000000000021;
  v42._object = (void *)0x8000000100130DA0;
  debugLogFootprint(_:)(v42);
  v44 = (_QWORD *)ISO18013JumboPackage.packages.getter(v43);
  *(_QWORD *)(v0 + 576) = v44;
  v45 = v44[2];
  *(_QWORD *)(v0 + 584) = v45;
  if (v45)
  {
    *(_DWORD *)(v0 + 172) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    v46 = *(_QWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 592) = 0u;
    *(_OWORD *)(v0 + 608) = 0u;
    *(_OWORD *)(v0 + 624) = 0u;
    v47 = *(_QWORD *)(v0 + 248);
    v48 = v44[4];
    *(_QWORD *)(v0 + 640) = v48;
    v49 = v44[5];
    *(_QWORD *)(v0 + 648) = v49;
    sub_100005A38(v48, v49);
    v50 = sub_10011A3BC(v47);
    *(_QWORD *)(v0 + 656) = v50;
    if (v46)
    {
      v51 = *(_QWORD *)(v0 + 576);
      v52 = *(_QWORD *)(v0 + 464);
      v53 = *(_QWORD *)(v0 + 408);
      v54 = *(_QWORD *)(v0 + 416);
      v55 = *(_QWORD *)(v0 + 400);
      sub_100051938(0, 0, 0, 0, 0);
      sub_100005AB0(v48, v49);
      sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
      swift_bridgeObjectRelease(v51);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      swift_release(v52);
      v56 = *(_QWORD *)(v0 + 384);
      v57 = *(_QWORD *)(v0 + 392);
      v59 = *(_QWORD *)(v0 + 368);
      v58 = *(_QWORD *)(v0 + 376);
      v61 = *(_QWORD *)(v0 + 336);
      v60 = *(_QWORD *)(v0 + 344);
      v63 = *(_QWORD *)(v0 + 320);
      v62 = *(_QWORD *)(v0 + 328);
      v87 = *(_QWORD *)(v0 + 312);
      v89 = *(_QWORD *)(v0 + 280);
      v91 = *(_QWORD *)(v0 + 272);
      swift_task_dealloc(*(_QWORD *)(v0 + 416));
      swift_task_dealloc(v57);
      swift_task_dealloc(v56);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v80 = v50;
    v81 = *(_QWORD *)(v0 + 208);
    sub_100051828((_QWORD *)(v0 + 112), sub_1000517AC);
    v82 = (_QWORD *)swift_task_alloc(dword_100175AD4);
    *(_QWORD *)(v0 + 664) = v82;
    *v82 = v0;
    v82[1] = sub_1000491E8;
    v73 = v81 + 72;
    v76 = *(_QWORD *)(v0 + 536);
    v75 = *(_QWORD *)(v0 + 528);
    v74 = *(_QWORD *)(v0 + 520);
    v69 = *(_QWORD *)(v0 + 336);
    v72 = v48;
    v70 = v49;
    v71 = v80;
    return sub_10004BBE0(v69, v73, v72, v70, v71, v74, v75, v76);
  }
  *(_QWORD *)(v0 + 712) = 0;
  *(_OWORD *)(v0 + 680) = 0u;
  *(_OWORD *)(v0 + 696) = 0u;
  v77 = *(_QWORD *)(v0 + 528);
  swift_bridgeObjectRelease(v44);
  v78._object = (void *)0x8000000100130DD0;
  v78._countAndFlagsBits = 0xD00000000000001FLL;
  debugLogFootprint(_:)(v78);
  if (v77)
  {
    v79 = *(_QWORD *)(v0 + 520);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 528));
  }
  else
  {
    v79 = 0;
  }
  v83 = (_QWORD *)swift_task_alloc(dword_100175AE4);
  *(_QWORD *)(v0 + 760) = v83;
  *v83 = v0;
  v83[1] = sub_100049B48;
  return sub_10004E5FC(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200), v79, *(_QWORD *)(v0 + 528));
}

uint64_t sub_1000491E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 664);
  *(_QWORD *)(*(_QWORD *)v2 + 672) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[78];
    v7 = v4[77];
    v8 = v4[76];
    v9 = v4[75];
    v10 = v4[74];
    swift_bridgeObjectRelease(v4[72]);
    sub_100051938(v10, v9, v8, v7, v6);
    sub_100051828(v4 + 14, sub_100051860);
    v11 = sub_10004A8E0;
  }
  else
  {
    v4[90] = a1;
    sub_100051828(v4 + 14, sub_100051860);
    v11 = sub_1000492C4;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_1000492C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;

  v33 = *(_QWORD *)(v0 + 720);
  v35 = *(_QWORD *)(v0 + 656);
  v29 = *(_QWORD *)(v0 + 640);
  v30 = *(_QWORD *)(v0 + 648);
  v39 = *(_DWORD *)(v0 + 172);
  v34 = *(_QWORD *)(v0 + 464);
  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 328);
  v26 = v2;
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 256);
  v38 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 232);
  v32 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  sub_1000518B8(*(_QWORD *)(v0 + 336), v1);
  sub_100051968(v1, v2);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 48) & ~v7;
  v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)swift_allocObject(&unk_100169018, v25 + 8, v7 | 7);
  *(_QWORD *)(v0 + 728) = v14;
  v14[2] = v5;
  v14[3] = v6;
  v14[4] = v29;
  v14[5] = v30;
  sub_1000518B8(v26, (uint64_t)v14 + v8);
  *(_QWORD *)((char *)v14 + v9) = v33;
  v15 = (_QWORD *)((char *)v14 + v10);
  *v15 = v27;
  v15[1] = v28;
  v16 = (_OWORD *)((char *)v14 + v11);
  v17 = *(_OWORD *)(v0 + 48);
  v18 = *(_OWORD *)(v0 + 16);
  v16[1] = *(_OWORD *)(v0 + 32);
  v16[2] = v17;
  *v16 = v18;
  *(_QWORD *)((char *)v14 + v12) = v35;
  v19 = (_QWORD *)((char *)v14 + v13);
  *v19 = v31;
  v19[1] = v32;
  *(_QWORD *)((char *)v14 + v25) = v34;
  sub_100051828((_QWORD *)(v0 + 112), sub_1000517AC);
  sub_100005A38(v29, v30);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v28);
  sub_100005A38(v31, v32);
  v20 = swift_allocObject(&unk_100169040, 32, 7);
  *(_QWORD *)(v0 + 736) = v20;
  *(_QWORD *)(v20 + 16) = sub_100051B28;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104);
  swift_retain(v34);
  v21(v38, v39, v37);
  v22 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v14);
  v23 = (_QWORD *)swift_task_alloc(v22);
  *(_QWORD *)(v0 + 744) = v23;
  *v23 = v0;
  v23[1] = sub_100049524;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v23, *(_QWORD *)(v0 + 280), sub_100052C50, v20, (char *)&type metadata for () + 8);
}

uint64_t sub_100049524()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  *(_QWORD *)(*(_QWORD *)v1 + 752) = v0;
  swift_task_dealloc(v3);
  v4 = v2[92];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[35], v2[32]);
    swift_release(v4);
    v5 = sub_1000499CC;
  }
  else
  {
    v6 = v2[91];
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[35], v2[32]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1000495D0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000495D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 608);
  sub_100051968(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
  if (!v1)
    __asm { BR              X10 }
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 320);
  sub_100005AB0(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648));
  sub_100051BE4(v4);
  sub_100051BE4(v3);
  v5 = *(_QWORD *)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 616);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 632) + 1;
  if (v9 == *(_QWORD *)(v0 + 584))
  {
    *(_QWORD *)(v0 + 712) = v5;
    *(_QWORD *)(v0 + 704) = v6;
    *(_QWORD *)(v0 + 696) = v2;
    *(_QWORD *)(v0 + 688) = v7;
    *(_QWORD *)(v0 + 680) = v8;
    v10 = *(_QWORD *)(v0 + 528);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
    v11._object = (void *)0x8000000100130DD0;
    v11._countAndFlagsBits = 0xD00000000000001FLL;
    debugLogFootprint(_:)(v11);
    if (v10)
    {
      v12 = *(_QWORD *)(v0 + 520);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 528));
    }
    else
    {
      v12 = 0;
    }
    v31 = (_QWORD *)swift_task_alloc(dword_100175AE4);
    *(_QWORD *)(v0 + 760) = v31;
    *v31 = v0;
    v31[1] = sub_100049B48;
    return sub_10004E5FC(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200), v12, *(_QWORD *)(v0 + 528));
  }
  else
  {
    v39 = (_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 752);
    *(_QWORD *)(v0 + 632) = v9;
    *(_QWORD *)(v0 + 624) = v5;
    *(_QWORD *)(v0 + 616) = v6;
    *(_QWORD *)(v0 + 608) = v2;
    *(_QWORD *)(v0 + 600) = v7;
    *(_QWORD *)(v0 + 592) = v8;
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 576) + 16 * v9;
    v16 = *(_QWORD *)(v15 + 32);
    *(_QWORD *)(v0 + 640) = v16;
    v17 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v0 + 648) = v17;
    sub_100005A38(v16, v17);
    v18 = sub_10011A3BC(v14);
    *(_QWORD *)(v0 + 656) = v18;
    if (v13)
    {
      v19 = *(_QWORD *)(v0 + 576);
      v36 = *(_QWORD *)(v0 + 416);
      v37 = *(_QWORD *)(v0 + 464);
      v20 = *(_QWORD *)(v0 + 408);
      v35 = *(_QWORD *)(v0 + 400);
      sub_100051938(v8, v7, v2, v6, v5);
      sub_100005AB0(v16, v17);
      sub_100051828(v39, sub_100051860);
      swift_bridgeObjectRelease(v19);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v36, v35);
      swift_release(v37);
      v21 = *(_QWORD *)(v0 + 384);
      v22 = *(_QWORD *)(v0 + 392);
      v24 = *(_QWORD *)(v0 + 368);
      v23 = *(_QWORD *)(v0 + 376);
      v26 = *(_QWORD *)(v0 + 336);
      v25 = *(_QWORD *)(v0 + 344);
      v28 = *(_QWORD *)(v0 + 320);
      v27 = *(_QWORD *)(v0 + 328);
      v29 = *(_QWORD *)(v0 + 312);
      v38 = *(_QWORD *)(v0 + 280);
      v40 = *(_QWORD *)(v0 + 272);
      swift_task_dealloc(*(_QWORD *)(v0 + 416));
      swift_task_dealloc(v22);
      swift_task_dealloc(v21);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v32 = v18;
      v33 = *(_QWORD *)(v0 + 208);
      sub_100051828(v39, sub_1000517AC);
      v34 = (_QWORD *)swift_task_alloc(dword_100175AD4);
      *(_QWORD *)(v0 + 664) = v34;
      *v34 = v0;
      v34[1] = sub_1000491E8;
      return sub_10004BBE0(*(_QWORD *)(v0 + 336), v33 + 72, v16, v17, v32, *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 536));
    }
  }
}

uint64_t sub_1000499CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 464);
  v23 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  sub_100051938(v8, v7, v6, v5, v4);
  swift_release(v1);
  sub_100005AB0(v3, v2);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  sub_100051BE4(v9);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v21);
  swift_release(v25);
  v11 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 376);
  v15 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 344);
  v17 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 280);
  v24 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049B48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[66];
    sub_100051938(v2[85], v2[86], v2[87], v2[88], v2[89]);
    swift_bridgeObjectRelease(v4);
    v5 = sub_10004A9F8;
  }
  else
  {
    swift_bridgeObjectRelease(v2[66]);
    v5 = sub_100049BD8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100049BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 696);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 712);
    v3 = *(_QWORD *)(v0 + 704);
    v4 = *(_QWORD *)(v0 + 688);
    v5 = *(_QWORD *)(v0 + 680);
    v6 = *(_QWORD *)(v0 + 568);
    v7 = *(_QWORD *)(v0 + 512);
    v8 = *(_QWORD *)(v0 + 408);
    v19 = *(_QWORD *)(v0 + 400);
    v21 = *(_QWORD *)(v0 + 416);
    type metadata accessor for IDCSAnalytics(0);
    static IDCSAnalytics.sendPayloadIngestionSizeEvent(docType:issuer:overallSizeBytes:numberOfPackages:packageSizeBytes:)(v4, v1, v3, v2, v7, v6, v5);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v2);
    sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v19);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 400));
    sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  }
  swift_release(*(_QWORD *)(v0 + 464));
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 392);
  v12 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 312);
  v20 = *(_QWORD *)(v0 + 280);
  v22 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049D5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 800);
  *(_QWORD *)(*v2 + 808) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10004AB00;
  }
  else
  {
    *(_QWORD *)(v4 + 816) = a1;
    sub_100051828((_QWORD *)(v4 + 112), sub_100051860);
    v6 = sub_100049DE0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100049DE0()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = *(_QWORD *)(v0 + 816);
  v1 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 288);
  sub_1000150E8(v2, &qword_100175AC8);
  sub_1000518B8(v3, v2);
  v1(v2, 0, 1, v4);
  v5 = *(_QWORD *)(v0 + 776);
  v21 = *(_QWORD *)(v0 + 464);
  v23 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = swift_allocObject(&unk_100168FC8, 144, 7);
  *(_QWORD *)(v0 + 824) = v13;
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = v8;
  *(_QWORD *)(v13 + 40) = v7;
  *(_QWORD *)(v13 + 48) = v5;
  *(_QWORD *)(v13 + 56) = v22;
  *(_QWORD *)(v13 + 64) = v9;
  *(_QWORD *)(v13 + 72) = v10;
  v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v13 + 96) = v14;
  *(_OWORD *)(v13 + 112) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v13 + 128) = v6;
  *(_QWORD *)(v13 + 136) = v21;
  sub_100051828((_QWORD *)(v0 + 112), sub_1000517AC);
  swift_retain(v12);
  swift_retain(v11);
  swift_bridgeObjectRetain(v10);
  sub_100005A38(v8, v7);
  v15 = swift_allocObject(&unk_100168FF0, 32, 7);
  *(_QWORD *)(v0 + 832) = v15;
  *(_QWORD *)(v15 + 16) = sub_100051770;
  *(_QWORD *)(v15 + 24) = v13;
  v16 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104);
  swift_retain(v21);
  swift_retain(v5);
  v17(v25, v16, v24);
  v18 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v13);
  v19 = (_QWORD *)swift_task_alloc(v18);
  *(_QWORD *)(v0 + 840) = v19;
  *v19 = v0;
  v19[1] = sub_100049FC8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v19, *(_QWORD *)(v0 + 272), sub_10003DE8C, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_100049FC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 840);
  *(_QWORD *)(*(_QWORD *)v1 + 848) = v0;
  swift_task_dealloc(v3);
  v4 = v2[104];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
    swift_release(v4);
    v5 = sub_10004A164;
  }
  else
  {
    v6 = v2[103];
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10004A074;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004A074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 464);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  swift_release(v1);
  swift_release(*(_QWORD *)(v0 + 776));
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 464);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004A26C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v1[59];
    v15 = v1[61];
    v16 = v1[45];
    v17 = v1[44];
    v18 = v1[46];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = (id)DCCredentialPayloadProtectionPolicyToString(v5);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v1[24] = sub_10003FA80(v9, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 25, v6 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "replacePayload unable to fetch acl for payload protection policy %s. This may not be required for dekar payloads.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_errorRelease(v15);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  else
  {
    v13 = v1[45];
    v12 = v1[46];
    v14 = v1[44];
    swift_errorRelease(v1[61]);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  __asm { BR              X11 }
}

uint64_t sub_10004A428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = BYTE6(a2);
  if ((*(_BYTE *)(v2 + 25) & 1) != 0)
  {
    *(_QWORD *)(v2 + 512) = v4;
    v43 = *(_QWORD *)(v2 + 448);
    v44 = *(_QWORD *)(v2 + 456);
    v45 = *(_QWORD *)(v2 + 432);
    v46 = *(_QWORD *)(v2 + 440);
    v48 = *(_QWORD *)(v2 + 32);
    v47 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 520) = v48;
    *(_QWORD *)(v2 + 528) = v47;
    v49 = *(_QWORD *)(v2 + 48);
    v50 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 536) = v49;
    *(_QWORD *)(v2 + 544) = v50;
    sub_1000517CC(v45, v46, v43, v44);
    v51 = (_QWORD *)swift_task_alloc(dword_100175ADC);
    *(_QWORD *)(v2 + 552) = v51;
    *v51 = v2;
    v51[1] = sub_100048AEC;
    return sub_10004B1C8(*(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 240), v48, v47, v49, v50, *(_QWORD *)(v2 + 248));
  }
  else
  {
    v5 = defaultLogger()(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Inserting biometric encrypted payload (legacy flow)", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v2 + 376);
    v10 = *(_QWORD *)(v2 + 352);
    v11 = *(_QWORD *)(v2 + 360);
    v12 = *(_QWORD *)(v2 + 288);
    v13 = *(_QWORD *)(v2 + 296);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v14 = sub_100008E84(&qword_100175AC8);
    *(_QWORD *)(v2 + 776) = swift_allocBox(v14);
    *(_QWORD *)(v2 + 784) = v15;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    *(_QWORD *)(v2 + 792) = v16;
    v16(v15, 1, 1, v12);
    if ((*(_BYTE *)(v2 + 25) & 1) != 0)
    {
      v33 = *(_QWORD *)(v2 + 208) + 72;
      v34 = *(_QWORD *)(v2 + 32);
      v35 = *(_QWORD *)(v2 + 40);
      v36 = *(_QWORD *)(v2 + 48);
      v37 = *(_QWORD *)(v2 + 56);
      sub_1000517CC(*(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 440), *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
      v38 = (_QWORD *)swift_task_alloc(dword_100175AD4);
      *(_QWORD *)(v2 + 800) = v38;
      *v38 = v2;
      v38[1] = sub_100049D5C;
      v39 = *(_QWORD *)(v2 + 312);
      v40 = *(_QWORD *)(v2 + 240);
      v41 = *(_QWORD *)(v2 + 248);
      v42 = *(_QWORD *)(v2 + 232);
      *(_QWORD *)(v3 + 16) = v37;
      return sub_10004BBE0(v39, v33, v42, v40, v41, v34, v35, v36);
    }
    else
    {
      v17 = *(_QWORD *)(v2 + 776);
      v53 = v17;
      v18 = *(_QWORD *)(v2 + 464);
      v54 = *(_QWORD *)(v2 + 264);
      v55 = *(_QWORD *)(v2 + 256);
      v56 = *(_QWORD *)(v2 + 272);
      v19 = *(_QWORD *)(v2 + 240);
      v52 = *(_QWORD *)(v2 + 248);
      v21 = *(_QWORD *)(v2 + 224);
      v20 = *(_QWORD *)(v2 + 232);
      v22 = *(_QWORD *)(v2 + 208);
      v23 = *(_QWORD *)(v2 + 216);
      v24 = *(_QWORD *)(v2 + 200);
      v25 = swift_allocObject(&unk_100168FC8, 144, 7);
      *(_QWORD *)(v2 + 824) = v25;
      *(_QWORD *)(v25 + 16) = v22;
      *(_QWORD *)(v25 + 24) = v24;
      *(_QWORD *)(v25 + 32) = v20;
      *(_QWORD *)(v25 + 40) = v19;
      *(_QWORD *)(v25 + 48) = v17;
      *(_QWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 64) = v23;
      *(_QWORD *)(v25 + 72) = v21;
      v26 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v25 + 80) = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v25 + 96) = v26;
      *(_OWORD *)(v25 + 112) = *(_OWORD *)(v2 + 48);
      *(_QWORD *)(v25 + 128) = v52;
      *(_QWORD *)(v25 + 136) = v18;
      sub_100051828((_QWORD *)(v2 + 112), sub_1000517AC);
      swift_retain(v22);
      swift_retain(v24);
      swift_bridgeObjectRetain(v21);
      sub_100005A38(v20, v19);
      v27 = swift_allocObject(&unk_100168FF0, 32, 7);
      *(_QWORD *)(v2 + 832) = v27;
      *(_QWORD *)(v27 + 16) = sub_100051770;
      *(_QWORD *)(v27 + 24) = v25;
      v28 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 104);
      swift_retain(v18);
      swift_retain(v53);
      v29(v56, v28, v55);
      v30 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
      swift_retain(v25);
      v31 = (_QWORD *)swift_task_alloc(v30);
      *(_QWORD *)(v2 + 840) = v31;
      *v31 = v2;
      v31[1] = sub_100049FC8;
      return NSManagedObjectContext.perform<A>(schedule:_:)(v31, *(_QWORD *)(v2 + 272), sub_10003DE8C, v27, (char *)&type metadata for () + 8);
    }
  }
}

uint64_t sub_10004A7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 464);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 400);
  sub_100005AB0(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648));
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 400);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 464);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  sub_100051828((_QWORD *)(v0 + 112), sub_100051860);
  swift_release(v1);
  swift_release(v2);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AC10()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  sub_100005AB0(v0[5], v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004AC44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_100175A94);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_10000935C;
  return sub_100047DB8(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_10004ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[14] = a7;
  v8[15] = v7;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[8] = a1;
  v8[9] = a2;
  v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v8[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[17] = v10;
  v8[18] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AD44, 0, 0);
}

uint64_t sub_10004AD44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[17];
  v16 = v0[18];
  v2 = v0[15];
  v15 = v0[16];
  v3 = v0[13];
  v4 = v0[14];
  v6 = v0[11];
  v5 = v0[12];
  v7 = v0[9];
  v8 = v0[10];
  v9 = (_QWORD *)swift_allocObject(&unk_100169108, 72, 7);
  v0[19] = v9;
  v9[2] = v2;
  v9[3] = v7;
  v9[4] = v8;
  v9[5] = v4;
  v9[6] = v6;
  v9[7] = v5;
  v9[8] = v3;
  swift_retain(v2);
  swift_bridgeObjectRetain(v8);
  swift_retain(v4);
  sub_100005A38(v6, v5);
  v10 = swift_allocObject(&unk_100169130, 32, 7);
  v0[20] = v10;
  *(_QWORD *)(v10 + 16) = sub_1000528E0;
  *(_QWORD *)(v10 + 24) = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v16, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v15);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v9);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[21] = v12;
  v13 = sub_100008E84(&qword_100175AB8);
  *v12 = v0;
  v12[1] = sub_10004AE94;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[18], sub_10003DE8C, v10, v13);
}

uint64_t sub_10004AE94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v5 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 144);
  v6 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 160);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_10004AF98;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 152);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_10004AF38;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10004AF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  *(_OWORD *)v1 = v6;
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AF98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_10004AFEC, 0, 0);
}

uint64_t sub_10004AFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 80) != 1)
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 24);
  v2 = type metadata accessor for ACLFetcher();
  inited = swift_initStackObject(v2, v0 + 16);
  *(_QWORD *)(v0 + 96) = inited;
  *(_QWORD *)(inited + 16) = v1;
  type metadata accessor for AppleIDVManager(0);
  swift_retain(v1);
  sub_100112A6C((uint64_t *)(inited + 24));
  v4 = (_QWORD *)swift_task_alloc(dword_100176D5C);
  *(_QWORD *)(v0 + 104) = v4;
  *v4 = v0;
  v4[1] = sub_10004B0B4;
  return sub_100086144();
}

uint64_t sub_10004B0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 104);
  *(_QWORD *)(*v3 + 112) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10004B17C;
  }
  else
  {
    *(_QWORD *)(v6 + 120) = a2;
    *(_QWORD *)(v6 + 128) = a1;
    v8 = sub_10004B12C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10004B12C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_setDeallocating(v1);
  swift_release(*(_QWORD *)(v1 + 16));
  sub_10000CE40((_QWORD *)(v1 + 24));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

uint64_t sub_10004B17C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_setDeallocating(v1);
  swift_release(*(_QWORD *)(v1 + 16));
  sub_10000CE40((_QWORD *)(v1 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v9[16] = a8;
  v9[17] = v8;
  v9[14] = a6;
  v9[15] = a7;
  v9[12] = a4;
  v9[13] = a5;
  v9[10] = a2;
  v9[11] = a3;
  v9[9] = a1;
  v10 = type metadata accessor for ISO18013JumboPackage(0);
  v9[18] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[19] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[20] = swift_task_alloc(v12);
  v9[21] = swift_task_alloc(v12);
  v9[22] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v9[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v9[24] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[25] = swift_task_alloc(v15);
  v9[26] = swift_task_alloc(v15);
  v9[27] = swift_task_alloc(v15);
  v9[28] = swift_task_alloc(v15);
  return swift_task_switch(sub_10004B2A4, 0, 0);
}

uint64_t sub_10004B2A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t **v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching the ISO18013JumboPackage", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[28];
  v7 = v1[23];
  v8 = v1[24];
  v9 = v1[17];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[29] = (uint64_t)v10;
  v10(v6, v7);
  sub_1000151A4((_QWORD *)(v9 + 72), *(_QWORD *)(v9 + 96));
  v11 = (uint64_t **)swift_task_alloc(dword_1001789EC);
  v1[30] = (uint64_t)v11;
  *v11 = v1;
  v11[1] = (uint64_t *)sub_10004B3C4;
  return sub_1001189B8((uint64_t)(v1 + 2), v1[10], v1[11], v1[16], v1[12], v1[13], v1[14], v1[15]);
}

uint64_t sub_10004B3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004B510;
  else
    v3 = sub_10004B428;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004B428()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = v0[5];
  v2 = v0[6];
  sub_1000151A4(v0 + 2, v1);
  v3 = *(int **)(v2 + 48);
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[32] = v4;
  *v4 = v0;
  v4[1] = sub_10004B4A0;
  return v6(v1, v2);
}

uint64_t sub_10004B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 256);
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10004BB50;
  else
    v6 = sub_10004B598;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10004B510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B598()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x800000010012F560;
  v2._countAndFlagsBits = 0xD000000000000025;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
    sub_100052C84(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = type metadata accessor for CBORDecoder(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = CBORDecoder.init()(v9);
  v11 = sub_1000058C8(&qword_100175B00, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013JumboPackage, (uint64_t)&protocol conformance descriptor for ISO18013JumboPackage);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v7, v6, v4, v7, v11);
  if (v5)
  {
    v12 = swift_release(v10);
    v13 = defaultLogger()(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Replace payload called with a non ISO18013JumboPackage. Will attempt to transform the package into ISO18013JumboPackage", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 272);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
    v20 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 184);

    v19(v20, v21);
    v22 = sub_100008E84(&qword_100175B08);
    v23 = swift_allocObject(v22, 48, 7);
    *(_OWORD *)(v23 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v23 + 32) = v18;
    *(_QWORD *)(v23 + 40) = v17;
    v24 = sub_100005A38(v18, v17);
    v25 = static ISO18013JumboPackage.supportedJumboPackageVersion.getter(v24);
    ISO18013JumboPackage.init(version:packages:)(v25);
    sub_100005AB0(v18, v17);
    swift_errorRelease(v5);
  }
  else
  {
    v26 = swift_release(v10);
    v27 = ISO18013JumboPackage.packages.getter(v26);
    v28 = *(_QWORD *)(v27 + 16);
    v29 = swift_bridgeObjectRelease(v27);
    if (v28)
    {
      v30 = (_QWORD *)(v0 + 216);
      v32 = *(_QWORD *)(v0 + 168);
      v31 = *(_QWORD *)(v0 + 176);
      v34 = *(_QWORD *)(v0 + 152);
      v33 = *(_QWORD *)(v0 + 160);
      v35 = *(_QWORD *)(v0 + 144);
      defaultLogger()(v29);
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
      v36(v32, v31, v35);
      v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36)(v33, v31, v35);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = *(_QWORD *)(v0 + 168);
        v42 = *(_QWORD *)(v0 + 144);
        v41 = *(_QWORD *)(v0 + 152);
        v43 = swift_slowAlloc(22, -1);
        *(_DWORD *)v43 = 134349312;
        v44 = ISO18013JumboPackage.packages.getter(v43);
        v45 = *(_QWORD *)(v44 + 16);
        swift_bridgeObjectRelease(v44);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
        *(_QWORD *)(v0 + 56) = v45;
        v46 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v43 + 4);
        *(_WORD *)(v43 + 12) = 2050;
        v47 = (_QWORD *)ISO18013JumboPackage.packages.getter(v46);
        v48 = v47;
        if (v47[2])
        {
          v49 = v47[5];
          sub_100005A38(v47[4], v49);
          swift_bridgeObjectRelease(v48);
          __asm { BR              X9 }
        }
        swift_bridgeObjectRelease(v47);
        __break(1u);
        JUMPOUT(0x10004BB40);
      }
      v58 = *(_QWORD *)(v0 + 264);
      v57 = *(_QWORD *)(v0 + 272);
      v59 = *(_QWORD *)(v0 + 168);
      v60 = *(_QWORD *)(v0 + 144);
      v61 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8);
      v61(*(_QWORD *)(v0 + 160), v60);
      v61(v59, v60);
      sub_100005AB0(v58, v57);

    }
    else
    {
      v30 = (_QWORD *)(v0 + 208);
      v50 = defaultLogger()(v29);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.info.getter();
      v53 = os_log_type_enabled(v51, v52);
      v55 = *(_QWORD *)(v0 + 264);
      v54 = *(_QWORD *)(v0 + 272);
      if (v53)
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Jumbo package contains no payloads", v56, 2u);
        swift_slowDealloc(v56, -1, -1);

        sub_100005AB0(v55, v54);
      }
      else
      {
        sub_100005AB0(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));

      }
    }
    v62 = *(_QWORD *)(v0 + 176);
    v63 = *(_QWORD *)(v0 + 144);
    v64 = *(_QWORD *)(v0 + 152);
    v65 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(v0 + 232))(*v30, *(_QWORD *)(v0 + 184));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v65, v62, v63);
  }
  v67 = *(_QWORD *)(v0 + 216);
  v66 = *(_QWORD *)(v0 + 224);
  v69 = *(_QWORD *)(v0 + 200);
  v68 = *(_QWORD *)(v0 + 208);
  v71 = *(_QWORD *)(v0 + 168);
  v70 = *(_QWORD *)(v0 + 176);
  v72 = *(_QWORD *)(v0 + 160);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 72), 0, 1, *(_QWORD *)(v0 + 144));
  sub_10000CE40((_QWORD *)(v0 + 16));
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000CE40((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v8[20] = a8;
  v8[21] = v17;
  v8[18] = a6;
  v8[19] = a7;
  v8[16] = a4;
  v8[17] = a5;
  v8[14] = a2;
  v8[15] = a3;
  v8[13] = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  v8[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[23] = v10;
  v8[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PayloadMetadata(0);
  v8[25] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v12);
  v8[27] = swift_task_alloc(v12);
  v8[28] = swift_task_alloc(v12);
  v8[29] = swift_task_alloc(v12);
  v8[30] = swift_task_alloc(v12);
  v8[31] = swift_task_alloc(v12);
  v8[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v8[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[34] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[35] = swift_task_alloc(v15);
  v8[36] = swift_task_alloc(v15);
  v8[37] = swift_task_alloc(v15);
  return swift_task_switch(sub_10004BD08, 0, 0);
}

uint64_t sub_10004BD08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Validating credential payload", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[37];
  v7 = v1[33];
  v8 = v1[34];
  v9 = (_QWORD *)v1[14];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[38] = v10;
  v10(v6, v7);
  sub_1000151A4(v9, v9[3]);
  v11 = (_QWORD *)swift_task_alloc(dword_1001789EC);
  v1[39] = v11;
  *v11 = v1;
  v11[1] = sub_10004BE28;
  return sub_1001189B8((uint64_t)(v1 + 2), v1[15], v1[16], v1[17], v1[18], v1[19], v1[20], v1[21]);
}

uint64_t sub_10004BE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004BF74;
  else
    v3 = sub_10004BE8C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004BE8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[5];
  v2 = v0[6];
  sub_1000151A4(v0 + 2, v1);
  v3 = *(int **)(v2 + 8);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[41] = v4;
  *v4 = v0;
  v4[1] = sub_10004BF10;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v6)(v0[32], 0, v1, v2);
}

uint64_t sub_10004BF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004C810;
  else
    v3 = sub_10004C124;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004BF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 176));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000051, 0x80000001001312C0, 431);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C124()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = v0[5];
  v2 = v0[6];
  sub_1000151A4(v0 + 2, v1);
  v3 = *(int **)(v2 + 40);
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[43] = v4;
  *v4 = v0;
  v4[1] = sub_10004C19C;
  return v6(v1, v2);
}

uint64_t sub_10004C19C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10004C9C8;
  else
    v5 = sub_10004C208;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004C208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v2 = *(_QWORD *)(v1 + 352);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 304);
  v4 = *(_QWORD *)(v1 + 288);
  v5 = *(_QWORD *)(v1 + 256);
  v6 = *(_QWORD *)(v1 + 264);
  v8 = *(_QWORD *)(v1 + 240);
  v7 = *(_QWORD *)(v1 + 248);
  v76 = *(_QWORD *)(v1 + 232);
  v79 = *(_QWORD *)(v1 + 224);
  v82 = *(_QWORD *)(v1 + 216);
  v85 = *(_QWORD *)(v1 + 208);
  defaultLogger()(a1);
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v2;
  Logger.sensitive(_:)(sub_100052894, v9);
  swift_task_dealloc(v9);
  v10 = v3(v4, v6);
  defaultLogger()(v10);
  sub_100051968(v5, v7);
  sub_100051968(v5, v8);
  sub_100051968(v5, v76);
  sub_100051968(v5, v79);
  sub_100051968(v5, v82);
  v11 = sub_100051968(v5, v85);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v80 = v13;
    v83 = v12;
    v86 = v1 + 96;
    v14 = *(uint64_t **)(v1 + 240);
    v15 = *(_QWORD *)(v1 + 248);
    v16 = *(_QWORD *)(v1 + 232);
    v71 = *(_QWORD *)(v1 + 224);
    v74 = *(_QWORD *)(v1 + 216);
    v69 = *(_QWORD *)(v1 + 200);
    v17 = swift_slowAlloc(62, -1);
    v77 = swift_slowAlloc(192, -1);
    v88 = v77;
    *(_DWORD *)v17 = 136447490;
    v18 = (id)DCCredentialPayloadFormatToString(*(_QWORD *)(v15 + 16));
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    *(_QWORD *)(v1 + 56) = sub_10003FA80(v19, v21, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v17 + 4);
    swift_bridgeObjectRelease(v21);
    sub_100051BE4(v15);
    *(_WORD *)(v17 + 12) = 2082;
    v22 = *v14;
    v23 = v14[1];
    swift_bridgeObjectRetain(v23);
    *(_QWORD *)(v1 + 64) = sub_10003FA80(v22, v23, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v17 + 14);
    swift_bridgeObjectRelease(v23);
    sub_100051BE4((uint64_t)v14);
    *(_WORD *)(v17 + 22) = 2080;
    v68 = type metadata accessor for Date(0);
    v24 = sub_1000058C8(&qword_100175358, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v68, v24);
    v27 = v26;
    *(_QWORD *)(v1 + 72) = sub_10003FA80(v25, v26, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v17 + 24);
    swift_bridgeObjectRelease(v27);
    sub_100051BE4(v16);
    *(_WORD *)(v17 + 32) = 2080;
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v68, v24);
    v30 = v29;
    *(_QWORD *)(v1 + 80) = sub_10003FA80(v28, v29, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v17 + 34);
    swift_bridgeObjectRelease(v30);
    sub_100051BE4(v71);
    *(_WORD *)(v17 + 42) = 2080;
    v31 = (uint64_t *)(v74 + *(int *)(v69 + 44));
    v32 = v31[1];
    if (v32)
    {
      v33 = *v31;
      v34 = v31[1];
    }
    else
    {
      v33 = 0;
      v34 = 0xE000000000000000;
    }
    v46 = *(_QWORD *)(v1 + 208);
    v45 = *(_QWORD *)(v1 + 216);
    v47 = *(_QWORD *)(v1 + 200);
    swift_bridgeObjectRetain(v32);
    *(_QWORD *)(v1 + 88) = sub_10003FA80(v33, v34, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v86, v17 + 44);
    swift_bridgeObjectRelease(v34);
    sub_100051BE4(v45);
    *(_WORD *)(v17 + 52) = 2080;
    v48 = (uint64_t *)(v46 + *(int *)(v47 + 48));
    v49 = v48[1];
    if (v49)
    {
      v50 = *v48;
      v51 = v48[1];
    }
    else
    {
      v50 = 0;
      v51 = 0xE000000000000000;
    }
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 304);
    v52 = *(_QWORD *)(v1 + 280);
    v53 = *(_QWORD *)(v1 + 264);
    v54 = *(_QWORD *)(v1 + 208);
    swift_bridgeObjectRetain(v49);
    *(_QWORD *)(v1 + 96) = sub_10003FA80(v50, v51, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v1 + 104, v17 + 54);
    swift_bridgeObjectRelease(v51);
    sub_100051BE4(v54);
    _os_log_impl((void *)&_mh_execute_header, v83, v80, "Saving validated payload with format %{public}s, doc type %{public}s, valid from %s, valid until %s, region %s, issuing jurisdiction %s ", (uint8_t *)v17, 0x3Eu);
    swift_arrayDestroy(v77, 6, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v43 = v52;
    v44 = v53;
  }
  else
  {
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 304);
    v36 = *(_QWORD *)(v1 + 280);
    v37 = *(_QWORD *)(v1 + 264);
    v38 = *(_QWORD *)(v1 + 240);
    v40 = *(_QWORD *)(v1 + 224);
    v39 = *(_QWORD *)(v1 + 232);
    v42 = *(_QWORD *)(v1 + 208);
    v41 = *(_QWORD *)(v1 + 216);
    sub_100051BE4(*(_QWORD *)(v1 + 248));
    sub_100051BE4(v38);
    sub_100051BE4(v39);
    sub_100051BE4(v40);
    sub_100051BE4(v41);
    sub_100051BE4(v42);

    v43 = v36;
    v44 = v37;
  }
  v55 = v35(v43, v44);
  v56 = *(_QWORD *)(v1 + 352);
  v58 = *(_QWORD *)(v1 + 296);
  v57 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
  v59 = *(_QWORD *)(v1 + 288);
  v61 = *(uint64_t **)(v1 + 256);
  v60 = *(_QWORD *)(v1 + 264);
  v70 = *(_QWORD *)(v1 + 280);
  v72 = *(_QWORD *)(v1 + 248);
  v73 = *(_QWORD *)(v1 + 240);
  v75 = *(_QWORD *)(v1 + 232);
  v78 = *(_QWORD *)(v1 + 224);
  v81 = *(_QWORD *)(v1 + 216);
  v84 = *(_QWORD *)(v1 + 208);
  v87 = *(_QWORD *)(v1 + 192);
  v62 = *(_QWORD *)(v1 + 104);
  defaultLogger()(v55);
  v63 = swift_task_alloc(32);
  *(_QWORD *)(v63 + 16) = v61;
  Logger.sensitive(_:)(sub_10005289C, v63);
  swift_task_dealloc(v63);
  v57(v59, v60);
  v64 = sub_10012429C();
  v66 = v65;
  sub_100123A60(v61, v56, (uint64_t)v64, v65);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v66);
  sub_1000518B8((uint64_t)v61, v62);
  sub_10000CE40((_QWORD *)(v1 + 16));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v70);
  swift_task_dealloc(v61);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  swift_task_dealloc(v84);
  swift_task_dealloc(v87);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 352));
}

uint64_t sub_10004C810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10000CE40((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 176));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000051, 0x80000001001312C0, 431);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100051BE4(*(_QWORD *)(v0 + 256));
  sub_10000CE40((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 176));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000051, 0x80000001001312C0, 431);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004CB8C(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13)
{
  void *context;

  context = objc_autoreleasePoolPush();
  sub_10004CC54(a1, a2, a3, a4, a5, a6, a7, a8, a9, __PAIR128__(a11, a10), a12, (uint64_t *)(a13 + 16));
  objc_autoreleasePoolPop(context);
}

id sub_10004CC54(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, __int128 a10, unint64_t a11, uint64_t *a12)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[24];
  uint64_t v34;

  v31 = a7;
  v32 = a8;
  v29 = a1;
  v30 = a6;
  v27 = a3;
  v28 = a4;
  v26 = a10;
  v14 = sub_100008E84(&qword_100175AC8);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PayloadMetadata(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100051968(a5, (uint64_t)v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  v21 = *(unsigned __int8 *)(a9 + 9);
  swift_beginAccess(a12, v33, 0, 0);
  v22 = *a12;
  v23 = a12[1];
  sub_10000B178(*a12, v23);
  v24 = v34;
  sub_10004CE18(a2, v27, v28, (uint64_t)v16, v30, v31, v32, v21, (uint64_t)v20, v26, *((uint64_t *)&v26 + 1), a11, v22, v23);
  if (v24)
  {
    sub_1000150E8((uint64_t)v16, &qword_100175AC8);
    return (id)sub_10000B164(v22, v23);
  }
  else
  {
    sub_10000B164(v22, v23);
    sub_1000150E8((uint64_t)v16, &qword_100175AC8);
    sub_100051BE4((uint64_t)v20);
    return sub_1000091F8();
  }
}

void sub_10004CE18(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  Class isa;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  Class v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  unint64_t v63;
  uint8_t *v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  Class v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint8_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSString v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint8_t *v108;
  NSString v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  uint8_t *v115;
  uint8_t *v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  void *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char v135;
  char *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  Class v144;
  uint64_t v145;
  NSString v146;
  Class v147;
  _QWORD *v148;
  Class v149;
  char *v150;
  uint64_t v151;
  NSString v152;
  void *v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  NSObject *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSString v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  id v166;
  id v167;
  Class v168;
  _QWORD v169[4];
  uint64_t v170;
  char *v171;
  void (*v172)(char *, uint64_t);
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  _QWORD *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;

  LODWORD(v199) = a8;
  v205 = (char *)a6;
  v206 = a7;
  v184 = a5;
  v194 = a4;
  v204 = a3;
  v201 = a2;
  v196 = a9;
  v185 = type metadata accessor for SHA256(0);
  v182 = *(_QWORD *)(v185 - 8);
  v15 = __chkstk_darwin(v185);
  v197 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v180 = (char *)&v170 - v17;
  v183 = type metadata accessor for SHA256Digest(0);
  v181 = *(_QWORD *)(v183 - 8);
  v18 = __chkstk_darwin(v183);
  v178 = (char *)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v179 = (char *)&v170 - v20;
  v191 = type metadata accessor for ISO18013KnownDocTypes(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for DIPError.Code(0);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v195 = (char *)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008E84(&qword_100175AC8);
  __chkstk_darwin(v23);
  v193 = (uint64_t)&v170 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for PayloadMetadata(0);
  v192 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v186 = (uint64_t *)((char *)&v170 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v203 = type metadata accessor for Logger(0);
  v198 = *(_QWORD *)(v203 - 8);
  v26 = __chkstk_darwin(v203);
  v28 = (char *)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v170 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v170 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v170 - v36;
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v170 - v39;
  __chkstk_darwin(v38);
  v42 = (char *)&v170 - v41;
  v202 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v45 = (char *)&v170 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v206;
  v206 = a1;
  v47 = v208;
  v48 = sub_1000093E8((uint64_t)v205, v46);
  if (!v47)
  {
    v176 = v42;
    v174 = v40;
    v175 = v37;
    v173 = v34;
    v177 = v31;
    v207 = v48;
    v208 = 0;
    v205 = v28;
    v49 = type metadata accessor for StoredPayload(0);
    v50 = (_QWORD *)v206[2];
    v51 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v49)), "initWithContext:", v50);
    Date.init()(v51);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v53 = *(void (**)(char *, uint64_t))(v43 + 8);
    v54 = v202;
    v53(v45, v202);
    objc_msgSend(v51, "setCreatedAt:", isa);

    Date.init()(v55);
    v56 = Date._bridgeToObjectiveC()().super.isa;
    v53(v45, v54);
    objc_msgSend(v51, "setUpdatedAt:", v56);

    if ((v199 & 1) != 0)
    {
      v206 = v50;
      v58 = v176;
      v59 = defaultLogger()(v57);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.debug.getter();
      v62 = os_log_type_enabled(v60, v61);
      v63 = v204;
      if (v62)
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "insertPayload payload is accessible", v64, 2u);
        v65 = v64;
        v58 = v176;
        swift_slowDealloc(v65, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v198 + 8))(v58, v203);
      v66 = v193;
      sub_100052844(v194, v193);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v66, 1, v200) == 1)
      {
        sub_1000150E8(v66, &qword_100175AC8);
        v67 = v195;
LABEL_30:
        (*(void (**)(char *, _QWORD, uint64_t))(v187 + 104))(v67, enum case for DIPError.Code.internalError(_:), v188);
        v129 = v67;
        v130 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v131 = type metadata accessor for DIPError(0);
        v132 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v131, v132, 0, 0);
        v133 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131070, 0, v129, 0, v130, 0xD000000000000066, 0x8000000100130CF0, 0xD0000000000000AELL, 0x8000000100131090, 186);
        swift_willThrow(v133);
        goto LABEL_31;
      }
      v96 = v186;
      sub_1000518B8(v66, (uint64_t)v186);
      v67 = v195;
      if (!v184)
      {
        sub_100051BE4((uint64_t)v96);
        goto LABEL_30;
      }
      v97 = v208;
      sub_1000C6100(v184);
      if (v97)
      {
        sub_100051BE4((uint64_t)v96);
LABEL_31:

        return;
      }
      v134 = v207;
      v135 = sub_100051D50(v207);
      v208 = 0;
      if ((v135 & 1) != 0)
      {
        if (a14 >> 60 == 15)
        {
          v136 = v195;
          (*(void (**)(char *, _QWORD, uint64_t))(v187 + 104))(v195, enum case for DIPError.Code.idcsInvalidACL(_:), v188);
          v137 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v138 = v134;
          v139 = type metadata accessor for DIPError(0);
          v140 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v139, v140, 0, 0);
          v141 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x8000000100131140, 0, v136, 0, v137, 0xD000000000000066, 0x8000000100130CF0, 0xD0000000000000AELL, 0x8000000100131090, 194);
          swift_willThrow(v141);

          sub_100051BE4((uint64_t)v186);
          return;
        }
        v172 = v53;
        v171 = v45;
        v153 = v51;
        v154 = v134;
        v155 = v186[3];
        v156 = v186[4];
        sub_10000B178(a13, a14);
        sub_100005A38(v155, v156);
        v157 = v208;
        v158 = sub_10005200C(a13, a14, v155, v156);
        v208 = v157;
        if (v157)
        {
          sub_100051BE4((uint64_t)v186);
          sub_100005AB0(v155, v156);
          sub_10000B164(a13, a14);

          return;
        }
        v163 = (uint64_t)v158;
        v164 = v159;
        v205 = (char *)v160;
        sub_100005AB0(v155, v156);
        v165 = type metadata accessor for StoredCryptoKey(0);
        v166 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v165));
        v167 = objc_msgSend(v166, "initWithContext:", v206);
        sub_1000C6314();
        objc_msgSend(v154, "addCryptoKeysObject:", v167);
        objc_msgSend(v153, "setPayloadProtectionKey:", v167);
        objc_msgSend(v153, "setFormat:", 3);
        v168 = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v153, "setPayloadData:", v168);

        objc_msgSend(v153, "setProtectionType:", 2);
        sub_10000B164(a13, a14);

        sub_100005AB0(v163, v164);
        v51 = v153;
        swift_release(v205);
        v45 = v171;
        v53 = v172;
        v63 = v204;
      }
      else
      {
        if ((v96[2] & 0x8000000000000000) != 0)
          __break(1u);
        objc_msgSend(v51, "setFormat:");
        v142 = v96[3];
        v143 = v96[4];
        sub_100005A38(v142, v143);
        v144 = Data._bridgeToObjectiveC()().super.isa;
        sub_100005AB0(v142, v143);
        objc_msgSend(v51, "setPayloadData:", v144);

        objc_msgSend(v51, "setProtectionType:", 0);
      }
      v99 = v196;
      v145 = v186[1];
      swift_bridgeObjectRetain(v145);
      v146 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v145);
      objc_msgSend(v51, "setDocType:", v146);

      v147 = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v51, "setValidFrom:", v147);

      v148 = v186;
      v149 = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v51, "setValidUntil:", v149);

      v150 = (char *)v148 + *(int *)(v200 + 44);
      v151 = *((_QWORD *)v150 + 1);
      if (v151)
      {
        swift_bridgeObjectRetain(*((_QWORD *)v150 + 1));
        v152 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v151);
      }
      else
      {
        v152 = 0;
      }
      objc_msgSend(v51, "setRegion:", v152);

      v161 = *(_QWORD *)((char *)v186 + *(int *)(v200 + 48) + 8);
      v171 = v45;
      if (v161)
      {
        swift_bridgeObjectRetain(v161);
        v162 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v161);
      }
      else
      {
        v162 = 0;
      }
      v125 = v207;
      objc_msgSend(v51, "setIssuingJurisdiction:", v162);

      v121 = v186[5];
      v124 = v186[6];
      sub_1000518B8((uint64_t)v186, v99);
      sub_100005A38(v121, v124);
    }
    else
    {
      v171 = v45;
      v199 = v51;
      v68 = v174;
      v69 = defaultLogger()(v57);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.debug.getter();
      v72 = os_log_type_enabled(v70, v71);
      v73 = v198;
      if (v72)
      {
        v74 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Credential has biometric protection policy; not attempting to validate payload",
          v74,
          2u);
        swift_slowDealloc(v74, -1, -1);
      }

      v75 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
      v76 = v203;
      v77 = v75(v68, v203);
      v78 = v175;
      v79 = defaultLogger()(v77);
      __chkstk_darwin(v79);
      v169[2] = v201;
      v169[3] = v204;
      Logger.sensitive(_:)(sub_100052004, v169);
      v206 = v75;
      v75(v78, v76);
      if (a10 < 0)
      {
        __break(1u);
        JUMPOUT(0x10004E55CLL);
      }
      v51 = v199;
      v198 = a10;
      objc_msgSend(v199, "setFormat:", a10);
      v80 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v51, "setPayloadData:", v80);

      objc_msgSend(v51, "setProtectionType:", 1);
      v81 = v190;
      v82 = v189;
      v83 = v191;
      v84 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v190 + 104))(v189, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v191);
      v85 = ISO18013KnownDocTypes.rawValue.getter(v84);
      v87 = v86;
      v88 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v82, v83);
      v89 = v173;
      defaultLogger()(v88);
      v90 = swift_bridgeObjectRetain_n(v87, 2);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.debug.getter();
      v93 = os_log_type_enabled(v91, v92);
      v172 = v53;
      if (v93)
      {
        v94 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        v210 = v95;
        *(_DWORD *)v94 = 136315138;
        swift_bridgeObjectRetain(v87);
        v209 = sub_10003FA80(v85, v87, &v210);
        v51 = v199;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v94 + 4);
        swift_bridgeObjectRelease_n(v87, 3);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "ISO18013PackageUndecryptablePayloadProcessor assuming doctype %s", v94, 0xCu);
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v94, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v87, 2);
      }
      v98 = v203;
      ((void (*)(char *, uint64_t))v206)(v89, v203);
      v99 = v196;
      v100 = (uint64_t)v205;
      v101 = v85;
      v102 = String._bridgeToObjectiveC()();
      objc_msgSend(v51, "setDocType:", v102);

      v104 = defaultLogger()(v103);
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v105, v106))
      {
        v107 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "ISO18013PackageUndecryptablePayloadProcessor assuming region US", v107, 2u);
        v108 = v107;
        v100 = (uint64_t)v205;
        swift_slowDealloc(v108, -1, -1);
      }

      ((void (*)(char *, uint64_t))v206)(v177, v98);
      v109 = String._bridgeToObjectiveC()();
      objc_msgSend(v51, "setRegion:", v109);

      v111 = defaultLogger()(v110);
      v112 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.debug.getter();
      v114 = os_log_type_enabled(v112, v113);
      v63 = v204;
      if (v114)
      {
        v115 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "ISO18013PackageUndecryptablePayloadProcessor assuming issuing jurisdiction nil", v115, 2u);
        v116 = v115;
        v100 = (uint64_t)v205;
        swift_slowDealloc(v116, -1, -1);
      }

      ((void (*)(uint64_t, uint64_t))v206)(v100, v98);
      v118 = (int *)v200;
      v117 = v201;
      v119 = sub_100005A38(v201, v63);
      v120 = static Date.distantPast.getter(v119);
      static Date.distantFuture.getter(v120);
      v121 = 0;
      *(_QWORD *)v99 = v101;
      *(_QWORD *)(v99 + 8) = v87;
      *(_QWORD *)(v99 + 16) = v198;
      *(_QWORD *)(v99 + 24) = v117;
      *(_QWORD *)(v99 + 32) = v63;
      *(_OWORD *)(v99 + 40) = xmmword_10012A6F0;
      v122 = (_QWORD *)(v99 + v118[10]);
      *v122 = 0;
      v122[1] = 0;
      *(_OWORD *)(v99 + v118[11]) = xmmword_10012AC50;
      v123 = (_QWORD *)(v99 + v118[12]);
      *v123 = 0;
      v123[1] = 0;
      v124 = 0xF000000000000000;
      v125 = v207;
      v53 = v172;
    }
    v126 = (unint64_t)objc_msgSend(v125, "state");
    if ((v126 & 0x8000000000000000) != 0)
    {
      LOBYTE(v169[0]) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v169[0], 3451, 0);
      __break(1u);
      JUMPOUT(0x10004E5BCLL);
    }
    if (v126 == 1)
      objc_msgSend(v125, "setState:", 2);
    v127 = v208;
    sub_10005230C(v125, v51, v121, v124);
    v208 = v127;
    if (!v127)
    {
      v172 = v53;
      if (a12 >> 60 == 15)
      {
        v205 = (char *)v124;
        sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
        dispatch thunk of HashFunction.init()(v185);
        __asm { BR              X10 }
      }
      v199 = v51;
      sub_100005A38(a11, a12);
      sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
      dispatch thunk of HashFunction.init()(v185);
      v128 = (char *)&loc_10004DA68 + dword_10004E5DC[a12 >> 62];
      v206 = (_QWORD *)v121;
      __asm { BR              X9 }
    }
    sub_100051BE4(v99);

    sub_10000B164(v121, v124);
  }
}

uint64_t sub_10004E5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v6[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[12] = v10;
  v6[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v6[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[15] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[16] = swift_task_alloc(v13);
  v6[17] = swift_task_alloc(v13);
  return swift_task_switch(sub_10004E6C4, 0, 0);
}

uint64_t sub_10004E6C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleting device encryption keys", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 112);
  v8 = *(_QWORD *)(v1 + 120);
  v9 = *(_QWORD *)(v1 + 48);

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 144) = v10;
  v10(v6, v7);
  if (v9)
  {
    v11 = *(_QWORD *)(v1 + 48);
    v12 = (_QWORD *)swift_task_alloc(dword_100175AF4);
    *(_QWORD *)(v1 + 152) = v12;
    *v12 = v1;
    v12[1] = sub_10004E814;
    return sub_10004EF10(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), v11);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 128);
    v15 = *(_QWORD *)(v1 + 104);
    v16 = *(_QWORD *)(v1 + 80);
    swift_task_dealloc(*(_QWORD *)(v1 + 136));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10004E814()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[19];
  v3 = *v1;
  v3[20] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10004E950, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_100175AFC);
  v3[21] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_10004E8AC;
  return sub_10004F8C4(v3[4], v3[2], v3[3]);
}

uint64_t sub_10004E8AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10004EB08, 0, 0);
  v5 = *(_QWORD *)(v3 + 128);
  v6 = *(_QWORD *)(v3 + 104);
  v7 = *(_QWORD *)(v3 + 80);
  swift_task_dealloc(*(_QWORD *)(v3 + 136));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10004E950()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v9, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000058, 0x8000000100130DF0, 304);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v6, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v4, v6);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0xD000000000000038, 0x8000000100130E50, v3);
  swift_errorRelease(v1);
  v2(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004EB08()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v9, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000058, 0x8000000100130DF0, 304);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v6, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v4, v6);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0xD000000000000038, 0x8000000100130E50, v3);
  swift_errorRelease(v1);
  v2(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10004ECC0(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE v32[24];
  _BYTE v33[24];
  uint64_t v34;

  v30 = a7;
  v31 = a8;
  v28 = a1;
  v29 = a6;
  v27 = a4;
  v14 = sub_100008E84(&qword_100175AC8);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PayloadMetadata(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_projectBox(a5);
  swift_beginAccess(v20, v33, 0, 0);
  sub_100052844(v20, (uint64_t)v16);
  v21 = *(unsigned __int8 *)(a9 + 9);
  swift_beginAccess(a11 + 16, v32, 0, 0);
  v22 = *(_QWORD *)(a11 + 16);
  v23 = *(_QWORD *)(a11 + 24);
  sub_10000B178(v22, v23);
  v24 = v34;
  sub_10004CE18(a2, a3, v27, (uint64_t)v16, v29, v30, v31, v21, (uint64_t)v19, a10, 0, 0xF000000000000000, v22, v23);
  if (v24)
  {
    sub_1000150E8((uint64_t)v16, &qword_100175AC8);
    return (id)sub_10000B164(v22, v23);
  }
  else
  {
    sub_10000B164(v22, v23);
    sub_1000150E8((uint64_t)v16, &qword_100175AC8);
    sub_100051BE4((uint64_t)v19);
    return sub_1000091F8();
  }
}

unint64_t sub_10004EE84()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000020;
}

uint64_t sub_10004EF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[16] = v8;
  v6[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v6[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[19] = v10;
  v6[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v6[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[22] = v12;
  v6[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v6[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[25] = v14;
  v6[26] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004EFF0, 0, 0);
}

uint64_t sub_10004EFF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0[25];
  v18 = v0[26];
  v2 = v0[24];
  v4 = v0[13];
  v3 = v0[14];
  v6 = v0[11];
  v5 = v0[12];
  v8 = v0[9];
  v7 = v0[10];
  v9 = (_QWORD *)swift_allocObject(&unk_1001690B8, 64, 7);
  v0[27] = v9;
  v9[2] = v3;
  v9[3] = v7;
  v9[4] = v6;
  v9[5] = v8;
  v9[6] = v5;
  v9[7] = v4;
  v10 = swift_allocObject(&unk_1001690E0, 32, 7);
  v0[28] = v10;
  *(_QWORD *)(v10 + 16) = sub_100051CF4;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 104);
  swift_retain(v3);
  swift_bridgeObjectRetain(v6);
  swift_retain(v8);
  v13 = swift_bridgeObjectRetain(v4);
  v12(v18, v11, v2, v13);
  v14 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v9);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v0[29] = v15;
  v16 = sub_100008E84(&qword_100177CB0);
  *v15 = v0;
  v15[1] = sub_10004F144;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 8, v0[26], sub_100051C70, v10, v16);
}

uint64_t sub_10004F144()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[28];
    (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[26], v2[24]);
    swift_release(v4);
    v5 = sub_10004F318;
  }
  else
  {
    v6 = v2[27];
    v7 = v2[28];
    (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[26], v2[24]);
    swift_release(v7);
    swift_release(v6);
    v2[31] = v2[8];
    v5 = sub_10004F1F8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004F1F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD **)(v0 + 248);
  v2 = v1[2];
  *(_QWORD *)(v0 + 256) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 112);
    *(_DWORD *)(v0 + 320) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v0 + 264) = v3;
    *(_QWORD *)(v0 + 272) = 0;
    v4 = v1[4];
    *(_QWORD *)(v0 + 280) = v4;
    v5 = (void *)v1[5];
    *(_QWORD *)(v0 + 288) = v5;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v6._countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 296) = v8;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 304) = v9;
    *v9 = v0;
    v9[1] = sub_10004F380;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v7, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(v1);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004F318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F380()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 296));
  if (v0)
    v4 = sub_10004F510;
  else
    v4 = sub_10004F3EC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10004F3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  v1 = *(_QWORD *)(v0 + 272) + 1;
  if (v1 == *(_QWORD *)(v0 + 256))
  {
    v2 = *(_QWORD *)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 272) = v1;
    v7 = *(_QWORD *)(v0 + 248) + 16 * v1;
    v8 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v0 + 280) = v8;
    v9 = *(void **)(v7 + 40);
    *(_QWORD *)(v0 + 288) = v9;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    v11 = *(_QWORD *)(v0 + 16);
    v12 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 296) = v12;
    v13 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 304) = v13;
    *v13 = v0;
    v13[1] = sub_10004F380;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v11, v12);
  }
}

uint64_t sub_10004F510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 312);
  v34 = *(Swift::String *)(v0 + 280);
  v2 = *(unsigned int *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 160);
  v33 = *(_QWORD *)(v0 + 152);
  v35 = *(_QWORD *)(v0 + 136);
  v36 = *(_QWORD *)(v0 + 128);
  v37 = *(_QWORD *)(v0 + 120);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 104);
  v6(v3, v2, v4);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v7, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000020, 0x8000000100130E90, 201);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v6(v3, v2, v4);
  swift_errorRetain(v9);
  v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v3, 0, v11, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000057, 0x8000000100130F90, 479);
  v12 = swift_allocError(v5, v8, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v13, v32, v5);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v14 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 40) = v14;
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x8000000100130F10;
  String.append(_:)(v15);
  String.append(_:)(v34);
  v16 = swift_bridgeObjectRelease(v34._object);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 40);
  defaultLogger()(v16);
  DIPRecordError(_:message:log:)(v12, v17, v18, v35);
  swift_bridgeObjectRelease(v18);
  swift_errorRelease(v9);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v5);
  swift_errorRelease(v12);
  v19 = *(_QWORD *)(v0 + 272) + 1;
  if (v19 == *(_QWORD *)(v0 + 256))
  {
    v20 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 184);
    v22 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 272) = v19;
    v25 = *(_QWORD *)(v0 + 248) + 16 * v19;
    v26 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v0 + 280) = v26;
    v27 = *(void **)(v25 + 40);
    *(_QWORD *)(v0 + 288) = v27;
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v28._countAndFlagsBits = v26;
    v28._object = v27;
    String.append(_:)(v28);
    v29 = *(_QWORD *)(v0 + 16);
    v30 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 296) = v30;
    v31 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 304) = v31;
    *v31 = v0;
    v31[1] = sub_10004F380;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v29, v30);
  }
}

uint64_t sub_10004F8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v4[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v4[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[17] = v8;
  v4[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v4[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[23] = v12;
  v4[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004F9A0, 0, 0);
}

uint64_t sub_10004F9A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[23];
  v1 = v0[24];
  v3 = v0[22];
  v5 = v0[11];
  v4 = v0[12];
  v7 = v0[9];
  v6 = v0[10];
  v8 = (_QWORD *)swift_allocObject(&unk_100169068, 48, 7);
  v0[25] = v8;
  v8[2] = v4;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100169090, 32, 7);
  v0[26] = v9;
  *(_QWORD *)(v9 + 16) = sub_100051C54;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[27] = v13;
  v14 = sub_100008E84(&qword_100177CB0);
  *v13 = v0;
  v13[1] = sub_10004FAE0;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 8, v0[24], sub_100051C70, v9, v14);
}

uint64_t sub_10004FAE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[26];
    (*(void (**)(_QWORD, _QWORD))(v2[23] + 8))(v2[24], v2[22]);
    swift_release(v4);
    v5 = sub_10004FCB4;
  }
  else
  {
    v6 = v2[25];
    v7 = v2[26];
    (*(void (**)(_QWORD, _QWORD))(v2[23] + 8))(v2[24], v2[22]);
    swift_release(v7);
    swift_release(v6);
    v2[29] = v2[8];
    v5 = sub_10004FB94;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004FB94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD **)(v0 + 232);
  v2 = v1[2];
  *(_QWORD *)(v0 + 240) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 112);
    *(_DWORD *)(v0 + 304) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v0 + 248) = v3;
    *(_QWORD *)(v0 + 256) = 0;
    v4 = v1[4];
    *(_QWORD *)(v0 + 264) = v4;
    v5 = (void *)v1[5];
    *(_QWORD *)(v0 + 272) = v5;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v6._countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 280) = v8;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 288) = v9;
    *v9 = v0;
    v9[1] = sub_10004FD1C;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v7, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(v1);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004FCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FD1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 280));
  if (v0)
    v4 = sub_10004FEAC;
  else
    v4 = sub_10004FD88;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10004FD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 256) + 1;
  if (v1 == *(_QWORD *)(v0 + 240))
  {
    v2 = *(_QWORD *)(v0 + 192);
    v3 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 256) = v1;
    v7 = *(_QWORD *)(v0 + 232) + 16 * v1;
    v8 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v0 + 264) = v8;
    v9 = *(void **)(v7 + 40);
    *(_QWORD *)(v0 + 272) = v9;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    v11 = *(_QWORD *)(v0 + 16);
    v12 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 280) = v12;
    v13 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 288) = v13;
    *v13 = v0;
    v13[1] = sub_10004FD1C;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v11, v12);
  }
}

uint64_t sub_10004FEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 296);
  v34 = *(Swift::String *)(v0 + 264);
  v2 = *(unsigned int *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v32 = *(_QWORD *)(v0 + 144);
  v33 = *(_QWORD *)(v0 + 136);
  v35 = *(_QWORD *)(v0 + 120);
  v36 = *(_QWORD *)(v0 + 112);
  v37 = *(_QWORD *)(v0 + 104);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 104);
  v6(v3, v2, v4);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v7, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000020, 0x8000000100130E90, 201);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v6(v3, v2, v4);
  swift_errorRetain(v9);
  v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v3, 0, v11, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000046, 0x8000000100130EC0, 514);
  v12 = swift_allocError(v5, v8, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v13, v32, v5);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v14 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 40) = v14;
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x8000000100130F10;
  String.append(_:)(v15);
  String.append(_:)(v34);
  v16 = swift_bridgeObjectRelease(v34._object);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 40);
  defaultLogger()(v16);
  DIPRecordError(_:message:log:)(v12, v17, v18, v35);
  swift_bridgeObjectRelease(v18);
  swift_errorRelease(v9);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v5);
  swift_errorRelease(v12);
  v19 = *(_QWORD *)(v0 + 256) + 1;
  if (v19 == *(_QWORD *)(v0 + 240))
  {
    v20 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 256) = v19;
    v25 = *(_QWORD *)(v0 + 232) + 16 * v19;
    v26 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v0 + 264) = v26;
    v27 = *(void **)(v25 + 40);
    *(_QWORD *)(v0 + 272) = v27;
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(v0 + 16) = 778790244;
    *(_QWORD *)(v0 + 24) = 0xE400000000000000;
    v28._countAndFlagsBits = v26;
    v28._object = v27;
    String.append(_:)(v28);
    v29 = *(_QWORD *)(v0 + 16);
    v30 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 280) = v30;
    v31 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 288) = v31;
    *v31 = v0;
    v31[1] = sub_10004FD1C;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v29, v30);
  }
}

uint64_t sub_100050260(uint64_t a1, unint64_t a2)
{
  void *object;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  Swift::String v6;
  void *v7;

  object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v4._object = (void *)0x8000000100131240;
  v4._countAndFlagsBits = 0xD000000000000048;
  String.append(_:)(v4);
  if (a2 >> 60 == 15)
  {
    countAndFlagsBits = 0;
  }
  else
  {
    v6 = Data.base16EncodedString()();
    countAndFlagsBits = v6._countAndFlagsBits;
    object = v6._object;
  }
  v7 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(object);
  return 0;
}

unint64_t sub_100050308(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = sub_100008E84(&qword_100177CB0);
  v3._countAndFlagsBits = Dictionary.description.getter(a1, &type metadata for String, v2, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000028;
}

unint64_t sub_1000503A4()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001ELL;
}

void sub_100050420(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char **a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  char **v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char **v74;
  void *v75;
  char *v76;
  uint64_t v77;

  v72 = a5;
  v73 = a6;
  v75 = a3;
  v76 = a1;
  v74 = a7;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v65 - v18;
  v20 = a2;
  v21 = a4;
  v22 = v77;
  v23 = sub_1000093E8(v20, v75);
  if (!v22)
  {
    v24 = v23;
    v76 = v19;
    v25 = v74;
    v67 = v21;
    v68 = v9;
    v69 = v10;
    v70 = v12;
    v77 = v13;
    v26 = sub_100051D50(v23);
    v75 = v24;
    if ((v26 & 1) != 0)
    {
      v27 = v76;
      v28 = defaultLogger()(v26);
      __chkstk_darwin(v28);
      v63 = v72;
      v64 = v73;
      Logger.cryptoParam(_:)(sub_100051FC8, &v62);
      v29 = *(void (**)(char *, uint64_t))(v14 + 8);
      v29(v27, v77);
      v30 = (uint64_t)sub_1000C4FBC();
      v31 = v25;
      v32 = v30;
      if ((unint64_t)v30 >> 62)
      {
        if (v30 < 0)
          v55 = v30;
        else
          v55 = v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v30);
        v33 = _CocoaArrayWrapper.endIndex.getter(v55);
        swift_bridgeObjectRelease(v32);
        v65 = 0;
        if (v33)
          goto LABEL_5;
      }
      else
      {
        v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
        v65 = 0;
        if (v33)
        {
LABEL_5:
          v66 = v29;
          if (v33 < 1)
          {
            __break(1u);
            return;
          }
          v34 = 0;
          v71 = v32 & 0xC000000000000001;
          v35 = (char *)_swiftEmptyArrayStorage;
          do
          {
            if (v71)
              v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v32);
            else
              v36 = *(id *)(v32 + 8 * v34 + 32);
            v37 = v36;
            v38 = objc_msgSend(v36, "identifier", v65);
            if (v38)
            {
              v39 = v38;
              v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
              v42 = v41;

              v44 = v40 == v72 && v42 == v73;
              if (v44 || (v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v72, v73, 0), (v43 & 1) != 0))
              {
                v45 = v76;
                v46 = defaultLogger()(v43);
                __chkstk_darwin(v46);
                v63 = v40;
                v64 = v42;
                Logger.cryptoParam(_:)(sub_100051FFC, &v62);
                v66(v45, v77);
                objc_msgSend(v75, "removeCryptoKeysObject:", v37);
                if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
                  v35 = sub_1000A73AC(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
                v48 = *((_QWORD *)v35 + 2);
                v47 = *((_QWORD *)v35 + 3);
                if (v48 >= v47 >> 1)
                  v35 = sub_1000A73AC((char *)(v47 > 1), v48 + 1, 1, v35);
                *((_QWORD *)v35 + 2) = v48 + 1;
                v49 = &v35[16 * v48];
                *((_QWORD *)v49 + 4) = v40;
                *((_QWORD *)v49 + 5) = v42;
                v31 = v74;
              }
              else
              {
                swift_bridgeObjectRelease(v42);
              }
            }
            ++v34;

          }
          while (v33 != v34);
          goto LABEL_31;
        }
      }
      v35 = (char *)_swiftEmptyArrayStorage;
LABEL_31:
      swift_bridgeObjectRelease(v32);
      v56 = v65;
      sub_1000091F8();
      if (v56)
      {
        swift_bridgeObjectRelease(v35);
        v57 = v70;
        (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v70, enum case for DIPError.Code.internalError(_:), v68);
        swift_errorRetain(v56);
        v58 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v59 = type metadata accessor for DIPError(0);
        v60 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v59, v60, 0, 0);
        v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v56, v57, 0, v58, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000057, 0x8000000100130F90, 469);
        swift_willThrow(v61);
        swift_errorRelease(v56);

      }
      else
      {

        *v31 = v35;
      }
      return;
    }
    v50 = defaultLogger()(v26);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    v53 = v25;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Credential payload protection policy does not use biometric auth, skipping deletion of device encryption key", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v77);
    *v53 = (char *)_swiftEmptyArrayStorage;
  }
}

unint64_t sub_10005097C(uint64_t a1, void *a2)
{
  Swift::String v4;

  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000030;
}

void sub_1000509F8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  uint8_t *v28;
  uint8_t *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, _QWORD, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char v53;
  void (*v54)(char *, uint64_t);
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[4];
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  unsigned int v79;
  id v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unsigned int v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v81 = a4;
  v85 = a2;
  v86 = a3;
  v87 = a1;
  v75 = a5;
  v5 = type metadata accessor for DIPError.Code(0);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100174840);
  __chkstk_darwin(v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CredentialKeyUsage(0);
  v94 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v73 - v15;
  v88 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v88 - 8);
  v18 = __chkstk_darwin(v88);
  v82 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v73 - v21;
  v23 = defaultLogger()(v20);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v83 = v10;
  if (v26)
  {
    v27 = v7;
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Deleting all device encryption auth required keys", v28, 2u);
    v29 = v28;
    v7 = v27;
    v10 = v83;
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30(v22, v88);
  v31 = v89;
  v32 = sub_1000093E8(v85, v86);
  if (!v31)
  {
    v78 = v30;
    v80 = v32;
    v33 = (uint64_t)sub_1000C4FBC();
    v34 = v33;
    v74 = 0;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0)
        v71 = v33;
      else
        v71 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v35 = _CocoaArrayWrapper.endIndex.getter(v71);
      swift_bridgeObjectRelease(v34);
    }
    else
    {
      v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v36 = v94;
    v73 = v7;
    if (v35)
    {
      if (v35 >= 1)
      {
        v37 = 0;
        v85 = v34 & 0xC000000000000001;
        v79 = enum case for CredentialKeyUsage.invalid(_:);
        v84 = enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:);
        v89 = (char *)_swiftEmptyArrayStorage;
        v86 = (void *)v35;
        v87 = v34;
        while (1)
        {
          if (v85)
            v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v34);
          else
            v40 = *(id *)(v34 + 8 * (_QWORD)v37 + 32);
          v41 = v40;
          v42 = objc_msgSend(v40, "usage", v73);
          if (v42)
          {
            v43 = v42;
            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
            v46 = v45;

            v47 = v44;
            v36 = v94;
            CredentialKeyUsage.init(rawValue:)(v47, v46);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v10, 1, v11) != 1)
            {
              (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v16, v10, v11);
              v48 = *(void (**)(char *, _QWORD, uint64_t))(v36 + 104);
              goto LABEL_19;
            }
            sub_1000150E8((uint64_t)v10, &qword_100174840);
          }
          v48 = *(void (**)(char *, _QWORD, uint64_t))(v36 + 104);
          v48(v16, v79, v11);
LABEL_19:
          v48(v14, v84, v11);
          v49 = sub_1000058C8(&qword_100174848, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialKeyUsage, (uint64_t)&protocol conformance descriptor for CredentialKeyUsage);
          dispatch thunk of RawRepresentable.rawValue.getter(&v92, v11, v49);
          dispatch thunk of RawRepresentable.rawValue.getter(&v90, v11, v49);
          v50 = v93;
          v51 = v91;
          if (v92 == v90 && v93 == v91)
          {
            swift_bridgeObjectRelease_n(v93, 2);
            v36 = v94;
            v52 = *(void (**)(char *, uint64_t))(v94 + 8);
            v52(v14, v11);
            v52(v16, v11);
LABEL_23:
            v55 = objc_msgSend(v41, "identifier");
            if (v55)
            {
              v56 = v55;
              v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
              v59 = v58;

              v60 = v82;
              v62 = defaultLogger()(v61);
              __chkstk_darwin(v62);
              v72[2] = v57;
              v72[3] = v59;
              Logger.cryptoParam(_:)(sub_100051C84, v72);
              v78(v60, v88);
              objc_msgSend(v80, "removeCryptoKeysObject:", v41);
              if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
                v89 = sub_1000A73AC(0, *((_QWORD *)v89 + 2) + 1, 1, v89);
              v64 = *((_QWORD *)v89 + 2);
              v63 = *((_QWORD *)v89 + 3);
              if (v64 >= v63 >> 1)
                v89 = sub_1000A73AC((char *)(v63 > 1), v64 + 1, 1, v89);
              v38 = v89;
              *((_QWORD *)v89 + 2) = v64 + 1;
              v39 = &v38[16 * v64];
              *((_QWORD *)v39 + 4) = v57;
              *((_QWORD *)v39 + 5) = v59;
              v10 = v83;
              v36 = v94;
            }
            goto LABEL_10;
          }
          v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v93, v90, v91, 0);
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease(v51);
          v36 = v94;
          v54 = *(void (**)(char *, uint64_t))(v94 + 8);
          v54(v14, v11);
          v54(v16, v11);
          if ((v53 & 1) != 0)
            goto LABEL_23;
LABEL_10:
          v37 = (char *)v37 + 1;

          v34 = v87;
          if (v86 == v37)
            goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
      v89 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
      swift_bridgeObjectRelease(v34);
      v65 = v74;
      sub_1000091F8();
      if (v65)
      {
        swift_bridgeObjectRelease(v89);
        v66 = v73;
        (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v73, enum case for DIPError.Code.internalError(_:), v77);
        swift_errorRetain(v65);
        v67 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v68 = type metadata accessor for DIPError(0);
        v69 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v68, v69, 0, 0);
        v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v65, v66, 0, v67, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000046, 0x8000000100130EC0, 505);
        swift_willThrow(v70);
        swift_errorRelease(v65);

      }
      else
      {

        *v75 = v89;
      }
    }
  }
}

uint64_t sub_1000510E0(uint64_t a1, void *a2, Swift::Int a3, uint64_t a4, void *a5)
{
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(a3);
  v9._countAndFlagsBits = a4;
  v9._object = a5;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  return 0;
}

void sub_100051160(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  uint8_t *v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  char **v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  unint64_t v67;

  v65 = a8;
  v66 = a7;
  v67 = a6;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000093E8(a2, a3);
  if (v8)
    return;
  v19 = v18;
  v20 = v17;
  v62 = v15;
  v63 = a1;
  v64 = v14;
  v21 = v66;
  v61 = a4;
  v22 = v67;
  sub_10000A7A4((uint64_t)v18, a5, v67);
  if ((v23 & 1) != 0)
  {
    v24 = v20;
    v25 = defaultLogger()(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = v19;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Skipping payload ingestion because new payload data matches existing ingestion hash", v29, 2u);
      v30 = v29;
      v19 = v28;
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v64);
    v31 = v65;
    *v65 = 0;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = 1;
    v31[4] = 0;
    v31[5] = 0;
    return;
  }
  v32 = objc_msgSend(v19, "options");
  if (v32)
  {
    v33 = v32;
    v34 = (unint64_t)objc_msgSend(v32, "payloadProtectionPolicy");
    if ((v34 & 0x8000000000000000) != 0)
      goto LABEL_34;
    v35 = v34;
    v36 = v21;

  }
  else
  {
    v35 = 0;
    v36 = v21;
  }
  v37 = v63;
  sub_1000151A4((_QWORD *)(v63 + 32), *(_QWORD *)(v63 + 56));
  v38 = (char *)sub_10000B18C((uint64_t)v19, a5, v22, (uint64_t)v36);
  LODWORD(v37) = sub_100009E8C(v37 + 72, v36, v38);
  v39 = (uint64_t)sub_1000C4E40();
  v40 = v39;
  v60 = v19;
  v66 = (char *)v35;
  LODWORD(v67) = v37;
  if (!((unint64_t)v39 >> 62))
  {
    v41 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    v42 = v61;
    if (!v41)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (v39 >= 0)
    v39 &= 0xFFFFFFFFFFFFFF8uLL;
  v41 = _CocoaArrayWrapper.endIndex.getter(v39);
  v42 = v61;
  if (v41)
  {
LABEL_12:
    if (v41 >= 1)
    {
      v43 = 0;
      v44 = *(void **)(v42 + 16);
      do
      {
        if ((v40 & 0xC000000000000001) != 0)
          v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v40);
        else
          v45 = *(id *)(v40 + 8 * v43 + 32);
        v46 = v45;
        ++v43;
        objc_msgSend(v44, "deleteObject:", v45);

      }
      while (v41 != v43);
      goto LABEL_21;
    }
    __break(1u);
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return;
  }
LABEL_21:
  swift_bridgeObjectRelease(v40);
  if (!v38)
  {

    v51 = 0;
    v53 = 0;
    v48 = 0;
    v57 = 0;
    v49 = (char **)v65;
    goto LABEL_29;
  }
  v47 = objc_msgSend(v38, "identifier");
  v48 = v47;
  v49 = (char **)v65;
  v50 = v60;
  if (!v47)
  {

    v51 = 0;
    v53 = 0;
LABEL_28:
    v57 = 0;
    goto LABEL_29;
  }
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v53 = v52;

  v54 = objc_msgSend(v38, "publicKeyIdentifier");
  if (!v54)
  {

    swift_bridgeObjectRelease(v53);
    v51 = 0;
    v53 = 0;
    v48 = 0;
    goto LABEL_28;
  }
  v55 = v54;
  v48 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v57 = v56;

LABEL_29:
  v58 = 256;
  if ((v67 & 1) == 0)
    v58 = 0;
  *v49 = v66;
  v49[1] = (char *)v58;
  v49[2] = (char *)v51;
  v49[3] = v53;
  v49[4] = (char *)v48;
  v49[5] = v57;
}

uint64_t sub_100051590(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_100051654(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100177084);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100177080 + dword_100177080))(a1, a2, v6);
}

uint64_t sub_1000516D4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_100005AB0(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100051708()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_100005AB0(v0[4], v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  v1 = v0[13];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    sub_100005AB0(v0[14], v0[15]);
  }
  swift_release(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

id sub_100051770()
{
  uint64_t v0;

  return sub_10004ECC0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD **)(v0 + 72), v0 + 80, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

void sub_1000517AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 != 1)
    sub_1000517CC(a3, a4, a5, a6);
}

uint64_t sub_1000517CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return sub_100005A38(a3, a4);
  }
  return result;
}

uint64_t sub_100051804()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_100051828(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

void sub_100051860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 != 1)
    sub_100051880(a3, a4, a5, a6);
}

uint64_t sub_100051880(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_100005AB0(a3, a4);
  }
  return result;
}

uint64_t sub_1000518B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000518FC@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_100051938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_100051968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000519AC()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for PayloadMetadata(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_100005AB0(v0[4], v0[5]);
  v8 = (char *)v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 8));
  sub_100005AB0(*((_QWORD *)v8 + 3), *((_QWORD *)v8 + 4));
  sub_100005AB0(*((_QWORD *)v8 + 5), *((_QWORD *)v8 + 6));
  v9 = (char *)v0 + v4 + v1[8];
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(&v8[v1[9]], v10);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v1[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v1[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v1[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v5));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v6 + 8));
  v12 = *(_QWORD *)((char *)v0 + v7 + 24);
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    sub_100005AB0(*(_QWORD *)((char *)v0 + v7 + 32), *(_QWORD *)((char *)v0 + v7 + 40));
  }
  v13 = (((v7 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100005AB0(*(_QWORD *)((char *)v0 + v13), *(_QWORD *)((char *)v0 + v13 + 8));
  swift_release(*(_QWORD *)((char *)v0 + v14));
  return swift_deallocObject(v0, v14 + 8, v3 | 7);
}

void sub_100051B28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for PayloadMetadata(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 55) & 0xFFFFFFFFFFFFFFF8;
  sub_10004CB8C(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD **)(v0 + v4 + 8), v0 + v5, *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100051BE4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100051C20()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100051C54(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000509F8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

_QWORD *sub_100051C70@<X0>(_QWORD *a1@<X8>)
{
  return sub_100051D14(a1);
}

uint64_t sub_100051C84()
{
  uint64_t v0;

  return sub_1000510E0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), 64, 0xD00000000000003ELL, (void *)0x8000000100130F50);
}

uint64_t sub_100051CB8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_100051CF4(char **a1@<X8>)
{
  uint64_t v1;

  sub_100050420(*(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
}

_QWORD *sub_100051D14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_100051D50(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "options");
  if (v7)
  {
    v8 = v7;
    v9 = (unint64_t)objc_msgSend(v7, "payloadProtectionPolicy");
    if ((v9 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
      return result;
    }
    v10 = v9;

  }
  else
  {
    v10 = 0;
  }
  v11 = defaultLogger()(v7);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v28 = v1;
    v14 = swift_slowAlloc(12, -1);
    v26 = v4;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v31 = v16;
    *(_DWORD *)v15 = 136315138;
    v24 = v15 + 4;
    v17 = (id)DCCredentialPayloadProtectionPolicyToString(v10);
    v25 = v3;
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v27 = v10;
    v21 = v20;

    v29 = sub_10003FA80(v19, v21, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24);
    v22 = v21;
    v10 = v27;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Credential payload protection policy: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v10 != 0;
}

uint64_t sub_100051FC8()
{
  uint64_t v0;

  return sub_1000510E0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), 58, 0xD000000000000038, (void *)0x8000000100131030);
}

unint64_t sub_100051FFC()
{
  uint64_t v0;

  return sub_10005097C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100052004()
{
  return sub_10004EE84();
}

NSObject *sub_10005200C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  char *v21;
  uint8_t *v22;
  uint8_t *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = v4;
  v41 = a3;
  v42 = a4;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v38 - v14;
  v16 = defaultLogger()(v13);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v40 = (char *)a1;
    v20 = v8;
    v21 = v12;
    v22 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "encryptPayloadWithNewProtectionKey called", v19, 2u);
    v23 = v22;
    v12 = v21;
    v8 = v20;
    v5 = v4;
    a1 = (uint64_t)v40;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v15, v8);
  v25 = sub_1001054BC(a1, a2);
  if (!v5)
  {
    v26 = (uint64_t)v25;
    defaultLogger()(v25);
    v27 = swift_retain(v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v45 = v39;
      v40 = v12;
      *(_DWORD *)v30 = 136315138;
      v38 = v30 + 4;
      v32 = *(_QWORD *)(v26 + 16);
      v31 = *(_QWORD *)(v26 + 24);
      swift_bridgeObjectRetain(v31);
      v43 = sub_10003FA80(v32, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v38);
      swift_release(v26);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Created new payload protection key %s", v30, 0xCu);
      v33 = v39;
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v34 = v40;
    }
    else
    {

      swift_release(v26);
      v34 = v12;
    }
    v24(v34, v8);
    v35 = v41;
    v36 = v42;
    swift_retain(v26);
    v17 = sub_1000FC16C(v35, v36, v26);
    swift_release(v26);
  }
  return v17;
}

void sub_10005230C(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  id v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  void *object;
  Swift::String v41;
  uint64_t countAndFlagsBits;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  Swift::String v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63[16];
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;

  v68 = a2;
  v8 = type metadata accessor for DIPError.Code(0);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  __chkstk_darwin(v8);
  v61 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v62 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v57 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v57 - v18;
  defaultLogger()(v17);
  v64 = a3;
  v65 = a4;
  Logger.cryptoParam(_:)(sub_10005288C, v63);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v19, v10);
  if (a4 >> 60 == 15)
  {
    sub_1000C68DC();
    if (v4)
      return;
    v22 = v21;
LABEL_4:
    if (!v22)
      goto LABEL_16;
LABEL_10:
    objc_msgSend(v68, "setPresentmentKey:", v22);

    return;
  }
  sub_100005A38(a3, a4);
  v23 = sub_1000C65D8(a3, a4);
  if (v4)
  {
    sub_10000B164(a3, a4);
    return;
  }
  v22 = (void *)v23;
  if (v23)
  {
    sub_10000B164(a3, a4);
    goto LABEL_10;
  }
  v24 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v25._object = (void *)0x8000000100131210;
  v25._countAndFlagsBits = 0xD000000000000027;
  LODWORD(v58) = NSUserDefaults.internalBool(forKey:)(v25);

  if ((v58 & 1) != 0)
  {
    v27 = defaultLogger()(v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    v58 = v28;
    v30 = v28;
    v31 = v29;
    if (os_log_type_enabled(v30, v29))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      v33 = v31;
      v34 = v32;
      _os_log_impl((void *)&_mh_execute_header, v58, v33, "Allowing payload without matching presentment key due to user defaults setting", v32, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v20(v16, v10);
    sub_1000C68DC();
    v22 = v35;
    sub_10000B164(a3, a4);
    goto LABEL_4;
  }
  sub_10000B164(a3, a4);
LABEL_16:
  v36 = objc_msgSend(a1, "options");
  if (!v36)
    goto LABEL_21;
  v37 = v36;
  v38 = (unint64_t)objc_msgSend(v36, "presentmentAuthPolicy");
  if ((v38 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return;
  }
  v39 = v38;

  if (v39)
  {
    object = (void *)0xE000000000000000;
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v41._countAndFlagsBits = 0xD00000000000003CLL;
    v41._object = (void *)0x8000000100131180;
    String.append(_:)(v41);
    if (a4 >> 60 == 15)
    {
      countAndFlagsBits = 0;
    }
    else
    {
      v48 = Data.base16EncodedString()();
      countAndFlagsBits = v48._countAndFlagsBits;
      object = v48._object;
    }
    v49 = object;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    swift_bridgeObjectRelease(object);
    v50 = v66;
    v51 = v67;
    v52 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v61, enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:), v60);
    v53 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v54 = type metadata accessor for DIPError(0);
    v55 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v54, v55, 0, 0);
    v56 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v51, 0, v52, 0, v53, 0xD000000000000066, 0x8000000100130CF0, 0xD000000000000041, 0x80000001001311C0, 393);
    swift_willThrow(v56);
  }
  else
  {
LABEL_21:
    v43 = v62;
    v44 = defaultLogger()(v36);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Skipping presentment key associated because credential auth policy is notRequired", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v20(v43, v10);
  }
}

uint64_t sub_100052844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100175AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005288C()
{
  uint64_t v0;

  return sub_100050260(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100052894()
{
  uint64_t v0;

  return sub_100050308(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10005289C()
{
  return sub_1000503A4();
}

uint64_t sub_1000528A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  sub_100005AB0(v0[6], v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_1000528E0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100051160(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(char **)(v1 + 64), a1);
}

uint64_t _s8DBResultVwxx(_QWORD *a1)
{
  uint64_t result;

  result = a1[3];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_100005AB0(a1[4], a1[5]);
  }
  return result;
}

uint64_t _s8DBResultVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v3;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v3);
    sub_100005A38(v4, v5);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t _s8DBResultVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v5 = (_OWORD *)(a1 + 16);
  v6 = a2 + 2;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = a2[3];
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      v9 = a2[3];
      *(_QWORD *)(a1 + 24) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v7);
      v11 = a2[4];
      v10 = a2[5];
      sub_100005A38(v11, v10);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v10;
      sub_100005AB0(v12, v13);
    }
    else
    {
      sub_100052A9C((_QWORD *)(a1 + 16));
      v17 = v6[1];
      *v5 = *v6;
      v5[1] = v17;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    v14 = a2[3];
    *(_QWORD *)(a1 + 24) = v14;
    v16 = a2[4];
    v15 = a2[5];
    swift_bridgeObjectRetain(v14);
    sub_100005A38(v16, v15);
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(a1 + 40) = v15;
  }
  else
  {
    v18 = *((_OWORD *)a2 + 2);
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v18;
  }
  return a1;
}

_QWORD *sub_100052A9C(_QWORD *a1)
{
  destroy for KeyLookupInfo(a1);
  return a1;
}

__n128 _s8DBResultVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s8DBResultVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v3 = a1 + 16;
  v4 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    sub_100052A9C((_QWORD *)v3);
LABEL_5:
    v10 = v4[1];
    *(_OWORD *)v3 = *v4;
    *(_OWORD *)(v3 + 16) = v10;
    return a1;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100005AB0(v8, v9);
  return a1;
}

uint64_t _s8DBResultVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s8DBResultVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *_s8DBResultVMa()
{
  return &_s8DBResultVN;
}

uint64_t sub_100052C50()
{
  return sub_10003DE8C();
}

uint64_t type metadata accessor for DebugWritePayloadToDiskHelper()
{
  return objc_opt_self(_TtC7idcredd29DebugWritePayloadToDiskHelper);
}

uint64_t sub_100052C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  id v27;
  void *countAndFlagsBits;
  id v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  char *v38;
  void *object;
  char *v40;
  char *v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v64;
  char *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  _QWORD v85[3];
  char v86[16];
  Swift::String v87;

  v77 = a1;
  v78 = a2;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v82 = (void (*)(char *, uint64_t))((char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v7 = (char *)&v72 - v6;
  v8 = type metadata accessor for String.Encoding(0);
  v80 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v79 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v83 = *(char **)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v76 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v81 = (char *)&v72 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v72 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  result = isInternalBuild()();
  if ((result & 1) != 0)
  {
    v72 = v7;
    v25 = v14;
    v74 = v3;
    v75 = v2;
    v26 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v87._countAndFlagsBits = 0;
    v27 = objc_msgSend(v26, "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, &v87);

    countAndFlagsBits = (void *)v87._countAndFlagsBits;
    if (v27)
    {
      v73 = v8;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v29 = countAndFlagsBits;

      v30 = v23;
      URL.appendingPathComponent(_:isDirectory:)(0x64646572636469, 0xE700000000000000, 1);
      v31 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v83 + 1);
      v32 = v31(v21, v25);
      v87._countAndFlagsBits = 0x2D64616F6C796170;
      v87._object = (void *)0xE800000000000000;
      v33 = UUID.init()(v32);
      v34 = UUID.uuidString.getter(v33);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v37._countAndFlagsBits = v34;
      v38 = v30;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease(v36);
      object = v87._object;
      URL.appendingPathComponent(_:)(v87._countAndFlagsBits, v87._object);
      swift_bridgeObjectRelease(object);
      v40 = v81;
      URL.appendingPathExtension(_:)(1919902307, 0xE400000000000000);
      v31(v21, v25);
      v87 = Data.base16EncodedString()();
      v41 = v79;
      static String.Encoding.utf8.getter();
      v42 = sub_1000533A0();
      StringProtocol.write(to:atomically:encoding:)(v40, 0, v41, &type metadata for String, v42);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v41, v73);
      v57 = swift_bridgeObjectRelease(v87._object);
      v58 = v72;
      defaultLogger()(v57);
      v59 = v76;
      v60 = (*((uint64_t (**)(char *, char *, uint64_t))v83 + 2))(v76, v40, v25);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v64 = swift_slowAlloc(12, -1);
        v82 = (void (*)(char *, uint64_t))v31;
        v65 = v59;
        v66 = (uint8_t *)v64;
        v67 = swift_slowAlloc(32, -1);
        v87._countAndFlagsBits = v67;
        *(_DWORD *)v66 = 136315138;
        v83 = v38;
        v68 = URL.absoluteString.getter();
        v70 = v69;
        v84 = sub_10003FA80(v68, v69, &v87._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v66 + 4);
        swift_bridgeObjectRelease(v70);
        v71 = v82;
        v82(v65, v25);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Saved ISO 18013 payload to %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        (*(void (**)(char *, uint64_t))(v74 + 8))(v58, v75);
        v71(v81, v25);
        return ((uint64_t (*)(char *, uint64_t))v71)(v83, v25);
      }
      else
      {

        v31(v59, v25);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v58, v75);
        v31(v40, v25);
        return v31(v38, v25);
      }
    }
    else
    {
      v43 = (id)v87._countAndFlagsBits;
      v44 = _convertNSErrorToError(_:)(countAndFlagsBits);

      v46 = swift_willThrow(v45);
      v47 = v74;
      v48 = (char *)v82;
      defaultLogger()(v46);
      swift_errorRetain(v44);
      v49 = swift_errorRetain(v44);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = swift_slowAlloc(32, -1);
        v87._countAndFlagsBits = v53;
        *(_DWORD *)v52 = 136315138;
        swift_getErrorValue(v44, v86, v85);
        v54 = Error.localizedDescription.getter(v85[1], v85[2]);
        v56 = v55;
        v84 = sub_10003FA80(v54, v55, &v87._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v52 + 4);
        swift_bridgeObjectRelease(v56);
        swift_errorRelease(v44);
        swift_errorRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to write ISO 18013 payload to disk: %s", v52, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);

        swift_errorRelease(v44);
      }
      else
      {
        swift_errorRelease(v44);
        swift_errorRelease(v44);
        swift_errorRelease(v44);

      }
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v75);
    }
  }
  return result;
}

unint64_t sub_1000533A0()
{
  unint64_t result;

  result = qword_100175BA8;
  if (!qword_100175BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100175BA8);
  }
  return result;
}

uint64_t GenericPasswordKeychainWrapper.secItemAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000533FC(a1, a2, (uint64_t (*)(Class, uint64_t))&_SecItemAdd);
}

uint64_t GenericPasswordKeychainWrapper.secItemCopyMatching(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000533FC(a1, a2, (uint64_t (*)(Class, uint64_t))&_SecItemCopyMatching);
}

uint64_t sub_1000533FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(Class, uint64_t))
{
  Class isa;
  uint64_t v6;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v6 = a3(isa, a2);

  return v6;
}

Swift::Int32 __swiftcall GenericPasswordKeychainWrapper.secItemDelete(_:)(Swift::OpaquePointer a1)
{
  const __CFDictionary *isa;
  Swift::Int32 v2;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v2 = SecItemDelete(isa);

  return v2;
}

uint64_t sub_1000534A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000534C0(a1, a2, a3, a4, (uint64_t (*)(Class, uint64_t))&_SecItemAdd);
}

uint64_t sub_1000534B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000534C0(a1, a2, a3, a4, (uint64_t (*)(Class, uint64_t))&_SecItemCopyMatching);
}

uint64_t sub_1000534C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(Class, uint64_t))
{
  Class isa;
  uint64_t v8;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v8 = a5(isa, a2);

  return v8;
}

uint64_t type metadata accessor for GenericPasswordKeychainWrapper()
{
  return objc_opt_self(_TtC7idcredd30GenericPasswordKeychainWrapper);
}

id sub_100053540(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  NSString v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  NSString v52;
  Class isa;
  uint64_t v54;
  char *v55;
  id v56;
  NSString v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  double v62;
  id v63;
  NSString v64;
  id v65;
  uint64_t v66;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  char v85;
  id v86;
  char *v87;
  id v88;
  NSString v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Class v93;
  uint64_t v94;
  char *v95;
  id v96;
  NSString v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Class v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[2];

  v118 = a1;
  v119 = a2;
  v4 = type metadata accessor for Logger(0);
  v111 = *(_QWORD *)(v4 - 8);
  v112 = v4;
  __chkstk_darwin(v4);
  v113 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100175C48);
  __chkstk_darwin(v6);
  v114 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AnyCodableDictionary(0);
  v115 = *(_QWORD *)(v8 - 8);
  v116 = v8;
  __chkstk_darwin(v8);
  v110 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_100175C50);
  __chkstk_darwin(v10);
  v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AnyCodableArray(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v17);
  v19 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = a3;
  v25 = AnyCodable.stringValue.getter(v22);
  if (!v26)
  {
    v108 = v24;
    v109 = v21;
    v105 = v16;
    v106 = v12;
    v107 = v14;
    v34 = v116;
    v36 = v119;
    v35 = v120;
    v37 = AnyCodable.dataValue.getter(v25);
    if (v38 >> 60 != 15)
    {
      v49 = v37;
      v50 = v38;
      v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
      v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v32 = objc_msgSend(v51, "initWithElementIdentifier:dataValue:", v52, isa);
      sub_10000B164(v49, v50);

      v54 = type metadata accessor for AnyCodable(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v35, v54);
      return v32;
    }
    AnyCodable.dateValue.getter(v37);
    v39 = v109;
    v40 = v20;
    v41 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v19, 1, v20) != 1)
    {
      v55 = v108;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v108, v19, v20);
      v56 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
      v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v58 = Date._bridgeToObjectiveC()().super.isa;
      v32 = objc_msgSend(v56, "initWithElementIdentifier:dateValue:", v57, v58);

      v59 = type metadata accessor for AnyCodable(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v41, v59);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v40);
      return v32;
    }
    v42 = sub_1000150E8((uint64_t)v19, &qword_1001755B0);
    v43 = AnyCodable.intValue.getter(v42);
    if ((v44 & 1) == 0)
    {
      v45 = v43;
      v46 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
      v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v48 = objc_msgSend(v46, "initWithElementIdentifier:intValue:", v47, v45);
LABEL_7:
      v32 = v48;

LABEL_13:
      v66 = type metadata accessor for AnyCodable(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v41, v66);
      return v32;
    }
    v60 = AnyCodable.doubleValue.getter(v43);
    if ((v61 & 1) != 0)
    {
      v68 = AnyCodable.BOOLValue.getter(v60);
      if (v68 != 2)
      {
        v85 = v68;
        v86 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
        v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v36);
        v48 = objc_msgSend(v86, "initWithElementIdentifier:BOOLValue:", v47, v85 & 1);
        goto LABEL_7;
      }
      v69 = (uint64_t)v106;
      AnyCodable.arrayValue.getter();
      v70 = v107;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v69, 1, v13) != 1)
      {
        v87 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v105, v69, v13);
        v88 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
        v89 = String._bridgeToObjectiveC()();
        v90 = swift_bridgeObjectRelease(v36);
        v91 = AnyCodableArray.asNSArray()(v90);
        v92 = sub_100053E4C(v91);
        swift_bridgeObjectRelease(v91);
        v93 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v92);
        v32 = objc_msgSend(v88, "initWithElementIdentifier:arrayValue:", v89, v93);

        v94 = type metadata accessor for AnyCodable(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v41, v94);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v87, v13);
        return v32;
      }
      v71 = sub_1000150E8(v69, &qword_100175C50);
      v72 = (uint64_t)v114;
      AnyCodable.dictValue.getter(v71);
      v73 = v115;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v72, 1, v34) != 1)
      {
        v95 = v110;
        (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v110, v72, v34);
        v96 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
        v97 = String._bridgeToObjectiveC()();
        v98 = swift_bridgeObjectRelease(v36);
        v99 = AnyCodableDictionary.asNSDictionary()(v98);
        v100 = sub_10005407C(v99);
        swift_bridgeObjectRelease(v99);
        v101 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v100);
        v32 = objc_msgSend(v96, "initWithElementIdentifier:dictionaryValue:", v97, v101);

        v102 = type metadata accessor for AnyCodable(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 8))(v41, v102);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v95, v34);
        return v32;
      }
      v74 = sub_1000150E8(v72, &qword_100175C48);
      v75 = v113;
      defaultLogger()(v74);
      v76 = v36;
      v77 = swift_bridgeObjectRetain_n(v36, 2);
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.error.getter();
      v80 = os_log_type_enabled(v78, v79);
      v82 = v117;
      v81 = v118;
      if (v80)
      {
        v83 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v122[0] = v84;
        *(_DWORD *)v83 = 136315138;
        swift_bridgeObjectRetain(v76);
        v121 = sub_10003FA80(v81, v76, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v83 + 4);
        swift_bridgeObjectRelease_n(v76, 3);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Creating DCCredentialElement from unknown value type for element identifier %s", v83, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v83, -1, -1);

        (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v112);
      }
      else
      {

        swift_bridgeObjectRelease_n(v76, 2);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v75, v112);
      }
      v103 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v82));
      v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v76);
      v65 = objc_msgSend(v103, "initWithElementIdentifier:", v64);
    }
    else
    {
      v62 = *(double *)&v60;
      v63 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
      v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v65 = objc_msgSend(v63, "initWithElementIdentifier:doubleValue:", v64, v62);
    }
    v32 = v65;

    goto LABEL_13;
  }
  v27 = v26;
  v28 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v117));
  v29 = v119;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v32 = objc_msgSend(v28, "initWithElementIdentifier:stringValue:", v30, v31);

  v33 = type metadata accessor for AnyCodable(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v120, v33);
  return v32;
}

uint64_t sub_100053E4C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_10005581C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_100055838();
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10005581C(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10005581C(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_100041220(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_100055838();
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10005581C(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_10005581C(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_100041220(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005407C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100008E84(&qword_100175730);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v30)
        goto LABEL_37;
      v15 = *(_QWORD *)(v31 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v30)
          goto LABEL_37;
        v15 = *(_QWORD *)(v31 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v30)
            goto LABEL_37;
          v15 = *(_QWORD *)(v31 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v41[0] = *v18;
    *((_QWORD *)&v41[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    v21 = v20;
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7);
    v32 = v21;
    v22 = sub_100055838();
    swift_dynamicCast(v36, &v32, v22, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_100041220(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_100041220(v40, v41);
    sub_100041220(v41, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~v7[v24 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = v7[v25];
      }
      while (v29 == -1);
      v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_100041220(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_100039B9C(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v31 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10005442C(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, int64_t);
  uint64_t v56;
  int64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t *v79;
  __int128 *v80;
  uint64_t *v81;
  uint64_t v82;
  id v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t *, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  int64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t *v129;
  char *v130;
  id v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  id v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void (*v159)(char *, __int128 *, uint64_t);
  char *v160;
  __int128 *v161;
  uint64_t v162;
  char *v163;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v165;
  unint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  char v170;
  unint64_t v171;
  char v172;
  char *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  char *v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  int64_t v190;
  char *v191;
  char *v192;
  id v193;
  char *v194;
  char *v195;
  __int128 v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  uint64_t *v200;
  int64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  _BYTE v211[32];
  _OWORD v212[2];
  uint64_t v213;
  _OWORD v214[2];
  __int128 v215;
  __int128 v216;
  _OWORD v217[2];
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;

  v205 = a1;
  v2 = type metadata accessor for AnyCodableDictionary(0);
  __chkstk_darwin(v2);
  *(_QWORD *)&v196 = (char *)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnyCodableArray(0);
  __chkstk_darwin(v4);
  v201 = (int64_t)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v202 = v6;
  v203 = v7;
  v8 = __chkstk_darwin(v6);
  v198 = (char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v199 = (char *)&v184 - v11;
  __chkstk_darwin(v10);
  v204 = (char *)&v184 - v12;
  v13 = sub_100008E84(&qword_1001752C8);
  v14 = __chkstk_darwin(v13);
  v197 = (uint64_t *)((char *)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v200 = (uint64_t *)((char *)&v184 - v16);
  v17 = type metadata accessor for AnyCodable(0);
  v18 = *(_QWORD *)(v17 - 8);
  v206 = v17;
  v207 = v18;
  v19 = __chkstk_darwin(v17);
  v195 = (char *)&v184 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v194 = (char *)&v184 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v184 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v184 - v26;
  v28 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v28);
  v30 = (char *)&v184 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v184 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v184 - v36;
  v38 = objc_msgSend(v1, "stringValue");
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

    v43 = v205;
    AnyCodable.init(value:)(v40, v42);
LABEL_5:
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v207 + 56))(v43, 0, 1, v206);
    return;
  }
  v186 = v37;
  v187 = v35;
  *(_QWORD *)&v188 = v32;
  *(_QWORD *)&v189 = v30;
  v190 = v31;
  v191 = v27;
  v192 = v25;
  v44 = v204;
  v45 = objc_msgSend(v1, "dataValue");
  if (v45)
  {
    v46 = v45;
    v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v49 = v48;

    v43 = v205;
    AnyCodable.init(value:)(v47, v49);
    goto LABEL_5;
  }
  v193 = v1;
  v50 = objc_msgSend(v1, "dateValue");
  v51 = v206;
  if (v50)
  {
    v52 = v50;
    v53 = v187;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = v188;
    v55 = *(void (**)(char *, char *, int64_t))(v188 + 32);
    v56 = v189;
    v57 = v190;
    v55((char *)v189, v53, v190);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int64_t))(v54 + 56))(v56, 0, 1, v57);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, int64_t))(v54 + 48))(v56, 1, v57);
    v59 = v202;
    v60 = v44;
    if (v58 != 1)
    {
      v61 = v186;
      v55(v186, (char *)v56, v57);
      (*(void (**)(char *, char *, int64_t))(v54 + 16))(v53, v61, v57);
      v62 = v205;
      AnyCodable.init(value:)(v53);
      (*(void (**)(char *, int64_t))(v54 + 8))(v61, v57);
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 56);
LABEL_34:
      v104 = v62;
LABEL_91:
      v181 = 0;
LABEL_92:
      v63(v104, v181, 1, v51);
      return;
    }
  }
  else
  {
    v56 = v189;
    (*(void (**)(_QWORD, uint64_t, uint64_t, int64_t))(v188 + 56))(v189, 1, 1, v190);
    v59 = v202;
    v60 = v44;
  }
  sub_1000150E8(v56, &qword_1001755B0);
  v64 = v193;
  v65 = objc_msgSend(v193, "numberValue");
  if (v65)
  {
    v66 = v65;
    v67 = objc_msgSend(v64, "numericTypeHint");
    v68 = v207;
    if (v67 == (id)3)
    {
      v103 = objc_msgSend(v66, "BOOLValue");
      v62 = v205;
      AnyCodable.init(value:)(v103);
    }
    else if (v67 == (id)2)
    {
      v102 = objc_msgSend(v66, "doubleValue");
      v62 = v205;
      AnyCodable.init(value:)(v102);
    }
    else
    {
      if (v67 != (id)1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 56))(v205, 1, 1, v51);

        return;
      }
      v69 = objc_msgSend(v66, "integerValue");
      v62 = v205;
      AnyCodable.init(value:)(v69);
    }

    v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
    goto LABEL_34;
  }
  v70 = objc_msgSend(v64, "arrayValue");
  v71 = v207;
  if (v70)
  {
    v72 = v70;
    v198 = (char *)&type metadata for Any + 8;
    v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, (char *)&type metadata for Any + 8);

    v75 = *(char **)(v73 + 16);
    if (!v75)
    {
      swift_bridgeObjectRelease(v73);
      v106 = _swiftEmptyArrayStorage;
      v78 = v201;
      v105 = v205;
LABEL_90:
      AnyCodableArray.init(value:)(v106);
      AnyCodable.init(value:)(v78);
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
      v104 = v105;
      goto LABEL_91;
    }
    v76 = v59;
    v195 = (char *)v73;
    v77 = v73 + 32;
    v197 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v74 = 136315138;
    v196 = v74;
    v78 = v201;
    while (1)
    {
      v199 = v75;
      sub_1000412B0(v77, (uint64_t)v212);
      if ((swift_dynamicCast(&v215, v212, v198, &type metadata for AnyHashable, 6) & 1) != 0)
      {
        v219 = v215;
        v220 = v216;
        v221 = *(_QWORD *)&v217[0];
        sub_100056B18((uint64_t)&v219, (uint64_t)&v215);
        v79 = v200;
        AnyCodable.init(value:)(&v215);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v71 + 48))(v79, 1, v51) != 1)
        {
          v96 = *(void (**)(char *, uint64_t *, uint64_t))(v71 + 32);
          v97 = (uint64_t)v191;
          v96(v191, v79, v51);
          (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v192, v97, v51);
          if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) == 0)
            v197 = (_QWORD *)sub_1000A780C(0, v197[2] + 1, 1, (unint64_t)v197);
          v98 = v197;
          v100 = v197[2];
          v99 = v197[3];
          if (v100 >= v99 >> 1)
            v98 = (_QWORD *)sub_1000A780C(v99 > 1, v100 + 1, 1, (unint64_t)v197);
          v98[2] = v100 + 1;
          v101 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
          v197 = v98;
          v96((char *)v98 + v101 + *(_QWORD *)(v71 + 72) * v100, (uint64_t *)v192, v51);
          (*(void (**)(char *, uint64_t))(v71 + 8))(v191, v51);
          sub_10003BBA0((uint64_t)&v219);
          v64 = v193;
          goto LABEL_19;
        }
        sub_10003BBA0((uint64_t)&v219);
        v80 = (__int128 *)v79;
        v81 = &qword_1001752C8;
      }
      else
      {
        *(_QWORD *)&v217[0] = 0;
        v215 = 0u;
        v216 = 0u;
        v80 = &v215;
        v81 = &qword_100175360;
      }
      v82 = sub_1000150E8((uint64_t)v80, v81);
      defaultLogger()(v82);
      v83 = v64;
      v84 = v60;
      v85 = Logger.logObject.getter(v83);
      v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = swift_slowAlloc(12, -1);
        v88 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v219 = v88;
        *(_DWORD *)v87 = v196;
        v89 = objc_msgSend(v83, "elementIdentifier");
        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        v92 = v91;

        v93 = v90;
        v64 = v193;
        *(_QWORD *)(v87 + 4) = sub_10003FA80(v93, v92, (uint64_t *)&v219);

        swift_bridgeObjectRelease(v92);
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Cannot convert value in array %s to hashable", (uint8_t *)v87, 0xCu);
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        v94 = v88;
        v76 = v202;
        v51 = v206;
        swift_slowDealloc(v94, -1, -1);
        v95 = v87;
        v71 = v207;
        swift_slowDealloc(v95, -1, -1);

        v60 = v204;
        (*(void (**)(char *, uint64_t))(v203 + 8))(v204, v76);
        v78 = v201;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v203 + 8))(v84, v76);
        v78 = v201;
        v60 = v84;
      }
LABEL_19:
      v77 += 32;
      v75 = v199 - 1;
      if (v199 == (char *)1)
      {
        swift_bridgeObjectRelease(v195);
        v105 = v205;
        v106 = v197;
        goto LABEL_90;
      }
    }
  }
  v107 = objc_msgSend(v64, "dictionaryValue");
  if (!v107)
  {
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
    v104 = v205;
    v181 = 1;
    goto LABEL_92;
  }
  v108 = v107;
  v109 = v59;
  v110 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v107, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v111 = sub_10003EB94((uint64_t)_swiftEmptyArrayStorage);
  v113 = *(_QWORD *)(v110 + 64);
  v186 = (char *)v111;
  v187 = (char *)(v110 + 64);
  v114 = 1 << *(_BYTE *)(v110 + 32);
  v115 = -1;
  if (v114 < 64)
    v115 = ~(-1 << v114);
  v116 = v115 & v113;
  v191 = (char *)v217 + 8;
  v192 = (char *)v110;
  v200 = &v222;
  v201 = 0;
  v190 = (unint64_t)(v114 + 63) >> 6;
  v185 = v190 - 1;
  *(_QWORD *)&v112 = 136315138;
  v188 = v112;
  *(_QWORD *)&v112 = 136315394;
  v189 = v112;
  v117 = v203;
  v118 = v198;
  v119 = v199;
  while (1)
  {
    if (v116)
    {
      v204 = (char *)((v116 - 1) & v116);
      v120 = __clz(__rbit64(v116)) | (v201 << 6);
LABEL_46:
      v121 = v192;
      sub_100056B18(*((_QWORD *)v192 + 6) + 40 * v120, (uint64_t)&v215);
      sub_1000412B0(*((_QWORD *)v121 + 7) + 32 * v120, (uint64_t)v191);
      goto LABEL_65;
    }
    v122 = v201 + 1;
    if (__OFADD__(v201, 1))
    {
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    if (v122 < v190)
    {
      v123 = *(_QWORD *)&v187[8 * v122];
      if (v123)
        goto LABEL_50;
      v124 = v201 + 2;
      ++v201;
      if (v122 + 1 < v190)
      {
        v123 = *(_QWORD *)&v187[8 * v124];
        if (v123)
          goto LABEL_53;
        v201 = v122 + 1;
        if (v122 + 2 < v190)
        {
          v123 = *(_QWORD *)&v187[8 * v122 + 16];
          if (v123)
          {
            v122 += 2;
            goto LABEL_50;
          }
          v124 = v122 + 3;
          v201 = v122 + 2;
          if (v122 + 3 < v190)
            break;
        }
      }
    }
LABEL_64:
    v204 = 0;
    v218 = 0;
    memset(v217, 0, sizeof(v217));
    v215 = 0u;
    v216 = 0u;
LABEL_65:
    sub_100056B54((uint64_t)&v215, (uint64_t)&v219);
    if (!*((_QWORD *)&v220 + 1))
    {
      swift_release(v192);
      v182 = v196;
      AnyCodableDictionary.init(value:)(v186);
      v183 = v205;
      AnyCodable.init(value:)(v182);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v183, 0, 1, v206);
      return;
    }
    v215 = v219;
    v216 = v220;
    *(_QWORD *)&v217[0] = v221;
    sub_100041220(v200, v214);
    sub_100056B18((uint64_t)&v215, (uint64_t)v212);
    v125 = swift_dynamicCast(&v208, v212, &type metadata for AnyHashable, &type metadata for String, 6);
    if ((_DWORD)v125)
    {
      v126 = v208;
      sub_1000412B0((uint64_t)v214, (uint64_t)v211);
      if ((swift_dynamicCast(&v208, v211, (char *)&type metadata for Any + 8, &type metadata for AnyHashable, 6) & 1) != 0)
      {
        v212[0] = v208;
        v212[1] = v209;
        v213 = v210;
        sub_100056B18((uint64_t)v212, (uint64_t)&v208);
        v127 = (__int128 *)v197;
        AnyCodable.init(value:)(&v208);
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v71 + 48))(v127, 1, v206) == 1)
        {
          sub_10003BBA0((uint64_t)v212);
          swift_bridgeObjectRelease(*((_QWORD *)&v126 + 1));
          v128 = v127;
          v129 = &qword_1001752C8;
          goto LABEL_73;
        }
        v159 = *(void (**)(char *, __int128 *, uint64_t))(v71 + 32);
        v160 = v194;
        v161 = v127;
        v162 = v206;
        v159(v194, v161, v206);
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v195, v160, v162);
        v163 = v186;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v186);
        *(_QWORD *)&v208 = v163;
        v166 = sub_1000FBC04(v126, *((uint64_t *)&v126 + 1));
        v167 = *((_QWORD *)v163 + 2);
        v168 = (v165 & 1) == 0;
        v169 = v167 + v168;
        if (__OFADD__(v167, v168))
          goto LABEL_96;
        v170 = v165;
        if (*((_QWORD *)v163 + 3) >= v169)
        {
          v173 = v195;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10007E3CC();
            v173 = v195;
          }
          v109 = v202;
          v174 = (_QWORD *)v208;
          if ((v170 & 1) != 0)
            goto LABEL_82;
        }
        else
        {
          sub_10007C870(v169, isUniquelyReferenced_nonNull_native);
          v171 = sub_1000FBC04(v126, *((uint64_t *)&v126 + 1));
          if ((v170 & 1) != (v172 & 1))
            goto LABEL_99;
          v166 = v171;
          v109 = v202;
          v173 = v195;
          v174 = (_QWORD *)v208;
          if ((v170 & 1) != 0)
          {
LABEL_82:
            v175 = v174[7] + *(_QWORD *)(v71 + 72) * v166;
            v176 = v206;
            (*(void (**)(unint64_t, char *, uint64_t))(v71 + 40))(v175, v173, v206);
            v117 = v203;
            goto LABEL_88;
          }
        }
        v174[(v166 >> 6) + 8] |= 1 << v166;
        *(_OWORD *)(v174[6] + 16 * v166) = v126;
        v159((char *)(v174[7] + *(_QWORD *)(v71 + 72) * v166), (__int128 *)v173, v206);
        v177 = v174[2];
        v178 = __OFADD__(v177, 1);
        v179 = v177 + 1;
        if (v178)
          goto LABEL_98;
        v174[2] = v179;
        swift_bridgeObjectRetain(*((_QWORD *)&v126 + 1));
        v117 = v203;
        v176 = v206;
LABEL_88:
        v118 = v198;
        v180 = v194;
        v186 = (char *)v208;
        swift_bridgeObjectRelease(*((_QWORD *)&v126 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v180, v176);
        sub_10003BBA0((uint64_t)v212);
      }
      else
      {
        v210 = 0;
        v208 = 0u;
        v209 = 0u;
        swift_bridgeObjectRelease(*((_QWORD *)&v126 + 1));
        v128 = &v208;
        v129 = &qword_100175360;
LABEL_73:
        v146 = sub_1000150E8((uint64_t)v128, v129);
        defaultLogger()(v146);
        v147 = v193;
        v148 = Logger.logObject.getter(v147);
        v149 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v148, v149))
        {
          v150 = swift_slowAlloc(12, -1);
          v151 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v212[0] = v151;
          *(_DWORD *)v150 = v188;
          v152 = objc_msgSend(v147, "elementIdentifier");
          v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
          v155 = v154;

          v156 = v153;
          v109 = v202;
          v117 = v203;
          *(_QWORD *)(v150 + 4) = sub_10003FA80(v156, v155, (uint64_t *)v212);

          v157 = v155;
          v71 = v207;
          swift_bridgeObjectRelease(v157);
          _os_log_impl((void *)&_mh_execute_header, v148, v149, "Cannot convert value in dictionary %s to hashable", (uint8_t *)v150, 0xCu);
          swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v151, -1, -1);
          v158 = v150;
          v118 = v198;
          swift_slowDealloc(v158, -1, -1);
        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v109);
      }
      sub_10000CE40(v214);
      sub_10003BBA0((uint64_t)&v215);
      v64 = v193;
      goto LABEL_43;
    }
    defaultLogger()(v125);
    sub_100056B18((uint64_t)&v215, (uint64_t)v212);
    v130 = v118;
    v131 = v64;
    v132 = Logger.logObject.getter(v131);
    v133 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v132, v133))
    {
      v134 = swift_slowAlloc(22, -1);
      v135 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v208 = v135;
      *(_DWORD *)v134 = v189;
      v136 = AnyHashable.description.getter();
      v138 = v137;
      *(_QWORD *)(v134 + 4) = sub_10003FA80(v136, v137, (uint64_t *)&v208);
      swift_bridgeObjectRelease(v138);
      sub_10003BBA0((uint64_t)v212);
      *(_WORD *)(v134 + 12) = 2080;
      v139 = objc_msgSend(v131, "elementIdentifier");
      v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
      v142 = v141;

      v143 = v140;
      v117 = v203;
      *(_QWORD *)(v134 + 14) = sub_10003FA80(v143, v142, (uint64_t *)&v208);

      v144 = v142;
      v71 = v207;
      swift_bridgeObjectRelease(v144);
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "Key %s in dictionary %s is not a string", (uint8_t *)v134, 0x16u);
      swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
      v145 = v135;
      v109 = v202;
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v134, -1, -1);

    }
    else
    {

      sub_10003BBA0((uint64_t)v212);
    }
    (*(void (**)(char *, uint64_t))(v117 + 8))(v130, v109);
    sub_10000CE40(v214);
    sub_10003BBA0((uint64_t)&v215);
    v64 = v193;
    v118 = v130;
    v119 = v199;
LABEL_43:
    v116 = (unint64_t)v204;
  }
  v123 = *(_QWORD *)&v187[8 * v124];
  if (v123)
  {
LABEL_53:
    v122 = v124;
LABEL_50:
    v204 = (char *)((v123 - 1) & v123);
    v120 = __clz(__rbit64(v123)) + (v122 << 6);
    v201 = v122;
    goto LABEL_46;
  }
  while (1)
  {
    v122 = v124 + 1;
    if (__OFADD__(v124, 1))
      break;
    if (v122 >= v190)
    {
      v201 = v185;
      goto LABEL_64;
    }
    v123 = *(_QWORD *)&v187[8 * v122];
    ++v124;
    if (v123)
      goto LABEL_50;
  }
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t DCCredentialReaderAuthenticationPolicy.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&_DCCredentialReaderAuthenticationPolicyToString);
}

uint64_t sub_1000555D0(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&_DCCredentialReaderAuthenticationPolicyToString);
}

uint64_t DCCredentialPresentmentAuthPolicy.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&_DCCredentialPresentmentAuthPolicyToString);
}

uint64_t sub_1000555E8(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&_DCCredentialPresentmentAuthPolicyToString);
}

uint64_t DCCredentialPayloadProtectionPolicy.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&_DCCredentialPayloadProtectionPolicyToString);
}

uint64_t sub_100055600(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&_DCCredentialPayloadProtectionPolicyToString);
}

uint64_t DCCredentialCryptoKeyUsage.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&DCCredentialCryptoKeyUsageToString);
}

uint64_t sub_100055618(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&DCCredentialCryptoKeyUsageToString);
}

uint64_t DCCredentialCryptoKeyType.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&DCCredentialCryptoKeyTypeToString);
}

uint64_t sub_100055630(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&DCCredentialCryptoKeyTypeToString);
}

uint64_t DCCredentialPayloadProtectionType.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&_DCCredentialPayloadProtectionTypeToString);
}

uint64_t sub_100055648(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&_DCCredentialPayloadProtectionTypeToString);
}

uint64_t DCCredentialPayloadFormat.description.getter(uint64_t a1)
{
  return sub_100055660(a1, (uint64_t (*)(void))&_DCCredentialPayloadFormatToString);
}

uint64_t sub_100055660(uint64_t a1, uint64_t (*a2)(void))
{
  id v2;
  uint64_t v3;

  v2 = (id)a2();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000556A8(uint64_t a1, uint64_t a2)
{
  return sub_1000556B4(a1, a2, (uint64_t (*)(_QWORD))&_DCCredentialPayloadFormatToString);
}

uint64_t sub_1000556B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  _QWORD *v3;
  id v4;
  uint64_t v5;

  v4 = (id)a3(*v3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

unint64_t sub_100055700()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000024;
}

uint64_t sub_10005578C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000558AC(a1, a2, a3, (_QWORD *)*v3, &qword_100175C80, (uint64_t (*)(_QWORD))&type metadata accessor for SESKeystore.DesignatedKey);
  *v3 = result;
  return result;
}

uint64_t sub_1000557B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000558AC(a1, a2, a3, (_QWORD *)*v3, &qword_100175C68, type metadata accessor for CredentialElement);
  *v3 = result;
  return result;
}

uint64_t sub_1000557E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100055A8C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100055800(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100055BF4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10005581C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100055DDC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_100055838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100175C58;
  if (!qword_100175C58)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100175C58);
  }
  return result;
}

uint64_t sub_100055874(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100055F48(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100055890(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000560D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000558AC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008E84(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055A8C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_1001752D8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055BF4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008E84(&qword_100175C78);
  v11 = *(_QWORD *)(sub_100008E84(&qword_1001752E8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100008E84(&qword_1001752E8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055DDC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_1001748A0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055F48(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_100175C60);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100008E84((uint64_t *)&unk_100178A60);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000560D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_100175C88);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_10005622C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Class isa;
  unint64_t v47;
  Class v48;
  Class v49;
  Class v50;
  void *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  void (**v67)(_QWORD, id);
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)type metadata accessor for Logger(0);
  v67 = (void (**)(_QWORD, id))*(v7 - 1);
  v68 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v10);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for COSEKey(0);
  v13 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v70 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock) + 16);
  os_unfair_lock_lock(v15);
  sub_100104334(v16, (uint64_t (*)(void))sub_100056AC8);
  if (v1)
  {
    os_unfair_lock_unlock(v15);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v15);
    if (v72 >> 60 == 15)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
      v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v18 = type metadata accessor for DIPError(0);
      v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v18, v19, 0, 0);
      v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x80000001001313D0, 0, v6, 0, v17, 0xD00000000000005ALL, 0x80000001001313F0, 0x293A5F286D6F7266, 0xE800000000000000, 199);
      swift_willThrow(v20);
      return;
    }
    v64 = v13;
    v65 = v6;
    v66 = v72;
    v69 = v71;
    os_unfair_lock_lock(v15);
    sub_100104334(v21, (uint64_t (*)(void))sub_100056AE0);
    os_unfair_lock_unlock(v15);
    if (v72 >> 60 == 15)
    {
      v22 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v65, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
      v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v24 = type metadata accessor for DIPError(0);
      v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v24, v25, 0, 0);
      v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131450, 0, v22, 0, v23, 0xD00000000000005ALL, 0x80000001001313F0, 0x293A5F286D6F7266, 0xE800000000000000, 202);
      swift_willThrow(v26);
LABEL_8:
      sub_10000B164(v69, v66);
      return;
    }
    v62 = v72;
    v63 = v71;
    sub_100056DE4((uint64_t)v12);
    v27 = v64;
    v28 = v73;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v12, 1, v73) == 1)
    {
      sub_1000150E8((uint64_t)v12, &qword_100174B68);
      v29 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v65, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v3);
      v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x8000000100131470, 0, v29, 0, v30, 0xD00000000000005ALL, 0x80000001001313F0, 0x293A5F286D6F7266, 0xE800000000000000, 205);
      swift_willThrow(v33);
      sub_10000B164(v63, v62);
      goto LABEL_8;
    }
    v61 = v9;
    v34 = v70;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v70, v12, v28);
    v35 = type metadata accessor for CBOREncoder(0);
    v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v37 = CBOREncoder.init()(v36);
    v38 = sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
    v59 = dispatch thunk of CBOREncoder.encode<A>(_:)(v34, v28, v38);
    v60 = v39;
    swift_release(v37);
    os_unfair_lock_lock(v15);
    sub_1000D7E98((_QWORD *(*)(uint64_t *__return_ptr))sub_100056AF8, &v71);
    os_unfair_lock_unlock(v15);
    v41 = v71;
    v42 = v61;
    if (v71)
    {
      v43 = defaultLogger()(v40);
      __chkstk_darwin(v43);
      v58[2] = v59;
      v58[3] = v60;
      Logger.sensitive(_:)(sub_100056B10, v58);
      ((void (**)(char *, id))v67)[1](v42, v68);
      v44 = *(_QWORD *)(a1 + 24);
      v68 = objc_allocWithZone((Class)DCCredentialCryptoKey);
      swift_bridgeObjectRetain(v44);
      v67 = (void (**)(_QWORD, id))String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v44);
      v45 = v66;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v47 = v62;
      v48 = Data._bridgeToObjectiveC()().super.isa;
      v49 = Data._bridgeToObjectiveC()().super.isa;
      v50 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v41);
      v51 = v67;
      objc_msgSend(v68, "initWithIdentifier:publicKey:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:", v67, isa, v48, v49, 0, 0, v50);
      sub_100005AB0(v59, v60);
      sub_10000B164(v63, v47);
      sub_10000B164(v69, v45);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v70, v73);
    }
    else
    {
      v52 = v63;
      v53 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v65, enum case for DIPError.Code.idcsInvalidAttestation(_:), v3);
      v54 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v55 = type metadata accessor for DIPError(0);
      v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v55, v56, 0, 0);
      v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x8000000100131490, 0, v53, 0, v54, 0xD00000000000005ALL, 0x80000001001313F0, 0x293A5F286D6F7266, 0xE800000000000000, 209);
      swift_willThrow(v57);
      sub_100005AB0(v59, v60);
      sub_10000B164(v69, v66);
      sub_10000B164(v52, v62);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v70, v73);
    }
  }
}

void sub_100056AC8(uint64_t *a1@<X8>)
{
  sub_100056CE8(a1);
}

void sub_100056AE0(uint64_t *a1@<X8>)
{
  sub_100056D04(a1);
}

uint64_t sub_100056AF8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056D80(a1);
}

unint64_t sub_100056B10()
{
  return sub_100055700();
}

uint64_t sub_100056B18(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100056B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100175C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056B9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v2 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v4 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100056C2C()
{
  return type metadata accessor for CredentialKey(0);
}

uint64_t type metadata accessor for CredentialKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100175CB8, (uint64_t)&nominal type descriptor for CredentialKey);
}

uint64_t sub_100056C48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_10012AE50;
  result = type metadata accessor for CredentialKeyType(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CredentialKeyUsage(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_100056CE8(uint64_t *a1@<X8>)
{
  sub_100056D20((uint64_t (*)(void))&SecKeyRef.publicKeyData.getter, a1);
}

void sub_100056D04(uint64_t *a1@<X8>)
{
  sub_100056D20((uint64_t (*)(void))&SecKeyRef.publicKeyIdentifier.getter, a1);
}

void sub_100056D20(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)DeviceIdentityKey.key.getter();
  v5 = a1();
  v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_100056D80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = DeviceIdentityKey.certificates.getter();
  type metadata accessor for SecCertificate(0);
  v4 = Array<A>.base64EncodedStrings()(v2, v3);
  result = swift_bridgeObjectRelease(v2);
  *a1 = v4;
  return result;
}

uint64_t sub_100056DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  unint64_t v14;

  v2 = v1;
  v4 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock) + 16);
  os_unfair_lock_lock(v7);
  sub_100104334(v8, (uint64_t (*)(void))sub_100058710);
  os_unfair_lock_unlock(v7);
  if (v14 >> 60 == 15)
  {
    v9 = type metadata accessor for COSEKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    COSEKey.init(ec2CurveIdentifier:publicKey:)(1, v13[2], v14);
    v11 = type metadata accessor for COSEKey(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) == 1)
    {
      sub_100019A28((uint64_t)v6);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v6, v11);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
  }
}

uint64_t sub_100056F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  v2 = type metadata accessor for DeviceIdentityKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_100056F84()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v2 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v4 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  v5 = (char *)v0 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  v6 = type metadata accessor for DeviceIdentityKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10005703C()
{
  return type metadata accessor for DeviceIdentityKeyBackedCredentialKey(0);
}

uint64_t type metadata accessor for DeviceIdentityKeyBackedCredentialKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100175D80, (uint64_t)&nominal type descriptor for DeviceIdentityKeyBackedCredentialKey);
}

uint64_t sub_100057058(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for DeviceIdentityKey(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000570C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v6 = type metadata accessor for CredentialKeyUsage(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CredentialKeyType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for CredentialKeyType.sep(_:), v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CredentialKeyUsage.keySigning(_:), v6);
  v14 = v3 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey;
  v15 = type metadata accessor for DeviceIdentityKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
  v16 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v17 = sub_100008E84(&qword_1001765F0);
  v18 = swift_allocObject(v17, 20, 7);
  *(_DWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v3 + v16) = v18;
  v19 = v22;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v13, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v9, v6);
  return v3;
}

uint64_t sub_100057250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  v19 = v2;
  v20 = a1;
  v21 = a2;
  v11 = v10 + 4;
  os_unfair_lock_lock(v10 + 4);
  sub_100104334(v12, (uint64_t (*)(void))sub_1000586F4);
  os_unfair_lock_unlock(v11);
  if (!v3)
    return v22;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v3);
  v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v14 = type metadata accessor for DIPError(0);
  v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v14, v15, 0, 0);
  v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x80000001001317A0, v3, v9, 0, v13, 0xD000000000000050, 0x8000000100131740, 0x676964286E676973, 0xED0000293A747365, 104);
  swift_willThrow(v16);
  return swift_errorRelease(v3);
}

void sub_100057430(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = (void *)DeviceIdentityKey.key.getter();
  v8 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  v9 = SecKeyRef.signSHA256Digest(_:algorithm:)(a1, a2, v8);
  v11 = v10;

  if (!v3)
  {
    *a3 = v9;
    a3[1] = v11;
  }
}

uint64_t sub_1000574D4()
{
  return type metadata accessor for KeySigningKey(0);
}

uint64_t type metadata accessor for KeySigningKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100175E78, (uint64_t)&nominal type descriptor for KeySigningKey);
}

uint64_t sub_1000574F4()
{
  return type metadata accessor for DeviceEncryptionKey(0);
}

uint64_t type metadata accessor for DeviceEncryptionKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100175F80, (uint64_t)&nominal type descriptor for DeviceEncryptionKey);
}

uint64_t sub_100057510(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 168);
}

uint64_t sub_100057544()
{
  return sub_100057C84(&OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier, &OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
}

uint64_t sub_100057558()
{
  return sub_100057CD0(&OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier, &OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
}

uint64_t sub_10005756C()
{
  return type metadata accessor for LegacySEPresentmentKey(0);
}

uint64_t type metadata accessor for LegacySEPresentmentKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176080, (uint64_t)&nominal type descriptor for LegacySEPresentmentKey);
}

uint64_t sub_100057588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057C2C(a1, a2, a3, (uint64_t)"\t");
}

uint64_t sub_100057594()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_1000575D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_10005760C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 8);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 16);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 24);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  sub_100005AB0(v2, v3);
  sub_100005AB0(v4, v5);
  return sub_100005AB0(v6, v7);
}

uint64_t sub_10005765C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v2 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v4 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  sub_100005AB0(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier + 8));
  sub_100005AB0(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey + 8));
  v5 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 24);
  v6 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 32);
  v7 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 40);
  v8 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 48);
  sub_100005AB0(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd34NewlyCreatedLegacySEPresentmentKey_creationResult + 16));
  sub_100005AB0(v5, v6);
  sub_100005AB0(v7, v8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100057758()
{
  return type metadata accessor for NewlyCreatedLegacySEPresentmentKey(0);
}

uint64_t type metadata accessor for NewlyCreatedLegacySEPresentmentKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176168, (uint64_t)&nominal type descriptor for NewlyCreatedLegacySEPresentmentKey);
}

uint64_t sub_100057774(uint64_t a1)
{
  const char *v2;

  v2 = "8";
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 152);
}

uint64_t sub_1000577B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
  v12 = *(_QWORD *)(v10 + 8);
  sub_100005A38(v11, v12);
  COSEKey.init(ec2CurveIdentifier:publicKey:)(1, v11, v12);
  v13 = type metadata accessor for COSEKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v9, v13);
  sub_100019A28((uint64_t)v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v3);
  v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v16 = type metadata accessor for DIPError(0);
  v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v16, v17, 0, 0);
  v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x8000000100131710, 0, v6, 0, v15, 0xD000000000000050, 0x8000000100131740, 0x2879654B65736F63, 0xE900000000000029, 197);
  return swift_willThrow(v18);
}

uint64_t sub_1000579D0()
{
  return sub_100057AC4(&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_1000579EC()
{
  return sub_100057B34(&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_100057A08()
{
  return type metadata accessor for SESPresentmentKey(0);
}

uint64_t type metadata accessor for SESPresentmentKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176280, (uint64_t)&nominal type descriptor for SESPresentmentKey);
}

uint64_t sub_100057A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057C2C(a1, a2, a3, (uint64_t)&unk_10012AF10);
}

uint64_t sub_100057A30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_100057A6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_100057AA8()
{
  return sub_100057AC4(&OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
}

uint64_t sub_100057AC4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  sub_100005AB0(*(_QWORD *)(v3 + *a1), *(_QWORD *)(v3 + *a1 + 8));
  sub_100005AB0(*(_QWORD *)(v3 + *a2), *(_QWORD *)(v3 + *a2 + 8));
  return sub_100005AB0(*(_QWORD *)(v3 + *a3), *(_QWORD *)(v3 + *a3 + 8));
}

uint64_t sub_100057B18()
{
  return sub_100057B34(&OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
}

uint64_t sub_100057B34(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(v3[3]);
  v7 = (char *)v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v8 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v10 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  sub_100005AB0(*(_QWORD *)((char *)v3 + *a1), *(_QWORD *)((char *)v3 + *a1 + 8));
  sub_100005AB0(*(_QWORD *)((char *)v3 + *a2), *(_QWORD *)((char *)v3 + *a2 + 8));
  sub_100005AB0(*(_QWORD *)((char *)v3 + *a3), *(_QWORD *)((char *)v3 + *a3 + 8));
  return swift_deallocClassInstance(v3, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
}

uint64_t sub_100057C10()
{
  return type metadata accessor for ProgenitorKey(0);
}

uint64_t type metadata accessor for ProgenitorKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176370, (uint64_t)&nominal type descriptor for ProgenitorKey);
}

uint64_t sub_100057C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];

  v5[0] = a4;
  v5[1] = &unk_10012AF10;
  v5[2] = &unk_10012AF10;
  return swift_updateClassMetadata2(a1, 256, 3, v5, a1 + 120);
}

uint64_t sub_100057C70()
{
  return sub_100057C84(&OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_100057C84(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  sub_100005AB0(*(_QWORD *)(v2 + *a1), *(_QWORD *)(v2 + *a1 + 8));
  return sub_100005AB0(*(_QWORD *)(v2 + *a2), *(_QWORD *)(v2 + *a2 + 8));
}

uint64_t sub_100057CBC()
{
  return sub_100057CD0(&OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey, &OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
}

uint64_t sub_100057CD0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(v2[3]);
  v5 = (char *)v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v6 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v8 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  sub_100005AB0(*(_QWORD *)((char *)v2 + *a1), *(_QWORD *)((char *)v2 + *a1 + 8));
  sub_100005AB0(*(_QWORD *)((char *)v2 + *a2), *(_QWORD *)((char *)v2 + *a2 + 8));
  return swift_deallocClassInstance(v2, *(unsigned int *)(*v2 + 48), *(unsigned __int16 *)(*v2 + 52));
}

uint64_t sub_100057D90()
{
  return type metadata accessor for ExternalSEPresentmentKey(0);
}

uint64_t type metadata accessor for ExternalSEPresentmentKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176458, (uint64_t)&nominal type descriptor for ExternalSEPresentmentKey);
}

uint64_t sub_100057DAC(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_10012AF10;
  v2[1] = &unk_10012AF10;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 120);
}

uint64_t sub_100057DEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey + 8));
  return v1;
}

uint64_t sub_100057E28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  sub_100005A38(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier + 8));
  return v1;
}

uint64_t sub_100057E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key;
  v2 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return sub_100005AB0(*(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier + 8));
}

uint64_t sub_100057EB4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v2 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v4 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock));
  v5 = (char *)v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key;
  v6 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_100005AB0(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100057F80()
{
  return type metadata accessor for PayloadProtectionKey(0);
}

uint64_t type metadata accessor for PayloadProtectionKey(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176538, (uint64_t)&nominal type descriptor for PayloadProtectionKey);
}

uint64_t sub_100057F9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for SymmetricKey(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10012AF10;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100058010(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for Insecure.SHA1(0);
  v13 = sub_1000058C8(&qword_100174BB8, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1, (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

void sub_1000580D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  sub_1000582F4(a1, a2, a3, a4, a5, a6, a7, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
}

uint64_t sub_100058144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v17 = type metadata accessor for LegacySEPresentmentKey(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = v18 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot;
  *(_QWORD *)v19 = a8;
  *(_BYTE *)(v19 + 8) = a9 & 1;
  v20 = (_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKeyIdentifier);
  *v20 = a3;
  v20[1] = a4;
  v21 = (_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_publicKey);
  *v21 = a5;
  v21[1] = a6;
  v22 = v18 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v23 = enum case for CredentialKeyUsage.presentment(_:);
  v24 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  v25 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v26 = sub_100008E84(&qword_1001765F0);
  v27 = swift_allocObject(v26, 20, 7);
  *(_QWORD *)(v18 + v25) = v27;
  *(_DWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v28 = v18 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v29 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a7, v29);
  return v18;
}

void sub_100058284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  sub_1000582F4(a1, a2, a3, a4, a5, a6, a7, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
}

void sub_1000582F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;

  v15 = type metadata accessor for Insecure.SHA1(0);
  __chkstk_darwin(v15);
  v16 = type metadata accessor for Insecure.SHA1Digest(0);
  __chkstk_darwin(v16);
  v17 = (uint64_t *)(a7 + *a8);
  *v17 = a3;
  v17[1] = a4;
  v18 = (uint64_t *)(a7 + *a9);
  *v18 = a5;
  v18[1] = a6;
  swift_retain(a7);
  sub_100005A38(a3, a4);
  sub_100005A38(a5, a6);
  sub_1000058C8(&qword_100174BB8, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1, (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  dispatch thunk of HashFunction.init()(v15);
  __asm { BR              X9 }
}

uint64_t sub_100058448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 112) = v6;
  *(_WORD *)(v7 - 104) = v4;
  *(_BYTE *)(v7 - 102) = BYTE2(v4);
  *(_BYTE *)(v7 - 101) = BYTE3(v4);
  *(_BYTE *)(v7 - 100) = BYTE4(v4);
  *(_BYTE *)(v7 - 99) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v7 - 112, v7 - 112 + BYTE6(v4), v3, v2);
  sub_100005AB0(v6, v4);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8))(v1, v3);
  v8 = sub_1000058C8(&qword_100174BC0, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1Digest, (uint64_t)&protocol conformance descriptor for Insecure.SHA1Digest);
  v9 = *(_QWORD *)(v7 - 152);
  v10 = ((uint64_t (*)(uint64_t, uint64_t))Digest.data.getter)(v9, v8);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v5, v9);
  v13 = (uint64_t *)(v0 + **(_QWORD **)(v7 - 144));
  *v13 = v10;
  v13[1] = v12;
  v14 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v15 = enum case for CredentialKeyType.ses(_:);
  v16 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  v17 = v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v18 = **(unsigned int **)(v7 - 136);
  v19 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  v20 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v21 = sub_100008E84(&qword_1001765F0);
  v22 = swift_allocObject(v21, 20, 7);
  *(_QWORD *)(v0 + v20) = v22;
  *(_DWORD *)(v22 + 16) = 0;
  v23 = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v7 - 128);
  *(_QWORD *)(v0 + 24) = v23;
  return v0;
}

void sub_1000586F4(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100057430(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_100058710(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)DeviceIdentityKey.key.getter();
  v3 = SecKeyRef.publicKeyData.getter();
  v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t getEnumTagSinglePayload for PresentmentSessionOptions(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresentmentSessionOptions(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PresentmentSessionOptions()
{
  return &type metadata for PresentmentSessionOptions;
}

uint64_t sub_1000587D0()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;

  v1 = v0;
  _StringGuts.grow(_:)(169);
  v2._countAndFlagsBits = 0xD000000000000032;
  v2._object = (void *)0x80000001001317D0;
  String.append(_:)(v2);
  v3 = (id)DCPresentmentSessionEncryptionModeToString(*v0);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD00000000000001BLL;
  v8._object = (void *)0x8000000100131810;
  String.append(_:)(v8);
  v9 = (id)DCPresentmentSessionResponseEncryptionModeToString(v1[1]);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 0xD00000000000001FLL;
  v14._object = (void *)0x8000000100131830;
  String.append(_:)(v14);
  v15 = (id)DCCredentialReaderAuthenticationPolicyToString(v1[2]);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._object = (void *)0x8000000100131850;
  v20._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v20);
  v21 = (id)DCPresentmentElementFallbackModeToString(v1[3]);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0xD00000000000001ALL;
  v26._object = (void *)0x8000000100131870;
  String.append(_:)(v26);
  v27 = (id)DCPresentmentMessageEncodingFormatToString(v1[4]);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  return 0;
}

uint64_t sub_1000589EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100058A50, 0, 0);
}

uint64_t sub_100058A50()
{
  uint64_t v0;
  id *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(id **)(v0 + 24);
  v2 = objc_msgSend(*(id *)(v0 + 16), "credentialIdentifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = *(uint64_t *)((char *)v1 + *(int *)(type metadata accessor for PresentmentProposal(0) + 28));
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = objc_msgSend(*v1, "readerMetadata", swift_bridgeObjectRetain(v7).n128_f64[0]);
  v10 = v9;
  if (v9)
  {
    v11 = objc_msgSend(v9, "identifier");

    v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v13 = v12;

  }
  else
  {
    v13 = 0;
  }
  v14 = (_QWORD *)swift_allocObject(&unk_1001693C8, 64, 7);
  *(_QWORD *)(v0 + 64) = v14;
  v14[2] = v3;
  v14[3] = v5;
  v14[4] = v8;
  v14[5] = v7;
  v14[6] = v10;
  v14[7] = v13;
  v15 = swift_allocObject(&unk_1001693F0, 32, 7);
  *(_QWORD *)(v0 + 72) = v15;
  *(_QWORD *)(v15 + 16) = sub_10006CC68;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v14);
  v17 = (_QWORD *)swift_task_alloc(v16);
  *(_QWORD *)(v0 + 80) = v17;
  *v17 = v0;
  v17[1] = sub_100058BD8;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_100058BD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100058C7C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 64);
    swift_release(*(_QWORD *)(v2 + 72));
    swift_release(v5);
    v4 = sub_100058C4C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100058C4C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  v6 = swift_release(v2);
  defaultLogger()(v6);
  DIPRecordError(_:message:log:)(v1, 0xD000000000000029, 0x8000000100132570, v3);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100058D1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v7;

  sub_100112C60(a1, a2, a3, a4, a5, a6, a7);
  if (!v7)
    sub_1000091F8();
}

uint64_t sub_100058D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  v9 = type metadata accessor for ContinuousClock(0);
  v3[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[15] = v10;
  v3[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013SessionTranscript(0);
  v3[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[18] = v12;
  v3[19] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v13);
  v3[21] = swift_task_alloc(v13);
  v3[22] = swift_task_alloc(v13);
  v14 = *(_QWORD *)(type metadata accessor for CredentialElement(0) - 8);
  v3[23] = v14;
  v3[24] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ISO18013KnownDocTypes(0);
  v3[25] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[26] = v16;
  v3[27] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_1001768E0);
  v3[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PresentmentProposal(0);
  v3[29] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[30] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v20);
  v3[32] = swift_task_alloc(v20);
  v21 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(0);
  v3[33] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[34] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[35] = swift_task_alloc(v23);
  v3[36] = swift_task_alloc(v23);
  v3[37] = swift_task_alloc(v23);
  v24 = type metadata accessor for DIPSignpost.Config(0);
  v3[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DIPSignpost(0);
  v3[39] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v3[40] = v26;
  v3[41] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Logger(0);
  v3[42] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v3[43] = v28;
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[44] = swift_task_alloc(v29);
  v3[45] = swift_task_alloc(v29);
  v3[46] = swift_task_alloc(v29);
  return swift_task_switch(sub_100058FE8, 0, 0);
}

uint64_t sub_100058FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder buildCredentialResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 368);
  v7 = *(_QWORD *)(v1 + 336);
  v8 = *(_QWORD *)(v1 + 344);
  v9 = *(_QWORD *)(v1 + 304);
  v10 = *(void **)(v1 + 32);
  v11 = *(uint64_t **)(v1 + 40);

  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 376) = v12;
  v13 = v12(v6, v7);
  static IDCSSignposts.presentmentBuildResponse.getter(v13);
  DIPSignpost.init(_:)(v9);
  *(_WORD *)(v1 + 536) = 2;
  *(_OWORD *)(v1 + 16) = xmmword_10012AC40;
  *(_BYTE *)(v1 + 538) = 2;
  v14 = *v11;
  v15 = objc_msgSend(v10, "credentialIdentifier");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (*(_QWORD *)(v14 + 16) && (v19 = sub_1000FBC04(v16, v18), (v20 & 1) != 0))
  {
    sub_10006BC40(*(_QWORD *)(v14 + 56) + *(_QWORD *)(*(_QWORD *)(v1 + 240) + 72) * v19, *(_QWORD *)(v1 + 224), type metadata accessor for PresentmentProposal);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  v22 = *(_QWORD *)(v1 + 232);
  v23 = *(_QWORD *)(v1 + 240);
  v24 = *(_QWORD *)(v1 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, v21, 1, v22);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
  {
    v25 = *(_QWORD *)(v1 + 72);
    v82 = *(_QWORD *)(v1 + 80);
    v27 = *(_QWORD *)(v1 + 56);
    v26 = *(_QWORD *)(v1 + 64);
    v28 = *(void **)(v1 + 32);
    sub_1000150E8(*(_QWORD *)(v1 + 224), &qword_1001768E0);
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(0xE000000000000000);
    v29 = objc_msgSend(v28, "credentialIdentifier");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v32);
    v34._countAndFlagsBits = 0xD000000000000011;
    v34._object = (void *)0x80000001001322D0;
    String.append(_:)(v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.idcsInvalidPresentmentSelection(_:), v27);
    v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v60 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v36 = swift_allocError(v82, v60, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x80000001001322B0, 0, v25, 0, v35, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 132);
    swift_willThrow(v37);
    v38 = *(uint64_t **)(v1 + 280);
    v80 = *(_QWORD *)(v1 + 272);
    v83 = *(_QWORD *)(v1 + 264);
    v39 = *(_QWORD *)(v1 + 88);
    v40 = *(_QWORD *)(v1 + 96);
    v42 = *(_QWORD *)(v1 + 72);
    v41 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v42, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 56));
    v63 = v36;
    swift_errorRetain(v36);
    v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v36, v42, 0, v43, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
    v44 = swift_allocError(v41, v60, 0, 0);
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    v45(v46, v40, v41);
    *v38 = v44;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v80 + 104))(v38, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v83);
    v65 = *(_QWORD *)(v1 + 368);
    v66 = *(_QWORD *)(v1 + 360);
    v47 = *(_QWORD *)(v1 + 328);
    v61 = *(_QWORD *)(v1 + 320);
    v62 = *(_QWORD *)(v1 + 312);
    v48 = *(_QWORD *)(v1 + 296);
    v67 = *(_QWORD *)(v1 + 352);
    v68 = *(_QWORD *)(v1 + 304);
    v64 = *(_QWORD *)(v1 + 280);
    v58 = *(_QWORD *)(v1 + 264);
    v59 = *(_QWORD *)(v1 + 272);
    v69 = *(_QWORD *)(v1 + 288);
    v70 = *(_QWORD *)(v1 + 256);
    v71 = *(_QWORD *)(v1 + 248);
    v72 = *(_QWORD *)(v1 + 224);
    v73 = *(_QWORD *)(v1 + 216);
    v74 = *(_QWORD *)(v1 + 192);
    v75 = *(_QWORD *)(v1 + 176);
    v76 = *(_QWORD *)(v1 + 168);
    v77 = *(_QWORD *)(v1 + 160);
    v78 = *(_QWORD *)(v1 + 152);
    v79 = *(_QWORD *)(v1 + 128);
    v49 = *(_QWORD *)(v1 + 96);
    v51 = *(_QWORD *)(v1 + 80);
    v50 = *(_QWORD *)(v1 + 88);
    v81 = *(_QWORD *)(v1 + 104);
    v84 = *(_QWORD *)(v1 + 72);
    v53 = *(_QWORD *)(v1 + 40);
    v52 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t))(v59 + 32))(v48);
    swift_allocError(v51, v60, 0, 0);
    v55 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v45)(v54, v49, v51);
    swift_willThrow(v55);
    swift_errorRelease(v63);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    sub_10005C88C(v52, (_BYTE *)(v1 + 537), v53, v48, (unsigned __int8 *)(v1 + 536), (uint64_t *)(v1 + 16), (unsigned __int8 *)(v1 + 538), v47);
    sub_10000B164(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v48, v58);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v47, v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v47);
    swift_task_dealloc(v68);
    swift_task_dealloc(v48);
    swift_task_dealloc(v69);
    swift_task_dealloc(v64);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v49);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    sub_100041230(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 256), type metadata accessor for PresentmentProposal);
    v57 = (_QWORD *)swift_task_alloc(dword_10017663C);
    *(_QWORD *)(v1 + 384) = v57;
    *v57 = v1;
    v57[1] = sub_100059650;
    return sub_10005D7A8(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 32));
  }
}

uint64_t sub_100059650(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 384);
  *(_QWORD *)(v3 + 392) = a1;
  *(_QWORD *)(v3 + 400) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10005BE58;
  else
    v5 = sub_1000596BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000596BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void **v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  char v64;
  id *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);

  v1 = *(void **)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(void ***)(v0 + 256);
  sub_10006CA8C((uint64_t)v3, type metadata accessor for PresentmentProposal);
  sub_100041230(v2, (uint64_t)v3, type metadata accessor for PresentmentProposal);
  v4 = *v3;
  v5 = v1;
  v6 = objc_msgSend(v4, "readerMetadata");
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "identifier");

  }
  *(_BYTE *)(v0 + 536) = v7 != 0;
  v9 = objc_msgSend(v4, "authACL");
  if (v9)
  {
    v10 = v9;
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = *(_QWORD *)(v0 + 256);
  sub_10000B164(0, 0xF000000000000000);
  *(_QWORD *)(v0 + 16) = v11;
  *(_QWORD *)(v0 + 24) = v13;
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(void **)(v0 + 392);
  if (v15)
  {
    v17 = objc_msgSend(v16, "elementsToPresent", swift_bridgeObjectRetain(*(_QWORD *)(v14 + 8)).n128_f64[0]);
    if (v17)
    {
      v18 = v17;
      v19 = sub_100008E84(&qword_100177CB0);
      v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String, v19, &protocol witness table for String);

    }
    else
    {
      v20 = 0;
    }
    v48 = *(_QWORD *)(v0 + 400);
    v49 = sub_10006A6D4(v15, v20);
    *(_QWORD *)(v0 + 408) = v49;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRetain(v49);
    sub_10005CB74(v50);
    v52 = v51;
    *(_QWORD *)(v0 + 416) = v48;
    swift_bridgeObjectRelease(v49);
    v53 = *(_QWORD *)(v52 + 16);
    if (v53)
    {
      v54 = *(_QWORD *)(v0 + 184);
      v55 = *(_QWORD *)(v0 + 192);
      v56 = v52 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
      v57 = *(_QWORD *)(v54 + 72);
      swift_bridgeObjectRetain(v52);
      while (1)
      {
        v58 = *(uint64_t **)(v0 + 192);
        sub_10006BC40(v56, (uint64_t)v58, type metadata accessor for CredentialElement);
        v59 = *v58;
        v60 = *(_QWORD *)(v55 + 8);
        v61 = *(_QWORD *)(v0 + 192);
        if (v59 == 0x7469617274726F70 && v60 == 0xE800000000000000)
          break;
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, 0x7469617274726F70, 0xE800000000000000, 0);
        sub_10006CA8C(v61, type metadata accessor for CredentialElement);
        if ((v63 & 1) != 0)
          goto LABEL_23;
        v56 += v57;
        if (!--v53)
        {
          swift_bridgeObjectRelease_n(v52, 2);
          goto LABEL_21;
        }
      }
      sub_10006CA8C(*(_QWORD *)(v0 + 192), type metadata accessor for CredentialElement);
LABEL_23:
      swift_bridgeObjectRelease_n(v52, 2);
      v64 = 1;
    }
    else
    {
      swift_bridgeObjectRelease(v52);
LABEL_21:
      v64 = 0;
    }
    v65 = *(id **)(v0 + 256);
    v67 = *(_QWORD *)(v0 + 208);
    v66 = *(_QWORD *)(v0 + 216);
    v68 = *(_QWORD *)(v0 + 200);
    *(_BYTE *)(v0 + 538) = v64;
    v69 = objc_msgSend(*v65, "docType");
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

    v73 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v67 + 104))(v66, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v68);
    v74 = ISO18013KnownDocTypes.rawValue.getter(v73);
    v76 = v75;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    if (v70 == v74 && v72 == v76)
    {
      v78 = 1;
      v76 = v72;
    }
    else
    {
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v72, v74, v76, 0);
    }
    v79 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v76);
    *(_BYTE *)(v0 + 537) = v78 & 1;
    v80 = type metadata accessor for PresentmentRequestInterpretation(0);
    *(_QWORD *)(v0 + 424) = v80;
    v81 = v79 + *(int *)(v80 + 28);
    v109 = (uint64_t (*)(uint64_t))((char *)&dword_1001768E8 + dword_1001768E8);
    v82 = (_QWORD *)swift_task_alloc(unk_1001768EC);
    *(_QWORD *)(v0 + 432) = v82;
    *v82 = v0;
    v82[1] = sub_100059E6C;
    return v109(v81);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 56);
    v25 = *(_QWORD *)(v0 + 64);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v23, enum case for DIPError.Code.idcsMissingProposalElements(_:), v24);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v90 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v27 = swift_allocError(v22, v90, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100132330, 0, v23, 0, v26, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 146);
    swift_willThrow(v28);

    sub_10006CA8C(v21, type metadata accessor for PresentmentProposal);
    v29 = *(uint64_t **)(v0 + 280);
    v105 = *(_QWORD *)(v0 + 272);
    v107 = *(_QWORD *)(v0 + 264);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v32, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
    v87 = v27;
    swift_errorRetain(v27);
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v27, v32, 0, v34, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
    v35 = swift_allocError(v33, v90, 0, 0);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v36(v37, v31, v33);
    *v29 = v35;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v105 + 104))(v29, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v107);
    v91 = *(_QWORD *)(v0 + 360);
    v92 = *(_QWORD *)(v0 + 352);
    v38 = *(_QWORD *)(v0 + 328);
    v85 = *(_QWORD *)(v0 + 320);
    v86 = *(_QWORD *)(v0 + 312);
    v39 = *(_QWORD *)(v0 + 296);
    v93 = *(_QWORD *)(v0 + 304);
    v94 = *(_QWORD *)(v0 + 288);
    v88 = *(_QWORD *)(v0 + 280);
    v89 = *(_QWORD *)(v0 + 368);
    v83 = *(_QWORD *)(v0 + 264);
    v84 = *(_QWORD *)(v0 + 272);
    v95 = *(_QWORD *)(v0 + 256);
    v96 = *(_QWORD *)(v0 + 248);
    v97 = *(_QWORD *)(v0 + 224);
    v98 = *(_QWORD *)(v0 + 216);
    v99 = *(_QWORD *)(v0 + 192);
    v100 = *(_QWORD *)(v0 + 176);
    v101 = *(_QWORD *)(v0 + 168);
    v102 = *(_QWORD *)(v0 + 160);
    v103 = *(_QWORD *)(v0 + 152);
    v40 = *(_QWORD *)(v0 + 96);
    v104 = *(_QWORD *)(v0 + 128);
    v106 = *(_QWORD *)(v0 + 104);
    v41 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v0 + 88);
    v108 = *(_QWORD *)(v0 + 72);
    v43 = *(_QWORD *)(v0 + 40);
    v44 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t))(v84 + 32))(v39);
    swift_allocError(v41, v90, 0, 0);
    v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36)(v45, v40, v41);
    swift_willThrow(v46);
    swift_errorRelease(v87);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    sub_10005C88C(v44, (_BYTE *)(v0 + 537), v43, v39, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v38);
    sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v39, v83);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v38, v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v38);
    swift_task_dealloc(v93);
    swift_task_dealloc(v39);
    swift_task_dealloc(v94);
    swift_task_dealloc(v88);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v40);
    swift_task_dealloc(v108);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100059E6C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_BYTE *)(*(_QWORD *)v1 + 539) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100059EC8, 0, 0);
}

uint64_t sub_100059EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  if (*(_BYTE *)(v0 + 539) != 1)
  {
    v15 = *(void **)(v0 + 392);
    v80 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 56);
    v20 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 408));

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v18, enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:), v19);
    v21 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v17, v22, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100132370, 0, v18, 0, v21, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 158);
    v16 = v23;
    swift_willThrow(v24);
    goto LABEL_7;
  }
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  sub_10002E908(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 424) + 24), v1, &qword_100176830);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 392);
    sub_1000150E8(*(_QWORD *)(v0 + 168), &qword_100176830);
    v5 = objc_msgSend(v4, "sessionTranscript");
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v0 + 416);
      v8 = *(_QWORD *)(v0 + 136);
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v11 = v10;

      v12 = sub_100069F9C();
      v13 = sub_1000058C8(&qword_1001768F8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript, (uint64_t)&protocol conformance descriptor for ISO18013SessionTranscript);
      dispatch thunk of CBORDecoder.decode<A>(_:from:)(v8, v9, v11, v8, v13);
      if (v7)
      {
        v14 = *(_QWORD *)(v0 + 408);
        v15 = *(void **)(v0 + 392);
        v80 = *(_QWORD *)(v0 + 256);
        v16 = v7;
        swift_release(v12);
        sub_100005AB0(v9, v11);
        swift_bridgeObjectRelease(v14);

LABEL_7:
        sub_10006CA8C(v80, type metadata accessor for PresentmentProposal);
        v25 = *(uint64_t **)(v0 + 280);
        v76 = *(_QWORD *)(v0 + 272);
        v78 = *(_QWORD *)(v0 + 264);
        v26 = *(_QWORD *)(v0 + 88);
        v27 = *(_QWORD *)(v0 + 96);
        v29 = *(_QWORD *)(v0 + 72);
        v28 = *(_QWORD *)(v0 + 80);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v29, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
        v62 = v16;
        swift_errorRetain(v16);
        v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v16, v29, 0, v30, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
        v31 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v32 = swift_allocError(v28, v31, 0, 0);
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
        v33(v34, v27, v28);
        *v25 = v32;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v76 + 104))(v25, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v78);
        v60 = *(_QWORD *)(v0 + 368);
        v61 = *(_QWORD *)(v0 + 360);
        v35 = *(_QWORD *)(v0 + 328);
        v57 = *(_QWORD *)(v0 + 320);
        v58 = *(_QWORD *)(v0 + 312);
        v36 = *(_QWORD *)(v0 + 296);
        v63 = *(_QWORD *)(v0 + 352);
        v64 = *(_QWORD *)(v0 + 304);
        v59 = *(_QWORD *)(v0 + 280);
        v55 = *(_QWORD *)(v0 + 264);
        v56 = *(_QWORD *)(v0 + 272);
        v65 = *(_QWORD *)(v0 + 288);
        v66 = *(_QWORD *)(v0 + 256);
        v67 = *(_QWORD *)(v0 + 248);
        v68 = *(_QWORD *)(v0 + 224);
        v69 = *(_QWORD *)(v0 + 216);
        v70 = *(_QWORD *)(v0 + 192);
        v71 = *(_QWORD *)(v0 + 176);
        v72 = *(_QWORD *)(v0 + 168);
        v73 = *(_QWORD *)(v0 + 160);
        v74 = *(_QWORD *)(v0 + 152);
        v37 = *(_QWORD *)(v0 + 96);
        v75 = *(_QWORD *)(v0 + 128);
        v77 = *(_QWORD *)(v0 + 104);
        v39 = *(_QWORD *)(v0 + 80);
        v38 = *(_QWORD *)(v0 + 88);
        v79 = *(_QWORD *)(v0 + 72);
        v40 = *(_QWORD *)(v0 + 40);
        v41 = *(_QWORD *)(v0 + 48);
        (*(void (**)(uint64_t))(v56 + 32))(v36);
        swift_allocError(v39, v31, 0, 0);
        v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v33)(v42, v37, v39);
        swift_willThrow(v43);
        swift_errorRelease(v62);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
        sub_10005C88C(v41, (_BYTE *)(v0 + 537), v40, v36, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v35);
        sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v36, v55);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v35, v58);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v63);
        swift_task_dealloc(v35);
        swift_task_dealloc(v64);
        swift_task_dealloc(v36);
        swift_task_dealloc(v65);
        swift_task_dealloc(v59);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v74);
        swift_task_dealloc(v75);
        swift_task_dealloc(v77);
        swift_task_dealloc(v37);
        swift_task_dealloc(v79);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v51 = *(_QWORD *)(v0 + 176);
      v52 = *(_QWORD *)(v0 + 160);
      v53 = *(_QWORD *)(v0 + 136);
      v54 = *(_QWORD *)(v0 + 144);
      swift_release(v12);
      sub_100005AB0(v9, v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v52, 0, 1, v53);
      sub_10002E94C(v52, v51, &qword_100176830);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 176), 1, 1, *(_QWORD *)(v0 + 136));
    }
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 176);
    v47 = *(_QWORD *)(v0 + 144);
    v46 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 136);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32);
    v49(v46, *(_QWORD *)(v0 + 168), v48);
    v49(v45, v46, v48);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v48);
  }
  v50 = (_QWORD *)swift_task_alloc(dword_100176644);
  *(_QWORD *)(v0 + 440) = v50;
  *v50 = v0;
  v50[1] = sub_10005A528;
  return sub_1000618F4(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 176));
}

uint64_t sub_10005A528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t **v8;

  v4 = (*v3)[55];
  v5 = *v3;
  v5[56] = a1;
  v5[57] = a2;
  v5[58] = v2;
  swift_task_dealloc(v4);
  if (v2)
  {
    v6 = (void *)v5[49];
    swift_bridgeObjectRelease(v5[51]);

    return swift_task_switch(sub_10005C1A4, 0, 0);
  }
  else
  {
    v8 = (uint64_t **)swift_task_alloc(dword_100176624);
    v5[59] = (uint64_t)v8;
    *v8 = v5;
    v8[1] = (uint64_t *)sub_10005A5DC;
    return sub_1000589EC(v5[49], v5[32]);
  }
}

uint64_t sub_10005A5DC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 392);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));

  return swift_task_switch(sub_10005A638, 0, 0);
}

uint64_t sub_10005A638()
{
  uint64_t *v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t **v3;

  v1._object = (void *)0x80000001001323B0;
  v2._countAndFlagsBits = 0x6661363535363661;
  v2._object = (void *)0xE800000000000000;
  v1._countAndFlagsBits = 0xD000000000000058;
  logMilestone(tag:description:)(v2, v1);
  v3 = (uint64_t **)swift_task_alloc(dword_10017666C);
  v0[60] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10005A6B8;
  return sub_100069638(v0[56], v0[57]);
}

uint64_t sub_10005A6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 480);
  v4[61] = a1;
  v4[62] = a2;
  v4[63] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_bridgeObjectRelease(v4[51]);
    v6 = sub_10005C510;
  }
  else
  {
    v6 = sub_10005A730;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005A730()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Class isa;
  Class v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  char *v140;
  uint64_t *v141;

  v1._countAndFlagsBits = 0xD000000000000054;
  v1._object = (void *)0x8000000100132410;
  v2._countAndFlagsBits = 0x3466373032303261;
  v2._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v2, v1);
  v3 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 512) = v3;
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5._countAndFlagsBits = 0xD000000000000026;
  v5._object = (void *)0x8000000100132470;
  v6 = NSUserDefaults.internalBool(forKey:)(v5);

  if (v6)
  {
    v8 = defaultLogger()(v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sleeping for 10 seconds before returning presentment response due to user defaults setting", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 376);
    v13 = *(_QWORD *)(v0 + 360);
    v14 = *(_QWORD *)(v0 + 336);

    v15 = v12(v13, v14);
    ContinuousClock.init()(v15);
    v140 = (char *)&dword_1001768F0 + dword_1001768F0;
    v16 = (_QWORD *)swift_task_alloc(unk_1001768F4);
    *(_QWORD *)(v0 + 520) = v16;
    *v16 = v0;
    v16[1] = sub_10005B178;
    return ((uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v140)(0x8AC7230489E80000, 0, 0, 0, 1);
  }
  else
  {
    v18 = objc_msgSend(*(id *)(v0 + 512), "standardUserDefaults");
    v19._countAndFlagsBits = 0xD000000000000028;
    v19._object = (void *)0x80000001001324A0;
    v20 = NSUserDefaults.internalBool(forKey:)(v19);

    v139 = (unsigned __int8 *)(v0 + 536);
    v141 = (uint64_t *)(v0 + 16);
    v138 = (unsigned __int8 *)(v0 + 538);
    if (v20)
    {
      v21 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 408));
      v22 = defaultLogger()(v21);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Throwing error at end of presentment due to internal defaults setting", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }
      v116 = *(_QWORD *)(v0 + 496);
      v113 = *(_QWORD *)(v0 + 488);
      v127 = *(_QWORD *)(v0 + 456);
      v119 = *(_QWORD *)(v0 + 448);
      v106 = *(void **)(v0 + 392);
      v26 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v27 = *(_QWORD *)(v0 + 352);
      v28 = *(_QWORD *)(v0 + 336);
      v29 = *(uint64_t **)(v0 + 288);
      v94 = *(_QWORD *)(v0 + 272);
      v97 = *(_QWORD *)(v0 + 264);
      v100 = *(_QWORD *)(v0 + 296);
      v133 = *(_QWORD *)(v0 + 256);
      v124 = *(_QWORD *)(v0 + 176);
      v86 = *(_QWORD *)(v0 + 104);
      v30 = *(_QWORD *)(v0 + 80);
      v91 = *(_QWORD *)(v0 + 88);
      v31 = *(_QWORD *)(v0 + 64);
      v32 = *(_QWORD *)(v0 + 72);

      v26(v27, v28);
      v130 = enum case for DIPError.Code.internalError(_:);
      (*(void (**)(uint64_t))(v31 + 104))(v32);
      v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x80000001001324D0, 0, v32, 0, v33, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 192);
      v34 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v35 = swift_allocError(v30, v34, 0, 0);
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16);
      v36(v37, v86, v30);
      *v29 = v35;
      v103 = enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:);
      (*(void (**)(uint64_t *))(v94 + 104))(v29);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v94 + 32))(v100, v29, v97);
      v38 = v34;
      v39 = swift_allocError(v30, v34, 0, 0);
      v41 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36)(v40, v86, v30);
      swift_willThrow(v41);

      sub_100005AB0(v113, v116);
      sub_100005AB0(v119, v127);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v86, v30);
      sub_1000150E8(v124, &qword_100176830);
      sub_10006CA8C(v133, type metadata accessor for PresentmentProposal);
      v43 = *(_QWORD *)(v0 + 272);
      v42 = *(uint64_t **)(v0 + 280);
      v134 = *(_QWORD *)(v0 + 264);
      v44 = *(_QWORD *)(v0 + 88);
      v45 = *(_QWORD *)(v0 + 96);
      v47 = *(_QWORD *)(v0 + 72);
      v46 = *(_QWORD *)(v0 + 80);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v47, v130, *(_QWORD *)(v0 + 56));
      v89 = v39;
      swift_errorRetain(v39);
      v48 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v39, v47, 0, v48, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
      v49 = v38;
      v50 = swift_allocError(v46, v38, 0, 0);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
      v51(v52, v45, v46);
      *v42 = v50;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v43 + 104))(v42, v103, v134);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 264));
      v92 = *(_QWORD *)(v0 + 360);
      v95 = *(_QWORD *)(v0 + 352);
      v53 = *(_QWORD *)(v0 + 328);
      v80 = *(_QWORD *)(v0 + 320);
      v82 = *(_QWORD *)(v0 + 312);
      v54 = *(_QWORD *)(v0 + 296);
      v98 = *(_QWORD *)(v0 + 304);
      v101 = *(_QWORD *)(v0 + 288);
      v84 = *(_QWORD *)(v0 + 280);
      v87 = *(_QWORD *)(v0 + 368);
      v76 = *(_QWORD *)(v0 + 264);
      v78 = *(_QWORD *)(v0 + 272);
      v104 = *(_QWORD *)(v0 + 256);
      v107 = *(_QWORD *)(v0 + 248);
      v109 = *(_QWORD *)(v0 + 224);
      v111 = *(_QWORD *)(v0 + 216);
      v114 = *(_QWORD *)(v0 + 192);
      v117 = *(_QWORD *)(v0 + 176);
      v120 = *(_QWORD *)(v0 + 168);
      v122 = *(_QWORD *)(v0 + 160);
      v125 = *(_QWORD *)(v0 + 152);
      v55 = *(_QWORD *)(v0 + 96);
      v128 = *(_QWORD *)(v0 + 128);
      v131 = *(_QWORD *)(v0 + 104);
      v56 = *(_QWORD *)(v0 + 80);
      v57 = *(_QWORD *)(v0 + 88);
      v135 = *(_QWORD *)(v0 + 72);
      v58 = *(_QWORD *)(v0 + 48);
      v74 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t))(v78 + 32))(v54);
      swift_allocError(v56, v49, 0, 0);
      v60 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v51)(v59, v55, v56);
      swift_willThrow(v60);
      swift_errorRelease(v89);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
      sub_10005C88C(v58, (_BYTE *)(v0 + 537), v74, v54, v139, v141, v138, v53);
      sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v54, v76);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v53, v82);
      swift_task_dealloc(v87);
      swift_task_dealloc(v92);
      swift_task_dealloc(v95);
      swift_task_dealloc(v53);
      swift_task_dealloc(v98);
      swift_task_dealloc(v54);
      swift_task_dealloc(v101);
      swift_task_dealloc(v84);
      swift_task_dealloc(v104);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v114);
      swift_task_dealloc(v117);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v125);
      swift_task_dealloc(v128);
      swift_task_dealloc(v131);
      swift_task_dealloc(v55);
      swift_task_dealloc(v135);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v61 = *(_QWORD *)(v0 + 488);
      v62 = *(_QWORD *)(v0 + 496);
      v83 = *(_QWORD *)(v0 + 448);
      v85 = *(_QWORD *)(v0 + 456);
      v63 = *(_QWORD *)(v0 + 408);
      v75 = *(void **)(v0 + 392);
      v93 = *(_QWORD *)(v0 + 368);
      v96 = *(_QWORD *)(v0 + 360);
      v64 = *(_QWORD *)(v0 + 328);
      v88 = *(_QWORD *)(v0 + 320);
      v90 = *(_QWORD *)(v0 + 312);
      v65 = *(_QWORD *)(v0 + 296);
      v99 = *(_QWORD *)(v0 + 352);
      v102 = *(_QWORD *)(v0 + 304);
      v105 = *(_QWORD *)(v0 + 288);
      v108 = *(_QWORD *)(v0 + 280);
      v79 = *(_QWORD *)(v0 + 272);
      v81 = *(_QWORD *)(v0 + 264);
      v77 = *(_QWORD *)(v0 + 256);
      v110 = *(_QWORD *)(v0 + 248);
      v112 = *(_QWORD *)(v0 + 224);
      v115 = *(_QWORD *)(v0 + 216);
      v118 = *(_QWORD *)(v0 + 192);
      v72 = *(_QWORD *)(v0 + 176);
      v121 = *(_QWORD *)(v0 + 168);
      v123 = *(_QWORD *)(v0 + 160);
      v126 = *(_QWORD *)(v0 + 152);
      v132 = *(_QWORD *)(v0 + 128);
      v129 = *(_QWORD *)(v0 + 104);
      v136 = *(_QWORD *)(v0 + 96);
      v137 = *(_QWORD *)(v0 + 72);
      v71 = *(_QWORD *)(v0 + 48);
      v73 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD))(v79 + 104))(v65, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.success(_:));
      v66 = sub_10007A8B8(v63);
      swift_bridgeObjectRelease(v63);
      v67 = objc_allocWithZone((Class)DCCredentialResponse);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100008E84(&qword_100177C20);
      v69 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v66);
      v70 = objc_msgSend(v67, "initWithResponseData:elementsByNamespace:", isa, v69);
      sub_100005AB0(v61, v62);

      sub_100005AB0(v83, v85);
      sub_1000150E8(v72, &qword_100176830);
      sub_10006CA8C(v77, type metadata accessor for PresentmentProposal);
      sub_10005C88C(v71, (_BYTE *)(v0 + 537), v73, v65, v139, v141, v138, v64);
      sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v65, v81);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v64, v90);
      swift_task_dealloc(v93);
      swift_task_dealloc(v96);
      swift_task_dealloc(v99);
      swift_task_dealloc(v64);
      swift_task_dealloc(v102);
      swift_task_dealloc(v65);
      swift_task_dealloc(v105);
      swift_task_dealloc(v108);
      swift_task_dealloc(v77);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v115);
      swift_task_dealloc(v118);
      swift_task_dealloc(v72);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      swift_task_dealloc(v132);
      swift_task_dealloc(v129);
      swift_task_dealloc(v136);
      swift_task_dealloc(v137);
      return (*(uint64_t (**)(id))(v0 + 8))(v70);
    }
  }
}

uint64_t sub_10005B178()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[51];
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    swift_bridgeObjectRelease(v4);
    v5 = sub_10005BACC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    v5 = sub_10005B208;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005B208()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Class isa;
  Class v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t *v124;

  v1 = objc_msgSend(*(id *)(v0 + 512), "standardUserDefaults");
  v2._countAndFlagsBits = 0xD000000000000028;
  v2._object = (void *)0x80000001001324A0;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  v123 = (unsigned __int8 *)(v0 + 536);
  v124 = (uint64_t *)(v0 + 16);
  v122 = (unsigned __int8 *)(v0 + 538);
  if (v3)
  {
    v4 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 408));
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Throwing error at end of presentment due to internal defaults setting", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v100 = *(_QWORD *)(v0 + 496);
    v97 = *(_QWORD *)(v0 + 488);
    v111 = *(_QWORD *)(v0 + 456);
    v103 = *(_QWORD *)(v0 + 448);
    v90 = *(void **)(v0 + 392);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v10 = *(_QWORD *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(uint64_t **)(v0 + 288);
    v78 = *(_QWORD *)(v0 + 272);
    v81 = *(_QWORD *)(v0 + 264);
    v84 = *(_QWORD *)(v0 + 296);
    v117 = *(_QWORD *)(v0 + 256);
    v108 = *(_QWORD *)(v0 + 176);
    v70 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 80);
    v75 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);

    v9(v10, v11);
    v114 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(v14 + 104))(v15);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x80000001001324D0, 0, v15, 0, v16, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 192);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v18 = swift_allocError(v13, v17, 0, 0);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
    v19(v20, v70, v13);
    *v12 = v18;
    v87 = enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:);
    (*(void (**)(uint64_t *))(v78 + 104))(v12);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v78 + 32))(v84, v12, v81);
    v21 = v17;
    v22 = swift_allocError(v13, v17, 0, 0);
    v24 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v23, v70, v13);
    swift_willThrow(v24);

    sub_100005AB0(v97, v100);
    sub_100005AB0(v103, v111);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v70, v13);
    sub_1000150E8(v108, &qword_100176830);
    sub_10006CA8C(v117, type metadata accessor for PresentmentProposal);
    v26 = *(_QWORD *)(v0 + 272);
    v25 = *(uint64_t **)(v0 + 280);
    v118 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 72);
    v29 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v30, v114, *(_QWORD *)(v0 + 56));
    v73 = v22;
    swift_errorRetain(v22);
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v22, v30, 0, v31, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
    v32 = v21;
    v33 = swift_allocError(v29, v21, 0, 0);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v34(v35, v28, v29);
    *v25 = v33;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v26 + 104))(v25, v87, v118);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 264));
    v76 = *(_QWORD *)(v0 + 360);
    v79 = *(_QWORD *)(v0 + 352);
    v36 = *(_QWORD *)(v0 + 328);
    v64 = *(_QWORD *)(v0 + 320);
    v66 = *(_QWORD *)(v0 + 312);
    v37 = *(_QWORD *)(v0 + 296);
    v82 = *(_QWORD *)(v0 + 304);
    v85 = *(_QWORD *)(v0 + 288);
    v68 = *(_QWORD *)(v0 + 280);
    v71 = *(_QWORD *)(v0 + 368);
    v60 = *(_QWORD *)(v0 + 264);
    v62 = *(_QWORD *)(v0 + 272);
    v88 = *(_QWORD *)(v0 + 256);
    v91 = *(_QWORD *)(v0 + 248);
    v93 = *(_QWORD *)(v0 + 224);
    v95 = *(_QWORD *)(v0 + 216);
    v98 = *(_QWORD *)(v0 + 192);
    v101 = *(_QWORD *)(v0 + 176);
    v104 = *(_QWORD *)(v0 + 168);
    v106 = *(_QWORD *)(v0 + 160);
    v109 = *(_QWORD *)(v0 + 152);
    v38 = *(_QWORD *)(v0 + 96);
    v112 = *(_QWORD *)(v0 + 128);
    v115 = *(_QWORD *)(v0 + 104);
    v39 = *(_QWORD *)(v0 + 80);
    v40 = *(_QWORD *)(v0 + 88);
    v119 = *(_QWORD *)(v0 + 72);
    v41 = *(_QWORD *)(v0 + 48);
    v58 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t))(v62 + 32))(v37);
    swift_allocError(v39, v32, 0, 0);
    v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v42, v38, v39);
    swift_willThrow(v43);
    swift_errorRelease(v73);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    sub_10005C88C(v41, (_BYTE *)(v0 + 537), v58, v37, v123, v124, v122, v36);
    sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v37, v60);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v36, v66);
    swift_task_dealloc(v71);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    swift_task_dealloc(v36);
    swift_task_dealloc(v82);
    swift_task_dealloc(v37);
    swift_task_dealloc(v85);
    swift_task_dealloc(v68);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    swift_task_dealloc(v38);
    swift_task_dealloc(v119);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 488);
    v46 = *(_QWORD *)(v0 + 496);
    v67 = *(_QWORD *)(v0 + 448);
    v69 = *(_QWORD *)(v0 + 456);
    v47 = *(_QWORD *)(v0 + 408);
    v59 = *(void **)(v0 + 392);
    v77 = *(_QWORD *)(v0 + 368);
    v80 = *(_QWORD *)(v0 + 360);
    v48 = *(_QWORD *)(v0 + 328);
    v72 = *(_QWORD *)(v0 + 320);
    v74 = *(_QWORD *)(v0 + 312);
    v49 = *(_QWORD *)(v0 + 296);
    v83 = *(_QWORD *)(v0 + 352);
    v86 = *(_QWORD *)(v0 + 304);
    v89 = *(_QWORD *)(v0 + 288);
    v92 = *(_QWORD *)(v0 + 280);
    v63 = *(_QWORD *)(v0 + 272);
    v65 = *(_QWORD *)(v0 + 264);
    v61 = *(_QWORD *)(v0 + 256);
    v94 = *(_QWORD *)(v0 + 248);
    v96 = *(_QWORD *)(v0 + 224);
    v99 = *(_QWORD *)(v0 + 216);
    v102 = *(_QWORD *)(v0 + 192);
    v56 = *(_QWORD *)(v0 + 176);
    v105 = *(_QWORD *)(v0 + 168);
    v107 = *(_QWORD *)(v0 + 160);
    v110 = *(_QWORD *)(v0 + 152);
    v116 = *(_QWORD *)(v0 + 128);
    v113 = *(_QWORD *)(v0 + 104);
    v120 = *(_QWORD *)(v0 + 96);
    v121 = *(_QWORD *)(v0 + 72);
    v55 = *(_QWORD *)(v0 + 48);
    v57 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD))(v63 + 104))(v49, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.success(_:));
    v50 = sub_10007A8B8(v47);
    swift_bridgeObjectRelease(v47);
    v51 = objc_allocWithZone((Class)DCCredentialResponse);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100008E84(&qword_100177C20);
    v53 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    v54 = objc_msgSend(v51, "initWithResponseData:elementsByNamespace:", isa, v53);
    sub_100005AB0(v45, v46);

    sub_100005AB0(v67, v69);
    sub_1000150E8(v56, &qword_100176830);
    sub_10006CA8C(v61, type metadata accessor for PresentmentProposal);
    sub_10005C88C(v55, (_BYTE *)(v0 + 537), v57, v49, v123, v124, v122, v48);
    sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v49, v65);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v48, v74);
    swift_task_dealloc(v77);
    swift_task_dealloc(v80);
    swift_task_dealloc(v83);
    swift_task_dealloc(v48);
    swift_task_dealloc(v86);
    swift_task_dealloc(v49);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v61);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v99);
    swift_task_dealloc(v102);
    swift_task_dealloc(v56);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    swift_task_dealloc(v116);
    swift_task_dealloc(v113);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(id))(v0 + 8))(v54);
  }
}

uint64_t sub_10005BACC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 176);

  sub_100005AB0(v1, v2);
  sub_100005AB0(v4, v3);
  sub_1000150E8(v6, &qword_100176830);
  sub_10006CA8C(v5, type metadata accessor for PresentmentProposal);
  v7 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 272);
  v8 = *(uint64_t **)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v14, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  v37 = v7;
  swift_errorRetain(v7);
  v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v7, v14, 0, v15, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
  v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v17 = swift_allocError(v13, v16, 0, 0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v18(v19, v11, v13);
  *v8 = v17;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v8, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v10);
  v35 = *(_QWORD *)(v0 + 368);
  v36 = *(_QWORD *)(v0 + 360);
  v20 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 320);
  v33 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 296);
  v38 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 304);
  v34 = *(_QWORD *)(v0 + 280);
  v30 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 272);
  v40 = *(_QWORD *)(v0 + 288);
  v41 = *(_QWORD *)(v0 + 256);
  v42 = *(_QWORD *)(v0 + 248);
  v43 = *(_QWORD *)(v0 + 224);
  v44 = *(_QWORD *)(v0 + 216);
  v45 = *(_QWORD *)(v0 + 192);
  v46 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 168);
  v48 = *(_QWORD *)(v0 + 160);
  v49 = *(_QWORD *)(v0 + 152);
  v50 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 88);
  v51 = *(_QWORD *)(v0 + 104);
  v52 = *(_QWORD *)(v0 + 72);
  v25 = *(_QWORD *)(v0 + 48);
  v29 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v31 + 32))(v21);
  swift_allocError(v23, v16, 0, 0);
  v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v26, v22, v23);
  swift_willThrow(v27);
  swift_errorRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  sub_10005C88C(v25, (_BYTE *)(v0 + 537), v29, v21, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v20);
  sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v21, v30);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v20, v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v20);
  swift_task_dealloc(v39);
  swift_task_dealloc(v21);
  swift_task_dealloc(v40);
  swift_task_dealloc(v34);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v22);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_10006CA8C(*(_QWORD *)(v0 + 256), type metadata accessor for PresentmentProposal);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(uint64_t **)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  v31 = v1;
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v9, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v12(v13, v5, v7);
  *v2 = v11;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v2, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v4);
  v29 = *(_QWORD *)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 296);
  v32 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 280);
  v24 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 272);
  v34 = *(_QWORD *)(v0 + 288);
  v35 = *(_QWORD *)(v0 + 256);
  v36 = *(_QWORD *)(v0 + 248);
  v37 = *(_QWORD *)(v0 + 224);
  v38 = *(_QWORD *)(v0 + 216);
  v39 = *(_QWORD *)(v0 + 192);
  v40 = *(_QWORD *)(v0 + 176);
  v41 = *(_QWORD *)(v0 + 168);
  v42 = *(_QWORD *)(v0 + 160);
  v43 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);
  v45 = *(_QWORD *)(v0 + 104);
  v46 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 48);
  v23 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v25 + 32))(v15);
  swift_allocError(v17, v10, 0, 0);
  v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v20, v16, v17);
  swift_willThrow(v21);
  swift_errorRelease(v31);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  sub_10005C88C(v19, (_BYTE *)(v0 + 537), v23, v15, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v14);
  sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v14, v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v14);
  swift_task_dealloc(v33);
  swift_task_dealloc(v15);
  swift_task_dealloc(v34);
  swift_task_dealloc(v28);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v16);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 176);

  sub_1000150E8(v2, &qword_100176830);
  sub_10006CA8C(v1, type metadata accessor for PresentmentProposal);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(uint64_t **)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v10, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  v33 = v3;
  swift_errorRetain(v3);
  v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v10, 0, v11, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v13 = swift_allocError(v9, v12, 0, 0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v14(v15, v7, v9);
  *v4 = v13;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v4, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v6);
  v31 = *(_QWORD *)(v0 + 368);
  v32 = *(_QWORD *)(v0 + 360);
  v16 = *(_QWORD *)(v0 + 328);
  v28 = *(_QWORD *)(v0 + 320);
  v29 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 296);
  v34 = *(_QWORD *)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 280);
  v26 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 272);
  v36 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 256);
  v38 = *(_QWORD *)(v0 + 248);
  v39 = *(_QWORD *)(v0 + 224);
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 192);
  v42 = *(_QWORD *)(v0 + 176);
  v43 = *(_QWORD *)(v0 + 168);
  v44 = *(_QWORD *)(v0 + 160);
  v45 = *(_QWORD *)(v0 + 152);
  v46 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 88);
  v47 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 48);
  v25 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v27 + 32))(v17);
  swift_allocError(v19, v12, 0, 0);
  v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v22, v18, v19);
  swift_willThrow(v23);
  swift_errorRelease(v33);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  sub_10005C88C(v21, (_BYTE *)(v0 + 537), v25, v17, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v16);
  sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v17, v26);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v16, v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v16);
  swift_task_dealloc(v35);
  swift_task_dealloc(v17);
  swift_task_dealloc(v36);
  swift_task_dealloc(v30);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v18);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C510()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 176);

  sub_100005AB0(v1, v2);
  sub_1000150E8(v4, &qword_100176830);
  sub_10006CA8C(v3, type metadata accessor for PresentmentProposal);
  v5 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(uint64_t **)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v12, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  v35 = v5;
  swift_errorRetain(v5);
  v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v12, 0, v13, 0xD000000000000062, 0x8000000100131930, 0xD000000000000039, 0x80000001001322F0, 199);
  v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v15 = swift_allocError(v11, v14, 0, 0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v16(v17, v9, v11);
  *v6 = v15;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v6, enum case for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.presentmentFailed(_:), v8);
  v33 = *(_QWORD *)(v0 + 368);
  v34 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 320);
  v31 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 296);
  v36 = *(_QWORD *)(v0 + 352);
  v37 = *(_QWORD *)(v0 + 304);
  v32 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 264);
  v29 = *(_QWORD *)(v0 + 272);
  v38 = *(_QWORD *)(v0 + 288);
  v39 = *(_QWORD *)(v0 + 256);
  v40 = *(_QWORD *)(v0 + 248);
  v41 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 192);
  v44 = *(_QWORD *)(v0 + 176);
  v45 = *(_QWORD *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 160);
  v47 = *(_QWORD *)(v0 + 152);
  v48 = *(_QWORD *)(v0 + 128);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 88);
  v49 = *(_QWORD *)(v0 + 104);
  v50 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 48);
  v27 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v29 + 32))(v19);
  swift_allocError(v21, v14, 0, 0);
  v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(v24, v20, v21);
  swift_willThrow(v25);
  swift_errorRelease(v35);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  sub_10005C88C(v23, (_BYTE *)(v0 + 537), v27, v19, (unsigned __int8 *)(v0 + 536), (uint64_t *)(v0 + 16), (unsigned __int8 *)(v0 + 538), v18);
  sub_10000B164(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v19, v28);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v18, v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v18);
  swift_task_dealloc(v37);
  swift_task_dealloc(v19);
  swift_task_dealloc(v38);
  swift_task_dealloc(v32);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v20);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005C88C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t *a6, unsigned __int8 *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE v38[4];
  _BOOL4 v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t *v42;
  unsigned __int8 *v43;
  uint64_t v44;

  v43 = a7;
  v44 = a8;
  v41 = a5;
  v42 = a6;
  v40 = a4;
  v11 = sub_100008E84(&qword_100174E30);
  __chkstk_darwin(v11);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = &v38[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v20 = &v38[-v19];
  v21 = sub_100008E84(&qword_100176910);
  __chkstk_darwin(v21);
  v23 = &v38[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(_QWORD *)(a1 + 16) && *a2 == 1)
  {
    v24 = type metadata accessor for PresentmentRequestInterpretation(0);
    sub_10002E908(a3 + *(int *)(v24 + 28), (uint64_t)v23, &qword_100176910);
    v25 = type metadata accessor for IdentityReaderAuthenticator(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v23, 1, v25) == 1)
    {
      sub_1000150E8((uint64_t)v23, &qword_100176910);
      v39 = 0;
    }
    else
    {
      v26 = v23[*(int *)(v25 + 36)];
      sub_10006CA8C((uint64_t)v23, type metadata accessor for IdentityReaderAuthenticator);
      v27 = v26 != 2 && (v26 & 1) == 0;
      v39 = v27;
    }
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
    v28(v20, v40, v14);
    LODWORD(v41) = *v41;
    v29 = *v42;
    v30 = v42[1];
    LODWORD(v43) = *v43;
    v31 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 1, 1, v31);
    v28(v18, (uint64_t)v20, v14);
    v32 = *(unsigned __int8 *)(v15 + 80);
    v33 = (v32 + 48) & ~v32;
    v34 = v33 + v16;
    v35 = (char *)swift_allocObject(&unk_1001693A0, v34 + 3, v32 | 7);
    *((_QWORD *)v35 + 2) = 0;
    *((_QWORD *)v35 + 3) = 0;
    *((_QWORD *)v35 + 4) = v29;
    *((_QWORD *)v35 + 5) = v30;
    (*(void (**)(char *, _BYTE *, uint64_t))(v15 + 32))(&v35[v33], v18, v14);
    v36 = &v35[v34];
    *v36 = (char)v41;
    v36[1] = (char)v43;
    v36[2] = v39;
    sub_10000B178(v29, v30);
    sub_10000B178(v29, v30);
    v37 = sub_1000EEBE8((uint64_t)v13, (uint64_t)&unk_100176928, (uint64_t)v35);
    swift_release(v37);
    sub_10000B164(v29, v30);
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v20, v14);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
}

void sub_10005CB74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_23;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_23;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_23;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    sub_1000AF8B8(v10);
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10005CCE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ISO18013Response.Status(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ISO18013Response(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost.Config(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v2[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[15] = v11;
  v2[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v2[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[18] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v14);
  v2[20] = swift_task_alloc(v14);
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_10005CE10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder buildErrorResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[20];
  v7 = v1[17];
  v8 = v1[18];
  v9 = v1[13];
  v10 = v1[3];

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v1[21] = v11;
  v12 = v11(v6, v7);
  static IDCSSignposts.presentmentBuildErrorResponse.getter(v12);
  DIPSignpost.init(_:)(v9);
  v13 = *(_QWORD *)(v10 + 80);
  v1[22] = v13;
  return swift_task_switch(sub_10005CF14, v13, 0);
}

uint64_t sub_10005CF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v1 + 168);
  if (v2)
  {
    v3 = swift_retain(*(_QWORD *)(v1 + 168));
    *(_BYTE *)(v0 + 240) = ISO18013SessionCryptarch.isReadyForEncryption.getter(v3) & 1;
    swift_release(v2);
    v4 = sub_10005CF7C;
  }
  else
  {
    v4 = sub_10005D33C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005CF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((*(_BYTE *)(v1 + 240) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 96);
    v3 = *(_QWORD *)(v1 + 80);
    v4 = *(_QWORD *)(v1 + 16);
    v5 = (unsigned int *)&enum case for ISO18013Response.Status.cborValidationError(_:);
    if (v4 != 2)
      v5 = (unsigned int *)&enum case for ISO18013Response.Status.generalError(_:);
    if (v4 == 1)
      v6 = (unsigned int *)&enum case for ISO18013Response.Status.cborDecodingError(_:);
    else
      v6 = v5;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(*(_QWORD *)(v1 + 72), *v6, *(_QWORD *)(v1 + 56));
    v8 = static ISO18013Response.supportedVersion.getter(v7);
    ISO18013Response.init(version:documents:documentErrors:status:)(v8);
    *(_QWORD *)(v1 + 184) = sub_100069FC0();
    v9 = sub_1000058C8(&qword_1001768A8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013Response, (uint64_t)&protocol conformance descriptor for ISO18013Response);
    v10 = dispatch thunk of CBOREncoder.encode<A>(_:)(v2, v3, v9);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = v10;
    *(_QWORD *)(v1 + 208) = v11;
    return swift_task_switch(sub_10005D484, *(_QWORD *)(v1 + 176), 0);
  }
  else
  {
    v12 = defaultLogger()(a1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Session cryptor is not ready for encryption; skipping error response",
        v15,
        2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = *(_QWORD *)(v1 + 160);
    v17 = *(_QWORD *)(v1 + 152);
    v18 = *(_QWORD *)(v1 + 128);
    v19 = *(_QWORD *)(v1 + 112);
    v20 = *(_QWORD *)(v1 + 120);
    v22 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 104);
    v23 = *(_QWORD *)(v1 + 72);
    v24 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD))(v1 + 168))(v17, *(_QWORD *)(v1 + 136));
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v1 + 8))(0, 0xF000000000000000);
  }
}

uint64_t sub_10005D33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Session cryptor is not ready for encryption; skipping error response",
      v5,
      2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *(_QWORD *)(v1 + 160);
  v7 = *(_QWORD *)(v1 + 152);
  v8 = *(_QWORD *)(v1 + 128);
  v9 = *(_QWORD *)(v1 + 112);
  v10 = *(_QWORD *)(v1 + 120);
  v12 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  v13 = *(_QWORD *)(v1 + 72);
  v14 = *(_QWORD *)(v1 + 48);
  (*(void (**)(uint64_t, _QWORD))(v1 + 168))(v7, *(_QWORD *)(v1 + 136));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v1 + 8))(0, 0xF000000000000000);
}

uint64_t sub_10005D484()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *(_QWORD *)(v0 + 192);
  v2 = sub_10004686C(*(NSObject **)(v0 + 200), *(_QWORD *)(v0 + 208));
  *(_QWORD *)(v0 + 216) = v1;
  if (v1)
  {
    v4 = sub_10005D5D8;
  }
  else
  {
    *(_QWORD *)(v0 + 224) = v3;
    *(_QWORD *)(v0 + 232) = v2;
    v4 = sub_10005D4E8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005D4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 88);
  sub_100005AB0(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD))(v2 + 8);
  v14 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  v3(v10, *(_QWORD *)(v0 + 80));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v15, v14);
}

uint64_t sub_10005D5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  sub_100005AB0(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v5);
  v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v11, 0, v12, 0xD000000000000062, 0x8000000100131930, 0xD00000000000001BLL, 0x8000000100132290, 230);
  swift_willThrow(v15);
  swift_errorRelease(v5);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005D7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[19] = v6;
  v4[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PresentmentResponseBuilder.DBResults(0);
  v4[21] = v7;
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100176828);
  v4[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PresentmentProposal(0);
  v4[24] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v10);
  v4[26] = swift_task_alloc(v10);
  v11 = type metadata accessor for Logger(0);
  v4[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[28] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v13);
  v4[30] = swift_task_alloc(v13);
  v4[31] = swift_task_alloc(v13);
  v4[32] = swift_task_alloc(v13);
  return swift_task_switch(sub_10005D8D8, 0, 0);
}

uint64_t sub_10005D8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  Swift::String v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder loadPayloadDetailsIfNeeded", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 256);
  v7 = *(_QWORD *)(v1 + 216);
  v8 = *(_QWORD *)(v1 + 224);
  v9 = *(_QWORD *)(v1 + 208);
  v10 = *(_QWORD *)(v1 + 120);

  v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v11(v6, v7);
  v12 = *(_QWORD *)(v10 + 8);
  sub_10006BC40(v10, v9, type metadata accessor for PresentmentProposal);
  v13 = *(_QWORD *)(v1 + 208);
  if (v12)
  {
    v14 = *(_QWORD *)(v1 + 184);
    sub_10002E908(v13 + *(int *)(*(_QWORD *)(v1 + 192) + 24), v14, &qword_100176828);
    sub_10006CA8C(v13, type metadata accessor for PresentmentProposal);
    v15 = type metadata accessor for COSE_Sign1(0);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
    v17 = sub_1000150E8(v14, &qword_100176828);
    if (v16 != 1)
    {
      v18 = defaultLogger()(v17);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Proposal already contains payload details, no need to load them now", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }
      v22 = *(_QWORD *)(v1 + 248);
      v23 = *(_QWORD *)(v1 + 216);
      v24 = *(_QWORD *)(v1 + 120);
      v25 = *(void **)(v1 + 128);
      v26 = *(_QWORD *)(v1 + 112);

      v11(v22, v23);
      sub_10006BC40(v24, v26, type metadata accessor for PresentmentProposal);
      v28 = *(_QWORD *)(v1 + 248);
      v27 = *(_QWORD *)(v1 + 256);
      v30 = *(_QWORD *)(v1 + 232);
      v29 = *(_QWORD *)(v1 + 240);
      v32 = *(_QWORD *)(v1 + 200);
      v31 = *(_QWORD *)(v1 + 208);
      v33 = *(_QWORD *)(v1 + 176);
      v34 = *(_QWORD *)(v1 + 184);
      v101 = *(_QWORD *)(v1 + 160);
      v103 = *(_QWORD *)(v1 + 128);
      v35 = v25;
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v34);
      swift_task_dealloc(v33);
      swift_task_dealloc(v101);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v103);
    }
  }
  else
  {
    sub_10006CA8C(*(_QWORD *)(v1 + 208), type metadata accessor for PresentmentProposal);
  }
  v104 = v1 + 16;
  v37 = objc_msgSend(**(id **)(v1 + 120), "credentialIdentifier");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  defaultLogger()(v41);
  v42 = swift_bridgeObjectRetain_n(v40, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  v45 = os_log_type_enabled(v43, v44);
  v46 = *(_QWORD *)(v1 + 240);
  v47 = *(_QWORD *)(v1 + 216);
  v100 = v40;
  v102 = v38;
  v98 = v11;
  if (v45)
  {
    v97 = *(_QWORD *)(v1 + 240);
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v95 = v47;
    v49 = swift_slowAlloc(32, -1);
    v105 = v49;
    *(_DWORD *)v48 = 136315138;
    swift_bridgeObjectRetain(v40);
    *(_QWORD *)(v1 + 104) = sub_10003FA80(v38, v40, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v48 + 4);
    swift_bridgeObjectRelease_n(v40, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Loading payload details for credential %s", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    v51 = v95;
    v50 = v97;
  }
  else
  {

    swift_bridgeObjectRelease_n(v40, 2);
    v50 = v46;
    v51 = v47;
  }
  v11(v50, v51);
  v52 = *(_QWORD *)(v1 + 120);
  v53 = *(int *)(*(_QWORD *)(v1 + 192) + 28);
  *(_DWORD *)(v1 + 344) = v53;
  v54 = v52 + v53;
  v55 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v52 + v53 + 8) + 16))(**(_QWORD **)(v52 + v53));
  v57 = v56;
  *(_QWORD *)(v1 + 264) = v55;
  *(_QWORD *)(v1 + 272) = v56;
  defaultLogger()(v55);
  sub_100005A38(v55, v57);
  v58 = sub_100005A38(v55, v57);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.debug.getter();
  v61 = os_log_type_enabled(v59, v60);
  v62 = *(_QWORD *)(v1 + 232);
  v63 = *(_QWORD *)(v1 + 216);
  if (v61)
  {
    v93 = *(_QWORD *)(v1 + 216);
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v92 = swift_slowAlloc(32, -1);
    v105 = v92;
    *(_DWORD *)v64 = 136315138;
    v65 = Data.base16EncodedString()();
    *(_QWORD *)(v1 + 96) = sub_10003FA80(v65._countAndFlagsBits, (unint64_t)v65._object, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v64 + 4);
    swift_bridgeObjectRelease(v65._object);
    sub_100005AB0(v55, v57);
    v66 = v57;
    sub_100005AB0(v55, v57);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Using presentment key %s", v64, 0xCu);
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    v98(v62, v93);
  }
  else
  {
    sub_100005AB0(v55, v57);
    v66 = v57;
    sub_100005AB0(v55, v57);

    v11(v62, v63);
  }
  v68 = *(void **)(v1 + 128);
  v67 = *(_QWORD *)(v1 + 136);
  v69 = *(_QWORD *)(v1 + 120);
  v70 = *(int *)(*(_QWORD *)(v1 + 192) + 36);
  *(_DWORD *)(v1 + 348) = v70;
  sub_1000963C8(*(_QWORD *)(v69 + v70));
  v72 = v71;
  sub_100025938(v67 + 96, v104);
  v73 = objc_msgSend(v68, "authData");
  if (v73)
  {
    v74 = v73;
    v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v77 = v76;

  }
  else
  {
    v75 = 0;
    v77 = 0xF000000000000000;
  }
  *(_QWORD *)(v1 + 280) = v75;
  *(_QWORD *)(v1 + 288) = v77;
  v78 = objc_msgSend(*(id *)(v1 + 128), "elementsToPresent");
  if (v78)
  {
    v79 = v78;
    v80 = sub_100008E84(&qword_100177CB0);
    v96 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v79, &type metadata for String, v80, &protocol witness table for String);

  }
  else
  {
    v96 = 0;
  }
  v81 = *(_QWORD *)(v1 + 136);
  v82 = *(_BYTE *)(v81 + 64);
  v99 = v72;
  if ((v82 & 1) != 0)
  {
    v94 = 0;
  }
  else
  {
    v83 = *(_QWORD *)(v81 + 48);
    if (v83 == 1)
      v84 = 1;
    else
      v84 = 2 * (v83 == 2);
    v94 = v84;
  }
  v85 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v54 + 8) + 16))(**(_QWORD **)v54);
  v87 = v86;
  *(_QWORD *)(v1 + 296) = v85;
  *(_QWORD *)(v1 + 304) = v86;
  sub_100025938(v104, v1 + 56);
  v88 = swift_allocObject(&unk_100169300, 145, 7);
  *(_QWORD *)(v1 + 312) = v88;
  *(_QWORD *)(v88 + 16) = v102;
  *(_QWORD *)(v88 + 24) = v100;
  *(_QWORD *)(v88 + 32) = v55;
  *(_QWORD *)(v88 + 40) = v66;
  sub_10002597C((__int128 *)(v1 + 56), v88 + 48);
  *(_QWORD *)(v88 + 88) = v75;
  *(_QWORD *)(v88 + 96) = v77;
  *(_QWORD *)(v88 + 104) = v85;
  *(_QWORD *)(v88 + 112) = v87;
  *(_QWORD *)(v88 + 120) = v99;
  *(_QWORD *)(v88 + 128) = v96;
  *(_QWORD *)(v88 + 136) = v94;
  *(_BYTE *)(v88 + 144) = v82;
  sub_100005A38(v55, v66);
  sub_10000B178(v75, v77);
  sub_100005A38(v85, v87);
  v89 = swift_allocObject(&unk_100169328, 32, 7);
  *(_QWORD *)(v1 + 320) = v89;
  *(_QWORD *)(v89 + 16) = &unk_1001768C0;
  *(_QWORD *)(v89 + 24) = v88;
  v90 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v88);
  v91 = (_QWORD *)swift_task_alloc(v90);
  *(_QWORD *)(v1 + 328) = v91;
  *v91 = v1;
  v91[1] = sub_10005E100;
  return AsyncCoreDataContainer.read<A>(_:)(*(_QWORD *)(v1 + 176), &unk_1001768D0, v89, *(_QWORD *)(v1 + 168));
}

uint64_t sub_10005E100()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10005E3A0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 320);
    swift_release(*(_QWORD *)(v2 + 312));
    swift_release(v5);
    v4 = sub_10005E174;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005E174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  id v14;
  NSDictionary v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v1 = *(int *)(v0 + 348);
  v2 = *(int *)(v0 + 344);
  v4 = *(int **)(v0 + 192);
  v3 = *(_QWORD **)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(void ***)(v0 + 120);
  v8 = *v7;
  v9 = *(_QWORD *)(v5 + *(int *)(v6 + 20));
  sub_10002E908(v5, (uint64_t)v3 + v4[6], &qword_100176828);
  v10 = *(uint64_t *)((char *)v7 + v4[8]);
  v11 = *(uint64_t *)((char *)v7 + v1);
  v12 = *(_OWORD *)((char *)v7 + v2);
  *v3 = v8;
  v3[1] = v9;
  v35 = v12;
  *(_OWORD *)((char *)v3 + v4[7]) = v12;
  *(_QWORD *)((char *)v3 + v4[8]) = v10;
  *(_QWORD *)((char *)v3 + v4[9]) = v11;
  v13 = *(_QWORD *)(v5 + *(int *)(v6 + 24));
  swift_bridgeObjectRetain(v9);
  swift_retain(v35);
  swift_bridgeObjectRetain(v11);
  if (v13)
  {
    swift_bridgeObjectRetain(v13);
    v14 = v8;
    sub_100008E84(&qword_100177CB0);
    v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v16 = v8;
    v15.super.isa = 0;
  }
  v18 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 112);
  v36 = objc_msgSend(*(id *)(v0 + 128), "copyWithElementsToPresent:", v15.super.isa, *(_QWORD *)(v0 + 200));

  sub_100005AB0(v18, v17);
  sub_10000B164(v20, v19);
  sub_100005AB0(v22, v21);
  sub_10006CA8C(v23, type metadata accessor for PresentmentResponseBuilder.DBResults);
  sub_10000CE40((_QWORD *)(v0 + 16));
  sub_100041230(v34, v24, type metadata accessor for PresentmentProposal);
  v25 = *(_QWORD *)(v0 + 248);
  v27 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(id))(v0 + 8))(v36);
}

uint64_t sub_10005E3A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v16 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 320));
  swift_release(v1);
  sub_100005AB0(v3, v2);
  sub_10000B164(v4, v5);
  sub_100005AB0(v7, v6);
  sub_10000CE40((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v9, enum case for DIPError.Code.internalError(_:), v15);
  swift_errorRetain(v16);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v16, v9, 0, v10, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 397);
  swift_willThrow(v13);
  swift_errorRelease(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005E5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  *(_BYTE *)(v8 + 824) = v23;
  *(_QWORD *)(v8 + 464) = v21;
  *(_QWORD *)(v8 + 472) = v22;
  *(_OWORD *)(v8 + 432) = v19;
  *(_OWORD *)(v8 + 448) = v20;
  *(_QWORD *)(v8 + 416) = a7;
  *(_QWORD *)(v8 + 424) = a8;
  *(_QWORD *)(v8 + 400) = a5;
  *(_QWORD *)(v8 + 408) = a6;
  *(_QWORD *)(v8 + 384) = a3;
  *(_QWORD *)(v8 + 392) = a4;
  *(_QWORD *)(v8 + 368) = a1;
  *(_QWORD *)(v8 + 376) = a2;
  v9 = sub_100008E84(&qword_100176828);
  *(_QWORD *)(v8 + 480) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PayloadMetadata(0);
  *(_QWORD *)(v8 + 488) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 496) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 504) = v12;
  *(_QWORD *)(v8 + 512) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 520) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 528) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 536) = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 544) = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 552) = swift_task_alloc(v15);
  v16 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v8 + 560) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v8 + 568) = v17;
  *(_QWORD *)(v8 + 576) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005E6D8, 0, 0);
}

uint64_t sub_10005E6D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[72];
  v2 = v0[71];
  v3 = v0[70];
  v5 = v0[50];
  v4 = v0[51];
  v6 = v0[48];
  v7 = v0[49];
  v8 = v0[47];
  v9 = (_QWORD *)swift_allocObject(&unk_100169350, 56, 7);
  v0[73] = v9;
  v9[2] = v8;
  v9[3] = v6;
  v9[4] = v7;
  v9[5] = v5;
  v9[6] = v4;
  swift_retain(v8);
  swift_bridgeObjectRetain(v7);
  sub_100005A38(v5, v4);
  v10 = swift_allocObject(&unk_100169378, 32, 7);
  v0[74] = v10;
  *(_QWORD *)(v10 + 16) = sub_10006C9D8;
  *(_QWORD *)(v10 + 24) = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v9);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[75] = v12;
  *v12 = v0;
  v12[1] = sub_10005E818;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[72], sub_10003DE8C, v10, &type metadata for PresentmentResponseBuilder.DBResult);
}

uint64_t sub_10005E818()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = v0;
  swift_task_dealloc(v3);
  v4 = v2[74];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[71] + 8))(v2[72], v2[70]);
    swift_release(v4);
    v5 = sub_10005EFC8;
  }
  else
  {
    v6 = v2[73];
    (*(void (**)(_QWORD, _QWORD))(v2[71] + 8))(v2[72], v2[70]);
    swift_release(v6);
    swift_release(v4);
    v5 = sub_10005E8CC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005E8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 616) = v3;
  *(_QWORD *)(v0 + 624) = v2;
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 632) = v5;
  v6 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 640) = v6;
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 648) = v8;
  *(_QWORD *)(v0 + 656) = v7;
  v10 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 664) = v10;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 672) = v9;
  v11 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 680) = v11;
  *(_QWORD *)(v0 + 160) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  switch(v4)
  {
    case 2:
      v69 = v1;
      v72 = v11;
      v74 = v7;
      v76 = v9;
      swift_bridgeObjectRetain(v3);
      v66 = v2;
      v67 = v5;
      sub_100005A38(v2, v5);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v6);
      v32 = defaultLogger()(v31);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Payload protection type is payload encryption key", v35, 2u);
        swift_slowDealloc(v35, -1, -1);
      }
      v36 = *(_QWORD *)(v0 + 536);
      v37 = *(_QWORD *)(v0 + 528);
      v38 = *(_QWORD *)(v0 + 520);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      if (v10)
      {
        sub_1000151A4(*(_QWORD **)(v0 + 416), *(_QWORD *)(*(_QWORD *)(v0 + 416) + 24));
        swift_bridgeObjectRetain(v10);
        sub_100005A38(v76, v72);
        v39 = (_QWORD *)swift_task_alloc(dword_1001789EC);
        *(_QWORD *)(v0 + 720) = v39;
        *v39 = v0;
        v39[1] = sub_10005F980;
        v23 = v0 + 168;
        v24 = v66;
        v25 = v67;
        v26 = v69;
        v27 = v74;
        v28 = v10;
        v29 = v76;
        v30 = v72;
        return sub_1001189B8(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      v56 = *(_QWORD *)(v0 + 512);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 104))(v56, enum case for DIPError.Code.idcsMissingPayloadProtectionKey(_:), *(_QWORD *)(v0 + 496));
      v57 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v58 = type metadata accessor for DIPError(0);
      v59 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v58, v59, 0, 0);
      v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000043, 0x8000000100132120, 0, v56, 0, v57, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 338);
      v2 = v66;
      v5 = v67;
      break;
    case 1:
      v70 = v1;
      v73 = v11;
      v75 = v7;
      v77 = v9;
      swift_bridgeObjectRetain(v3);
      sub_100005A38(v2, v5);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v6);
      v41 = defaultLogger()(v40);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter();
      v44 = v2;
      if (os_log_type_enabled(v42, v43))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Payload protection type is device encryption key", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }
      v46 = *(_QWORD *)(v0 + 544);
      v47 = *(_QWORD *)(v0 + 528);
      v48 = *(_QWORD *)(v0 + 520);
      v49 = *(_QWORD **)(v0 + 416);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      sub_1000151A4(v49, v49[3]);
      v50 = (_QWORD *)swift_task_alloc(dword_1001789EC);
      *(_QWORD *)(v0 + 704) = v50;
      *v50 = v0;
      v50[1] = sub_10005F4F0;
      v23 = v0 + 288;
      v24 = v44;
      v25 = v5;
      v26 = v70;
      v30 = v73;
      v27 = v75;
      v29 = v77;
      v28 = v10;
      return sub_1001189B8(v23, v24, v25, v26, v27, v28, v29, v30);
    case 0:
      v68 = v1;
      swift_bridgeObjectRetain(v3);
      sub_100005A38(v2, v5);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v6);
      v13 = defaultLogger()(v12);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.debug.getter();
      v16 = v2;
      if (os_log_type_enabled(v14, v15))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Payload protection type is standard, extracting elements from credential payload", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      v18 = *(_QWORD *)(v0 + 552);
      v19 = *(_QWORD *)(v0 + 528);
      v20 = *(_QWORD *)(v0 + 520);
      v21 = *(_QWORD **)(v0 + 416);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      sub_1000151A4(v21, v21[3]);
      v22 = (_QWORD *)swift_task_alloc(dword_1001789EC);
      *(_QWORD *)(v0 + 688) = v22;
      *v22 = v0;
      v22[1] = sub_10005F060;
      v23 = v0 + 328;
      v24 = v16;
      v25 = v5;
      v26 = v68;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      return sub_1001189B8(v23, v24, v25, v26, v27, v28, v29, v30);
    default:
      v72 = v11;
      v74 = v7;
      v76 = v9;
      v52 = *(_QWORD *)(v0 + 512);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 104))(v52, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 496));
      swift_bridgeObjectRetain(v3);
      sub_100005A38(v2, v5);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v6);
      v71 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v53 = type metadata accessor for DIPError(0);
      v54 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v53, v54, 0, 0);
      v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100132100, 0, v52, 0, v71, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 346);
      break;
  }
  swift_willThrow(v55);
  swift_bridgeObjectRelease(v3);
  sub_100005AB0(v2, v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  sub_100005AB0(v2, v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  sub_100051880(v74, v10, v76, v72);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  v60 = *(_QWORD *)(v0 + 552);
  v61 = *(_QWORD *)(v0 + 544);
  v62 = *(_QWORD *)(v0 + 536);
  v63 = *(_QWORD *)(v0 + 512);
  v65 = *(_QWORD *)(v0 + 480);
  v64 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005EFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 584));
  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  *(_QWORD *)(*(_QWORD *)v1 + 696) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005F3C0;
  else
    v3 = sub_10005F0C4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005F0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;

  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10002E94C(v0 + 328, v0 + 128, &qword_1001768D8);
  sub_10002E908(v0 + 128, v0 + 248, &qword_1001768D8);
  if (*(_QWORD *)(v0 + 272))
  {
    sub_10002597C((__int128 *)(v0 + 248), v0 + 208);
    v1 = *(_QWORD *)(v0 + 232);
    v2 = *(_QWORD *)(v0 + 240);
    sub_1000151A4((_QWORD *)(v0 + 208), v1);
    v3 = *(int **)(v2 + 8);
    v27 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 736) = v4;
    *v4 = v0;
    v4[1] = sub_10005FE38;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v27)(*(_QWORD *)(v0 + 488), 1, v1, v2);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 672);
    v28 = *(_QWORD *)(v0 + 680);
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD *)(v0 + 664);
    v6 = *(_QWORD *)(v0 + 648);
    v23 = *(_QWORD *)(v0 + 640);
    v7 = *(_QWORD *)(v0 + 632);
    v8 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 616);
    v11 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 496);
    sub_1000150E8(v0 + 248, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v12);
    v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100132170, 0, v10, 0, v13, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 350);
    swift_willThrow(v16);
    swift_bridgeObjectRelease(v9);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v6);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v23);
    sub_100051880(v24, v25, v26, v28);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v17 = *(_QWORD *)(v0 + 552);
    v18 = *(_QWORD *)(v0 + 544);
    v19 = *(_QWORD *)(v0 + 536);
    v20 = *(_QWORD *)(v0 + 512);
    v22 = *(_QWORD *)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 488);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005F3C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 640);
  v7 = *(_QWORD *)(v0 + 632);
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 704);
  *(_QWORD *)(*(_QWORD *)v1 + 712) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005F850;
  else
    v3 = sub_10005F554;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005F554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;

  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10002E94C(v0 + 288, v0 + 128, &qword_1001768D8);
  sub_10002E908(v0 + 128, v0 + 248, &qword_1001768D8);
  if (*(_QWORD *)(v0 + 272))
  {
    sub_10002597C((__int128 *)(v0 + 248), v0 + 208);
    v1 = *(_QWORD *)(v0 + 232);
    v2 = *(_QWORD *)(v0 + 240);
    sub_1000151A4((_QWORD *)(v0 + 208), v1);
    v3 = *(int **)(v2 + 8);
    v27 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 736) = v4;
    *v4 = v0;
    v4[1] = sub_10005FE38;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v27)(*(_QWORD *)(v0 + 488), 1, v1, v2);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 672);
    v28 = *(_QWORD *)(v0 + 680);
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD *)(v0 + 664);
    v6 = *(_QWORD *)(v0 + 648);
    v23 = *(_QWORD *)(v0 + 640);
    v7 = *(_QWORD *)(v0 + 632);
    v8 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 616);
    v11 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 496);
    sub_1000150E8(v0 + 248, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v12);
    v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100132170, 0, v10, 0, v13, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 350);
    swift_willThrow(v16);
    swift_bridgeObjectRelease(v9);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v6);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v23);
    sub_100051880(v24, v25, v26, v28);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v17 = *(_QWORD *)(v0 + 552);
    v18 = *(_QWORD *)(v0 + 544);
    v19 = *(_QWORD *)(v0 + 536);
    v20 = *(_QWORD *)(v0 + 512);
    v22 = *(_QWORD *)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 488);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005F850()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 640);
  v7 = *(_QWORD *)(v0 + 632);
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005FCF4;
  else
    v3 = sub_10005F9E4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005F9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;

  sub_100051880(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680));
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10002E94C(v0 + 168, v0 + 128, &qword_1001768D8);
  sub_10002E908(v0 + 128, v0 + 248, &qword_1001768D8);
  if (*(_QWORD *)(v0 + 272))
  {
    sub_10002597C((__int128 *)(v0 + 248), v0 + 208);
    v1 = *(_QWORD *)(v0 + 232);
    v2 = *(_QWORD *)(v0 + 240);
    sub_1000151A4((_QWORD *)(v0 + 208), v1);
    v3 = *(int **)(v2 + 8);
    v27 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 736) = v4;
    *v4 = v0;
    v4[1] = sub_10005FE38;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v27)(*(_QWORD *)(v0 + 488), 1, v1, v2);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 672);
    v28 = *(_QWORD *)(v0 + 680);
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD *)(v0 + 664);
    v6 = *(_QWORD *)(v0 + 648);
    v23 = *(_QWORD *)(v0 + 640);
    v7 = *(_QWORD *)(v0 + 632);
    v8 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 616);
    v11 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 496);
    sub_1000150E8(v0 + 248, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v12);
    v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100132170, 0, v10, 0, v13, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 350);
    swift_willThrow(v16);
    swift_bridgeObjectRelease(v9);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v6);
    sub_100005AB0(v8, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v23);
    sub_100051880(v24, v25, v26, v28);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v17 = *(_QWORD *)(v0 + 552);
    v18 = *(_QWORD *)(v0 + 544);
    v19 = *(_QWORD *)(v0 + 536);
    v20 = *(_QWORD *)(v0 + 512);
    v22 = *(_QWORD *)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 488);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005FCF4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 640);
  v7 = *(_QWORD *)(v0 + 632);
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  sub_100051880(v4, v3, v2, v1);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005FE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 736);
  *(_QWORD *)(*(_QWORD *)v1 + 744) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100060900;
  else
    v3 = sub_10005FE9C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005FE9C()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;

  v1 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 752) = v1;
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3._object = (void *)0x8000000100131210;
  v3._countAndFlagsBits = 0xD000000000000027;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
    goto LABEL_4;
  v5 = *(_QWORD *)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 48);
  sub_100005A38(v8, v9);
  sub_1001044DC(v7, v6);
  if ((v10 & 1) != 0)
  {
    sub_100005AB0(v8, v9);
LABEL_4:
    v11 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 240);
    sub_1000151A4((_QWORD *)(v0 + 208), v11);
    v13 = *(int **)(v12 + 32);
    v37 = (int *)((char *)v13 + *v13);
    v14 = (_QWORD *)swift_task_alloc(v13[1]);
    *(_QWORD *)(v0 + 760) = v14;
    *v14 = v0;
    v14[1] = sub_1000601EC;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v37)(*(_QWORD *)(v0 + 480), v11, v12);
  }
  v36 = *(_QWORD *)(v0 + 680);
  v34 = *(_QWORD *)(v0 + 664);
  v35 = *(_QWORD *)(v0 + 672);
  v30 = *(_QWORD *)(v0 + 640);
  v31 = *(_QWORD *)(v0 + 648);
  v29 = *(_QWORD *)(v0 + 632);
  v16 = *(_QWORD *)(v0 + 624);
  v17 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 488);
  v33 = *(_QWORD *)(v0 + 656);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 104))(v18, enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:), *(_QWORD *)(v0 + 496));
  v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for DIPError(0);
  v21 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v20, v21, 0, 0);
  v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x80000001001321A0, 0, v18, 0, v19, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 361);
  swift_willThrow(v22);
  sub_100005AB0(v8, v9);
  swift_bridgeObjectRelease(v17);
  sub_100005AB0(v16, v29);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v31);
  sub_100005AB0(v16, v29);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v30);
  sub_100051880(v33, v34, v35, v36);
  sub_10006CA8C(v32, type metadata accessor for PayloadMetadata);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10000CE40((_QWORD *)(v0 + 208));
  v23 = *(_QWORD *)(v0 + 552);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 536);
  v26 = *(_QWORD *)(v0 + 512);
  v28 = *(_QWORD *)(v0 + 480);
  v27 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000601EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100060A3C;
  else
    v3 = sub_100060250;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100060250()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = v0[57];
  v2 = v0[29];
  v3 = v0[30];
  sub_1000151A4(v0 + 26, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[97] = v5;
  *v5 = v0;
  v5[1] = sub_1000602D8;
  return v7(v1, v2, v3);
}

uint64_t sub_1000602D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 776);
  *(_QWORD *)(v3 + 784) = a1;
  *(_QWORD *)(v3 + 792) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100060B90;
  else
    v5 = sub_100060348;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100060348()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;

  if ((*(_BYTE *)(v0 + 824) & 1) != 0)
  {
    v33 = *(_QWORD *)(v0 + 784);
    v30 = *(_QWORD *)(v0 + 680);
    v11 = *(_QWORD *)(v0 + 672);
    v12 = *(_QWORD *)(v0 + 664);
    v13 = *(_QWORD *)(v0 + 656);
    v14 = *(_QWORD *)(v0 + 648);
    v15 = *(_QWORD *)(v0 + 640);
    v16 = *(_QWORD *)(v0 + 632);
    v17 = *(_QWORD *)(v0 + 624);
    v18 = *(_QWORD *)(v0 + 616);
    v19 = *(_QWORD *)(v0 + 488);
    v31 = *(_QWORD *)(v0 + 464);
    swift_bridgeObjectRelease(v18);
    sub_100005AB0(v17, v16);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v14);
    sub_100005AB0(v17, v16);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    sub_100051880(v13, v12, v11, v30);
    sub_10006CA8C(v19, type metadata accessor for PayloadMetadata);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v20 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 576);
    v22 = *(_QWORD *)(v0 + 552);
    v23 = *(_QWORD *)(v0 + 544);
    v24 = *(_QWORD *)(v0 + 536);
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 368);
    swift_bridgeObjectRetain(v31);
    sub_10002E94C(v27, v28, &qword_100176828);
    v29 = type metadata accessor for PresentmentResponseBuilder.DBResults(0);
    *(_QWORD *)(v28 + *(int *)(v29 + 20)) = v33;
    *(_QWORD *)(v28 + *(int *)(v29 + 24)) = v20;
    sub_10000CE40((_QWORD *)(v0 + 208));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 472);
    v2 = objc_msgSend(*(id *)(v0 + 752), "standardUserDefaults");
    v3._object = (void *)0x80000001001321E0;
    v3._countAndFlagsBits = 0xD000000000000016;
    v4 = NSUserDefaults.internalBool(forKey:)(v3);

    if (v4)
      v5 = 2;
    else
      v5 = v1;
    v6 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 240);
    sub_1000151A4((_QWORD *)(v0 + 208), v6);
    v8 = *(int **)(v7 + 24);
    v32 = (int *)((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 800) = v9;
    *v9 = v0;
    v9[1] = sub_1000605C0;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v32)(*(_QWORD *)(v0 + 456), v5, v6, v7);
  }
}

uint64_t sub_1000605C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 800);
  v3[101] = a1;
  v3[102] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[98]);
    v5 = sub_100060CF4;
  }
  else
  {
    v5 = sub_100060638;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100060638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v31 = (_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 816);
  v2 = sub_1000F880C(*(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 464));
  v4 = *(_QWORD *)(v0 + 808);
  v27 = *(_QWORD *)(v0 + 672);
  v28 = *(_QWORD *)(v0 + 680);
  v26 = *(_QWORD *)(v0 + 664);
  v5 = *(_QWORD *)(v0 + 656);
  v6 = *(_QWORD *)(v0 + 648);
  v7 = *(_QWORD *)(v0 + 640);
  v8 = *(_QWORD *)(v0 + 632);
  v9 = *(_QWORD *)(v0 + 624);
  v10 = *(_QWORD *)(v0 + 616);
  v29 = *(_QWORD *)(v0 + 488);
  v30 = *(_QWORD *)(v0 + 784);
  if (v1)
  {
    v11 = *(_QWORD *)(v0 + 480);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v4);
    sub_100005AB0(v9, v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    sub_100005AB0(v9, v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    sub_100051880(v5, v26, v27, v28);
    swift_bridgeObjectRelease(v30);
    sub_1000150E8(v11, &qword_100176828);
    sub_10006CA8C(v29, type metadata accessor for PayloadMetadata);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    sub_10000CE40(v31);
    v12 = *(_QWORD *)(v0 + 552);
    v13 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v0 + 536);
    v15 = *(_QWORD *)(v0 + 512);
    v17 = *(_QWORD *)(v0 + 480);
    v16 = *(_QWORD *)(v0 + 488);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
  }
  else
  {
    v24 = v2;
    v25 = v3;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v4);
    sub_100005AB0(v9, v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    sub_100005AB0(v9, v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    sub_100051880(v5, v26, v27, v28);
    swift_bridgeObjectRelease(v30);
    sub_10006CA8C(v29, type metadata accessor for PayloadMetadata);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v18 = *(_QWORD *)(v0 + 576);
    v19 = *(_QWORD *)(v0 + 552);
    v20 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v0 + 536);
    v15 = *(_QWORD *)(v0 + 512);
    v17 = *(_QWORD *)(v0 + 480);
    v16 = *(_QWORD *)(v0 + 488);
    v21 = *(_QWORD *)(v0 + 368);
    sub_10002E94C(v17, v21, &qword_100176828);
    v22 = type metadata accessor for PresentmentResponseBuilder.DBResults(0);
    *(_QWORD *)(v21 + *(int *)(v22 + 20)) = v24;
    *(_QWORD *)(v21 + *(int *)(v22 + 24)) = v25;
    sub_10000CE40(v31);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
  }
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060900()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 640);
  v7 = *(_QWORD *)(v0 + 632);
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10000CE40((_QWORD *)(v0 + 208));
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v17 = *(_QWORD *)(v0 + 680);
  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease(v8);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100051880(v3, v2, v1, v17);
  sub_10006CA8C(v9, type metadata accessor for PayloadMetadata);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10000CE40((_QWORD *)(v0 + 208));
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 680);
  v18 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease(v8);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100051880(v3, v2, v1, v17);
  sub_1000150E8(v9, &qword_100176828);
  sub_10006CA8C(v18, type metadata accessor for PayloadMetadata);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10000CE40((_QWORD *)(v0 + 208));
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 680);
  v18 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease(v8);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100005AB0(v7, v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100051880(v3, v2, v1, v17);
  sub_1000150E8(v9, &qword_100176828);
  sub_10006CA8C(v18, type metadata accessor for PayloadMetadata);
  sub_1000150E8(v0 + 128, &qword_1001768D8);
  sub_10000CE40((_QWORD *)(v0 + 208));
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100060E58(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  Swift::String v24;
  void *object;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  id v74;
  uint64_t v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  ValueMetadata *v79;
  _UNKNOWN **v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = a4;
  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10011A590(a1, a2);
  if (!v5)
  {
    v75 = a5;
    v76.n128_u64[0] = v11;
    if (!v14)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v76.n128_u64[0] + 104))(v13, enum case for DIPError.Code.idcsUnknownCredential(_:), v10);
      v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v18 = type metadata accessor for DIPError(0);
      v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v18, v19, 0, 0);
      v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100132200, 0, v13, 0, v17, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 287);
      swift_willThrow(v20);
      return;
    }
    v15 = (void *)v14;
    v16 = (void *)sub_1000C65D8(a3, v88);
    v21 = v16;
    v74 = v15;
    if (!v16)
    {
      v77 = 0;
      v78 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease(v78);
      v77 = 0xD00000000000002CLL;
      v78 = 0x8000000100132230;
      v24 = Data.base16EncodedString()();
      object = v24._object;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(object);
      v26 = v77;
      v27 = v78;
      v28 = v13;
      (*(void (**)(char *, _QWORD, uint64_t))(v76.n128_u64[0] + 104))(v13, enum case for DIPError.Code.idcsMissingPresentmentKey(_:), v10);
      v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v30 = type metadata accessor for DIPError(0);
      v31 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v30, v31, 0, 0);
      v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v26, v27, 0, v28, 0, v29, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 291);
      swift_willThrow(v32);

      return;
    }
    v22 = objc_msgSend(v16, "payload");
    if (!v22)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v76.n128_u64[0] + 104))(v13, enum case for DIPError.Code.idcsMissingPayload(_:), v10);
      v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v34 = type metadata accessor for DIPError(0);
      v35 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v34, v35, 0, 0);
      v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100132260, 0, v13, 0, v33, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 295);
      swift_willThrow(v36);

      return;
    }
    v23 = v22;
    sub_1000C6D08(v81.n128_u64);
    v37 = v82;
    if ((_QWORD)v85 != 2)
    {
      if ((_QWORD)v85 != 1)
      {
        if ((_QWORD)v85)
        {
          (*(void (**)(char *, _QWORD, uint64_t, __n128))(v76.n128_u64[0] + 104))(v13, enum case for DIPError.Code.internalError(_:), v10, v81);
          v64 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v65 = type metadata accessor for DIPError(0);
          v66 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v65, v66, 0, 0);
          v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100132100, 0, v13, 0, v64, 0xD000000000000062, 0x8000000100131930, 0xD00000000000002BLL, 0x80000001001320D0, 316);
          swift_willThrow(v67);

          sub_10006C9F8(&v81);
          return;
        }
        v76 = v81;
        v73 = v85;
        v72 = v86;
        v38 = v83;
        v39 = v84;
        v40 = v87;

        v41 = v40;
        v42 = v39;
        v43 = v38;
        v44 = v72;
        v45 = v73;
        v46 = v76;
        v47 = 0;
        v88 = 0;
        v48 = 0;
        v49 = 0;
        v50 = v75;
        goto LABEL_35;
      }
      v69 = v87;
      v68 = v82;
      v72 = v86;
      v73 = v85;
      v79 = &type metadata for CredentialDecryptionKeyIdentifierProvider;
      v80 = &off_100167928;
      v76 = v81;
      v57 = v74;
      v71 = v83;
      v70 = v84;
      v58 = (void *)sub_10000B18C((uint64_t)v74, v83, v84, v81.n128_i64[0]);
      sub_10006CA58((uint64_t)&v77);
      if (v58)
      {
        v59 = objc_msgSend(v58, "identifier");
        v49 = v59;
        if (!v59)
        {

          v47 = 0;
          v88 = 0;
          v48 = 0;
          goto LABEL_33;
        }
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v88 = v60;

        v61 = objc_msgSend(v58, "publicKeyIdentifier");
        if (v61)
        {
          v62 = v61;
          v48 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v49 = v63;

LABEL_33:
          v50 = v75;
          v46 = v76;
          v45 = v73;
          v44 = v72;
          v37 = v68;
          goto LABEL_34;
        }

        swift_bridgeObjectRelease(v88);
      }
      else
      {

      }
      v47 = 0;
      v88 = 0;
      v48 = 0;
      v49 = 0;
      goto LABEL_33;
    }
    v69 = v87;
    v70 = v84;
    v71 = v83;
    v72 = v86;
    v73 = v85;
    v76 = v81;
    v51 = objc_msgSend(v23, "payloadProtectionKey");
    v49 = v51;
    if (v51)
    {
      v48 = objc_msgSend(v51, "identifier");

      if (!v48)
      {

        v47 = 0;
        v88 = 0;
        v49 = 0;
LABEL_30:
        v50 = v75;
        v46 = v76;
        v45 = v73;
        v44 = v72;
LABEL_34:
        v43 = v71;
        v42 = v70;
        v41 = v69;
LABEL_35:
        *(__n128 *)v50 = v46;
        *(_QWORD *)(v50 + 16) = v37;
        *(_QWORD *)(v50 + 24) = v43;
        *(_QWORD *)(v50 + 32) = v42;
        *(_OWORD *)(v50 + 40) = v45;
        *(_OWORD *)(v50 + 56) = v44;
        *(_QWORD *)(v50 + 72) = v41;
        *(_QWORD *)(v50 + 80) = v47;
        *(_QWORD *)(v50 + 88) = v88;
        *(_QWORD *)(v50 + 96) = v48;
        *(_QWORD *)(v50 + 104) = v49;
        return;
      }
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v88 = v52;

      v53 = objc_msgSend(v23, "payloadProtectionKey");
      v49 = v53;
      if (v53)
      {
        v54 = v37;
        v55 = objc_msgSend(v53, "publicKeyIdentifier");

        if (v55)
        {
          v48 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
          v49 = v56;

        }
        else
        {

          swift_bridgeObjectRelease(v88);
          v47 = 0;
          v88 = 0;
          v48 = 0;
          v49 = 0;
        }
        v50 = v75;
        v46 = v76;
        v45 = v73;
        v44 = v72;
        v37 = v54;
        goto LABEL_34;
      }

      swift_bridgeObjectRelease(v88);
    }
    else
    {

    }
    v47 = 0;
    v88 = 0;
    v48 = 0;
    goto LABEL_30;
  }
}

unint64_t sub_1000617A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (a1)
  {
    v2 = sub_100008E84(&qword_100177CB0);
    v3 = Dictionary.debugDescription.getter(a1, &type metadata for String, v2, &protocol witness table for String);
    v5 = v4;
  }
  else
  {
    v5 = 0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v5);
  return 0xD00000000000001ELL;
}

unint64_t sub_100061858(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = sub_100008E84(&qword_100176918);
  v3._countAndFlagsBits = Dictionary.description.getter(a1, &type metadata for String, v2, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000025;
}

uint64_t sub_1000618F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013Response.Status(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ISO18013Response(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ISO18013Response.Document(0);
  v5[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[17] = v13;
  v5[18] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176898) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v14);
  v5[20] = swift_task_alloc(v14);
  v15 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v5[21] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[22] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v17);
  v5[24] = swift_task_alloc(v17);
  v18 = type metadata accessor for DIPSignpost.Config(0);
  v5[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPSignpost(0);
  v5[26] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v5[27] = v20;
  v5[28] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Logger(0);
  v5[29] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[30] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v23);
  v5[32] = swift_task_alloc(v23);
  return swift_task_switch(sub_100061AC0, 0, 0);
}

uint64_t sub_100061AC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t **v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder buildResponsePayload", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[32];
  v7 = v1[29];
  v8 = v1[30];
  v9 = v1[24];
  v10 = v1[25];
  v12 = v1[3];
  v11 = v1[4];

  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v1[33] = (uint64_t)v13;
  v14 = v13(v6, v7);
  static IDCSSignposts.presentmentBuildResponsePayload.getter(v14);
  DIPSignpost.init(_:)(v10);
  sub_1000626CC(v12, v11, v9);
  v15 = (uint64_t **)swift_task_alloc(dword_10017664C);
  v1[34] = (uint64_t)v15;
  *v15 = v1;
  v15[1] = (uint64_t *)sub_100061DD0;
  return sub_100063B20(v1[20], v1[2], v1[3], v1[5]);
}

uint64_t sub_100061DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100062438;
  else
    v3 = sub_100061E34;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100061E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 136);
  v65 = *(_QWORD *)(v0 + 160);
  v68 = *(_QWORD *)(v0 + 144);
  v70 = *(_QWORD *)(v0 + 128);
  v76 = *(_QWORD *)(v0 + 96);
  v73 = *(_QWORD *)(v0 + 88);
  v79 = *(_QWORD *)(v0 + 80);
  v84 = *(_QWORD *)(v0 + 48);
  v7 = objc_msgSend(**(id **)(v0 + 24), "docType");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_10002E908(v65, v5, &qword_100176898);
  ISO18013Response.Document.init(docType:issuerSigned:deviceSigned:errors:)(v8, v10, v2, v5, 0);
  v11 = sub_100008E84(&qword_1001768A0);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v11, v13 + *(_QWORD *)(v6 + 72), v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_10012A6D0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v14 + v13, v68, v70);
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v73 + 104))(v76, enum case for ISO18013Response.Status.ok(_:), v79);
  v16 = static ISO18013Response.supportedVersion.getter(v15);
  ISO18013Response.init(version:documents:documentErrors:status:)(v16);
  if ((*(_BYTE *)(v84 + 64) & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v0 + 48) + 32) != 1)
  {
    v21 = *(_QWORD *)(v0 + 280);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 104);
    v24 = sub_100069FC0();
    v25 = sub_1000058C8(&qword_1001768A8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013Response, (uint64_t)&protocol conformance descriptor for ISO18013Response);
    v26 = dispatch thunk of CBOREncoder.encode<A>(_:)(v22, v23, v25);
    v28 = v27;
    v20 = v21;
    swift_release(v24);
    if (v21)
      goto LABEL_6;
    v86 = v28;
    v44 = v26;
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 280);
    v18 = sub_10006BC8C(*(_QWORD *)(v0 + 120), *(void **)(v0 + 16), *(_QWORD *)(v0 + 40));
    if (v17)
    {
      v20 = v17;
LABEL_6:
      v29 = *(_QWORD *)(v0 + 160);
      v31 = *(_QWORD *)(v0 + 136);
      v30 = *(_QWORD *)(v0 + 144);
      v32 = *(_QWORD *)(v0 + 128);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      sub_1000150E8(v29, &qword_100176898);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
      v33 = *(_QWORD *)(v0 + 248);
      v34 = *(_QWORD *)(v0 + 256);
      v35 = *(_QWORD *)(v0 + 216);
      v36 = *(_QWORD *)(v0 + 224);
      v37 = *(_QWORD *)(v0 + 208);
      v66 = *(_QWORD *)(v0 + 200);
      v69 = *(_QWORD *)(v0 + 192);
      v71 = *(_QWORD *)(v0 + 184);
      v74 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 152);
      v80 = *(_QWORD *)(v0 + 144);
      v82 = *(_QWORD *)(v0 + 120);
      v85 = *(_QWORD *)(v0 + 96);
      v38 = *(_QWORD *)(v0 + 72);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v38, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
      swift_errorRetain(v20);
      v39 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v40 = type metadata accessor for DIPError(0);
      v41 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v40, v41, 0, 0);
      v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v20, v38, 0, v39, 0xD000000000000062, 0x8000000100131930, 0xD000000000000044, 0x8000000100131E70, 461);
      swift_willThrow(v42);
      swift_errorRelease(v20);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
      swift_task_dealloc(v34);
      swift_task_dealloc(v33);
      swift_task_dealloc(v36);
      swift_task_dealloc(v66);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      swift_task_dealloc(v74);
      swift_task_dealloc(v77);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      swift_task_dealloc(v85);
      swift_task_dealloc(v38);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v86 = v19;
    v44 = v18;
  }
  v45 = *(_QWORD *)(v0 + 248);
  v46 = *(_QWORD *)(v0 + 224);
  v57 = *(_QWORD *)(v0 + 232);
  v58 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  v64 = *(_QWORD *)(v0 + 208);
  v67 = *(_QWORD *)(v0 + 256);
  v62 = *(_QWORD *)(v0 + 192);
  v63 = *(_QWORD *)(v0 + 216);
  v72 = *(_QWORD *)(v0 + 200);
  v75 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 176);
  v61 = *(_QWORD *)(v0 + 168);
  v59 = *(_QWORD *)(v0 + 160);
  v78 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 136);
  v56 = *(_QWORD *)(v0 + 144);
  v48 = *(_QWORD *)(v0 + 120);
  v49 = *(_QWORD *)(v0 + 128);
  v51 = *(_QWORD *)(v0 + 104);
  v50 = *(_QWORD *)(v0 + 112);
  v52._countAndFlagsBits = 0xD00000000000005BLL;
  v81 = *(_QWORD *)(v0 + 96);
  v83 = *(_QWORD *)(v0 + 72);
  v52._object = (void *)0x8000000100131EC0;
  v53._countAndFlagsBits = 0x3334646133663763;
  v53._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v53, v52);
  defaultLogger()(v54);
  v55 = swift_task_alloc(32);
  *(_QWORD *)(v55 + 16) = v44;
  *(_QWORD *)(v55 + 24) = v86;
  Logger.sensitive(_:)(sub_10006BC84, v55);
  swift_task_dealloc(v55);
  v58(v45, v57);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v56, v49);
  sub_1000150E8(v59, &qword_100176898);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v46, v64);
  swift_task_dealloc(v67);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v72);
  swift_task_dealloc(v62);
  swift_task_dealloc(v75);
  swift_task_dealloc(v59);
  swift_task_dealloc(v78);
  swift_task_dealloc(v56);
  swift_task_dealloc(v48);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v44, v86);
}

uint64_t sub_100062438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 280);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000062, 0x8000000100131930, 0xD000000000000044, 0x8000000100131E70, 461);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100062630()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000016;
}

uint64_t sub_1000626CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t i;
  BOOL v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  os_log_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  _DWORD *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v122;
  char v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL8 v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  void (*v147)(char *, _QWORD, uint64_t);
  char *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t result;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t (*v163)(char *, char *, uint64_t);
  uint64_t v164;
  NSObject *v165;
  int v166;
  uint8_t *v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  int64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  Swift::String v176;
  unint64_t v177;
  unint64_t v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  os_log_t v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  __n128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  int v201;
  _DWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  int64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  unint64_t v214;
  int64_t v215;
  uint64_t (*v216)(char *, uint64_t);
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  char *v223;
  char *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  char *v237;
  os_log_t v238;
  uint64_t (*v239)(char *, char *, uint64_t);
  _QWORD *v240;
  char v241[8];
  _QWORD *v242;

  v4 = v3;
  v220 = a2;
  v190 = a1;
  v189 = a3;
  v193 = type metadata accessor for DIPError.Code(0);
  v192 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v200 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100176880);
  __chkstk_darwin(v6);
  v234 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v232 = *(_QWORD *)(v8 - 8);
  v233 = v8;
  v9 = __chkstk_darwin(v8);
  v224 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v223 = (char *)&v187 - v11;
  v12 = sub_100008E84(&qword_100175A80);
  __chkstk_darwin(v12);
  v231 = (char *)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = type metadata accessor for CredentialElement(0);
  v198 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v238 = (os_log_t)((char *)&v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100008E84(&qword_1001752E8);
  v226 = *(_QWORD *)(v15 - 8);
  v227 = v15;
  __chkstk_darwin(v15);
  v237 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_100176828);
  __chkstk_darwin(v17);
  v208 = (char *)&v187 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for COSE_Sign1(0);
  v212 = *(_QWORD *)(v209 - 8);
  v19 = __chkstk_darwin(v209);
  v188 = (char *)&v187 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v211 = (char *)&v187 - v22;
  __chkstk_darwin(v21);
  v191 = (char *)&v187 - v23;
  v24 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for DIPSignpost(0);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v28 = (char *)&v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for Logger(0);
  v29 = *(_QWORD *)(v221 - 8);
  v30 = __chkstk_darwin(v221);
  v210 = (char *)&v187 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v213 = (char *)&v187 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v187 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v187 - v38;
  v40 = defaultLogger()(v37);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "PresentmentResponseBuilder buildResponsePayloadIssuerSigned", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  v216 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v44 = v216(v39, v221);
  static IDCSSignposts.presentmentBuildResponsePayloadIssuerSigned.getter(v44);
  v45 = DIPSignpost.init(_:)(v26);
  v46 = defaultLogger()(v45);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Building response payload issuer signed", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  v216(v36, v221);
  v217 = (_QWORD *)sub_10003EB88((uint64_t)_swiftEmptyArrayStorage);
  v50 = *(_QWORD *)(v220 + 64);
  v204 = v220 + 64;
  v51 = 1 << *(_BYTE *)(v220 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & v50;
  v205 = (unint64_t)(v51 + 63) >> 6;
  v230 = enum case for ISO18013PresentmentType.physical(_:);
  v229 = enum case for ISO18013PresentmentType.digital(_:);
  v225 = enum case for ISO18013CodingKeyFormat.standard(_:);
  v222 = enum case for ISO18013CodingKeyFormat.ACWG(_:);
  v54 = swift_bridgeObjectRetain(v220);
  v55 = 0;
  v54.n128_u64[0] = 136315138;
  v197 = v54;
  v196 = (char *)&type metadata for Any + 8;
  v199 = v28;
  v56 = v209;
  v57 = v212;
  v58 = v211;
  v59 = v210;
  v60 = (uint64_t)v208;
  if (!v53)
    goto LABEL_9;
LABEL_8:
  v61 = __clz(__rbit64(v53));
  v62 = (v53 - 1) & v53;
  for (i = v61 | (v55 << 6); ; i = __clz(__rbit64(v65)) + (v55 << 6))
  {
    v214 = v62;
    v215 = v55;
    v67 = *(_QWORD *)(v220 + 56);
    v68 = (uint64_t *)(*(_QWORD *)(v220 + 48) + 16 * i);
    v69 = v68[1];
    v218 = *v68;
    v70 = *(_QWORD *)(v67 + 8 * i);
    v71 = *(_QWORD *)(v70 + 16);
    if (v71)
    {
      v242 = _swiftEmptyArrayStorage;
      v207 = v69;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v70);
      sub_100055800(0, v71, 0);
      v72 = (*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80);
      v206 = v70;
      v73 = v70 + v72;
      v228 = *(_QWORD *)(v198 + 72);
      while (1)
      {
        v74 = v238;
        sub_10006BC40(v73, (uint64_t)v238, type metadata accessor for CredentialElement);
        v75 = (uint64_t *)((char *)v74 + *(int *)(v235 + 24));
        v76 = v75[1];
        if (v76 >> 60 == 15)
        {
          v138 = v192;
          v139 = v200;
          v140 = v193;
          (*(void (**)(char *, _QWORD, uint64_t))(v192 + 104))(v200, enum case for DIPError.Code.idcsMissingProposalCredentialIssuerData(_:), v193);
          v141 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v142 = type metadata accessor for DIPError(0);
          v143 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v144 = swift_allocError(v142, v143, 0, 0);
          v145 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100131DE0, 0, v139, 0, v141, 0xD000000000000062, 0x8000000100131930, 0xD000000000000034, 0x8000000100131E10, 483);
          swift_willThrow(v145);
          goto LABEL_62;
        }
        v77 = *v75;
        v78 = type metadata accessor for CBORDecoder(0);
        swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
        v236 = (_QWORD *)v77;
        v79 = sub_100005A38(v77, v76);
        v80 = CBORDecoder.init()(v79);
        v81 = *((_QWORD *)v239 + 2);
        v82 = type metadata accessor for ISO18013PresentmentType(0);
        v83 = *(_QWORD *)(v82 - 8);
        v84 = v81 == 1 ? v229 : v230;
        v85 = v231;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 104))(v231, v84, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v82);
        v86 = CBORDecoder.presentmentType.setter(v85);
        if (*((_BYTE *)v239 + 64) == 1)
        {
          v87 = (uint64_t)v234;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v232 + 56))(v234, 1, 1, v233);
          sub_1000150E8(v87, &qword_100176880);
        }
        else
        {
          v88 = *((_QWORD *)v239 + 7);
          v89 = v222;
          if (v88 != 1)
          {
            v89 = v225;
            if (v88)
            {
              v219 = v4;
              v90 = v213;
              v91 = defaultLogger()(v86);
              v92 = Logger.logObject.getter(v91);
              v93 = static os_log_type_t.error.getter();
              v94 = v93;
              if (os_log_type_enabled(v92, v93))
              {
                v95 = (_DWORD *)swift_slowAlloc(12, -1);
                v202 = v95;
                v203 = (_QWORD *)swift_slowAlloc(32, -1);
                v240 = v203;
                *v95 = v197.n128_u32[0];
                v96 = (id)DCPresentmentMessageEncodingFormatToString(v88);
                v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
                v201 = v94;
                v98 = v97;
                v99 = v92;
                v101 = v100;

                v102 = sub_10003FA80(v98, v101, (uint64_t *)&v240);
                v103 = (uint8_t *)v202;
                *(_QWORD *)(v202 + 1) = v102;
                swift_bridgeObjectRelease(v101);
                _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v201, "Unknown message encoding format: %s", v103, 0xCu);
                v104 = v203;
                swift_arrayDestroy(v203, 1, v196);
                swift_slowDealloc(v104, -1, -1);
                swift_slowDealloc(v103, -1, -1);

              }
              else
              {

              }
              v216(v90, v221);
              v89 = v225;
              v4 = v219;
            }
          }
          v106 = v232;
          v105 = v233;
          v107 = v234;
          (*(void (**)(char *, uint64_t, uint64_t))(v232 + 104))(v234, v89, v233);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v107, 0, 1, v105);
          v108 = v4;
          v109 = v223;
          (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v223, v107, v105);
          v110 = v224;
          (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v224, v109, v105);
          CBORDecoder.codingKeyFormat.setter(v110);
          v111 = v109;
          v4 = v108;
          (*(void (**)(char *, uint64_t))(v106 + 8))(v111, v105);
        }
        v112 = type metadata accessor for ISO18013IssuerSignedItem(0);
        v113 = sub_1000058C8(&qword_100176888, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
        v114 = sub_1000058C8(&qword_100176890, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
        CBOREncodedCBOR.init(_:dataValue:decoder:)(v112, v236, v76, v80, v112, v113, v114);
        if (v4)
          break;
        sub_10006CA8C((uint64_t)v238, type metadata accessor for CredentialElement);
        v115 = v242;
        if ((swift_isUniquelyReferenced_nonNull_native(v242) & 1) == 0)
        {
          sub_100055800(0, v115[2] + 1, 1);
          v115 = v242;
        }
        v117 = v115[2];
        v116 = v115[3];
        if (v117 >= v116 >> 1)
        {
          sub_100055800(v116 > 1, v117 + 1, 1);
          v115 = v242;
        }
        v115[2] = v117 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v226 + 32))((unint64_t)v115+ ((*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80))+ *(_QWORD *)(v226 + 72) * v117, v237, v227);
        v73 += v228;
        if (!--v71)
        {
          swift_bridgeObjectRelease(v206);
          v28 = v199;
          v119 = v207;
          goto LABEL_43;
        }
      }
      v144 = v4;
      v140 = v193;
      v138 = v192;
LABEL_62:
      sub_10006CA8C((uint64_t)v238, type metadata accessor for CredentialElement);
      v146 = v242;
      swift_release(v220);
      swift_bridgeObjectRelease(v207);
      swift_release(v146);
      swift_bridgeObjectRelease(v206);
      swift_bridgeObjectRelease(v217);
      v147 = *(void (**)(char *, _QWORD, uint64_t))(v138 + 104);
      v28 = v199;
      goto LABEL_63;
    }
    swift_bridgeObjectRetain(v69);
    v115 = _swiftEmptyArrayStorage;
    v119 = v118;
LABEL_43:
    v120 = (uint64_t)v217;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v217);
    v242 = (_QWORD *)v120;
    v122 = v119;
    v124 = sub_1000FBC04(v218, v119);
    v125 = *(_QWORD *)(v120 + 16);
    v126 = (v123 & 1) == 0;
    v127 = v125 + v126;
    if (__OFADD__(v125, v126))
      break;
    v128 = v123;
    if (*(_QWORD *)(v120 + 24) >= v127)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_10007E3C0();
      v129 = v122;
    }
    else
    {
      sub_10007C864(v127, isUniquelyReferenced_nonNull_native);
      v129 = v122;
      v130 = sub_1000FBC04(v218, v122);
      if ((v128 & 1) != (v131 & 1))
        goto LABEL_83;
      v124 = v130;
    }
    v132 = v242;
    v217 = v242;
    if ((v128 & 1) != 0)
    {
      v133 = v242[7];
      v134 = 8 * v124;
      swift_bridgeObjectRelease(*(_QWORD *)(v133 + v134));
      *(_QWORD *)(v133 + v134) = v115;
    }
    else
    {
      v242[(v124 >> 6) + 8] |= 1 << v124;
      v135 = (_QWORD *)(v132[6] + 16 * v124);
      *v135 = v218;
      v135[1] = v129;
      *(_QWORD *)(v132[7] + 8 * v124) = v115;
      v136 = v132[2];
      v64 = __OFADD__(v136, 1);
      v137 = v136 + 1;
      if (v64)
        goto LABEL_81;
      v132[2] = v137;
      swift_bridgeObjectRetain(v129);
    }
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(0x8000000000000000);
    v56 = v209;
    v57 = v212;
    v58 = v211;
    v59 = v210;
    v60 = (uint64_t)v208;
    v55 = v215;
    v53 = v214;
    if (v214)
      goto LABEL_8;
LABEL_9:
    v64 = __OFADD__(v55++, 1);
    if (v64)
      goto LABEL_80;
    if (v55 >= v205)
      goto LABEL_65;
    v65 = *(_QWORD *)(v204 + 8 * v55);
    if (!v65)
    {
      v66 = v55 + 1;
      if (v55 + 1 >= v205)
        goto LABEL_65;
      v65 = *(_QWORD *)(v204 + 8 * v66);
      if (!v65)
      {
        v66 = v55 + 2;
        if (v55 + 2 >= v205)
          goto LABEL_65;
        v65 = *(_QWORD *)(v204 + 8 * v66);
        if (!v65)
        {
          v66 = v55 + 3;
          if (v55 + 3 >= v205)
          {
LABEL_65:
            swift_release(v220);
            v154 = type metadata accessor for PresentmentProposal(0);
            sub_10002E908(v190 + *(int *)(v154 + 24), v60, &qword_100176828);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v60, 1, v56) != 1)
            {
              v160 = v60;
              v161 = v191;
              v162 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 32))(v191, v160, v56);
              defaultLogger()(v162);
              v163 = *(uint64_t (**)(char *, char *, uint64_t))(v57 + 16);
              v164 = v163(v58, v161, v56);
              v165 = Logger.logObject.getter(v164);
              v166 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v165, (os_log_type_t)v166))
              {
                LODWORD(v237) = v166;
                v238 = v165;
                v167 = (uint8_t *)swift_slowAlloc(12, -1);
                v168 = (_QWORD *)swift_slowAlloc(32, -1);
                v236 = v168;
                v242 = v168;
                *(_DWORD *)v167 = 136446210;
                v169 = COSE_Sign1.x509Chain.getter(v168);
                v170 = _swiftEmptyArrayStorage;
                v239 = v163;
                if (v169)
                {
                  v171 = v169;
                  v219 = v4;
                  v172 = *(_QWORD *)(v169 + 16);
                  if (v172)
                  {
                    v240 = _swiftEmptyArrayStorage;
                    sub_1000557E4(0, v172, 0);
                    v170 = v240;
                    v173 = (unint64_t *)(v171 + 40);
                    do
                    {
                      v175 = *(v173 - 1);
                      v174 = *v173;
                      sub_100005A38(v175, *v173);
                      v176 = Data.base64EncodedString(options:)(0);
                      sub_100005AB0(v175, v174);
                      v240 = v170;
                      v178 = v170[2];
                      v177 = v170[3];
                      if (v178 >= v177 >> 1)
                      {
                        sub_1000557E4(v177 > 1, v178 + 1, 1);
                        v170 = v240;
                      }
                      v173 += 2;
                      v170[2] = v178 + 1;
                      *(Swift::String *)&v170[2 * v178 + 4] = v176;
                      --v172;
                    }
                    while (v172);
                    swift_bridgeObjectRelease(v171);
                    v28 = v199;
                    v56 = v209;
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v169);
                  }
                }
                v180 = Array.description.getter(v170, &type metadata for String);
                v182 = v181;
                swift_bridgeObjectRelease(v170);
                v240 = (_QWORD *)sub_10003FA80(v180, v182, (uint64_t *)&v242);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v167 + 4);
                swift_bridgeObjectRelease(v182);
                v179 = *(void (**)(char *, uint64_t))(v212 + 8);
                v179(v211, v56);
                v183 = v238;
                _os_log_impl((void *)&_mh_execute_header, v238, (os_log_type_t)v237, "PresentmentResponseBuilder built issuer auth with document signer chain: %{public}s", v167, 0xCu);
                v184 = v236;
                swift_arrayDestroy(v236, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v184, -1, -1);
                swift_slowDealloc(v167, -1, -1);

                v216(v210, v221);
                v163 = v239;
              }
              else
              {
                v179 = *(void (**)(char *, uint64_t))(v57 + 8);
                v179(v58, v56);

                v216(v59, v221);
              }
              v185 = v188;
              v186 = v191;
              v163(v188, v191, v56);
              ISO18013Response.IssuerSigned.init(namespaces:issuerAuth:)(v217, v185);
              v179(v186, v56);
              goto LABEL_64;
            }
            swift_bridgeObjectRelease(v217);
            sub_1000150E8(v60, &qword_100176828);
            v147 = *(void (**)(char *, _QWORD, uint64_t))(v192 + 104);
            v155 = v200;
            v140 = v193;
            v147(v200, enum case for DIPError.Code.idcsMissingProposalIssuerAuth(_:), v193);
            v156 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v157 = type metadata accessor for DIPError(0);
            v158 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            v144 = swift_allocError(v157, v158, 0, 0);
            v159 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100131E50, 0, v155, 0, v156, 0xD000000000000062, 0x8000000100131930, 0xD000000000000034, 0x8000000100131E10, 494);
            swift_willThrow(v159);
LABEL_63:
            v148 = v200;
            v147(v200, enum case for DIPError.Code.internalError(_:), v140);
            swift_errorRetain(v144);
            v149 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v150 = type metadata accessor for DIPError(0);
            v151 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v150, v151, 0, 0);
            v152 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v144, v148, 0, v149, 0xD000000000000062, 0x8000000100131930, 0xD000000000000034, 0x8000000100131E10, 502);
            swift_willThrow(v152);
            swift_errorRelease(v144);
LABEL_64:
            DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
            return (*(uint64_t (**)(char *, uint64_t))(v194 + 8))(v28, v195);
          }
          v65 = *(_QWORD *)(v204 + 8 * v66);
          if (!v65)
          {
            while (1)
            {
              v55 = v66 + 1;
              if (__OFADD__(v66, 1))
                goto LABEL_82;
              if (v55 >= v205)
                goto LABEL_65;
              v65 = *(_QWORD *)(v204 + 8 * v55);
              ++v66;
              if (v65)
                goto LABEL_19;
            }
          }
        }
      }
      v55 = v66;
    }
LABEL_19:
    v62 = (v65 - 1) & v65;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100063B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100176838);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ISO18013Response.DeviceAuth(0);
  v5[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[13] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v11);
  v5[15] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176828) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v12);
  v5[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for COSE_Sign1(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v5[20] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008E84(&qword_1001767F8);
  v5[21] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[22] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v17);
  v5[24] = swift_task_alloc(v17);
  v18 = type metadata accessor for DIPSignpost.Config(0);
  v5[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPSignpost(0);
  v5[26] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v5[27] = v20;
  v5[28] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Logger(0);
  v5[29] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[30] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v23);
  v5[32] = swift_task_alloc(v23);
  return swift_task_switch(sub_100063CFC, 0, 0);
}

uint64_t sub_100063CFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder buildResponsePayloadDeviceSigned", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[32];
  v7 = v1[29];
  v8 = v1[30];
  v9 = v1[25];

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v11 = v10(v6, v7);
  static IDCSSignposts.presentmentBuildResponsePayloadDeviceSigned.getter(v11);
  v12 = DIPSignpost.init(_:)(v9);
  v13 = defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Building response payload device signed", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = v1[31];
  v18 = v1[29];
  v19 = (void *)v1[4];

  v10(v17, v18);
  v1[2] = sub_10006B078(v19);
  v20 = sub_100069FC0();
  v21 = sub_100008E84(&qword_100176840);
  v22 = sub_10006BB38(&qword_100176848, (void (*)(void))sub_10006BAB4, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v23 = sub_10006BB38(&qword_100176868, (void (*)(void))sub_10006BBAC, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  CBOREncodedCBOR.init(value:tag:encoder:)(v1 + 2, 0, v20, v21, v22, v23);
  v24 = (_QWORD *)swift_task_alloc(dword_100176654);
  v1[33] = v24;
  *v24 = v1;
  v24[1] = sub_100064124;
  return sub_100064790(v1[17], v1[4], v1[5], v1[6], v1[24]);
}

uint64_t sub_100064124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100064438;
  else
    v3 = sub_100064188;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100064188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 192);
  if (v4 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
    sub_1000150E8(v3, &qword_100176828);
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v8, v7, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v8, 0, 1, v1);
    v12 = type metadata accessor for COSE_Mac0(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    ISO18013Response.DeviceAuth.init(deviceSignature:deviceMac:)(v8, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v24, v5, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v28, v9, v30);
    ISO18013Response.DeviceSigned.init(namespaces:deviceAuth:)(v24, v28);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v30);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v5, v26);
    v6 = 0;
  }
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 136);
  v29 = *(_QWORD *)(v0 + 128);
  v31 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 112);
  v33 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 24);
  v21 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, v6, 1, v21);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000062, 0x8000000100131930, 0xD000000000000047, 0x8000000100131D40, 533);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10006463C(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = sub_100008E84(&qword_100177C20);
  v3._countAndFlagsBits = Dictionary.description.getter(a1, &type metadata for String, v2, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000025;
}

unint64_t sub_1000646D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  v3 = sub_100008E84(&qword_100176858);
  v4._countAndFlagsBits = Dictionary.description.getter(v2, &type metadata for String, v3, &protocol witness table for String);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000018;
}

uint64_t sub_100064790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CredentialKeyType(0);
  v6[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v6[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[18] = swift_task_alloc(v13);
  v6[19] = swift_task_alloc(v13);
  return swift_task_switch(sub_100064858, 0, 0);
}

uint64_t sub_100064858(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder signDeviceSignedData", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[19];
  v7 = v1[16];
  v8 = v1[17];
  v10 = v1[14];
  v9 = v1[15];
  v11 = v1[13];
  v12 = v1[6];

  v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v6, v7);
  v14 = *(_QWORD *)(v12 + *(int *)(type metadata accessor for PresentmentProposal(0) + 28))
      + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v14, v11);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11);
  if ((_DWORD)v15 == enum case for CredentialKeyType.legacySE(_:))
  {
    v16 = (_QWORD *)swift_task_alloc(dword_100176664);
    v1[20] = v16;
    *v16 = v1;
    v16[1] = sub_100064CC8;
    return sub_100066A34(v1[4], v1[5], v1[6], v1[7], v1[8]);
  }
  else if ((_DWORD)v15 == enum case for CredentialKeyType.ses(_:))
  {
    v18 = (_QWORD *)swift_task_alloc(dword_10017665C);
    v1[22] = v18;
    *v18 = v1;
    v18[1] = sub_100064DBC;
    return sub_100064ED8(v1[4], v1[5], v1[6], v1[7], v1[8]);
  }
  else
  {
    if ((_DWORD)v15 == enum case for CredentialKeyType.externalSE(_:))
    {
      v19 = defaultLogger()(v15);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Device signature with external SE key is not supported; skipping signature",
          v22,
          2u);
        swift_slowDealloc(v22, -1, -1);
      }
      v23 = v1[18];
      v24 = v1[16];

      v13(v23, v24);
      v25 = v1[18];
      v26 = v1[19];
      v27 = v1[15];
      v28 = v1[12];
      v29 = v1[4];
      v30 = type metadata accessor for COSE_Sign1(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
      swift_task_dealloc(v26);
      swift_task_dealloc(v25);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      v31 = (uint64_t (*)(void))v1[1];
    }
    else
    {
      v32 = v1[14];
      v47 = v1[15];
      v33 = v1[12];
      v34 = v1[13];
      v36 = v1[10];
      v35 = v1[11];
      _StringGuts.grow(_:)(39);
      v1[2] = 0;
      v1[3] = 0xE000000000000000;
      v37._object = (void *)0x8000000100131CB0;
      v37._countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v37);
      _print_unlocked<A, B>(_:_:)(v14, v1 + 2, v34, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v38 = v1[2];
      v39 = v1[3];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v33, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v36);
      v40 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v41 = type metadata accessor for DIPError(0);
      v42 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v41, v42, 0, 0);
      v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v38, v39, 0, v33, 0, v40, 0xD000000000000062, 0x8000000100131930, 0xD000000000000050, 0x8000000100131CE0, 591);
      swift_willThrow(v43);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v47, v34);
      v44 = v1[18];
      v45 = v1[15];
      v46 = v1[12];
      swift_task_dealloc(v1[19]);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      v31 = (uint64_t (*)(void))v1[1];
    }
    return v31();
  }
}

uint64_t sub_100064CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100064E20;
  else
    v3 = sub_100064D2C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100064D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = type metadata accessor for COSE_Sign1(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100064E7C;
  else
    v3 = sub_10006D7FC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100064E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_100176828);
  v6[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v6[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[15] = v11;
  v6[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SESKeystore.SignatureOutputFormat(0);
  v6[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[18] = v13;
  v6[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PresentmentProposal(0);
  v6[20] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[21] = swift_task_alloc(v15);
  v6[22] = swift_task_alloc(v15);
  v16 = sub_100008E84(&qword_100176830);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ISO18013SessionTranscript(0);
  v6[24] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[25] = v18;
  v6[26] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPSignpost.Config(0);
  v6[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DIPSignpost(0);
  v6[28] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v6[29] = v21;
  v6[30] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger(0);
  v6[31] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v6[32] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[33] = swift_task_alloc(v24);
  v6[34] = swift_task_alloc(v24);
  v6[35] = swift_task_alloc(v24);
  v6[36] = swift_task_alloc(v24);
  v6[37] = swift_task_alloc(v24);
  return swift_task_switch(sub_1000650D8, 0, 0);
}

uint64_t sub_1000650D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  id v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_t log;
  os_log_t loga;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder signDeviceSignedDataSES", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[37];
  v7 = v1[31];
  v8 = v1[32];
  v9 = v1[27];

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v1[38] = v10;
  v11 = v10(v6, v7);
  static IDCSSignposts.presentmentBuildResponseSignDeviceDataSES.getter(v11);
  v12 = DIPSignpost.init(_:)(v9);
  v13 = defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Signing device signed data with SES key", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = v1[36];
  v18 = v1[31];
  v19 = v1[24];
  v20 = v1[25];
  v21 = v1[23];
  v22 = v1[7];

  v10(v17, v18);
  sub_10002E908(v22, v21, &qword_100176830);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    v24 = v1[15];
    v23 = v1[16];
    v25 = v1[14];
    sub_1000150E8(v1[23], &qword_100176830);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v25);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131A40, 0, v23, 0, v26, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 609);
    v31 = v29;
    swift_willThrow(v30);
    goto LABEL_12;
  }
  v32 = (void *)v1[5];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[25] + 32))(v1[26], v1[23], v1[24]);
  v33 = objc_msgSend(v32, "authData");
  if (!v33)
  {
    v57 = v1[25];
    v56 = v1[26];
    v58 = v1[24];
    v59 = v1[16];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[15] + 104))(v59, enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:), v1[14]);
    v60 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v61 = type metadata accessor for DIPError(0);
    v62 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v63 = swift_allocError(v61, v62, 0, 0);
    v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x8000000100131AC0, 0, v59, 0, v60, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 612);
    v31 = v63;
    swift_willThrow(v64);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    goto LABEL_12;
  }
  v34 = v33;
  v35 = v1[20];
  v36 = v1[6];
  v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v39 = v38;

  v1[39] = v37;
  v1[40] = v39;
  v40 = *(_QWORD *)(v36 + *(int *)(v35 + 28));
  v1[41] = v40;
  v41 = type metadata accessor for SESPresentmentKey(0);
  v42 = swift_dynamicCastClass(v40, v41);
  v43 = v1[26];
  if (!v42)
  {
    v65 = v1[24];
    v66 = v1[25];
    v67 = v1[16];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[15] + 104))(v67, enum case for DIPError.Code.badLogic(_:), v1[14]);
    v68 = v37;
    v69 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v72 = swift_allocError(v70, v71, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100131C70, 0, v67, 0, v69, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 616);
    v31 = v72;
    swift_willThrow(v73);
    sub_100005AB0(v68, v39);
    (*(void (**)(unint64_t, uint64_t))(v66 + 8))(v43, v65);
    goto LABEL_12;
  }
  v200 = v35;
  v207 = v37;
  v210 = v39;
  v44 = v1[8];
  v45 = (void **)v1[6];
  v46 = v42 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob;
  v47 = *(_QWORD *)(v42 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob);
  v1[42] = v47;
  v48 = *(_QWORD *)(v46 + 8);
  v1[43] = v48;
  v49 = *v45;
  swift_retain(v40);
  sub_100005A38(v47, v48);
  v50 = objc_msgSend(v49, "docType");
  v204 = v40;
  v51 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v53 = v52;

  v54 = sub_100068B00(v43, v51, v53, v44);
  v1[44] = v54;
  v1[45] = v55;
  v85 = v55;
  v186 = v54;
  v193 = v47;
  v197 = v48;
  v87 = v1[21];
  v86 = v1[22];
  v88 = v1[6];
  v89 = swift_bridgeObjectRelease(v53);
  defaultLogger()(v89);
  sub_10006BC40(v88, v86, type metadata accessor for PresentmentProposal);
  v90 = sub_10006BC40(v88, v87, type metadata accessor for PresentmentProposal);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.debug.getter();
  v93 = os_log_type_enabled(v91, v92);
  v94 = v1[35];
  v95 = v1[31];
  v97 = v1[21];
  v96 = v1[22];
  v189 = v85;
  if (v93)
  {
    v98 = swift_slowAlloc(22, -1);
    v178 = swift_slowAlloc(64, -1);
    v214 = v178;
    *(_DWORD *)v98 = 136315394;
    v99 = *(_QWORD *)(v96 + *(int *)(v200 + 28));
    type = v92;
    v101 = *(_QWORD *)(v99 + 16);
    v100 = *(_QWORD *)(v99 + 24);
    swift_bridgeObjectRetain(v100);
    v1[2] = sub_10003FA80(v101, v100, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v98 + 4);
    swift_bridgeObjectRelease(v100);
    sub_10006CA8C(v96, type metadata accessor for PresentmentProposal);
    *(_WORD *)(v98 + 12) = 2080;
    v102 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v97 + *(int *)(v200 + 28) + 8) + 16))(**(_QWORD **)(v97 + *(int *)(v200 + 28)));
    v104 = v103;
    v105 = Data.base16EncodedString()();
    sub_100005AB0(v102, v104);
    v1[3] = sub_10003FA80(v105._countAndFlagsBits, (unint64_t)v105._object, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v98 + 14);
    swift_bridgeObjectRelease(v105._object);
    sub_10006CA8C(v97, type metadata accessor for PresentmentProposal);
    _os_log_impl((void *)&_mh_execute_header, v91, type, "Signing device authentication with SES key %s, public key identifier %s", (uint8_t *)v98, 0x16u);
    swift_arrayDestroy(v178, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v178, -1, -1);
    swift_slowDealloc(v98, -1, -1);

  }
  else
  {
    sub_10006CA8C(v96, type metadata accessor for PresentmentProposal);
    sub_10006CA8C(v97, type metadata accessor for PresentmentProposal);

  }
  v106 = v10(v94, v95);
  v107 = *(_QWORD *)(v1[6] + *(int *)(v1[20] + 32));
  if ((unint64_t)(v107 - 1) >= 2)
  {
    if (v107)
    {
      v154 = v1[25];
      v153 = v1[26];
      v155 = v1[24];
      v156 = v1[16];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[15] + 104))(v156, enum case for DIPError.Code.internalError(_:), v1[14]);
      v157 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v158 = type metadata accessor for DIPError(0);
      v159 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v160 = swift_allocError(v158, v159, 0, 0);
      v161 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100131B60, 0, v156, 0, v157, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 640);
      v31 = v160;
      swift_willThrow(v161);
      sub_100005AB0(v186, v189);
      sub_100005AB0(v193, v197);
      sub_100005AB0(v207, v210);
      swift_release(v204);
      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
    }
    else
    {
      v118 = defaultLogger()(v106);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v119, v120))
      {
        v121 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v121 = 0;
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "Auth policy is not required; using empty signature",
          v121,
          2u);
        swift_slowDealloc(v121, -1, -1);
      }
      v122 = v1[34];
      v123 = v1[31];

      v10(v122, v123);
      v124 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v124, *(unsigned int *)(v124 + 48), *(unsigned __int16 *)(v124 + 52));
      v125 = __DataStorage.init(length:)(32);
      v214 = 0x2000000000;
      v215 = v125;
      sub_10006A564((int *)&v214, 0);
      v126 = v214;
      v127 = v215 | 0x4000000000000000;
      v128 = (void (*)(uint64_t, uint64_t))v1[38];
      v129 = v1[33];
      v130 = v1[31];
      v131 = v1[12];
      v212 = v1[13];
      v133 = v1[10];
      v132 = v1[11];
      defaultLogger()(v134);
      v135 = swift_task_alloc(32);
      *(_QWORD *)(v135 + 16) = v126;
      *(_QWORD *)(v135 + 24) = v127;
      Logger.cryptoParam(_:)(sub_10006A6BC, v135);
      swift_task_dealloc(v135);
      v128(v129, v130);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v132 + 104))(v131, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v133);
      sub_100005A38(v126, v127);
      v206 = v127;
      v209 = v126;
      COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)(v131, 0, 0xF000000000000000, 0, 0xF000000000000000, v126, v127, 0);
      v136 = type metadata accessor for COSE_Sign1(0);
      v137 = *(_QWORD *)(v136 - 8);
      v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v212, 1, v136);
      v139 = v1[44];
      v141 = v1[42];
      v140 = v1[43];
      v213 = v1[41];
      v142 = v1[39];
      if (v138 != 1)
      {
        v171 = v1[37];
        v172 = v1[36];
        *(_QWORD *)typea = v1[35];
        loga = (os_log_t)v1[34];
        v162 = v1[30];
        v169 = v1[29];
        v170 = v1[28];
        v179 = v1[33];
        v181 = v1[27];
        v163 = v1[25];
        v167 = v1[24];
        v168 = v1[26];
        v184 = v1[23];
        v187 = v1[22];
        v191 = v1[21];
        v195 = v1[19];
        v199 = v1[16];
        v166 = v1[13];
        v203 = v1[12];
        v164 = v1[4];
        v165 = v1[40];
        sub_100005AB0(v1[44], v1[45]);
        sub_100005AB0(v141, v140);
        sub_100005AB0(v142, v165);
        swift_release(v213);
        sub_100005AB0(v209, v206);
        (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v168, v167);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 32))(v164, v166, v136);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v162, v170);
        swift_task_dealloc(v171);
        swift_task_dealloc(v172);
        swift_task_dealloc(*(_QWORD *)typea);
        swift_task_dealloc(loga);
        swift_task_dealloc(v179);
        swift_task_dealloc(v162);
        swift_task_dealloc(v181);
        swift_task_dealloc(v168);
        swift_task_dealloc(v184);
        swift_task_dealloc(v187);
        swift_task_dealloc(v191);
        swift_task_dealloc(v195);
        swift_task_dealloc(v199);
        swift_task_dealloc(v166);
        swift_task_dealloc(v203);
        v83 = (uint64_t (*)(void))v1[1];
        return v83();
      }
      v202 = v1[26];
      v194 = v1[25];
      v198 = v1[24];
      v143 = v1[15];
      v144 = v1[16];
      v145 = v1[14];
      v190 = v1[40];
      v183 = v1[43];
      v146 = v1[45];
      v147 = v1[42];
      sub_1000150E8(v1[13], &qword_100176828);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v143 + 104))(v144, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v145);
      v148 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v149 = type metadata accessor for DIPError(0);
      v150 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v151 = swift_allocError(v149, v150, 0, 0);
      v152 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100131B80, 0, v144, 0, v148, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 647);
      v31 = v151;
      swift_willThrow(v152);
      sub_100005AB0(v139, v146);
      sub_100005AB0(v147, v183);
      sub_100005AB0(v142, v190);
      swift_release(v213);
      sub_100005AB0(v209, v206);
      (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v202, v198);
    }
LABEL_12:
    v74 = v1[37];
    log = (os_log_t)v1[36];
    v177 = v1[35];
    v180 = v1[34];
    v182 = v1[33];
    v76 = v1[29];
    v75 = v1[30];
    v77 = v1[28];
    v185 = v1[27];
    v188 = v1[26];
    v192 = v1[23];
    v196 = v1[22];
    v201 = v1[21];
    v205 = v1[19];
    v78 = v1[16];
    v208 = v1[13];
    v211 = v1[12];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[15] + 104))(v78, enum case for DIPError.Code.internalError(_:), v1[14]);
    swift_errorRetain(v31);
    v79 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v80 = type metadata accessor for DIPError(0);
    v81 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v80, v81, 0, 0);
    v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v78, 0, v79, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 651);
    swift_willThrow(v82);
    swift_errorRelease(v31);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    swift_task_dealloc(v74);
    swift_task_dealloc(log);
    swift_task_dealloc(v177);
    swift_task_dealloc(v180);
    swift_task_dealloc(v182);
    swift_task_dealloc(v75);
    swift_task_dealloc(v185);
    swift_task_dealloc(v188);
    swift_task_dealloc(v192);
    swift_task_dealloc(v196);
    swift_task_dealloc(v201);
    swift_task_dealloc(v205);
    swift_task_dealloc(v78);
    swift_task_dealloc(v208);
    swift_task_dealloc(v211);
    v83 = (uint64_t (*)(void))v1[1];
    return v83();
  }
  v108 = v1[18];
  v109 = v1[19];
  v110 = v1[17];
  v111 = v1[9];
  v112 = (void *)v1[5];
  v113 = *(_QWORD *)(v111 + 144);
  v1[46] = v113;
  v114 = *(_QWORD *)(v111 + 136);
  v1[47] = v114;
  swift_retain(v113);
  swift_retain(v114);
  v115 = objc_msgSend(v112, "seAccessEndpoint");
  v1[48] = v115;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v108 + 104))(v109, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v110);
  v116 = (_QWORD *)swift_task_alloc(dword_10017774C);
  v1[49] = v116;
  *v116 = v1;
  v116[1] = sub_100066180;
  v117 = v1[19];
  v216 = v113;
  v217 = v114;
  return sub_1000CB2A4(v186, v189, v193, v197, v207, v210, v117, (uint64_t)v115);
}

uint64_t sub_100066180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 392);
  *(_QWORD *)(*(_QWORD *)v3 + 400) = v2;
  swift_task_dealloc(v7);
  v8 = (void *)v6[48];
  v10 = v6[18];
  v9 = v6[19];
  v11 = v6[17];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);

    v12 = sub_1000667B8;
  }
  else
  {
    v6[51] = a2;
    v6[52] = a1;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);

    v12 = sub_100066224;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_100066224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 368));
  v2 = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 96);
  v72 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v2);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v3;
  Logger.cryptoParam(_:)(sub_10006A6BC, v11);
  swift_task_dealloc(v11);
  v5(v6, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v10);
  sub_100005A38(v4, v3);
  v75 = v4;
  v12 = v4;
  v13 = v3;
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)(v8, 0, 0xF000000000000000, 0, 0xF000000000000000, v12, v3, 0);
  v14 = type metadata accessor for COSE_Sign1(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v72, 1, v14);
  v68 = *(_QWORD *)(v0 + 344);
  v64 = *(_QWORD *)(v0 + 336);
  v70 = *(_QWORD *)(v0 + 320);
  v73 = *(_QWORD *)(v0 + 328);
  v66 = *(_QWORD *)(v0 + 312);
  if (v16 == 1)
  {
    v17 = *(_QWORD *)(v0 + 200);
    v58 = *(_QWORD *)(v0 + 192);
    v61 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 360);
    v22 = *(_QWORD *)(v0 + 352);
    sub_1000150E8(*(_QWORD *)(v0 + 104), &qword_100176828);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v19, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v20);
    v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v56 = type metadata accessor for DIPError(0);
    v54 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v24 = swift_allocError(v56, v54, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100131B80, 0, v19, 0, v23, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 647);
    swift_willThrow(v25);
    sub_100005AB0(v22, v21);
    sub_100005AB0(v64, v68);
    sub_100005AB0(v66, v70);
    swift_release(v73);
    sub_100005AB0(v75, v13);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v61, v58);
    v26 = *(_QWORD *)(v0 + 296);
    v44 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 280);
    v48 = *(_QWORD *)(v0 + 272);
    v52 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 240);
    v29 = *(_QWORD *)(v0 + 224);
    v59 = *(_QWORD *)(v0 + 216);
    v62 = *(_QWORD *)(v0 + 208);
    v65 = *(_QWORD *)(v0 + 184);
    v67 = *(_QWORD *)(v0 + 176);
    v69 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 128);
    v71 = *(_QWORD *)(v0 + 152);
    v74 = *(_QWORD *)(v0 + 104);
    v76 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(v30, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 112));
    swift_errorRetain(v24);
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v56, v54, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v24, v30, 0, v31, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 651);
    swift_willThrow(v32);
    swift_errorRelease(v24);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    swift_task_dealloc(v26);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v52);
    swift_task_dealloc(v27);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v30);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 288);
    v45 = *(_QWORD *)(v0 + 280);
    v47 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 240);
    v40 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 208);
    v49 = *(_QWORD *)(v0 + 264);
    v50 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 192);
    v35 = *(_QWORD *)(v0 + 200);
    v51 = *(_QWORD *)(v0 + 184);
    v53 = *(_QWORD *)(v0 + 176);
    v55 = *(_QWORD *)(v0 + 168);
    v57 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 104);
    v60 = *(_QWORD *)(v0 + 128);
    v63 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 32);
    sub_100005AB0(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
    sub_100005AB0(v64, v68);
    sub_100005AB0(v66, v70);
    swift_release(v73);
    sub_100005AB0(v75, v13);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v38, v37, v14);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v33, v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v33);
    swift_task_dealloc(v50);
    swift_task_dealloc(v34);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v60);
    swift_task_dealloc(v37);
    swift_task_dealloc(v63);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000667B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 368));
  swift_release(v1);
  sub_100005AB0(v3, v2);
  sub_100005AB0(v5, v4);
  sub_100005AB0(v8, v7);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v31);
  v10 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 216);
  v26 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 112));
  swift_errorRetain(v10);
  v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v18, v19, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v16, 0, v17, 0xD000000000000062, 0x8000000100131930, 0xD000000000000053, 0x8000000100131C10, 651);
  swift_willThrow(v20);
  swift_errorRelease(v10);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v13);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v16);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v7 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v6[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[16] = v8;
  v6[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_100176828);
  v6[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v6[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[20] = v11;
  v6[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PresentmentProposal(0);
  v6[22] = v12;
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_100176830);
  v6[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ISO18013SessionTranscript(0);
  v6[25] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[26] = v15;
  v6[27] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost.Config(0);
  v6[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPSignpost(0);
  v6[29] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[30] = v18;
  v6[31] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Logger(0);
  v6[32] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v6[33] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[34] = swift_task_alloc(v21);
  v6[35] = swift_task_alloc(v21);
  v6[36] = swift_task_alloc(v21);
  v6[37] = swift_task_alloc(v21);
  v6[38] = swift_task_alloc(v21);
  v6[39] = swift_task_alloc(v21);
  v6[40] = swift_task_alloc(v21);
  return swift_task_switch(sub_100066C14, 0, 0);
}

uint64_t sub_100066C14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  id v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  os_log_type_t type[8];
  os_log_type_t typea;
  os_log_type_t typeb[8];
  os_log_t log;
  os_log_t loga;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentResponseBuilder signDeviceSignedDataLegacySE", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[40];
  v7 = v1[32];
  v8 = v1[33];
  v9 = v1[28];

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v1[41] = v10;
  v11 = v10(v6, v7);
  static IDCSSignposts.presentmentBuildResponseSignDeviceDataLegacySE.getter(v11);
  v12 = DIPSignpost.init(_:)(v9);
  v13 = defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Signing device signed data with legacy SE key", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = v1[39];
  v18 = v1[32];
  v19 = v1[25];
  v20 = v1[26];
  v21 = v1[24];
  v22 = v1[12];

  v10(v17, v18);
  sub_10002E908(v22, v21, &qword_100176830);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    v24 = v1[20];
    v23 = v1[21];
    v25 = v1[19];
    sub_1000150E8(v1[24], &qword_100176830);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v25);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131A40, 0, v23, 0, v26, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 669);
    v31 = v29;
    swift_willThrow(v30);
    goto LABEL_14;
  }
  v32 = (void *)v1[10];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[26] + 32))(v1[27], v1[24], v1[25]);
  v33 = objc_msgSend(v32, "authData");
  if (!v33)
  {
    v56 = v1[26];
    v55 = v1[27];
    v57 = v1[25];
    v58 = v1[21];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[20] + 104))(v58, enum case for DIPError.Code.idcsMissingAuthDataInPresentmentSelection(_:), v1[19]);
    v59 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v60 = type metadata accessor for DIPError(0);
    v61 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v62 = swift_allocError(v60, v61, 0, 0);
    v63 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x8000000100131AC0, 0, v58, 0, v59, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 672);
    v31 = v62;
    swift_willThrow(v63);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    goto LABEL_14;
  }
  v34 = v33;
  v35 = v1[22];
  v36 = v1[11];
  v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v39 = v38;

  v1[42] = v37;
  v1[43] = v39;
  v40 = *(_QWORD *)(v36 + *(int *)(v35 + 28));
  v1[44] = v40;
  v41 = type metadata accessor for LegacySEPresentmentKey(0);
  v42 = swift_dynamicCastClass(v40, v41);
  if (!v42)
  {
    v64 = v1[26];
    v223 = v1[27];
    v65 = v1[25];
    v66 = v1[21];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[20] + 104))(v66, enum case for DIPError.Code.badLogic(_:), v1[19]);
    v67 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v68 = v39;
    v69 = type metadata accessor for DIPError(0);
    v70 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v71 = swift_allocError(v69, v70, 0, 0);
    v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x8000000100131AF0, 0, v66, 0, v67, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 675);
    v31 = v71;
    swift_willThrow(v72);
    sub_100005AB0(v37, v68);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v223, v65);
    goto LABEL_14;
  }
  v222 = v37;
  v43 = v42 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot;
  v44 = *(void **)(v42 + OBJC_IVAR____TtC7idcredd22LegacySEPresentmentKey_keySlot);
  v1[45] = v44;
  v45 = v1[27];
  if ((*(_BYTE *)(v43 + 8) & 1) != 0)
  {
    v46 = v40;
    v47 = v1[26];
    v217 = v1[25];
    v48 = v1[21];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[20] + 104))(v48, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v1[19]);
    swift_retain(v46);
    v49 = v39;
    v50 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v51 = type metadata accessor for DIPError(0);
    v52 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v53 = swift_allocError(v51, v52, 0, 0);
    v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x8000000100131B30, 0, v48, 0, v50, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 679);
    v31 = v53;
    swift_willThrow(v54);
    sub_100005AB0(v222, v49);
    swift_release(v46);
    (*(void (**)(unint64_t, uint64_t))(v47 + 8))(v45, v217);
    goto LABEL_14;
  }
  v214 = v44;
  v218 = v39;
  v73 = v1[13];
  v74 = *(void **)v1[11];
  swift_retain(v40);
  v75 = objc_msgSend(v74, "docType");
  v76 = v40;
  v77 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v79 = v78;

  v80 = sub_100068B00(v45, v77, v79, v73);
  v1[46] = v80;
  v1[47] = v81;
  v94 = v80;
  v211 = v81;
  v203 = v76;
  v95 = v1[23];
  v96 = v1[11];
  v97 = swift_bridgeObjectRelease(v79);
  defaultLogger()(v97);
  v98 = sub_10006BC40(v96, v95, type metadata accessor for PresentmentProposal);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.debug.getter();
  v101 = os_log_type_enabled(v99, v100);
  v102 = v1[38];
  v103 = v1[32];
  v104 = v1[23];
  v207 = v94;
  if (v101)
  {
    v200 = v1[38];
    typea = v100;
    v105 = swift_slowAlloc(22, -1);
    v192 = swift_slowAlloc(32, -1);
    v226 = v192;
    *(_DWORD *)v105 = 134349314;
    v1[7] = v214;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v105 + 4);
    *(_WORD *)(v105 + 12) = 2080;
    v106 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v104 + *(int *)(v35 + 28) + 8) + 16))(**(_QWORD **)(v104 + *(int *)(v35 + 28)));
    v108 = v107;
    v109 = Data.base16EncodedString()();
    sub_100005AB0(v106, v108);
    v1[8] = sub_10003FA80(v109._countAndFlagsBits, (unint64_t)v109._object, (uint64_t *)&v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v105 + 14);
    swift_bridgeObjectRelease(v109._object);
    sub_10006CA8C(v104, type metadata accessor for PresentmentProposal);
    _os_log_impl((void *)&_mh_execute_header, v99, typea, "Signing device authentication with legacy SE key slot %{public}ld, public key identifier %s", (uint8_t *)v105, 0x16u);
    swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v192, -1, -1);
    swift_slowDealloc(v105, -1, -1);

    v110 = v200;
  }
  else
  {
    sub_10006CA8C(v104, type metadata accessor for PresentmentProposal);

    v110 = v102;
  }
  v10(v110, v103);
  v111 = v1[22];
  v112 = v1[11];
  v113 = sub_100008EC4();
  v1[48] = v113;
  v114 = *(_QWORD *)(v112 + *(int *)(v111 + 32));
  if (!v114)
  {
    v124 = defaultLogger()(v113);
    v125 = Logger.logObject.getter(v124);
    v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "Auth policy is not required; using empty signature",
        v127,
        2u);
      swift_slowDealloc(v127, -1, -1);
    }
    v128 = v1[35];
    v129 = v1[32];

    v10(v128, v129);
    v130 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v130, *(unsigned int *)(v130 + 48), *(unsigned __int16 *)(v130 + 52));
    v131 = __DataStorage.init(length:)(32);
    v226 = 0x2000000000;
    v227 = v131;
    sub_10006A564((int *)&v226, 0);
    v216 = v226;
    v225 = v227 | 0x4000000000000000;
LABEL_32:
    v150 = (void (*)(uint64_t, uint64_t))v1[41];
    v151 = v1[34];
    v152 = v1[32];
    v153 = v1[17];
    v220 = v1[18];
    v154 = v1[15];
    v155 = v1[16];
    defaultLogger()(v149);
    v156 = swift_task_alloc(32);
    *(_QWORD *)(v156 + 16) = v216;
    *(_QWORD *)(v156 + 24) = v225;
    Logger.cryptoParam(_:)(sub_10006D7F0, v156);
    swift_task_dealloc(v156);
    v150(v151, v152);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v155 + 104))(v153, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v154);
    sub_100005A38(v216, v225);
    COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)(v153, 0, 0xF000000000000000, 0, 0xF000000000000000, v216, v225, 0);
    v157 = type metadata accessor for COSE_Sign1(0);
    v158 = *(_QWORD *)(v157 - 8);
    v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v220, 1, v157);
    v160 = v1[48];
    v161 = v1[46];
    v162 = v1[43];
    v221 = v1[44];
    if (v159 != 1)
    {
      v185 = v1[40];
      v186 = v1[39];
      v187 = v1[38];
      v188 = v1[37];
      v190 = v1[36];
      v193 = v1[35];
      v182 = v1[31];
      v183 = v1[30];
      v184 = v1[29];
      *(_QWORD *)typeb = v1[34];
      loga = (os_log_t)v1[28];
      v175 = v1[26];
      v176 = v1[25];
      v201 = v1[24];
      v205 = v1[23];
      v209 = v1[21];
      v180 = v1[27];
      v181 = v1[18];
      v213 = v1[17];
      v177 = v1[9];
      v178 = v1[47];
      v179 = v1[42];
      swift_release(v1[48]);
      sub_100005AB0(v179, v162);
      sub_100005AB0(v161, v178);
      swift_release(v221);
      sub_100005AB0(v216, v225);
      (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v180, v176);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 32))(v177, v181, v157);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v182, v184);
      swift_task_dealloc(v185);
      swift_task_dealloc(v186);
      swift_task_dealloc(v187);
      swift_task_dealloc(v188);
      swift_task_dealloc(v190);
      swift_task_dealloc(v193);
      swift_task_dealloc(*(_QWORD *)typeb);
      swift_task_dealloc(v182);
      swift_task_dealloc(loga);
      swift_task_dealloc(v180);
      swift_task_dealloc(v201);
      swift_task_dealloc(v205);
      swift_task_dealloc(v209);
      swift_task_dealloc(v181);
      swift_task_dealloc(v213);
      v92 = (uint64_t (*)(void))v1[1];
      return v92();
    }
    v212 = v1[27];
    v204 = v1[26];
    v208 = v1[25];
    v164 = v1[20];
    v163 = v1[21];
    v165 = v1[19];
    v166 = v1[47];
    v167 = v1[43];
    v168 = v1[46];
    v169 = v1[42];
    sub_1000150E8(v1[18], &qword_100176828);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v164 + 104))(v163, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v165);
    v170 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v171 = type metadata accessor for DIPError(0);
    v172 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v173 = swift_allocError(v171, v172, 0, 0);
    v174 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100131B80, 0, v163, 0, v170, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 733);
    v31 = v173;
    swift_willThrow(v174);
    swift_release(v160);
    sub_100005AB0(v169, v167);
    sub_100005AB0(v168, v166);
    swift_release(v221);
    sub_100005AB0(v216, v225);
    (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v212, v208);
LABEL_14:
    v83 = v1[39];
    v82 = v1[40];
    v189 = v1[38];
    v191 = v1[37];
    *(_QWORD *)type = v1[36];
    log = (os_log_t)v1[35];
    v85 = v1[30];
    v84 = v1[31];
    v86 = v1[29];
    v199 = v1[34];
    v202 = v1[28];
    v206 = v1[27];
    v210 = v1[24];
    v215 = v1[23];
    v87 = v1[21];
    v219 = v1[18];
    v224 = v1[17];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[20] + 104))(v87, enum case for DIPError.Code.internalError(_:), v1[19]);
    swift_errorRetain(v31);
    v88 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v89 = type metadata accessor for DIPError(0);
    v90 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v89, v90, 0, 0);
    v91 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v87, 0, v88, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 739);
    swift_willThrow(v91);
    swift_errorRelease(v31);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v189);
    swift_task_dealloc(v191);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(log);
    swift_task_dealloc(v199);
    swift_task_dealloc(v84);
    swift_task_dealloc(v202);
    swift_task_dealloc(v206);
    swift_task_dealloc(v210);
    swift_task_dealloc(v215);
    swift_task_dealloc(v87);
    swift_task_dealloc(v219);
    swift_task_dealloc(v224);
    v92 = (uint64_t (*)(void))v1[1];
    return v92();
  }
  if (v114 != 2)
  {
    v115 = v113;
    if (v114 != 1)
    {
      v139 = v1[26];
      v140 = v1[27];
      v141 = v1[25];
      v142 = v1[21];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[20] + 104))(v142, enum case for DIPError.Code.internalError(_:), v1[19]);
      v143 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v144 = type metadata accessor for DIPError(0);
      v145 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v146 = swift_allocError(v144, v145, 0, 0);
      v147 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100131B60, 0, v142, 0, v143, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 725);
      v31 = v146;
      swift_willThrow(v147);
      swift_release(v115);
      sub_100005AB0(v222, v218);
      sub_100005AB0(v207, v211);
      swift_release(v203);
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v140, v141);
      goto LABEL_14;
    }
    v116 = defaultLogger()(v113);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v119 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v119 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Auth policy is biometric or passcode, performing non-bound signature", v119, 2u);
      swift_slowDealloc(v119, -1, -1);
    }
    v120 = v1[37];
    v121 = v1[32];
    v122 = (void *)v1[10];

    v10(v120, v121);
    v123 = objc_msgSend(v122, "seAccessEndpoint");
    v216 = sub_1000074A4(v207, v211, v214, v222, v218, v123);
    v225 = v148;

    goto LABEL_32;
  }
  v132 = defaultLogger()(v113);
  v133 = Logger.logObject.getter(v132);
  v134 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v133, v134))
  {
    v135 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v135 = 0;
    _os_log_impl((void *)&_mh_execute_header, v133, v134, "Auth policy is global binding, performing bound signature", v135, 2u);
    swift_slowDealloc(v135, -1, -1);
  }
  v136 = v1[36];
  v137 = v1[32];

  v10(v136, v137);
  v138 = (_QWORD *)swift_task_alloc(dword_100176D7C);
  v1[49] = v138;
  *v138 = v1;
  v138[1] = sub_100067ED4;
  return sub_1000867B8(2);
}

uint64_t sub_100067ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 392);
  v4[50] = a1;
  v4[51] = a2;
  v4[52] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100068818;
  else
    v6 = sub_100067F44;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100067F44()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;

  v1 = *(_QWORD *)(v0 + 408);
  if (v1 >> 60 == 15)
  {
    v2 = *(_QWORD *)(v0 + 384);
    v99 = *(_QWORD *)(v0 + 376);
    v95 = *(_QWORD *)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 336);
    v103 = *(_QWORD *)(v0 + 208);
    v107 = *(_QWORD *)(v0 + 352);
    v112 = *(_QWORD *)(v0 + 200);
    v116 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v5, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 152));
    v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v7 = type metadata accessor for DIPError(0);
    v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v9 = swift_allocError(v7, v8, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100131BB0, 0, v5, 0, v6, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 703);
    swift_willThrow(v10);
    swift_release(v2);
    sub_100005AB0(v4, v3);
    sub_100005AB0(v95, v99);
    swift_release(v107);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v116, v112);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 400);
    v113 = *(_QWORD *)(v0 + 376);
    v117 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 360);
    v108 = *(_QWORD *)(v0 + 368);
    v13 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 344);
    type metadata accessor for AppleIDVManager(0);
    sub_100112A6C((uint64_t *)(v0 + 16));
    v16 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 48);
    v104 = (_QWORD *)(v0 + 16);
    sub_1000151A4((_QWORD *)(v0 + 16), v16);
    dispatch thunk of AppleIDVManaging.authorizePresentmentForSignature(aclBlob:externalizedLAContext:seSlot:payloadDigest:)(v11, v1, v13, v14, v12, v108, v113, v16, v15);
    v9 = v117;
    if (v117)
    {
      v18 = *(_QWORD *)(v0 + 400);
      v17 = *(_QWORD *)(v0 + 408);
      v20 = *(_QWORD *)(v0 + 376);
      v19 = *(_QWORD *)(v0 + 384);
      v21 = *(_QWORD *)(v0 + 368);
      v23 = *(_QWORD *)(v0 + 344);
      v22 = *(_QWORD *)(v0 + 352);
      v24 = *(_QWORD *)(v0 + 336);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
      sub_10000B164(v18, v17);
      swift_release(v19);
      sub_100005AB0(v24, v23);
      sub_100005AB0(v21, v20);
      swift_release(v22);
      sub_10000CE40(v104);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 368);
      v25 = *(_QWORD *)(v0 + 376);
      v27 = *(void **)(v0 + 360);
      v29 = *(_QWORD *)(v0 + 336);
      v28 = *(_QWORD *)(v0 + 344);
      v30 = objc_msgSend(*(id *)(v0 + 80), "seAccessEndpoint");
      v31 = sub_100007EB8(v26, v25, v27, v29, v28, v30);
      v118 = v32;
      v34 = *(_QWORD *)(v0 + 400);
      v33 = *(_QWORD *)(v0 + 408);
      v46 = *(_QWORD *)(v0 + 112);
      v47 = v31;

      type metadata accessor for IDCSAnalytics(0);
      static IDCSAnalytics.sendLegacyACLUsageEvent(presentmentType:)(*(_QWORD *)(v46 + 16));
      sub_10000B164(v34, v33);
      v48 = sub_10000CE40(v104);
      v49 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      v50 = *(_QWORD *)(v0 + 272);
      v51 = *(_QWORD *)(v0 + 256);
      v52 = *(_QWORD *)(v0 + 136);
      v110 = *(_QWORD *)(v0 + 144);
      v53 = *(_QWORD *)(v0 + 120);
      v54 = *(_QWORD *)(v0 + 128);
      defaultLogger()(v48);
      v55 = swift_task_alloc(32);
      *(_QWORD *)(v55 + 16) = v47;
      *(_QWORD *)(v55 + 24) = v118;
      Logger.cryptoParam(_:)(sub_10006D7F0, v55);
      swift_task_dealloc(v55);
      v49(v50, v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v54 + 104))(v52, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v53);
      sub_100005A38(v47, v118);
      v115 = v47;
      COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)(v52, 0, 0xF000000000000000, 0, 0xF000000000000000, v47, v118, 0);
      v56 = type metadata accessor for COSE_Sign1(0);
      v57 = *(_QWORD *)(v56 - 8);
      v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v110, 1, v56);
      v59 = *(_QWORD *)(v0 + 376);
      v60 = *(_QWORD *)(v0 + 368);
      v61 = *(_QWORD *)(v0 + 344);
      v106 = *(_QWORD *)(v0 + 336);
      v111 = *(_QWORD *)(v0 + 352);
      if (v58 != 1)
      {
        v79 = *(_QWORD *)(v0 + 320);
        v80 = *(_QWORD *)(v0 + 312);
        v81 = *(_QWORD *)(v0 + 304);
        v82 = *(_QWORD *)(v0 + 296);
        v84 = *(_QWORD *)(v0 + 288);
        v86 = *(_QWORD *)(v0 + 280);
        v76 = *(_QWORD *)(v0 + 248);
        v77 = *(_QWORD *)(v0 + 240);
        v78 = *(_QWORD *)(v0 + 232);
        v71 = *(_QWORD *)(v0 + 216);
        v88 = *(_QWORD *)(v0 + 272);
        v90 = *(_QWORD *)(v0 + 224);
        v73 = *(_QWORD *)(v0 + 200);
        v72 = *(_QWORD *)(v0 + 208);
        v92 = *(_QWORD *)(v0 + 192);
        v94 = *(_QWORD *)(v0 + 184);
        v98 = *(_QWORD *)(v0 + 168);
        v75 = *(_QWORD *)(v0 + 144);
        v102 = *(_QWORD *)(v0 + 136);
        v74 = *(_QWORD *)(v0 + 72);
        swift_release(*(_QWORD *)(v0 + 384));
        sub_100005AB0(v106, v61);
        sub_100005AB0(v60, v59);
        swift_release(v111);
        sub_100005AB0(v115, v118);
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v74, v75, v56);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
        swift_task_dealloc(v79);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v84);
        swift_task_dealloc(v86);
        swift_task_dealloc(v88);
        swift_task_dealloc(v76);
        swift_task_dealloc(v90);
        swift_task_dealloc(v71);
        swift_task_dealloc(v92);
        swift_task_dealloc(v94);
        swift_task_dealloc(v98);
        swift_task_dealloc(v75);
        swift_task_dealloc(v102);
        v44 = *(uint64_t (**)(void))(v0 + 8);
        return v44();
      }
      v62 = *(_QWORD *)(v0 + 208);
      v101 = *(_QWORD *)(v0 + 216);
      v97 = *(_QWORD *)(v0 + 200);
      v64 = *(_QWORD *)(v0 + 160);
      v63 = *(_QWORD *)(v0 + 168);
      v65 = *(_QWORD *)(v0 + 152);
      v66 = *(_QWORD *)(v0 + 384);
      sub_1000150E8(*(_QWORD *)(v0 + 144), &qword_100176828);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v64 + 104))(v63, enum case for DIPError.Code.idcsCOSECreationFailed(_:), v65);
      v67 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v68 = type metadata accessor for DIPError(0);
      v69 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v9 = swift_allocError(v68, v69, 0, 0);
      v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100131B80, 0, v63, 0, v67, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 733);
      swift_willThrow(v70);
      swift_release(v66);
      sub_100005AB0(v106, v61);
      sub_100005AB0(v60, v59);
      swift_release(v111);
      sub_100005AB0(v47, v118);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v101, v97);
    }
  }
  v35 = *(_QWORD *)(v0 + 320);
  v83 = *(_QWORD *)(v0 + 312);
  v85 = *(_QWORD *)(v0 + 304);
  v87 = *(_QWORD *)(v0 + 296);
  v89 = *(_QWORD *)(v0 + 288);
  v91 = *(_QWORD *)(v0 + 280);
  v93 = *(_QWORD *)(v0 + 272);
  v37 = *(_QWORD *)(v0 + 240);
  v36 = *(_QWORD *)(v0 + 248);
  v38 = *(_QWORD *)(v0 + 232);
  v96 = *(_QWORD *)(v0 + 224);
  v100 = *(_QWORD *)(v0 + 216);
  v105 = *(_QWORD *)(v0 + 192);
  v39 = *(_QWORD *)(v0 + 168);
  v109 = *(_QWORD *)(v0 + 184);
  v114 = *(_QWORD *)(v0 + 144);
  v119 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v39, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v9);
  v40 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v41 = type metadata accessor for DIPError(0);
  v42 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v41, v42, 0, 0);
  v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v39, 0, v40, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 739);
  swift_willThrow(v43);
  swift_errorRelease(v9);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  swift_task_dealloc(v35);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  swift_task_dealloc(v93);
  swift_task_dealloc(v36);
  swift_task_dealloc(v96);
  swift_task_dealloc(v100);
  swift_task_dealloc(v105);
  swift_task_dealloc(v109);
  swift_task_dealloc(v39);
  swift_task_dealloc(v114);
  swift_task_dealloc(v119);
  v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_100068818()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 384));
  sub_100005AB0(v5, v4);
  sub_100005AB0(v2, v1);
  swift_release(v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 144);
  v31 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v15, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v9);
  v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v17 = type metadata accessor for DIPError(0);
  v18 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v17, v18, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v15, 0, v16, 0xD000000000000062, 0x8000000100131930, 0xD000000000000058, 0x8000000100131A60, 739);
  swift_willThrow(v19);
  swift_errorRelease(v9);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v12);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v15);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100068A74()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000020;
}

uint64_t sub_100068B00(unint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t inited;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD v65[4];
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char v88[48];
  _QWORD v89[2];

  v83 = a4;
  v84 = a3;
  v85 = a2;
  v82 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v79 = *(_QWORD *)(v4 - 8);
  v80 = v4;
  __chkstk_darwin(v4);
  v81 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65[0] = type metadata accessor for Logger(0);
  v67 = *(_QWORD *)(v65[0] - 8);
  __chkstk_darwin(v65[0]);
  v65[1] = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for SHA256(0);
  v65[2] = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v68 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for SHA256Digest(0);
  v70 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v65[3] = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v73 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for RFC8152SigStructure(0);
  v71 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100008E84(&qword_1001767F0);
  v11 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v78 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_1001767F8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ISO18013SessionTranscript(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ISO18013DeviceAuthentication(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
  v26 = v24;
  v25(v20, v82, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v83, v13);
  v27 = v84;
  v28 = swift_bridgeObjectRetain(v84);
  ISO18013DeviceAuthentication.init(sessionTranscript:docType:deviceNamespaceBytes:)(v20, v85, v27, v16, v28);
  v29 = sub_100069FC0();
  v30 = sub_1000058C8(&qword_100176800, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013DeviceAuthentication, (uint64_t)&protocol conformance descriptor for ISO18013DeviceAuthentication);
  v31 = v87;
  v32 = dispatch thunk of CBOREncoder.encode<A>(_:)(v26, v21, v30);
  if (!v31)
  {
    v34 = v11;
    v35 = v77;
    v87 = v22;
    v89[0] = v32;
    v89[1] = v33;
    v36 = v32;
    v37 = v33;
    sub_100005A38(v32, v33);
    v38 = sub_10006A238();
    v39 = sub_10006A27C();
    swift_retain(v29);
    CBOREncodedCBOR.init(value:tag:encoder:)(v89, 1, v29, &type metadata for Data, v38, v39);
    v83 = v36;
    v84 = v37;
    v85 = v26;
    v86 = v21;
    v46 = v35;
    v47 = v78;
    v48 = CBOREncodedCBOR.dataValue.getter(v35);
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v46);
    v51 = sub_100008E84(&qword_100176818);
    inited = swift_initStackObject(v51, v88);
    *(_OWORD *)(inited + 16) = xmmword_10012A6D0;
    *(_QWORD *)(inited + 32) = static RFC8152SigStructure.protectedHeaderAlg.getter();
    v53 = v72;
    v54 = v73;
    v55 = v74;
    v56 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v72 + 104))(v73, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v74);
    v57 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter(v56);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    *(_QWORD *)(inited + 40) = v57;
    v58 = sub_10004031C(inited);
    swift_setDeallocating(inited);
    sub_100005A38(v48, v50);
    v59 = v75;
    RFC8152SigStructure.init(protected:payload:)(v58, v48, v50);
    v60 = sub_1000058C8(&qword_100176820, (uint64_t (*)(uint64_t))&type metadata accessor for RFC8152SigStructure, (uint64_t)&protocol conformance descriptor for RFC8152SigStructure);
    v61 = dispatch thunk of CBOREncoder.encode<A>(_:)(v59, v76, v60);
    v81 = (char *)v48;
    v82 = v50;
    v63 = v62;
    sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v69);
    v64 = (char *)&loc_10006921C + dword_1000695A4[v63 >> 62];
    v77 = v63;
    v78 = (char *)v61;
    __asm { BR              X10 }
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v21);
  swift_release(v29);
  v40 = v81;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v81, enum case for DIPError.Code.internalError(_:), v80);
  swift_errorRetain(v31);
  v41 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v42 = type metadata accessor for DIPError(0);
  v43 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v42, v43, 0, 0);
  v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v40, 0, v41, 0xD000000000000062, 0x8000000100131930, 0xD000000000000044, 0x80000001001319A0, 774);
  swift_willThrow(v44);
  swift_errorRelease(v31);
  return v31;
}

uint64_t sub_1000695B4(int a1, int a2, Swift::Int a3, uint64_t a4)
{
  Swift::String v5;
  void *object;

  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = Data.base16EncodedString()();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  return a4;
}

uint64_t sub_100069638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_100008E84(&qword_1001767E0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ISO18013SessionData(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000696C0, 0, 0);
}

uint64_t sub_1000696C0()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v1 + 64) & 1) == 0
    && (*(_QWORD *)(v1 + 32) == 1 ? (v2 = *(_QWORD *)(v1 + 24) == 1) : (v2 = 0), v2))
  {
    sub_100005A38(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v6);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v0 + 72) = v3;
    return swift_task_switch(sub_100069760, v3, 0);
  }
}

uint64_t sub_100069760()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;

  v1 = sub_10004686C(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v2;
  return swift_task_switch(sub_1000697E8, 0, 0);
}

uint64_t sub_1000697E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = type metadata accessor for ISO18013SessionData.Status(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_100005A38(v1, v2);
  ISO18013SessionData.init(data:status:)(v1, v2, v6);
  v8 = sub_100069FC0();
  v9 = sub_1000058C8(&qword_1001767E8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013SessionData, (uint64_t)&protocol conformance descriptor for ISO18013SessionData);
  v10 = dispatch thunk of CBOREncoder.encode<A>(_:)(v4, v5, v9);
  v12 = v11;
  v14 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  sub_100005AB0(v14, v13);
  swift_release(v8);
  v15 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v15);
  if (v3)
    return (*(uint64_t (**)(void))(v0 + 8))();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v12);
}

uint64_t sub_10006995C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v20;

  *(_BYTE *)(v8 + 154) = v20;
  *(_BYTE *)(v8 + 153) = a8;
  *(_BYTE *)(v8 + 152) = a7;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = ((uint64_t (*)(_QWORD))type metadata accessor for NWInterface.InterfaceType)(0);
  *(_QWORD *)(v8 + 40) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = ((uint64_t (*)(_QWORD))type metadata accessor for NWPath.Status)(0);
  *(_QWORD *)(v8 + 64) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 72) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 80) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 88) = swift_task_alloc(v13);
  v14 = sub_100008E84(&qword_100176930);
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = ((uint64_t (*)(_QWORD))type metadata accessor for NWPath)(0);
  *(_QWORD *)(v8 + 104) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 112) = v16;
  *(_QWORD *)(v8 + 120) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_100176938);
  *(_QWORD *)(v8 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176940) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 136) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 144) = swift_task_alloc(v18);
  return swift_task_switch(sub_100069AAC, 0, 0);
}

uint64_t sub_100069AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(uint64_t, uint64_t);
  unsigned int *v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);
  char v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v66;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = type metadata accessor for IDCSAnalytics.NetworkStatus(0);
  v63 = *(_QWORD *)(v6 - 8);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
  v65(v1, 1, 1, v6);
  v7 = type metadata accessor for IDCSAnalytics.ConnectionType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v9(v2, 1, 1, v7);
  type metadata accessor for NetworkMonitor(0);
  v10 = static NetworkMonitor.shared.getter();
  dispatch thunk of NetworkMonitor.currentPath.getter();
  swift_release(v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_1000150E8(*(_QWORD *)(v0 + 96), &qword_100176930);
  }
  else
  {
    v59 = v8;
    v60 = v9;
    v61 = v7;
    v11 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 56);
    v56 = *(_QWORD *)(v0 + 144);
    v57 = *(_QWORD *)(v0 + 48);
    v58 = *(_QWORD *)(v0 + 40);
    v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    NWPath.status.getter(v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v13, enum case for NWPath.Status.satisfied(_:), v15);
    v18 = static NWPath.Status.== infix(_:_:)(v12, v13);
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    v19(v12, v15);
    sub_1000150E8(v56, &qword_100176940);
    v20 = (unsigned int *)&enum case for IDCSAnalytics.NetworkStatus.online(_:);
    if ((v18 & 1) == 0)
      v20 = (unsigned int *)&enum case for IDCSAnalytics.NetworkStatus.offline(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v11, *v20, v6);
    v65(v11, 0, 1, v6);
    sub_10002E94C(v11, v56, &qword_100176940);
    v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(v57 + 104);
    v21(v16, enum case for NWInterface.InterfaceType.cellular(_:), v58);
    v22 = NWPath.usesInterfaceType(_:)(v16);
    v23 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v23(v16, v58);
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 112);
    if ((v22 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(v27 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
      sub_1000150E8(v25, &qword_100176938);
      v28 = enum case for IDCSAnalytics.ConnectionType.cellular(_:);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104);
      v30 = v25;
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 56);
      v32 = *(_QWORD *)(v0 + 40);
      v21(v31, enum case for NWInterface.InterfaceType.wifi(_:), v32);
      v33 = NWPath.usesInterfaceType(_:)(v31);
      v23(v31, v32);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
      sub_1000150E8(v25, &qword_100176938);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104);
      v30 = *(_QWORD *)(v0 + 128);
      if ((v33 & 1) != 0)
        v34 = (unsigned int *)&enum case for IDCSAnalytics.ConnectionType.wifi(_:);
      else
        v34 = (unsigned int *)&enum case for IDCSAnalytics.ConnectionType.other(_:);
      v28 = *v34;
    }
    v29(v30, v28, v61);
    v60(*(_QWORD *)(v0 + 128), 0, 1, v61);
  }
  v35 = *(_QWORD *)(v0 + 24);
  if (v35 >> 60 != 15)
  {
    v36 = *(_QWORD *)(v0 + 16);
    type metadata accessor for SecAccessControl(0);
    sub_100005A38(v36, v35);
    v37 = static SecAccessControlRef.fromData(_:)(v36, v35);
    v38 = *(_QWORD *)(v0 + 144);
    v39 = (void *)v37;
    v66 = *(_QWORD *)(v0 + 24);
    v62 = *(_QWORD *)(v0 + 128);
    v64 = *(_QWORD *)(v0 + 16);
    v40 = *(unsigned __int8 *)(v0 + 152);
    v41 = *(unsigned __int8 *)(v0 + 153);
    v42 = *(unsigned __int8 *)(v0 + 154);
    v43 = SecAccessControlRef.isBiometricAuth.getter();
    type metadata accessor for IDCSAnalytics(0);
    v44 = IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.description.getter();
    v46 = v45;
    static IDCSAnalytics.sendPhysicalPresentmentEvent(networkStatus:connectionType:presentmentResult:biometricAuthMethod:terminalAuthPerformed:portraitWasRequested:isAppleReader:)(v38, v62, v44, v45, v43 & 1, v40, v41, v42);
    swift_bridgeObjectRelease(v46);

    sub_10000B164(v64, v66);
  }
  v47 = *(_QWORD *)(v0 + 136);
  v48 = *(_QWORD *)(v0 + 144);
  v50 = *(_QWORD *)(v0 + 120);
  v49 = *(_QWORD *)(v0 + 128);
  v52 = *(_QWORD *)(v0 + 88);
  v51 = *(_QWORD *)(v0 + 96);
  v53 = *(_QWORD *)(v0 + 80);
  v54 = *(_QWORD *)(v0 + 56);
  sub_1000150E8(v49, &qword_100176938);
  sub_1000150E8(v48, &qword_100176940);
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069F9C()
{
  return sub_100069FE4((uint64_t (*)(_QWORD))&type metadata accessor for CBORDecoder, (uint64_t (*)(void))&CBORDecoder.init(), (void (*)(char *))&CBORDecoder.presentmentType.setter, (void (*)(char *))&CBORDecoder.codingKeyFormat.setter);
}

uint64_t sub_100069FC0()
{
  return sub_100069FE4((uint64_t (*)(_QWORD))&type metadata accessor for CBOREncoder, (uint64_t (*)(void))&CBOREncoder.init(), (void (*)(char *))&CBOREncoder.presentmentType.setter, (void (*)(char *))&CBOREncoder.codingKeyFormat.setter);
}

uint64_t sub_100069FE4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(void), void (*a3)(char *), void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  char *v26;
  uint64_t v28;
  char *v29;
  void (*v30)(char *);
  void (*v31)(char *);

  v30 = a4;
  v31 = a3;
  v7 = v4;
  v8 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v29 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  v17 = sub_100008E84(&qword_100175A80);
  __chkstk_darwin(v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = a2();
  v22 = *(_QWORD *)(v7 + 16);
  v23 = type metadata accessor for ISO18013PresentmentType(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (unsigned int *)&enum case for ISO18013PresentmentType.digital(_:);
  if (v22 != 1)
    v25 = (unsigned int *)&enum case for ISO18013PresentmentType.physical(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v19, *v25, v23);
  type metadata accessor for ISO18013PresentmentType(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v19, 0, 1, v23);
  v31(v19);
  if ((*(_BYTE *)(v7 + 64) & 1) == 0)
  {
    DCPresentmentMessageEncodingFormat.codingKeyFormat.getter(*(_QWORD *)(v7 + 56), (uint64_t)v14);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v14, v8);
    v26 = v29;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v29, v16, v8);
    v30(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  }
  return v21;
}

uint64_t sub_10006A1CC()
{
  _QWORD *v0;

  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  sub_10000CE40(v0 + 12);
  swift_release(v0[17]);
  swift_release(v0[18]);
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for PresentmentResponseBuilder()
{
  return objc_opt_self(_TtC7idcredd26PresentmentResponseBuilder);
}

unint64_t sub_10006A238()
{
  unint64_t result;

  result = qword_100176808;
  if (!qword_100176808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100176808);
  }
  return result;
}

unint64_t sub_10006A27C()
{
  unint64_t result;

  result = qword_100176810;
  if (!qword_100176810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100176810);
  }
  return result;
}

uint64_t sub_10006A2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10006A364, 0, 0);
}

uint64_t sub_10006A364()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_1000058C8(&qword_100176900, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_1000058C8(&qword_100176908, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_10006A47C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_10006A47C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_10006A528, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10006A528()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006A564(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_10006A5E4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000935C;
  return v8(a1, v5);
}

uint64_t sub_10006A654()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 37, 0xD000000000000023);
}

uint64_t sub_10006A688()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 31, 0xD00000000000001DLL);
}

unint64_t sub_10006A6BC()
{
  return sub_100068A74();
}

uint64_t sub_10006A6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v22 - v10;
  v12 = defaultLogger()(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "PresentmentResponseBuilder determineElementstoPresent", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v17 = v16(v11, v4);
  v18 = defaultLogger()(v17);
  __chkstk_darwin(v18);
  *(&v22 - 2) = a2;
  Logger.sensitive(_:)(sub_10006CAC8, &v22 - 4);
  v16(v8, v4);
  if (a2)
  {
    v19 = sub_10007AEA0(a2, a1);
    a1 = v19;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  v20 = defaultLogger()(v19);
  __chkstk_darwin(v20);
  *(&v22 - 2) = a1;
  Logger.sensitive(_:)(sub_10006CAD0, &v22 - 4);
  v16(v8, v4);
  return a1;
}

uint64_t sub_10006A8AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[3] = a1;
  v2 = sub_100008E84(&qword_100176910);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IdentityReaderAuthenticator(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v7);
  v1[11] = swift_task_alloc(v7);
  v1[12] = swift_task_alloc(v7);
  v1[13] = swift_task_alloc(v7);
  v1[14] = swift_task_alloc(v7);
  return swift_task_switch(sub_10006A98C, 0, 0);
}

uint64_t sub_10006A98C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Checking if the credential is valid after network check", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 32);

  v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 120) = v13;
  v13(v6, v7);
  sub_10002E908(v12, v11, &qword_100176910);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    v14 = sub_1000150E8(*(_QWORD *)(v1 + 32), &qword_100176910);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 56);
    v16 = *(_QWORD *)(v1 + 40);
    sub_100041230(*(_QWORD *)(v1 + 32), v15, type metadata accessor for IdentityReaderAuthenticator);
    v17 = *(_QWORD *)(v15 + *(int *)(v16 + 32));
    *(_QWORD *)(v1 + 128) = v17;
    if (v17)
    {
      v18 = async function pointer to Task.value.getter[1];
      swift_retain(v17);
      v19 = (_QWORD *)swift_task_alloc(v18);
      *(_QWORD *)(v1 + 136) = v19;
      v20 = sub_100008E84(&qword_100174890);
      *v19 = v1;
      v19[1] = sub_10006AC38;
      return Task.value.getter(v1 + 152, v17, &type metadata for ServerRevocationResponse, v20, &protocol self-conformance witness table for Error);
    }
    v14 = sub_10006CA8C(*(_QWORD *)(v1 + 56), type metadata accessor for IdentityReaderAuthenticator);
  }
  v22 = defaultLogger()(v14);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "No server promise, meaning this passed using the cache, so success", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }
  v26 = *(_QWORD *)(v1 + 88);
  v27 = *(_QWORD *)(v1 + 64);

  v13(v26, v27);
  v28 = *(_QWORD *)(v1 + 104);
  v30 = *(_QWORD *)(v1 + 88);
  v29 = *(_QWORD *)(v1 + 96);
  v31 = *(_QWORD *)(v1 + 80);
  v32 = *(_QWORD *)(v1 + 56);
  v33 = *(_QWORD *)(v1 + 32);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
}

uint64_t sub_10006AC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10006AE64;
  else
    v3 = sub_10006AC9C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006AC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)(v1 + 152) == 1)
  {
    v2 = defaultLogger()(a1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "After online revocation checking, the certificate might still be revoked", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 120);
    v7 = *(_QWORD *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 64);

    a1 = v6(v7, v8);
  }
  v9 = defaultLogger()(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "No errors were thrown during revocation checking, there is a valid credential", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
  v13 = *(_QWORD *)(v1 + 128);
  v15 = *(_QWORD *)(v1 + 96);
  v17 = *(_QWORD *)(v1 + 56);
  v16 = *(_QWORD *)(v1 + 64);

  swift_release(v13);
  v14(v15, v16);
  sub_10006CA8C(v17, type metadata accessor for IdentityReaderAuthenticator);
  v18 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 88);
  v19 = *(_QWORD *)(v1 + 96);
  v21 = *(_QWORD *)(v1 + 80);
  v22 = *(_QWORD *)(v1 + 56);
  v23 = *(_QWORD *)(v1 + 32);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
}

uint64_t sub_10006AE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 144);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 144);
    v7 = *(_QWORD *)(v1 + 128);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v1 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Validating server promise failed with reason %@", v8, 0xCu);
    v11 = sub_100008E84(&qword_100175350);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release(v7);

  }
  else
  {
    v12 = *(_QWORD *)(v1 + 144);
    v13 = *(_QWORD *)(v1 + 128);

    swift_release(v13);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
  v15 = *(_QWORD *)(v1 + 80);
  v17 = *(_QWORD *)(v1 + 56);
  v16 = *(_QWORD *)(v1 + 64);
  swift_errorRelease(*(_QWORD *)(v1 + 144));
  v14(v15, v16);
  sub_10006CA8C(v17, type metadata accessor for IdentityReaderAuthenticator);
  v18 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 88);
  v19 = *(_QWORD *)(v1 + 96);
  v21 = *(_QWORD *)(v1 + 80);
  v22 = *(_QWORD *)(v1 + 56);
  v23 = *(_QWORD *)(v1 + 32);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

unint64_t sub_10006B078(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  unint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;

  v2 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnyCodable(0);
  v127 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v122 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v121 = (char *)&v105 - v8;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v105 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v105 - v17;
  v19 = objc_msgSend(a1, "deviceNamespaces");
  if (!v19)
  {
    v98 = defaultLogger()(0);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "No device namespaces were provided", v101, 2u);
      swift_slowDealloc(v101, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return sub_10003ED34((uint64_t)_swiftEmptyArrayStorage);
  }
  v20 = v19;
  v21 = sub_100008E84(&qword_100177C20);
  v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for String, v21, &protocol witness table for String);

  v24 = defaultLogger()(v23);
  __chkstk_darwin(v24);
  *(&v105 - 2) = v22;
  Logger.sensitive(_:)(sub_10006BC30, &v105 - 4);
  v117 = *(void (**)(char *, uint64_t))(v10 + 8);
  v117(v18, v9);
  v25 = (_QWORD *)sub_10003ED34((uint64_t)_swiftEmptyArrayStorage);
  v27 = 0;
  v28 = *(_QWORD *)(v22 + 64);
  v107 = v22 + 64;
  v130 = (uint64_t)v25;
  v109 = v22;
  v29 = 1 << *(_BYTE *)(v22 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v108 = (unint64_t)(v29 + 63) >> 6;
  *(_QWORD *)&v26 = 136315394;
  v113 = v26;
  v112 = (char *)&type metadata for Any + 8;
  v119 = v4;
  v120 = v5;
  v106 = v18;
  v115 = v9;
  v116 = v16;
  while (1)
  {
    if (v31)
    {
      v111 = (v31 - 1) & v31;
      v35 = __clz(__rbit64(v31)) | (v27 << 6);
    }
    else
    {
      v36 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_73;
      if (v36 >= v108)
      {
LABEL_67:
        v103 = swift_release(v109);
        v104 = defaultLogger()(v103);
        __chkstk_darwin(v104);
        *(&v105 - 2) = (uint64_t)&v130;
        Logger.sensitive(_:)(sub_10006BC38, &v105 - 4);
        v117(v18, v9);
        return v130;
      }
      v37 = *(_QWORD *)(v107 + 8 * v36);
      ++v27;
      if (!v37)
      {
        v27 = v36 + 1;
        if (v36 + 1 >= v108)
          goto LABEL_67;
        v37 = *(_QWORD *)(v107 + 8 * v27);
        if (!v37)
        {
          v27 = v36 + 2;
          if (v36 + 2 >= v108)
            goto LABEL_67;
          v37 = *(_QWORD *)(v107 + 8 * v27);
          if (!v37)
          {
            v38 = v36 + 3;
            if (v38 >= v108)
              goto LABEL_67;
            v37 = *(_QWORD *)(v107 + 8 * v38);
            if (!v37)
            {
              while (1)
              {
                v27 = v38 + 1;
                if (__OFADD__(v38, 1))
                  goto LABEL_74;
                if (v27 >= v108)
                  goto LABEL_67;
                v37 = *(_QWORD *)(v107 + 8 * v27);
                ++v38;
                if (v37)
                  goto LABEL_22;
              }
            }
            v27 = v38;
          }
        }
      }
LABEL_22:
      v111 = (v37 - 1) & v37;
      v35 = __clz(__rbit64(v37)) + (v27 << 6);
    }
    v39 = *(_QWORD *)(v109 + 56);
    v40 = (uint64_t *)(*(_QWORD *)(v109 + 48) + 16 * v35);
    v41 = v40[1];
    v114 = *v40;
    v42 = *(_QWORD *)(v39 + 8 * v35);
    v118 = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    v126 = sub_10003EB94((uint64_t)_swiftEmptyArrayStorage);
    if ((unint64_t)v42 >> 62)
      break;
    v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v43)
      goto LABEL_25;
LABEL_52:
    swift_bridgeObjectRelease(v42);
LABEL_53:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    v85 = v130;
    v129 = (_QWORD *)v130;
    v87 = sub_1000FBC04(v114, v118);
    v88 = *(_QWORD *)(v85 + 16);
    v89 = (v86 & 1) == 0;
    v90 = v88 + v89;
    if (__OFADD__(v88, v89))
      goto LABEL_71;
    v91 = v86;
    if (*(_QWORD *)(v85 + 24) >= v90)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v129;
        if ((v86 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_10007E628();
        v25 = v129;
        if ((v91 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_10007CBD8(v90, isUniquelyReferenced_nonNull_native);
      v92 = sub_1000FBC04(v114, v118);
      if ((v91 & 1) != (v93 & 1))
        goto LABEL_75;
      v87 = v92;
      v25 = v129;
      if ((v91 & 1) != 0)
      {
LABEL_5:
        v32 = v25[7];
        v33 = 8 * v87;
        swift_bridgeObjectRelease(*(_QWORD *)(v32 + v33));
        *(_QWORD *)(v32 + v33) = v126;
        v34 = v118;
        goto LABEL_6;
      }
    }
    v25[(v87 >> 6) + 8] |= 1 << v87;
    v94 = (_QWORD *)(v25[6] + 16 * v87);
    v95 = v118;
    *v94 = v114;
    v94[1] = v95;
    *(_QWORD *)(v25[7] + 8 * v87) = v126;
    v96 = v25[2];
    v81 = __OFADD__(v96, 1);
    v97 = v96 + 1;
    if (v81)
      goto LABEL_72;
    v25[2] = v97;
    swift_bridgeObjectRetain(v95);
LABEL_6:
    v130 = (uint64_t)v25;
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = v120;
    v31 = v111;
  }
  if (v42 < 0)
    v83 = v42;
  else
    v83 = v42 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v42);
  v43 = _CocoaArrayWrapper.endIndex.getter(v83);
  swift_bridgeObjectRelease(v42);
  if (!v43)
    goto LABEL_52;
LABEL_25:
  v110 = v27;
  v124 = v42;
  v125 = v42 & 0xC000000000000001;
  v44 = 4;
  v45 = v127;
  v123 = v43;
  while (1)
  {
    v47 = v125
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44 - 4, v42)
        : *(id *)(v42 + 8 * v44);
    v48 = v47;
    if (__OFADD__(v44 - 4, 1))
      break;
    v128 = v44 - 3;
    v49 = objc_msgSend(v47, "elementIdentifier");
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    sub_10005442C((uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v4, 1, v5) == 1)
    {
      v53 = sub_1000150E8((uint64_t)v4, &qword_1001752C8);
      v54 = v116;
      defaultLogger()(v53);
      v55 = v118;
      swift_bridgeObjectRetain_n(v118, 2);
      swift_bridgeObjectRetain(v52);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(22, -1);
        v60 = swift_slowAlloc(64, -1);
        v129 = (_QWORD *)v60;
        *(_DWORD *)v59 = v113;
        swift_bridgeObjectRetain(v52);
        *(_QWORD *)(v59 + 4) = sub_10003FA80(v50, v52, (uint64_t *)&v129);
        swift_bridgeObjectRelease_n(v52, 3);
        *(_WORD *)(v59 + 12) = 2080;
        swift_bridgeObjectRetain(v55);
        *(_QWORD *)(v59 + 14) = sub_10003FA80(v114, v55, (uint64_t *)&v129);
        swift_bridgeObjectRelease_n(v55, 3);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Could not convert element %s in namespace %s to codable value", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v60, 2, v112);
        v61 = v60;
        v4 = v119;
        swift_slowDealloc(v61, -1, -1);
        v62 = v59;
        v5 = v120;
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v55, 2);
        swift_bridgeObjectRelease_n(v52, 2);
      }

      v9 = v115;
      v117(v54, v115);
      v46 = v123;
      v42 = v124;
      v45 = v127;
    }
    else
    {
      v63 = v45;
      v64 = v9;
      v65 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
      v66 = v121;
      v65(v121, v4, v5);
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v122, v66, v5);
      v67 = v126;
      v68 = swift_isUniquelyReferenced_nonNull_native(v126);
      v129 = (_QWORD *)v67;
      v70 = sub_1000FBC04(v50, v52);
      v71 = *(_QWORD *)(v67 + 16);
      v72 = (v69 & 1) == 0;
      v73 = v71 + v72;
      if (__OFADD__(v71, v72))
        goto LABEL_69;
      v74 = v69;
      if (*(_QWORD *)(v67 + 24) >= v73)
      {
        if ((v68 & 1) == 0)
          sub_10007E3CC();
      }
      else
      {
        sub_10007C870(v73, v68);
        v75 = sub_1000FBC04(v50, v52);
        if ((v74 & 1) != (v76 & 1))
          goto LABEL_75;
        v70 = v75;
      }
      v4 = v119;
      v77 = v129;
      if ((v74 & 1) != 0)
      {
        v78 = v127;
        v5 = v120;
        (*(void (**)(unint64_t, char *, uint64_t))(v127 + 40))(v129[7] + *(_QWORD *)(v127 + 72) * v70, v122, v120);
      }
      else
      {
        v129[(v70 >> 6) + 8] |= 1 << v70;
        v79 = (uint64_t *)(v77[6] + 16 * v70);
        *v79 = v50;
        v79[1] = v52;
        v5 = v120;
        v65((char *)(v77[7] + *(_QWORD *)(v127 + 72) * v70), v122, v120);
        v80 = v77[2];
        v81 = __OFADD__(v80, 1);
        v82 = v80 + 1;
        if (v81)
          goto LABEL_70;
        v77[2] = v82;
        swift_bridgeObjectRetain(v52);
        v78 = v127;
      }
      v126 = (unint64_t)v129;

      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v121, v5);
      v9 = v64;
      v45 = v78;
      v46 = v123;
      v42 = v124;
    }
    ++v44;
    if (v128 == v46)
    {
      swift_bridgeObjectRelease(v42);
      v25 = (_QWORD *)v130;
      v18 = v106;
      v27 = v110;
      goto LABEL_53;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10006BAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100176850;
  if (!qword_100176850)
  {
    v1 = sub_100016404(&qword_100176858);
    sub_1000058C8(&qword_100176860, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100176850);
  }
  return result;
}

uint64_t sub_10006BB38(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100016404(&qword_100176840);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006BBAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100176870;
  if (!qword_100176870)
  {
    v1 = sub_100016404(&qword_100176858);
    sub_1000058C8(&qword_100176878, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100176870);
  }
  return result;
}

unint64_t sub_10006BC30()
{
  uint64_t v0;

  return sub_10006463C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10006BC38()
{
  uint64_t v0;

  return sub_1000646D8(*(uint64_t **)(v0 + 16));
}

uint64_t sub_10006BC40(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10006BC84()
{
  return sub_100062630();
}

uint64_t sub_10006BC8C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  id v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  v92 = a2;
  v89 = a1;
  v94 = type metadata accessor for DIPError.Code(0);
  v95 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DigitalPresentmentResponseCryptor(0);
  v86 = *(_QWORD *)(v6 - 8);
  v87 = v6;
  __chkstk_darwin(v6);
  v90 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001768B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)type metadata accessor for ISO18013AppleSessionTranscript(0);
  v12 = *(v11 - 1);
  v13 = __chkstk_darwin(v11);
  v88 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v93 = (char *)&v81 - v15;
  v16 = sub_100008E84(&qword_100176830);
  __chkstk_darwin(v16);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ISO18013SessionTranscript(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a3;
  v25 = v24;
  sub_10002E908(v23, (uint64_t)v18, &qword_100176830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v25) == 1)
  {
    sub_1000150E8((uint64_t)v18, &qword_100176830);
    v26 = v95;
    v27 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v5, enum case for DIPError.Code.idcsInvalidAppleSessionTranscript(_:), v94);
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100131F20, 0, v5, 0, v28, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 784);
    swift_willThrow(v32);
LABEL_10:
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v5, enum case for DIPError.Code.internalError(_:), v27);
    swift_errorRetain(v31);
    v57 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v58 = type metadata accessor for DIPError(0);
    v59 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v58, v59, 0, 0);
    v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v5, 0, v57, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 813);
    swift_willThrow(v60);
    swift_errorRelease(v31);
    return v57;
  }
  v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v25);
  ISO18013SessionTranscript.appleSessionTranscript.getter(v33);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000150E8((uint64_t)v10, &qword_1001768B0);
    v34 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v5, enum case for DIPError.Code.idcsInvalidAppleSessionTranscript(_:), v94);
    v93 = (char *)sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v35, v36, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x8000000100131FA0, 0, v5, 0, v93, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 788);
    swift_willThrow(v37);
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v27 = v34;
    v39 = v22;
    v26 = v95;
    v38(v39, v25);
    goto LABEL_10;
  }
  v84 = v22;
  v85 = v20;
  v83 = v25;
  v40 = v93;
  (*(void (**)(char *, char *, _QWORD *))(v12 + 32))(v93, v10, v11);
  v41 = objc_msgSend(v92, "responseEncryptionCertificateChain");
  v42 = v11;
  if (!v41)
  {
    v52 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v5, enum case for DIPError.Code.idcsMissingResponseEncryptionCertificate(_:), v94);
    v92 = (id)sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v53 = type metadata accessor for DIPError(0);
    v54 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v53, v54, 0, 0);
    v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x8000000100131FF0, 0, v5, 0, v92, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 792);
    swift_willThrow(v55);
    v56 = v40;
    v27 = v52;
    (*(void (**)(char *, _QWORD *))(v12 + 8))(v56, v42);
    v26 = v95;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v83);
    goto LABEL_10;
  }
  v43 = v41;
  v82 = v12;
  v92 = v11;
  v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for Data);

  v45 = v91;
  v46 = decodeCertificateChain(fromDER:)(v44);
  v27 = v94;
  if (v45)
  {
    swift_bridgeObjectRelease(v44);
    v47 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v5, enum case for DIPError.Code.idcsMisformattedResponseEncryptionCertificate(_:), v27);
    v48 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v49 = type metadata accessor for DIPError(0);
    v50 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v49, v50, 0, 0);
    v51 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100132020, 0, v5, 1, v48, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 799);
    swift_willThrow(v51);
    swift_errorRelease(v45);
    (*(void (**)(char *, id))(v82 + 8))(v93, v92);
    v26 = v47;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v83);
    goto LABEL_10;
  }
  v62 = v46;
  v63 = v94;
  result = swift_bridgeObjectRelease(v44);
  v64 = v84;
  v65 = v85;
  if (!((unint64_t)v62 >> 62))
  {
    v66 = v90;
    if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
LABEL_22:
    swift_bridgeObjectRelease(v62);
    v76 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v5, enum case for DIPError.Code.idcsMissingResponseEncryptionCertificate(_:), v63);
    v91 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v77 = type metadata accessor for DIPError(0);
    v78 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v77, v78, 0, 0);
    v79 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000046, 0x8000000100132060, 0, v5, 0, v91, 0xD000000000000062, 0x8000000100131930, 0xD000000000000043, 0x8000000100131F50, 805);
    swift_willThrow(v79);
    (*(void (**)(char *, id))(v82 + 8))(v93, v92);
    v80 = *(void (**)(char *, uint64_t))(v65 + 8);
    v27 = v63;
    v26 = v76;
    v80(v64, v83);
    goto LABEL_10;
  }
  if (v62 < 0)
    v74 = v62;
  else
    v74 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v62);
  v75 = _CocoaArrayWrapper.endIndex.getter(v74);
  result = swift_bridgeObjectRelease(v62);
  v66 = v90;
  if (!v75)
    goto LABEL_22;
LABEL_14:
  if ((v62 & 0xC000000000000001) != 0)
  {
    v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v62);
    v67 = v93;
    goto LABEL_17;
  }
  v67 = v93;
  if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v68 = *(id *)(v62 + 32);
LABEL_17:
    swift_bridgeObjectRelease(v62);
    type metadata accessor for SecTrust(0);
    v69 = static SecTrustRef.newFromUnverifiedCertificate(_:)(v68);
    v70 = v82;
    v71 = v88;
    v72 = (void *)v69;
    (*(void (**)(char *, char *, id))(v82 + 16))(v88, v67, v92);
    DigitalPresentmentResponseCryptor.init(sessionTranscript:)(v71);
    v73 = v67;
    v57 = DigitalPresentmentResponseCryptor.encrypt(_:to:)(v89, v72);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
    (*(void (**)(char *, id))(v70 + 8))(v73, v92);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v83);
    return v57;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PresentmentResponseBuilder.DBResults(uint64_t a1)
{
  uint64_t result;

  result = qword_1001769A0;
  if (!qword_1001769A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PresentmentResponseBuilder.DBResults);
  return result;
}

uint64_t sub_10006C7CC()
{
  _QWORD *v0;
  unint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  sub_100005AB0(v0[4], v0[5]);
  sub_10000CE40(v0 + 6);
  v1 = v0[12];
  if (v1 >> 60 != 15)
    sub_100005AB0(v0[11], v1);
  sub_100005AB0(v0[13], v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 145, 7);
}

uint64_t sub_10006C830(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v5 = v2[3];
  v11 = v2[2];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[11];
  v9 = (_QWORD *)swift_task_alloc(dword_1001768BC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100016474;
  return sub_10005E5A4(a1, a2, v11, v5, v6, v7, (uint64_t)(v2 + 6), v8);
}

uint64_t sub_10006C900()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006C924(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001768CC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000935C;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001768C8 + dword_1001768C8))(a1, a2, v6);
}

uint64_t sub_10006C9A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  sub_100005AB0(v0[5], v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10006C9D8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100060E58(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

_QWORD *sub_10006C9F8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  swift_bridgeObjectRelease(a1[2]);
  sub_100005AB0(v2, v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10006CA58(uint64_t a1)
{
  destroy for CredentialDecryptionKeyFinder();
  return a1;
}

uint64_t sub_10006CA8C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10006CAC8()
{
  uint64_t v0;

  return sub_1000617A0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10006CAD0()
{
  uint64_t v0;

  return sub_100061858(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006CAD8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2), v5);
  v6 = *((_QWORD *)v0 + 5);
  if (v6 >> 60 != 15)
    sub_100005AB0(*((_QWORD *)v0 + 4), v6);
  v7 = (v3 + 48) & ~v3;
  v8 = v4 + v7 + 3;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v7], v1);
  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_10006CB68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (char *)v1 + *(_QWORD *)(v4 + 64) + v5;
  v12 = v11[1];
  v13 = *v11;
  v14 = (_QWORD *)swift_task_alloc(dword_100176924);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100016474;
  return sub_10006995C(a1, v6, v7, v8, v9, v10, v13, v12);
}

uint64_t sub_10006CC34()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_10006CC68(uint64_t a1)
{
  uint64_t v1;

  sub_100058D1C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_10006CC88(_QWORD *a1)
{
  uint64_t v1;

  return sub_100039644(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t destroy for PresentmentResponseBuilder.DBResult(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  sub_100005AB0(a1[3], a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  result = a1[11];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_100005AB0(a1[12], a1[13]);
  }
  return result;
}

uint64_t initializeWithCopy for PresentmentResponseBuilder.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  sub_100005A38(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    v12 = *(_QWORD *)(a2 + 96);
    v11 = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain(v10);
    sub_100005A38(v12, v11);
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v11;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
  }
  return a1;
}

_QWORD *assignWithCopy for PresentmentResponseBuilder.DBResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a2[4];
  sub_100005A38(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  a1[3] = v6;
  a1[4] = v7;
  sub_100005AB0(v8, v9);
  a1[5] = a2[5];
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a1 + 10;
  v15 = a2 + 10;
  v16 = a1[11];
  v17 = a2[11];
  if (v16)
  {
    if (v17)
    {
      a1[10] = a2[10];
      v18 = a2[11];
      a1[11] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v16);
      v20 = a2[12];
      v19 = a2[13];
      sub_100005A38(v20, v19);
      v21 = a1[12];
      v22 = a1[13];
      a1[12] = v20;
      a1[13] = v19;
      sub_100005AB0(v21, v22);
    }
    else
    {
      sub_100052A9C(a1 + 10);
      v26 = *((_OWORD *)a2 + 6);
      *v14 = *v15;
      *((_OWORD *)a1 + 6) = v26;
    }
  }
  else if (v17)
  {
    a1[10] = a2[10];
    v23 = a2[11];
    a1[11] = v23;
    v25 = a2[12];
    v24 = a2[13];
    swift_bridgeObjectRetain(v23);
    sub_100005A38(v25, v24);
    a1[12] = v25;
    a1[13] = v24;
  }
  else
  {
    v27 = *((_OWORD *)a2 + 6);
    *v14 = *v15;
    *((_OWORD *)a1 + 6) = v27;
  }
  return a1;
}

__n128 initializeWithTake for PresentmentResponseBuilder.DBResult(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for PresentmentResponseBuilder.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100005AB0(v5, v6);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 88);
  if (!v10)
    goto LABEL_5;
  v11 = *(_QWORD *)(a2 + 88);
  if (!v11)
  {
    sub_100052A9C((_QWORD *)(a1 + 80));
LABEL_5:
    v14 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v14;
    return a1;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_100005AB0(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentResponseBuilder.DBResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentResponseBuilder.DBResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentResponseBuilder.DBResult()
{
  return &type metadata for PresentmentResponseBuilder.DBResult;
}

uint64_t *sub_10006D0AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for COSE_Sign1(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100008E84(&qword_100176828);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    v14 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v14;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_10006D1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for COSE_Sign1(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

char *sub_10006D21C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = *(_QWORD *)&a2[v10];
  *(_QWORD *)&a1[v10] = v12;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

char *sub_10006D2EC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = *(int *)(a3 + 24);
  v16 = *(_QWORD *)&a1[v15];
  v17 = *(_QWORD *)&a2[v15];
  *(_QWORD *)&a1[v15] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  return a1;
}

char *sub_10006D420(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  return a1;
}

char *sub_10006D4E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 24);
  v15 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10006D608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D614);
}

uint64_t sub_10006D614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100008E84(&qword_100176828);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10006D6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D6AC);
}

uint64_t sub_10006D6AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008E84(&qword_100176828);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_10006D728(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10006D79C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = "\b";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_10006D79C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001769B0)
  {
    v2 = type metadata accessor for COSE_Sign1(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001769B0);
  }
}

uint64_t sub_10006D800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost.Config(0);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost(0);
  v3[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[11] = v8;
  v3[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006D8AC, 0, 0);
}

uint64_t sub_10006D8AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = v0[9];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  static IDCSSignposts.consistencyCheckTotal.getter();
  DIPSignpost.init(_:)(v1);
  v5 = (_QWORD *)swift_allocObject(&unk_1001694A0, 40, 7);
  v0[13] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v6 = swift_allocObject(&unk_1001694C8, 32, 7);
  v0[14] = v6;
  *(_QWORD *)(v6 + 16) = &unk_1001769F8;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[15] = v8;
  type metadata accessor for DCCredentialCompletenessResult(0);
  *v8 = v0;
  v8[1] = sub_10006D9C4;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 2, &unk_100176A08, v6, v9);
}

uint64_t sub_10006D9C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006DAC4;
  }
  else
  {
    v5 = v2[13];
    swift_release(v2[14]);
    swift_release(v5);
    v2[17] = v2[2];
    v4 = sub_10006DA40;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006DA40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10006DAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v1);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v10, 0xD000000000000066, 0x80000001001325A0, 0xD000000000000016, 0x8000000100132610, 70);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[16] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[17] = v7;
  v5[18] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006DCB0, 0, 0);
}

uint64_t sub_10006DCB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v1 = v0[17];
  v2 = v0[15];
  v14 = v0[16];
  v15 = v0[18];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[12];
  v6 = swift_allocObject(&unk_1001694F0, 24, 7);
  v0[19] = v6;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = (_QWORD *)swift_allocObject(&unk_100169518, 56, 7);
  v0[20] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v2;
  v7[5] = v5;
  v7[6] = v6;
  v8 = swift_allocObject(&unk_100169540, 32, 7);
  v0[21] = v8;
  *(_QWORD *)(v8 + 16) = sub_10006EC30;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  swift_retain(v4);
  swift_bridgeObjectRetain(v2);
  swift_retain(v5);
  swift_retain(v6);
  v10(v15, v9, v14);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[22] = v12;
  *v12 = v0;
  v12[1] = sub_10006DE04;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v0[18], sub_10003DE8C, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_10006DE04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  v5 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 144);
  v6 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 168);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_10006E03C;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 160);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_10006DEA8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10006DEA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = *(_QWORD *)(v0[13] + 112);
  v0[24] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_100176A14);
  v0[25] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10006DF08;
  return sub_10006ECB0(v0[14], v0[15], v1, v0[12]);
}

uint64_t sub_10006DF08(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10006E000;
  }
  else
  {
    *(_BYTE *)(v4 + 232) = a1 & 1;
    v6 = sub_10006DF80;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006DF80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if ((*(_BYTE *)(v0 + 232) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 152);
    swift_beginAccess(v1 + 16, v0 + 16, 1, 0);
    *(_QWORD *)(v1 + 16) |= 4uLL;
  }
  v2 = (_QWORD *)swift_task_alloc(dword_100176A1C);
  *(_QWORD *)(v0 + 216) = v2;
  *v2 = v0;
  v2[1] = sub_10006E080;
  return sub_10006FC2C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 96));
}

uint64_t sub_10006E000()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E03C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E080(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 216);
  *(_QWORD *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10006E1A0;
  }
  else
  {
    *(_BYTE *)(v4 + 233) = a1 & 1;
    v6 = sub_10006E0F8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006E0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if ((*(_BYTE *)(v0 + 233) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 152);
    swift_beginAccess(v1 + 16, v0 + 40, 1, 0);
    *(_QWORD *)(v1 + 16) |= 8uLL;
  }
  v2 = *(_QWORD *)(v0 + 152);
  swift_beginAccess(v2 + 16, v0 + 64, 1, 0);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    v3 = 1;
    *(_QWORD *)(*(_QWORD *)(v0 + 152) + 16) = 1;
  }
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(uint64_t **)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 152));
  *v5 = v3;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E1A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E1DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006E208(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1001769F4);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000935C;
  return sub_10006DC48(a1, a2, v6, v7, v8);
}

void sub_10006E284(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  char v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v10 = sub_1000093E8(a2, a3);
  if (!v5)
  {
    v11 = v10;
    v12 = sub_1000C5D54();
    v13 = sub_100070B08((unint64_t)v12, a2, a3, *(_QWORD *)(a1 + 112));
    v14 = (_QWORD *)(a5 + 16);
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      swift_beginAccess(v14, v20, 1, 0);
      *v14 |= 0x10uLL;
    }
    v15 = (unint64_t)objc_msgSend(v11, "state");
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15 == 2)
      {
LABEL_10:
        v17 = sub_1000C4E40();
        v18 = sub_1000724EC((uint64_t)v17, a2, (unint64_t)a3);
        swift_bridgeObjectRelease(v17);

        if ((v18 & 1) == 0)
        {
          swift_beginAccess(v14, v19, 1, 0);
          *v14 |= 2uLL;
        }
        return;
      }
      v16 = (unint64_t)objc_msgSend(v11, "state");
      if ((v16 & 0x8000000000000000) == 0)
      {
        if (v16 != 3)
        {

          return;
        }
        goto LABEL_10;
      }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
}

void sub_10006E43C(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void)@<X4>, const char *a5@<X5>, const char *a6@<X6>, unint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  char *v33;
  uint64_t *v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82[3];
  uint64_t v83;
  uint64_t v84;

  v73 = a5;
  v74 = a6;
  v13 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v13 - 8);
  v78 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v75 = a1;
  v76 = (char *)v66 - v17;
  v18 = sub_10011A590(a1, (void *)a2);
  if (!v7)
  {
    v19 = (void *)v18;
    if (v18)
    {
      v20 = a4();

      v66[1] = 0;
      if ((unint64_t)v20 >> 62)
        goto LABEL_36;
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (v21)
      {
        v81 = (uint64_t *)(a3 + 16);
        v71 = v16;
        v72 = v20 & 0xC000000000000001;
        v22 = 4;
        v69 = a2;
        v70 = a7;
        v67 = v21;
        v68 = v20;
        while (1)
        {
          v25 = v72
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v20)
              : *(id *)(v20 + 8 * v22);
          v26 = v25;
          a3 = v22 - 3;
          if (__OFADD__(v22 - 4, 1))
            break;
          v27 = objc_msgSend(v25, "identifier");
          if (!v27)
          {
            v50 = swift_bridgeObjectRelease(v20);
            v51 = v76;
            defaultLogger()(v50);
            v52 = swift_bridgeObjectRetain_n(a2, 2);
            v53 = Logger.logObject.getter(v52);
            v54 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v53, v54))
            {
              v55 = (uint8_t *)swift_slowAlloc(12, -1);
              v56 = v26;
              v57 = swift_slowAlloc(32, -1);
              v82[0] = v57;
              *(_DWORD *)v55 = 136315138;
              swift_bridgeObjectRetain(a2);
              v83 = sub_10003FA80(v75, a2, v82);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 4);
              swift_bridgeObjectRelease_n(a2, 3);
              _os_log_impl((void *)&_mh_execute_header, v53, v54, v74, v55, 0xCu);
              swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v57, -1, -1);
              swift_slowDealloc(v55, -1, -1);

              (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
            }
            else
            {

              swift_bridgeObjectRelease_n(a2, 2);
              (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v78);
            }
            goto LABEL_32;
          }
          v28 = v27;
          v80 = v22 - 3;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          a3 = v30;

          v31 = objc_msgSend(v26, "publicKeyIdentifier");
          if (!v31)
          {
            swift_bridgeObjectRelease(v20);
            v58 = swift_bridgeObjectRelease(a3);
            defaultLogger()(v58);
            v59 = swift_bridgeObjectRetain_n(a2, 2);
            v60 = Logger.logObject.getter(v59);
            v61 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v60, v61))
            {
              v62 = (uint8_t *)swift_slowAlloc(12, -1);
              v63 = v26;
              v64 = swift_slowAlloc(32, -1);
              v82[0] = v64;
              *(_DWORD *)v62 = 136315138;
              swift_bridgeObjectRetain(a2);
              v83 = sub_10003FA80(v75, a2, v82);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v62 + 4);
              swift_bridgeObjectRelease_n(a2, 3);
              _os_log_impl((void *)&_mh_execute_header, v60, v61, v73, v62, 0xCu);
              swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v64, -1, -1);
              swift_slowDealloc(v62, -1, -1);

              (*(void (**)(char *, uint64_t))(v77 + 8))(v71, v78);
            }
            else
            {

              swift_bridgeObjectRelease_n(a2, 2);
              (*(void (**)(char *, uint64_t))(v77 + 8))(v16, v78);
            }
LABEL_32:
            v49 = 0;
            goto LABEL_41;
          }
          v32 = v31;
          v79 = v26;
          v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v16 = v33;

          v34 = v81;
          swift_beginAccess(v81, v82, 33, 0);
          sub_100005A38(v20, (unint64_t)v16);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
          v83 = *v34;
          v36 = v83;
          *v34 = 0x8000000000000000;
          a7 = sub_1000FBC04(v29, a3);
          v38 = *(_QWORD *)(v36 + 16);
          v39 = (v37 & 1) == 0;
          v40 = v38 + v39;
          if (__OFADD__(v38, v39))
            goto LABEL_34;
          a2 = v37;
          if (*(_QWORD *)(v36 + 24) >= v40)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v43 = (_QWORD *)v83;
              if ((v37 & 1) != 0)
                goto LABEL_6;
            }
            else
            {
              sub_10007E670();
              v43 = (_QWORD *)v83;
              if ((a2 & 1) != 0)
                goto LABEL_6;
            }
          }
          else
          {
            sub_10007CBE4(v40, isUniquelyReferenced_nonNull_native);
            v41 = sub_1000FBC04(v29, a3);
            if ((a2 & 1) != (v42 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return;
            }
            a7 = v41;
            v43 = (_QWORD *)v83;
            if ((a2 & 1) != 0)
            {
LABEL_6:
              v23 = v43[7] + 16 * a7;
              sub_10000B164(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
              *(_QWORD *)v23 = v20;
              *(_QWORD *)(v23 + 8) = v16;
              goto LABEL_7;
            }
          }
          v43[(a7 >> 6) + 8] |= 1 << a7;
          v44 = (uint64_t *)(v43[6] + 16 * a7);
          *v44 = v29;
          v44[1] = a3;
          v45 = (uint64_t *)(v43[7] + 16 * a7);
          *v45 = v20;
          v45[1] = (uint64_t)v16;
          v46 = v43[2];
          v47 = __OFADD__(v46, 1);
          v48 = v46 + 1;
          if (v47)
            goto LABEL_35;
          v43[2] = v48;
          swift_bridgeObjectRetain(a3);
LABEL_7:
          v24 = *v81;
          *v81 = (uint64_t)v43;
          swift_bridgeObjectRelease(a3);
          swift_bridgeObjectRelease(v24);
          swift_endAccess(v82);
          sub_100005AB0(v20, (unint64_t)v16);

          ++v22;
          v20 = v68;
          a2 = v69;
          a7 = v70;
          v16 = v71;
          if (v80 == v67)
            goto LABEL_40;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        if (v20 < 0)
          v65 = v20;
        else
          v65 = v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v21 = _CocoaArrayWrapper.endIndex.getter(v65);
        swift_bridgeObjectRelease(v20);
      }
LABEL_40:
      swift_bridgeObjectRelease(v20);
      v49 = 1;
    }
    else
    {
      v49 = 1;
    }
LABEL_41:
    *(_BYTE *)a7 = v49;
  }
}

uint64_t sub_10006EAA0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 24) = a1;
  v4 = *a2;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = sub_10006EB14;
  return v7(v3 + 16, v4);
}

uint64_t sub_10006EB14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10006EB64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100176A04);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100176A00 + dword_100176A00))(a1, a2, v6);
}

uint64_t sub_10006EBE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006EBF4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10006EC30()
{
  uint64_t v0;

  sub_10006E284(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10006EC50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_10006EC74@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_10006ECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v4[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v4[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006ED94, 0, 0);
}

uint64_t sub_10006ED94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = v0[19];
  v15 = v0[18];
  v3 = v0[16];
  v2 = v0[17];
  v4 = v0[11];
  v6 = v0[8];
  v5 = v0[9];
  static IDCSSignposts.consistencyCheckKeySigningKeys.getter();
  DIPSignpost.init(_:)(v1);
  v7 = swift_allocObject(&unk_100169568, 24, 7);
  v0[23] = v7;
  *(_QWORD *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  v8 = (_QWORD *)swift_allocObject(&unk_1001695E0, 48, 7);
  v0[24] = v8;
  v8[2] = v4;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100169608, 32, 7);
  v0[25] = v9;
  *(_QWORD *)(v9 + 16) = sub_100070A98;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v15, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[26] = v13;
  *v13 = v0;
  v13[1] = sub_10006EF08;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 38, v0[18], sub_100070A80, v9, &type metadata for Bool);
}

uint64_t sub_10006EF08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 144);
  v6 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 200));
    v7 = sub_10006F3AC;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 192);
    swift_release(*(_QWORD *)(v2 + 200));
    swift_release(v8);
    *(_BYTE *)(v2 + 305) = *(_BYTE *)(v2 + 304);
    v7 = sub_10006EFB8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10006EFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(unsigned __int8 *)(v0 + 305);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 184);
    swift_beginAccess(v2 + 16, v0 + 16, 0, 0);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 224) = v3;
    v4 = *(_BYTE *)(v3 + 32);
    *(_BYTE *)(v0 + 306) = v4;
    v5 = -1;
    v6 = -1 << v4;
    if (-(-1 << v4) < 64)
      v5 = ~(-1 << -(char)v6);
    v7 = v5 & *(_QWORD *)(v3 + 64);
    swift_bridgeObjectRetain(v3);
    if (v7)
    {
      v9 = 0;
      v10 = __clz(__rbit64(v7));
      v11 = (v7 - 1) & v7;
LABEL_6:
      *(_QWORD *)(v0 + 232) = v9;
      *(_QWORD *)(v0 + 240) = v11;
      v12 = 16 * v10;
      v13 = (uint64_t *)(v8[6] + v12);
      v14 = *v13;
      *(_QWORD *)(v0 + 248) = *v13;
      v15 = v13[1];
      *(_QWORD *)(v0 + 256) = v15;
      v16 = (uint64_t *)(v8[7] + v12);
      v17 = *v16;
      *(_QWORD *)(v0 + 264) = *v16;
      v18 = v16[1];
      *(_QWORD *)(v0 + 272) = v18;
      swift_bridgeObjectRetain(v15);
      sub_10000B178(v17, v18);
      v19 = (_QWORD *)swift_task_alloc(dword_1001787C4);
      *(_QWORD *)(v0 + 280) = v19;
      *v19 = v0;
      v19[1] = sub_10006F460;
      return sub_1000FE76C(v14, v15, v17, v18);
    }
    v29 = 63 - v6;
    if ((unint64_t)(63 - v6) > 0x7F)
    {
      v30 = v8[9];
      if (v30)
      {
        v9 = 1;
LABEL_12:
        v11 = (v30 - 1) & v30;
        v10 = __clz(__rbit64(v30)) + (v9 << 6);
        goto LABEL_6;
      }
      if (v29 >= 0xC0)
      {
        v30 = v8[10];
        if (v30)
        {
          v9 = 2;
          goto LABEL_12;
        }
        if (v29 >= 0x100)
        {
          v30 = v8[11];
          if (v30)
          {
            v9 = 3;
            goto LABEL_12;
          }
          if (v29 >= 0x140)
          {
            v30 = v8[12];
            if (v30)
            {
              v9 = 4;
              goto LABEL_12;
            }
            v31 = 0;
            v32 = v29 >> 6;
            if (v32 <= 5)
              v32 = 5;
            v33 = v32 - 5;
            while (v33 != v31)
            {
              v30 = v8[v31++ + 13];
              if (v30)
              {
                v9 = v31 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    v34 = *(_QWORD *)(v0 + 72);
    v35 = swift_release(v8);
    defaultLogger()(v35);
    v36 = swift_bridgeObjectRetain_n(v34, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 184);
    v42 = *(_QWORD *)(v0 + 104);
    v41 = *(_QWORD *)(v0 + 112);
    v43 = *(_QWORD *)(v0 + 96);
    v44 = *(_QWORD *)(v0 + 72);
    if (v39)
    {
      v49 = *(_QWORD *)(v0 + 112);
      v47 = *(_QWORD *)(v0 + 64);
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = v43;
      v46 = swift_slowAlloc(32, -1);
      v50 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain(v44);
      *(_QWORD *)(v0 + 56) = sub_10003FA80(v47, v44, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v45 + 4);
      swift_bridgeObjectRelease_n(v44, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Key signing keys for credential %s passed completeness check", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v49, v48);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    }
    v21 = v40;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 184);
  }
  swift_release(v21);
  v23 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 120);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_task_dealloc(v22);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10006F3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 184));
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 192));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10006F460(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 280);
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10006FB5C;
  }
  else
  {
    *(_QWORD *)(v4 + 296) = a1;
    v6 = sub_10006F4D4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006F4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = v0 + 56;
  v1 = *(_QWORD *)(v0 + 296);
  v2 = swift_release(v1);
  v4 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 256);
  if (!v1)
  {
    v19 = *(_QWORD *)(v0 + 72);
    defaultLogger()(v2);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v5);
    sub_10000B178(v4, v3);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v5);
    v20 = sub_10000B178(v4, v3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 256);
    if (v23)
    {
      v63 = *(_QWORD *)(v0 + 248);
      v71 = *(_QWORD *)(v0 + 224);
      v73 = *(_QWORD *)(v0 + 184);
      v66 = *(_QWORD *)(v0 + 104);
      v67 = *(_QWORD *)(v0 + 96);
      v69 = *(_QWORD *)(v0 + 120);
      v27 = *(_QWORD *)(v0 + 72);
      v64 = *(_QWORD *)(v0 + 64);
      v28 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v77 = v65;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v0 + 40) = sub_10003FA80(v63, v26, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v28 + 4);
      swift_bridgeObjectRelease_n(v26, 2);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(v27);
      *(_QWORD *)(v0 + 48) = sub_10003FA80(v64, v27, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v75, v28 + 14);
      swift_bridgeObjectRelease_n(v27, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Key signing key %s for credential %s does not exist in keychain", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v69, v67);
      swift_release(v71);
      v29 = v73;
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 224);
      v76 = *(_QWORD *)(v0 + 184);
      v35 = *(_QWORD *)(v0 + 120);
      v37 = *(_QWORD *)(v0 + 96);
      v36 = *(_QWORD *)(v0 + 104);
      v38 = *(_QWORD *)(v0 + 72);

      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      swift_release(v34);
      v29 = v76;
    }
    swift_release(v29);
    v1 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  result = sub_10000B164(v4, v3);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    v10 = (v8 - 1) & v8;
    v11 = v9 | (v7 << 6);
    result = *(_QWORD *)(v0 + 224);
LABEL_4:
    *(_QWORD *)(v0 + 232) = v7;
    *(_QWORD *)(v0 + 240) = v10;
    v12 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v11);
    v13 = *v12;
    *(_QWORD *)(v0 + 248) = *v12;
    v14 = v12[1];
    *(_QWORD *)(v0 + 256) = v14;
    v15 = (uint64_t *)(*(_QWORD *)(result + 56) + 16 * v11);
    v16 = *v15;
    *(_QWORD *)(v0 + 264) = *v15;
    v17 = v15[1];
    *(_QWORD *)(v0 + 272) = v17;
    swift_bridgeObjectRetain(v14);
    sub_10000B178(v16, v17);
    v18 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v0 + 280) = v18;
    *v18 = v0;
    v18[1] = sub_10006F460;
    return sub_1000FE76C(v13, v14, v16, v17);
  }
  v30 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    v31 = (unint64_t)((1 << *(_BYTE *)(v0 + 306)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 224);
    if (v30 < v31)
    {
      v32 = result + 64;
      v33 = *(_QWORD *)(result + 64 + 8 * v30);
      ++v7;
      if (v33)
      {
LABEL_10:
        v10 = (v33 - 1) & v33;
        v11 = __clz(__rbit64(v33)) + (v7 << 6);
        goto LABEL_4;
      }
      v7 = v30 + 1;
      if (v30 + 1 < v31)
      {
        v33 = *(_QWORD *)(v32 + 8 * v7);
        if (v33)
          goto LABEL_10;
        v7 = v30 + 2;
        if (v30 + 2 < v31)
        {
          v33 = *(_QWORD *)(v32 + 8 * v7);
          if (v33)
            goto LABEL_10;
          v39 = v30 + 3;
          if (v39 < v31)
          {
            v33 = *(_QWORD *)(v32 + 8 * v39);
            if (v33)
            {
              v7 = v39;
              goto LABEL_10;
            }
            while (1)
            {
              v7 = v39 + 1;
              if (__OFADD__(v39, 1))
                goto LABEL_29;
              if (v7 >= v31)
                break;
              v33 = *(_QWORD *)(v32 + 8 * v7);
              ++v39;
              if (v33)
                goto LABEL_10;
            }
          }
        }
      }
    }
    v40 = *(_QWORD *)(v0 + 72);
    v41 = swift_release(result);
    defaultLogger()(v41);
    v42 = swift_bridgeObjectRetain_n(v40, 2);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 184);
    v48 = *(_QWORD *)(v0 + 104);
    v47 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 96);
    v50 = *(_QWORD *)(v0 + 72);
    if (v45)
    {
      v72 = *(_QWORD *)(v0 + 96);
      v68 = *(_QWORD *)(v0 + 64);
      v74 = v1;
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = v46;
      v52 = swift_slowAlloc(32, -1);
      v77 = v52;
      *(_DWORD *)v51 = 136315138;
      swift_bridgeObjectRetain(v50);
      *(_QWORD *)(v0 + 56) = sub_10003FA80(v68, v50, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v0 + 64, v51 + 4);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Key signing keys for credential %s passed completeness check", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v53 = v51;
      v1 = v74;
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v72);
      v54 = v70;
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      v54 = v46;
    }
    swift_release(v54);
LABEL_27:
    v55 = v1 != 0;
    v57 = *(_QWORD *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 176);
    v59 = *(_QWORD *)(v0 + 152);
    v58 = *(_QWORD *)(v0 + 160);
    v60 = *(_QWORD *)(v0 + 144);
    v62 = *(_QWORD *)(v0 + 112);
    v61 = *(_QWORD *)(v0 + 120);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    swift_task_dealloc(v56);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v55);
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10006FB5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  sub_10000B164(v1, v2);
  swift_release(v3);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 224));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10006FC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v4[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v4[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006FD10, 0, 0);
}

uint64_t sub_10006FD10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = v0[19];
  v15 = v0[18];
  v3 = v0[16];
  v2 = v0[17];
  v4 = v0[11];
  v6 = v0[8];
  v5 = v0[9];
  static IDCSSignposts.consistencyCheckDeviceEncryptionKeys.getter();
  DIPSignpost.init(_:)(v1);
  v7 = swift_allocObject(&unk_100169568, 24, 7);
  v0[23] = v7;
  *(_QWORD *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  v8 = (_QWORD *)swift_allocObject(&unk_100169590, 48, 7);
  v0[24] = v8;
  v8[2] = v4;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_1001695B8, 32, 7);
  v0[25] = v9;
  *(_QWORD *)(v9 + 16) = sub_100070A4C;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v15, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[26] = v13;
  *v13 = v0;
  v13[1] = sub_10006FE84;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 38, v0[18], sub_100070A80, v9, &type metadata for Bool);
}

uint64_t sub_10006FE84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 144);
  v6 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 200));
    v7 = sub_100072BBC;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 192);
    swift_release(*(_QWORD *)(v2 + 200));
    swift_release(v8);
    *(_BYTE *)(v2 + 305) = *(_BYTE *)(v2 + 304);
    v7 = sub_10006FF34;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10006FF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(unsigned __int8 *)(v0 + 305);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 184);
    swift_beginAccess(v2 + 16, v0 + 16, 0, 0);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 224) = v3;
    v4 = *(_BYTE *)(v3 + 32);
    *(_BYTE *)(v0 + 306) = v4;
    v5 = -1;
    v6 = -1 << v4;
    if (-(-1 << v4) < 64)
      v5 = ~(-1 << -(char)v6);
    v7 = v5 & *(_QWORD *)(v3 + 64);
    swift_bridgeObjectRetain(v3);
    if (v7)
    {
      v9 = 0;
      v10 = __clz(__rbit64(v7));
      v11 = (v7 - 1) & v7;
LABEL_6:
      *(_QWORD *)(v0 + 232) = v9;
      *(_QWORD *)(v0 + 240) = v11;
      v12 = 16 * v10;
      v13 = (uint64_t *)(v8[6] + v12);
      v14 = *v13;
      *(_QWORD *)(v0 + 248) = *v13;
      v15 = v13[1];
      *(_QWORD *)(v0 + 256) = v15;
      v16 = (uint64_t *)(v8[7] + v12);
      v17 = *v16;
      *(_QWORD *)(v0 + 264) = *v16;
      v18 = v16[1];
      *(_QWORD *)(v0 + 272) = v18;
      swift_bridgeObjectRetain(v15);
      sub_10000B178(v17, v18);
      v19 = (_QWORD *)swift_task_alloc(dword_1001787AC);
      *(_QWORD *)(v0 + 280) = v19;
      *v19 = v0;
      v19[1] = sub_100070328;
      return sub_1000FFD3C(v14, v15, v17, v18);
    }
    v29 = 63 - v6;
    if ((unint64_t)(63 - v6) > 0x7F)
    {
      v30 = v8[9];
      if (v30)
      {
        v9 = 1;
LABEL_12:
        v11 = (v30 - 1) & v30;
        v10 = __clz(__rbit64(v30)) + (v9 << 6);
        goto LABEL_6;
      }
      if (v29 >= 0xC0)
      {
        v30 = v8[10];
        if (v30)
        {
          v9 = 2;
          goto LABEL_12;
        }
        if (v29 >= 0x100)
        {
          v30 = v8[11];
          if (v30)
          {
            v9 = 3;
            goto LABEL_12;
          }
          if (v29 >= 0x140)
          {
            v30 = v8[12];
            if (v30)
            {
              v9 = 4;
              goto LABEL_12;
            }
            v31 = 0;
            v32 = v29 >> 6;
            if (v32 <= 5)
              v32 = 5;
            v33 = v32 - 5;
            while (v33 != v31)
            {
              v30 = v8[v31++ + 13];
              if (v30)
              {
                v9 = v31 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    v34 = *(_QWORD *)(v0 + 72);
    v35 = swift_release(v8);
    defaultLogger()(v35);
    v36 = swift_bridgeObjectRetain_n(v34, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 184);
    v42 = *(_QWORD *)(v0 + 104);
    v41 = *(_QWORD *)(v0 + 112);
    v43 = *(_QWORD *)(v0 + 96);
    v44 = *(_QWORD *)(v0 + 72);
    if (v39)
    {
      v49 = *(_QWORD *)(v0 + 112);
      v47 = *(_QWORD *)(v0 + 64);
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = v43;
      v46 = swift_slowAlloc(32, -1);
      v50 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain(v44);
      *(_QWORD *)(v0 + 56) = sub_10003FA80(v47, v44, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v45 + 4);
      swift_bridgeObjectRelease_n(v44, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device encryption keys for credential %s passed completeness check", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v49, v48);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    }
    v21 = v40;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 184);
  }
  swift_release(v21);
  v23 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 120);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_task_dealloc(v22);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100070328(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 280);
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100072BB8;
  }
  else
  {
    *(_QWORD *)(v4 + 296) = a1;
    v6 = sub_10007039C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10007039C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = v0 + 56;
  v1 = *(_QWORD *)(v0 + 296);
  v2 = swift_release(v1);
  v4 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 256);
  if (!v1)
  {
    v19 = *(_QWORD *)(v0 + 72);
    defaultLogger()(v2);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v5);
    sub_10000B178(v4, v3);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v5);
    v20 = sub_10000B178(v4, v3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 256);
    if (v23)
    {
      v63 = *(_QWORD *)(v0 + 248);
      v71 = *(_QWORD *)(v0 + 224);
      v73 = *(_QWORD *)(v0 + 184);
      v66 = *(_QWORD *)(v0 + 104);
      v67 = *(_QWORD *)(v0 + 96);
      v69 = *(_QWORD *)(v0 + 120);
      v27 = *(_QWORD *)(v0 + 72);
      v64 = *(_QWORD *)(v0 + 64);
      v28 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v77 = v65;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v0 + 40) = sub_10003FA80(v63, v26, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v28 + 4);
      swift_bridgeObjectRelease_n(v26, 2);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(v27);
      *(_QWORD *)(v0 + 48) = sub_10003FA80(v64, v27, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v75, v28 + 14);
      swift_bridgeObjectRelease_n(v27, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Device encryption key %s for credential %s does not exist in keychain", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v69, v67);
      swift_release(v71);
      v29 = v73;
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 224);
      v76 = *(_QWORD *)(v0 + 184);
      v35 = *(_QWORD *)(v0 + 120);
      v37 = *(_QWORD *)(v0 + 96);
      v36 = *(_QWORD *)(v0 + 104);
      v38 = *(_QWORD *)(v0 + 72);

      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      swift_bridgeObjectRelease(v26);
      sub_10000B164(v25, v24);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      swift_release(v34);
      v29 = v76;
    }
    swift_release(v29);
    v1 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  result = sub_10000B164(v4, v3);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    v10 = (v8 - 1) & v8;
    v11 = v9 | (v7 << 6);
    result = *(_QWORD *)(v0 + 224);
LABEL_4:
    *(_QWORD *)(v0 + 232) = v7;
    *(_QWORD *)(v0 + 240) = v10;
    v12 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v11);
    v13 = *v12;
    *(_QWORD *)(v0 + 248) = *v12;
    v14 = v12[1];
    *(_QWORD *)(v0 + 256) = v14;
    v15 = (uint64_t *)(*(_QWORD *)(result + 56) + 16 * v11);
    v16 = *v15;
    *(_QWORD *)(v0 + 264) = *v15;
    v17 = v15[1];
    *(_QWORD *)(v0 + 272) = v17;
    swift_bridgeObjectRetain(v14);
    sub_10000B178(v16, v17);
    v18 = (_QWORD *)swift_task_alloc(dword_1001787AC);
    *(_QWORD *)(v0 + 280) = v18;
    *v18 = v0;
    v18[1] = sub_100070328;
    return sub_1000FFD3C(v13, v14, v16, v17);
  }
  v30 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    v31 = (unint64_t)((1 << *(_BYTE *)(v0 + 306)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 224);
    if (v30 < v31)
    {
      v32 = result + 64;
      v33 = *(_QWORD *)(result + 64 + 8 * v30);
      ++v7;
      if (v33)
      {
LABEL_10:
        v10 = (v33 - 1) & v33;
        v11 = __clz(__rbit64(v33)) + (v7 << 6);
        goto LABEL_4;
      }
      v7 = v30 + 1;
      if (v30 + 1 < v31)
      {
        v33 = *(_QWORD *)(v32 + 8 * v7);
        if (v33)
          goto LABEL_10;
        v7 = v30 + 2;
        if (v30 + 2 < v31)
        {
          v33 = *(_QWORD *)(v32 + 8 * v7);
          if (v33)
            goto LABEL_10;
          v39 = v30 + 3;
          if (v39 < v31)
          {
            v33 = *(_QWORD *)(v32 + 8 * v39);
            if (v33)
            {
              v7 = v39;
              goto LABEL_10;
            }
            while (1)
            {
              v7 = v39 + 1;
              if (__OFADD__(v39, 1))
                goto LABEL_29;
              if (v7 >= v31)
                break;
              v33 = *(_QWORD *)(v32 + 8 * v7);
              ++v39;
              if (v33)
                goto LABEL_10;
            }
          }
        }
      }
    }
    v40 = *(_QWORD *)(v0 + 72);
    v41 = swift_release(result);
    defaultLogger()(v41);
    v42 = swift_bridgeObjectRetain_n(v40, 2);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 184);
    v48 = *(_QWORD *)(v0 + 104);
    v47 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 96);
    v50 = *(_QWORD *)(v0 + 72);
    if (v45)
    {
      v72 = *(_QWORD *)(v0 + 96);
      v68 = *(_QWORD *)(v0 + 64);
      v74 = v1;
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = v46;
      v52 = swift_slowAlloc(32, -1);
      v77 = v52;
      *(_DWORD *)v51 = 136315138;
      swift_bridgeObjectRetain(v50);
      *(_QWORD *)(v0 + 56) = sub_10003FA80(v68, v50, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v0 + 64, v51 + 4);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Device encryption keys for credential %s passed completeness check", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v53 = v51;
      v1 = v74;
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v72);
      v54 = v70;
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      v54 = v46;
    }
    swift_release(v54);
LABEL_27:
    v55 = v1 != 0;
    v57 = *(_QWORD *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 176);
    v59 = *(_QWORD *)(v0 + 152);
    v58 = *(_QWORD *)(v0 + 160);
    v60 = *(_QWORD *)(v0 + 144);
    v62 = *(_QWORD *)(v0 + 112);
    v61 = *(_QWORD *)(v0 + 120);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    swift_task_dealloc(v56);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v55);
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100070A24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100070A4C(unint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10006E43C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t (*)(void))sub_1000C4FBC, "Device encryption key for credential %s does not have a public key identifier", "Device encryption key for credential %s does not have an identifier", a1);
}

_QWORD *sub_100070A80@<X0>(_BYTE *a1@<X8>)
{
  return sub_100070ACC(a1);
}

void sub_100070A98(unint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10006E43C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t (*)(void))sub_1000C5240, "Key signing key for credential %s does not have a public key identifier", "Key signing key for credential %s does not have an identifier", a1);
}

_QWORD *sub_100070ACC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_100070B08(unint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  unint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, _QWORD, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void (*v96)(char *, uint64_t);
  id v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char v121;
  id v122;
  void *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  char *v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  unint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  _BOOL4 v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  os_log_type_t v177;
  uint8_t *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  uint8_t *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  char *v232;
  char *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;

  v5 = v4;
  v226 = a4;
  v211 = a2;
  v214 = type metadata accessor for Logger(0);
  v213 = *(_QWORD *)(v214 - 8);
  v8 = __chkstk_darwin(v214);
  v212 = (char *)&v204 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v210 = (char *)&v204 - v11;
  v12 = __chkstk_darwin(v10);
  v209 = (char *)&v204 - v13;
  v14 = __chkstk_darwin(v12);
  v207 = (char *)&v204 - v15;
  v16 = __chkstk_darwin(v14);
  v208 = (char *)&v204 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t)&v204 - v19;
  v21 = __chkstk_darwin(v18);
  v205 = (char *)&v204 - v22;
  __chkstk_darwin(v21);
  v206 = (char *)&v204 - v23;
  v24 = sub_100008E84(&qword_1001755B8);
  v25 = __chkstk_darwin(v24);
  v223 = (char *)&v204 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v224 = (char *)&v204 - v27;
  v28 = type metadata accessor for CredentialKeyType(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v239 = (char *)&v204 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v232 = (char *)&v204 - v33;
  v34 = __chkstk_darwin(v32);
  v219 = (char *)&v204 - v35;
  v36 = __chkstk_darwin(v34);
  v233 = (char *)&v204 - v37;
  __chkstk_darwin(v36);
  v240 = (char *)&v204 - v38;
  v39 = sub_100008E84(&qword_100174840);
  __chkstk_darwin(v39);
  v225 = (char *)&v204 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for CredentialKeyUsage(0);
  v245 = *(_QWORD *)(v41 - 8);
  v246 = v41;
  v42 = __chkstk_darwin(v41);
  v241 = (char *)&v204 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v254 = (char *)&v204 - v44;
  v45 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v45);
  v47 = (char *)&v204 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for DIPSignpost(0);
  v48 = *(_QWORD *)(v216 - 8);
  v49 = __chkstk_darwin(v216);
  v51 = (char *)&v204 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.consistencyCheckPresentmentKeys.getter(v49);
  v218 = v51;
  v52 = a1;
  DIPSignpost.init(_:)(v47);
  if (a1 >> 62)
  {
LABEL_84:
    if (v52 < 0)
      v203 = v52;
    else
      v203 = v52 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v52);
    v53 = _CocoaArrayWrapper.endIndex.getter(v203);
  }
  else
  {
    v53 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  v215 = (unint64_t)a3;
  v217 = v48;
  v54 = v254;
  if (!v53)
  {
LABEL_49:
    v135 = swift_bridgeObjectRelease(v52);
    v136 = v212;
    defaultLogger()(v135);
    v137 = v215;
    v138 = swift_bridgeObjectRetain_n(v215, 2);
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v139, v140))
    {
      v141 = v136;
      v142 = (uint8_t *)swift_slowAlloc(12, -1);
      v143 = swift_slowAlloc(32, -1);
      v252 = (char *)v143;
      *(_DWORD *)v142 = 136315138;
      swift_bridgeObjectRetain(v137);
      v250 = sub_10003FA80(v211, v137, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v142 + 4);
      swift_bridgeObjectRelease_n(v137, 3);
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "Presentment keys for credential %s passed completeness check", v142, 0xCu);
      LOBYTE(v28) = 1;
      swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      swift_slowDealloc(v142, -1, -1);

      (*(void (**)(char *, uint64_t))(v213 + 8))(v141, v214);
    }
    else
    {

      swift_bridgeObjectRelease_n(v137, 2);
      (*(void (**)(char *, uint64_t))(v213 + 8))(v136, v214);
      LOBYTE(v28) = 1;
    }
LABEL_67:
    v181 = v216;
    v172 = v217;
    goto LABEL_68;
  }
  v204 = v20;
  v231 = v52 & 0xC000000000000001;
  v220 = enum case for CredentialKeyUsage.invalid(_:);
  v230 = enum case for CredentialKeyUsage.presentment(_:);
  v234 = enum case for CredentialKeyType.invalid(_:);
  v235 = enum case for CredentialKeyType.legacySE(_:);
  v228 = enum case for CredentialKeyType.ses(_:);
  v20 = 4;
  v229 = v52;
  v247 = v29;
  v227 = v53;
  while (1)
  {
    if (v231)
      v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v52);
    else
      v55 = *(id *)(v52 + 8 * v20);
    a3 = v55;
    v29 = v20 - 3;
    if (__OFADD__(v20 - 4, 1))
    {
      __break(1u);
      goto LABEL_84;
    }
    v56 = objc_msgSend(v55, "identifier");
    if (!v56)
    {
      v144 = swift_bridgeObjectRelease(v52);
      v145 = v210;
      defaultLogger()(v144);
      v146 = v215;
      v147 = swift_bridgeObjectRetain_n(v215, 2);
      v148 = Logger.logObject.getter(v147);
      v149 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v148, v149))
      {
        v150 = (uint8_t *)swift_slowAlloc(12, -1);
        v151 = swift_slowAlloc(32, -1);
        v252 = (char *)v151;
        *(_DWORD *)v150 = 136315138;
        swift_bridgeObjectRetain(v146);
        v250 = sub_10003FA80(v211, v146, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v150 + 4);
        swift_bridgeObjectRelease_n(v146, 3);
        _os_log_impl((void *)&_mh_execute_header, v148, v149, "Presentment key for credential %s does not have an identifier", v150, 0xCu);
        swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v151, -1, -1);
        swift_slowDealloc(v150, -1, -1);

        v152 = *(void (**)(char *, uint64_t))(v213 + 8);
        v153 = &v243;
        goto LABEL_63;
      }
      goto LABEL_65;
    }
    v57 = v56;
    v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    v60 = objc_msgSend(a3, "publicKeyIdentifier");
    if (!v60)
    {
      swift_bridgeObjectRelease(v52);
      v154 = swift_bridgeObjectRelease(v59);
      v145 = v209;
      defaultLogger()(v154);
      v146 = v215;
      v155 = swift_bridgeObjectRetain_n(v215, 2);
      v148 = Logger.logObject.getter(v155);
      v156 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v148, v156))
      {
        v157 = (uint8_t *)swift_slowAlloc(12, -1);
        v158 = swift_slowAlloc(32, -1);
        v252 = (char *)v158;
        *(_DWORD *)v157 = 136315138;
        swift_bridgeObjectRetain(v146);
        v250 = sub_10003FA80(v211, v146, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v157 + 4);
        swift_bridgeObjectRelease_n(v146, 3);
        _os_log_impl((void *)&_mh_execute_header, v148, v156, "Presentment key for credential %s does not have a public key identifier", v157, 0xCu);
        swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v158, -1, -1);
        swift_slowDealloc(v157, -1, -1);

        v152 = *(void (**)(char *, uint64_t))(v213 + 8);
        v153 = (unint64_t *)&v242;
        goto LABEL_63;
      }
      goto LABEL_65;
    }
    v61 = v60;
    v244 = v59;
    v242 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v243 = v62;

    v63 = objc_msgSend(a3, "usage");
    v236 = v20 - 3;
    v237 = v20;
    if (v63)
    {
      v64 = v63;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v67 = v66;

      v68 = v67;
      v69 = (uint64_t)v225;
      CredentialKeyUsage.init(rawValue:)(v65, v68);
      v70 = v245;
      v71 = v246;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v245 + 48))(v69, 1, v246) != 1)
      {
        v72 = v5;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v254, v69, v71);
        v73 = *(void (**)(char *, _QWORD, uint64_t))(v70 + 104);
        goto LABEL_16;
      }
      sub_1000150E8(v69, &qword_100174840);
      v54 = v254;
    }
    v72 = v5;
    v71 = v246;
    v73 = *(void (**)(char *, _QWORD, uint64_t))(v245 + 104);
    v73(v54, v220, v246);
LABEL_16:
    v73(v241, v230, v71);
    v74 = sub_1000058C8(&qword_100174848, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialKeyUsage, (uint64_t)&protocol conformance descriptor for CredentialKeyUsage);
    dispatch thunk of RawRepresentable.rawValue.getter(&v252, v71, v74);
    dispatch thunk of RawRepresentable.rawValue.getter(&v250, v71, v74);
    v75 = v253;
    v76 = v251;
    if (v252 == (char *)v250 && v253 == v251)
    {
      swift_bridgeObjectRelease_n(v253, 2);
      v77 = v246;
      v78 = *(void (**)(char *, uint64_t))(v245 + 8);
      v78(v241, v246);
      v78(v254, v77);
      v79 = v72;
      v80 = v247;
    }
    else
    {
      v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v252, v253, v250, v251, 0);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v76);
      v82 = v246;
      v83 = *(void (**)(char *, uint64_t))(v245 + 8);
      v83(v241, v246);
      v83(v254, v82);
      v79 = v72;
      v80 = v247;
      if ((v81 & 1) == 0)
      {
        swift_bridgeObjectRelease(v244);
        v175 = swift_bridgeObjectRelease(v52);
        v145 = v207;
        defaultLogger()(v175);
        v146 = v215;
        v176 = swift_bridgeObjectRetain_n(v215, 2);
        v148 = Logger.logObject.getter(v176);
        v177 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v148, v177))
          goto LABEL_64;
        v178 = (uint8_t *)swift_slowAlloc(12, -1);
        v179 = swift_slowAlloc(32, -1);
        v252 = (char *)v179;
        *(_DWORD *)v178 = 136315138;
        swift_bridgeObjectRetain(v146);
        v250 = sub_10003FA80(v211, v146, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v178 + 4);
        swift_bridgeObjectRelease_n(v146, 3);
        _os_log_impl((void *)&_mh_execute_header, v148, v177, "Presentment key for credential %s does not have presentment usage", v178, 0xCu);
        swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v179, -1, -1);
        swift_slowDealloc(v178, -1, -1);
        sub_100005AB0(v242, v243);

        v152 = *(void (**)(char *, uint64_t))(v213 + 8);
        v153 = (unint64_t *)&v240;
LABEL_63:
        v180 = (char *)*(v153 - 32);
        goto LABEL_66;
      }
    }
    v84 = objc_msgSend(a3, "keyType", v204);
    if (v84)
    {
      v85 = v84;
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v88 = v87;

      v89 = (uint64_t)v224;
      CredentialKeyType.init(rawValue:)(v86, v88);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v89, 1, v28) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v240, v89, v28);
        v90 = *(void (**)(char *, _QWORD, uint64_t))(v80 + 104);
        goto LABEL_25;
      }
      sub_1000150E8(v89, &qword_1001755B8);
    }
    v90 = *(void (**)(char *, _QWORD, uint64_t))(v80 + 104);
    v90(v240, v234, v28);
    v248 = v79;
    v91 = v233;
    v90(v233, v235, v28);
    v92 = sub_1000058C8(&qword_100176A20, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialKeyType, (uint64_t)&protocol conformance descriptor for CredentialKeyType);
    dispatch thunk of RawRepresentable.rawValue.getter(&v252, v28, v92);
    dispatch thunk of RawRepresentable.rawValue.getter(&v250, v28, v92);
    v93 = v253;
    v94 = v251;
    if (v252 != (char *)v250)
      goto LABEL_28;
LABEL_25:
    if (v253 == v251)
    {
      v95 = 1;
      v94 = v253;
    }
    else
    {
LABEL_28:
      v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v252, v253, v250, v251, 0);
    }
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v94);
    v96 = *(void (**)(char *, uint64_t))(v247 + 8);
    v96(v91, v28);
    v96(v240, v28);
    v249 = a3;
    if ((v95 & 1) != 0)
      break;
LABEL_34:
    v112 = objc_msgSend(a3, "keyType");
    v5 = v248;
    if (v112)
    {
      v113 = v112;
      v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
      v116 = v115;

      v117 = (uint64_t)v223;
      CredentialKeyType.init(rawValue:)(v114, v116);
      v118 = v247;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v247 + 48))(v117, 1, v28) != 1)
      {
        v119 = v232;
        (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v232, v117, v28);
        goto LABEL_39;
      }
      sub_1000150E8(v117, &qword_1001755B8);
    }
    v119 = v232;
    v90(v232, v234, v28);
LABEL_39:
    v90(v239, v228, v28);
    dispatch thunk of RawRepresentable.rawValue.getter(&v252, v28, v92);
    dispatch thunk of RawRepresentable.rawValue.getter(&v250, v28, v92);
    v120 = v253;
    v48 = v251;
    if (v252 == (char *)v250 && v253 == v251)
    {
      swift_bridgeObjectRelease_n(v253, 2);
      v96(v239, v28);
      v96(v119, v28);
      v52 = v229;
    }
    else
    {
      v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v252, v253, v250, v251, 0);
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v48);
      v96(v239, v28);
      v96(v119, v28);
      v52 = v229;
      v54 = v254;
      if ((v121 & 1) == 0)
      {
        sub_100005AB0(v242, v243);
        swift_bridgeObjectRelease(v244);

        goto LABEL_48;
      }
    }
    a3 = v249;
    v122 = objc_msgSend(v249, "publicKey");
    if (!v122)
    {
      swift_bridgeObjectRelease(v244);
      v159 = swift_bridgeObjectRelease(v52);
      v145 = v208;
      defaultLogger()(v159);
      v146 = v215;
      v160 = swift_bridgeObjectRetain_n(v215, 2);
      v148 = Logger.logObject.getter(v160);
      v161 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v148, v161))
      {
        v162 = (uint8_t *)swift_slowAlloc(12, -1);
        v163 = swift_slowAlloc(32, -1);
        v252 = (char *)v163;
        *(_DWORD *)v162 = 136315138;
        swift_bridgeObjectRetain(v146);
        v250 = sub_10003FA80(v211, v146, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v162 + 4);
        swift_bridgeObjectRelease_n(v146, 3);
        _os_log_impl((void *)&_mh_execute_header, v148, v161, "Presentment key for credential %s does not have a public key", v162, 0xCu);
        swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v163, -1, -1);
        swift_slowDealloc(v162, -1, -1);
        sub_100005AB0(v242, v243);

        v152 = *(void (**)(char *, uint64_t))(v213 + 8);
        v153 = (unint64_t *)&v241;
        goto LABEL_63;
      }
LABEL_64:
      sub_100005AB0(v242, v243);
LABEL_65:

      swift_bridgeObjectRelease_n(v146, 2);
      v152 = *(void (**)(char *, uint64_t))(v213 + 8);
      v180 = v145;
LABEL_66:
      v152(v180, v214);
      LOBYTE(v28) = 0;
      goto LABEL_67;
    }
    v123 = v122;
    v124 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v122);
    v126 = v125;

    v127 = v126;
    a3 = v249;
    sub_100005AB0(v124, v127);
    v128 = objc_msgSend(a3, "keyBlob");
    if (!v128)
    {
      v164 = swift_bridgeObjectRelease(v52);
      v165 = v204;
      defaultLogger()(v164);
      v166 = v215;
      swift_bridgeObjectRetain_n(v215, 2);
      v167 = v244;
      swift_bridgeObjectRetain(v244);
      v169 = Logger.logObject.getter(v168);
      v170 = static os_log_type_t.error.getter();
      v171 = os_log_type_enabled(v169, v170);
      v172 = v217;
      if (v171)
      {
        v173 = swift_slowAlloc(22, -1);
        v254 = (char *)swift_slowAlloc(64, -1);
        v252 = v254;
        *(_DWORD *)v173 = 136315394;
        swift_bridgeObjectRetain(v167);
        v250 = sub_10003FA80(v238, v167, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v173 + 4);
        swift_bridgeObjectRelease_n(v167, 3);
        *(_WORD *)(v173 + 12) = 2080;
        swift_bridgeObjectRetain(v166);
        v250 = sub_10003FA80(v211, v166, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v173 + 14);
        swift_bridgeObjectRelease_n(v166, 3);
        _os_log_impl((void *)&_mh_execute_header, v169, v170, "Presentment key %s for credential %s does not exist", (uint8_t *)v173, 0x16u);
        v174 = v254;
        swift_arrayDestroy(v254, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v174, -1, -1);
        swift_slowDealloc(v173, -1, -1);
        sub_100005AB0(v242, v243);

        (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v204, v214);
      }
      else
      {
        sub_100005AB0(v242, v243);

        swift_bridgeObjectRelease_n(v166, 2);
        swift_bridgeObjectRelease_n(v167, 2);

        (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v165, v214);
      }
      LOBYTE(v28) = 0;
      goto LABEL_82;
    }
    v129 = v128;
    v130 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v132 = v131;

    sub_100005A38(v130, v132);
    v133 = v244;
    v48 = v226;
    v134 = sub_1000FF1E8(v238, v244, v130, v132, 0, 0xF000000000000000);
    if (v5)
    {
      swift_bridgeObjectRelease(v52);
      sub_100005AB0(v130, v132);
      sub_100005AB0(v130, v132);
      goto LABEL_73;
    }
    swift_release(v134);
    sub_100005AB0(v242, v243);
    swift_bridgeObjectRelease(v133);

    sub_100005AB0(v130, v132);
    sub_100005AB0(v130, v132);
    v54 = v254;
LABEL_48:
    v20 = v237 + 1;
    if (v236 == v227)
      goto LABEL_49;
  }
  v97 = objc_msgSend(a3, "publicKey");
  if (!v97)
  {
    swift_bridgeObjectRelease(v229);
    v184 = swift_bridgeObjectRelease(v244);
    v185 = v205;
    defaultLogger()(v184);
    v186 = v215;
    v187 = swift_bridgeObjectRetain_n(v215, 2);
    v188 = Logger.logObject.getter(v187);
    v189 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v188, v189))
    {
      v190 = (uint8_t *)swift_slowAlloc(12, -1);
      v191 = swift_slowAlloc(32, -1);
      v252 = (char *)v191;
      *(_DWORD *)v190 = 136315138;
      swift_bridgeObjectRetain(v186);
      v250 = sub_10003FA80(v211, v186, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v190 + 4);
      swift_bridgeObjectRelease_n(v186, 3);
      _os_log_impl((void *)&_mh_execute_header, v188, v189, "Presentment key for credential %s does not have a public key", v190, 0xCu);
      swift_arrayDestroy(v191, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v191, -1, -1);
      swift_slowDealloc(v190, -1, -1);
      sub_100005AB0(v242, v243);

    }
    else
    {
      sub_100005AB0(v242, v243);

      swift_bridgeObjectRelease_n(v186, 2);
    }

    (*(void (**)(char *, uint64_t))(v213 + 8))(v185, v214);
    LOBYTE(v28) = 0;
    goto LABEL_67;
  }
  v98 = v97;
  v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v97);
  v101 = v100;

  v102 = objc_msgSend(a3, "keySlot");
  v103 = v248;
  sub_100008854(0);
  v248 = v103;
  if (v103)
  {
    swift_bridgeObjectRelease(v229);
    sub_100005AB0(v99, v101);
LABEL_73:
    sub_100005AB0(v242, v243);

    swift_bridgeObjectRelease(v244);
    v192 = v218;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v217 + 8))(v192, v216);
    return v28 & 1;
  }
  v105 = v104;
  v221 = v99;
  v222 = v101;
  v106 = sub_1000098F8((uint64_t)v102, v104);
  swift_bridgeObjectRelease(v105);
  if (v106)
  {
    v107 = (uint64_t)v219;
    v90(v219, v235, v28);
    v108 = v243;
    v109 = v244;
    v110 = v242;
    v111 = sub_100058144(v238, v244, v242, v243, v221, v222, v107, (uint64_t)v102, 0);
    swift_bridgeObjectRetain(v109);
    sub_100005A38(v110, v108);
    swift_release(v111);
    a3 = v249;
    goto LABEL_34;
  }
  v193 = swift_bridgeObjectRelease(v229);
  v194 = v206;
  defaultLogger()(v193);
  v195 = v215;
  swift_bridgeObjectRetain_n(v215, 2);
  v196 = v244;
  swift_bridgeObjectRetain(v244);
  v198 = Logger.logObject.getter(v197);
  v199 = static os_log_type_t.error.getter();
  v200 = os_log_type_enabled(v198, v199);
  v172 = v217;
  if (v200)
  {
    v201 = swift_slowAlloc(22, -1);
    v202 = swift_slowAlloc(64, -1);
    v252 = (char *)v202;
    *(_DWORD *)v201 = 136315394;
    swift_bridgeObjectRetain(v196);
    v250 = sub_10003FA80(v238, v196, (uint64_t *)&v252);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v201 + 4);
    swift_bridgeObjectRelease_n(v196, 3);
    *(_WORD *)(v201 + 12) = 2080;
    swift_bridgeObjectRetain(v195);
    v250 = sub_10003FA80(v211, v195, (uint64_t *)&v252);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v201 + 14);
    swift_bridgeObjectRelease_n(v195, 3);
    _os_log_impl((void *)&_mh_execute_header, v198, v199, "Presentment key %s for credential %s does not exist", (uint8_t *)v201, 0x16u);
    swift_arrayDestroy(v202, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v202, -1, -1);
    swift_slowDealloc(v201, -1, -1);
    sub_100005AB0(v221, v222);
    sub_100005AB0(v242, v243);

    (*(void (**)(char *, uint64_t))(v213 + 8))(v206, v214);
  }
  else
  {
    sub_100005AB0(v221, v222);
    swift_bridgeObjectRelease_n(v195, 2);
    swift_bridgeObjectRelease_n(v196, 2);
    sub_100005AB0(v242, v243);

    (*(void (**)(char *, uint64_t))(v213 + 8))(v194, v214);
  }
  LOBYTE(v28) = 0;
LABEL_82:
  v181 = v216;
LABEL_68:
  v182 = v218;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v182, v181);
  return v28 & 1;
}

uint64_t sub_1000724EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = v3;
  v66 = a3;
  v62 = a2;
  v6 = type metadata accessor for Logger(0);
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v61 = (char *)&v58 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - v12;
  v14 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPSignpost(0);
  v68 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.consistencyCheckPayloads.getter(v18);
  v67 = v20;
  v21 = DIPSignpost.init(_:)(v16);
  if (!((unint64_t)a1 >> 62))
  {
    v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
    {
      v59 = v9;
      v60 = v17;
      v63 = v3;
      swift_bridgeObjectRetain(a1);
      goto LABEL_4;
    }
LABEL_29:
    defaultLogger()(v21);
    v49 = v66;
    v50 = swift_bridgeObjectRetain_n(v66, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v71 = v54;
      v63 = v4;
      *(_DWORD *)v53 = 136315138;
      swift_bridgeObjectRetain(v49);
      v69 = sub_10003FA80(v62, v49, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v53 + 4);
      swift_bridgeObjectRelease_n(v49, 3);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Credential %s does not have any payloads", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v49, 2);
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v65);
    v46 = 0;
    goto LABEL_33;
  }
LABEL_23:
  if (a1 < 0)
    v47 = a1;
  else
    v47 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  v21 = swift_bridgeObjectRelease(a1);
  if (!v48)
    goto LABEL_29;
  v59 = v9;
  v60 = v17;
  v63 = v4;
  swift_bridgeObjectRetain(a1);
  v22 = _CocoaArrayWrapper.endIndex.getter(v47);
  if (v22)
  {
LABEL_4:
    v17 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v23 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a1);
      else
        v23 = (char *)*(id *)(a1 + 8 * v17);
      v13 = v23;
      v4 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      v24 = objc_msgSend(v23, "payloadData");
      if (!v24)
      {
        v29 = swift_bridgeObjectRelease(a1);
        v30 = v61;
        defaultLogger()(v29);
        v31 = v66;
        v32 = swift_bridgeObjectRetain_n(v66, 2);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v36 = swift_slowAlloc(32, -1);
          v71 = v36;
          *(_DWORD *)v35 = 136315138;
          swift_bridgeObjectRetain(v31);
          v69 = sub_10003FA80(v62, v31, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v35 + 4);
          swift_bridgeObjectRelease_n(v31, 3);
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Credential %s has a payload with empty payload data", v35, 0xCu);
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);

          (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v65);
        }
        else
        {

          swift_bridgeObjectRelease_n(v31, 2);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v30, v65);
        }
        v46 = 0;
        goto LABEL_21;
      }
      v25 = v24;
      v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      sub_100005AB0(v26, v28);
      v9 = (char *)objc_msgSend(v13, "presentmentKey");

      if (!v9)
        break;

      ++v17;
      if (v4 == v22)
        goto LABEL_12;
    }
    v37 = swift_bridgeObjectRelease(a1);
    v38 = v59;
    defaultLogger()(v37);
    v39 = v66;
    v40 = swift_bridgeObjectRetain_n(v66, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v59 = v38;
      v45 = v44;
      v71 = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(v39);
      v69 = sub_10003FA80(v62, v39, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v43 + 4);
      swift_bridgeObjectRelease_n(v39, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Credential %s has a payload without a presentment key", v43, 0xCu);
      v46 = 1;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v65);
      goto LABEL_21;
    }

    swift_bridgeObjectRelease_n(v39, 2);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v65);
    goto LABEL_20;
  }
LABEL_12:
  swift_bridgeObjectRelease(a1);
LABEL_20:
  v46 = 1;
LABEL_21:
  v17 = v60;
LABEL_33:
  v56 = v67;
  v55 = v68;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v17);
  return v46;
}

uint64_t sub_100072BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  char v141[16];
  uint64_t v142;
  _QWORD *v143;

  v4 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v8);
  v127 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100008E84(&qword_100175348);
  v10 = __chkstk_darwin(v139);
  v126 = (uint64_t *)((char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v132 = (char *)&v111 - v13;
  __chkstk_darwin(v12);
  v128 = (char *)&v111 - v14;
  v15 = type metadata accessor for CredentialElement(0);
  v124 = *(_QWORD *)(v15 - 8);
  v125 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v20);
  v142 = a2;
  Logger.sensitive(_:)(sub_10002E7AC, v141);
  v23 = *(void (**)(char *, uint64_t))(v19 + 8);
  v23(v22, v18);
  v24 = sub_10003E408((uint64_t)&_swiftEmptyArrayStorage);
  v25 = swift_bridgeObjectRelease(v24);
  if (a1)
  {
    v26 = defaultLogger()(v25);
    __chkstk_darwin(v26);
    *(&v111 - 2) = a1;
    Logger.sensitive(_:)(sub_10002E7B4, &v111 - 4);
    v23(v22, v18);
    swift_bridgeObjectRetain(a1);
    v27 = swift_bridgeObjectRetain(a2);
    v28 = sub_100074C8C(v27, a1);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRetain(a1);
    v29 = sub_10007545C(&_swiftEmptyDictionarySingleton, v28, a1);
    swift_release(v28);
    swift_bridgeObjectRelease(a1);
    return v29;
  }
  v140 = v17;
  v31 = *(_QWORD *)(a2 + 64);
  v112 = a2 + 64;
  v32 = 1 << *(_BYTE *)(a2 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v113 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v35 = 0;
  v118 = &_swiftEmptyDictionarySingleton;
  v36 = v139;
  v114 = a2;
  v123 = v4;
  v122 = v5;
  v121 = v7;
  while (1)
  {
    if (v34)
    {
      v38 = __clz(__rbit64(v34));
      v39 = (v34 - 1) & v34;
      v40 = v38 | (v35 << 6);
    }
    else
    {
      v41 = v35 + 1;
      if (__OFADD__(v35, 1))
        goto LABEL_74;
      if (v41 >= v113)
        goto LABEL_65;
      v42 = *(_QWORD *)(v112 + 8 * v41);
      ++v35;
      if (!v42)
      {
        v35 = v41 + 1;
        if (v41 + 1 >= v113)
          goto LABEL_65;
        v42 = *(_QWORD *)(v112 + 8 * v35);
        if (!v42)
        {
          v35 = v41 + 2;
          if (v41 + 2 >= v113)
            goto LABEL_65;
          v42 = *(_QWORD *)(v112 + 8 * v35);
          if (!v42)
          {
            v35 = v41 + 3;
            if (v41 + 3 >= v113)
              goto LABEL_65;
            v42 = *(_QWORD *)(v112 + 8 * v35);
            if (!v42)
            {
              v35 = v41 + 4;
              if (v41 + 4 >= v113)
                goto LABEL_65;
              v42 = *(_QWORD *)(v112 + 8 * v35);
              if (!v42)
              {
                v43 = v41 + 5;
                if (v43 >= v113)
                  goto LABEL_65;
                v42 = *(_QWORD *)(v112 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    v35 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      goto LABEL_75;
                    if (v35 >= v113)
                      break;
                    v42 = *(_QWORD *)(v112 + 8 * v35);
                    ++v43;
                    if (v42)
                      goto LABEL_28;
                  }
LABEL_65:
                  swift_release(a2);
                  return (uint64_t)v118;
                }
                v35 = v43;
              }
            }
          }
        }
      }
LABEL_28:
      v39 = (v42 - 1) & v42;
      v40 = __clz(__rbit64(v42)) + (v35 << 6);
    }
    v116 = v39;
    v117 = v35;
    v44 = *(_QWORD *)(a2 + 56);
    v45 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v40);
    v46 = v45[1];
    v119 = *v45;
    v47 = *(_QWORD *)(v44 + 8 * v40);
    v48 = *(_QWORD *)(v47 + 16);
    v133 = v47;
    if (v48)
      break;
    swift_bridgeObjectRetain_n(v46, 2);
    swift_bridgeObjectRetain(v47);
    v84 = &_swiftEmptyArrayStorage;
LABEL_55:
    v95 = v118;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v118);
    v143 = v95;
    v98 = sub_1000FBC04(v119, v46);
    v99 = v95[2];
    v100 = (v97 & 1) == 0;
    v101 = v99 + v100;
    if (__OFADD__(v99, v100))
      goto LABEL_72;
    if (v95[3] < v101)
    {
      v102 = v97;
      sub_10007BB34(v101, isUniquelyReferenced_nonNull_native);
      v103 = sub_1000FBC04(v119, v46);
      if ((v102 & 1) != (v104 & 1))
        goto LABEL_76;
      v98 = v103;
      goto LABEL_59;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v102 = v97;
      sub_10007DB18();
LABEL_59:
      v97 = v102;
    }
    v105 = v133;
    v106 = v143;
    v118 = v143;
    if ((v97 & 1) != 0)
    {
      v37 = v143[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8 * v98));
      *(_QWORD *)(v37 + 8 * v98) = v84;
    }
    else
    {
      v143[(v98 >> 6) + 8] |= 1 << v98;
      v107 = (_QWORD *)(v106[6] + 16 * v98);
      *v107 = v119;
      v107[1] = v46;
      *(_QWORD *)(v106[7] + 8 * v98) = v84;
      v108 = v106[2];
      v109 = __OFADD__(v108, 1);
      v110 = v108 + 1;
      if (v109)
        goto LABEL_73;
      v106[2] = v110;
      swift_bridgeObjectRetain(v46);
    }
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease_n(v46, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    a2 = v114;
    v35 = v117;
    v34 = v116;
    v36 = v139;
  }
  v143 = &_swiftEmptyArrayStorage;
  v115 = v46;
  swift_bridgeObjectRetain_n(v46, 2);
  swift_bridgeObjectRetain(v47);
  sub_1000557B8(0, v48, 0);
  v49 = sub_1000ED080(v47);
  v51 = 0;
  v52 = v47 + 64;
  v53 = *(_BYTE *)(v47 + 32);
  v129 = v50;
  v120 = v47 + 88;
  v54 = v132;
  v130 = v47 + 64;
  v131 = v48;
  while (1)
  {
    v57 = v128;
    if ((v49 & 0x8000000000000000) != 0 || (uint64_t)v49 >= 1 << v53)
      break;
    if ((*(_QWORD *)(v52 + 8 * (v49 >> 6)) & (1 << v49)) == 0)
      goto LABEL_67;
    if (*(_DWORD *)(v47 + 36) != (_DWORD)v50)
      goto LABEL_68;
    v135 = v50;
    v136 = 1 << v49;
    v137 = v49 >> 6;
    v134 = v51;
    v58 = &v128[*(int *)(v36 + 48)];
    v59 = *(_QWORD *)(v47 + 56);
    v60 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v49);
    v61 = v7;
    v62 = *v60;
    v63 = v60[1];
    v64 = (char *)v54;
    v65 = v49;
    v66 = sub_100008E84(&qword_1001752E8);
    v67 = *(_QWORD *)(v66 - 8);
    v68 = *(_QWORD *)(v67 + 72);
    v138 = v65;
    v69 = v59 + v68 * v65;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v70(v58, v69, v66);
    *v57 = v62;
    v57[1] = v63;
    *(_QWORD *)v64 = v62;
    *((_QWORD *)v64 + 1) = v63;
    v70(&v64[*(int *)(v139 + 48)], (uint64_t)v58, v66);
    v71 = v126;
    sub_100075E40((uint64_t)v64, (uint64_t)v126);
    swift_bridgeObjectRetain_n(v63, 2);
    sub_1000150E8((uint64_t)v57, &qword_100175348);
    v72 = *v71;
    v73 = v71[1];
    v74 = CBOREncodedCBOR.value.getter(v66);
    v75 = (uint64_t)v127;
    ISO18013IssuerSignedItem.elementValue.getter(v74);
    v76 = v61;
    v77 = v125;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v76, v123);
    v78 = type metadata accessor for AnyCodable(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v75, 0, 1, v78);
    v79 = CBOREncodedCBOR.dataValue.getter(v66);
    v81 = v80;
    sub_100075EE0(v75, (uint64_t)v140 + *(int *)(v77 + 20));
    *v140 = v72;
    v82 = (uint64_t)v140;
    v140[1] = v73;
    v83 = (uint64_t *)(v82 + *(int *)(v77 + 24));
    *v83 = v79;
    v83[1] = v81;
    swift_bridgeObjectRetain(v73);
    sub_1000150E8(v75, &qword_1001752C8);
    sub_1000150E8((uint64_t)v71, &qword_100175348);
    v84 = v143;
    if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) == 0)
    {
      sub_1000557B8(0, v84[2] + 1, 1);
      v84 = v143;
    }
    v86 = v84[2];
    v85 = v84[3];
    v36 = v139;
    v87 = v131;
    v54 = v132;
    if (v86 >= v85 >> 1)
    {
      v94 = v139;
      sub_1000557B8(v85 > 1, v86 + 1, 1);
      v36 = v94;
      v84 = v143;
    }
    v84[2] = v86 + 1;
    sub_100075F28(v82, (uint64_t)v84+ ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80))+ *(_QWORD *)(v124 + 72) * v86);
    v47 = v133;
    v53 = *(_BYTE *)(v133 + 32);
    v55 = 1 << v53;
    if (v138 >= 1 << v53)
      goto LABEL_69;
    v52 = v130;
    v88 = v137;
    v89 = *(_QWORD *)(v130 + 8 * v137);
    if ((v89 & v136) == 0)
      goto LABEL_70;
    if (*(_DWORD *)(v133 + 36) != (_DWORD)v135)
      goto LABEL_71;
    v90 = v89 & (-2 << (v138 & 0x3F));
    if (v90)
    {
      v55 = __clz(__rbit64(v90)) | v138 & 0xFFFFFFFFFFFFFFC0;
      v7 = v121;
      v56 = v134;
    }
    else
    {
      v91 = v137 + 1;
      v92 = (v55 + 63) >> 6;
      v7 = v121;
      v56 = v134;
      if (v137 + 1 < v92)
      {
        v93 = *(_QWORD *)(v130 + 8 * v91);
        if (!v93)
        {
          v91 = v137 + 2;
          if (v137 + 2 >= v92)
            goto LABEL_32;
          v93 = *(_QWORD *)(v130 + 8 * v91);
          if (!v93)
          {
            while (v92 - 3 != v88)
            {
              v93 = *(_QWORD *)(v120 + 8 * v88++);
              if (v93)
              {
                v91 = v88 + 2;
                goto LABEL_47;
              }
            }
            goto LABEL_32;
          }
        }
LABEL_47:
        v55 = __clz(__rbit64(v93)) + (v91 << 6);
      }
    }
LABEL_32:
    v51 = v56 + 1;
    v50 = v129;
    v49 = v55;
    if (v51 == v87)
    {
      v46 = v115;
      goto LABEL_55;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100073610()
{
  uint64_t v0;

  v0 = type metadata accessor for AnyCodable(0);
  sub_100075E88(v0, qword_100178D70);
  sub_100075EC8(v0, (uint64_t)qword_100178D70);
  return AnyCodable.init(value:)(0, 0xE000000000000000);
}

uint64_t sub_100073660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  Swift::String v72;
  uint64_t v73;
  Swift::String v74;
  void *object;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;

  v90 = sub_100008E84(&qword_100175348);
  v2 = __chkstk_darwin(v90);
  v89 = (uint64_t *)((char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __chkstk_darwin(v2);
  v88 = (uint64_t *)((char *)&v77 - v5);
  __chkstk_darwin(v4);
  v87 = (char *)&v77 - v6;
  v7 = *(_QWORD *)(a1 + 64);
  v78 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v79 = (unint64_t)(v8 + 63) >> 6;
  v81 = a1;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v85 = v12;
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v15 = (v10 - 1) & v10;
      v16 = v14 | (v11 << 6);
    }
    else
    {
      v17 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_72;
      if (v17 >= v79)
        goto LABEL_63;
      v18 = *(_QWORD *)(v78 + 8 * v17);
      ++v11;
      if (!v18)
      {
        v11 = v17 + 1;
        if (v17 + 1 >= v79)
          goto LABEL_63;
        v18 = *(_QWORD *)(v78 + 8 * v11);
        if (!v18)
        {
          v11 = v17 + 2;
          if (v17 + 2 >= v79)
            goto LABEL_63;
          v18 = *(_QWORD *)(v78 + 8 * v11);
          if (!v18)
          {
            v11 = v17 + 3;
            if (v17 + 3 >= v79)
              goto LABEL_63;
            v18 = *(_QWORD *)(v78 + 8 * v11);
            if (!v18)
            {
              v11 = v17 + 4;
              if (v17 + 4 >= v79)
                goto LABEL_63;
              v18 = *(_QWORD *)(v78 + 8 * v11);
              if (!v18)
              {
                v19 = v17 + 5;
                if (v19 >= v79)
                  goto LABEL_63;
                v18 = *(_QWORD *)(v78 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v11 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      goto LABEL_73;
                    if (v11 >= v79)
                      break;
                    v18 = *(_QWORD *)(v78 + 8 * v11);
                    ++v19;
                    if (v18)
                      goto LABEL_25;
                  }
LABEL_63:
                  swift_release(v81);
                  v98 = 0;
                  v99 = 0xE000000000000000;
                  _StringGuts.grow(_:)(52);
                  v72._object = (void *)0x8000000100132660;
                  v72._countAndFlagsBits = 0xD000000000000032;
                  String.append(_:)(v72);
                  v73 = sub_100008E84(&qword_100177CB0);
                  v74._countAndFlagsBits = Dictionary.description.getter(v12, &type metadata for String, v73, &protocol witness table for String);
                  object = v74._object;
                  String.append(_:)(v74);
                  swift_bridgeObjectRelease(v12);
                  swift_bridgeObjectRelease(object);
                  return (uint64_t)v98;
                }
                v11 = v19;
              }
            }
          }
        }
      }
LABEL_25:
      v15 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v11 << 6);
    }
    v83 = v15;
    v84 = v11;
    v20 = *(_QWORD *)(v81 + 56);
    v21 = (uint64_t *)(*(_QWORD *)(v81 + 48) + 16 * v16);
    v22 = v21[1];
    v86 = *v21;
    v23 = *(_QWORD *)(v20 + 8 * v16);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
      break;
    swift_bridgeObjectRetain_n(v22, 2);
    swift_bridgeObjectRetain(v23);
    v48 = &_swiftEmptyArrayStorage;
LABEL_52:
    v57 = v85;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
    v98 = v57;
    v59 = v22;
    v61 = sub_1000FBC04(v86, v22);
    v62 = v57[2];
    v63 = (v60 & 1) == 0;
    v64 = v62 + v63;
    if (__OFADD__(v62, v63))
      goto LABEL_70;
    v65 = v60;
    if (v57[3] >= v64)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v12 = v98;
        if ((v60 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10007DF80();
        v12 = v98;
        if ((v65 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10007C1D0(v64, isUniquelyReferenced_nonNull_native);
      v66 = sub_1000FBC04(v86, v22);
      if ((v65 & 1) != (v67 & 1))
        goto LABEL_74;
      v61 = v66;
      v12 = v98;
      if ((v65 & 1) != 0)
      {
LABEL_4:
        v13 = v12[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8 * v61));
        *(_QWORD *)(v13 + 8 * v61) = v48;
        goto LABEL_5;
      }
    }
    v12[(v61 >> 6) + 8] |= 1 << v61;
    v68 = (_QWORD *)(v12[6] + 16 * v61);
    *v68 = v86;
    v68[1] = v22;
    *(_QWORD *)(v12[7] + 8 * v61) = v48;
    v69 = v12[2];
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
      goto LABEL_71;
    v12[2] = v71;
    swift_bridgeObjectRetain(v22);
LABEL_5:
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v10 = v83;
    v11 = v84;
  }
  v98 = &_swiftEmptyArrayStorage;
  v82 = v22;
  swift_bridgeObjectRetain_n(v22, 2);
  swift_bridgeObjectRetain(v23);
  sub_1000557E4(0, v24, 0);
  v26 = sub_1000ED080(v23);
  v27 = 0;
  v28 = v23 + 64;
  v29 = *(_BYTE *)(v23 + 32);
  v91 = v24;
  v92 = v25;
  v80 = v23 + 88;
  v93 = v23 + 64;
  v94 = v23;
  while ((v26 & 0x8000000000000000) == 0 && v26 < 1 << v29)
  {
    v32 = (unint64_t)v26 >> 6;
    if ((*(_QWORD *)(v28 + 8 * ((unint64_t)v26 >> 6)) & (1 << v26)) == 0)
      goto LABEL_65;
    if (*(_DWORD *)(v23 + 36) != (_DWORD)v25)
      goto LABEL_66;
    v96 = v25;
    v97 = 1 << v26;
    v95 = v27;
    v33 = v90;
    v34 = v87;
    v35 = &v87[*(int *)(v90 + 48)];
    v36 = *(_QWORD *)(v23 + 56);
    v37 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v26);
    v39 = *v37;
    v38 = v37[1];
    v40 = sub_100008E84(&qword_1001752E8);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = v36 + *(_QWORD *)(v41 + 72) * v26;
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v43(v35, v42, v40);
    *v34 = v39;
    v34[1] = v38;
    v44 = (uint64_t)v88;
    *v88 = v39;
    *(_QWORD *)(v44 + 8) = v38;
    v43((char *)(v44 + *(int *)(v33 + 48)), (uint64_t)v35, v40);
    v45 = v89;
    sub_100075E40(v44, (uint64_t)v89);
    swift_bridgeObjectRetain_n(v38, 2);
    sub_1000150E8((uint64_t)v34, &qword_100175348);
    v46 = *v45;
    v47 = v45[1];
    swift_bridgeObjectRetain(v47);
    sub_1000150E8((uint64_t)v45, &qword_100175348);
    v48 = v98;
    if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
    {
      sub_1000557E4(0, v48[2] + 1, 1);
      v48 = v98;
    }
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
    {
      sub_1000557E4(v49 > 1, v50 + 1, 1);
      v48 = v98;
    }
    v48[2] = v50 + 1;
    v51 = (char *)&v48[2 * v50];
    *((_QWORD *)v51 + 4) = v46;
    *((_QWORD *)v51 + 5) = v47;
    v23 = v94;
    v29 = *(_BYTE *)(v94 + 32);
    v30 = 1 << v29;
    if (v26 >= 1 << v29)
      goto LABEL_67;
    v28 = v93;
    v52 = *(_QWORD *)(v93 + 8 * v32);
    if ((v52 & v97) == 0)
      goto LABEL_68;
    if (*(_DWORD *)(v94 + 36) != (_DWORD)v96)
      goto LABEL_69;
    v53 = v52 & (-2 << (v26 & 0x3F));
    if (v53)
    {
      v30 = __clz(__rbit64(v53)) | v26 & 0xFFFFFFFFFFFFFFC0;
      v31 = v91;
    }
    else
    {
      v54 = v32 + 1;
      v55 = (v30 + 63) >> 6;
      v31 = v91;
      if (v32 + 1 < v55)
      {
        v56 = *(_QWORD *)(v93 + 8 * v54);
        if (!v56)
        {
          v54 = v32 + 2;
          if (v32 + 2 >= v55)
            goto LABEL_29;
          v56 = *(_QWORD *)(v93 + 8 * v54);
          if (!v56)
          {
            while (v55 - 3 != v32)
            {
              v56 = *(_QWORD *)(v80 + 8 * v32++);
              if (v56)
              {
                v54 = v32 + 2;
                goto LABEL_44;
              }
            }
            goto LABEL_29;
          }
        }
LABEL_44:
        v30 = __clz(__rbit64(v56)) + (v54 << 6);
      }
    }
LABEL_29:
    v27 = v95 + 1;
    v25 = v92;
    v26 = v30;
    if (v95 + 1 == v31)
    {
      v22 = v82;
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_100073D70(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = sub_100008E84(&qword_100177CB0);
  v3._countAndFlagsBits = Dictionary.description.getter(a1, &type metadata for String, v2, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000021;
}

uint64_t sub_100073E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;

  v6 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_1001752E8);
  v14 = CBOREncodedCBOR.value.getter(v13);
  ISO18013IssuerSignedItem.elementValue.getter(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = type metadata accessor for AnyCodable(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
  v16 = CBOREncodedCBOR.dataValue.getter(v13);
  v18 = v17;
  v19 = type metadata accessor for CredentialElement(0);
  sub_100075EE0((uint64_t)v12, (uint64_t)a3 + *(int *)(v19 + 20));
  *a3 = a1;
  a3[1] = a2;
  v20 = (_QWORD *)((char *)a3 + *(int *)(v19 + 24));
  *v20 = v16;
  v20[1] = v18;
  swift_bridgeObjectRetain(a2);
  return sub_1000150E8((uint64_t)v12, &qword_1001752C8);
}

Swift::Int sub_100073F7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100008E84(&qword_100176A30);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v9 + 40));
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v34, v20, v19);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100074214(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[9];

  v8 = sub_100008E84(&qword_1001752E8);
  v49 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v48 = (char *)&v43 - v12;
  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (Swift::Int)a4;
  }
  v47 = v11;
  sub_100008E84(&qword_100176A28);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v14 = result;
  v44 = a1;
  v45 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  v18 = v47;
  v19 = v48;
  v46 = a4;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v50 = v16;
      v21 = v20 | (v16 << 6);
    }
    else
    {
      v22 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v22 >= v45)
        return v14;
      v23 = v44[v22];
      v24 = v16 + 1;
      if (!v23)
      {
        v24 = v16 + 2;
        if (v16 + 2 >= v45)
          return v14;
        v23 = v44[v24];
        if (!v23)
        {
          v24 = v16 + 3;
          if (v16 + 3 >= v45)
            return v14;
          v23 = v44[v24];
          if (!v23)
          {
            v25 = v16 + 4;
            if (v16 + 4 >= v45)
              return v14;
            v23 = v44[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v45)
                  return v14;
                v23 = v44[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v16 + 4;
          }
        }
      }
LABEL_24:
      v15 = (v23 - 1) & v23;
      v50 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = a4[7];
    v27 = (uint64_t *)(a4[6] + 16 * v21);
    v28 = *v27;
    v29 = v27[1];
    v30 = v49;
    v31 = *(_QWORD *)(v49 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v19, v26 + v31 * v21, v18);
    v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v32(v51, v19, v18);
    Hasher.init(_seed:)(v52, *(_QWORD *)(v14 + 40));
    swift_bridgeObjectRetain(v29);
    String.hash(into:)(v52, v28, v29);
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v36 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v18 = v47;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v33) >> 6;
      v18 = v47;
      do
      {
        if (++v35 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v39 = v35 == v38;
        if (v35 == v38)
          v35 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v40 == -1);
      v36 = __clz(__rbit64(~v40)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    v41 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v36);
    *v41 = v28;
    v41[1] = v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(_QWORD *)(v14 + 56) + v36 * v31, v51, v18);
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v46;
    v16 = v50;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100074560(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v9 = *v8;
    v10 = v8[1];
    v11 = type metadata accessor for ISO18013Package.Document(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v6, v7 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a2, v11);
    swift_bridgeObjectRetain(v10);
    return v9;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100074618(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v9 = *v8;
    v10 = v8[1];
    v11 = sub_100008E84(&qword_1001752E8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v6, v7 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a2, v11);
    swift_bridgeObjectRetain(v10);
    return v9;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000746D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD, char *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;

  v56 = a2;
  v57 = a3;
  v55 = sub_100008E84(&qword_100175348);
  v5 = __chkstk_darwin(v55);
  v54 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v53 = (_QWORD *)((char *)v45 - v8);
  __chkstk_darwin(v7);
  v52 = (char *)v45 - v9;
  v10 = type metadata accessor for CredentialElement(0);
  v51 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = &_swiftEmptyArrayStorage;
  if (!v13)
    return (uint64_t)v14;
  v45[1] = v3;
  v62 = &_swiftEmptyArrayStorage;
  sub_1000557B8(0, v13, 0);
  result = sub_1000ED080(a1);
  v17 = result;
  v18 = 0;
  v19 = a1 + 64;
  v58 = a1 + 80;
  v49 = v12;
  v50 = a1;
  v46 = v13;
  v47 = v16;
  v48 = a1 + 64;
  v20 = v55;
  while ((v17 & 0x8000000000000000) == 0 && (uint64_t)v17 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = v17 >> 6;
    if ((*(_QWORD *)(v19 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v16)
      goto LABEL_26;
    v59 = v18;
    v60 = 1 << v17;
    v22 = v52;
    v23 = &v52[*(int *)(v20 + 48)];
    v24 = *(_QWORD *)(a1 + 56);
    v25 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v17);
    v27 = *v25;
    v26 = v25[1];
    v28 = sub_100008E84(&qword_1001752E8);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(_QWORD *)(v29 + 72);
    v61 = v17;
    v31 = v24 + v30 * v17;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v32(v23, v31, v28);
    *v22 = v27;
    v22[1] = v26;
    v33 = (uint64_t)v53;
    *v53 = v27;
    *(_QWORD *)(v33 + 8) = v26;
    v32((char *)(v33 + *(int *)(v20 + 48)), (uint64_t)v23, v28);
    v34 = v54;
    sub_100075E40(v33, (uint64_t)v54);
    swift_bridgeObjectRetain_n(v26, 2);
    v35 = (uint64_t)v22;
    v36 = (uint64_t)v49;
    sub_1000150E8(v35, &qword_100175348);
    v56(*(_QWORD *)v34, *((_QWORD *)v34 + 1), &v34[*(int *)(v20 + 48)]);
    sub_1000150E8((uint64_t)v34, &qword_100175348);
    v14 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
    {
      sub_1000557B8(0, v14[2] + 1, 1);
      v14 = v62;
    }
    v38 = v14[2];
    v37 = v14[3];
    v39 = v61;
    if (v38 >= v37 >> 1)
    {
      sub_1000557B8(v37 > 1, v38 + 1, 1);
      v14 = v62;
    }
    v14[2] = v38 + 1;
    result = sub_100075F28(v36, (uint64_t)v14+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v38);
    a1 = v50;
    v17 = 1 << *(_BYTE *)(v50 + 32);
    if (v39 >= (uint64_t)v17)
      goto LABEL_27;
    v19 = v48;
    v40 = *(_QWORD *)(v48 + 8 * v21);
    if ((v40 & v60) == 0)
      goto LABEL_28;
    LODWORD(v16) = v47;
    if (*(_DWORD *)(v50 + 36) != (_DWORD)v47)
      goto LABEL_29;
    v41 = v40 & (-2 << (v39 & 0x3F));
    if (v41)
    {
      v17 = __clz(__rbit64(v41)) | v39 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = v21 + 1;
      v43 = (v17 + 63) >> 6;
      if (v21 + 1 < v43)
      {
        v44 = *(_QWORD *)(v48 + 8 * v42);
        if (v44)
        {
LABEL_22:
          v17 = __clz(__rbit64(v44)) + (v42 << 6);
        }
        else
        {
          while (v43 - 2 != v21)
          {
            v44 = *(_QWORD *)(v58 + 8 * v21++);
            if (v44)
            {
              v42 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v18 = v59 + 1;
    if (v59 + 1 == v46)
      return (uint64_t)v14;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100074A9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  unint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v23 = (unint64_t *)result;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v25 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    while (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v6 << 6);
      if (*(_QWORD *)(a4 + 16))
        goto LABEL_4;
    }
    v19 = __OFADD__(v6++, 1);
    if (v19)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v6 >= v25)
      return sub_100073F7C(v23, a2, v24, a3);
    v20 = *(_QWORD *)(v7 + 8 * v6);
    if (!v20)
      break;
LABEL_18:
    v10 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v6 << 6);
    if (*(_QWORD *)(a4 + 16))
    {
LABEL_4:
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v18);
      v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v18);
      v13 = *v12;
      v14 = v12[1];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v11);
      sub_1000FBC04(v13, v14);
      v16 = v15;
      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v11);
      if ((v16 & 1) != 0)
      {
        *(unint64_t *)((char *)v23 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = __OFADD__(v24++, 1);
        if (v19)
        {
          __break(1u);
          return sub_100073F7C(v23, a2, v24, a3);
        }
      }
    }
  }
  v21 = v6 + 1;
  if (v6 + 1 >= v25)
    return sub_100073F7C(v23, a2, v24, a3);
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v6 + 2;
  if (v6 + 2 >= v25)
    return sub_100073F7C(v23, a2, v24, a3);
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v6 + 3;
  if (v6 + 3 >= v25)
    return sub_100073F7C(v23, a2, v24, a3);
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
LABEL_17:
    v6 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v6 >= v25)
      return sub_100073F7C(v23, a2, v24, a3);
    v20 = *(_QWORD *)(v7 + 8 * v6);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100074C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_100074A9C((uint64_t)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    v11 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_100074A9C((uint64_t)v12, v7, a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_100074E40(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v48 = a2;
  v53 = a5;
  v49 = a1;
  v57 = sub_100008E84(&qword_100175348);
  __chkstk_darwin(v57);
  v62 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100008E84(&qword_1001752E8);
  v10 = *(_QWORD *)(v61 - 8);
  result = __chkstk_darwin(v61);
  v60 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = 0;
  v51 = a6;
  v13 = 0;
  v14 = *(_QWORD *)(a3 + 64);
  v54 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v55 = (unint64_t)(v15 + 63) >> 6;
  v56 = v10;
  v52 = a4;
  while (1)
  {
    while (1)
    {
      if (v17)
      {
        v58 = (v17 - 1) & v17;
        v59 = v13;
        v18 = __clz(__rbit64(v17)) | (v13 << 6);
      }
      else
      {
        v19 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_46;
        if (v19 >= v55)
          return sub_100074214(v49, v48, v50, (_QWORD *)a3);
        v20 = *(_QWORD *)(v54 + 8 * v19);
        v21 = v13 + 1;
        if (!v20)
        {
          v21 = v13 + 2;
          if (v13 + 2 >= v55)
            return sub_100074214(v49, v48, v50, (_QWORD *)a3);
          v20 = *(_QWORD *)(v54 + 8 * v21);
          if (!v20)
          {
            v21 = v13 + 3;
            if (v13 + 3 >= v55)
              return sub_100074214(v49, v48, v50, (_QWORD *)a3);
            v20 = *(_QWORD *)(v54 + 8 * v21);
            if (!v20)
            {
              v22 = v13 + 4;
              if (v13 + 4 >= v55)
                return sub_100074214(v49, v48, v50, (_QWORD *)a3);
              v20 = *(_QWORD *)(v54 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  v21 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_47;
                  if (v21 >= v55)
                    return sub_100074214(v49, v48, v50, (_QWORD *)a3);
                  v20 = *(_QWORD *)(v54 + 8 * v21);
                  ++v22;
                  if (v20)
                    goto LABEL_21;
                }
              }
              v21 = v13 + 4;
            }
          }
        }
LABEL_21:
        v58 = (v20 - 1) & v20;
        v59 = v21;
        v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      v23 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v18);
      v24 = *v23;
      v25 = v23[1];
      v26 = *(_QWORD *)(a3 + 56) + *(_QWORD *)(v10 + 72) * v18;
      v27 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v29 = v60;
      v28 = v61;
      v27(v60, v26, v61);
      v30 = v62;
      *(_QWORD *)v62 = v24;
      *((_QWORD *)v30 + 1) = v25;
      v27(&v30[*(int *)(v57 + 48)], (unint64_t)v29, v28);
      v31 = *(_QWORD *)(a4 + 16);
      swift_bridgeObjectRetain_n(v25, 2);
      if (v31)
        break;
LABEL_5:
      sub_1000150E8((uint64_t)v62, &qword_100175348);
      v10 = v56;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v61);
      result = swift_bridgeObjectRelease(v25);
      v17 = v58;
      v13 = v59;
    }
    swift_bridgeObjectRetain(a6);
    v32 = sub_1000FBC04(v53, a6);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease(a6);
      goto LABEL_5;
    }
    v34 = *(_QWORD **)(*(_QWORD *)(a4 + 56) + 8 * v32);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(a6);
    v35 = v34[2];
    if (!v35)
    {
      swift_bridgeObjectRelease(v34);
      a4 = v52;
      goto LABEL_5;
    }
    v36 = a3;
    v37 = v34[4];
    v38 = v34[5];
    if (v37 != v24 || v38 != v25)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v24, v25, 0);
      if ((result & 1) == 0)
        break;
    }
LABEL_41:
    swift_bridgeObjectRelease(v34);
    sub_1000150E8((uint64_t)v62, &qword_100175348);
    v10 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v61);
    result = swift_bridgeObjectRelease(v25);
    *(unint64_t *)((char *)v49 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    a6 = v51;
    v46 = __OFADD__(v50++, 1);
    a3 = v36;
    a4 = v52;
    v17 = v58;
    v13 = v59;
    if (v46)
    {
      __break(1u);
      return sub_100074214(v49, v48, v50, (_QWORD *)a3);
    }
  }
  if (v35 == 1)
  {
LABEL_39:
    swift_bridgeObjectRelease(v34);
    a3 = v36;
    a6 = v51;
    a4 = v52;
    goto LABEL_5;
  }
  v40 = v34 + 7;
  v41 = 1;
  while (1)
  {
    v42 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    v43 = *(v40 - 1);
    v44 = *v40;
    if (v43 == v24 && v44 == v25)
      goto LABEL_41;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v24, v25, 0);
    if ((result & 1) != 0)
      goto LABEL_41;
    v40 += 2;
    ++v41;
    if (v42 == v35)
      goto LABEL_39;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_10007522C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v9 = *(_BYTE *)(a1 + 32);
  v10 = v9 & 0x3F;
  v11 = (unint64_t)((1 << v9) + 63) >> 6;
  v12 = 8 * v11;
  swift_bridgeObjectRetain_n(a2, 2);
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a4, 2);
  if (v10 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v12, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v18 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    v14 = sub_100074E40((unint64_t *)((char *)&v18 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0)), v11, a1, a2, a3, a4);
    swift_bridgeObjectRelease(a2);
    v15 = swift_bridgeObjectRelease(a4);
    if (v4)
      swift_willThrow(v15);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v16 = (void *)swift_slowAlloc(v12, -1);
    bzero(v16, v12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    v14 = sub_100074E40((unint64_t *)v16, v11, a1, a2, a3, a4);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_slowDealloc(v16, -1, -1);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
  }
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);
  return v14;
}

uint64_t sub_10007545C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int64_t v34;
  uint64_t v37;
  int64_t v38;

  v33 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v34 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  for (i = 0; ; i = v38)
  {
    if (v6)
    {
      v37 = (v6 - 1) & v6;
      v38 = i;
      v9 = __clz(__rbit64(v6)) | (i << 6);
    }
    else
    {
      v10 = __OFADD__(i, 1);
      v11 = i + 1;
      if (v10)
        goto LABEL_39;
      if (v11 >= v34)
      {
LABEL_36:
        swift_release(a2);
        return (uint64_t)a1;
      }
      v12 = *(_QWORD *)(v33 + 8 * v11);
      if (!v12)
      {
        v13 = v11 + 1;
        if (v11 + 1 >= v34)
          goto LABEL_36;
        v12 = *(_QWORD *)(v33 + 8 * v13);
        if (!v12)
        {
          v13 = v11 + 2;
          if (v11 + 2 >= v34)
            goto LABEL_36;
          v12 = *(_QWORD *)(v33 + 8 * v13);
          if (!v12)
          {
            v13 = v11 + 3;
            if (v11 + 3 >= v34)
              goto LABEL_36;
            v12 = *(_QWORD *)(v33 + 8 * v13);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v11 + 4 >= v34)
                goto LABEL_36;
              v12 = *(_QWORD *)(v33 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v11 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_40;
                  if (v11 >= v34)
                    goto LABEL_36;
                  v12 = *(_QWORD *)(v33 + 8 * v11);
                  ++v13;
                  if (v12)
                    goto LABEL_20;
                }
              }
            }
          }
        }
        v11 = v13;
      }
LABEL_20:
      v37 = (v12 - 1) & v12;
      v38 = v11;
      v9 = __clz(__rbit64(v12)) + (v11 << 6);
    }
    v14 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v9);
    swift_bridgeObjectRetain_n(v15, 2);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(a3);
    v18 = sub_10007522C(v17, a3, v16, v15);
    swift_bridgeObjectRelease(a3);
    v19 = sub_1000746D4(v18, (void (*)(_QWORD, _QWORD, char *))sub_100075F6C, 0);
    swift_release(v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v22 = sub_1000FBC04(v16, v15);
    v23 = a1[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (a1[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10007DB18();
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10007BB34(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_1000FBC04(v16, v15);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_41;
      v22 = v27;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        v8 = a1[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8 * v22));
        *(_QWORD *)(v8 + 8 * v22) = v19;
        goto LABEL_5;
      }
    }
    a1[(v22 >> 6) + 8] |= 1 << v22;
    v29 = (uint64_t *)(a1[6] + 16 * v22);
    *v29 = v16;
    v29[1] = v15;
    *(_QWORD *)(a1[7] + 8 * v22) = v19;
    v30 = a1[2];
    v10 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    if (v10)
      goto LABEL_38;
    a1[2] = v31;
    swift_bridgeObjectRetain(v15);
LABEL_5:
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v6 = v37;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000757BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t result;
  _BYTE v73[16];
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;

  v86 = sub_100008E84(&qword_100175348);
  v2 = __chkstk_darwin(v86);
  v85 = (uint64_t *)&v73[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __chkstk_darwin(v2);
  v84 = &v73[-v5];
  __chkstk_darwin(v4);
  v83 = &v73[-v6];
  v7 = *(_QWORD *)(a1 + 64);
  v74 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v75 = (unint64_t)(v8 + 63) >> 6;
  v77 = a1;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  v81 = _swiftEmptyDictionarySingleton;
  v12 = v83;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v15 = (v10 - 1) & v10;
      v16 = v14 | (v11 << 6);
    }
    else
    {
      v17 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_70;
      if (v17 >= v75)
        goto LABEL_61;
      v18 = *(_QWORD *)(v74 + 8 * v17);
      ++v11;
      if (!v18)
      {
        v11 = v17 + 1;
        if (v17 + 1 >= v75)
          goto LABEL_61;
        v18 = *(_QWORD *)(v74 + 8 * v11);
        if (!v18)
        {
          v11 = v17 + 2;
          if (v17 + 2 >= v75)
            goto LABEL_61;
          v18 = *(_QWORD *)(v74 + 8 * v11);
          if (!v18)
          {
            v11 = v17 + 3;
            if (v17 + 3 >= v75)
              goto LABEL_61;
            v18 = *(_QWORD *)(v74 + 8 * v11);
            if (!v18)
            {
              v11 = v17 + 4;
              if (v17 + 4 >= v75)
                goto LABEL_61;
              v18 = *(_QWORD *)(v74 + 8 * v11);
              if (!v18)
              {
                v19 = v17 + 5;
                if (v19 >= v75)
                  goto LABEL_61;
                v18 = *(_QWORD *)(v74 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v11 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      goto LABEL_71;
                    if (v11 >= v75)
                      break;
                    v18 = *(_QWORD *)(v74 + 8 * v11);
                    ++v19;
                    if (v18)
                      goto LABEL_25;
                  }
LABEL_61:
                  swift_release(v77);
                  return (uint64_t)v81;
                }
                v11 = v19;
              }
            }
          }
        }
      }
LABEL_25:
      v15 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v11 << 6);
    }
    v79 = v15;
    v80 = v11;
    v20 = *(_QWORD *)(v77 + 56);
    v21 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v16);
    v22 = v21[1];
    v82 = *v21;
    v23 = *(_QWORD *)(v20 + 8 * v16);
    v24 = *(_QWORD *)(v23 + 16);
    v90 = v23;
    if (v24)
      break;
    swift_bridgeObjectRetain_n(v22, 2);
    swift_bridgeObjectRetain(v23);
    v47 = _swiftEmptyArrayStorage;
LABEL_52:
    v57 = v81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
    v95 = v57;
    v60 = sub_1000FBC04(v82, v22);
    v61 = v57[2];
    v62 = (v59 & 1) == 0;
    v63 = v61 + v62;
    if (__OFADD__(v61, v62))
      goto LABEL_68;
    v64 = v59;
    if (v57[3] >= v63)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_10007DF80();
    }
    else
    {
      sub_10007C1D0(v63, isUniquelyReferenced_nonNull_native);
      v65 = sub_1000FBC04(v82, v22);
      if ((v64 & 1) != (v66 & 1))
        goto LABEL_72;
      v60 = v65;
    }
    v67 = v95;
    v81 = v95;
    if ((v64 & 1) != 0)
    {
      v13 = v95[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8 * v60));
      *(_QWORD *)(v13 + 8 * v60) = v47;
    }
    else
    {
      v95[(v60 >> 6) + 8] |= 1 << v60;
      v68 = (_QWORD *)(v67[6] + 16 * v60);
      *v68 = v82;
      v68[1] = v22;
      *(_QWORD *)(v67[7] + 8 * v60) = v47;
      v69 = v67[2];
      v70 = __OFADD__(v69, 1);
      v71 = v69 + 1;
      if (v70)
        goto LABEL_69;
      v67[2] = v71;
      swift_bridgeObjectRetain(v22);
    }
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v10 = v79;
    v11 = v80;
  }
  v95 = _swiftEmptyArrayStorage;
  v78 = v22;
  swift_bridgeObjectRetain_n(v22, 2);
  swift_bridgeObjectRetain(v23);
  sub_1000557E4(0, v24, 0);
  v26 = sub_1000ED080(v23);
  v27 = 0;
  v28 = v23 + 64;
  v29 = *(_BYTE *)(v23 + 32);
  v87 = v24;
  v88 = v25;
  v76 = v23 + 88;
  v89 = v23 + 64;
  while ((v26 & 0x8000000000000000) == 0 && v26 < 1 << v29)
  {
    if ((*(_QWORD *)(v28 + 8 * ((unint64_t)v26 >> 6)) & (1 << v26)) == 0)
      goto LABEL_63;
    if (*(_DWORD *)(v23 + 36) != (_DWORD)v25)
      goto LABEL_64;
    v92 = v25;
    v93 = 1 << v26;
    v94 = (unint64_t)v26 >> 6;
    v91 = v27;
    v32 = v86;
    v33 = (char *)v12 + *(int *)(v86 + 48);
    v34 = *(_QWORD *)(v23 + 48);
    v35 = *(_QWORD *)(v23 + 56);
    v36 = (uint64_t *)(v34 + 16 * v26);
    v38 = *v36;
    v37 = v36[1];
    v39 = sub_100008E84(&qword_1001752E8);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = v35 + *(_QWORD *)(v40 + 72) * v26;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v42(v33, v41, v39);
    *v12 = v38;
    v12[1] = v37;
    v43 = (uint64_t)v84;
    *v84 = v38;
    *(_QWORD *)(v43 + 8) = v37;
    v42((char *)(v43 + *(int *)(v32 + 48)), (uint64_t)v33, v39);
    v44 = v85;
    sub_100075E40(v43, (uint64_t)v85);
    swift_bridgeObjectRetain_n(v37, 2);
    sub_1000150E8((uint64_t)v12, &qword_100175348);
    v45 = *v44;
    v46 = v44[1];
    swift_bridgeObjectRetain(v46);
    sub_1000150E8((uint64_t)v44, &qword_100175348);
    v47 = v95;
    if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
    {
      sub_1000557E4(0, v47[2] + 1, 1);
      v47 = v95;
    }
    v49 = v47[2];
    v48 = v47[3];
    if (v49 >= v48 >> 1)
    {
      sub_1000557E4(v48 > 1, v49 + 1, 1);
      v47 = v95;
    }
    v47[2] = v49 + 1;
    v50 = &v47[2 * v49];
    v50[4] = v45;
    v50[5] = v46;
    v23 = v90;
    v29 = *(_BYTE *)(v90 + 32);
    v30 = 1 << v29;
    if (v26 >= 1 << v29)
      goto LABEL_65;
    v28 = v89;
    v51 = v94;
    v52 = *(_QWORD *)(v89 + 8 * v94);
    if ((v52 & v93) == 0)
      goto LABEL_66;
    if (*(_DWORD *)(v90 + 36) != (_DWORD)v92)
      goto LABEL_67;
    v53 = v52 & (-2 << (v26 & 0x3F));
    if (v53)
    {
      v30 = __clz(__rbit64(v53)) | v26 & 0xFFFFFFFFFFFFFFC0;
      v31 = v87;
    }
    else
    {
      v54 = v94 + 1;
      v55 = (v30 + 63) >> 6;
      v31 = v87;
      if (v94 + 1 < v55)
      {
        v56 = *(_QWORD *)(v89 + 8 * v54);
        if (!v56)
        {
          v54 = v94 + 2;
          if (v94 + 2 >= v55)
            goto LABEL_29;
          v56 = *(_QWORD *)(v89 + 8 * v54);
          if (!v56)
          {
            while (v55 - 3 != v51)
            {
              v56 = *(_QWORD *)(v76 + 8 * v51++);
              if (v56)
              {
                v54 = v51 + 2;
                goto LABEL_44;
              }
            }
            goto LABEL_29;
          }
        }
LABEL_44:
        v30 = __clz(__rbit64(v56)) + (v54 << 6);
      }
    }
LABEL_29:
    v27 = v91 + 1;
    v25 = v88;
    v26 = v30;
    if (v91 + 1 == v31)
    {
      v22 = v78;
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100075E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100175348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100075E88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100075EC8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100075EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001752C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CredentialElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[6] = a4;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001754B8);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MobileAssetType(0);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[15] = v11;
  v4[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v4[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[18] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v14);
  v4[20] = swift_task_alloc(v14);
  v4[21] = swift_task_alloc(v14);
  v4[22] = swift_task_alloc(v14);
  v4[23] = swift_task_alloc(v14);
  v4[24] = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  v4[25] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[26] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v17);
  v4[28] = swift_task_alloc(v17);
  v4[29] = swift_task_alloc(v17);
  v4[30] = swift_task_alloc(v17);
  v4[31] = swift_task_alloc(v17);
  v4[32] = swift_task_alloc(v17);
  v4[33] = swift_task_alloc(v17);
  return swift_task_switch(sub_10007614C, 0, 0);
}

uint64_t sub_10007614C()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[34] = os_transaction_create("MobileAssetFetch.refresh");
  v1 = (uint64_t **)swift_task_alloc(dword_100176A44);
  v0[35] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000761D8;
  return sub_1000776FC(2, 0, v0[6]);
}

uint64_t sub_1000761D8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 280);
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000770D4;
  }
  else
  {
    *(_BYTE *)(v4 + 328) = a1 & 1;
    v6 = sub_100076294;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100076294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(v1 + 328) == 1)
  {
    v2 = defaultLogger()(a1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Proceeding with fetching MobileAssets", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v1 + 264);
    v7 = *(_QWORD *)(v1 + 200);
    v8 = *(_QWORD *)(v1 + 208);
    v10 = *(_QWORD *)(v1 + 120);
    v9 = *(_QWORD *)(v1 + 128);
    v11 = *(_QWORD *)(v1 + 112);

    v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    *(_QWORD *)(v1 + 296) = v12;
    v12(v6, v7);
    v13 = type metadata accessor for MobileAssetManager(0);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    *(_QWORD *)(v1 + 16) = MobileAssetManager.init()();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for MobileAssetType.coreidvassets(_:), v11);
    v14 = sub_10003E8C8((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v1 + 304) = v14;
    v15 = (_QWORD *)swift_task_alloc(async function pointer to MobileAssetManagerProtocol.retrieveMostRecentAssetByCreationDate(assetType:filters:)[1]);
    *(_QWORD *)(v1 + 312) = v15;
    *v15 = v1;
    v15[1] = sub_10007666C;
    return MobileAssetManagerProtocol.retrieveMostRecentAssetByCreationDate(assetType:filters:)(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 128), v14, v13, &protocol witness table for MobileAssetManager);
  }
  else
  {
    v17 = defaultLogger()(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "no mDL, skipping MobileAssets", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v21 = *(_QWORD *)(v1 + 240);
    v22 = *(_QWORD *)(v1 + 200);
    v23 = *(_QWORD *)(v1 + 208);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8);
    v25 = v24(v21, v22);
    v26 = defaultLogger()(v25);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Finished MobileAsset refresh", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    v30 = *(_QWORD *)(v1 + 272);
    v31 = *(_QWORD *)(v1 + 232);
    v32 = *(_QWORD *)(v1 + 200);

    v24(v31, v32);
    swift_unknownObjectRelease(v30, v33);
    v34 = *(_QWORD *)(v1 + 256);
    v36 = *(_QWORD *)(v1 + 240);
    v35 = *(_QWORD *)(v1 + 248);
    v38 = *(_QWORD *)(v1 + 224);
    v37 = *(_QWORD *)(v1 + 232);
    v39 = *(_QWORD *)(v1 + 216);
    v40 = *(_QWORD *)(v1 + 184);
    v41 = *(_QWORD *)(v1 + 192);
    v42 = *(_QWORD *)(v1 + 176);
    v43 = *(_QWORD *)(v1 + 168);
    v44 = *(_QWORD *)(v1 + 160);
    v45 = *(_QWORD *)(v1 + 152);
    v46 = *(_QWORD *)(v1 + 128);
    v47 = *(_QWORD *)(v1 + 104);
    v48 = *(_QWORD *)(v1 + 96);
    v49 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 264));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007666C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  v5 = v2[15];
  v4 = v2[16];
  v6 = v2[14];
  swift_bridgeObjectRelease(v2[38]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v2[2]);
  if (v0)
    v7 = sub_1000773E8;
  else
    v7 = sub_10007674C;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10007674C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSURL *v81;
  void *v82;
  void *v83;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint8_t *v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  id v116;
  id v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v3 = *(_QWORD *)(v1 + 184);
  v2 = *(_QWORD *)(v1 + 192);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 144);
  defaultLogger()(a1);
  v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6 = v118(v3, v2, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v111 = *(_QWORD *)(v1 + 256);
    v115 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v9 = *(_QWORD *)(v1 + 184);
    v10 = *(_QWORD *)(v1 + 144);
    v104 = *(_QWORD *)(v1 + 136);
    v107 = *(_QWORD *)(v1 + 200);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v122 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = URL.debugDescription.getter();
    v15 = v14;
    *(_QWORD *)(v1 + 40) = sub_10003FA80(v13, v14, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v11 + 4);
    swift_bridgeObjectRelease(v15);
    v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v16(v9, v104);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "MobileAsset available at directory %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v115(v111, v107);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v18 = *(_QWORD *)(v1 + 256);
    v19 = *(_QWORD *)(v1 + 200);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 144) + 8);
    v16(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 136));

    v17(v18, v19);
  }
  v20 = *(_QWORD *)(v1 + 320);
  v21 = *(_QWORD *)(v1 + 176);
  URL.appendingPathComponent(_:)(0xD000000000000015, 0x8000000100132780);
  v22 = Data.init(contentsOf:options:)(v21, 8);
  v24 = v20;
  if (v20)
  {
    v25 = *(_QWORD *)(v1 + 192);
    v26 = *(_QWORD *)(v1 + 136);
    v16(*(_QWORD *)(v1 + 176), v26);
    v27 = v25;
    v28 = v26;
LABEL_7:
    v16(v27, v28);
    v37 = *(_QWORD *)(v1 + 208);
    v36 = *(_QWORD *)(v1 + 216);
    v38 = *(_QWORD *)(v1 + 200);
    v40 = *(_QWORD *)(v1 + 88);
    v39 = *(_QWORD *)(v1 + 96);
    v42 = *(_QWORD *)(v1 + 72);
    v41 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v42, enum case for DIPError.Code.mobileAssetRefreshFailure(_:), *(_QWORD *)(v1 + 56));
    swift_errorRetain(v24);
    v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x80000001001326C0, v24, v42, 0, v43, 0xD00000000000005BLL, 0x80000001001326F0, 0xD000000000000023, 0x8000000100132750, 56);
    v44 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v45 = swift_allocError(v41, v44, 0, 0);
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v46, v39, v41);
    defaultLogger()(v47);
    DIPRecordError(_:message:log:)(v45, 0, 0xE000000000000000, v36);
    swift_errorRelease(v24);
    v48 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v48(v36, v38);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    v49 = swift_errorRelease(v45);
    goto LABEL_8;
  }
  v29 = v22;
  v30 = v23;
  v31 = type metadata accessor for JSONDecoder(0);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v33 = JSONDecoder.init()(v32);
  v34 = type metadata accessor for CoreIDVAsset(0);
  v35 = sub_1000058C8(&qword_1001754D0, (uint64_t (*)(uint64_t))&type metadata accessor for CoreIDVAsset, (uint64_t)&protocol conformance descriptor for CoreIDVAsset);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v34, v29, v30, v34, v35);
  v68 = *(_QWORD *)(v1 + 136);
  swift_release(*(_QWORD *)(v1 + 24));
  swift_release(v33);
  v69 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v70 = 1;
  v71 = objc_msgSend(v69, "URLsForDirectory:inDomains:", 5, 1);
  v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, v68);

  v117 = v69;
  if (*(_QWORD *)(v72 + 16))
  {
    v73 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 144) + 80);
    v118(*(_QWORD *)(v1 + 104), v72 + ((v73 + 32) & ~v73), *(_QWORD *)(v1 + 136));
    v70 = 0;
  }
  v75 = *(_QWORD *)(v1 + 136);
  v74 = *(_QWORD *)(v1 + 144);
  v76 = *(_QWORD *)(v1 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v76, v70, 1, v75);
  swift_bridgeObjectRelease(v72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v75) == 1)
  {
    v77 = *(_QWORD *)(v1 + 192);
    v78 = *(_QWORD *)(v1 + 176);
    v79 = *(_QWORD *)(v1 + 136);
    v80 = *(_QWORD *)(v1 + 104);

    sub_100005AB0(v29, v30);
    v16(v78, v79);
    v16(v77, v79);
    v49 = sub_100079D68(v80);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 32))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 136));
    URL.appendingPathComponent(_:isDirectory:)(0x2F64646572636469, 0xEE00737465737361, 1);
    URL._bridgeToObjectiveC()(v81);
    v83 = v82;
    *(_QWORD *)(v1 + 32) = 0;
    v84 = objc_msgSend(v117, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v82, 1, 0, v1 + 32);

    v85 = *(void **)(v1 + 32);
    if (!v84)
    {
      v120 = *(_QWORD *)(v1 + 192);
      v89 = *(_QWORD *)(v1 + 160);
      v109 = *(_QWORD *)(v1 + 168);
      v113 = *(_QWORD *)(v1 + 176);
      v90 = *(_QWORD *)(v1 + 136);
      v91 = v85;
      v24 = _convertNSErrorToError(_:)(v85);

      swift_willThrow(v92);
      sub_100005AB0(v29, v30);
      v16(v89, v90);
      v16(v109, v90);
      v16(v113, v90);
      v27 = v120;
      v28 = v90;
      goto LABEL_7;
    }
    v86 = *(_QWORD *)(v1 + 152);
    v87 = v85;
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x80000001001327A0, 0);
    v88 = Data.write(to:options:)(v86, 0x40000000, v29, v30);
    v93 = defaultLogger()(v88);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "Copied Asset to local cache", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
    }
    v97 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v98 = *(_QWORD *)(v1 + 248);
    v99 = *(_QWORD *)(v1 + 200);
    v121 = *(_QWORD *)(v1 + 192);
    v110 = *(_QWORD *)(v1 + 168);
    v114 = *(_QWORD *)(v1 + 176);
    v100 = *(_QWORD *)(v1 + 152);
    v106 = *(_QWORD *)(v1 + 160);
    v101 = *(_QWORD *)(v1 + 136);

    sub_100005AB0(v29, v30);
    v97(v98, v99);
    v16(v100, v101);
    v16(v106, v101);
    v16(v110, v101);
    v16(v114, v101);
    v49 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v121, v101);
  }
  v48 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
LABEL_8:
  v50 = defaultLogger()(v49);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Finished MobileAsset refresh", v53, 2u);
    swift_slowDealloc(v53, -1, -1);
  }
  v54 = *(_QWORD *)(v1 + 272);
  v55 = *(_QWORD *)(v1 + 224);
  v56 = *(_QWORD *)(v1 + 200);

  v48(v55, v56);
  swift_unknownObjectRelease(v54, v57);
  v58 = *(_QWORD *)(v1 + 256);
  v60 = *(_QWORD *)(v1 + 240);
  v59 = *(_QWORD *)(v1 + 248);
  v62 = *(_QWORD *)(v1 + 224);
  v61 = *(_QWORD *)(v1 + 232);
  v63 = *(_QWORD *)(v1 + 216);
  v64 = *(_QWORD *)(v1 + 184);
  v65 = *(_QWORD *)(v1 + 192);
  v66 = *(_QWORD *)(v1 + 176);
  v102 = *(_QWORD *)(v1 + 168);
  v103 = *(_QWORD *)(v1 + 160);
  v105 = *(_QWORD *)(v1 + 152);
  v108 = *(_QWORD *)(v1 + 128);
  v112 = *(_QWORD *)(v1 + 104);
  v116 = *(id *)(v1 + 96);
  v119 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 264));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v108);
  swift_task_dealloc(v112);
  swift_task_dealloc(v116);
  swift_task_dealloc(v119);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000770D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v8, enum case for DIPError.Code.mobileAssetRefreshFailure(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x80000001001326C0, v1, v8, 0, v9, 0xD00000000000005BLL, 0x80000001001326F0, 0xD000000000000023, 0x8000000100132750, 56);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = swift_errorRelease(v11);
  v16 = defaultLogger()(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Finished MobileAsset refresh", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
  v20 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);

  v14(v21, v22);
  swift_unknownObjectRelease(v20, v23);
  v24 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 184);
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 168);
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 128);
  v38 = *(_QWORD *)(v0 + 104);
  v39 = *(_QWORD *)(v0 + 96);
  v40 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000773E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v8, enum case for DIPError.Code.mobileAssetRefreshFailure(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x80000001001326C0, v1, v8, 0, v9, 0xD00000000000005BLL, 0x80000001001326F0, 0xD000000000000023, 0x8000000100132750, 56);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = swift_errorRelease(v11);
  v16 = defaultLogger()(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Finished MobileAsset refresh", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
  v20 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);

  v14(v21, v22);
  swift_unknownObjectRelease(v20, v23);
  v24 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 184);
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 168);
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 128);
  v38 = *(_QWORD *)(v0 + 104);
  v39 = *(_QWORD *)(v0 + 96);
  v40 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000776FC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v3 + 325) = a2;
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = a3;
  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  *(_QWORD *)(v3 + 136) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 144) = v5;
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FeatureFlagProvider(0);
  *(_QWORD *)(v3 + 160) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 168) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 192) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 200) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 216) = swift_task_alloc(v11);
  return swift_task_switch(sub_1000777D0, 0, 0);
}

uint64_t sub_1000777D0()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x80000001001327C0;
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "internal setting to force credential present", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 136);
    *(_BYTE *)(v0 + 324) = 0;
    *(_QWORD *)(v0 + 40) = &type metadata for CredentialDecryptionKeyIdentifierProvider;
    *(_QWORD *)(v0 + 48) = &off_100167928;
    v22 = type metadata accessor for PayloadProcessorBuilder();
    v23 = swift_allocObject(v22, 16, 7);
    swift_retain(v21);
    v24 = sub_100079C04();
    FeatureFlagProvider.init()();
    sub_100079DA8(v0 + 16, v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
    *(_QWORD *)(v0 + 224) = sub_100079DE4((uint64_t)&off_100167148, v21, 0, v0 + 56, v23, (uint64_t)v24, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v20);
    sub_10006CA58(v0 + 16);
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v30, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v32);
    v26 = ISO18013KnownDocTypes.rawValue.getter(v25);
    v28 = v27;
    *(_QWORD *)(v0 + 232) = v27;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    v29 = (_QWORD *)swift_task_alloc(dword_10017705C);
    *(_QWORD *)(v0 + 240) = v29;
    *v29 = v0;
    v29[1] = sub_100077A98;
    return sub_10008BD4C((uint64_t)&off_100167148, v26, v28);
  }
}

uint64_t sub_100077A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 232);
  v4 = *(_QWORD *)(*v2 + 240);
  *(_QWORD *)(v3 + 248) = a1;
  *(_QWORD *)(v3 + 256) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (v1)
    v6 = sub_10007802C;
  else
    v6 = sub_100077B0C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100077B0C()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (_BYTE *)(v0 + 324);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)"");
  if (!v3)
  {
    v16 = v2;
LABEL_8:
    swift_bridgeObjectRelease(v16);
    v17 = *(_QWORD *)"";
    goto LABEL_9;
  }
  v4 = sub_1000FBC04(*(uint64_t *)"identity", *(uint64_t *)"");
  v5 = *(_QWORD *)(v0 + 248);
  if ((v6 & 1) == 0)
  {
    v16 = *(_QWORD *)(v0 + 248);
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(v0 + 325);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v4);
  *(_QWORD *)(v0 + 264) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)"");
  if ((v7 & 1) != 0)
  {
    v18 = swift_bridgeObjectRelease(v8);
    *v1 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v0 + 272) = v9;
  if (v9)
  {
    *(_QWORD *)(v0 + 280) = 0;
    v10 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v0 + 288) = v11;
    v12 = *(_QWORD *)(v10 + 32);
    v13 = dword_10017704C;
    swift_bridgeObjectRetain(v11);
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 296) = v14;
    *v14 = v0;
    v14[1] = sub_100077D80;
    return sub_10008C39C(v12, v11);
  }
  v17 = v8;
LABEL_9:
  v18 = swift_bridgeObjectRelease(v17);
LABEL_10:
  v19 = defaultLogger()(v18);
  v20 = *v1;
  v21 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v23 = 67109120;
    *(_DWORD *)(v0 + 320) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 324, v23 + 4);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "hasDriversLicense = %{BOOL}d", v23, 8u);
    swift_slowDealloc(v23, -1, -1);
  }
  v25 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 224));

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  swift_beginAccess(v0 + 324, v0 + 96, 0, 0);
  v27 = *v1;
  v28 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 184);
  v31 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

uint64_t sub_100077D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  *(_QWORD *)(*(_QWORD *)v2 + 304) = v1;
  swift_task_dealloc(v5);
  v6 = v4[36];
  if (v1)
  {
    swift_bridgeObjectRelease(v4[33]);
    swift_bridgeObjectRelease(v6);
    v7 = sub_1000780A8;
  }
  else
  {
    swift_bridgeObjectRelease(v4[36]);
    v4[39] = a1;
    v7 = sub_100077E10;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100077E10()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(void **)(v0 + 312);
  v2 = *(id *)(v0 + 120);
  v3 = objc_msgSend(v1, "credentialState");

  if (v3 == v2)
  {
    v4 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    *(_BYTE *)(v0 + 324) = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 280) + 1;
    if (v5 != *(_QWORD *)(v0 + 272))
    {
      *(_QWORD *)(v0 + 280) = v5;
      v20 = *(_QWORD *)(v0 + 264) + 16 * v5;
      v21 = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v0 + 288) = v21;
      v22 = *(_QWORD *)(v20 + 32);
      v23 = dword_10017704C;
      swift_bridgeObjectRetain(v21);
      v24 = (_QWORD *)swift_task_alloc(v23);
      *(_QWORD *)(v0 + 296) = v24;
      *v24 = v0;
      v24[1] = sub_100077D80;
      return sub_10008C39C(v22, v21);
    }
    v4 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
  }
  v6 = defaultLogger()(v4);
  v7 = *(unsigned __int8 *)(v0 + 324);
  v8 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    *(_DWORD *)(v0 + 320) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 324, v10 + 4);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "hasDriversLicense = %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 224));

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_beginAccess(v0 + 324, v0 + 96, 0, 0);
  v14 = *(unsigned __int8 *)(v0 + 324);
  v15 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_10007802C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000780A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100078124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[15] = a4;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v4[18] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v4[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[20] = v8;
  v4[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001754B8);
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v4[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[24] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v12);
  v4[26] = swift_task_alloc(v12);
  v4[27] = swift_task_alloc(v12);
  v13 = type metadata accessor for MobileAssetType(0);
  v4[28] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[29] = v14;
  v4[30] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v4[31] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[32] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[33] = swift_task_alloc(v17);
  v4[34] = swift_task_alloc(v17);
  v4[35] = swift_task_alloc(v17);
  v4[36] = swift_task_alloc(v17);
  v4[37] = swift_task_alloc(v17);
  v4[38] = swift_task_alloc(v17);
  v4[39] = swift_task_alloc(v17);
  v4[40] = swift_task_alloc(v17);
  v4[41] = swift_task_alloc(v17);
  return swift_task_switch(sub_1000782F4, 0, 0);
}

uint64_t sub_1000782F4()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[42] = os_transaction_create("MobileAssetFetch.clearCache");
  v1 = (uint64_t **)swift_task_alloc(dword_100176A44);
  v0[43] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100078380;
  return sub_1000776FC(0, 1, v0[15]);
}

uint64_t sub_100078380(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(*v2 + 352) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10007904C;
  }
  else
  {
    *(_BYTE *)(v4 + 384) = a1 & 1;
    v6 = sub_10007843C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10007843C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if ((*(_BYTE *)(v1 + 384) & 1) != 0)
  {
    v2 = defaultLogger()(a1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "skipping clearing as we still have mDL ", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v1 + 304);
    v7 = *(_QWORD *)(v1 + 248);
    v8 = *(_QWORD *)(v1 + 256);

    v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    v10 = v9(v6, v7);
    v11 = defaultLogger()(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finished clear Cached Assets", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    v15 = *(_QWORD *)(v1 + 336);
    v16 = *(_QWORD *)(v1 + 296);
    v17 = *(_QWORD *)(v1 + 248);

    v9(v16, v17);
    swift_unknownObjectRelease(v15, v18);
    v19 = *(_QWORD *)(v1 + 320);
    v21 = *(_QWORD *)(v1 + 304);
    v20 = *(_QWORD *)(v1 + 312);
    v23 = *(_QWORD *)(v1 + 288);
    v22 = *(_QWORD *)(v1 + 296);
    v25 = *(_QWORD *)(v1 + 272);
    v24 = *(_QWORD *)(v1 + 280);
    v26 = *(_QWORD *)(v1 + 264);
    v27 = *(_QWORD *)(v1 + 240);
    v42 = *(_QWORD *)(v1 + 216);
    v43 = *(_QWORD *)(v1 + 208);
    v44 = *(_QWORD *)(v1 + 200);
    v45 = *(_QWORD *)(v1 + 176);
    v46 = *(_QWORD *)(v1 + 168);
    v47 = *(_QWORD *)(v1 + 144);
    swift_task_dealloc(*(_QWORD *)(v1 + 328));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v29 = defaultLogger()(a1);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Proceeding with clearing Cached MobileAssets", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }
    v33 = *(_QWORD *)(v1 + 328);
    v34 = *(_QWORD *)(v1 + 248);
    v35 = *(_QWORD *)(v1 + 256);
    v37 = *(_QWORD *)(v1 + 232);
    v36 = *(_QWORD *)(v1 + 240);
    v38 = *(_QWORD *)(v1 + 224);

    v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    *(_QWORD *)(v1 + 360) = v39;
    v39(v33, v34);
    v40 = type metadata accessor for MobileAssetManager(0);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    *(_QWORD *)(v1 + 104) = MobileAssetManager.init()();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v36, enum case for MobileAssetType.coreidvassets(_:), v38);
    v41 = (_QWORD *)swift_task_alloc(async function pointer to MobileAssetManagerProtocol.evictAssets(type:)[1]);
    *(_QWORD *)(v1 + 368) = v41;
    *v41 = v1;
    v41[1] = sub_1000787E8;
    return MobileAssetManagerProtocol.evictAssets(type:)(*(_QWORD *)(v1 + 240), v40, &protocol witness table for MobileAssetManager);
  }
}

uint64_t sub_1000787E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[29] + 8))(v2[30], v2[28]);
  swift_release(v2[13]);
  if (v0)
    v4 = sub_10007934C;
  else
    v4 = sub_1000788B0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000788B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSURL *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  BOOL v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *log;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purged MobileAssets", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
  v7 = *(_QWORD *)(v1 + 320);
  v8 = *(_QWORD *)(v1 + 248);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 184);
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v11 = 1;
  v12 = objc_msgSend(v10, "URLsForDirectory:inDomains:", 5, 1);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v9);

  if (*(_QWORD *)(v13 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 16))(*(_QWORD *)(v1 + 176), v13+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 + 192) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 192) + 80)), *(_QWORD *)(v1 + 184));
    v11 = 0;
  }
  v14 = *(_QWORD *)(v1 + 184);
  v15 = *(_QWORD *)(v1 + 192);
  v16 = *(_QWORD *)(v1 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v16, v11, 1, v14);
  swift_bridgeObjectRelease(v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
  {
    v17 = *(_QWORD *)(v1 + 176);

    v18 = sub_100079D68(v17);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 192) + 32))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184));
    v19 = URL.appendingPathComponent(_:)(0xD00000000000002ALL, 0x800000010012FAB0);
    if ((URL.isFileOnDisk.getter(v19) & 1) != 0)
    {
      URL._bridgeToObjectiveC()(v20);
      v22 = v21;
      *(_QWORD *)(v1 + 72) = 0;
      v23 = objc_msgSend(v10, "removeItemAtURL:error:", v21, v1 + 72);

      v24 = *(void **)(v1 + 72);
      if (v23)
      {
        v26 = *(_QWORD *)(v1 + 200);
        v25 = *(_QWORD *)(v1 + 208);
        v27 = *(_QWORD *)(v1 + 184);
        v28 = *(_QWORD *)(v1 + 192);
        defaultLogger()(v24);
        v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v25, v27);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.info.getter();
        v32 = os_log_type_enabled(v30, v31);
        v33 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
        v34 = *(_QWORD *)(v1 + 312);
        v35 = *(_QWORD *)(v1 + 208);
        v98 = *(_QWORD *)(v1 + 248);
        v101 = *(_QWORD *)(v1 + 216);
        v36 = *(_QWORD *)(v1 + 200);
        v95 = *(_QWORD *)(v1 + 192);
        v37 = *(_QWORD *)(v1 + 184);
        if (v32)
        {
          log = v30;
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v93 = v35;
          v39 = swift_slowAlloc(32, -1);
          v105 = v39;
          v91 = v33;
          *(_DWORD *)v38 = 136315138;
          v40 = URL.debugDescription.getter();
          v42 = v41;
          *(_QWORD *)(v1 + 88) = sub_10003FA80(v40, v41, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v38 + 4);
          swift_bridgeObjectRelease(v42);
          v43 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
          v43(v36, v37);
          _os_log_impl((void *)&_mh_execute_header, log, v31, "Removed cached file at %s", v38, 0xCu);
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

          v91(v34, v98);
          v43(v93, v37);
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v43)(v101, v37);
        }
        else
        {

          v70 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
          v70(v36, v37);
          v33(v34, v98);
          v70(v35, v37);
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v70)(v101, v37);
        }
      }
      else
      {
        v50 = *(_QWORD *)(v1 + 208);
        v49 = *(_QWORD *)(v1 + 216);
        v51 = *(_QWORD *)(v1 + 184);
        v52 = *(_QWORD *)(v1 + 192);
        v53 = v24;
        v54 = _convertNSErrorToError(_:)(v24);

        swift_willThrow(v55);
        v56 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v56(v50, v51);
        v57 = ((uint64_t (*)(uint64_t, uint64_t))v56)(v49, v51);
        defaultLogger()(v57);
        swift_errorRetain(v54);
        v58 = swift_errorRetain(v54);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.info.getter();
        v61 = os_log_type_enabled(v59, v60);
        v62 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 360);
        v63 = *(_QWORD *)(v1 + 264);
        v64 = *(_QWORD *)(v1 + 248);
        if (v61)
        {
          v99 = *(_QWORD *)(v1 + 264);
          v102 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 360);
          v65 = (uint8_t *)swift_slowAlloc(12, -1);
          v96 = v64;
          v66 = swift_slowAlloc(32, -1);
          v105 = v66;
          *(_DWORD *)v65 = 136315138;
          swift_getErrorValue(v54, v1 + 64, v1 + 40);
          v67 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
          v69 = v68;
          *(_QWORD *)(v1 + 80) = sub_10003FA80(v67, v68, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v65 + 4);
          swift_bridgeObjectRelease(v69);
          swift_errorRelease(v54);
          swift_errorRelease(v54);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Ignoring error removing cached file: %s", v65, 0xCu);
          swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v65, -1, -1);

          swift_errorRelease(v54);
          v18 = v102(v99, v96);
        }
        else
        {
          swift_errorRelease(v54);
          swift_errorRelease(v54);
          swift_errorRelease(v54);

          v18 = v62(v63, v64);
        }
      }
    }
    else
    {
      v45 = *(_QWORD *)(v1 + 208);
      v44 = *(_QWORD *)(v1 + 216);
      v46 = *(_QWORD *)(v1 + 184);
      v47 = *(_QWORD *)(v1 + 192);

      v48 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v48(v45, v46);
      v18 = ((uint64_t (*)(uint64_t, uint64_t))v48)(v44, v46);
    }
  }
  v71 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
  v72 = defaultLogger()(v18);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v75 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Finished clear Cached Assets", v75, 2u);
    swift_slowDealloc(v75, -1, -1);
  }
  v76 = *(_QWORD *)(v1 + 336);
  v77 = *(_QWORD *)(v1 + 288);
  v78 = *(_QWORD *)(v1 + 248);

  v71(v77, v78);
  swift_unknownObjectRelease(v76, v79);
  v80 = *(_QWORD *)(v1 + 320);
  v82 = *(_QWORD *)(v1 + 304);
  v81 = *(_QWORD *)(v1 + 312);
  v84 = *(_QWORD *)(v1 + 288);
  v83 = *(_QWORD *)(v1 + 296);
  v86 = *(_QWORD *)(v1 + 272);
  v85 = *(_QWORD *)(v1 + 280);
  v87 = *(_QWORD *)(v1 + 264);
  v88 = *(_QWORD *)(v1 + 240);
  v92 = *(_QWORD *)(v1 + 216);
  v94 = *(_QWORD *)(v1 + 208);
  v97 = *(_QWORD *)(v1 + 200);
  v100 = *(_QWORD *)(v1 + 176);
  v103 = *(_QWORD *)(v1 + 168);
  v104 = *(_QWORD *)(v1 + 144);
  swift_task_dealloc(*(_QWORD *)(v1 + 328));
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10007904C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104))(v8, enum case for DIPError.Code.mobileAssetClearCacheFailure(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100132800, v1, v8, 0, v9, 0xD00000000000005BLL, 0x80000001001326F0, 0xD000000000000015, 0x8000000100132820, 97);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v14(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = swift_errorRelease(v11);
  v16 = defaultLogger()(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Finished clear Cached Assets", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
  v20 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 248);

  v14(v21, v22);
  swift_unknownObjectRelease(v20, v23);
  v24 = *(_QWORD *)(v0 + 320);
  v26 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 312);
  v28 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 296);
  v30 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 264);
  v32 = *(_QWORD *)(v0 + 240);
  v34 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 208);
  v36 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 176);
  v38 = *(_QWORD *)(v0 + 168);
  v39 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007934C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSURL *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  BOOL v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *log;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;

  v2 = *(_QWORD *)(v1 + 376);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 376);
    v109 = *(_QWORD *)(v1 + 272);
    v113 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
    v105 = *(_QWORD *)(v1 + 248);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v115 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v1 + 96, v1 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    v11 = v10;
    *(_QWORD *)(v1 + 112) = sub_10003FA80(v9, v10, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring error clearing MobileAssets: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
    v113(v109, v105);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 376);
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
    v14 = *(_QWORD *)(v1 + 272);
    v15 = *(_QWORD *)(v1 + 248);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    v13(v14, v15);
  }
  v16 = *(_QWORD *)(v1 + 184);
  v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v18 = 1;
  v19 = objc_msgSend(v17, "URLsForDirectory:inDomains:", 5, 1);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v16);

  if (*(_QWORD *)(v20 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 16))(*(_QWORD *)(v1 + 176), v20+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 + 192) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 192) + 80)), *(_QWORD *)(v1 + 184));
    v18 = 0;
  }
  v21 = *(_QWORD *)(v1 + 184);
  v22 = *(_QWORD *)(v1 + 192);
  v23 = *(_QWORD *)(v1 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, v18, 1, v21);
  swift_bridgeObjectRelease(v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1)
  {
    v24 = *(_QWORD *)(v1 + 176);

    v25 = sub_100079D68(v24);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 192) + 32))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184));
    v26 = URL.appendingPathComponent(_:)(0xD00000000000002ALL, 0x800000010012FAB0);
    if ((URL.isFileOnDisk.getter(v26) & 1) != 0)
    {
      URL._bridgeToObjectiveC()(v27);
      v29 = v28;
      *(_QWORD *)(v1 + 72) = 0;
      v30 = objc_msgSend(v17, "removeItemAtURL:error:", v28, v1 + 72);

      v31 = *(void **)(v1 + 72);
      if (v30)
      {
        v33 = *(_QWORD *)(v1 + 200);
        v32 = *(_QWORD *)(v1 + 208);
        v34 = *(_QWORD *)(v1 + 184);
        v35 = *(_QWORD *)(v1 + 192);
        defaultLogger()(v31);
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v33, v32, v34);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter();
        v39 = os_log_type_enabled(v37, v38);
        v40 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
        v41 = *(_QWORD *)(v1 + 312);
        v42 = *(_QWORD *)(v1 + 208);
        v106 = *(_QWORD *)(v1 + 248);
        v110 = *(_QWORD *)(v1 + 216);
        v43 = *(_QWORD *)(v1 + 200);
        v102 = *(_QWORD *)(v1 + 192);
        v44 = *(_QWORD *)(v1 + 184);
        if (v39)
        {
          log = v37;
          v45 = (uint8_t *)swift_slowAlloc(12, -1);
          v100 = v42;
          v46 = swift_slowAlloc(32, -1);
          v115 = v46;
          v98 = v40;
          *(_DWORD *)v45 = 136315138;
          v47 = URL.debugDescription.getter();
          v49 = v48;
          *(_QWORD *)(v1 + 88) = sub_10003FA80(v47, v48, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v45 + 4);
          swift_bridgeObjectRelease(v49);
          v50 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
          v50(v43, v44);
          _os_log_impl((void *)&_mh_execute_header, log, v38, "Removed cached file at %s", v45, 0xCu);
          swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v45, -1, -1);

          v98(v41, v106);
          v50(v100, v44);
          v25 = ((uint64_t (*)(uint64_t, uint64_t))v50)(v110, v44);
        }
        else
        {

          v77 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
          v77(v43, v44);
          v40(v41, v106);
          v77(v42, v44);
          v25 = ((uint64_t (*)(uint64_t, uint64_t))v77)(v110, v44);
        }
      }
      else
      {
        v57 = *(_QWORD *)(v1 + 208);
        v56 = *(_QWORD *)(v1 + 216);
        v58 = *(_QWORD *)(v1 + 184);
        v59 = *(_QWORD *)(v1 + 192);
        v60 = v31;
        v61 = _convertNSErrorToError(_:)(v31);

        swift_willThrow(v62);
        v63 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        v63(v57, v58);
        v64 = ((uint64_t (*)(uint64_t, uint64_t))v63)(v56, v58);
        defaultLogger()(v64);
        swift_errorRetain(v61);
        v65 = swift_errorRetain(v61);
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.info.getter();
        v68 = os_log_type_enabled(v66, v67);
        v69 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 360);
        v70 = *(_QWORD *)(v1 + 264);
        v71 = *(_QWORD *)(v1 + 248);
        if (v68)
        {
          v107 = *(_QWORD *)(v1 + 264);
          v111 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 360);
          v72 = (uint8_t *)swift_slowAlloc(12, -1);
          v103 = v71;
          v73 = swift_slowAlloc(32, -1);
          v115 = v73;
          *(_DWORD *)v72 = 136315138;
          swift_getErrorValue(v61, v1 + 64, v1 + 40);
          v74 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
          v76 = v75;
          *(_QWORD *)(v1 + 80) = sub_10003FA80(v74, v75, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v72 + 4);
          swift_bridgeObjectRelease(v76);
          swift_errorRelease(v61);
          swift_errorRelease(v61);
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Ignoring error removing cached file: %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v72, -1, -1);

          swift_errorRelease(v61);
          v25 = v111(v107, v103);
        }
        else
        {
          swift_errorRelease(v61);
          swift_errorRelease(v61);
          swift_errorRelease(v61);

          v25 = v69(v70, v71);
        }
      }
    }
    else
    {
      v52 = *(_QWORD *)(v1 + 208);
      v51 = *(_QWORD *)(v1 + 216);
      v53 = *(_QWORD *)(v1 + 184);
      v54 = *(_QWORD *)(v1 + 192);

      v55 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v55(v52, v53);
      v25 = ((uint64_t (*)(uint64_t, uint64_t))v55)(v51, v53);
    }
  }
  v78 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
  v79 = defaultLogger()(v25);
  v80 = Logger.logObject.getter(v79);
  v81 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v80, v81))
  {
    v82 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v82 = 0;
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Finished clear Cached Assets", v82, 2u);
    swift_slowDealloc(v82, -1, -1);
  }
  v83 = *(_QWORD *)(v1 + 336);
  v84 = *(_QWORD *)(v1 + 288);
  v85 = *(_QWORD *)(v1 + 248);

  v78(v84, v85);
  swift_unknownObjectRelease(v83, v86);
  v87 = *(_QWORD *)(v1 + 320);
  v89 = *(_QWORD *)(v1 + 304);
  v88 = *(_QWORD *)(v1 + 312);
  v91 = *(_QWORD *)(v1 + 288);
  v90 = *(_QWORD *)(v1 + 296);
  v93 = *(_QWORD *)(v1 + 272);
  v92 = *(_QWORD *)(v1 + 280);
  v94 = *(_QWORD *)(v1 + 264);
  v95 = *(_QWORD *)(v1 + 240);
  v99 = *(_QWORD *)(v1 + 216);
  v101 = *(_QWORD *)(v1 + 208);
  v104 = *(_QWORD *)(v1 + 200);
  v108 = *(_QWORD *)(v1 + 176);
  v112 = *(_QWORD *)(v1 + 168);
  v114 = *(_QWORD *)(v1 + 144);
  swift_task_dealloc(*(_QWORD *)(v1 + 328));
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v104);
  swift_task_dealloc(v108);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100079C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v19[5];

  v0 = type metadata accessor for SESKeystore(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = SESKeystore.init()(v1);
  v3 = type metadata accessor for SEPairingManager(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = SEPairingManager.init()();
  v5 = type metadata accessor for GenericPasswordKeychainWrapper();
  v6 = swift_allocObject(v5, 16, 7);
  v7 = type metadata accessor for SyncableKeyStoreProvider();
  v8 = (_QWORD *)swift_allocObject(v7, 56, 7);
  v8[5] = v5;
  v8[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v8[2] = v6;
  v19[3] = v7;
  v19[4] = &off_10016AB90;
  v19[0] = v8;
  v9 = type metadata accessor for CredentialKeyManager();
  v10 = (_QWORD *)swift_allocObject(v9, 128, 7);
  v11 = sub_10002E040((uint64_t)v19, v7);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  swift_retain(v8);
  v16 = sub_10011A080(v2, v4, v15, v10);
  sub_10000CE40(v19);
  swift_release(v8);
  return v16;
}

uint64_t sub_100079D68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_1001754B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100079DA8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CredentialDecryptionKeyFinder(a2, a1);
  return a2;
}

_QWORD *sub_100079DE4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  ValueWitnessTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[5];

  v33 = a3;
  v34 = a6;
  v12 = type metadata accessor for FeatureFlagProvider(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = &type metadata for CredentialDecryptionKeyFinder;
  v36[4] = &off_100167918;
  v16 = swift_allocObject(&unk_100169630, 56, 7);
  v36[0] = v16;
  v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(a4 + 32);
  v18 = type metadata accessor for PayloadProcessorBuilder();
  v35[3] = v18;
  v35[4] = &off_10016C988;
  v35[0] = a5;
  v19 = type metadata accessor for CredentialStorage();
  v20 = (_QWORD *)swift_allocObject(v19, 168, 7);
  v21 = sub_10002E040((uint64_t)v36, (uint64_t)&type metadata for CredentialDecryptionKeyFinder);
  __chkstk_darwin(v21);
  v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v24->initializeWithCopy)((uint64_t)v23, v25);
  v26 = sub_10002E040((uint64_t)v35, v18);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = *v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a7, v12);
  v31 = sub_10007A000(a1, a2, v33, (uint64_t)v23, v30, v34, (uint64_t)v15, v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a7, v12);
  sub_10000CE40(v35);
  sub_10000CE40(v36);
  return v31;
}

uint64_t sub_100079FDC()
{
  uint64_t v0;

  sub_10000CE40((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

_QWORD *sub_10007A000(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26[2];
  __int128 v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[5];
  _QWORD v31[5];
  _QWORD v32[5];
  _QWORD v33[5];

  v16 = type metadata accessor for FeatureFlagProvider(0);
  v33[3] = v16;
  v33[4] = &protocol witness table for FeatureFlagProvider;
  v17 = sub_1000258FC(v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v17, a7, v16);
  v32[3] = &type metadata for CredentialDecryptionKeyFinder;
  v32[4] = &off_100167918;
  v18 = swift_allocObject(&unk_100169630, 56, 7);
  v32[0] = v18;
  v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(a4 + 32);
  v31[3] = type metadata accessor for PayloadProcessorBuilder();
  v31[4] = &off_10016C988;
  v31[0] = a5;
  v20 = sub_10007A230(a1);
  swift_bridgeObjectRelease(a1);
  a8[2] = v20;
  a8[20] = a2;
  sub_100025938((uint64_t)v32, (uint64_t)(a8 + 4));
  sub_100025938((uint64_t)v31, (uint64_t)(a8 + 9));
  a8[14] = a6;
  sub_100025938((uint64_t)v33, (uint64_t)(a8 + 15));
  if (!a3)
  {
    sub_100025938((uint64_t)(a8 + 15), (uint64_t)v30);
    v21 = type metadata accessor for BiometricsHelper(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_retain_n(a2, 2);
    v22 = swift_retain_n(a6, 2);
    v23 = BiometricsHelper.init()(v22);
    v28 = type metadata accessor for DeviceInformationProvider(0);
    v29 = &protocol witness table for DeviceInformationProvider;
    sub_1000258FC(&v27);
    DeviceInformationProvider.init()();
    v24 = type metadata accessor for BiometricStorage();
    a3 = (_QWORD *)swift_allocObject(v24, 160, 7);
    a3[2] = a2;
    sub_100025938((uint64_t)v30, (uint64_t)(a3 + 8));
    a3[13] = a6;
    type metadata accessor for AppleIDVManager(0);
    sub_100112A6C((uint64_t *)v26);
    sub_10000CE40(v30);
    sub_10002597C(v26, (uint64_t)(a3 + 3));
    a3[14] = v23;
    sub_10002597C(&v27, (uint64_t)(a3 + 15));
    swift_release(a2);
    swift_release(a6);
  }
  sub_10000CE40(v33);
  sub_10000CE40(v31);
  sub_10000CE40(v32);
  a8[3] = a3;
  return a8;
}

uint64_t sub_10007A230(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100005E20(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10007A2C4()
{
  uint64_t v0;

  v0 = sub_100008E84(&qword_1001754C8);
  sub_100075E88(v0, qword_100176A50);
  sub_100075EC8(v0, (uint64_t)qword_100176A50);
  return Regex.init(_regexString:version:)(0xD000000000000023, 0x8000000100132900, 1, &type metadata for Substring);
}

uint64_t sub_10007A334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v12;
  Swift::String_optional v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String_optional v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  Swift::String_optional v32;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100176A68);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = SecCertificateRef.commonName()();
  countAndFlagsBits = v9.value._countAndFlagsBits;
  object = (unint64_t)v9.value._object;
  v12 = SecCertificateRef.organization()();
  v31 = v12.value._countAndFlagsBits;
  v13 = SecCertificateRef.organizationalUnit()();
  v14 = v13.value._object;
  if (v9.value._object)
  {
    v27 = v13;
    v28 = v3;
    v29 = v2;
    v30 = v5;
    v32 = v9;
    v15 = qword_100174400;
    swift_bridgeObjectRetain(v9.value._object);
    if (v15 != -1)
      swift_once(&qword_100174400, sub_10007A2C4);
    v16 = sub_100008E84(&qword_1001754C8);
    v17 = sub_100075EC8(v16, (uint64_t)qword_100176A50);
    v18 = sub_10007A62C();
    v19 = sub_100033EEC();
    BidirectionalCollection<>.wholeMatch<A>(of:)(v17, &type metadata for String, v16, v18, v19);
    v20 = sub_100008E84(&qword_100176A78);
    LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v8, 1, v20);
    sub_10007A670((uint64_t)v8);
    result = swift_bridgeObjectRelease(v9.value._object);
    if ((_DWORD)v17 != 1)
    {
      result = swift_bridgeObjectRelease(v9.value._object);
      object = 0xEF766F672E736864;
      countAndFlagsBits = 0x2E6173742E6C646DLL;
    }
    v22 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    v2 = v29;
    v5 = v30;
    v14 = v27.value._object;
    v3 = v28;
    if (v22)
    {
      *a1 = countAndFlagsBits;
      a1[1] = object;
      a1[2] = v31;
      a1[3] = (uint64_t)v12.value._object;
      a1[4] = v27.value._countAndFlagsBits;
      a1[5] = (uint64_t)v14;
      return result;
    }
    swift_bridgeObjectRelease(object);
  }
  swift_bridgeObjectRelease(v12.value._object);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsMissingReaderCommonName(_:), v2);
  v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v24 = type metadata accessor for DIPError(0);
  v25 = sub_10000745C();
  swift_allocError(v24, v25, 0, 0);
  v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100132840, 0, v5, 0, v23, 0xD000000000000067, 0x8000000100132870, 0xD000000000000012, 0x80000001001328E0, 54);
  return swift_willThrow(v26);
}

unint64_t sub_10007A62C()
{
  unint64_t result;

  result = qword_100176A70;
  if (!qword_100176A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100176A70);
  }
  return result;
}

uint64_t sub_10007A670(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_100176A68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for CertificateSubjectDistinguishedNames(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for CertificateSubjectDistinguishedNames(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for CertificateSubjectDistinguishedNames(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for CertificateSubjectDistinguishedNames(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateSubjectDistinguishedNames(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateSubjectDistinguishedNames(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateSubjectDistinguishedNames()
{
  return &type metadata for CertificateSubjectDistinguishedNames;
}

uint64_t sub_10007A8B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD *v46;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v2 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v2);
  v78 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AnyCodable(0);
  v76 = *(_QWORD *)(v4 - 8);
  v77 = v4;
  v5 = __chkstk_darwin(v4);
  v73 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (char *)&v62 - v7;
  v75 = type metadata accessor for CredentialElement(0);
  v62 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v9 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (_QWORD *)sub_10003EE80((uint64_t)_swiftEmptyArrayStorage);
  v11 = *(_QWORD *)(a1 + 64);
  v63 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v64 = (unint64_t)(v12 + 63) >> 6;
  v65 = a1;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  while (1)
  {
    if (v14)
    {
      v69 = (v14 - 1) & v14;
      v18 = __clz(__rbit64(v14)) | (v15 << 6);
    }
    else
    {
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_44;
      if (v19 >= v64)
      {
LABEL_41:
        swift_release(v65);
        return (uint64_t)v10;
      }
      v20 = *(_QWORD *)(v63 + 8 * v19);
      ++v15;
      if (!v20)
      {
        v15 = v19 + 1;
        if (v19 + 1 >= v64)
          goto LABEL_41;
        v20 = *(_QWORD *)(v63 + 8 * v15);
        if (!v20)
        {
          v15 = v19 + 2;
          if (v19 + 2 >= v64)
            goto LABEL_41;
          v20 = *(_QWORD *)(v63 + 8 * v15);
          if (!v20)
          {
            v21 = v19 + 3;
            if (v21 >= v64)
              goto LABEL_41;
            v20 = *(_QWORD *)(v63 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                v15 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_45;
                if (v15 >= v64)
                  goto LABEL_41;
                v20 = *(_QWORD *)(v63 + 8 * v15);
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v15 = v21;
          }
        }
      }
LABEL_21:
      v69 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    v22 = *(_QWORD *)(v65 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v65 + 48) + 16 * v18);
    v24 = v23[1];
    v70 = *v23;
    v71 = v24;
    v25 = *(_QWORD *)(v22 + 8 * v18);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v67 = v15;
      v68 = v10;
      v79 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      specialized ContiguousArray.reserveCapacity(_:)(v26);
      v27 = *(unsigned __int8 *)(v62 + 80);
      v66 = v25;
      v28 = v25 + ((v27 + 32) & ~v27);
      v29 = *(_QWORD *)(v62 + 72);
      v74 = v29;
      do
      {
        sub_10006BC40(v28, (uint64_t)v9, type metadata accessor for CredentialElement);
        v38 = v78;
        sub_10002E908((uint64_t)v9 + *(int *)(v75 + 20), v78, &qword_1001752C8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v38, 1, v77) == 1)
        {
          sub_10007AE60(v78);
          v30 = v9[1];
          v31 = objc_allocWithZone((Class)DCCredentialElement);
          swift_bridgeObjectRetain(v30);
          v32 = (uint64_t)v9;
          v33 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v30);
          v34 = objc_msgSend(v31, "initWithElementIdentifier:", v33);

        }
        else
        {
          v39 = v76;
          v40 = v77;
          v41 = v72;
          (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v72, v78, v77);
          sub_10007E634();
          v42 = *v9;
          v43 = v9[1];
          v32 = (uint64_t)v9;
          v44 = (uint64_t)v73;
          (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v73, v41, v40);
          swift_bridgeObjectRetain(v43);
          v34 = sub_100053540(v42, v43, v44);
          v45 = *(void (**)(char *, uint64_t))(v39 + 8);
          v29 = v74;
          v45(v41, v40);
        }
        v35 = sub_10002E800(v32);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        v36 = v79[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized ContiguousArray._endMutation()(v37);
        v28 += v29;
        --v26;
        v9 = (uint64_t *)v32;
      }
      while (v26);
      v46 = v79;
      swift_bridgeObjectRelease(v66);
      v15 = v67;
      v10 = v68;
      v24 = v71;
    }
    else
    {
      swift_bridgeObjectRetain(v24);
      v46 = _swiftEmptyArrayStorage;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v79 = v10;
    v49 = sub_1000FBC04(v70, v24);
    v50 = v10[2];
    v51 = (v48 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
      break;
    v53 = v48;
    if (v10[3] >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v10 = v79;
        if ((v48 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10007EA04(&qword_100175700);
        v10 = v79;
        if ((v53 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10007D208(v52, isUniquelyReferenced_nonNull_native, &qword_100175700);
      v54 = sub_1000FBC04(v70, v71);
      if ((v53 & 1) != (v55 & 1))
        goto LABEL_46;
      v49 = v54;
      v10 = v79;
      if ((v53 & 1) != 0)
      {
LABEL_4:
        v16 = v10[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v49));
        *(_QWORD *)(v16 + 8 * v49) = v46;
        v17 = v71;
        goto LABEL_5;
      }
    }
    v10[(v49 >> 6) + 8] |= 1 << v49;
    v56 = (_QWORD *)(v10[6] + 16 * v49);
    v57 = v71;
    *v56 = v70;
    v56[1] = v57;
    *(_QWORD *)(v10[7] + 8 * v49) = v46;
    v58 = v10[2];
    v59 = __OFADD__(v58, 1);
    v60 = v58 + 1;
    if (v59)
      goto LABEL_43;
    v10[2] = v60;
    swift_bridgeObjectRetain(v57);
LABEL_5:
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
    v14 = v69;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10007AE60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_1001752C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007AEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t result;
  unsigned int isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  char v37;
  char v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v36 = sub_10003E408((uint64_t)_swiftEmptyArrayStorage);
  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  v39 = v8;
  v40 = a2;
  while (1)
  {
    while (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (*(_QWORD *)(a1 + 16))
        goto LABEL_20;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v9 >= v8)
      goto LABEL_37;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    if (!v13)
      break;
LABEL_19:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    if (*(_QWORD *)(a1 + 16))
    {
LABEL_20:
      v15 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v11);
      v17 = *v15;
      v16 = v15[1];
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v11);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v18);
      v19 = sub_1000FBC04(v17, v16);
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRelease(v16);
        goto LABEL_5;
      }
      v21 = v4;
      v22 = a1;
      v23 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v19);
      swift_bridgeObjectRetain(v23);
      v24 = sub_10007EBB0(v18, v23);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v23);
      if (*(_QWORD *)(v24 + 16))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v41 = (_QWORD *)v36;
        v26 = sub_1000FBC04(v17, v16);
        v27 = *(_QWORD *)(v36 + 16);
        v28 = (v25 & 1) == 0;
        v29 = v27 + v28;
        if (__OFADD__(v27, v28))
          goto LABEL_40;
        if (*(_QWORD *)(v36 + 24) >= v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v38 = v25;
            sub_10007EA04(&qword_100175750);
            v25 = v38;
          }
        }
        else
        {
          v37 = v25;
          sub_10007D208(v29, isUniquelyReferenced_nonNull_native, &qword_100175750);
          v30 = sub_1000FBC04(v17, v16);
          v32 = v31 & 1;
          v25 = v37;
          if ((v37 & 1) != v32)
            goto LABEL_41;
          v26 = v30;
        }
        v36 = (unint64_t)v41;
        if ((v25 & 1) != 0)
        {
          v33 = v41[7];
          swift_bridgeObjectRelease(*(_QWORD *)(v33 + 8 * v26));
          *(_QWORD *)(v33 + 8 * v26) = v24;
        }
        else
        {
          sub_10011F2B4(v26, v17, v16, v24, v41);
          swift_bridgeObjectRetain(v16);
        }
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(0x8000000000000000);
        v4 = v21;
        a1 = v22;
        v8 = v39;
        a2 = v40;
      }
      else
      {
        swift_bridgeObjectRelease(v24);
        v18 = v16;
        v4 = v21;
        a1 = v22;
        v8 = v39;
        a2 = v40;
LABEL_5:
        swift_bridgeObjectRelease(v18);
      }
    }
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v8)
    goto LABEL_37;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
    goto LABEL_18;
  v14 = v9 + 2;
  if (v9 + 2 >= v8)
    goto LABEL_37;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
    goto LABEL_18;
  v14 = v9 + 3;
  if (v9 + 3 >= v8)
  {
LABEL_37:
    swift_release(a2);
    return v36;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
LABEL_18:
    v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_37;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

Swift::Int sub_10007B1C8(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_1001757B0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v33[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v33[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v32 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v33[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_10007B48C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v3 = v2;
  v6 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v51 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008E84(&qword_1001757A8);
  v50 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v45 = v3;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v46)
      break;
    v26 = v47;
    v27 = v47[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v27 = v47[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_36:
          swift_release(v12);
          v3 = v45;
          if ((v50 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v46)
              goto LABEL_36;
            v27 = v47[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(_QWORD *)(v12 + 56);
      v32 = *(_QWORD *)(v49 + 72);
      sub_100041230(v31 + v32 * v24, v51, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v33 = *(_QWORD *)(v12 + 56);
      v32 = *(_QWORD *)(v49 + 72);
      sub_10006BC40(v33 + v32 * v24, v51, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    }
    v34 = *(_QWORD *)(v14 + 40);
    v35 = sub_10007EE18();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v36 = -1 << *(_BYTE *)(v14 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v19 + 8 * v38);
      }
      while (v42 == -1);
      v22 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    result = sub_100041230(v51, *(_QWORD *)(v14 + 56) + v32 * v22, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v3 = v45;
  v26 = v47;
  if ((v50 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v12 + 32);
  if (v43 >= 64)
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v43;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v3 = v14;
  return result;
}

uint64_t sub_10007B880(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_100176A98);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v29[1]);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10007BB34(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100175750);
}

Swift::Int sub_10007BB40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD v37[9];
  _BYTE v38[32];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_100175788);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v35)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v36 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v35)
        goto LABEL_37;
      v21 = *(_QWORD *)(v36 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v35)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v35)
              goto LABEL_37;
            v21 = *(_QWORD *)(v36 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v5 + 56) + 32 * v18;
    if ((a2 & 1) != 0)
    {
      sub_100039AD8(v26, (uint64_t)v38);
    }
    else
    {
      sub_10002E908(v26, (uint64_t)v38, &qword_1001755C8);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v37, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100039AD8((uint64_t)v38, *(_QWORD *)(v8 + 56) + 32 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10007BE58(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100176A30);
}

Swift::Int sub_10007BE64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = sub_100008E84(&qword_1001752E8);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008E84(&qword_100176A28);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

Swift::Int sub_10007C1D0(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100175718);
}

uint64_t sub_10007C1DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_1001757C0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100041220(v25, v38);
      }
      else
      {
        sub_1000412B0((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_100041220(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10007C4D8(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100175748);
}

Swift::Int sub_10007C4E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for PresentmentProposal(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008E84(&qword_100175760);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_100041230(v31, (uint64_t)v8, type metadata accessor for PresentmentProposal);
    }
    else
    {
      sub_10006BC40(v31, (uint64_t)v8, type metadata accessor for PresentmentProposal);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_100041230((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19, type metadata accessor for PresentmentProposal);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_10007C864(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100175780);
}

Swift::Int sub_10007C870(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for AnyCodable(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008E84(&qword_100175770);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

Swift::Int sub_10007CBD8(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100175778);
}

Swift::Int sub_10007CBE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_100176A88);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_10000B178(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_10007CEF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008E84(&qword_100175708);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_100005A38(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_10007D1FC(uint64_t a1, uint64_t a2)
{
  return sub_10007D208(a1, a2, &qword_100176A90);
}

Swift::Int sub_10007D208(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100008E84(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

void *sub_10007D518()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100008E84(&qword_1001757B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007D6A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008E84(&qword_1001757A8);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release(v5);
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38;
        ;
        result = (void *)sub_100041230(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for MockSESKeystore.MockDesignatedKey))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    sub_10006BC40(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for MockSESKeystore.MockDesignatedKey);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release(v37);
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10007D96C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100008E84(&qword_100176A98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007DB18()
{
  return sub_10007EA04(&qword_100175750);
}

void *sub_10007DB24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[32];

  v1 = v0;
  sub_100008E84(&qword_100175788);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 32 * v15;
    sub_10002E908(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26, &qword_1001755C8);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_100039AD8((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10007DD10()
{
  return sub_10007EA04(&qword_100176A30);
}

void sub_10007DD1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = sub_100008E84(&qword_1001752E8);
  v1 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008E84(&qword_100176A28);
  v30 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v34 = v5;
  if (!v6)
  {
    swift_release(v4);
    v28 = v34;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v34;
  }
  v31 = v4 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v32 = (unint64_t)(v11 + 63) >> 6;
  v14 = v33;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_22:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v21, v14);
    v22 = v34;
    v23 = (_QWORD *)(*(_QWORD *)(v34 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v22 + 56) + v21, v3, v14);
    swift_bridgeObjectRetain(v19);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    swift_release(v4);
    v27 = v30;
    v28 = v34;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

void *sub_10007DF80()
{
  return sub_10007EA04(&qword_100175718);
}

void sub_10007DF8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100008E84(&qword_1001757C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1000412B0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100041220(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10007E170()
{
  return sub_10007EA04(&qword_100175748);
}

void sub_10007E17C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for PresentmentProposal(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008E84(&qword_100175760);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v26 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_10006BC40(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for PresentmentProposal);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_100041230((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for PresentmentProposal);
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10007E3C0()
{
  return sub_10007EA04(&qword_100175780);
}

void sub_10007E3CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for AnyCodable(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008E84(&qword_100175770);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10007E628()
{
  return sub_10007EA04(&qword_100175778);
}

unint64_t sub_10007E634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100176A80;
  if (!qword_100176A80)
  {
    v1 = objc_opt_self(DCCredentialElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100176A80);
  }
  return result;
}

void *sub_10007E670()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_100008E84(&qword_100176A88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10000B178(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007E834()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_100008E84(&qword_100175708);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_100005A38(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007E9F8()
{
  return sub_10007EA04(&qword_100176A90);
}

void *sub_10007EA04(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100008E84(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10007EBB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  v5 = type metadata accessor for CredentialElement(0);
  v6 = __chkstk_darwin(v5);
  v35 = (uint64_t)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v38 = (_QWORD *)((char *)v30 - v9);
  result = (uint64_t)_swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
    return result;
  v30[1] = v2;
  v11 = 0;
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v37 = *(_QWORD *)(v8 + 72);
  v32 = v12;
  v33 = a1 + v12;
  v31 = a2 + 7;
  v13 = _swiftEmptyArrayStorage;
  v14 = type metadata accessor for CredentialElement;
  v36 = a2;
  while (1)
  {
    v15 = v14;
    sub_10006BC40(v33 + v37 * v11, (uint64_t)v38, v14);
    v16 = a2[2];
    if (v16)
    {
      v17 = *v38;
      v18 = v38[1];
      v19 = a2[4];
      v20 = a2[5];
      v21 = v19 == *v38 && v20 == v18;
      if (v21 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v38, v38[1], 0), (result & 1) != 0))
      {
LABEL_11:
        v14 = v15;
        sub_100041230((uint64_t)v38, v35, v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          sub_1000557B8(0, v13[2] + 1, 1);
        v13 = v39;
        v23 = v39[2];
        v22 = v39[3];
        if (v23 >= v22 >> 1)
        {
          sub_1000557B8(v22 > 1, v23 + 1, 1);
          v13 = v39;
        }
        v13[2] = v23 + 1;
        sub_100041230(v35, (uint64_t)v13 + v32 + v23 * v37, v15);
        a2 = v36;
        goto LABEL_4;
      }
      a2 = v36;
      if (v16 != 1)
        break;
    }
LABEL_3:
    sub_10002E800((uint64_t)v38);
    v14 = v15;
LABEL_4:
    if (++v11 == v34)
      return (uint64_t)v39;
  }
  v24 = v31;
  v25 = 1;
  while (1)
  {
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    v27 = *(v24 - 1);
    v28 = *v24;
    if (v27 == v17 && v28 == v18)
      goto LABEL_11;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v17, v18, 0);
    if ((result & 1) != 0)
      goto LABEL_11;
    v24 += 2;
    ++v25;
    v21 = v26 == v16;
    a2 = v36;
    if (v21)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

unint64_t sub_10007EE18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100178A70;
  if (!qword_100178A70)
  {
    v1 = type metadata accessor for SESKeystore.KeyDesignation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SESKeystore.KeyDesignation, v1);
    atomic_store(result, (unint64_t *)&qword_100178A70);
  }
  return result;
}

__n128 sub_10007EE60@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  id v42;
  Swift::String v43;
  Swift::String_optional v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  id v58;
  Swift::String v59;
  Swift::String_optional v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  char v68;
  __n128 result;
  char *v70;
  __n128 *v71;
  char *v72;
  uint64_t v73;
  __n128 *v74;
  uint64_t v75;

  v2 = v1;
  v74 = a1;
  v73 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v73 - 8);
  v3 = __chkstk_darwin(v73);
  v72 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v70 = (char *)&v70 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v70 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v70 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v70 - v16;
  v18 = (void *)objc_opt_self(NSUserDefaults);
  v19 = objc_msgSend(v18, "standardUserDefaults");
  v20._countAndFlagsBits = 0xD00000000000001FLL;
  v20._object = (void *)0x8000000100132930;
  v21 = NSUserDefaults.internalString(forKey:)(v20);

  if (v21.value._object)
  {
    v71 = v2;
    if (v21.value._countAndFlagsBits == 0x6975716552746F6ELL && v21.value._object == (void *)0xEB00000000646572
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6975716552746F6ELL, 0xEB00000000646572, v21.value._countAndFlagsBits, v21.value._object, 0) & 1) != 0)
    {
      v22 = swift_bridgeObjectRelease(v21.value._object);
      v23 = defaultLogger()(v22);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Forcing credential presentment auth policy to not required due to user defaults setting", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      v27 = v73;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v17, v73);
      v28 = 0;
LABEL_8:
      v2 = v71;
      v29 = v74;
      goto LABEL_23;
    }
    if (v21.value._countAndFlagsBits == 0xD000000000000016 && v21.value._object == (void *)0x8000000100132990
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100132990, v21.value._countAndFlagsBits, v21.value._object, 0) & 1) != 0)
    {
      v30 = swift_bridgeObjectRelease(v21.value._object);
      v31 = defaultLogger()(v30);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Forcing credential presentment auth policy to any biometric or passcode due to user defaults setting", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v15;
      v27 = v73;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v35, v73);
      v28 = 1;
      goto LABEL_8;
    }
    if (v21.value._countAndFlagsBits == 0x69426C61626F6C67 && v21.value._object == (void *)0xED0000676E69646ELL)
    {
      v36 = swift_bridgeObjectRelease(0xED0000676E69646ELL);
LABEL_19:
      v38 = defaultLogger()(v36);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Forcing credential presentment auth policy to global binding due to user defaults setting", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v27 = v73;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v12, v73);
      v28 = 2;
      goto LABEL_8;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69426C61626F6C67, 0xED0000676E69646ELL, v21.value._countAndFlagsBits, v21.value._object, 0);
    v36 = swift_bridgeObjectRelease(v21.value._object);
    v2 = v71;
    if ((v37 & 1) != 0)
      goto LABEL_19;
  }
  v28 = v2[1].n128_i64[1];
  v27 = v73;
  v29 = v74;
LABEL_23:
  v42 = objc_msgSend(v18, "standardUserDefaults");
  v43._countAndFlagsBits = 0xD00000000000001FLL;
  v43._object = (void *)0x8000000100132930;
  v44 = NSUserDefaults.internalString(forKey:)(v43);

  if (!v44.value._object)
    goto LABEL_37;
  if (v44.value._countAndFlagsBits == 1701736302 && v44.value._object == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, v44.value._countAndFlagsBits, v44.value._object, 0) & 1) != 0)
  {
    v45 = swift_bridgeObjectRelease(v44.value._object);
    v46 = defaultLogger()(v45);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Forcing reader auth policy to none due to user defaults setting", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v9, v27);
    v50 = 0;
    goto LABEL_38;
  }
  if (v44.value._countAndFlagsBits != 0x797469746E656469 || v44.value._object != (void *)0xE800000000000000)
  {
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xE800000000000000, v44.value._countAndFlagsBits, v44.value._object, 0);
    v51 = swift_bridgeObjectRelease(v44.value._object);
    if ((v52 & 1) != 0)
      goto LABEL_34;
LABEL_37:
    v50 = v2[1].n128_i64[0];
    goto LABEL_38;
  }
  v51 = swift_bridgeObjectRelease(0xE800000000000000);
LABEL_34:
  v53 = v70;
  v54 = defaultLogger()(v51);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Forcing reader auth policy to identity due to user defaults setting", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v75 + 8))(v53, v27);
  v50 = 1;
LABEL_38:
  v58 = objc_msgSend(v18, "standardUserDefaults");
  v59._countAndFlagsBits = 0xD000000000000034;
  v59._object = (void *)0x8000000100132950;
  v60 = NSUserDefaults.internalString(forKey:)(v59);

  if (!v60.value._object)
    goto LABEL_50;
  if ((v60.value._countAndFlagsBits != 0x647261646E617473 || v60.value._object != (void *)0xE800000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x647261646E617473, 0xE800000000000000, v60.value._countAndFlagsBits, v60.value._object, 0) & 1) == 0)
  {
    if (v60.value._countAndFlagsBits == 0x697274656D6F6962 && v60.value._object == (void *)0xE900000000000063)
    {
      swift_bridgeObjectRelease(0xE900000000000063);
      v67 = 1;
      goto LABEL_51;
    }
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(0x697274656D6F6962, 0xE900000000000063, v60.value._countAndFlagsBits, v60.value._object, 0);
    swift_bridgeObjectRelease(v60.value._object);
    if ((v68 & 1) != 0)
    {
      v67 = 1;
      goto LABEL_51;
    }
LABEL_50:
    v67 = v2[2].n128_i64[0];
    goto LABEL_51;
  }
  v61 = swift_bridgeObjectRelease(v60.value._object);
  v62 = v72;
  v63 = defaultLogger()(v61);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Forcing payload protection policy to standard due to user defaults settings", v66, 2u);
    swift_slowDealloc(v66, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v27);
  v67 = 0;
LABEL_51:
  result = *v2;
  *v29 = *v2;
  v29[1].n128_u64[0] = v50;
  v29[1].n128_u64[1] = v28;
  v29[2].n128_u64[0] = v67;
  return result;
}

id sub_10007F6CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  id result;

  v3 = type metadata accessor for StoredCredentialOptions(0);
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithContext:", *(_QWORD *)(a1 + 16));
  objc_msgSend(v4, "setDeleteInactiveKeysAfterDays:", v1[1]);
  result = objc_msgSend(v4, "setDeleteIncompleteCredentialAfterDays:", *v1);
  if ((v1[2] & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = objc_msgSend(v4, "setReaderAuthenticationPolicy:");
  if ((v1[3] & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = objc_msgSend(v4, "setPresentmentAuthPolicy:");
  if ((v1[4] & 0x8000000000000000) == 0)
  {
    objc_msgSend(v4, "setPayloadProtectionPolicy:");
    return v4;
  }
LABEL_7:
  __break(1u);
  return result;
}

void **sub_10007F78C(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[6];
    v15 = a3[7];
    v16 = (void **)((char *)v7 + v14);
    v17 = (void **)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v17[3];
    v16[2] = v17[2];
    v16[3] = v19;
    v20 = v17[5];
    v16[4] = v17[4];
    v16[5] = v20;
    *((_BYTE *)v7 + v15) = *((_BYTE *)a2 + v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
  }
  return v7;
}

uint64_t sub_10007F870(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (id *)((char *)a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  return swift_bridgeObjectRelease(v6[5]);
}

void **sub_10007F8E0(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (void **)((char *)a1 + v13);
  v16 = (void **)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v16[3];
  v15[2] = v16[2];
  v15[3] = v18;
  v19 = v16[5];
  v15[4] = v16[4];
  v15[5] = v19;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

void **sub_10007F99C(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = (void **)((char *)a1 + v13);
  v15 = (void **)((char *)a2 + v13);
  *v14 = *(void **)((char *)a2 + v13);
  v16 = *(uint64_t *)((char *)a2 + v13 + 8);
  v17 = *(uint64_t *)((char *)a1 + v13 + 8);
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v14[2] = v15[2];
  v18 = v15[3];
  v19 = v14[3];
  v14[3] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v14[4] = v15[4];
  v20 = v15[5];
  v21 = v14[5];
  v14[5] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10007FA8C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (_OWORD *)((char *)a1 + v10);
  v13 = (_OWORD *)((char *)a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v12[2] = v13[2];
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

void **sub_10007FB1C(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;

  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void **)((char *)a1 + v11);
  v13 = (void **)((char *)a2 + v11);
  v14 = *(uint64_t *)((char *)a2 + v11 + 8);
  v15 = *(uint64_t *)((char *)a1 + v11 + 8);
  *v12 = *(void **)((char *)a2 + v11);
  v12[1] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = v13[3];
  v17 = v12[3];
  v12[2] = v13[2];
  v12[3] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = v13[5];
  v19 = v12[5];
  v12[4] = v13[4];
  v12[5] = v18;
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

uint64_t sub_10007FBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007FBE4);
}

uint64_t sub_10007FBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085A04(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
}

uint64_t sub_10007FBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007FBFC);
}

uint64_t sub_10007FBFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100085AA0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
}

uint64_t type metadata accessor for ReaderMetadataProvider(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176B10, (uint64_t)&nominal type descriptor for ReaderMetadataProvider);
}

uint64_t sub_10007FC1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  result = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10012B1B0;
    v4[3] = &unk_10012B1C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10007FCA4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100008E84(&qword_100176BD0);
  sub_100075E88(v0, qword_100176AA0);
  sub_100075EC8(v0, (uint64_t)qword_100176AA0);
  v1 = sub_100008E84(&qword_100176BE8);
  return Regex.init(_regexString:version:)(0xD000000000000033, 0x8000000100132CA0, 1, v1);
}

uint64_t sub_10007FD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;

  v0 = sub_100008E84(&qword_1001752C8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter(v1);
  v6 = v5;
  type metadata accessor for ReaderMetadataProvider(0);
  v8 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v7);
  if (v8)
  {
    v9 = v8;
    if (*(_QWORD *)(v8 + 16) && (v10 = sub_1000FBC04(v4, v6), (v11 & 1) != 0))
    {
      v12 = v10;
      v13 = *(_QWORD *)(v9 + 56);
      v14 = type metadata accessor for AnyCodable(0);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v3, v13 + *(_QWORD *)(v15 + 72) * v12, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v3, 0, 1, v14);
    }
    else
    {
      v14 = type metadata accessor for AnyCodable(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
    }
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    type metadata accessor for AnyCodable(0);
    v16 = *(_QWORD *)(v14 - 8);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v3, 1, v14);
    if ((_DWORD)v17 == 1)
    {
      sub_1000150E8((uint64_t)v3, &qword_1001752C8);
      return 0;
    }
    else
    {
      v19 = AnyCodable.BOOLValue.getter(v17);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v14);
      return v19 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    return 0;
  }
}

uint64_t sub_10007FEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v0 = sub_100008E84(&qword_1001752C8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = static ISO18013ReaderRequestInfoConstant.requestLogotypeIconDataKey.getter(v1);
  v6 = v5;
  type metadata accessor for ReaderMetadataProvider(0);
  v8 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v7);
  if (!v8)
  {
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  v9 = v8;
  if (*(_QWORD *)(v8 + 16) && (v10 = sub_1000FBC04(v4, v6), (v11 & 1) != 0))
  {
    v12 = v10;
    v13 = *(_QWORD *)(v9 + 56);
    v14 = type metadata accessor for AnyCodable(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v3, v13 + *(_QWORD *)(v15 + 72) * v12, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v3, 0, 1, v14);
  }
  else
  {
    v14 = type metadata accessor for AnyCodable(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  type metadata accessor for AnyCodable(0);
  v16 = *(_QWORD *)(v14 - 8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v3, 1, v14);
  if ((_DWORD)v17 == 1)
  {
    sub_1000150E8((uint64_t)v3, &qword_1001752C8);
    return 0;
  }
  v18 = AnyCodable.dataValue.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v14);
  if (v20 >> 60 == 15)
    return 0;
  return v18;
}

uint64_t sub_100080060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v22;
  int64_t v23;
  _BYTE v24[15];
  char v25;

  v1 = v0;
  v2 = type metadata accessor for ReaderMetadataProvider(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 28));
  if (v6 == 2)
  {
    sub_10006BC40(v1, (uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
LABEL_26:
    sub_10006CA8C((uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
    return 0;
  }
  sub_10006BC40(v1, (uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
  if ((v6 & 1) != 0)
    goto LABEL_26;
  v7 = sub_10007FD24();
  v8 = sub_10006CA8C((uint64_t)v5, type metadata accessor for ReaderMetadataProvider);
  if ((v7 & 1) == 0)
    return 0;
  result = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v8);
  v10 = result;
  v11 = 0;
  v12 = result + 64;
  v13 = 1 << *(_BYTE *)(result + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(result + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v18 = v17 | (v11 << 6);
LABEL_9:
    v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18);
    v25 = 1;
    __chkstk_darwin(result);
    *(_QWORD *)&v24[-16] = &v25;
    swift_bridgeObjectRetain(v19);
    v20 = sub_1000F6490((uint64_t (*)(char *))sub_10008559C, (uint64_t)&v24[-32], v19);
    result = swift_bridgeObjectRelease(v19);
    if ((v20 & 1) != 0)
    {
      swift_release(v10);
      return 0;
    }
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v16)
    goto LABEL_30;
  v22 = *(_QWORD *)(v12 + 8 * v11);
  if (v22)
  {
LABEL_21:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_9;
  }
  v23 = v11 + 1;
  if (v11 + 1 >= v16)
    goto LABEL_30;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_20;
  v23 = v11 + 2;
  if (v11 + 2 >= v16)
    goto LABEL_30;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_20;
  v23 = v11 + 3;
  if (v11 + 3 >= v16)
  {
LABEL_30:
    swift_release(v10);
    return 1;
  }
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
  {
LABEL_20:
    v11 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_30;
    v22 = *(_QWORD *)(v12 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000802C8()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  int v20;
  id v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = sub_100008E84(&qword_100176BF0);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_100176BF8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v41 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v41 - v12;
  v14 = type metadata accessor for ReaderAuthenticationAllowableElements(0);
  v15 = __chkstk_darwin(v14);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v0;
  if (!*v0)
    return 0;
  v43 = v2;
  v44 = v16;
  v45 = v15;
  v20 = *((unsigned __int8 *)v0 + *(int *)(type metadata accessor for ReaderMetadataProvider(0) + 28));
  if (v20 == 2 || (v20 & 1) != 0)
    return 0;
  v22 = v19;
  v23 = sub_100080060();
  v24 = SecCertificateRef.allowableElementsForDisplayOnly.getter();
  if (v1)
  {

    return (uint64_t)v22;
  }
  v42 = v23;
  SecCertificateRef.allowableElementsForDataTransfer.getter(v24);
  v41 = v22;
  v26 = (uint64_t)&v4[*(int *)(v43 + 48)];
  v27 = (uint64_t)&v4[*(int *)(v43 + 64)];
  v28 = v42;
  *v4 = v42 & 1;
  v29 = (uint64_t)v13;
  v30 = v26;
  sub_10002E94C(v29, v26, &qword_100176BF8);
  v31 = (uint64_t)v11;
  v32 = v27;
  sub_10002E94C(v31, v27, &qword_100176BF8);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  v34 = v45;
  v35 = v33(v30, 1, v45);
  if (v35 == 1)
  {
    if (v33(v32, 1, v34) == 1)
    {

      sub_1000150E8(v30, &qword_100176BF8);
      return 0;
    }
    v37 = v45;
    v38 = v41;
    if ((v42 & 1) != 0)
    {

      v39 = v32;
LABEL_22:
      sub_1000150E8(v39, &qword_100176BF8);
      return 1;
    }
  }
  else
  {
    sub_10002E908(v30, (uint64_t)v8, &qword_100176BF8);
    if ((v28 & 1) != 0)
    {
      v36 = v44;
      v37 = v45;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v18, v8, v45);
      sub_1000150E8(v32, &qword_100176BF8);
LABEL_24:
      v40 = sub_1000150E8(v30, &qword_100176BF8);
      v22 = (id)ReaderAuthenticationAllowableElements.documentTypes.getter(v40);
      ReaderAuthenticationAllowableElements.elements.getter();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
      return (uint64_t)v22;
    }
    v37 = v45;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v45);
    v38 = v41;
  }
  if (v33(v32, 1, v37) != 1)
  {
    v36 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v18, v32, v37);
    goto LABEL_24;
  }
  if (v33(v30, 1, v37) != 1)
  {

    v39 = v30;
    goto LABEL_22;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v43, v43);
  __break(1u);
  return result;
}

void sub_100080678()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  v38 = &_swiftEmptySetSingleton;
  v0 = type metadata accessor for ReaderMetadataProvider(0);
  v1 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v0);
  v2 = 0;
  v31 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v32 = (unint64_t)(v3 + 63) >> 6;
  v33 = v1;
  while (2)
  {
    if (!v5)
    {
      v7 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_46;
      if (v7 >= v32)
        goto LABEL_43;
      v8 = *(_QWORD *)(v31 + 8 * v7);
      v9 = v2 + 1;
      if (!v8)
      {
        v9 = v2 + 2;
        if (v2 + 2 >= v32)
          goto LABEL_43;
        v8 = *(_QWORD *)(v31 + 8 * v9);
        if (!v8)
        {
          v9 = v2 + 3;
          if (v2 + 3 >= v32)
            goto LABEL_43;
          v8 = *(_QWORD *)(v31 + 8 * v9);
          if (!v8)
          {
            v10 = v2 + 4;
            if (v2 + 4 < v32)
            {
              v8 = *(_QWORD *)(v31 + 8 * v10);
              if (v8)
              {
                v9 = v2 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                v9 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_47;
                if (v9 >= v32)
                  break;
                v8 = *(_QWORD *)(v31 + 8 * v9);
                ++v10;
                if (v8)
                  goto LABEL_21;
              }
            }
LABEL_43:
            swift_release(v33);
            return;
          }
        }
      }
LABEL_21:
      v34 = (v8 - 1) & v8;
      v35 = v9;
      v6 = __clz(__rbit64(v8)) + (v9 << 6);
      goto LABEL_22;
    }
    v34 = (v5 - 1) & v5;
    v35 = v2;
    v6 = __clz(__rbit64(v5)) | (v2 << 6);
LABEL_22:
    v11 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v6);
    v12 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v6);
    v14 = *v11;
    v13 = v11[1];
    v15 = v12 + 64;
    v16 = 1 << *(_BYTE *)(v12 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & *(_QWORD *)(v12 + 64);
    v19 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v12);
    v20 = 0;
    while (1)
    {
      if (v18)
      {
        v21 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v22 = v21 | (v20 << 6);
        goto LABEL_27;
      }
      v28 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v28 >= v19)
        goto LABEL_5;
      v29 = *(_QWORD *)(v15 + 8 * v28);
      ++v20;
      if (!v29)
      {
        v20 = v28 + 1;
        if (v28 + 1 >= v19)
          goto LABEL_5;
        v29 = *(_QWORD *)(v15 + 8 * v20);
        if (!v29)
        {
          v20 = v28 + 2;
          if (v28 + 2 >= v19)
            goto LABEL_5;
          v29 = *(_QWORD *)(v15 + 8 * v20);
          if (!v29)
            break;
        }
      }
LABEL_42:
      v18 = (v29 - 1) & v29;
      v22 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_27:
      v23 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v22);
      v24 = *v23;
      v25 = (void *)v23[1];
      v36 = v14;
      v37 = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v25);
      v26._countAndFlagsBits = 58;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27._countAndFlagsBits = v24;
      v27._object = v25;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v25);
      sub_100005E20(&v36, v36, v37);
      swift_bridgeObjectRelease(v37);
    }
    v30 = v28 + 3;
    if (v30 >= v19)
    {
LABEL_5:
      swift_bridgeObjectRelease(v13);
      swift_release(v12);
      v5 = v34;
      v2 = v35;
      continue;
    }
    break;
  }
  v29 = *(_QWORD *)(v15 + 8 * v30);
  if (v29)
  {
    v20 = v30;
    goto LABEL_42;
  }
  while (1)
  {
    v20 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v20 >= v19)
      goto LABEL_5;
    v29 = *(_QWORD *)(v15 + 8 * v20);
    ++v30;
    if (v29)
      goto LABEL_42;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t sub_10008098C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  uint64_t v22;
  void *v23;
  double (*v24)(char *, uint64_t);
  double (*v25)(char *, uint64_t);
  double (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  double (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  os_log_t v71;
  uint64_t v72;
  double (*v73)(char *, uint64_t);
  __n128 v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  Swift::Int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  const char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_log_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double (*v159)(char *, uint64_t);
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;

  v158 = type metadata accessor for ReaderMetadataProvider(0);
  __chkstk_darwin(v158);
  v150 = (uint64_t)&v141 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DIPError.Code(0);
  v153 = *(_QWORD *)(v2 - 8);
  v154 = v2;
  __chkstk_darwin(v2);
  v155 = (char *)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v156 = *(_QWORD *)(v4 - 8);
  v157 = v4;
  v5 = __chkstk_darwin(v4);
  v152 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v151 = (char *)&v141 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v141 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v141 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v141 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v141 - v18;
  v20 = sub_100080060();
  v21 = v20;
  if ((v20 & 1) != 0)
    v22 = 0x2079616C70736964;
  else
    v22 = 0x6172742061746164;
  if ((v20 & 1) != 0)
    v23 = (void *)0xEC000000796C6E6FLL;
  else
    v23 = (void *)0xED0000726566736ELL;
  sub_100080678();
  v25 = v24;
  v26 = v159;
  v27 = sub_1000802C8();
  if (v26)
  {
    swift_bridgeObjectRelease(v23);
    return swift_bridgeObjectRelease(v25);
  }
  v148 = v22;
  v149 = v0;
  v159 = v25;
  v146 = v14;
  v147 = v11;
  v30 = v158;
  if (v27)
  {
    v31 = (unint64_t)v23;
    if (v27 == 1)
    {
      type metadata accessor for IDCSAnalytics(0);
      v32 = (_QWORD *)(v149 + *(int *)(v30 + 24));
      v33 = v159;
      static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)(*v32, v32[1], v21 & 1, v159);
      v34 = swift_bridgeObjectRelease(v33);
      v35 = v152;
      defaultLogger()(v34);
      v36 = swift_bridgeObjectRetain_n(v23, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      v39 = os_log_type_enabled(v37, v38);
      v40 = v156;
      if (v39)
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v160 = v42;
        *(_DWORD *)v41 = 136446210;
        swift_bridgeObjectRetain(v23);
        v43 = v148;
        v162 = (_QWORD *)sub_10003FA80(v148, (unint64_t)v23, &v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v41 + 4);
        swift_bridgeObjectRelease_n(v23, 3);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Reader certificate is not allowed to make %{public}s requests", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        (*(void (**)(char *, uint64_t))(v40 + 8))(v152, v157);
      }
      else
      {

        swift_bridgeObjectRelease_n(v23, 2);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v157);
        v43 = v148;
      }
      v160 = 0;
      v161 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v75._countAndFlagsBits = 0xD00000000000002ALL;
      v75._object = (void *)0x8000000100132B40;
      String.append(_:)(v75);
      v76._countAndFlagsBits = v43;
      v76._object = v23;
      String.append(_:)(v76);
      swift_bridgeObjectRelease(v23);
      v77._countAndFlagsBits = 0x7473657571657220;
      v77._object = (void *)0xE900000000000073;
      String.append(_:)(v77);
      v78 = v160;
      v79 = v161;
      v80 = v155;
      (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v155, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v154);
      v81 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v82 = type metadata accessor for DIPError(0);
      v83 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v82, v83, 0, 0);
      v84 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, v79, 0, v80, 0, v81, 0xD00000000000005ELL, 0x80000001001329E0, 0xD000000000000028, 0x8000000100132B70, 175);
      return swift_willThrow(v84);
    }
    v152 = 0;
    v51 = v17;
    v52 = v28;
    v53 = (_QWORD *)v27;
    defaultLogger()(v27);
    v54 = v53;
    swift_bridgeObjectRetain_n(v53, 2);
    swift_bridgeObjectRetain_n(v52, 2);
    swift_bridgeObjectRetain(v31);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.debug.getter();
    v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      v59 = swift_slowAlloc(32, -1);
      v145 = v51;
      v143 = v56;
      v60 = v31;
      v61 = v59;
      v144 = swift_slowAlloc(96, -1);
      v160 = v144;
      *(_DWORD *)v61 = 136446722;
      swift_bridgeObjectRetain(v60);
      v162 = (_QWORD *)sub_10003FA80(v148, v60, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v61 + 4);
      swift_bridgeObjectRelease_n(v60, 3);
      *(_WORD *)(v61 + 12) = 2080;
      v142 = v61 + 14;
      v162 = v54;
      v62 = sub_100008E84(&qword_100177CB0);
      v63 = sub_1000850F4(&qword_100176BB0, &qword_100177CB0, (uint64_t)&protocol conformance descriptor for [A]);
      LODWORD(v148) = v58;
      v64 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v62, v63);
      v66 = v65;
      v162 = (_QWORD *)sub_10003FA80(v64, v65, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v142);
      swift_bridgeObjectRelease_n(v54, 2);
      swift_bridgeObjectRelease(v66);
      *(_WORD *)(v61 + 22) = 2080;
      v162 = (_QWORD *)v52;
      v67 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v62, v63);
      v69 = v68;
      v162 = (_QWORD *)sub_10003FA80(v67, v68, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v61 + 24);
      v70 = v52;
      swift_bridgeObjectRelease_n(v52, 2);
      swift_bridgeObjectRelease(v69);
      v71 = v143;
      _os_log_impl((void *)&_mh_execute_header, v143, (os_log_type_t)v148, "Allowable elements for %{public}s request: documentTypes=[%s] elements=[%s]", (uint8_t *)v61, 0x20u);
      v72 = v144;
      swift_arrayDestroy(v144, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      v73 = *(double (**)(char *, uint64_t))(v156 + 8);
      v74.n128_f64[0] = v73(v145, v157);
    }
    else
    {

      v70 = v52;
      swift_bridgeObjectRelease_n(v52, 2);
      swift_bridgeObjectRelease_n(v54, 2);
      swift_bridgeObjectRelease_n(v31, 2);
      v73 = *(double (**)(char *, uint64_t))(v156 + 8);
      v74.n128_f64[0] = v73(v51, v157);
    }
    v85 = v149;
    v86 = v158;
    v87 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v74);
    v89 = v88;
    v90 = sub_1000D9C34(v87, v88, v54);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v89);
    v91 = (uint64_t)v159;
    if ((v90 & 1) == 0)
    {
      swift_bridgeObjectRelease(v70);
      type metadata accessor for IDCSAnalytics(0);
      static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)(*(_QWORD *)(v85 + *(int *)(v86 + 24)), *(_QWORD *)(v85 + *(int *)(v86 + 24) + 8), v21 & 1, v91);
      v109 = swift_bridgeObjectRelease(v91);
      v110 = v151;
      defaultLogger()(v109);
      v111 = v150;
      v112 = sub_10006BC40(v85, v150, type metadata accessor for ReaderMetadataProvider);
      v113 = Logger.logObject.getter(v112);
      v114 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(12, -1);
        v116 = swift_slowAlloc(32, -1);
        v159 = v73;
        v160 = v116;
        v117 = v116;
        v118.n128_u64[0] = 136315138;
        *(_DWORD *)v115 = 136315138;
        v119 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v118);
        v121 = v120;
        v162 = (_QWORD *)sub_10003FA80(v119, v120, &v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v115 + 4);
        swift_bridgeObjectRelease(v121);
        sub_10006CA8C(v111, type metadata accessor for ReaderMetadataProvider);
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Reader certificate is not allowed to request elements for document type: %s", v115, 0xCu);
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v117, -1, -1);
        swift_slowDealloc(v115, -1, -1);

        v159(v110, v157);
      }
      else
      {
        sub_10006CA8C(v111, type metadata accessor for ReaderMetadataProvider);

        v73(v110, v157);
      }
      v122 = v155;
      (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v155, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v154);
      v123 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v124 = type metadata accessor for DIPError(0);
      v125 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v124, v125, 0, 0);
      v126 = 0xD000000000000047;
      v139 = 150;
      v137 = 0xD000000000000028;
      v138 = 0x8000000100132B70;
      v127 = "Reader certificate is not allowed to request elements for document type";
      goto LABEL_36;
    }
    v92 = sub_10007A230(v70);
    v93 = swift_bridgeObjectRelease(v70);
    __chkstk_darwin(v93);
    v139 = v85;
    v140 = v92;
    v94 = v152;
    v95 = sub_100083B34((uint64_t)sub_1000850BC, (uint64_t)&v137, v91);
    swift_bridgeObjectRelease(v92);
    if (*(_QWORD *)(v95 + 16))
    {
      type metadata accessor for IDCSAnalytics(0);
      v96 = static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)(*(_QWORD *)(v85 + *(int *)(v158 + 24)), *(_QWORD *)(v85 + *(int *)(v158 + 24) + 8), v21 & 1, v95);
      v97 = v147;
      defaultLogger()(v96);
      v98 = swift_retain(v95);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        v159 = v73;
        v101 = (uint8_t *)swift_slowAlloc(12, -1);
        v102 = swift_slowAlloc(32, -1);
        v160 = v102;
        *(_DWORD *)v101 = 136315138;
        swift_bridgeObjectRetain(v95);
        v104 = sub_1000BEE18(v103);
        swift_release(v95);
        v162 = v104;
        sub_100084220((uint64_t *)&v162);
        if (v94)
        {
          swift_release(v95);
          result = swift_release(v162);
          __break(1u);
          return result;
        }
        v105 = (uint64_t)v162;
        v106 = Array.description.getter(v162, &type metadata for String);
        v108 = v107;
        swift_release(v105);
        v162 = (_QWORD *)sub_10003FA80(v106, v108, &v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v101 + 4);
        swift_release_n(v95, 2);
        swift_bridgeObjectRelease(v108);
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Reader certificate is not allowed to request these elements: %s", v101, 0xCu);
        swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v102, -1, -1);
        swift_slowDealloc(v101, -1, -1);

        v159(v147, v157);
      }
      else
      {

        swift_release_n(v95, 2);
        v73(v97, v157);
      }
      v122 = v155;
      (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v155, enum case for DIPError.Code.idcsRequestedElementsNotPermitted(_:), v154);
      v123 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v134 = type metadata accessor for DIPError(0);
      v135 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v134, v135, 0, 0);
      v126 = 0xD00000000000003BLL;
      v139 = 164;
      v137 = 0xD000000000000028;
      v138 = 0x8000000100132B70;
      v127 = "Reader certificate is not allowed to request these elements";
LABEL_36:
      v136 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v126, (unint64_t)(v127 - 32) | 0x8000000000000000, 0, v122, 0, v123, 0xD00000000000005ELL, 0x80000001001329E0, v137, v138, v139);
      return swift_willThrow(v136);
    }
    v128 = swift_release(v95);
    v129 = v146;
    v130 = defaultLogger()(v128);
    v131 = Logger.logObject.getter(v130);
    v132 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v131, v132))
    {
      v133 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v133 = 0;
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "Reader certificate passed allowable fields validation for requested elements", v133, 2u);
      swift_slowDealloc(v133, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v73)(v129, v157);
  }
  else
  {
    swift_bridgeObjectRelease(v159);
    v44 = swift_bridgeObjectRelease(v23);
    v45 = v19;
    v46 = defaultLogger()(v44);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v160 = v50;
      *(_DWORD *)v49 = 136446210;
      v162 = (_QWORD *)sub_10003FA80(v148, (unint64_t)v23, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v49 + 4);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Reader certificate pased allowable fields validation for %{public}s request", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v45, v157);
  }
}

uint64_t sub_100081890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v29 = a3;
  v5 = sub_100008E84(&qword_100176BC0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100176BC8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v31 = a2;
  v28 = a2;
  if (qword_100174408 != -1)
    swift_once(&qword_100174408, sub_10007FCA4);
  v12 = sub_100008E84(&qword_100176BD0);
  v13 = sub_100075EC8(v12, (uint64_t)qword_100176AA0);
  v14 = sub_10007A62C();
  v15 = sub_1000850F4(&qword_100176BD8, &qword_100176BD0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  BidirectionalCollection<>.wholeMatch<A>(of:)(v13, &type metadata for String, v12, v14, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000150E8((uint64_t)v7, &qword_100176BC0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    KeyPath = swift_getKeyPath(&unk_10012B1F0);
    Regex.Match.subscript.getter(&v30, KeyPath, v8);
    swift_release(KeyPath);
    v17 = v30;
    v18 = v31;
    v19 = v33;
    if ((v31 ^ (unint64_t)v30) >> 14)
    {
      v20 = v32;
      v21 = sub_100084E9C(v30, v31, v32, v33, 10);
      if ((v22 & 0x100) != 0)
        v21 = (uint64_t)sub_100083EB4(v17, v18, v20, v19, 10);
      v23 = v21;
      v24 = v22;
      swift_bridgeObjectRelease(v19);
      if ((v24 & 1) == 0 && v23 <= 0x63)
      {
        v25 = sub_1000097C4(0xD00000000000001DLL, 0x8000000100132C80, v29);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        return v25 & 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v33);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v25 = sub_1000097C4(a1, v28, v29);
  return v25 & 1;
}

uint64_t sub_100081B28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint8_t **v73;
  uint8_t *v74;
  char *v75;
  unint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint8_t **v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  int v111;
  uint8_t *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  void (*v125)(char *, char *, uint64_t);
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint8_t *v161;
  char *v162;
  void (*v163)(char *, char *, uint64_t);
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172[8];
  void (*v173)(char *, char *, uint64_t);

  v165 = a1;
  v146 = type metadata accessor for AlgorithmIdentifier(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v139 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for Logger(0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v148 = (char *)&v139 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPError.Code(0);
  v168 = *(_QWORD *)(v3 - 8);
  v169 = v3;
  __chkstk_darwin(v3);
  v167 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_100176B58);
  __chkstk_darwin(v5);
  v153 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100008E84(&qword_100176B60);
  __chkstk_darwin(v150);
  v149 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for HashDigest(0);
  v154 = *(_QWORD *)(v152 - 8);
  v8 = __chkstk_darwin(v152);
  v147 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v151 = (char *)&v139 - v10;
  v11 = sub_100008E84(&qword_100176B68);
  __chkstk_darwin(v11);
  v163 = (void (*)(char *, char *, uint64_t))((char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v156 = sub_100008E84(&qword_100176B70);
  __chkstk_darwin(v156);
  v155 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for URL(0);
  v158 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v159 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LogotypeDetails(0);
  v161 = *(uint8_t **)(v15 - 8);
  v162 = (char *)v15;
  __chkstk_darwin(v15);
  v160 = (uint64_t)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_100176B78);
  __chkstk_darwin(v17);
  v164 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008E84(&qword_100176B80);
  __chkstk_darwin(v19);
  v21 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008E84(&qword_100176B88);
  __chkstk_darwin(v22);
  v24 = (char *)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Logotype(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100008E84(&qword_100176B90);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v139 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v139 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v139 - v37;
  v39 = v170;
  SecCertificateRef.logotype.getter(v36);
  if (v39)
  {
    v40 = v167;
    (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v167, enum case for DIPError.Code.internalError(_:), v169);
    swift_errorRetain(v39);
    v41 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v42 = type metadata accessor for DIPError(0);
    v43 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v42, v43, 0, 0);
    v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v39, v40, 0, v41, 0xD00000000000005ELL, 0x80000001001329E0, 0xD000000000000017, 0x8000000100132AE0, 195);
    swift_willThrow(v44);
    return swift_errorRelease(v39);
  }
  v140 = v24;
  v141 = v28;
  v46 = v166;
  v170 = 0;
  sub_10002E94C((uint64_t)v35, (uint64_t)v38, &qword_100176B90);
  sub_10002E908((uint64_t)v38, (uint64_t)v32, &qword_100176B90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v32, 1, v25) == 1)
  {
    sub_1000150E8((uint64_t)v38, &qword_100176B90);
    v38 = v32;
LABEL_14:
    v64 = v165;
    sub_1000150E8((uint64_t)v38, &qword_100176B90);
    v65 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
  }
  v139 = v26;
  v47 = v141;
  v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v141, v32, v25);
  v49 = (uint64_t)v164;
  Logotype.subjectLogo.getter(v48);
  v50 = type metadata accessor for LogotypeInfo(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50) == 1)
  {
    sub_1000150E8(v49, &qword_100176B78);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v139 + 8))(v47, v25);
    goto LABEL_14;
  }
  LogotypeInfo.data.getter();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
  v52 = type metadata accessor for LogotypeData(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v21, 1, v52) == 1)
  {
    sub_1000150E8((uint64_t)v21, &qword_100176B80);
    goto LABEL_13;
  }
  v54 = (uint64_t)v140;
  LogotypeData.image.getter();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v52);
  v55 = type metadata accessor for LogotypeImage(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) == 1)
  {
    sub_1000150E8(v54, &qword_100176B88);
    goto LABEL_13;
  }
  v57 = v54;
  v58 = v160;
  LogotypeImage.imageDetails.getter();
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
  v60 = LogotypeDetails.logotypes.getter(v59);
  v61 = (*((uint64_t (**)(uint64_t, char *))v161 + 1))(v58, v162);
  v62 = (uint64_t)v163;
  Logotype.readerMetadata.getter(v61);
  v63 = sub_100008E84(&qword_100176B98);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) == 1)
  {
    sub_1000150E8(v62, &qword_100176B68);
    swift_bridgeObjectRelease(v60);
    goto LABEL_13;
  }
  v162 = v38;
  v164 = (char *)v25;
  v66 = (uint64_t *)(v62 + *(int *)(v63 + 48));
  v67 = *v66;
  v68 = v66[1];
  v70 = v155;
  v69 = v156;
  v71 = &v155[*(int *)(v156 + 48)];
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v158 + 32);
  v72(v155, v62, v46);
  *(_QWORD *)v71 = v67;
  *((_QWORD *)v71 + 1) = v68;
  v73 = (uint8_t **)&v70[*(int *)(v69 + 48)];
  v74 = v73[1];
  v161 = *v73;
  v75 = v159;
  v163 = (void (*)(char *, char *, uint64_t))v72;
  v72(v159, (uint64_t)v70, v46);
  v160 = sub_10007FEB8();
  if (v76 >> 60 == 15)
  {
    v77 = v74;
    swift_bridgeObjectRelease(v60);
    v78 = 0;
    v79 = 0xF000000000000000;
    goto LABEL_23;
  }
  v80 = v76;
  v81 = *(_QWORD *)(v60 + 16);
  v82 = sub_100008E84(&qword_100176BA0);
  v83 = *(_QWORD *)(v82 - 8);
  v77 = v74;
  if (v81)
  {
    v84 = v153;
    sub_10002E908(v60 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80)), v153, &qword_100176BA0);
    v85 = 0;
  }
  else
  {
    v85 = 1;
    v84 = v153;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v84, v85, 1, v82);
  swift_bridgeObjectRelease(v60);
  v86 = sub_100008E84(&qword_100176BA0);
  v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v84, 1, v86);
  v88 = v154;
  if (v87 == 1)
  {
    sub_1000150E8(v84, &qword_100176B58);
    sub_10000B164(v160, v80);
    v78 = 0;
    v79 = 0xF000000000000000;
    v75 = v159;
    goto LABEL_23;
  }
  v93 = (uint64_t *)(v84 + *(int *)(v86 + 48));
  v94 = *v93;
  v157 = v93[1];
  v95 = v150;
  v96 = v149;
  v97 = &v149[*(int *)(v150 + 48)];
  v98 = v84;
  v99 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 32);
  v100 = v152;
  v99(v149, v98, v152);
  v101 = v157;
  *(_QWORD *)v97 = v94;
  *((_QWORD *)v97 + 1) = v101;
  swift_bridgeObjectRelease(*(_QWORD *)&v96[*(int *)(v95 + 48) + 8]);
  v102 = v151;
  v99(v151, (uint64_t)v96, v100);
  v78 = v160;
  v157 = v80;
  v103 = v170;
  v104 = HashDigest.equalsHash(of:)(v160, v80);
  if (!v103)
  {
    v75 = v159;
    if ((v104 & 1) == 0)
    {
      swift_bridgeObjectRelease(v77);
      v133 = v167;
      (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v167, enum case for DIPError.Code.idcsCertificateLogoHashMismatch(_:), v169);
      v134 = v102;
      v135 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v136 = type metadata accessor for DIPError(0);
      v137 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v136, v137, 0, 0);
      v138 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100132B00, 0, v133, 0, v135, 0xD00000000000005ELL, 0x80000001001329E0, 0xD000000000000017, 0x8000000100132AE0, 215);
      swift_willThrow(v138);
      sub_10000B164(v78, v157);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v134, v152);
      (*(void (**)(char *, uint64_t))(v158 + 8))(v75, v166);
      (*(void (**)(char *, char *))(v139 + 8))(v141, v164);
      return sub_1000150E8((uint64_t)v162, &qword_100176B90);
    }
    (*(void (**)(char *, uint64_t))(v154 + 8))(v102, v152);
    v79 = v157;
LABEL_23:
    v89 = v166;
    (*(void (**)(char *, char *))(v139 + 8))(v141, v164);
    sub_1000150E8((uint64_t)v162, &qword_100176B90);
    v90 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
    v91 = v165;
    v163((char *)v165 + *(int *)(v90 + 20), v75, v89);
    *v91 = v78;
    v91[1] = v79;
    v92 = (uint8_t **)((char *)v91 + *(int *)(v90 + 24));
    *v92 = v161;
    v92[1] = v77;
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v91, 0, 1, v90);
  }
  v170 = v103;
  v105 = swift_bridgeObjectRelease(v77);
  v106 = v148;
  defaultLogger()(v105);
  v107 = v147;
  v108 = (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 16))(v147, v102, v100);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.error.getter();
  v111 = v110;
  if (os_log_type_enabled(v109, v110))
  {
    LODWORD(v165) = v111;
    v112 = (uint8_t *)swift_slowAlloc(12, -1);
    v163 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(32, -1);
    v173 = v163;
    *(_DWORD *)v112 = 136315138;
    v161 = v112 + 4;
    v113 = v144;
    HashDigest.algorithm.getter();
    v114 = sub_1000058C8(&qword_100176BA8, (uint64_t (*)(uint64_t))&type metadata accessor for AlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for AlgorithmIdentifier);
    v115 = v146;
    v116 = dispatch thunk of CustomStringConvertible.description.getter(v146, v114);
    v118 = v117;
    v119 = v145;
    (*(void (**)(char *, uint64_t))(v145 + 8))(v113, v115);
    v171 = sub_10003FA80(v116, v118, (uint64_t *)&v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v161);
    v120 = v118;
    v121 = v152;
    swift_bridgeObjectRelease(v120);
    v122 = v107;
    v123 = v119;
    v124 = *(void (**)(char *, uint64_t))(v154 + 8);
    v124(v122, v121);
    _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v165, "Unable to verify logotype data hash, unknown hash algorithm identifier: %s", v112, 0xCu);
    v125 = v163;
    swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v112, -1, -1);

    (*(void (**)(char *, uint64_t))(v142 + 8))(v148, v143);
    v126 = v167;
  }
  else
  {
    v121 = v100;
    v124 = *(void (**)(char *, uint64_t))(v88 + 8);
    v124(v107, v100);

    (*(void (**)(char *, uint64_t))(v142 + 8))(v106, v143);
    v126 = v167;
    v115 = v146;
    v123 = v145;
    v113 = v144;
  }
  type metadata accessor for IDCSAnalytics(0);
  v127 = v151;
  HashDigest.algorithm.getter();
  static IDCSAnalytics.sendUnknownLogotypeHashAlgorithmIdentifier(_:)(v113);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v113, v115);
  (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v126, enum case for DIPError.Code.internalError(_:), v169);
  v128 = v170;
  swift_errorRetain(v170);
  v129 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v130 = type metadata accessor for DIPError(0);
  v131 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v130, v131, 0, 0);
  v132 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v128, v126, 0, v129, 0xD00000000000005ELL, 0x80000001001329E0, 0xD000000000000017, 0x8000000100132AE0, 211);
  swift_willThrow(v132);
  sub_10000B164(v160, v157);
  swift_errorRelease(v128);
  v124(v127, v121);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v159, v166);
  (*(void (**)(char *, char *))(v139 + 8))(v141, v164);
  return sub_1000150E8((uint64_t)v162, &qword_100176B90);
}

unint64_t sub_100082ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  Swift::String v43;
  Swift::Bool v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v66;
  uint64_t v67;
  int v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t *, uint64_t, uint64_t);
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  _BOOL4 v127;
  uint64_t v128;
  uint8_t *v129;
  uint8_t *v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t, uint64_t, uint64_t);
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t *v168;
  char *v169;
  void (*v170)(uint64_t, uint64_t, uint64_t, char *);
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  char v183[24];
  uint64_t v184;
  _BYTE v185[16];
  uint64_t v186;
  char v187[8];
  uint64_t v188;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v157 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  v179 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v162 = (uint64_t)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v163 = (uint64_t)&v157 - v9;
  v177 = type metadata accessor for Logger(0);
  v174 = *(_QWORD *)(v177 - 8);
  v10 = __chkstk_darwin(v177);
  v172 = (uint64_t)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v157 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v157 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v157 - v19;
  v21 = __chkstk_darwin(v18);
  v166 = (char *)&v157 - v22;
  __chkstk_darwin(v21);
  v173 = (char *)&v157 - v23;
  v24 = sub_100008E84(&qword_1001754B8);
  v25 = __chkstk_darwin(v24);
  v176 = (uint64_t)&v157 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v182 = (uint64_t)&v157 - v28;
  v29 = __chkstk_darwin(v27);
  v169 = (char *)&v157 - v30;
  __chkstk_darwin(v29);
  v180 = (uint64_t)&v157 - v31;
  v32 = sub_100008E84(&qword_100176B50);
  v33 = __chkstk_darwin(v32);
  v165 = (char *)&v157 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v164 = (uint64_t)&v157 - v36;
  v37 = __chkstk_darwin(v35);
  v171 = (char *)&v157 - v38;
  v39 = __chkstk_darwin(v37);
  v168 = (uint64_t *)((char *)&v157 - v40);
  __chkstk_darwin(v39);
  v181 = (uint64_t *)((char *)&v157 - v41);
  v175 = (void **)v0;
  sub_10008098C();
  v188 = v6;
  v167 = v20;
  if (v1)
  {
    v42 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v43._countAndFlagsBits = 0xD00000000000002ALL;
    v43._object = (void *)0x80000001001329B0;
    v44 = NSUserDefaults.internalBool(forKey:)(v43);

    if (!v44)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
      swift_errorRetain(v1);
      v57 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v58 = type metadata accessor for DIPError(0);
      v59 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v58, v59, 0, 0);
      v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v57, 0xD00000000000005ELL, 0x80000001001329E0, 0xD000000000000010, 0x8000000100132A40, 231);
      swift_willThrow(v60);
      swift_errorRelease(v1);
      return v57;
    }
    defaultLogger()(v45);
    swift_errorRetain(v1);
    v46 = swift_errorRetain(v1);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v178 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = 138412290;
      swift_errorRetain(v1);
      v50 = _swift_stdlib_bridgeErrorToNSError(v1);
      v186 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v49 + 4);
      v51 = v178;
      *v178 = v50;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Ignoring requested fields validation error due to user defaults setting: %@", v49, 0xCu);
      v52 = sub_100008E84(&qword_100175350);
      swift_arrayDestroy(v51, 1, v52);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
    v6 = v188;
    v53 = v174;
    v54 = v175;
    v55 = v177;
    v56 = v173;
    (*(void (**)(char *, uint64_t))(v174 + 8))(v14, v177);
    v178 = 0;
  }
  else
  {
    v178 = 0;
    v53 = v174;
    v54 = v175;
    v55 = v177;
    v56 = v173;
  }
  v61 = v179;
  v62 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v179 + 56);
  v62(v181, 1, 1, v6);
  v63 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v64 + 56);
  v173 = (char *)v63;
  v170 = v65;
  ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v180, 1, 1);
  v66 = type metadata accessor for ReaderMetadataProvider(0);
  v67 = v66;
  v68 = *((unsigned __int8 *)v54 + *(int *)(v66 + 28));
  v161 = v64;
  if (v68 == 2 || (v68 & 1) != 0 || (v69 = *v54) == 0)
  {
    v83 = defaultLogger()(v66);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = v67;
      v87 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Certificate not present or not issued by Apple: will not read icon metadata, privacy policy URL, or merchant category code", v87, 2u);
      v88 = v87;
      v67 = v86;
      swift_slowDealloc(v88, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v55);
    v89 = *(int *)(v67 + 24);
    v90 = *(uint64_t *)((char *)v54 + v89 + 24);
    v175 = *(void ***)((char *)v54 + v89 + 16);
    v91 = *(uint64_t *)((char *)v54 + v89 + 40);
    v177 = *(uint64_t *)((char *)v54 + v89 + 32);
    v172 = v91;
    swift_bridgeObjectRetain(v91);
    v174 = v90;
    swift_bridgeObjectRetain(v90);
    v171 = 0;
    v92 = v188;
    v93 = v181;
    v81 = v173;
    v94 = v170;
  }
  else
  {
    v157 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v62;
    v159 = v66;
    v70 = v69;
    v71 = defaultLogger()(v70);
    v72 = v56;
    v73 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Certificate is issued by Apple: reading read icon metadata and privacy policy URL", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    v76 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
    v77 = v76(v72, v55);
    v78 = (uint64_t)v169;
    v160 = v70;
    v79 = v178;
    v80 = SecCertificateRef.privacyPolicyURL.getter(v77);
    v81 = v173;
    if (v79)
    {
      v82 = v172;
      defaultLogger()(v80);
      DIPLogError(_:message:log:)(v79, 0xD00000000000002ELL, 0x8000000100132A60, v82);
      swift_errorRelease(v79);
      v76((char *)v82, v55);
    }
    else
    {
      v111 = v180;
      sub_1000150E8(v180, &qword_1001754B8);
      v112 = v111;
      v61 = v179;
      sub_10002E94C(v78, v112, &qword_1001754B8);
    }
    v113 = v168;
    sub_100081B28(v168);
    v158 = (void (*)(char *, uint64_t))v76;
    v178 = 0;
    v114 = (uint64_t)v181;
    v115 = sub_100083AA8((uint64_t)v113, (uint64_t)v181);
    v175 = (void **)SecCertificateRef.pseudonym.getter(v115);
    v117 = v116;
    v118 = v114;
    v119 = (uint64_t)v171;
    sub_10002E908(v118, (uint64_t)v171, &qword_100176B50);
    v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    v121 = v120(v119, 1, v188);
    v122 = sub_1000150E8(v119, &qword_100176B50);
    if (v121 == 1 || !v117)
    {
      v136 = v167;
      defaultLogger()(v122);
      swift_bridgeObjectRetain(v117);
      v138 = Logger.logObject.getter(v137);
      v139 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v138, v139))
      {
        v174 = v117;
        v140 = swift_slowAlloc(22, -1);
        v141 = swift_slowAlloc(64, -1);
        v186 = v141;
        *(_DWORD *)v140 = 136315394;
        v142 = (uint64_t)v181;
        swift_beginAccess(v181, v183, 0, 0);
        v143 = v164;
        sub_10002E908(v142, v164, &qword_100176B50);
        v144 = v120(v143, 1, v188);
        v145 = 7104878;
        v146 = 0xE300000000000000;
        if (v144 != 1)
        {
          v147 = v143;
          v148 = v163;
          sub_100083AF0(v147, v163);
          v149 = v162;
          sub_10006BC40(v148, v162, type metadata accessor for ReaderMetadataProvider.IconMetadata);
          v145 = String.init<A>(describing:)(v149, v188);
          v146 = v150;
          sub_10006CA8C(v148, type metadata accessor for ReaderMetadataProvider.IconMetadata);
        }
        v184 = sub_10003FA80(v145, v146, &v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v140 + 4);
        swift_bridgeObjectRelease(v146);
        *(_WORD *)(v140 + 12) = 2080;
        v151 = v174;
        if (v174)
          v152 = (uint64_t)v175;
        else
          v152 = 7104878;
        if (v174)
          v153 = v174;
        else
          v153 = 0xE300000000000000;
        swift_bridgeObjectRetain(v174);
        v184 = sub_10003FA80(v152, v153, &v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v140 + 14);
        swift_bridgeObjectRelease_n(v151, 2);
        swift_bridgeObjectRelease(v153);
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "Received icon metadata (%s) and pseudonym (%s), at least one is nil: ignoring MCC, organization and organizational unit", (uint8_t *)v140, 0x16u);
        swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v140, -1, -1);

        v158(v167, v177);
        v92 = v188;
        v61 = v179;
        v81 = v173;
      }
      else
      {

        swift_bridgeObjectRelease_n(v117, 2);
        v158(v136, v55);
        v92 = v188;
        v61 = v179;
      }
      v94 = v170;
      v155 = (uint64_t)v165;
      v156 = v159;
      v157(v165, 1, 1, v92);
      v93 = v181;
      swift_beginAccess(v181, &v184, 1, 0);
      sub_100083AA8(v155, (uint64_t)v93);
      v171 = 0;
      v172 = 0;
      v177 = 0;
      v174 = 0;
      v175 = 0;
      v89 = *(int *)(v156 + 24);
    }
    else
    {
      v174 = v117;
      v123 = v166;
      v124 = defaultLogger()(v122);
      v125 = Logger.logObject.getter(v124);
      v126 = static os_log_type_t.debug.getter();
      v127 = os_log_type_enabled(v125, v126);
      v94 = v170;
      v128 = v159;
      if (v127)
      {
        v129 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v129 = 0;
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "Icon metadata and pseudonym are present: reading MCC, forwarding organization and organizational unit", v129, 2u);
        v130 = v129;
        v128 = v159;
        swift_slowDealloc(v130, -1, -1);
      }

      v131 = ((uint64_t (*)(char *, uint64_t))v158)(v123, v55);
      v132 = v160;
      v133 = SecCertificateRef.merchantCategoryCode.getter(v131);
      v61 = v179;
      v93 = v181;
      if ((v134 & 1) != 0)
      {

        v89 = *(int *)(v128 + 24);
        v154 = *(uint64_t *)((char *)v54 + v89 + 40);
        v177 = *(uint64_t *)((char *)v54 + v89 + 32);
        v172 = v154;
        swift_bridgeObjectRetain(v154);
        v171 = 0;
      }
      else
      {
        v171 = (char *)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v133);

        v89 = *(int *)(v128 + 24);
        v135 = *(uint64_t *)((char *)v54 + v89 + 40);
        v177 = *(uint64_t *)((char *)v54 + v89 + 32);
        v172 = v135;
        swift_bridgeObjectRetain(v135);
      }
      v92 = v188;
    }
  }
  v95 = *(uint64_t *)((char *)v54 + v89);
  v96 = *(uint64_t *)((char *)v54 + v89 + 8);
  swift_beginAccess(v93, &v186, 0, 0);
  v97 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v61 + 48);
  v98 = v97(v93, 1, v92);
  v181 = (uint64_t *)v95;
  if (v98)
  {
    v99 = 0;
    v100 = 0xF000000000000000;
  }
  else
  {
    v99 = *v93;
    v100 = v93[1];
    sub_10000B178(*v93, v100);
  }
  v101 = 1;
  v102 = v188;
  if (!v97(v93, 1, v188))
  {
    (*(void (**)(uint64_t, char *, char *))(v161 + 16))(v182, (char *)v93 + *(int *)(v102 + 20), v81);
    v101 = 0;
  }
  v94(v182, v101, 1, v81);
  if (v97(v93, 1, v102))
  {
    v103 = 0;
    v104 = 0;
  }
  else
  {
    v105 = (uint64_t *)((char *)v93 + *(int *)(v102 + 24));
    v103 = *v105;
    v104 = v105[1];
    swift_bridgeObjectRetain(v104);
  }
  v106 = v176;
  v107 = (uint64_t)v93;
  v108 = v180;
  sub_10002E908(v180, v176, &qword_1001754B8);
  v109 = objc_allocWithZone((Class)DCPresentmentProposalReaderMetadata);
  swift_bridgeObjectRetain(v96);
  v57 = (unint64_t)sub_1000BE858((uint64_t)v181, v96, (uint64_t)v175, v174, v177, v172, v99, v100, v182, v103, v104, v106, v171);
  sub_1000150E8(v108, &qword_1001754B8);
  sub_1000150E8(v107, &qword_100176B50);
  return v57;
}

__n128 sub_1000839FC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int *a5@<X4>, _QWORD *a6@<X8>)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __n128 result;

  *a6 = a1;
  v11 = (char *)a6 + a5[5];
  v12 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  v13 = a5[7];
  v14 = (char *)a6 + a5[6];
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a3;
  *((_OWORD *)v14 + 1) = v15;
  result = *(__n128 *)(a3 + 32);
  *((__n128 *)v14 + 2) = result;
  *((_BYTE *)a6 + v13) = a4;
  return result;
}

unint64_t sub_100083A80()
{
  return sub_100082ACC();
}

uint64_t type metadata accessor for ReaderMetadataProvider.IconMetadata(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100176C58, (uint64_t)&nominal type descriptor for ReaderMetadataProvider.IconMetadata);
}

uint64_t sub_100083AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100176B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int sub_100083B34(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(_QWORD *, __n128);
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  Swift::Int v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (uint64_t (*)(_QWORD *, __n128))isStackAllocationSafe;
  v6 = *(_BYTE *)(a3 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = sub_100083CB0((Swift::Int)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a3, v5);
    v12 = swift_release(a3);
    if (v3)
      swift_willThrow(v12);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v10, -1);
    bzero(v13, v10);
    v11 = sub_100083CB0((Swift::Int)v13, v9, a3, v5);
    swift_release(a3);
    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

Swift::Int sub_100083CB0(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, __n128))
{
  uint64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  char v19;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int64_t v25;

  v21 = (unint64_t *)result;
  v7 = 0;
  v22 = 0;
  v23 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v25 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v7 << 6);
LABEL_17:
    v16 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v17 = v16[1];
    v24[0] = *v16;
    v24[1] = v17;
    v18 = swift_bridgeObjectRetain(v17);
    v19 = a4(v24, v18);
    result = swift_bridgeObjectRelease(v17);
    if (v4)
      return result;
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)v21 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v22++, 1);
      if (v13)
        goto LABEL_30;
    }
  }
  v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v25)
    goto LABEL_26;
  v14 = *(_QWORD *)(v23 + 8 * v7);
  if (v14)
  {
LABEL_16:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  v15 = v7 + 1;
  if (v7 + 1 >= v25)
    goto LABEL_26;
  v14 = *(_QWORD *)(v23 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 2;
  if (v7 + 2 >= v25)
    goto LABEL_26;
  v14 = *(_QWORD *)(v23 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 3;
  if (v7 + 3 >= v25)
  {
LABEL_26:
    swift_retain(a3);
    return sub_10003922C(v21, a2, v22, a3);
  }
  v14 = *(_QWORD *)(v23 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v25)
      goto LABEL_26;
    v14 = *(_QWORD *)(v23 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

unsigned __int8 *sub_100083EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100085134();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_1000342AC(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_100083FA4(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_100083FA4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

Swift::Int sub_100084220(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100084E88(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100084288(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100084288(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_100084970(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_100084A3C((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100084E74((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100084CD4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_100084CD4((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_100084A3C((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_100084970(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100084A3C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_100084DCC((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100084CD4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008E84(&qword_100176BB8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100084DCC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_100084E74(uint64_t a1)
{
  return sub_100084CD4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100084E88(uint64_t a1)
{
  return sub_100055A8C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100084E9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_100085178((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_100084F6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if (v5 >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      sub_10000B178(*a1, v5);
      sub_10000B178(v6, v7);
      sub_1001044DC(v4, v5);
      v9 = v8;
      sub_10000B164(v6, v7);
      sub_10000B164(v4, v5);
      if ((v9 & 1) != 0)
        goto LABEL_7;
      return 0;
    }
LABEL_5:
    sub_10000B178(*a1, v5);
    sub_10000B178(v6, v7);
    sub_10000B164(v4, v5);
    sub_10000B164(v6, v7);
    return 0;
  }
  if (v7 >> 60 != 15)
    goto LABEL_5;
LABEL_7:
  v10 = type metadata accessor for ReaderMetadataProvider.IconMetadata(0);
  if ((static URL.== infix(_:_:)((char *)a1 + *(int *)(v10 + 20), (char *)a2 + *(int *)(v10 + 20)) & 1) == 0)
    return 0;
  v11 = *(int *)(v10 + 24);
  v12 = *(uint64_t *)((char *)a1 + v11);
  v13 = *(uint64_t *)((char *)a1 + v11 + 8);
  v14 = (uint64_t *)((char *)a2 + v11);
  v15 = v14[1];
  if (v12 == *v14 && v13 == v15)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 0);
}

BOOL sub_1000850BC(uint64_t *a1)
{
  uint64_t v1;

  return (sub_100081890(*a1, a1[1], *(_QWORD *)(v1 + 24)) & 1) == 0;
}

uint64_t sub_1000850F4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100016404(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100085134()
{
  unint64_t result;

  result = qword_100176BE0;
  if (!qword_100176BE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100176BE0);
  }
  return result;
}

uint64_t sub_100085178(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_100033E30(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_100033E30(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_100033E30(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

BOOL sub_10008559C(unsigned __int8 *a1)
{
  uint64_t v1;

  return ((*a1 ^ **(unsigned __int8 **)(v1 + 16)) & 1) == 0;
}

uint64_t *sub_1000855B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_100005A38(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *v4 = v9;
      v4[1] = v7;
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)v4 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return v4;
}

uint64_t sub_100085690(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_100005AB0(*a1, v4);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100085700(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_100005A38(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t *sub_1000857AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *(_QWORD *)a2;
      sub_100005A38(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v9 = *a1;
      v10 = a1[1];
      *a1 = v8;
      a1[1] = v6;
      sub_100005AB0(v9, v10);
      goto LABEL_8;
    }
    sub_100014A1C((uint64_t)a1);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)a2;
  sub_100005A38(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v7;
  a1[1] = v6;
LABEL_8:
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

_OWORD *sub_1000858B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_100085928(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a1[1];
  if (v6 >> 60 != 15)
  {
    v7 = a2[1];
    if (v7 >> 60 != 15)
    {
      v8 = *a1;
      *a1 = *a2;
      a1[1] = v7;
      sub_100005AB0(v8, v6);
      goto LABEL_6;
    }
    sub_100014A1C((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1000859EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000859F8);
}

uint64_t sub_1000859F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085A04(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_100085A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1 + *(int *)(a3 + 20), a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100085A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085A94);
}

uint64_t sub_100085A94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100085AA0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_100085AA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100085B20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10012B220;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10012B238;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for AccountKeySigningKeySignatureProvider(_QWORD *a1)
{
  swift_release(*a1);
  return sub_100005AB0(a1[1], a1[2]);
}

uint64_t *_s7idcredd37AccountKeySigningKeySignatureProviderVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  swift_retain(v3);
  sub_100005A38(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for AccountKeySigningKeySignatureProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[1];
  v6 = a2[2];
  sub_100005A38(v7, v6);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v7;
  a1[2] = v6;
  sub_100005AB0(v8, v9);
  return a1;
}

__n128 initializeWithTake for AccountKeySigningKeySignatureProvider(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for AccountKeySigningKeySignatureProvider(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  v5 = a1[1];
  v6 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100005AB0(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountKeySigningKeySignatureProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountKeySigningKeySignatureProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountKeySigningKeySignatureProvider()
{
  return &type metadata for AccountKeySigningKeySignatureProvider;
}

void sub_100085D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v16 = a3;
  v4 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v4 - 8);
  v15 = (char *)v4;
  __chkstk_darwin(v4);
  v5 = type metadata accessor for Insecure.SHA1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for Insecure.SHA1Digest(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of SESKeystore.getPublicKey(of:)(a2, v16);
  v12 = v11;
  v14 = v6;
  v15 = v10;
  v16 = v8;
  sub_1000058C8(&qword_100174BB8, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1, (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  dispatch thunk of HashFunction.init()(v5);
  __asm { BR              X10 }
}

void sub_100086110()
{
  uint64_t *v0;

  sub_100085D60(*v0, v0[1], v0[2]);
}

id sub_10008611C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100100940(a1, a2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
}

uint64_t sub_100086144()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[4] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000861CC, 0, 0);
}

uint64_t sub_1000861CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ACLFetcher payloadEncryptionKeyACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[9];
  v6 = v1[10];
  v8 = v1[8];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_100176D54);
  v1[11] = v9;
  *v9 = v1;
  v9[1] = sub_1000862AC;
  return sub_100087254();
}

uint64_t sub_1000862AC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10008668C;
  }
  else
  {
    *(_BYTE *)(v4 + 105) = a1;
    v6 = sub_100086320;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_100086320()
{
  __asm { BR              X10 }
}

uint64_t sub_10008635C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD **)(v0 + 32);
  v3 = v2[6];
  v4 = v2[7];
  sub_1000151A4(v2 + 3, v3);
  v5 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:))(0, 1, 0, 0xF000000000000000, v3, v4);
  v7 = v1;
  if (v1)
  {
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
    swift_errorRetain(v1);
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100132EA0, v7, v13, 0, v14, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000019, 0x8000000100132ED0, 237);
    swift_willThrow(v17);
    swift_errorRelease(v7);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v5;
    v9 = v6;
    v10 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v9);
  }
}

uint64_t sub_10008668C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
  swift_errorRetain(v1);
  v4 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_10000745C();
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100132EA0, v1, v3, 0, v4, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000019, 0x8000000100132ED0, 237);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000867B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100086818, 0, 0);
}

uint64_t sub_100086818()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 16) == 2)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_1001772C4);
    *(_QWORD *)(v0 + 56) = v1;
    *v1 = v0;
    v1[1] = sub_1000868B0;
    return sub_1000A2C6C(0xD000000000000012, 0x800000010012D7B0);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  }
}

uint64_t sub_1000868B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (_QWORD *)*v3;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *v3;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_task_dealloc(v6[6]);
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  else
  {
    v6[8] = a2;
    v6[9] = a1;
    return swift_task_switch(sub_100086938, 0, 0);
  }
}

uint64_t sub_100086938()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    v2 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 32));
    v3 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v4 = type metadata accessor for DIPError(0);
    v5 = sub_10000745C();
    swift_allocError(v4, v5, 0, 0);
    v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100133010, 0, v2, 0, v3, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000023, 0x8000000100133050, 72);
    swift_willThrow(v6);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v8, v1);
  }
}

uint64_t sub_100086A88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100086B20, 0, 0);
}

uint64_t sub_100086B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  SecAccessControlCreateFlags v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 16);
  if (v2 == 2)
  {
    v10 = defaultLogger()(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Credential uses global binding policy", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v15 = *(_QWORD *)(v1 + 64);
    v14 = *(_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 56);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v17 = (_QWORD *)swift_task_alloc(dword_100177254);
    *(_QWORD *)(v1 + 88) = v17;
    *v17 = v1;
    v17[1] = sub_100086E54;
    return sub_1000A292C(0xD000000000000012, 0x800000010012D7B0);
  }
  else
  {
    if (v2 == 1)
    {
      v3 = defaultLogger()(a1);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Credential uses anyBiometricOrPasscode policy", v6, 2u);
        swift_slowDealloc(v6, -1, -1);
      }
      v7 = *(_QWORD *)(v1 + 80);
      v8 = *(_QWORD *)(v1 + 56);
      v9 = *(_QWORD *)(v1 + 64);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      v19 = sub_100088978(0x40000001uLL, 1);
      v21 = v20;
    }
    else
    {
      v19 = 0;
      v21 = 0xF000000000000000;
    }
    v22 = *(_QWORD *)(v1 + 72);
    v23 = *(_QWORD *)(v1 + 48);
    swift_task_dealloc(*(_QWORD *)(v1 + 80));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(SecAccessControlCreateFlags, unint64_t))(v1 + 8))(v19, v21);
  }
}

uint64_t sub_100086E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100087128;
  else
    v5 = sub_100086EC0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100086EC0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 96);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 96), "aclData");
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v5);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v9, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 32));
    v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_10000745C();
    v13 = swift_allocError(v11, v12, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100133010, 0, v9, 0, v10, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ALL, 0x8000000100132FF0, 44);
    swift_willThrow(v14);
    v15 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
    swift_errorRetain(v13);
    v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v11, v12, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v13, v16, 0, v17, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ALL, 0x8000000100132FF0, 56);
    swift_willThrow(v18);
    swift_errorRelease(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v19);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100087128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_10000745C();
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ALL, 0x8000000100132FF0, 56);
  swift_willThrow(v8);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087254()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000872F8, 0, 0);
}

uint64_t sub_1000872F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100177254);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_10008735C;
  return sub_1000A292C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_10008735C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100087784;
  else
    v5 = sub_1000873C8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000873C8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, _QWORD);
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 96);
  if (!v1)
  {
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104);
    v10(v9, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 24));
    v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_10000745C();
    v14 = swift_allocError(v12, v13, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100132E80, 0, v9, 0, v11, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ELL, 0x8000000100132E60, 170);
    swift_willThrow(v15);
    v30 = *(_QWORD *)(v0 + 80);
    v31 = *(_QWORD *)(v0 + 72);
    v32 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 40);
    v10(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
    swift_errorRetain(v14);
    v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v12, v13, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100132E30, v14, v16, 0, v17, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ELL, 0x8000000100132E60, 203);
    swift_willThrow(v18);
    swift_errorRelease(v14);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = objc_msgSend(*(id *)(v0 + 96), "aclType");
  if (v2 == (id)2)
  {
    v3 = (uint64_t *)(v0 + 72);
    v20 = defaultLogger()(2);
    v5 = Logger.logObject.getter(v20);
    v6 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v5, v6))
    {
      v33 = *v3;
      v7 = 1;
      goto LABEL_15;
    }
    v7 = 1;
    v8 = "Device encryption scenario is phonePasscode";
  }
  else if (v2 == (id)1)
  {
    v3 = (uint64_t *)(v0 + 80);
    v4 = defaultLogger()(1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    v7 = 0;
    if (!os_log_type_enabled(v5, v6))
    {
      v33 = *v3;
      goto LABEL_15;
    }
    v8 = "Device encryption scenario is phoneBiometricBinding";
  }
  else
  {
    v3 = (uint64_t *)(v0 + 64);
    v21 = defaultLogger()(v2);
    v5 = Logger.logObject.getter(v21);
    v6 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v5, v6))
    {
      v33 = *v3;
      v7 = 4;
      goto LABEL_15;
    }
    v7 = 4;
    v8 = "Device encryption scenario is unknown (phone)";
  }
  v33 = *v3;
  v22 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v22 = 0;
  _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v22, 2u);
  swift_slowDealloc(v22, -1, -1);
LABEL_15:
  v23 = v5;
  v25 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 56);
  v27 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 40);
  v28 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v33, v28);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100087784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100132E30, v1, v5, 0, v6, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000001ELL, 0x8000000100132E60, 203);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000878CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[4] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_100176D48);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v1[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[10] = v6;
  v1[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v1[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[13] = v8;
  v1[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000879A0, 0, 0);
}

uint64_t sub_1000879A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ACLFetcher payloadAccessACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[13];
  v6 = v1[14];
  v8 = v1[12];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_100176D54);
  v1[15] = v9;
  *v9 = v1;
  v9[1] = sub_100087A80;
  return sub_100087254();
}

uint64_t sub_100087A80(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100088418;
  }
  else
  {
    *(_BYTE *)(v4 + 169) = a1;
    v6 = sub_100087AF4;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_100087AF4()
{
  __asm { BR              X10 }
}

uint64_t sub_100087B30()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10017723C);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_100087EC0;
  return sub_1000A385C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_100087B8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD **)(v0 + 32);
  v3 = v2[6];
  v4 = v2[7];
  sub_1000151A4(v2 + 3, v3);
  v5 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:))(1, 2, 0, 0xF000000000000000, v3, v4);
  v7 = v1;
  if (v1)
  {
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 56);
    v17 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
    swift_errorRetain(v1);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_10000745C();
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100132D20, v7, v16, 0, v18, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000012, 0x8000000100132DA0, 277);
    swift_willThrow(v21);
    swift_errorRelease(v7);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v5;
    v9 = v6;
    v10 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v9);
  }
}

uint64_t sub_100087EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 136);
  v5[18] = a1;
  v5[19] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_1000882D0;
  }
  else
  {
    v5[20] = a2;
    v7 = sub_100087F3C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100087F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 144);
  if (*(uint64_t *)(v0 + 160) < 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
LABEL_8:
    v6 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 40));
    v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_10000745C();
    v10 = swift_allocError(v8, v9, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100132DF0, 0, v6, 0, v7, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000012, 0x8000000100132DA0, 254);
    swift_willThrow(v11);
LABEL_10:
    v23 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 88);
    v25 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v25, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
    swift_errorRetain(v10);
    v27 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v28 = type metadata accessor for DIPError(0);
    v29 = sub_10000745C();
    swift_allocError(v28, v29, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100132D20, v10, v25, 0, v27, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000012, 0x8000000100132DA0, 277);
    swift_willThrow(v30);
    swift_errorRelease(v10);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v1 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 64), v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 80) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 80) + 80)), *(_QWORD *)(v0 + 72));
    v2 = 0;
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  swift_bridgeObjectRelease(v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_1000885AC(*(_QWORD *)(v0 + 64));
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD **)(v0 + 32);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v14 = v13 + 3;
  v15 = v13[6];
  v16 = v13[7];
  sub_1000151A4(v14, v15);
  v17 = UUID.data.getter();
  v19 = v18;
  v20 = dispatch thunk of AppleIDVManaging.prepareACL(aclType:aclUsage:bioUUID:)(0, 2, v17, v18, v15, v16);
  v22 = v21;
  v10 = v12;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  sub_100005AB0(v17, v19);
  if (v12)
    goto LABEL_10;
  v32 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 56);
  v33 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v20, v22);
}

uint64_t sub_1000882D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100132D20, v1, v5, 0, v6, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000012, 0x8000000100132DA0, 277);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100088418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100132D20, v1, v5, 0, v6, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000012, 0x8000000100132DA0, 277);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100088560()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10000CE40((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ACLFetcher()
{
  return objc_opt_self(_TtC7idcredd10ACLFetcher);
}

uint64_t sub_1000885AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_100176D48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

SecAccessControlRef sub_1000885EC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Class isa;
  SecAccessControlRef v20;
  CFErrorRef v22;
  void (*v23)(char *, _QWORD, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  SecAccessControlRef v31;
  _BYTE v32[64];
  _BYTE v33[64];
  _BYTE v34[80];
  CFErrorRef error;

  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  error = 0;
  v31 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (v31)
  {
    v13 = sub_100008E84(&qword_100176D80);
    inited = swift_initStackObject(v13, v34);
    *(_OWORD *)(inited + 16) = xmmword_10012A5D0;
    *(_QWORD *)(inited + 32) = 0x63666E2C6573;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    v15 = sub_100008E84(&qword_100176D60);
    v16 = swift_initStackObject(v15, v33);
    v29 = xmmword_10012A6D0;
    *(_OWORD *)(v16 + 16) = xmmword_10012A6D0;
    v30 = v4;
    *(_QWORD *)(v16 + 32) = 0x6665726B63;
    *(_QWORD *)(v16 + 40) = 0xE500000000000000;
    *(_QWORD *)(v16 + 48) = a1;
    *(_QWORD *)(v16 + 56) = a2;
    sub_100005A38(a1, a2);
    *(_QWORD *)(inited + 48) = sub_10003E78C(v16);
    *(_QWORD *)(inited + 56) = 0x61752C6C612C6573;
    *(_QWORD *)(inited + 64) = 0xE800000000000000;
    v17 = swift_initStackObject(v15, v32);
    *(_OWORD *)(v17 + 16) = v29;
    *(_QWORD *)(v17 + 32) = 0x6665726B63;
    *(_QWORD *)(v17 + 40) = 0xE500000000000000;
    *(_QWORD *)(v17 + 48) = a3;
    *(_QWORD *)(v17 + 56) = a4;
    sub_100005A38(a3, a4);
    *(_QWORD *)(inited + 72) = sub_10003E78C(v17);
    v18 = sub_10003E8B0(inited);
    sub_100008E84(&qword_100176D68);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v20 = v31;
    SecAccessControlSetConstraints(v31, isa);

    return v20;
  }
  else
  {
    v22 = error;
    v23 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
    v23(v12, enum case for DIPError.Code.internalError(_:), v9);
    v24 = errorFromCFError(_:_:_:)(v22, 0xD00000000000001FLL, 0x8000000100132EF0, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v23(v12, enum case for DIPError.Code.systemSecError(_:), v9);
    swift_errorRetain(v24);
    v25 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_10000745C();
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100132F10, v24, v12, 0, v25, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000049, 0x8000000100133080, 129);
    swift_willThrow(v28);
    swift_errorRelease(v24);
    return v31;
  }
}

SecAccessControlCreateFlags sub_100088978(SecAccessControlCreateFlags a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  SecAccessControlRef v8;
  SecAccessControlRef v9;
  unint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  __SecAccessControl *v13;
  Class isa;
  CFErrorRef v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  CFErrorRef error;

  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  error = 0;
  v8 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, a1, &error);
  if (v8)
  {
    v9 = v8;
    v10 = sub_10003E548((uint64_t)_swiftEmptyArrayStorage);
    if ((a2 & 1) != 0)
    {
      v11 = sub_10003E8C8((uint64_t)&off_100167108);
      v27 = sub_100008E84((uint64_t *)&unk_100178A60);
      *(_QWORD *)&v26 = v11;
      sub_100041220(&v26, v25);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      v24 = v10;
      sub_10011FB90(v25, 1852273519, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      v10 = v24;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if (*(_QWORD *)(v10 + 16))
    {
      v13 = v9;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v10);
      SecAccessControlSetConstraints(v13, isa);

    }
    else
    {
      swift_bridgeObjectRelease(v10);
    }
    v17 = SecAccessControlCopyData(v9);
    if (v17)
    {
      v18 = (void *)v17;
      a1 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);

    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.systemSecError(_:), v4);
      a1 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v19 = type metadata accessor for DIPError(0);
      v20 = sub_10000745C();
      swift_allocError(v19, v20, 0, 0);
      v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100132F80, 0, v7, 0, a1, 0xD00000000000004BLL, 0x8000000100132D50, 0xD000000000000028, 0x8000000100132FC0, 311);
      swift_willThrow(v21);
    }

  }
  else
  {
    v15 = error;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    errorFromCFError(_:_:_:)(v15, 0xD000000000000012, 0x8000000100132F60, v7);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v16);
  }
  return a1;
}

SecAccessControlRef sub_100088C94(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  SecAccessControlRef v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Class isa;
  CFErrorRef v16;
  void (*v17)(_BYTE *, _QWORD, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v24[64];
  _BYTE v25[128];
  CFErrorRef error;

  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  error = 0;
  v8 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (v8)
  {
    v9 = sub_100008E84(&qword_1001757D0);
    inited = swift_initStackObject(v9, v25);
    *(_OWORD *)(inited + 16) = xmmword_10012A5D0;
    *(_QWORD *)(inited + 32) = 1818584175;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_QWORD *)(inited + 80) = 1852273519;
    *(_QWORD *)(inited + 88) = 0xE400000000000000;
    v11 = sub_100008E84(&qword_100176D60);
    v12 = swift_initStackObject(v11, v24);
    *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v12 + 32) = 0x6665726B63;
    *(_QWORD *)(v12 + 40) = 0xE500000000000000;
    *(_QWORD *)(v12 + 48) = a1;
    *(_QWORD *)(v12 + 56) = a2;
    sub_100005A38(a1, a2);
    v13 = sub_10003E78C(v12);
    *(_QWORD *)(inited + 120) = sub_100008E84(&qword_100176D68);
    *(_QWORD *)(inited + 96) = v13;
    v14 = sub_10003E548(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    SecAccessControlSetConstraints(v8, isa);

  }
  else
  {
    v16 = error;
    v17 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104);
    v17(v7, enum case for DIPError.Code.internalError(_:), v4);
    v18 = errorFromCFError(_:_:_:)(v16, 0xD00000000000001FLL, 0x8000000100132EF0, v7);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v17(v7, enum case for DIPError.Code.systemSecError(_:), v4);
    swift_errorRetain(v18);
    v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_10000745C();
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100132F10, v18, v7, 0, v19, 0xD00000000000004BLL, 0x8000000100132D50, 0xD00000000000002ELL, 0x8000000100132F30, 97);
    swift_willThrow(v22);
    swift_errorRelease(v18);
  }
  return v8;
}

uint64_t getEnumTagSinglePayload for ACLFetcher.PayloadProtectionScenario(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ACLFetcher.PayloadProtectionScenario(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100089098 + 4 * byte_10012B2CF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000890CC + 4 * byte_10012B2CA[v4]))();
}

uint64_t sub_1000890CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000890D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000890DCLL);
  return result;
}

uint64_t sub_1000890E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000890F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000890F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000890FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ACLFetcher.PayloadProtectionScenario()
{
  return &type metadata for ACLFetcher.PayloadProtectionScenario;
}

unint64_t sub_10008911C()
{
  unint64_t result;

  result = qword_100176D88;
  if (!qword_100176D88)
  {
    result = swift_getWitnessTable(&unk_10012B35C, &type metadata for ACLFetcher.PayloadProtectionScenario);
    atomic_store(result, &qword_100176D88);
  }
  return result;
}

uint64_t sub_100089160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc(dword_100176D9C);
  *(_QWORD *)(v7 + 16) = v12;
  *v12 = v7;
  v12[1] = sub_10000935C;
  return sub_1000891CC(a4, a5, a6, a7);
}

uint64_t sub_1000891CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_100089264, 0, 0);
}

uint64_t sub_100089264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t type;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  defaultLogger()(a1);
  swift_retain_n(v2, 4);
  swift_bridgeObjectRetain_n(v4, 4);
  v5 = swift_bridgeObjectRetain_n(v3, 4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v56 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 80);
    v57 = *(_QWORD *)(v1 + 88);
    v59 = *(_QWORD *)(v1 + 136);
    type = v7;
    v9 = *(_QWORD *)(v1 + 72);
    v53 = *(_QWORD *)(v1 + 64);
    v10 = *(_QWORD *)(v1 + 56);
    v11 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(64, -1);
    v60 = v55;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v8);
    v13 = Array.description.getter(v12, &type metadata for String);
    v15 = v14;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v1 + 40) = sub_10003FA80(v13, v15, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v11 + 4);
    swift_bridgeObjectRelease(v15);
    swift_release_n(v10, 2);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease_n(v8, 2);
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v1 + 48) = sub_10003FA80(v53, v9, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v11 + 14);
    swift_bridgeObjectRelease_n(v9, 3);
    swift_release_n(v10, 2);
    swift_bridgeObjectRelease_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "IDCSCoreDataBackfillProvider: performBackfill partitions %s docType %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8);
    v17 = v16(v59, v57);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 136);
    v19 = *(_QWORD *)(v1 + 88);
    v20 = *(_QWORD *)(v1 + 96);
    v22 = *(_QWORD *)(v1 + 72);
    v21 = *(_QWORD *)(v1 + 80);
    swift_release_n(*(_QWORD *)(v1 + 56), 4);
    swift_bridgeObjectRelease_n(v22, 4);
    swift_bridgeObjectRelease_n(v21, 4);

    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v17 = v16(v18, v19);
  }
  *(_QWORD *)(v1 + 144) = v16;
  v23 = defaultLogger()(v17);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "In performBackfillOperationsIfUserDefaultDoesNotExist", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }
  v27 = *(_QWORD *)(v1 + 128);
  v28 = *(_QWORD *)(v1 + 88);

  v16(v27, v28);
  v29 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v1 + 152) = v29;
  v30 = objc_msgSend(v29, "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "stringForKey:", v31);

  if (v32)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    defaultLogger()(v36);
    swift_bridgeObjectRetain(v35);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(_QWORD *)(v1 + 120);
    v42 = *(_QWORD *)(v1 + 88);
    if (v40)
    {
      v58 = *(_QWORD *)(v1 + 120);
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v60 = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(v35);
      *(_QWORD *)(v1 + 32) = sub_10003FA80(v33, v35, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v43 + 4);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "IDCSCoreDataBackfillProvider idcreddDatabaseBackfillVersion exists %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      v45 = v58;
      v46 = v42;
    }
    else
    {
      swift_bridgeObjectRelease_n(v35, 2);

      v45 = v41;
      v46 = v42;
    }
    v16(v45, v46);
    v49 = *(_QWORD *)(v1 + 128);
    v51 = *(_QWORD *)(v1 + 112);
    v50 = *(_QWORD *)(v1 + 120);
    v52 = *(_QWORD *)(v1 + 104);
    swift_task_dealloc(*(_QWORD *)(v1 + 136));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v47 = (_QWORD *)swift_task_alloc(dword_100176DA4);
    *(_QWORD *)(v1 + 160) = v47;
    *v47 = v1;
    v47[1] = sub_1000897D8;
    return sub_100089C28(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  }
}

uint64_t sub_1000897D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100089A58;
  else
    v3 = sub_10008983C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008983C()
{
  uint64_t v0;
  id v1;
  NSString v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = objc_msgSend(*(id *)(v0 + 152), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setObject:forKey:", v2, v3);

  v5 = defaultLogger()(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v21 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v0 + 24) = sub_10003FA80(3223089, 0xE300000000000000, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "IDCSCoreDataBackfillProvider performBackfillOperationsIfUserDefaultDoesNotExist: IDCSDefaultsKeys succesfully updated to %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v8(v9, v10);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);

    v13(v14, v15);
  }
  v16 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100089A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 168);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 168);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v1 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "IDCSCoreDataBackfillProvider caught error %@", v7, 0xCu);
    v10 = sub_100008E84(&qword_100175350);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 168);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  (*(void (**)(_QWORD, _QWORD))(v1 + 144))(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 88));
  v12 = *(_QWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v15 = *(_QWORD *)(v1 + 104);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100089C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100089C90, 0, 0);
}

uint64_t sub_100089C90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1[4];
  v4 = v1[7];
  v3 = v1[8];
  v5 = v1[5];
  defaultLogger()(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_retain_n(v5, 2);
  swift_bridgeObjectRetain_n(v4, 2);
  v6 = swift_bridgeObjectRetain_n(v3, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v37 = v1[9];
    v38 = v1[11];
    v9 = v1[7];
    v35 = v1[8];
    v36 = v1[10];
    v10 = v1[4];
    v32 = v1[6];
    v33 = v1[5];
    v11 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v39 = v34;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v10);
    v13 = Array.description.getter(v12, &type metadata for String);
    v15 = v14;
    swift_bridgeObjectRelease(v10);
    v1[2] = sub_10003FA80(v13, v15, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v11 + 4);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v10, 2);
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    v1[3] = sub_10003FA80(v32, v9, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v11 + 14);
    swift_bridgeObjectRelease_n(v9, 3);
    swift_release_n(v33, 2);
    swift_bridgeObjectRelease_n(v35, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "IDCSCoreDataBackfillProvider updateEmptyRegion partitions %s docType %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  }
  else
  {
    v17 = v1[10];
    v16 = v1[11];
    v19 = v1[8];
    v18 = v1[9];
    v20 = v1[7];
    v21 = v1[5];
    swift_bridgeObjectRelease_n(v1[4], 2);
    swift_release_n(v21, 2);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v19, 2);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  v22 = v1[7];
  v23 = v1[8];
  v25 = v1[5];
  v24 = v1[6];
  v26 = v1[4];
  v27 = (_QWORD *)swift_allocObject(&unk_100169870, 56, 7);
  v1[12] = v27;
  v27[2] = v25;
  v27[3] = v24;
  v27[4] = v22;
  v27[5] = v23;
  v27[6] = v26;
  v28 = swift_allocObject(&unk_100169898, 32, 7);
  v1[13] = v28;
  *(_QWORD *)(v28 + 16) = sub_10008A6E0;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_bridgeObjectRetain(v26);
  swift_retain(v25);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_retain(v27);
  v30 = (_QWORD *)swift_task_alloc(v29);
  v1[14] = v30;
  *v30 = v1;
  v30[1] = sub_100089FEC;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v30, sub_10006CC88, v28, (char *)&type metadata for () + 8);
}

uint64_t sub_100089FEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008A094;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 96);
    swift_release(*(_QWORD *)(v2 + 104));
    swift_release(v5);
    v4 = sub_10008A060;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008A060()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10008A0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v59 = a1;
  v64 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v64 - 8);
  v9 = __chkstk_darwin(v64);
  v11 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  *(_QWORD *)&v61 = (char *)v55 - v12;
  v13 = type metadata accessor for StoredPayload(0);
  v14 = (void *)static StoredPayload.fetchRequest()();
  sub_100039BA4();
  v15 = sub_100008E84(&qword_100174878);
  v16 = swift_allocObject(v15, 72, 7);
  v60 = xmmword_10012A6D0;
  *(_OWORD *)(v16 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10000EA3C();
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  v17 = NSPredicate.init(format:_:)(0xD000000000000020, 0x8000000100133100, v16);
  if (*(_QWORD *)(a6 + 16))
  {
    v18 = sub_100008E84(&qword_1001748A8);
    v19 = swift_allocObject(v18, 48, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10012A6E0;
    v20 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v20 + 16) = v60;
    *(_QWORD *)(v20 + 56) = sub_100008E84(&qword_100177CB0);
    *(_QWORD *)(v20 + 64) = sub_10008A724();
    *(_QWORD *)(v20 + 32) = a6;
    swift_bridgeObjectRetain(a6);
    v21 = NSPredicate.init(format:_:)(0xD00000000000001ALL, 0x8000000100133130, v20);
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v17;
    v65 = v19;
    specialized Array._endMutation()(v21);
    v22 = v65;
    v23 = (id)v17;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v25 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

    objc_msgSend(v14, "setPredicate:", v25);
  }
  else
  {
    objc_msgSend(v14, "setPredicate:", v17);
  }
  v26 = v63;
  v27 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  if (v26)
  {

  }
  else
  {
    v28 = v27;
    v55[1] = 0;
    defaultLogger()(v27);
    v29 = swift_bridgeObjectRetain_n(v28, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = v28 >> 62;
    v63 = v28;
    if (!v32)
    {

      swift_bridgeObjectRelease_n(v28, 2);
      goto LABEL_11;
    }
    v28 = swift_slowAlloc(12, -1);
    *(_DWORD *)v28 = 134217984;
    if (v33)
      goto LABEL_28;
    v34 = v63;
    v35 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease(v34);
      v65 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v28 + 4);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "IDCSCoreDataBackfillProvider updateEmptyRegion result count: %ld", (uint8_t *)v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);

LABEL_11:
      v56 = (id)v17;
      v57 = v14;
      v14 = *(void **)(v58 + 8);
      ((void (*)(_QWORD, uint64_t))v14)(v61, v64);
      if (v33)
      {
        v33 = v63;
        if (v63 < 0)
          v53 = v63;
        else
          v53 = v63 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v63);
        v17 = _CocoaArrayWrapper.endIndex.getter(v53);
        swift_bridgeObjectRelease(v33);
        if (!v17)
          goto LABEL_25;
      }
      else
      {
        v33 = v63;
        v17 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v17)
          goto LABEL_25;
      }
      if (v17 >= 1)
        break;
      __break(1u);
LABEL_28:
      v34 = v63;
      if (v63 < 0)
        v54 = v63;
      else
        v54 = v63 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v63);
      v35 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease(v34);
    }
    v37 = 0;
    v38 = v33 & 0xC000000000000001;
    *(_QWORD *)&v36 = 136315138;
    v61 = v36;
    *(_QWORD *)&v60 = (char *)&type metadata for Any + 8;
    v62 = v11;
    do
    {
      if (v38)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v33);
      else
        v39 = *(id *)(v33 + 8 * v37 + 32);
      v40 = v39;
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v40, "setRegion:", v41);

      v43 = defaultLogger()(v42);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = v17;
        v47 = v38;
        v48 = v14;
        v49 = swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v65 = v50;
        *(_DWORD *)v49 = v61;
        *(_QWORD *)(v49 + 4) = sub_10003FA80(21333, 0xE200000000000000, &v65);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "IDCSCoreDataBackfillProvider updateEmptyRegion region updated %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy(v50, 1, v60);
        v51 = v50;
        v33 = v63;
        swift_slowDealloc(v51, -1, -1);
        v52 = v49;
        v14 = v48;
        v38 = v47;
        v17 = v46;
        v11 = v62;
        swift_slowDealloc(v52, -1, -1);
      }

      ((void (*)(char *, uint64_t))v14)(v11, v64);
      ++v37;
    }
    while (v17 != v37);
LABEL_25:
    swift_bridgeObjectRelease(v33);
    sub_1000091F8();

  }
}

uint64_t sub_10008A6A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10008A6E0(uint64_t a1)
{
  uint64_t *v1;

  sub_10008A0DC(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10008A700()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10008A724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100178A50;
  if (!qword_100178A50)
  {
    v1 = sub_100016404(&qword_100177CB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100178A50);
  }
  return result;
}

uint64_t sub_10008A770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_defaultActor_initialize(v2);
  v9 = defaultLogger()(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Initializing InaccessiblyEncryptedPayloadProcessor", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_10008A878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t i;
  BOOL v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t result;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;

  v1 = sub_100008E84(&qword_1001752E8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v100 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v104 = (char *)&v85 - v5;
  v6 = type metadata accessor for AnyCodable(0);
  v97 = *(_QWORD *)(v6 - 8);
  v98 = v6;
  __chkstk_darwin(v6);
  v96 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v8 = *(_QWORD *)(v106 - 8);
  v9 = __chkstk_darwin(v106);
  v95 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v105 = (char *)&v85 - v11;
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v12 + 64);
  v85 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v86 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain_n(v12, 2);
  v17 = 0;
  v18 = _swiftEmptyDictionarySingleton;
  v101 = v2;
  v102 = v1;
  v89 = v12;
  v94 = v8;
  v92 = _swiftEmptyDictionarySingleton;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v16));
  v20 = (v16 - 1) & v16;
  for (i = v19 | (v17 << 6); ; i = __clz(__rbit64(v23)) + (v17 << 6))
  {
    v90 = v20;
    v91 = v17;
    v25 = *(_QWORD *)(v12 + 56);
    v26 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * i);
    v27 = v26[1];
    v93 = *v26;
    v28 = *(_QWORD *)(v25 + 8 * i);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v87 = v27;
      swift_bridgeObjectRetain_n(v27, 2);
      swift_bridgeObjectRetain_n(v28, 2);
      v88 = v28;
      v30 = (uint64_t *)(v28 + 40);
      v31 = _swiftEmptyDictionarySingleton;
      while (1)
      {
        v103 = v31;
        v99 = v29;
        v33 = *(v30 - 1);
        v34 = *v30;
        v35 = qword_1001743F8;
        swift_bridgeObjectRetain_n(*v30, 2);
        if (v35 != -1)
          swift_once(&qword_1001743F8, sub_100073610);
        v36 = v98;
        v37 = sub_100075EC8(v98, (uint64_t)qword_100178D70);
        v38 = v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v37, v36);
        v39 = v105;
        ISO18013IssuerSignedItem.init(digestID:random:elementIdentifier:elementValue:)(0, 0, 0xC000000000000000, v33, v34, v38);
        v40 = v95;
        v41 = v106;
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v95, v39, v106);
        v42 = type metadata accessor for CBOREncoder(0);
        v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
        v44 = CBOREncoder.init()(v43);
        v45 = sub_1000058C8(&qword_100176888, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
        v46 = sub_1000058C8(&qword_100176890, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
        v47 = v104;
        v48 = v107;
        CBOREncodedCBOR.init(value:tag:encoder:)(v40, 0, v44, v41, v45, v46);
        v107 = v48;
        if (v48)
        {
          (*(void (**)(char *, uint64_t))(v94 + 8))(v105, v106);
          v82 = v89;
          swift_release(v89);
          swift_bridgeObjectRelease(v82);
          v18 = v92;
          swift_bridgeObjectRelease(v92);
          swift_bridgeObjectRelease_n(v87, 2);
          swift_bridgeObjectRelease_n(v88, 2);
          swift_bridgeObjectRelease(v34);
          v83 = v103;
          goto LABEL_55;
        }
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, v47, v102);
        swift_bridgeObjectRetain(v34);
        v49 = v103;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v103);
        v108 = v49;
        v51 = v33;
        v53 = sub_1000FBC04(v33, v34);
        v54 = v49[2];
        v55 = (v52 & 1) == 0;
        v56 = v54 + v55;
        if (__OFADD__(v54, v55))
          break;
        v57 = v52;
        if (v49[3] >= v56)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_10007DD1C();
        }
        else
        {
          sub_10007BE64(v56, isUniquelyReferenced_nonNull_native);
          v58 = sub_1000FBC04(v33, v34);
          if ((v57 & 1) != (v59 & 1))
            goto LABEL_63;
          v53 = v58;
        }
        v8 = v94;
        v31 = v108;
        v60 = v101;
        if ((v57 & 1) != 0)
        {
          v32 = v102;
          (*(void (**)(unint64_t, char *, uint64_t))(v101 + 40))(v108[7] + *(_QWORD *)(v101 + 72) * v53, v100, v102);
        }
        else
        {
          v108[(v53 >> 6) + 8] |= 1 << v53;
          v61 = (uint64_t *)(v31[6] + 16 * v53);
          *v61 = v51;
          v61[1] = v34;
          v32 = v102;
          (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v31[7] + *(_QWORD *)(v60 + 72) * v53, v100, v102);
          v62 = v31[2];
          v22 = __OFADD__(v62, 1);
          v63 = v62 + 1;
          if (v22)
            goto LABEL_58;
          v31[2] = v63;
          swift_bridgeObjectRetain(v34);
        }
        v30 += 2;
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(0x8000000000000000);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v104, v32);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v105, v106);
        swift_bridgeObjectRelease(v34);
        v29 = v99 - 1;
        if (v99 == 1)
        {
          v28 = v88;
          swift_bridgeObjectRelease(v88);
          v64 = v87;
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    v64 = v27;
    swift_bridgeObjectRetain_n(v27, 2);
    swift_bridgeObjectRetain(v28);
    v31 = _swiftEmptyDictionarySingleton;
LABEL_38:
    v65 = v92;
    v66 = swift_isUniquelyReferenced_nonNull_native(v92);
    v108 = v65;
    v67 = v64;
    v69 = sub_1000FBC04(v93, v64);
    v70 = v65[2];
    v71 = (v68 & 1) == 0;
    v72 = v70 + v71;
    if (__OFADD__(v70, v71))
      goto LABEL_59;
    v73 = v68;
    if (v65[3] < v72)
    {
      sub_10007BE58(v72, v66);
      v74 = sub_1000FBC04(v93, v67);
      if ((v73 & 1) != (v75 & 1))
        goto LABEL_63;
      v69 = v74;
LABEL_43:
      v76 = v28;
      v18 = v108;
      if ((v73 & 1) != 0)
        goto LABEL_44;
      goto LABEL_50;
    }
    if ((v66 & 1) != 0)
      goto LABEL_43;
    v76 = v28;
    sub_10007DD10();
    v18 = v108;
    if ((v73 & 1) != 0)
    {
LABEL_44:
      v77 = v18;
      v78 = v18[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v78 + 8 * v69));
      *(_QWORD *)(v78 + 8 * v69) = v31;
      v18 = v77;
      goto LABEL_52;
    }
LABEL_50:
    v18[(v69 >> 6) + 8] |= 1 << v69;
    v79 = (_QWORD *)(v18[6] + 16 * v69);
    *v79 = v93;
    v79[1] = v67;
    *(_QWORD *)(v18[7] + 8 * v69) = v31;
    v80 = v18[2];
    v22 = __OFADD__(v80, 1);
    v81 = v80 + 1;
    if (v22)
      goto LABEL_61;
    v18[2] = v81;
    swift_bridgeObjectRetain(v67);
LABEL_52:
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease_n(v67, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v16 = v90;
    v17 = v91;
    v12 = v89;
    v92 = v18;
    if (v90)
      goto LABEL_4;
LABEL_5:
    v22 = __OFADD__(v17++, 1);
    if (v22)
      goto LABEL_60;
    if (v17 >= v86)
      goto LABEL_56;
    v23 = *(_QWORD *)(v85 + 8 * v17);
    if (!v23)
      break;
LABEL_19:
    v20 = (v23 - 1) & v23;
  }
  v24 = v17 + 1;
  if (v17 + 1 >= v86)
    goto LABEL_56;
  v23 = *(_QWORD *)(v85 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v17 + 2;
  if (v17 + 2 >= v86)
    goto LABEL_56;
  v23 = *(_QWORD *)(v85 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v17 + 3;
  if (v17 + 3 >= v86)
    goto LABEL_56;
  v23 = *(_QWORD *)(v85 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v17 + 4;
  if (v17 + 4 >= v86)
    goto LABEL_56;
  v23 = *(_QWORD *)(v85 + 8 * v24);
  if (v23)
  {
LABEL_18:
    v17 = v24;
    goto LABEL_19;
  }
  v24 = v17 + 5;
  if (v17 + 5 < v86)
  {
    v23 = *(_QWORD *)(v85 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_62;
        if (v17 >= v86)
          goto LABEL_56;
        v23 = *(_QWORD *)(v85 + 8 * v17);
        ++v24;
        if (v23)
          goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
LABEL_56:
  swift_release(v12);
  v83 = (_QWORD *)v12;
LABEL_55:
  swift_bridgeObjectRelease(v83);
  return (uint64_t)v18;
}

uint64_t sub_10008B070()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for DIPError.Code(0);
  v1[2] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[3] = v3;
  v1[4] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B0CC, v0, 0);
}

uint64_t sub_10008B0CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 104))(v1, enum case for DIPError.Code.idcsEncryptedPayloadInaccessible(_:), *(_QWORD *)(v0 + 16));
  v2 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v3 = type metadata accessor for DIPError(0);
  v4 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v3, v4, 0, 0);
  v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000046, 0x8000000100133280, 0, v1, 0, v2, 0xD00000000000007ALL, 0x8000000100133200, 0xD000000000000018, 0x800000010012F5C0, 53);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B1F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B254, v1, 0);
}

uint64_t sub_10008B254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10008A878();
  v2 = sub_100072BCC(*(_QWORD *)(v0 + 16), v1);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10008B3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B444, v2, 0);
}

uint64_t sub_10008B444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = sub_10008A878();
  v2 = *(_QWORD *)(v0 + 56);
  v3 = sub_1000AAB28(*(_QWORD *)(v0 + 16), v1, *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
}

uint64_t sub_10008B5C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B628, v0, 0);
}

uint64_t sub_10008B628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10008A878();
  v2 = sub_1000757BC(v1);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10008B7C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for DIPError.Code(0);
  v1[2] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[3] = v3;
  v1[4] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008B81C, v0, 0);
}

uint64_t sub_10008B81C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 104))(v1, enum case for DIPError.Code.idcsEncryptedPayloadInaccessible(_:), *(_QWORD *)(v0 + 16));
  v2 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v3 = type metadata accessor for DIPError(0);
  v4 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v3, v4, 0, 0);
  v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x80000001001331B0, 0, v1, 0, v2, 0xD00000000000007ALL, 0x8000000100133200, 0xD000000000000010, 0x800000010012E6C0, 89);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B944()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InaccessiblyEncryptedPayloadProcessor()
{
  return objc_opt_self(_TtC7idcredd37InaccessiblyEncryptedPayloadProcessor);
}

uint64_t sub_10008B988()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100176DD4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000935C;
  return sub_10008B070();
}

uint64_t sub_10008B9D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100176DDC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000161F0;
  return sub_10008B1F4(a1);
}

uint64_t sub_10008BA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100176DE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016478;
  return sub_10008B3E0(a1, a2);
}

uint64_t sub_10008BA80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  return swift_task_switch(sub_10008BA98, *v1, 0);
}

uint64_t sub_10008BA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for COSE_Sign1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008BAEC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100176DEC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100016478;
  return sub_10008B5C8();
}

uint64_t sub_10008BB34()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100176DF4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10008BB7C;
  return sub_10008B7C0();
}

uint64_t sub_10008BB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_10008BBE0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10008BC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000150E8(a1, &qword_100174E30);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9, v13);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100169AC8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100177038, v16);
}

